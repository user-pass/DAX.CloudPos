"use strict";
var Commerce;
(function (Commerce) {
    "use strict";
    var ViewConfiguration = (function () {
        function ViewConfiguration(viewConfiguration) {
            this.page = viewConfiguration.page;
            this.path = viewConfiguration.path;
            this.phonePage = viewConfiguration.phonePage;
            this.viewController = viewConfiguration.viewController;
        }
        Object.defineProperty(ViewConfiguration.prototype, "isPhoneView", {
            get: function () {
                return Commerce.Config.isPhone && this.page !== this.phonePage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewConfiguration.prototype, "deviceSpecificViewName", {
            get: function () {
                if (this.isPhoneView) {
                    return this.phonePage;
                }
                else {
                    return this.page;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewConfiguration.prototype, "deviceSpecificViewLocation", {
            get: function () {
                if (this.isPhoneView) {
                    return this._phonePagePath;
                }
                else {
                    return this._pagePath;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewConfiguration.prototype, "pagePath", {
            get: function () {
                if (Commerce.StringExtensions.isNullOrWhitespace(this._pagePath)) {
                    ViewConfiguration.pageFullPathTemplate[1] = this.path;
                    ViewConfiguration.pageFullPathTemplate[3] = this.page;
                    this._pagePath = ViewConfiguration.pageFullPathTemplate.join("");
                }
                return this._pagePath;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewConfiguration.prototype, "phonePagePath", {
            get: function () {
                if (Commerce.StringExtensions.isNullOrWhitespace(this._phonePagePath)) {
                    ViewConfiguration.pageFullPathTemplate[1] = this.path;
                    ViewConfiguration.pageFullPathTemplate[3] = this.phonePage;
                    this._phonePagePath = ViewConfiguration.pageFullPathTemplate.join("");
                }
                return this._phonePagePath;
            },
            enumerable: true,
            configurable: true
        });
        ViewConfiguration.pageFullPathTemplate = ["Views" + "/", "", "/", "", ".html"];
        return ViewConfiguration;
    }());
    Commerce.ViewConfiguration = ViewConfiguration;
    var ViewModelAdapterImpl = (function () {
        function ViewModelAdapterImpl() {
            this.previousNonPseudoLocale = null;
            ViewModelAdapterImpl.DEVELOPER_MODE_ENABLE_PSEUDO_LOCALIZATION
                = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.ENABLE_PSEUDO_LOCALIZATION) === "true";
        }
        ViewModelAdapterImpl.prototype.getLoginViewName = function () {
            return "LoginView";
        };
        ViewModelAdapterImpl.prototype.navigate = function (viewName, initialState) {
            if (Commerce.StringExtensions.isEmptyOrWhitespace(viewName)) {
                throw new Error("ViewModelAdapterImpl.navigate: View name cannot be null or empty.");
            }
            var viewSettings = ViewModelAdapterImpl.navigateActions[viewName];
            if (Commerce.ObjectExtensions.isNullOrUndefined(viewSettings)) {
                throw new Error(Commerce.StringExtensions.format("ViewModelAdapterImpl.navigate: Unable to find settings for view '{0}'", viewName));
            }
            var correlationId = Commerce.LoggerHelper.getFormattedCorrelationId(initialState);
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            }
            Commerce.PerformanceLogger.logNavigationStart(viewName, correlationId);
            Commerce.navigator.navigate(viewSettings, initialState);
        };
        ViewModelAdapterImpl.prototype.collapse = function (viewName) {
            var viewSettings = ViewModelAdapterImpl.navigateActions[viewName];
            Commerce.navigator.collapse(viewSettings);
        };
        ViewModelAdapterImpl.prototype.collapseAndNavigate = function (viewName, initialState) {
            var viewSettings = ViewModelAdapterImpl.navigateActions[viewName];
            Commerce.navigator.collapseAndNavigate(viewSettings, initialState);
        };
        ViewModelAdapterImpl.prototype.navigateBack = function (correlationId) {
            Commerce.navigator.navigateBack(correlationId);
        };
        ViewModelAdapterImpl.prototype.disableNavigationDuringAsyncExecution = function (methodToExecute) {
            return Commerce.navigator.disableNavigationDuringAsyncExecution(methodToExecute);
        };
        ViewModelAdapterImpl.prototype.bind = function (template, source) {
            WinJS.Binding.processAll(template, WinJS.Binding.as(source));
            ko.applyBindings(source, template);
        };
        ViewModelAdapterImpl.prototype.isInView = function (viewName) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.navigator) || Commerce.ObjectExtensions.isNullOrUndefined(Commerce.navigator.pageControl)) {
                return false;
            }
            return this._viewNameContains(viewName);
        };
        ViewModelAdapterImpl.prototype.isInLogin = function () {
            return Commerce.ViewModelAdapter.isInView(this.getLoginViewName()) ||
                $(document).find("#loginDialog").length >= 1;
        };
        ViewModelAdapterImpl.prototype.goHome = function () {
            this.navigate(this._homeView);
        };
        ViewModelAdapterImpl.prototype.getResourceString = function (resourceName) {
            return Commerce.StringResourceManager.getString(resourceName);
        };
        ViewModelAdapterImpl.prototype.setDeveloperModeEnablePseudoLocalization = function (enable) {
            if (ViewModelAdapterImpl.DEVELOPER_MODE_ENABLE_PSEUDO_LOCALIZATION !== enable) {
                ViewModelAdapterImpl.DEVELOPER_MODE_ENABLE_PSEUDO_LOCALIZATION = enable;
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.ENABLE_PSEUDO_LOCALIZATION, Commerce.StringExtensions.EMPTY + enable);
                var locale = enable ? ViewModelAdapterImpl.PSEUDO_LOCALE : this.previousNonPseudoLocale;
                return this.setApplicationLanguageAsync(locale);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        ViewModelAdapterImpl.prototype.getDeveloperModeEnablePseudoLocalization = function () {
            return ViewModelAdapterImpl.DEVELOPER_MODE_ENABLE_PSEUDO_LOCALIZATION;
        };
        ViewModelAdapterImpl.prototype.setApplicationLanguageAsync = function (languageTag) {
            var _this = this;
            if (Commerce.CSSHelpers.isCSSDeveloperMode() && ViewModelAdapterImpl.DEVELOPER_MODE_ENABLE_PSEUDO_LOCALIZATION) {
                if (languageTag !== ViewModelAdapterImpl.PSEUDO_LOCALE) {
                    this.previousNonPseudoLocale = languageTag;
                }
                languageTag = ViewModelAdapterImpl.PSEUDO_LOCALE;
            }
            else {
                languageTag = languageTag || this.getDefaultUILanguage();
                this.previousNonPseudoLocale = languageTag;
            }
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                return Commerce.Host.instance.globalization.setApplicationLanguageAsync(languageTag);
            }).enqueue(function () {
                _this.changeUILayoutDirection(languageTag);
                var storeCulture = Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration)
                    ? _this.getDefaultUILanguage() : Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName;
                if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Extensibility.ExtensionCultureManager)) {
                    return Commerce.AsyncResult.createResolved();
                }
                return Commerce.AsyncResult.fromPromise(Commerce.Extensibility.ExtensionCultureManager.setExtensionCultures(storeCulture, languageTag));
            });
            return asyncQueue.run();
        };
        ViewModelAdapterImpl.prototype.getCurrentAppLanguage = function () {
            return Commerce.Host.instance.globalization.getApplicationLanguage();
        };
        ViewModelAdapterImpl.prototype.getDefaultUILanguage = function () {
            return Commerce.Host.instance.globalization.getDefaultLanguageTag();
        };
        ViewModelAdapterImpl.prototype.navigateToLoginPage = function (isAppInitializing) {
            if (Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.INITIAL_SYNC_COMPLETED_KEY) === "true") {
                if (Commerce.Config.aadEnabled
                    && !Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode()
                    && (Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED) !== "true")) {
                    Commerce.Host.instance.azureActiveDirectoryAdapter.clearCache();
                }
                this.navigate(this.getLoginViewName());
            }
            else if (Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.AAD_LOGON_IN_PROCESS_KEY) === "true") {
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.AAD_LOGON_IN_PROCESS_KEY, Commerce.StringExtensions.EMPTY);
                var activationParameters = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.ACTIVATION_PAGE_PARAMETERS_KEY);
                Commerce.Helpers.DeviceActivationHelper.navigateToActivationProcessPage(activationParameters);
            }
            else if (isAppInitializing) {
                Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
            }
            else {
                Commerce.Helpers.DeviceActivationHelper.navigateToActivationPage();
            }
        };
        ViewModelAdapterImpl.prototype.navigateToLockPage = function (staffId) {
            var lockRegisterViewOptions = {
                OperatorId: staffId
            };
            Commerce.ViewModelAdapter.navigate("LockRegister", lockRegisterViewOptions);
        };
        ViewModelAdapterImpl.prototype.getMonthName = function (monthIndex) {
            var dateformatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.MONTH_FULL);
            var dateToFormat = new Date();
            dateToFormat.setMonth(monthIndex);
            return dateformatter.format(dateToFormat);
        };
        ViewModelAdapterImpl.prototype.displayMessageWithOptions = function (messageResourceID, messageOptions, correlationID) {
            var messageFormatData = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                messageFormatData[_i - 3] = arguments[_i];
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(messageOptions)) {
                messageOptions = new Commerce.MessageOptions();
            }
            var title = Commerce.ViewModelAdapter.getResourceString(messageOptions.titleResx);
            var additionalInfo = Commerce.ViewModelAdapter.getResourceString(messageOptions.additionalInfoResx);
            var message = Commerce.ViewModelAdapter.getResourceString(messageResourceID);
            if (!Commerce.StringExtensions.isNullOrWhitespace(message) && Commerce.ArrayExtensions.hasElements(messageFormatData)) {
                message = Commerce.StringExtensions.format.apply(Commerce.StringExtensions, [message].concat(messageFormatData));
            }
            this.logMessageDisplayed(messageOptions.messageType, messageOptions.titleResx, title, messageResourceID, message, messageOptions.additionalInfoResx, additionalInfo, correlationID);
            var dlg = new Commerce.Controls.MessageDialog();
            var asyncResult = new Commerce.AsyncResult(null);
            var buttons = this.getMessageDialogButtons(messageOptions.messageButtons, messageOptions.primaryButtonIndex);
            var asyncDialogResult = dlg.show({
                title: title,
                content: message,
                additionalInfo: additionalInfo,
                buttons: buttons,
                hideOnEscape: true,
                messageCheckboxVisible: messageOptions.displayMessageCheckbox,
                messageCheckboxChecked: messageOptions.messageCheckboxChecked,
                messageCheckboxLabelResourceID: messageOptions.messageCheckboxLabelResourceID
            });
            asyncDialogResult.onAny(function (result) {
                asyncResult.resolve({ dialogResult: result, messageCheckboxChecked: dlg.MessageCheckboxChecked });
            });
            return asyncResult;
        };
        ViewModelAdapterImpl.prototype.displayMessage = function (messageResourceID, messageType, messageButtons, titleResourceID, primaryButtonIndex) {
            var messageFormatData = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                messageFormatData[_i - 5] = arguments[_i];
            }
            var messageOptions = new Commerce.MessageOptions();
            messageOptions.messageType = messageType;
            messageOptions.messageButtons = messageButtons;
            messageOptions.titleResx = titleResourceID;
            messageOptions.primaryButtonIndex = primaryButtonIndex;
            return this.displayMessageWithOptions.apply(this, [messageResourceID, messageOptions, null].concat(messageFormatData)).map(function (result) { return result.dialogResult; });
        };
        ViewModelAdapterImpl.prototype.getApplicationVersion = function () {
            var version = Commerce.Host.instance.application.getApplicationIdentity().version;
            return Commerce.StringExtensions.format("{0}.{1}.{2}.{3}", version.major, version.minor, version.build, version.revision);
        };
        ViewModelAdapterImpl.prototype.getApplicationPublisher = function () {
            return Commerce.Host.instance.application.getApplicationIdentity().publisher;
        };
        ViewModelAdapterImpl.prototype.copyToClipboard = function (message) {
            var clipboardData = window.clipboardData;
            clipboardData.setData("Text", message);
        };
        ViewModelAdapterImpl.prototype.define = function (viewConfiguration) {
            ViewModelAdapterImpl.navigateActions[viewConfiguration.page] = viewConfiguration;
            var perfMarker;
            var defineView = function (path, viewControllerType) {
                WinJS.UI.Pages.define(path, {
                    getContentElement: function (element) {
                        var contentElement = element;
                        if (Commerce.ArrayExtensions.hasElements(element.children)) {
                            contentElement = element.children[0];
                        }
                        return contentElement;
                    },
                    init: function (element, options) {
                        if (viewControllerType && viewControllerType.prototype) {
                            if (viewControllerType.prototype instanceof Commerce.ViewControllers.ViewControllerBase) {
                                this.viewController = new viewControllerType(options);
                            }
                            else {
                                var context = ViewModelAdapterImpl.navigateActions[viewConfiguration.page].extensionContext;
                                this.viewController = new viewControllerType(context, options);
                            }
                            perfMarker = Commerce.PerformanceLogger.markStart("ViewModelAdapter.define", true);
                        }
                    },
                    processed: function (element, options) {
                        if (this.viewController && this.viewController.onCreated) {
                            this.viewController.onCreated(this.getContentElement(element));
                        }
                    },
                    ready: function (element, options) {
                        var _this = this;
                        if (this.viewController) {
                            if (this.viewController.load) {
                                this.viewController.load();
                            }
                            if (Commerce.ObjectExtensions.isFunction(this.viewController.onBarcodeScanned)) {
                                Commerce.Peripherals.instance.barcodeScanner.enableAsync(this.viewController.onBarcodeScanned.bind(this.viewController));
                            }
                            if (Commerce.ObjectExtensions.isFunction(this.viewController.onMsrSwiped)) {
                                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(this.viewController.onMsrSwiped.bind(this.viewController));
                            }
                            if (this.viewController.captureGlobalInputForNumPad
                                && this.viewController.numPadInputBroker) {
                                Commerce.Peripherals.instance.numPad.enable(this.viewController.numPadInputBroker);
                            }
                            if (this.viewController.onShown) {
                                this.viewController.onShown();
                            }
                        }
                        if (this.viewController instanceof Commerce.ViewControllers.ViewControllerBase) {
                            Commerce.ViewModelAdapterWinJS.bind(element, this.viewController);
                        }
                        else if (this.viewController.onReady) {
                            this.viewController.onReady(element);
                        }
                        if (this.viewController && this.viewController.afterBind) {
                            this.viewController.afterBind(this.getContentElement(element));
                        }
                        window.setTimeout(function () {
                            var event = document.createEvent("Event");
                            event.initEvent("resize", true, false);
                            window.dispatchEvent(event);
                        }, 50);
                        window.setTimeout(function () {
                            if (_this.viewController.afterShown) {
                                _this.viewController.afterShown();
                            }
                        }, 0);
                        if (perfMarker) {
                            perfMarker.markEnd();
                        }
                    },
                    unload: function () {
                        if (this.viewController && this.viewController.unload) {
                            this.viewController.unload();
                        }
                    }
                });
            };
            defineView(viewConfiguration.pagePath, viewConfiguration.viewController);
            if (!Commerce.StringExtensions.isNullOrWhitespace(viewConfiguration.phonePage) && viewConfiguration.phonePage !== viewConfiguration.page) {
                defineView(viewConfiguration.phonePagePath, viewConfiguration.viewController);
            }
        };
        ViewModelAdapterImpl.prototype.defineControl = function (path, viewControllerType) {
            var userControlType = Commerce.Controls.UserControl;
            if (viewControllerType && Commerce.ObjectExtensions.isOfType(viewControllerType.prototype, userControlType)) {
                viewControllerType.prototype._viewPath = path;
            }
            return WinJS.UI.Pages.define(path, {
                _viewControllerType: viewControllerType,
                _isDefined: true,
                init: function (element, options) {
                    if (options && Commerce.ObjectExtensions.isOfType(options, userControlType)) {
                        this.viewController = options;
                    }
                    else {
                        this.viewController = new viewControllerType(options);
                    }
                },
                processed: function (element, options) {
                    if (this.viewController.onCreated) {
                        this.viewController.onCreated(element);
                    }
                },
                ready: function (element, options) {
                    if (this.viewController.onLoaded) {
                        this.viewController.onLoaded();
                    }
                    Commerce.ViewModelAdapterWinJS.bind(element, this.viewController);
                },
                unload: function () {
                    if (this.viewController && this.viewController.unload) {
                        this.viewController.unload();
                    }
                }
            });
        };
        ViewModelAdapterImpl.prototype.isControlDefined = function (path) {
            return WinJS.UI.Pages.get(path).prototype._isDefined;
        };
        ViewModelAdapterImpl.prototype.createIncrementalDataSourceAdapter = function (winControl, callerContext, callerMethod, pageSize, afterLoadComplete, onLoading, autoSelectFirstItem, autoFocusFirstItemOfEmptyTemplate, selectInvokedItem, pageLoadCallBack, reloadCallBack, updateItemCallBack, pageLoadCompleteCallBackFunction, autoFocusDelayInMilliseconds) {
            var _this = this;
            var $winControlElement = $(winControl.element);
            var getMoreDataAndAppend = function (data) {
                var asyncResult = callerMethod.call(callerContext, pageSize, data.length);
                asyncResult.done(function (pageData) {
                    var firstIndex = data.length;
                    if (Commerce.ArrayExtensions.hasElements(pageData)) {
                        for (var i = 0; i < pageData.length; i++) {
                            var dataItem = pageData[i];
                            data.push(dataItem);
                        }
                    }
                    var lastIndex = data.length;
                    var callPageLoadCompleteCallBackFunction = function (finalData) {
                        if (Commerce.ObjectExtensions.isFunction(pageLoadCompleteCallBackFunction)) {
                            pageLoadCompleteCallBackFunction.call(callerContext, finalData);
                        }
                    };
                    if (Commerce.ObjectExtensions.isFunction(pageLoadCallBack) && lastIndex > firstIndex) {
                        pageLoadCallBack.call(callerContext, data.slice(firstIndex, lastIndex))
                            .done(function (updatedData) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(updatedData)) {
                                for (var index = firstIndex; index < lastIndex; index++) {
                                    data.setAt(index, updatedData[index - firstIndex]);
                                }
                            }
                        }).always(function () {
                            callPageLoadCompleteCallBackFunction(data.slice(firstIndex, lastIndex));
                        });
                    }
                    else {
                        callPageLoadCompleteCallBackFunction([]);
                    }
                });
                return asyncResult;
            };
            var overrideTemplate = function (template, data, templateElement) {
                var fetching = false;
                return function (itemPromise) {
                    return itemPromise.then(function (item) {
                        if (data.length >= pageSize && item.key === data.getItem(data.length - 1).key && !fetching) {
                            fetching = true;
                            getMoreDataAndAppend(data).always(function () {
                                fetching = false;
                            });
                        }
                        if (templateElement) {
                            var container = document.createElement("div");
                            templateElement.winControl.render(item.data, container);
                            return container;
                        }
                        return template(itemPromise);
                    });
                };
            };
            var loadData = function () {
                var results = new WinJS.Binding.List([]);
                winControl.setTemplate = function (templateElement) {
                    winControl.itemTemplate = overrideTemplate(winControl.itemTemplate, results, templateElement);
                };
                winControl.itemDataSource = results.dataSource;
                winControl.itemTemplate = overrideTemplate(winControl.itemTemplate, results);
                var shouldAutoFocusFirstItemOfEmptyTemplate;
                if (ko.isObservable(autoFocusFirstItemOfEmptyTemplate)) {
                    shouldAutoFocusFirstItemOfEmptyTemplate = autoFocusFirstItemOfEmptyTemplate;
                }
                else if (Commerce.ObjectExtensions.isBoolean(autoFocusFirstItemOfEmptyTemplate)) {
                    shouldAutoFocusFirstItemOfEmptyTemplate = ko.observable(autoFocusFirstItemOfEmptyTemplate);
                }
                else {
                    shouldAutoFocusFirstItemOfEmptyTemplate = ko.observable(false);
                }
                var autoFocusDelay;
                if (ko.isObservable(autoFocusDelayInMilliseconds)) {
                    autoFocusDelay = autoFocusDelayInMilliseconds;
                }
                else if (Commerce.ObjectExtensions.isNumber(autoFocusDelayInMilliseconds)) {
                    autoFocusDelay = ko.observable(autoFocusDelayInMilliseconds);
                }
                else {
                    autoFocusDelay = ko.observable(0);
                }
                var afterLoadCompleteElement = $(afterLoadComplete);
                if (Commerce.ObjectExtensions.isFunction(onLoading)) {
                    onLoading(true);
                }
                afterLoadCompleteElement.hide();
                if (Commerce.ObjectExtensions.isFunction(updateItemCallBack)) {
                    updateItemCallBack(function (index, item) {
                        results.setAt(index, item);
                    });
                }
                getMoreDataAndAppend(results).always(function () {
                    afterLoadCompleteElement.hide();
                    if (Commerce.ObjectExtensions.isFunction(onLoading)) {
                        onLoading(false);
                    }
                    if (results.length < 1) {
                        afterLoadCompleteElement.show(0, function () {
                            if (shouldAutoFocusFirstItemOfEmptyTemplate()) {
                                window.setTimeout(function () {
                                    afterLoadCompleteElement.find(":focusable").addBack(":focusable").first().focus();
                                }, autoFocusDelay());
                            }
                        });
                        $winControlElement.hide();
                    }
                    else {
                        var onShowComplete = function (forceLayout) {
                            if (forceLayout) {
                                winControl.forceLayout();
                            }
                            if (autoSelectFirstItem === true &&
                                winControl.selection.count() === 0) {
                                winControl.selection.set(0);
                            }
                        };
                        if ($winControlElement.is(":hidden")) {
                            $winControlElement.show(0, onShowComplete.bind(_this, true));
                        }
                        else {
                            onShowComplete(false);
                        }
                    }
                });
            };
            loadData();
            if (Commerce.ObjectExtensions.isFunction(reloadCallBack)) {
                reloadCallBack(function () {
                    loadData();
                });
            }
        };
        ViewModelAdapterImpl.prototype.setFocusInWinControl = function (winControl, index) {
            if (index === void 0) { index = 0; }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(winControl)
                && !Commerce.ObjectExtensions.isNullOrUndefined(winControl.itemDataSource)
                && !Commerce.ObjectExtensions.isNullOrUndefined(winControl.itemDataSource.list)
                && winControl.itemDataSource.list.length > index
                && winControl.selection.count() === 0) {
                winControl.currentItem = { index: index, hasFocus: true, showFocus: true };
            }
        };
        ViewModelAdapterImpl.prototype.createGroupedDataSourceAdapter = function (winControl, itemDataSource, groupKeySelector, groupDataSelector, parentId, keyName) {
            var applyList = function (value) {
                if (!Commerce.ArrayExtensions.hasElements(value)) {
                    return;
                }
                var groupHeaderItems = [];
                groupHeaderItems = value.filter(function (c, i, a) {
                    return (c[groupKeySelector] === parentId() || c[groupKeySelector] === c[groupDataSelector]);
                });
                groupHeaderItems = Commerce.ObjectExtensions.clone(groupHeaderItems);
                var groupItems = [];
                $.each(groupHeaderItems, function (index, groupHeaderItem) {
                    var secondlevelItems = [];
                    secondlevelItems = value.filter(function (c, i, a) {
                        return c[groupKeySelector] === groupHeaderItem[groupDataSelector];
                    });
                    groupItems.push.apply(groupItems, Commerce.ObjectExtensions.clone(secondlevelItems));
                    groupHeaderItem[groupKeySelector] = groupHeaderItem[groupDataSelector];
                });
                groupHeaderItems.push.apply(groupHeaderItems, groupItems);
                var getGroupKey = function (item) {
                    return item[groupKeySelector];
                };
                var groupKeyToIndexMap = Object.create(null);
                groupHeaderItems.forEach(function (headerItem, ind) {
                    var key = getGroupKey(headerItem);
                    groupKeyToIndexMap[key] = ind;
                });
                var getIndex = function (groupKey) {
                    var index = groupKeyToIndexMap[groupKey];
                    return index || -1;
                };
                var listDataSource = new WinJS.Binding.List(groupHeaderItems);
                var groupedDataSource = listDataSource.createGrouped(getGroupKey, function groupDataSelector(item) {
                    return { Name: item[keyName], SelectedGroupHeader: item };
                }, function (left, right) {
                    var leftIndex = getIndex(left);
                    var rightIndex = getIndex(right);
                    return leftIndex - rightIndex;
                });
                winControl.itemDataSource = groupedDataSource.dataSource;
                winControl.groupDataSource = groupedDataSource.groups.dataSource;
            };
            if (itemDataSource.subscribe) {
                itemDataSource.subscribe(function (newValue) {
                    applyList(newValue);
                });
            }
            applyList(itemDataSource());
        };
        ViewModelAdapterImpl.prototype.bindReportParameters = function (element, data) {
            $(element).find(".controlPlaceholder").each(function (index, controlPlaceholderElement) {
                switch (data.Type) {
                    case "DateTime":
                        var datePicker = new WinJS.UI.DatePicker(controlPlaceholderElement);
                        datePicker.current = data.Value;
                        datePicker.datePattern = "{day.integer(2)} {dayofweek.full}";
                        datePicker.addEventListener("change", function (eventInfo) {
                            data.Value = eventInfo.currentTarget.winControl.current;
                        });
                        if (controlPlaceholderElement.hasAttribute(ViewModelAdapterImpl.INTERNAL_CONTROL_ID_ATTRIBUTE)) {
                            var internalControlId = controlPlaceholderElement.getAttribute(ViewModelAdapterImpl.INTERNAL_CONTROL_ID_ATTRIBUTE);
                            var datepickerLabel = $(controlPlaceholderElement).prev().html();
                            var $firstDatePickerControl = $(controlPlaceholderElement).children().first();
                            if ($firstDatePickerControl.length > 0) {
                                $firstDatePickerControl.attr("id", internalControlId);
                                $firstDatePickerControl.attr("aria-label", Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4655"), datepickerLabel));
                            }
                            var $secondDatePickerControl = $(controlPlaceholderElement).find(".win-datepicker-date");
                            if ($secondDatePickerControl.length > 0) {
                                $secondDatePickerControl.attr("aria-label", Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4656"), datepickerLabel));
                            }
                            var $thirdDatePickerControl = $(controlPlaceholderElement).find(".win-datepicker-year");
                            if ($thirdDatePickerControl.length > 0) {
                                $thirdDatePickerControl.attr("aria-label", Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4657"), datepickerLabel));
                            }
                            ko.applyBindingsToNode(controlPlaceholderElement, { axBubbleAttr: internalControlId });
                        }
                        return datePicker;
                    default:
                        var $wrappingInputDiv = $("<div tabindex='-1' class='minWidth288 maxWidth360'></div>");
                        var $input = $("<input type='text'/>");
                        $input.val(data.Value).blur(function (eventInfo) {
                            data.Value = $(eventInfo.currentTarget).val();
                        });
                        $wrappingInputDiv.append($input);
                        $(controlPlaceholderElement).append($wrappingInputDiv);
                        if (controlPlaceholderElement.hasAttribute("internalControlId")) {
                            var internalControlId = controlPlaceholderElement.getAttribute(ViewModelAdapterImpl.INTERNAL_CONTROL_ID_ATTRIBUTE);
                            $input.attr("id", internalControlId);
                            Commerce.BubbleHelper.formatAttribute($input, "{0}_reportParameter", internalControlId);
                        }
                        return $input;
                }
            });
        };
        ViewModelAdapterImpl.prototype.getLanguageTextDirection = function (languageTag) {
            var direction = Commerce.CSSHelpers.LEFT_TO_RIGHT_TEXT_DIRECTION;
            if (!Commerce.StringExtensions.isNullOrWhitespace(languageTag)) {
                var matchedRegionalLanguage = Commerce.ArrayExtensions.firstOrUndefined(ViewModelAdapterImpl.RIGHTTOLEFT_REGIONALLANGUAGES, function (lang) {
                    return Commerce.StringExtensions.compare(lang, languageTag, true) === 0;
                });
                var matchedLanguage = null;
                if (Commerce.ObjectExtensions.isNullOrUndefined(matchedRegionalLanguage)) {
                    var fullLanguage = languageTag.split("-", 1);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(fullLanguage) && fullLanguage.length === 1) {
                        var language_1 = fullLanguage[0];
                        matchedLanguage = Commerce.ArrayExtensions.firstOrUndefined(ViewModelAdapterImpl.RIGHTTOLEFT_LANGUAGES, function (lang) {
                            return Commerce.StringExtensions.compare(lang, language_1, true) === 0;
                        });
                    }
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(matchedRegionalLanguage) || !Commerce.ObjectExtensions.isNullOrUndefined(matchedLanguage)) {
                    direction = Commerce.CSSHelpers.RIGHT_TO_LEFT_TEXT_DIRECTION;
                }
            }
            return direction;
        };
        ViewModelAdapterImpl.prototype.getCurrentViewName = function () {
            return Commerce.navigator.getCurrentViewName();
        };
        ViewModelAdapterImpl.prototype.addTaskRecorderEvent = function (eventHandler) {
            Commerce.EventProxy.Instance.addCustomEventHandler(document.getElementById(Commerce.TaskRecorder.ELEMENT_ID_TASKRECORDER_HOST), ViewModelAdapterImpl.TASK_RECORDER_EVENT_NAME, eventHandler);
        };
        ViewModelAdapterImpl.prototype.removeTaskRecorderEvent = function (eventHandler) {
            Commerce.EventProxy.Instance.removeCustomEventHandler(document.getElementById(Commerce.TaskRecorder.ELEMENT_ID_TASKRECORDER_HOST), ViewModelAdapterImpl.TASK_RECORDER_EVENT_NAME, eventHandler);
        };
        ViewModelAdapterImpl.prototype.raiseTaskRecorderEvent = function (element, parameter) {
            var eventInfo = {
                type: ViewModelAdapterImpl.TASK_RECORDER_EVENT_NAME,
                element: element,
                parameter: parameter
            };
            Commerce.EventProxy.Instance.raiseCustomEvent(ViewModelAdapterImpl.TASK_RECORDER_EVENT_NAME, eventInfo);
        };
        ViewModelAdapterImpl.prototype.getTaskRecorderEventName = function () {
            return ViewModelAdapterImpl.TASK_RECORDER_EVENT_NAME;
        };
        ViewModelAdapterImpl.prototype.addTaskRecorderStateChangedEvent = function (eventHandler) {
            Commerce.EventProxy.Instance.addCustomEventHandler(document.getElementById(Commerce.TaskRecorder.ELEMENT_ID_TASKRECORDER_HOST), ViewModelAdapterImpl.TASK_RECORDER_STATE_CHANGED_EVENT_NAME, eventHandler);
        };
        ViewModelAdapterImpl.prototype.removeTaskRecorderStateChangedEvent = function (eventHandler) {
            Commerce.EventProxy.Instance.removeCustomEventHandler(document.getElementById(Commerce.TaskRecorder.ELEMENT_ID_TASKRECORDER_HOST), ViewModelAdapterImpl.TASK_RECORDER_STATE_CHANGED_EVENT_NAME, eventHandler);
        };
        ViewModelAdapterImpl.prototype.raiseTaskRecorderStateChangedEvent = function () {
            Commerce.EventProxy.Instance.raiseCustomEvent(ViewModelAdapterImpl.TASK_RECORDER_STATE_CHANGED_EVENT_NAME);
        };
        Object.defineProperty(ViewModelAdapterImpl.prototype, "_homeView", {
            get: function () {
                return "HomeView";
            },
            enumerable: true,
            configurable: true
        });
        ViewModelAdapterImpl.prototype.getMessageDialogButtons = function (messageButtons, primaryButtonIndex) {
            messageButtons = messageButtons || Commerce.MessageBoxButtons.Default;
            var buttons = [];
            switch (messageButtons) {
                case Commerce.MessageBoxButtons.OKCancel:
                    buttons[0] = {
                        label: Commerce.ViewModelAdapter.getResourceString("string_75"),
                        operationId: Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK,
                        result: Commerce.DialogResult.OK
                    };
                    buttons[1] = {
                        label: Commerce.ViewModelAdapter.getResourceString("string_76"),
                        operationId: Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK,
                        result: Commerce.DialogResult.Cancel,
                        isPrimary: true,
                        cancelCommand: true
                    };
                    break;
                case Commerce.MessageBoxButtons.YesNo:
                    buttons[0] = {
                        label: Commerce.ViewModelAdapter.getResourceString("string_77"),
                        operationId: Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK,
                        result: Commerce.DialogResult.Yes
                    };
                    buttons[1] = {
                        label: Commerce.ViewModelAdapter.getResourceString("string_78"),
                        operationId: Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK,
                        result: Commerce.DialogResult.No,
                        isPrimary: true,
                        cancelCommand: true
                    };
                    break;
                case Commerce.MessageBoxButtons.RetryNo:
                    buttons[0] = {
                        label: Commerce.ViewModelAdapter.getResourceString("string_81"),
                        operationId: Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK,
                        result: Commerce.DialogResult.Yes
                    };
                    buttons[1] = {
                        label: Commerce.ViewModelAdapter.getResourceString("string_78"),
                        operationId: Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK,
                        result: Commerce.DialogResult.No,
                        isPrimary: true,
                        cancelCommand: true
                    };
                    break;
                case Commerce.MessageBoxButtons.Default:
                    buttons[0] = {
                        label: Commerce.ViewModelAdapter.getResourceString("string_75"),
                        operationId: Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK,
                        result: Commerce.DialogResult.Close
                    };
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(primaryButtonIndex)) {
                for (var i = 0; i < buttons.length; i++) {
                    if (i === primaryButtonIndex) {
                        buttons[i].isPrimary = true;
                    }
                }
            }
            return buttons;
        };
        ViewModelAdapterImpl.prototype.logMessageDisplayed = function (messageType, messageTitleResourceID, messageTitle, messageResourceID, message, additionalInfoResourceID, additionalInfo, correlationID) {
            var messageTypeString = !Commerce.ObjectExtensions.isNullOrUndefined(messageType)
                ? Commerce.MessageType[messageType] : Commerce.MessageType[Commerce.MessageType.Info];
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationID)) {
                correlationID = TsLogging.Utils.generateGuid();
                var resourceIDsAndCulture = Commerce.NotificationHandler.getResourceIDAndCultureString(messageTitleResourceID, messageResourceID, additionalInfoResourceID, null);
                Commerce.RetailLogger.individualMessageDisplayed(messageTypeString, resourceIDsAndCulture, messageTitle, message, additionalInfo, correlationID);
            }
            Commerce.RetailLogger.messageDisplayed(messageTypeString, messageTitle, message, additionalInfo, correlationID);
        };
        ViewModelAdapterImpl.prototype.changeUILayoutDirection = function (languageTag) {
            if (Commerce.CSSHelpers.isCSSDeveloperMode() && Commerce.CSSHelpers.isDeveloperModeTextDirectionSet()) {
                Commerce.CSSHelpers.setTextDirection(Commerce.CSSHelpers.getDeveloperModeTextDirection());
            }
            else {
                Commerce.CSSHelpers.setTextDirection(this.getLanguageTextDirection(languageTag));
            }
        };
        ViewModelAdapterImpl.prototype._viewNameContains = function (searchString) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.navigator) ||
                Commerce.StringExtensions.isNullOrWhitespace(Commerce.navigator.getCurrentViewName()) ||
                Commerce.StringExtensions.isNullOrWhitespace(searchString)) {
                return false;
            }
            return (Commerce.navigator.getCurrentViewName().toUpperCase().indexOf(searchString.toUpperCase()) >= 0);
        };
        ViewModelAdapterImpl.RIGHTTOLEFT_LANGUAGES = ["ar", "dv", "fa", "he", "prs", "ps", "syr", "ug", "ur"];
        ViewModelAdapterImpl.RIGHTTOLEFT_REGIONALLANGUAGES = ["ku-Arab", "pa-Arab", "sd-Arab", "qps-plocm"];
        ViewModelAdapterImpl.DEVELOPER_MODE_ENABLE_PSEUDO_LOCALIZATION = false;
        ViewModelAdapterImpl.PSEUDO_LOCALE = "qps-ploc";
        ViewModelAdapterImpl.INTERNAL_CONTROL_ID_ATTRIBUTE = "internalControlId";
        ViewModelAdapterImpl.TASK_RECORDER_EVENT_NAME = "taskRecorderEvent";
        ViewModelAdapterImpl.TASK_RECORDER_STATE_CHANGED_EVENT_NAME = "taskRecorderStateChangedEvent";
        ViewModelAdapterImpl.navigateActions = Object.create(null);
        return ViewModelAdapterImpl;
    }());
    Commerce.ViewModelAdapterImpl = ViewModelAdapterImpl;
    Commerce.ViewModelAdapterWinJS = Commerce.ViewModelAdapter = new ViewModelAdapterImpl();
})(Commerce || (Commerce = {}));
(function ($) {
    $.each(["show", "hide"], function (i, ev) {
        var el = $.fn[ev];
        $.fn[ev] = function () {
            var returnValue = el.apply(this, arguments);
            this.trigger(ev);
            return returnValue;
        };
    });
})(jQuery);
var Commerce;
(function (Commerce) {
    "use strict";
    var ButtonBlock;
    (function (ButtonBlock) {
        var ButtonBlockType;
        (function (ButtonBlockType) {
            ButtonBlockType[ButtonBlockType["Text"] = 1] = "Text";
            ButtonBlockType[ButtonBlockType["Button"] = 2] = "Button";
        })(ButtonBlockType = ButtonBlock.ButtonBlockType || (ButtonBlock.ButtonBlockType = {}));
    })(ButtonBlock = Commerce.ButtonBlock || (Commerce.ButtonBlock = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.buttonBlock = {
    createAfterRender: function ($element, options, viewModel) {
        return function (element) {
            var $buttonElement = $element.find("button").first();
            if (Commerce.ObjectExtensions.isFunction(options.click)) {
                $buttonElement.click(function (event) {
                    options.click.call(viewModel);
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    return false;
                });
                $buttonElement.keydown(function (event) {
                    var anyKeyPressHandled = false;
                    if ((event.keyCode === 13 || event.keyCode === 108)) {
                        if (Commerce.ObjectExtensions.isFunction(options.click)) {
                            options.click.call(viewModel);
                        }
                        anyKeyPressHandled = true;
                    }
                    if (anyKeyPressHandled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        return false;
                    }
                    return true;
                });
            }
        };
    },
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        var $element = $(element);
        $element.addClass("buttonBlock");
        value.blockType = value.blockType || Commerce.ButtonBlock.ButtonBlockType.Button;
        var label;
        var maxLabelWidthClass = "";
        if (value.labelTextResx) {
            label = Commerce.ViewModelAdapter.getResourceString(value.labelTextResx);
        }
        var ariaLabel;
        if (value.ariaLabelResx) {
            ariaLabel = Commerce.ViewModelAdapter.getResourceString(value.ariaLabelResx);
        }
        else if (label) {
            ariaLabel = label;
        }
        if (!label && !Commerce.ObjectExtensions.isNullOrUndefined(value.labelValue)) {
            label = value.labelValue;
        }
        var isEnabled;
        if (ko.isObservable(value.enabled)) {
            isEnabled = value.enabled;
        }
        else if (Commerce.ObjectExtensions.isNullOrUndefined(value.enabled)) {
            isEnabled = ko.observable(true);
        }
        else {
            isEnabled = ko.observable(value.enabled);
        }
        var buttonBlockData = {
            tabIndex: value.tabIndex || 0,
            buttonClass: value.buttonClass,
            label: label || "",
            labelVisible: !Commerce.ObjectExtensions.isNullOrUndefined(label),
            maxLabelWidthClass: maxLabelWidthClass,
            ariaLabel: ariaLabel || "",
            loading: value.loading || ko.observable(false),
            blockType: value.blockType,
            showActiveStyles: ko.computed(function () {
                return isEnabled() && value.blockType === Commerce.ButtonBlock.ButtonBlockType.Button;
            }),
            buttonBlockEnabled: isEnabled
        };
        var afterRender = value.blockType === Commerce.ButtonBlock.ButtonBlockType.Text ? null :
            ko.bindingHandlers.buttonBlock.createAfterRender($element, value, viewModel);
        ko.applyBindingsToNode(element, {
            template: {
                name: "buttonBlockTemplate",
                data: buttonBlockData,
                afterRender: afterRender
            }
        });
        if (Commerce.ObjectExtensions.isFunction(value.invokeValidate)) {
            ko.applyBindingsToNode($element.find("button")[0], {
                invokeValidate: value.invokeValidate
            }, viewModel);
        }
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var ListView;
    (function (ListView) {
        var ListViewViewModel = (function () {
            function ListViewViewModel(itemContainersAndItems) {
                this._itemContainersAndItems = Commerce.ObjectExtensions.isNullOrUndefined(itemContainersAndItems) ? [] : itemContainersAndItems;
                this._isChangingItemSelectionCount = 0;
            }
            ListViewViewModel.prototype.unselectAllItems = function () {
                if (Commerce.ArrayExtensions.hasElements(this._itemContainersAndItems)) {
                    this._isChangingItemSelectionCount++;
                    this._itemContainersAndItems.forEach(function (itemContainersAndItems) {
                        itemContainersAndItems.itemContainer.element.winControl.selected = false;
                    });
                    this._isChangingItemSelectionCount--;
                }
            };
            ListViewViewModel.prototype.selectAllItems = function () {
                if (Commerce.ArrayExtensions.hasElements(this._itemContainersAndItems)) {
                    this._isChangingItemSelectionCount++;
                    this._itemContainersAndItems.forEach(function (itemContainersAndItems) {
                        itemContainersAndItems.itemContainer.element.winControl.selected = true;
                    });
                    this._isChangingItemSelectionCount--;
                }
            };
            ListViewViewModel.prototype.selectItems = function (items) {
                items = Commerce.ObjectExtensions.isNullOrUndefined(items) ? [] : items;
                if (Commerce.ArrayExtensions.hasElements(this._itemContainersAndItems)) {
                    this._isChangingItemSelectionCount++;
                    this._itemContainersAndItems.forEach(function (itemContainersAndItems) {
                        var itemsIndex = items.indexOf(itemContainersAndItems.item);
                        if (itemsIndex > -1) {
                            itemContainersAndItems.itemContainer.element.winControl.selected = true;
                        }
                        else {
                            itemContainersAndItems.itemContainer.element.winControl.selected = false;
                        }
                    });
                    this._isChangingItemSelectionCount--;
                }
            };
            Object.defineProperty(ListViewViewModel.prototype, "isChangingItemSelection", {
                get: function () {
                    return this._isChangingItemSelectionCount > 0;
                },
                enumerable: true,
                configurable: true
            });
            ListViewViewModel.prototype.dispose = function () {
                Commerce.ObjectExtensions.disposeAllProperties(this);
            };
            return ListViewViewModel;
        }());
        ListView.ListViewViewModel = ListViewViewModel;
        function isExpandable(options) {
            return options.displayMode === Commerce.ListView.DisplayMode.Expandable
                || options.displayMode === Commerce.ListView.DisplayMode.AlwaysExpanded
                || options.displayMode === Commerce.ListView.DisplayMode.AlwaysExpandedWithCheckbox;
        }
        ListView.isExpandable = isExpandable;
        function isAlwaysExpanded(options) {
            return options.displayMode === Commerce.ListView.DisplayMode.AlwaysExpanded
                || options.displayMode === Commerce.ListView.DisplayMode.AlwaysExpandedWithCheckbox;
        }
        ListView.isAlwaysExpanded = isAlwaysExpanded;
        function showsCheckbox(options) {
            return options.displayMode === Commerce.ListView.DisplayMode.AlwaysExpandedWithCheckbox
                && options.selectionMode !== WinJS.UI.SelectionMode.none;
        }
        ListView.showsCheckbox = showsCheckbox;
        var DisplayMode;
        (function (DisplayMode) {
            DisplayMode[DisplayMode["Simple"] = 0] = "Simple";
            DisplayMode[DisplayMode["Expandable"] = 1] = "Expandable";
            DisplayMode[DisplayMode["AlwaysExpanded"] = 2] = "AlwaysExpanded";
            DisplayMode[DisplayMode["AlwaysExpandedWithCheckbox"] = 3] = "AlwaysExpandedWithCheckbox";
        })(DisplayMode = ListView.DisplayMode || (ListView.DisplayMode = {}));
    })(ListView = Commerce.ListView || (Commerce.ListView = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.textConverter = new Commerce.Controls.TextConverter.TextConverterBindingHandler();
ko.bindingHandlers.listView = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        var $element = $(element);
        var listViewControl;
        var forceLayoutDone = "forceLayoutDone";
        var cleanKnockoutBinding = function (elementToClean) {
            $element.find("[data-bind]").each(function (index, el) {
                $(el).removeAttr("data-bind");
            });
        };
        value.emptyListViewTemplate = value.emptyListViewTemplate || "emptyListViewTemplate";
        value.columns = value.columns || [];
        value.rowTemplate = value.rowTemplate || Commerce.StringExtensions.EMPTY;
        value.headerRowTemplate = value.headerRowTemplate || Commerce.StringExtensions.EMPTY;
        value.strikethroughLabel = value.strikethroughLabel || Commerce.ViewModelAdapter.getResourceString("string_4473");
        value.templateViewModel = value.templateViewModel || {};
        if (Commerce.ArrayExtensions.hasElements(value.columns) ||
            (!Commerce.StringExtensions.isNullOrWhitespace(value.rowTemplate) && !Commerce.StringExtensions.isNullOrWhitespace(value.headerRowTemplate))) {
            value.displayMode = value.displayMode || Commerce.ListView.DisplayMode.Simple;
            value.strikethroughEnabled = value.strikethroughEnabled || false;
            value.selectionMode = value.selectionMode || WinJS.UI.SelectionMode.multi;
            value.rowClass = value.rowClass || "";
            value.headerRowClass = value.headerRowClass || "";
            value.showColumnHeaderLabels = value.showColumnHeaderLabels || ko.observable(true);
            var useWinJSListView_1 = (!Commerce.ListView.isExpandable(value)
                && !value.strikethroughEnabled
                && Commerce.StringExtensions.isNullOrWhitespace(value.colspanRowTemplate));
            if (!Commerce.ObjectExtensions.isNullOrUndefined(value.useWinJSListView)) {
                useWinJSListView_1 = value.useWinJSListView;
            }
            if (Commerce.ArrayExtensions.hasElements(value.columns)) {
                value.columns.forEach(function (column) {
                    column.title = column.title || (Commerce.ViewModelAdapter.getResourceString(column.titleResx) || "");
                    column.converter = column.converter || "";
                    column.cssClass = column.cssClass || "";
                    if (Commerce.StringExtensions.isNullOrWhitespace(column.defaultValue)) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(column.defaultValueResx)) {
                            column.defaultValue = Commerce.ViewModelAdapter.getResourceString(column.defaultValueResx);
                        }
                        else {
                            column.defaultValue = "";
                        }
                    }
                    column.lines = column.lines || [];
                    column.type = column.type || Commerce.Controls.TextConverter.FieldType.text;
                    if (column.field === "$data" && useWinJSListView_1) {
                        column.field = "this";
                    }
                });
            }
            var toggleEmptyGridTemplate_1 = function (count) {
                var toggleEmptyGridFunctionAsAny = toggleEmptyGridTemplate_1;
                if (count < 1) {
                    toggleEmptyGridFunctionAsAny.isHidden = true;
                    var $tableContent = $element.find(".tableContent");
                    var $listViewEmptyContentPlaceholder = $element.find(".listViewEmptyContentPlaceholder");
                    $tableContent.hide();
                    $tableContent.removeData(forceLayoutDone);
                    $listViewEmptyContentPlaceholder.css("display", "flex");
                    ko.applyBindingsToNode($listViewEmptyContentPlaceholder[0], {
                        template: {
                            name: value.emptyListViewTemplate,
                            data: viewModel
                        }
                    });
                }
                else {
                    if (toggleEmptyGridFunctionAsAny.isHidden) {
                        var $listViewEmptyContentPlaceholder = $element.find(".listViewEmptyContentPlaceholder");
                        var $tableContent = $element.find(".tableContent");
                        $listViewEmptyContentPlaceholder.hide();
                        $tableContent.show();
                        toggleEmptyGridFunctionAsAny.isHidden = false;
                        var forceControlLayout = valueAccessor().forceControlLayout;
                        if (Commerce.ObjectExtensions.isNullOrUndefined(forceControlLayout)
                            && useWinJSListView_1
                            && $tableContent.data(forceLayoutDone) !== true) {
                            listViewControl.forceLayout();
                            $tableContent.data(forceLayoutDone, true);
                        }
                    }
                }
            };
            var setLineStateHandler_1 = function (listViewLineElement) {
                if (listViewLineElement.find(".listViewLine").hasClass("strikethrough") && listViewLineElement.attr("aria-selected") === "true") {
                    listViewLineElement.append("<div class='hidden'>" +
                        Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4474"), Commerce.ViewModelAdapter.getResourceString("string_4472"), value.strikethroughLabel) + "</div>");
                }
                else if (listViewLineElement.find(".listViewLine").hasClass("strikethrough") && listViewLineElement.attr("aria-selected") === "false") {
                    listViewLineElement.append("<div class='hidden'>" + value.strikethroughLabel + "</div>");
                }
                else if (!listViewLineElement.find(".listViewLine").hasClass("strikethrough") && listViewLineElement.attr("aria-selected") === "true") {
                    listViewLineElement.append("<div class='hidden'>" + Commerce.ViewModelAdapter.getResourceString("string_4472") + "</div>");
                }
                else {
                    listViewLineElement.find("div.hidden").remove();
                }
                listViewLineElement.find(".win-selectioncheckmark:not([role])").each(function (index, currentElement) {
                    var $currentElement = $(currentElement);
                    $currentElement.attr("role", "checkbox");
                });
            };
            var ariaLabel_1;
            if (!Commerce.StringExtensions.isNullOrWhitespace(value.ariaLabelResx)) {
                ariaLabel_1 = Commerce.ViewModelAdapter.getResourceString(value.ariaLabelResx);
            }
            if (useWinJSListView_1) {
                $element.addClass("col");
                var afterRenderHandler = function (elementSet, bindingContext) {
                    cleanKnockoutBinding(elementSet[1]);
                };
                ko.applyBindingsToNode(element, { template: { name: "listViewStandardGridTemplate", data: value, afterRender: afterRenderHandler } });
                $element.find(".listViewHeader").addClass(value.rowClass);
                $element.find(".listViewLine").addClass(value.headerRowClass);
                var $standardGridItemTemplate = $element.find(".standardGridItemTemplate");
                var standardGridItemTemplate = new WinJS.Binding.Template($standardGridItemTemplate[0]);
                var $listViewPlaceholder = $element.find(".listViewPlaceholder");
                var listViewControlOptions = {
                    itemTemplate: standardGridItemTemplate.element,
                    layout: {
                        type: WinJS.UI.ListLayout
                    }
                };
                listViewControl = new WinJS.UI.ListView($listViewPlaceholder[0], listViewControlOptions);
                var forceControlLayout = valueAccessor().forceControlLayout;
                if (forceControlLayout && ko.isObservable(forceControlLayout)) {
                    forceControlLayout(function () {
                        if (listViewControl._disposed !== true) {
                            listViewControl.forceLayout();
                        }
                    });
                }
                var loadingStateChanged = function (event) {
                    if (listViewControl.loadingState === "complete" && value.emptyListViewTemplate) {
                        toggleEmptyGridTemplate_1(listViewControl.itemDataSource.list.length);
                    }
                    if (Commerce.ListView.showsCheckbox(value)) {
                        $element.find(".win-surface").addClass("win-selectionmode");
                    }
                };
                listViewControl.addEventListener("loadingstatechanged", WinJS.Utilities.markSupportedForProcessing(loadingStateChanged));
                var selectionChanged = function (event) {
                    if (listViewControl.selection.count() > 0) {
                        Commerce.Interaction.triggerEvent(element, Commerce.InteractionEvents.ROWSELECTEDEVENT);
                    }
                };
                listViewControl.addEventListener("selectionchanged", WinJS.Utilities.markSupportedForProcessing(selectionChanged));
                var itemInvoked = function (event) {
                    Commerce.Interaction.triggerEvent(element, Commerce.InteractionEvents.ROWCLICKEDEVENT);
                };
                listViewControl.addEventListener("iteminvoked", WinJS.Utilities.markSupportedForProcessing(itemInvoked));
                var winControlBindings_1 = {};
                Object.keys(value).forEach(function (i) {
                    winControlBindings_1[i] = value[i];
                });
                if (Commerce.ObjectExtensions.isNullOrUndefined(winControlBindings_1.swipeBehavior)
                    || winControlBindings_1.swipeBehavior !== WinJS.UI.SwipeBehavior.none) {
                    winControlBindings_1.swipeBehavior = WinJS.UI.SwipeBehavior.select;
                }
                ko.applyBindingsToNode($listViewPlaceholder[0], { winControl: winControlBindings_1 }, viewModel);
                if (!Commerce.StringExtensions.isNullOrWhitespace(ariaLabel_1)) {
                    $listViewPlaceholder.attr("aria-label", ariaLabel_1);
                }
            }
            else {
                $element.addClass("standardGrid listViewHandler");
                var itemContainersAndItems_1 = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(value.itemDataSource)
                    && Commerce.ObjectExtensions.isFunction(value.itemDataSource.subscribe)) {
                    var subscription_1 = value.itemDataSource.subscribe(function (newValue) {
                        if (!Commerce.ArrayExtensions.hasElements(newValue)) {
                            itemContainersAndItems_1.splice(0, itemContainersAndItems_1.length);
                        }
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        subscription_1.dispose();
                    });
                }
                var afterRenderHandler = function (elementSet, bindingContext) {
                    var viewModelTemp = viewModel;
                    var selectedRowsKey = "selectedRows";
                    $element.data(selectedRowsKey, []);
                    var $elementSet = $(elementSet);
                    $elementSet.filter(".itemContainer").each(function (index, listViewLineElement) {
                        var $listViewLineElement = $(listViewLineElement);
                        $listViewLineElement.find(".row").addClass(value.rowClass);
                        if (listViewLineElement.winControl) {
                            return;
                        }
                        var itemContainerOptions = {
                            swipeOrientation: "horizontal",
                            swipeBehavior: value.selectionMode === WinJS.UI.SelectionMode.none ? WinJS.UI.SwipeBehavior.none : WinJS.UI.SwipeBehavior.select
                        };
                        var itemContainer = new WinJS.UI.ItemContainer(listViewLineElement, itemContainerOptions);
                        itemContainersAndItems_1.push({ itemContainer: itemContainer, item: bindingContext });
                        var itemInvokeHandler = function (eventArgs) {
                            if (value.tapBehavior === "toggleSelect") {
                                itemContainer.selected = !itemContainer.selected;
                            }
                            if (value.iteminvoked) {
                                value.iteminvoked.call(viewModelTemp, {
                                    currentTarget: eventArgs.currentTarget,
                                    data: bindingContext
                                });
                            }
                            Commerce.Interaction.triggerEvent(listViewLineElement, Commerce.InteractionEvents.ROWCLICKEDEVENT);
                        };
                        itemContainer.addEventListener("invoked", WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler));
                        var selectionChangedHandler = function (eventArgs) {
                            var selectedRows = $element.data(selectedRowsKey);
                            if (itemContainer.selected) {
                                selectedRows.push(bindingContext);
                                if (value.selectionMode === WinJS.UI.SelectionMode.single) {
                                    $element.find(".itemContainer").each(function (index, listViewLineElement) {
                                        var $listViewLineElement = $(listViewLineElement);
                                        if (listViewLineElement.winControl !== itemContainer) {
                                            listViewLineElement.winControl.selected = false;
                                        }
                                        setLineStateHandler_1($listViewLineElement);
                                    });
                                }
                                else if (value.selectionMode === WinJS.UI.SelectionMode.multi) {
                                    $element.find(".itemContainer").each(function (index, listViewLineElement) {
                                        var $listViewLineElement = $(listViewLineElement);
                                        if (listViewLineElement.winControl === itemContainer) {
                                            setLineStateHandler_1($listViewLineElement);
                                        }
                                    });
                                }
                            }
                            else {
                                var index_1 = selectedRows.indexOf(bindingContext);
                                if (index_1 > -1) {
                                    selectedRows.splice(index_1, 1);
                                }
                                $element.find(".itemContainer").each(function (index, listViewLineElement) {
                                    var $listViewLineElement = $(listViewLineElement);
                                    if (listViewLineElement.winControl === itemContainer) {
                                        setLineStateHandler_1($listViewLineElement);
                                    }
                                });
                            }
                            if (value.selectionchanged) {
                                var appBarElementId = value.selectionchanged.appBarId;
                                if (!Commerce.StringExtensions.isNullOrWhitespace(appBarElementId)) {
                                    var appBarControl = $(appBarElementId).get(0);
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(appBarControl)
                                        && !Commerce.ObjectExtensions.isNullOrUndefined(appBarControl.winControl)) {
                                        if (selectedRows.length > 0 && Commerce.ObjectExtensions.isFunction(appBarControl.winControl.show)) {
                                            appBarControl.winControl.show();
                                        }
                                        else if (Commerce.ObjectExtensions.isFunction(appBarControl.winControl.hide)) {
                                            appBarControl.winControl.hide();
                                        }
                                    }
                                }
                                value.selectionchanged.eventHandlerCallBack.call(viewModelTemp, [].concat(selectedRows));
                            }
                            if (selectedRows.length > 0) {
                                Commerce.Interaction.triggerEvent(listViewLineElement, Commerce.InteractionEvents.ROWSELECTEDEVENT);
                            }
                        };
                        itemContainer.addEventListener("selectionchanged", WinJS.Utilities.markSupportedForProcessing(selectionChangedHandler));
                        $listViewLineElement.find(".expandButton").click(function (eventArgs) {
                            var $expandButton = $(eventArgs.currentTarget);
                            var $itemContainer = $(eventArgs.currentTarget).closest(".itemContainer");
                            $itemContainer.toggleClass("expanded");
                            if ($itemContainer.hasClass("expanded")) {
                                $expandButton.removeClass("iconChevronDown icon-14x14").addClass("iconChevronUp icon-14x14");
                                $expandButton.attr("aria-expanded", "true");
                            }
                            else {
                                $expandButton.removeClass("iconChevronUp icon-14x14").addClass("iconChevronDown icon-14x14");
                                $expandButton.attr("aria-expanded", "false");
                            }
                            var $colspanRow = $listViewLineElement.find(".colspanRow");
                            if (value.colspanRowTemplate) {
                                ko.applyBindingsToNode($colspanRow[0], {
                                    template: {
                                        name: value.colspanRowTemplate,
                                        data: bindingContext
                                    }
                                }, viewModel);
                            }
                            $colspanRow = $listViewLineElement.find(".colspanRow");
                            if (!Commerce.StringExtensions.isNullOrWhitespace(value.rowExpandedTemplateId) && $itemContainer.hasClass("expanded")) {
                                ko.applyBindingsToNode($colspanRow.get(0), {
                                    template: {
                                        name: value.rowExpandedTemplateId,
                                        data: bindingContext
                                    }
                                }, viewModelTemp);
                                $colspanRow.show();
                            }
                            else {
                                $colspanRow.hide();
                            }
                        });
                        if (Commerce.ListView.isAlwaysExpanded(value)) {
                            var $colspanRow = $listViewLineElement.find(".colspanRow");
                            if (value.rowExpandedTemplateId) {
                                ko.applyBindingsToNode($colspanRow.get(0), {
                                    template: {
                                        name: value.rowExpandedTemplateId,
                                        data: bindingContext
                                    }
                                }, viewModelTemp);
                                var $itemContainer = $colspanRow.closest(".itemContainer");
                                $itemContainer.addClass("expanded");
                                $colspanRow.show();
                            }
                            else {
                                $colspanRow.hide();
                            }
                        }
                        if (value.colspanRowTemplate) {
                            var $colspanRowPlaceholder = $listViewLineElement.find(".colspanRow");
                            ko.applyBindingsToNode($colspanRowPlaceholder[0], {
                                template: {
                                    name: value.colspanRowTemplate,
                                    data: bindingContext
                                }
                            }, viewModel);
                        }
                    });
                };
                value.dataRowsAfterRender = afterRenderHandler;
                ko.applyBindingsToNode(element, {
                    template: {
                        name: "listViewEnhancedGridTemplate",
                        data: value,
                        afterRender: function () {
                            if (value.headerRowClass) {
                                $element.find(".listViewHeader").addClass(value.headerRowClass);
                            }
                            var scrollDiv = $element.find(".tableContent");
                            if (value.emptyListViewTemplate) {
                                if (value.itemDataSource) {
                                    if (value.itemDataSource.subscribe) {
                                        var subscription_2 = value.itemDataSource.subscribe(function (newValue) {
                                            toggleEmptyGridTemplate_1(newValue.length);
                                            if (value.scrollToBottom) {
                                                scrollDiv.scrollTop(scrollDiv[0].scrollHeight);
                                            }
                                        });
                                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                                            subscription_2.dispose();
                                        });
                                        toggleEmptyGridTemplate_1(value.itemDataSource().length);
                                    }
                                    else {
                                        toggleEmptyGridTemplate_1(value.itemDataSource.length);
                                    }
                                }
                                else {
                                    toggleEmptyGridTemplate_1(0);
                                }
                            }
                            if (!Commerce.StringExtensions.isNullOrWhitespace(ariaLabel_1)) {
                                scrollDiv.attr("aria-label", ariaLabel_1);
                            }
                        }
                    }
                }, this);
                var listViewViewModel = new Commerce.ListView.ListViewViewModel(itemContainersAndItems_1);
                element.listViewViewModel = listViewViewModel;
                return { controlsDescendantBindings: true };
            }
        }
        return { controlsDescendantBindings: false };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.selectRefinerControl = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var selectedRefinerValues = ko.observableArray(Commerce.ObjectExtensions.isNullOrUndefined(options.refiner.SelectedValues) ? [] : options.refiner.SelectedValues);
        var controlAttribute = Commerce.StringExtensions.format("selectRefinerControl_{0}", options.refiner.KeyName);
        var controlAddButtonAttribute = Commerce.StringExtensions.format("selectRefinerControl_addButton_{0}", options.refiner.KeyName);
        var addButtonAriaLabelAttribute = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4185"), options.refiner.KeyName);
        var removeButtonAriaLabelAttribute = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_941"), "{0}", options.refiner.KeyName);
        var showInputDialog = function () {
            options.showInputDialogCallback().done(function (refinerValues) {
                if (Commerce.ArrayExtensions.hasElements(refinerValues)) {
                    selectedRefinerValues(refinerValues);
                    options.refiner.SelectedValues = refinerValues;
                }
                else if (!Commerce.ArrayExtensions.hasElements(options.refiner.SelectedValues)) {
                    element.parentNode.removeChild(element);
                    options.refinerRemovedHandler();
                }
            });
        };
        var removeButtonHandler = function (data, eventInfo) {
            selectedRefinerValues.remove(data);
            if (!Commerce.ArrayExtensions.hasElements(selectedRefinerValues())) {
                element.parentNode.removeChild(element);
                options.refinerRemovedHandler();
            }
        };
        var addButtonHandler = function (data, eventInfo) {
            showInputDialog();
        };
        ko.applyBindingsToNode(element, {
            template: {
                name: "selectRefinerControlTemplate", data: {
                    values: selectedRefinerValues,
                    addButton: addButtonHandler,
                    removeButton: removeButtonHandler,
                    refiner: options.refiner,
                    refinerValueTemplate: options.refinerValueTemplate,
                    controlAttribute: controlAttribute,
                    controlAddButtonAttribute: controlAddButtonAttribute,
                    addButtonAriaLabelAttribute: addButtonAriaLabelAttribute,
                    removeButtonAriaLabelAttribute: removeButtonAriaLabelAttribute
                }
            }
        });
        if (!Commerce.ArrayExtensions.hasElements(options.refiner.SelectedValues)) {
            showInputDialog();
        }
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.sliderRefinerControl = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var refiner = ko.utils.unwrapObservable(valueAccessor()) || {};
        if (Commerce.ObjectExtensions.isNullOrUndefined(refiner) || !Commerce.ArrayExtensions.hasElements(refiner.Values)) {
            return;
        }
        var getRangeValues = function (curRefinerValue) {
            var convertedLeftValueBound = Math.floor(parseFloat(curRefinerValue.LeftValueBoundString));
            var convertedRightValueBound = Math.ceil(parseFloat(curRefinerValue.RightValueBoundString));
            return [convertedLeftValueBound, convertedRightValueBound];
        };
        var getFormattedRangeValues = function (curRangeValues, dataTypeValue, unitText) {
            var formattedLeftValueBoundString = curRangeValues[0].toString();
            var formattedRightValueBoundString = curRangeValues[1].toString();
            if (dataTypeValue === Commerce.Proxy.Entities.AttributeDataType.Currency) {
                formattedLeftValueBoundString = Commerce.NumberExtensions.formatCurrency(curRangeValues[0], unitText);
                formattedRightValueBoundString = Commerce.NumberExtensions.formatCurrency(curRangeValues[1], unitText);
            }
            return [formattedLeftValueBoundString, formattedRightValueBoundString];
        };
        var rangeFormat = "&nbsp;({0}&nbsp;&ndash;&nbsp;{1})";
        var sliderAttribute = Commerce.StringExtensions.format("sliderRefinerControl_slider_{0}", refiner.KeyName);
        var minformatString = Commerce.StringExtensions.format("{0} {1} ", Commerce.ViewModelAdapter.getResourceString("string_4193"), Commerce.ViewModelAdapter.getResourceString("string_5724"));
        var maxformatString = Commerce.StringExtensions.format("{0} {1} ", Commerce.ViewModelAdapter.getResourceString("string_4194"), Commerce.ViewModelAdapter.getResourceString("string_5724"));
        var originalRefinerValue = refiner.Values[0];
        var minValue = getRangeValues(originalRefinerValue)[0];
        var maxValue = getRangeValues(originalRefinerValue)[1];
        var currentRefinerValue = Commerce.ArrayExtensions.hasElements(refiner.SelectedValues) ?
            refiner.SelectedValues[0] : Commerce.ObjectExtensions.clone(originalRefinerValue);
        var rangeValues = ko.observableArray(getRangeValues(currentRefinerValue));
        var currentFormattedRangeValues = getFormattedRangeValues(rangeValues(), originalRefinerValue.DataTypeValue, originalRefinerValue.UnitText);
        var currentRange = ko.observable(Commerce.StringExtensions.format(rangeFormat, currentFormattedRangeValues[0], currentFormattedRangeValues[1]));
        var onSlide = function (event, selectedRangeValues) {
            currentRefinerValue.LeftValueBoundString = selectedRangeValues.values[0].toString();
            currentRefinerValue.RightValueBoundString = selectedRangeValues.values[1].toString();
            var curFormattedRangeValues = getFormattedRangeValues(selectedRangeValues.values, originalRefinerValue.DataTypeValue, originalRefinerValue.UnitText);
            currentRange(Commerce.StringExtensions.format(rangeFormat, curFormattedRangeValues[0], curFormattedRangeValues[1]));
            refiner.SelectedValues = [currentRefinerValue];
            $element.find(".ui-slider-handle").first().attr("aria-valuetext", Commerce.StringExtensions.format("{0} {1} ", minformatString, curFormattedRangeValues[0]));
            $element.find(".ui-slider-handle").last().attr("aria-valuetext", Commerce.StringExtensions.format("{0} {1} ", maxformatString, curFormattedRangeValues[1]));
        };
        var afterRefinerUIRender = function () {
            $element.find(".slider")[0].focus();
            $element.find(".ui-slider-handle").attr("role", "slider");
            $element.find(".ui-slider-handle").first().attr("aria-label", minformatString);
            $element.find(".ui-slider-handle").last().attr("aria-label", maxformatString);
            $element.find(".ui-slider-handle").first().attr("aria-valuetext", currentFormattedRangeValues[0]);
            $element.find(".ui-slider-handle").last().attr("aria-valuetext", currentFormattedRangeValues[1]);
        };
        var formattedRangeValues = getFormattedRangeValues(getRangeValues(originalRefinerValue), originalRefinerValue.DataTypeValue, originalRefinerValue.UnitText);
        ko.applyBindingsToNode(element, {
            template: {
                name: "sliderRefinerControlTemplate", data: {
                    refiner: refiner,
                    currentRange: currentRange,
                    rangeValues: rangeValues,
                    options: {
                        min: minValue,
                        max: maxValue,
                        range: true
                    },
                    formattedMin: formattedRangeValues[0],
                    formattedMax: formattedRangeValues[1],
                    sliderAttribute: sliderAttribute,
                    slide: onSlide
                }, afterRender: afterRefinerUIRender
            }
        });
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var TileList;
    (function (TileList) {
        function setFocusOnElement(element) {
            var $element = $(element);
            $element.focus();
            if (!Commerce.ObjectExtensions.isNullOrUndefined(element.parentNode)) {
                element.parentNode.defaultFocusSet = true;
            }
        }
        TileList.setFocusOnElement = setFocusOnElement;
    })(TileList = Commerce.TileList || (Commerce.TileList = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.tileList = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        var $element = $(element);
        var defaultSize = 120;
        var defaultTileType = "square";
        var flatType = "flat";
        var doubleLineType = "doubleLine";
        var sizeFormat = "{0}px";
        var baseWidth = value.width || defaultSize;
        var baseHeight = value.height || defaultSize;
        $element.addClass("tileList col stretch");
        if ($element.closest(".commerceDialog").length > 0) {
            value.tileType = value.tileType === doubleLineType ? value.tileType : flatType;
            value.isInDialog = true;
        }
        if (Commerce.Config.isPhone || value.isInDialog) {
            $element.addClass("scrollY");
        }
        value.field = value.field || null;
        value.secondaryField = value.secondaryField || null;
        value.cssClass = value.cssClass || null;
        value.converter = value.converter || null;
        value.secondaryConverter = value.secondaryConverter || null;
        value.cssClassField = value.cssClassField || null;
        value.tileType = value.tileType || (Commerce.Config.isPhone ? flatType : defaultTileType);
        if (value.tileType !== flatType && value.tileType !== doubleLineType) {
            $element.addClass("wrap");
        }
        var blockStyle = {
            "min-width": value.tileType === defaultTileType ? Commerce.StringExtensions.format(sizeFormat, baseWidth) : "100%",
            "max-width": value.tileType === defaultTileType ? Commerce.StringExtensions.format(sizeFormat, baseWidth) : "100%",
            "min-height": value.tileType === defaultTileType ? Commerce.StringExtensions.format(sizeFormat, baseHeight) : "auto",
            "max-height": value.tileType === defaultTileType ? Commerce.StringExtensions.format(sizeFormat, baseHeight) : "auto"
        };
        value.afterRender = function () {
            var viewModelTemp = viewModel;
            $element.find(".itemContainer").each(function (index, itemContainerElement) {
                if (!itemContainerElement.winControl) {
                    var rowData_1 = value.itemDataSource()[index];
                    var $itemContainer = $(itemContainerElement);
                    if (((itemContainerElement.parentNode.defaultFocusSet !== true) || index === 0)
                        && !rowData_1.disabled) {
                        Commerce.TileList.setFocusOnElement(itemContainerElement);
                        if (ko.isObservable(value.focusOnFirstTileCallback)) {
                            value.focusOnFirstTileCallback(Commerce.TileList.setFocusOnElement.bind(null, itemContainerElement));
                        }
                    }
                    else if (rowData_1.disabled) {
                        (itemContainerElement).tabIndex = -1;
                    }
                    $itemContainer.css(blockStyle);
                    $itemContainer.attr("role", "menuitem");
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel.selectionType)) {
                        $itemContainer.attr("aria-label", viewModel._viewModel.selectionType() + " " + rowData_1.Value);
                    }
                    var itemContainerOptions = {
                        swipeBehavior: WinJS.UI.SelectionMode.none,
                        selectionDisabled: true,
                        tapBehavior: WinJS.UI.TapBehavior.invokeOnly
                    };
                    var itemContainer = new WinJS.UI.ItemContainer(itemContainerElement, itemContainerOptions);
                    $itemContainer.addClass("highContrastBorder");
                    if (!rowData_1.disabled) {
                        var itemInvokeHandler = void 0;
                        itemInvokeHandler = function (event) {
                            if (value.iteminvoked) {
                                value.iteminvoked.call(viewModelTemp, { data: rowData_1 });
                            }
                            event.stopPropagation();
                        };
                        var handler = void 0;
                        handler = WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler);
                        itemContainer.addEventListener("invoked", handler);
                    }
                    $itemContainer.find(".win-itembox, .win-item").addClass("col grow");
                }
            });
        };
        if (ko.isObservable(value.focusOnFirstTileCallback)) {
            value.focusOnFirstTileCallback(function () { return; });
        }
        ko.applyBindingsToNode(element, {
            template: {
                name: "tileListTemplate",
                data: value
            }
        }, this);
        if (value.flipInPortrait) {
            $element.find(".itemList").addClass("flip");
        }
        return { controlsDescendantBindings: true };
    }
};
document.addEventListener("DOMContentLoaded", function (evt) {
    Object.keys(Commerce.Controls).forEach(function (controlName) {
        var controlPrototype = Commerce.Controls[controlName].prototype;
        if (controlName !== "UserControl" && Commerce.ObjectExtensions.isOfType(controlPrototype, Commerce.Controls.UserControl)) {
            var pagePath = null;
            if (controlName.indexOf("DeviceDeactivation") >= 0) {
                pagePath = Commerce.Config.viewRoot + "/Login/" + controlName + ".html";
            }
            else {
                pagePath = Commerce.Config.controlRoot + "/" + controlName + ".html";
            }
            Commerce.ViewModelAdapterWinJS.defineControl(pagePath, Commerce.Controls[controlName]);
        }
    });
});
var Pos;
(function (Pos) {
    "use strict";
    var AsyncQueue = Commerce.AsyncQueue;
    var AsyncResult = Commerce.AsyncResult;
    var LoadExtensionsRequest = Commerce.LoadExtensionsRequest;
    var VoidAsyncResult = Commerce.VoidAsyncResult;
    var Proxy = Commerce.Proxy;
    var InitializerBase = (function () {
        function InitializerBase() {
        }
        InitializerBase.prototype.initialize = function (userAgent) {
            var _this = this;
            Commerce.StringResourceManager = new Commerce.PosStringResourceManager(function (id) { return WinJS.Resources.getString(id).value; });
            WinJS.Binding.optimizeBindingReferences = true;
            var isFirstActivation = true;
            WinJS.Application.onactivated = function (args) {
                if (isFirstActivation) {
                    isFirstActivation = false;
                    args.setPromise(_this._convertAsyncResultToWinJSPromise(_this._onFirstActivation(args, userAgent)));
                }
                else {
                    args.setPromise(_this._convertAsyncResultToWinJSPromise(VoidAsyncResult.createResolved()));
                }
            };
            var isFirstReady = true;
            WinJS.Application.onready = function (args) {
                if (isFirstReady) {
                    isFirstReady = false;
                    args.setPromise(_this._convertAsyncResultToWinJSPromise(_this._onFirstReady(args, userAgent)));
                }
                else {
                    args.setPromise(_this._convertAsyncResultToWinJSPromise(VoidAsyncResult.createResolved()));
                }
            };
            WinJS.Application.onerror = this._onError;
            WinJS.Application.oncheckpoint = function (args) {
                return args.setPromise(_this._convertAsyncResultToWinJSPromise(_this._onCheckpoint(args)));
            };
            WinJS.Application.start();
        };
        InitializerBase.prototype._onFirstReady = function (args, userAgent) {
            var _this = this;
            var onFirstReadyQueue = new AsyncQueue();
            var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
            onFirstReadyQueue.enqueue(function () {
                return _this._runApplicationStartupQueue(userAgent, CORRELATION_ID);
            }).enqueue(function (result) {
                if (!result.canceled && _this._checkWindowIsSafe(userAgent)) {
                    _this._setupDeveloperMode();
                    return AsyncResult.createResolved();
                }
                else {
                    return AsyncResult.createRejected();
                }
            });
            return onFirstReadyQueue.run();
        };
        InitializerBase.prototype._onCheckpoint = function (args) {
            return VoidAsyncResult.createResolved();
        };
        InitializerBase.prototype._checkWindowIsSafe = function (userAgent) {
            var isWindowAllowed = window.self === window.top
                || (window.self.parent === window.top && window.self.location.origin === window.self.parent.location.origin);
            if (!isWindowAllowed) {
                alert(Commerce.ViewModelAdapter.getResourceString("string_29044"));
                var errorDetails = Commerce.StringExtensions.format("Potential clickjacking attempt detected. Source origin: {0}.", top.location.origin);
                Commerce.RetailLogger.cloudPosBrowserNotSupported(userAgent, errorDetails);
            }
            return isWindowAllowed;
        };
        InitializerBase.prototype._convertAsyncResultToWinJSPromise = function (asyncResult) {
            return new WinJS.Promise(function (completeDispatch, errorDispatch, progressDispatch) {
                asyncResult.done(function () {
                    completeDispatch();
                }).fail(function (error) {
                    errorDispatch();
                });
            });
        };
        InitializerBase.prototype._convertWinJSPromiseToAsyncResult = function (winJSPromise) {
            var asyncResult = new VoidAsyncResult();
            winJSPromise.done(function (value) {
                asyncResult.resolve();
            }, function (error) {
                asyncResult.reject(error);
            });
            return asyncResult;
        };
        InitializerBase.prototype._onFirstActivation = function (args, userAgent) {
            var _this = this;
            this._fixDropDownForEdge(userAgent);
            Commerce.Proxy.Common.XmlHttpRequestHelper.SetupAjaxParameters();
            Commerce.Proxy.Common.XmlHttpRequestHelper.SetupODataParameters();
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            var onFirstActivationQueue = new AsyncQueue();
            onFirstActivationQueue.enqueue(function () {
                return Commerce.Host.instance.initializeAsync(_this._initializeConfiguration.bind(_this));
            }).enqueue(function () {
                _this._checkActivationArguments(correlationId);
                TsLogging.LoggerBase.setUserSession(TsLogging.Utils.emptyGuid(), "");
                var appSessionId = TsLogging.Utils.generateGuid();
                TsLogging.LoggerBase.setAppSessionId(appSessionId);
                var deviceNumber = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY);
                var registerId = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY);
                TsLogging.LoggerBase.setDeviceInfo(Commerce.Config.appHardwareId, deviceNumber, registerId);
                Commerce.RetailLogger.appLaunch(correlationId, appSessionId, Commerce.Config.isDemoMode, Commerce.Config.appHardwareId, deviceNumber, Commerce.Proxy.Entities.ApplicationTypeEnum[Commerce.Host.instance.application.getApplicationType()]);
                return _this._convertWinJSPromiseToAsyncResult(WinJS.UI.processAll());
            });
            return onFirstActivationQueue.run();
        };
        InitializerBase.prototype._fixDropDownForEdge = function (userAgent) {
            if (this._isEdgeBrowser(userAgent)) {
                var remove_1 = HTMLSelectElement.prototype.remove;
                HTMLSelectElement.prototype.remove = function (index) {
                    if (arguments.length === 0) {
                        this.parentElement.removeChild(this);
                    }
                    else {
                        remove_1.call(this, index);
                        if (this.children[0] !== this.options[0]) {
                            this.insertBefore(this.children[0], this.children[1]);
                        }
                    }
                };
            }
        };
        InitializerBase.prototype._isEdgeBrowser = function (userAgent) {
            return userAgent.indexOf("Edge") > -1;
        };
        InitializerBase.prototype._initializeConfiguration = function (configurationProvider) {
            this._attachLoggingSinks(configurationProvider);
            var applicationType = Commerce.Host.instance.application.getApplicationType();
            if (applicationType === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindows) {
                var config = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.ENVIRONMENT_CONFIGURATION_KEY);
                if (config !== null) {
                    var environmentConfiguration = JSON.parse(config);
                    TsLogging.LoggerBase.setInstrumentationKey(environmentConfiguration.ClientAppInsightsInstrumentationKey);
                    TsLogging.LoggerBase.setTenantInfo(environmentConfiguration.EnvironmentId);
                    Commerce.RetailLogger.applicationLoadEnvironmentConfigurationStorageLoadSucceeded(config);
                }
            }
            if (configurationProvider.getValue("IsDemoModeEnabled") === "true") {
                Commerce.Config.isDemoMode = true;
                Commerce.Config.demoModeDeviceId = configurationProvider.getValue("DemoModeDeviceId");
                Commerce.Config.demoModeTerminalId = configurationProvider.getValue("DemoModeTerminalId");
                Commerce.Config.demoModeStaffId = configurationProvider.getValue("DemoModeStaffId");
                Commerce.Config.demoModePassword = configurationProvider.getValue("DemoModePassword");
            }
            Commerce.Config.onlineDatabase = configurationProvider.getValue("OnlineConnectionString");
            Commerce.Config.offlineDatabase = configurationProvider.getValue("OfflineConnectionString");
            Commerce.Config.aadLoginUrl = configurationProvider.getValue("AADLoginUrl");
            Commerce.Config.aadClientId = configurationProvider.getValue("AADClientId");
            Commerce.Config.aadRetailServerResourceId = configurationProvider.getValue("AADRetailServerResourceId");
            Commerce.Config.aadEnabled = !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.aadLoginUrl);
            Commerce.Config.persistentRetailServerUrl = configurationProvider.getValue("RetailServerUrl");
            Commerce.Config.persistentRetailServerEnabled = !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.persistentRetailServerUrl);
            var sqlCommandTimeout = Number(configurationProvider.getValue("SqlCommandTimeout"));
            if (sqlCommandTimeout >= 0) {
                Commerce.Config.sqlCommandTimeout = sqlCommandTimeout;
            }
            var commerceAudience = configurationProvider.getValue("CommerceAuthenticationAudience");
            if (!Commerce.StringExtensions.isNullOrWhitespace(commerceAudience)) {
                Commerce.Config.commerceAuthenticationAudience = commerceAudience;
            }
            var defaultOfflineDownloadInterval = Number(configurationProvider.getValue("DefaultOfflineDownloadInterval"));
            var defaultOfflineUploadInterval = Number(configurationProvider.getValue("DefaultOfflineUploadInterval"));
            if (defaultOfflineDownloadInterval > 0) {
                Commerce.Config.defaultOfflineDownloadIntervalInMilliseconds = defaultOfflineDownloadInterval * 60000;
            }
            if (defaultOfflineUploadInterval > 0) {
                Commerce.Config.defaultOfflineUploadIntervalInMilliseconds = defaultOfflineUploadInterval * 60000;
            }
            var connectionTimeOut = Number(configurationProvider.getValue("ConnectionTimeout"));
            if (connectionTimeOut > 0) {
                Commerce.Config.connectionTimeout = connectionTimeOut;
            }
            Commerce.Config.appHardwareId = Commerce.Host.instance.application.getAppSpecificHardwareId();
            Commerce.Config.printReceiptsOnCardDeclineOrVoid =
                Commerce.StringExtensions.compare(configurationProvider.getValue("PrintReceiptsOnCardDeclineOrVoid"), "true", true) === 0
                    ? true : false;
            Commerce.NumberSequence.isEnabled = true;
        };
        InitializerBase.prototype._checkActivationArguments = function (correlationId) {
            if (!Commerce.Helpers.DeviceActivationHelper.isDeviceActivationCompleted()
                && Commerce.Helpers.DeviceActivationHelper.areStoredDeviceTerminalDifferentFromArguments()) {
                var storedDeviceNumber = Commerce.Helpers.DeviceActivationHelper.storedDeviceNumber;
                var argumentDeviceNumber = Commerce.Helpers.DeviceActivationHelper.argumentDeviceNumber;
                var storedRegisterNumber = Commerce.Helpers.DeviceActivationHelper.storedRegisterNumber;
                var argumentRegisterNumber = Commerce.Helpers.DeviceActivationHelper.storedRegisterNumber;
                var messageTolog = Commerce.StringExtensions.format("checkActivationArguments. StoredDevNum:{0}; ArgDevNum:{1}; StoredRegNumber:{2}; ArgRegNum:{3}", storedDeviceNumber, argumentDeviceNumber, storedRegisterNumber, argumentRegisterNumber);
                Commerce.RetailLogger.coreStorageClearInitiated(correlationId, messageTolog);
                Commerce.ApplicationStorage.clear();
            }
        };
        InitializerBase.prototype._runApplicationStartupQueue = function (userAgent, correlationId) {
            var _this = this;
            var startUpQueue = new Commerce.AsyncQueue();
            var applyCommonStylesResult = Commerce.CSSHelpers.loadAxRetailStylesheetAsync();
            startUpQueue.enqueue(function () {
                var result = new Commerce.AsyncResult();
                var applicationState = _this._validateApplicationState();
                if (applicationState.shouldExit) {
                    startUpQueue.cancel();
                }
                if (!applicationState.valid) {
                    applyCommonStylesResult.always(function () {
                        var _a;
                        var errorMessageResourceID = applicationState.errorMessageResourceID;
                        if (!Commerce.StringExtensions.isNullOrWhitespace(errorMessageResourceID)) {
                            var formatData = applicationState.errorMessageFormatData;
                            if (Commerce.ArrayExtensions.hasElements(formatData)) {
                                formatData = formatData.map(function (value) {
                                    return Commerce.ObjectExtensions.isNullOrUndefined(value) ? Commerce.StringExtensions.EMPTY : value;
                                });
                                result.resolveOrRejectOn((_a = Commerce.ViewModelAdapter).displayMessage.apply(_a, [errorMessageResourceID,
                                    Commerce.MessageType.Info,
                                    Commerce.MessageBoxButtons.Default,
                                    null,
                                    0].concat(formatData)));
                            }
                            else {
                                result.resolveOrRejectOn(Commerce.ViewModelAdapter.displayMessage(errorMessageResourceID, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, null, 0));
                            }
                        }
                        else {
                            result.resolve(null);
                        }
                    });
                }
                else {
                    result.resolve(null);
                }
                return result;
            });
            startUpQueue.enqueue(function () {
                Commerce.Config.retailServerUrl = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL);
                Commerce.Model.Managers.Factory = new Commerce.Model.Managers.RetailServerManagerFactory(Commerce.Config.retailServerUrl);
                Commerce.ApplicationStorage.registerNonEssentialDataFilter(Commerce.ApplicationStorageIDs.DEVICE_CONFIGURATION_KEY, function (originalDeviceConfigurationData) {
                    var deviceConfiguration = new Proxy.Entities.DeviceConfigurationClass(JSON.parse(originalDeviceConfigurationData));
                    deviceConfiguration.LogOnBackgroundPictureAsBase64 = Commerce.StringExtensions.EMPTY;
                    deviceConfiguration.LogOnBackgroundPicturePortraitAsBase64 = Commerce.StringExtensions.EMPTY;
                    deviceConfiguration.BackgroundPictureAsBase64 = Commerce.StringExtensions.EMPTY;
                    return JSON.stringify(deviceConfiguration);
                });
                if (_this._checkWindowIsSafe(userAgent)) {
                    _this._registerAuthenticationProviders();
                }
                return _this._loadConfigurationsAsync(correlationId);
            });
            startUpQueue.enqueue(function () {
                var initializePeripheralsResult = _this._initializePeripheralsAsync();
                var request = new LoadExtensionsRequest(correlationId);
                var loadExtensionsAsyncResult = AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                var loadExtensibleEnumsResult = Commerce.ExtensibleEnumerations.ExtensibleEnumerationManager.instance.loadExtensibleEnumerations();
                Commerce.UI.Tutorial.init();
                _this._initializeTaskRecorder();
                var initializationResults = [
                    applyCommonStylesResult,
                    initializePeripheralsResult,
                    loadExtensionsAsyncResult,
                    loadExtensibleEnumsResult
                ];
                var asyncResult = new Commerce.VoidAsyncResult();
                Commerce.VoidAsyncResult.join(initializationResults).done(function () {
                    asyncResult.resolve();
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors).always(function () {
                        asyncResult.resolve();
                    });
                });
                return asyncResult;
            });
            return startUpQueue.run();
        };
        InitializerBase.prototype._validateApplicationState = function () {
            var state = {
                valid: true
            };
            if (!Commerce.ApplicationStorage.isLocalStorageSupported()) {
                state.errorMessageResourceID = Commerce.ErrorTypeEnum.LOCAL_STORAGE_IS_NOT_AVAILABLE;
                Commerce.RetailLogger.applicationLocalStorageNotAvailable(Commerce.ViewModelAdapter.getResourceString(state.errorMessageResourceID));
                state.valid = false;
                state.shouldExit = true;
            }
            if (Commerce.Host.instance.isApplicationUpdateRequired()) {
                state.errorMessageResourceID = Commerce.ErrorTypeEnum.APPLICATION_UPDATE_REQUIRED;
                Commerce.RetailLogger.applicationUpdateIsRequired();
                state.valid = false;
                state.shouldExit = false;
            }
            if (Commerce.Helpers.DeviceActivationHelper.isDeviceActivationCompleted()
                && Commerce.Helpers.DeviceActivationHelper.areStoredDeviceTerminalDifferentFromArguments()) {
                state.errorMessageResourceID = Commerce.ErrorTypeEnum.ACCESS_WRONG_DEVICE_TERMINAL;
                state.errorMessageFormatData = [
                    Commerce.Helpers.DeviceActivationHelper.argumentDeviceNumber,
                    Commerce.Helpers.DeviceActivationHelper.argumentRegisterNumber,
                    Commerce.Helpers.DeviceActivationHelper.storedDeviceNumber,
                    Commerce.Helpers.DeviceActivationHelper.storedRegisterNumber
                ];
                Commerce.RetailLogger.accessWrongDeviceTerminal();
                state.valid = false;
                state.shouldExit = false;
            }
            else {
                state.errorMessageFormatData = [];
            }
            return state;
        };
        InitializerBase.prototype._registerAuthenticationProviders = function () {
            var authenticationManager = Commerce.Authentication.AuthenticationProviderManager.instance;
            var addProvider = new Commerce.Authentication.Providers.AzureActiveDirectoryUserAuthenticationProvider();
            authenticationManager.registerImplicitGrantProvider(addProvider, Commerce.Authentication.AuthenticationProviderResourceType.USER);
            authenticationManager.registerImplicitGrantProvider(addProvider, Commerce.Authentication.AuthenticationProviderResourceType.LOCATOR_SERVICE);
            authenticationManager.registerResourceOwnerPasswordGrantProvider(new Commerce.Authentication.Providers.CommerceUserAuthenticationProvider(), Commerce.Authentication.AuthenticationProviderResourceType.USER);
            authenticationManager.registerResourceOwnerPasswordGrantProvider(new Commerce.Authentication.Providers.DeviceAuthenticationProvider(), Commerce.Authentication.AuthenticationProviderResourceType.DEVICE);
        };
        InitializerBase.prototype._setupDeveloperMode = function () {
            if (Commerce.Config.isDebugMode) {
                if (Commerce.CSSHelpers.isCSSDeveloperMode()) {
                    Commerce.CSSHelpers.loadCSSDeveloperModePresets();
                }
                $(window).keydown(function (event) {
                    if (event.keyCode === 68 && event.ctrlKey) {
                        WinJS.UI.SettingsFlyout.showSettings("developerModeSettingsFlyout", "Views/Controls/DeveloperMode.html");
                    }
                });
            }
        };
        InitializerBase.prototype._initializeTaskRecorder = function () {
            var _this = this;
            Commerce.TaskRecorder.TaskRecorderViewManager.setRenderPageImplementation(function (pageUri, element) {
                return _this._convertWinJSPromiseToAsyncResult(WinJS.UI.Pages.render(pageUri, element));
            });
        };
        InitializerBase.prototype._onError = function (error) {
            var errorMessage = "";
            var errorUrl = "";
            var stackTrace = "";
            var errorString = "";
            console.log(error);
            if (typeof (error.detail) === "object") {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(error.detail.errorMessage)) {
                    errorMessage = error.detail.errorMessage;
                    errorUrl = error.detail.errorUrl || "";
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(error.detail.error)) {
                    var innerError = error.detail.error;
                    if (innerError.error instanceof Commerce.UI.Sdk.PosSdkException) {
                        var posSdkException = innerError.error;
                        errorMessage = posSdkException.message;
                        var pageUri = Commerce.ObjectExtensions.isNullOrUndefined(innerError.page) ? "Unknown" : innerError.page.uri;
                        Commerce.RetailLogger.appUnhandledPosSdkException(posSdkException.getType(), posSdkException.originatingComponent, errorMessage, pageUri);
                    }
                    else {
                        errorMessage = Commerce.ObjectExtensions.isNullOrUndefined(innerError.message) ? "" : innerError.message;
                    }
                    stackTrace = Commerce.ObjectExtensions.isNullOrUndefined(innerError.stack) ? "" : innerError.stack;
                }
            }
            else {
                errorMessage = error.detail || "";
            }
            try {
                if (Commerce.ObjectExtensions.isObject(errorMessage) && !Commerce.ObjectExtensions.isNullOrUndefined(errorMessage)) {
                    errorMessage = JSON.stringify(errorMessage);
                }
                errorString = JSON.stringify(error);
            }
            catch (ex) {
                errorString = "";
            }
            Commerce.NotificationHandler.displayErrorMessage("string_29000");
            Commerce.RetailLogger.appUnhandledError(errorMessage, stackTrace, errorUrl, errorString);
            return true;
        };
        return InitializerBase;
    }());
    Pos.InitializerBase = InitializerBase;
})(Pos || (Pos = {}));
var Pos;
(function (Pos) {
    "use strict";
    var RuntimeInitializer = (function () {
        function RuntimeInitializer(defaultInitializer) {
            this._runtimeInitializers = [];
            this.addRuntimeInitializer(defaultInitializer);
        }
        RuntimeInitializer.prototype.addRuntimeInitializer = function (runtimeInitializer) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(runtimeInitializer)) {
                this._runtimeInitializers.push(runtimeInitializer);
            }
        };
        RuntimeInitializer.prototype.populateCompositionLoader = function (compositionLoader) {
            this._runtimeInitializers.forEach(function (runtimeInitializer) {
                runtimeInitializer.populateCompositionLoader(compositionLoader);
            });
        };
        return RuntimeInitializer;
    }());
    Pos.RuntimeInitializer = RuntimeInitializer;
})(Pos || (Pos = {}));
var Pos;
(function (Pos) {
    "use strict";
    var PosCommonRuntimeInitializer = (function () {
        function PosCommonRuntimeInitializer() {
        }
        PosCommonRuntimeInitializer.prototype.populateCompositionLoader = function (compositionLoader) {
            compositionLoader.addRequestHandler(Commerce.AuditEvent.RegisterAndGetAuditEventServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.RegisterRequestHandlersRequestHandler, function () { return compositionLoader; });
            compositionLoader.addRequestHandler(Commerce.RegisterRequestInterceptorsRequestHandler, function () { return compositionLoader; });
            compositionLoader.addRequestHandler(Commerce.AcknowledgeNotificationsRequestHandler);
            compositionLoader.addRequestHandler(Commerce.AddTenderLineToCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateAdvancedCashManagementTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateFloatEntryTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateSafeFloatEntryTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateSafeStartingAmountTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateSafeTenderRemovalTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateShiftFloatEntryTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateShiftStartingAmountTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateShiftTenderRemovalTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateStartingAmountTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CashManagement.CreateTenderRemovalTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Extensibility.Handlers.GetExtensionPackagesLoadInfoClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Extensibility.Handlers.LoadExtensionsRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.RegisterLegacyOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.LegacyOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.RestoreStaffTokenRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Features.Handlers.ShipCartLinesRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.GetInventoryAvailableToPromiseRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Offline.Handlers.ToggleConnectionRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CheckoutCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ConcludeTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.DataService.DataServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.DeclareStartingAmountClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetApplicationVersionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetAvailableUnreconciledEntriesServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetAuthenticationTokenClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetChannelConfigurationClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetConnectionStatusClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetCurrentCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetCustomerClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetDenominationTotalsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetDeviceConfigurationClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetExtensionProfileClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetHardwareProfileClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetKeyedInPriceClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetLoggedOnEmployeeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetNotificationsRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetOfflinePendingTransactionCountClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetOrgUnitConfigurationClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetOrgUnitTenderTypesClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetReasonCodeLinesClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetReceiptEmailAddressClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetReceiptsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetSalesOrderDetailsByTransactionIdClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetSalesOrdersWithNoFiscalTransactionsRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetScanResultClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetSessionInfoClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetTenderDetailsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.PrintDeclinedOrVoidedCardReceiptsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.PrintReceiptsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetCurrentShiftClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.IssueCreditMemoClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.RefreshCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.RefreshNotificationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.RegisterCustomAuditEventClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.RegisterPrintReceiptCopyEventRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ResumeSuspendedCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SalesOrders.GetGiftReceiptsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SalesOrders.GetAttributeGroupDetailsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SalesOrders.SelectCustomerOrderTypeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SaveAttributesOnCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SaveAttributesOnCartLinesClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SaveExtensionPropertiesOnCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SaveExtensionPropertiesOnCartLinesClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SaveFiscalTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SaveReasonCodeLinesOnCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SaveReasonCodeLinesOnCartLinesClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SetCartAttributesClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SyncAllStockCountJournalsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SelectSalesLinesForPickUpClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.TenderCounting.CreateBankDropTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.TenderCounting.CreateSafeBankDropTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.TenderCounting.CreateSafeDropTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.TenderCounting.CreateShiftBankDropTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.TenderCounting.CreateShiftSafeDropTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.TenderCounting.CreateTenderDeclarationTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.PrintPackingSlipClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Customers.SelectCustomerClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SelectPackingSlipIdClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SelectZipCodeInfoClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.InvalidShiftErrorHandlingClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ValidateCashDrawerLimitClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.IssueLoyaltyCardServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetAddressPurposesServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.AddAffiliationOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.AddCouponsOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.AddItemToCartOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.AddToGiftCardOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CalculateTotalOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CarryoutSelectedProductsOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CashOutGiftCardOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.ChangeCartLineUnitOfMeasureOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CheckGiftCardBalanceOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CloseShiftOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CreateCustomerOrderOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CreateCustomerQuoteOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.CustomerAccountDepositOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.DepositOverrideOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.EditCustomerOrderOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.GetRecommendedProductsRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.InventoryLookupOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.IssueGiftCardOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.LineDiscountAmountOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.LineDiscountPercentOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.LoyaltyCardPointsBalanceOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.OverrideLineTaxFromListOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.OverrideLineTaxOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.OverrideTransactionTaxOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.PickupAllOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.PriceOverrideOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.RecalculateChargesOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.SafeDropOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.SetCartLineCommentOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.SetCartLineQuantityOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.SetCustomerOnCartOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.SetTransactionCommentOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.SuspendCurrentCartOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.TenderDeclarationOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.TenderRemovalOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.TotalDiscountAmountOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.TotalDiscountPercentOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.VoidCartLineOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.VoidTenderLineOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.VoidTransactionOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetFulfillmentLineQuantityDialogClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetPickupDateClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetShippingChargeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetShippingDateClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetTransferOrderHeaderClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.OverrideHeaderChargeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.OverrideLineChargeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ShowAlphanumericInputDialogClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ShowChangeDueClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ShowListInputDialogClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ShowMessageDialogClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ShowNumericInputDialogClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.ShowTextInputDialogClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Authentication.LogOnRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Operations.Handlers.LogOffOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentAuthorizePaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentAuthorizeCardTokenPeripheralRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentBeginTransactionRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentCapturePaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentEndTransactionRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentExecuteTaskRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentEnquireGiftCardBalancePeripheralRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentRefundPaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CardPaymentVoidPaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CashDrawerIsOpenRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.CashDrawerOpenRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.GetActiveHardwareStationClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.HardwareStationDeviceActionRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.HardwareStationStatusRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.LineDisplayDisplayLinesRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalActivateGiftCardPeripheralRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalAuthorizePaymentActivityRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalAuthorizePaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalBeginTransactionRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalCancelOperationRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalCapturePaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalEndTransactionRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalExecuteTaskRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalFetchTokenPeripheralRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalRefundPaymentActivityRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalRefundPaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalUpdateLinesRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalVoidPaymentRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PrinterPrintRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.ScaleReadRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.BarcodeScannerOpenRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.BarcodeScannerGetBarcodesRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.BarcodeScannerCloseRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.MagneticStripeReaderOpenRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.MagneticStripeReaderGetMsrSwipeRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.MagneticStripeReaderCloseRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalGetTransactionReferenceIdRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Peripherals.PaymentTerminalGetTransactionByTransactionReferenceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.ActivateHardwareStationClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.AddBalanceToGiftCardClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.AddPreAuthorizedPaymentsToCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.AddPreprocessedTenderLineToCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.ApprovePartialPaymentClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.AuthorizeCardTokenAndAddToCartClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.CashOutGiftCardClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.CheckForRecoveredPaymentTransactionClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.ClearMerchantInformationClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.CreatePreProcessedTenderLineClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetAndUpdateTenderLineSignatureClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetAuthorizationOptionsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetCardTypeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetCurrencyAmountsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetDenominationListClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetGiftCardByIdServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetGiftCardClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetLoyaltyCardClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetPaymentCardTypeByBinRangeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetSignatureClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetSignatureFromDeviceClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetSignatureFromPOSClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.IssueGiftCardClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.SaveMerchantInformationClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.SelectCardTypeClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.SelectLinkedRefundClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.TokenizePaymentCardClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.UpdateTenderLineSignatureServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.ValidateAndUpdateTenderLineSignatureClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.ValidateSignatureClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.VoidPaymentClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Products.GetCurrentProductCatalogStoreClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Products.GetProductsByIdsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Products.GetRefinerValuesByTextServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Products.GetSerialNumberClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Products.SelectProductClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Products.SelectProductVariantClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Refiners.GetRefinerValuesClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SalesOrders.MarkAsPickedServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CreateCustomerServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CreateEmptyCartServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.CreateNonSalesTransactionServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Payments.Handlers.GetCardPaymentAcceptPointServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetCommissionSalesGroupsServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetCurrenciesServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.GetTaxOverridesServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.RecallOrderServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.SearchCommissionSalesGroupsServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.Reports.GetSrsReportDataSetServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.UpdateCustomerServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.FiscalIntegration.Handlers.InitializeFiscalPeripheralsClientRequestHandler);
            compositionLoader.addRequestHandler(Commerce.FiscalIntegration.Handlers.GetFiscalIntegrationRegistrationProcessServiceRequestHandler);
            compositionLoader.addRequestHandler(Commerce.FiscalIntegration.Handlers.RegisterFiscalEventClientRequestHandler);
            compositionLoader.addRequestInterceptor(Commerce.OperationRequest, new Commerce.Operations.Interceptors.OperationRequestInterceptor());
            compositionLoader.addRequestInterceptor(Commerce.LegacyOperationRequest, new Commerce.Operations.Interceptors.LegacyOperationRequestInterceptor());
            compositionLoader.addRequestInterceptor(Commerce.PaymentTerminalAuthorizePaymentRequest, new Commerce.Operations.Interceptors.DisableAutoLogOffDuringExecutionInterceptor());
            compositionLoader.addRequestInterceptor(Commerce.PaymentTerminalCapturePaymentRequest, new Commerce.Operations.Interceptors.DisableAutoLogOffDuringExecutionInterceptor());
            compositionLoader.addRequestInterceptor(Commerce.PaymentTerminalEnquireGiftCardBalancePeripheralRequest, new Commerce.Operations.Interceptors.DisableAutoLogOffDuringExecutionInterceptor());
            compositionLoader.addRequestInterceptor(Commerce.PaymentTerminalRefundPaymentRequest, new Commerce.Operations.Interceptors.DisableAutoLogOffDuringExecutionInterceptor());
            compositionLoader.addRequestInterceptor(Commerce.PaymentTerminalVoidPaymentRequest, new Commerce.Operations.Interceptors.DisableAutoLogOffDuringExecutionInterceptor());
            compositionLoader.addRequestInterceptor(Commerce.Authentication.LogOnRequest, new Commerce.FiscalIntegration.Interceptors.InitializeFiscalPeripheralsRequestInterceptor());
            compositionLoader.addRequestHandlerInterceptor(Commerce.OperationRequest, new Commerce.Operations.Interceptors.ManagerOverrideOperationRequestHandlerInterceptor());
        };
        return PosCommonRuntimeInitializer;
    }());
    Pos.PosCommonRuntimeInitializer = PosCommonRuntimeInitializer;
})(Pos || (Pos = {}));
var Pos;
(function (Pos) {
    Pos.runtimeInitializer = new Pos.RuntimeInitializer(new Pos.PosCommonRuntimeInitializer());
    document.addEventListener("DOMContentLoaded", function (evt) {
        var compositionLoader = new Commerce.CompositionLoader();
        Pos.runtimeInitializer.populateCompositionLoader(compositionLoader);
        Commerce.Runtime = new Commerce.CommerceRuntime(new Commerce.RuntimeConfiguration(compositionLoader));
    });
})(Pos || (Pos = {}));
var Operations = Commerce.Operations;
var CustomerOrderValidators = Operations.CustomerOrderValidators;
var PaymentValidators = Operations.PaymentValidators;
var Validators = Operations.Validators;
var RetailOperation = Operations.RetailOperation;
var CartValidators = Operations.CartValidators;
document.addEventListener("DOMContentLoaded", function (evt) {
    var operationsManager = Operations.OperationsManager.instance;
    var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
    operationsManager.registerOperationHandler({
        id: RetailOperation.ItemSale,
        handler: new Operations.ItemSaleOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ChangeUnitOfMeasure,
        handler: new Operations.ChangeUnitOfMeasureOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            { validatorFunctions: [Validators.restrictUnitOfMeasureOnCustomerOrderPickUp] },
            {
                dataAccessor: function (options) {
                    return options.cartLineUnitOfMeasures.map(function (cluom) {
                        return cluom.cartLine;
                    });
                },
                validatorFunctions: [
                    Validators.notHaveOverridenPrice,
                    Validators.notAllowQuantityUpdate,
                    Validators.includeOnlyNonReturnLinesOnCustomerOrder
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SalesPerson,
        handler: new Operations.SalesPersonOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.OverrideTaxTransaction,
        handler: new Operations.OverrideTransactionTaxOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [Validators.containsNonReturnCartLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.OverrideTaxTransactionList,
        handler: new Operations.OverrideTransactionTaxFromListOperationHandler(),
        validators: [
            { validatorFunctions: [Operations.Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [Validators.containsNonReturnCartLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.OverrideTaxLine,
        handler: new Operations.OverrideLineProductTaxOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return [options.cartLine];
                },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator,
                    Validators.nonVoidedOperationValidator,
                    Validators.includeOnlyNonReturnLinesOnCustomerOrder,
                    Validators.notFromAReceiptOperationValidator,
                    Validators.notFromAGiftCertificateOperationValidator,
                    Validators.notAllowedOnSalesInvoiceLinesOperationValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.OverrideTaxLineList,
        handler: new Operations.OverrideLineProductTaxFromListOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return [options.cartLine];
                },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator,
                    Validators.nonVoidedOperationValidator,
                    Validators.includeOnlyNonReturnLinesOnCustomerOrder,
                    Validators.notFromAReceiptOperationValidator,
                    Validators.notFromAGiftCertificateOperationValidator,
                    Validators.notAllowedOnSalesInvoiceLinesOperationValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.InventoryLookup,
        handler: new Operations.InventoryLookupOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.StockCount,
        handler: new Operations.StockCountOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PriceCheck,
        handler: new Operations.PriceCheckOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.DepositOverride,
        handler: new Operations.DepositOverrideOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ReturnItem,
        handler: new Operations.ReturnProductOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnNonReturnCustomerOrderOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) { return options; },
                validatorFunctions: [Validators.returnLimitsValidator]
            },
            {
                dataAccessor: function (options) {
                    return options.productReturnDetails.filter(function (value) {
                        return !Commerce.ObjectExtensions.isNullOrUndefined(value.cartLine);
                    }).map(function (val) {
                        return val.cartLine;
                    });
                },
                validatorFunctions: [Validators.returnCartLinesOperationValidator]
            },
            {
                dataAccessor: function (options) {
                    return options.productReturnDetails.map(function (item) {
                        return item.cartLine;
                    });
                },
                validatorFunctions: [Validators.includeOnlyReturnLinesOnCustomerOrderExchange]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ReturnTransaction,
        handler: new Operations.ReturnTransactionOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnNonReturnCustomerOrderOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            { validatorFunctions: [Validators.notAllowedOnCustomerOrderOrQuotation] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.VoidItem,
        handler: new Operations.VoidProductsOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.notIncomeExpenseTransaction,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) { return options.cartLines; },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator,
                    Validators.notAVoidedSalesInvoiceLine,
                    Validators.customerOrderVoidLineValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ItemComment,
        handler: new Operations.ProductCommentOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PriceOverride,
        handler: new Operations.PriceOverrideOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.notIncomeExpenseTransaction,
                    Validators.isCustomerOrderOrQuoteInCreateOrEditState,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cartLinePrices.map(function (clp) {
                        return clp.cartLine;
                    });
                },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator,
                    Validators.nonVoidedOperationValidator,
                    Validators.includeOnlyNonReturnLinesOnCustomerOrder,
                    Validators.notFromAReceiptOperationValidator,
                    Validators.notFromAGiftCertificateOperationValidator,
                    Validators.notAllowedOnSalesInvoiceLinesOperationValidator,
                    Validators.itemAllowsPriceOverrideOperationValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SetQuantity,
        handler: new Operations.SetQuantityOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddSerialNumber,
        handler: new Operations.AddSerialNumberOperationHandler(),
        validators: [
            {
                dataAccessor: function (options) {
                    return options.cartLines;
                },
                validatorFunctions: [Validators.singleCartLineOperationValidator]
            },
            {
                dataAccessor: function (options) {
                    return options;
                },
                validatorFunctions: [Validators.addSerialNumberForCartLineOperationValidator]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ClearQuantity,
        handler: new Operations.ClearQuantityOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cartLines;
                },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator,
                    Validators.nonVoidedOperationValidator,
                    Validators.notFromAGiftCertificateOperationValidator,
                    Validators.notAllowedOnSalesInvoiceLinesOperationValidator,
                    Validators.notAllowedOnSerializedProductCartLinesOperationValidator,
                    Validators.notAllowedToKeyInQuantityOnProductCartLinesOperationValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PickingAndReceiving,
        handler: new Operations.PickingAndReceivingOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ClearCommissionSalesGroupOnLine,
        handler: new Operations.ClearCommissionSalesGroupOnLineHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cartLines;
                },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator,
                    Validators.nonVoidedOperationValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SetCommissionSalesGroupOnLine,
        handler: new Operations.SetCommissionSalesGroupOnLineHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cartLines;
                },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator,
                    Validators.nonVoidedOperationValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayCash,
        handler: new Operations.PayCashOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.existingCart] },
            {
                dataAccessor: function (options) {
                    return { cart: Commerce.Session.instance.cart };
                },
                validatorFunctions: [PaymentValidators.payCash]
            },
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayCard,
        handler: new Operations.PayCardOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayCustomerAccount,
        handler: new Operations.PayCustomerAccountOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            { validatorFunctions: [Validators.existingCart] },
            {
                dataAccessor: function (options) {
                    return Commerce.Session.instance.cart;
                },
                validatorFunctions: [PaymentValidators.payCustomerAccount]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayCurrency,
        handler: new Operations.PayCurrencyOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.existingCart] },
            {
                dataAccessor: function (options) {
                    return {
                        cart: Commerce.Session.instance.cart,
                        currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency
                    };
                },
                validatorFunctions: [PaymentValidators.payCurrency]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayCheck,
        handler: new Operations.PayCheckOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.existingCart] },
            {
                dataAccessor: function (options) {
                    return { cart: Commerce.Session.instance.cart };
                },
                validatorFunctions: [PaymentValidators.payCheck]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayCreditMemo,
        handler: new Operations.PayCreditMemoOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayGiftCertificate,
        handler: new Operations.PaymentOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayLoyalty,
        handler: new Operations.PaymentOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PayCashQuick,
        handler: new Operations.PayCashQuickOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.existingCart] },
            {
                dataAccessor: function (options) {
                    return Commerce.Session.instance.cart;
                },
                validatorFunctions: [PaymentValidators.payCashQuick]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.VoidPayment,
        handler: new Operations.VoidPaymentOperationHandler(),
        validators: [
            {
                dataAccessor: function (options) { return options.tenderLines; },
                validatorFunctions: [Operations.Validators.singlePaymentLineOperationValidator]
            },
            {
                validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddLineCharge,
        handler: new Operations.AddLineChargeOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddHeaderCharge,
        handler: new Operations.AddHeaderChargeOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.LineDiscountAmount,
        handler: new Operations.LineDiscountAmountOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cartLineDiscounts.map(function (cld) {
                        return cld.cartLine;
                    });
                },
                validatorFunctions: [
                    Validators.nonVoidedOperationValidator,
                    Validators.includeOnlyNonReturnLinesOnCustomerOrder,
                    Validators.notFromAReceiptOperationValidator,
                    Validators.checkDiscountIsAllowed
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.LineDiscountPercent,
        handler: new Operations.LineDiscountPercentOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cartLineDiscounts.map(function (cld) {
                        return cld.cartLine;
                    });
                },
                validatorFunctions: [
                    Validators.nonVoidedOperationValidator,
                    Validators.includeOnlyNonReturnLinesOnCustomerOrder,
                    Validators.notFromAReceiptOperationValidator,
                    Validators.checkDiscountIsAllowed,
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.TotalDiscountAmount,
        handler: new Operations.TotalDiscountAmountOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [Validators.containsNonReturnCartLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.TotalDiscountPercent,
        handler: new Operations.TotalDiscountPercentOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [Validators.containsNonReturnCartLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.DiscountCodeBarcode,
        handler: new Operations.AddCouponCodeOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CalculateFullDiscounts,
        handler: new Operations.CalculateTotalOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart,
                    Validators.notAllowedOnCustomerAccountDeposit
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.VoidTransaction,
        handler: new Operations.VoidTransactionOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.TransactionComment,
        handler: new Operations.TransactionCommentOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.InvoiceComment,
        handler: new Operations.InvoiceCommentOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SuspendTransaction,
        handler: new Operations.SuspendTransactionOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.RecallTransaction,
        handler: new Operations.RecallTransactionOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.RecallSalesOrder,
        handler: new Operations.RecallCustomerOrderOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CustomerAccountDeposit,
        handler: new Operations.CustomerAccountDepositOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCartWithoutCustomerAccountOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCartWithNonCustomerAccountDepositLines] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ClearCommissionSalesGroupOnTransaction,
        handler: new Operations.ClearCommissionSalesGroupOnTransactionHandler(),
        validators: [
            { validatorFunctions: [Validators.existingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SetCommissionSalesGroupOnTransaction,
        handler: new Operations.SetCommissionSalesGroupOnTransactionHandler(),
        validators: [
            { validatorFunctions: [Validators.existingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SalesInvoice,
        handler: new Operations.SalesInvoiceOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddCoupons,
        handler: new Operations.AddCouponCodeOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedAddCouponToEmptyCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.RemoveCoupons,
        handler: new Operations.RemoveCouponsOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.existingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddAffiliation,
        handler: new Operations.AddAffiliationOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddAffiliationFromList,
        handler: new Operations.AddAffiliationFromListOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddAffiliationToCustomer,
        handler: new Operations.AddAffiliationToCustomerOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.RemoveAffiliationFromCustomer,
        handler: new Operations.RemoveAffiliationFromCustomerOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.LoyaltyRequest,
        handler: new Operations.AddLoyaltyCardOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.IssueCreditMemo,
        handler: new Operations.IssueCreditMemoOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.LoyaltyIssueCard,
        handler: new Operations.IssueLoyaltyCardOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.IssueGiftCertificate,
        handler: new Operations.IssueGiftCardOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            { validatorFunctions: [Validators.giftCardNotAllowedOnCustomerOrderOrQuotation] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.DisplayTotal,
        handler: new Operations.DisplayTotalOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInNonDrawerModeOperationValidator,
                    Validators.existingCart
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.AddToGiftCard,
        handler: new Operations.AddGiftCardOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            { validatorFunctions: [Validators.giftCardNotAllowedOnCustomerOrderOrQuotation] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CashOutGiftCard,
        handler: new Operations.CashOutGiftCardOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            { validatorFunctions: [Validators.giftCardNotAllowedOnCustomerOrderOrQuotation] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.GiftCardBalance,
        handler: new Operations.GiftCardBalanceOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.LoyaltyCardPointsBalance,
        handler: new Operations.LoyaltyCardBalanceOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.IncomeAccounts,
        handler: new Operations.IncomeAccountsOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ExpenseAccounts,
        handler: new Operations.ExpenseAccountsOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SetCustomer,
        handler: new Operations.AddCustomerToSalesOrderOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnRecalledOrder] },
            {
                dataAccessor: function (options) {
                    return options.customerId;
                },
                validatorFunctions: [
                    Validators.notAllowedOnCustomerAccountDepositWithNewCustomer
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CustomerSearch,
        handler: new Operations.CustomerSearchOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedOnRecalledOrder] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CustomerAdd,
        handler: new Operations.CustomerAddOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.checkAddCustomerInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CustomerEdit,
        handler: new Operations.CustomerEditOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CustomerClear,
        handler: new Operations.CustomerClearOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedOnRecalledOrder] },
            { validatorFunctions: [Validators.notAllowedOnCartWithCustomerAccountTenderLineOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.EditCustomerOrder,
        handler: new Operations.UpdateCustomerOrderOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CreateCustomerOrder,
        handler: new Operations.CreateCustomerOrderOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.checkCustomerOrderInOffline] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CreateRetailTransaction,
        handler: new Operations.CreateRetailTransactionOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CreateQuotation,
        handler: new Operations.CreateCustomerQuoteOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.quotationExpirationDate;
                },
                validatorFunctions: [Validators.notAllowedIfExpirationDateInPast]
            },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [
                    CartValidators.notAllowedOnCustomerOrderOnCreateQuotation,
                    CartValidators.notAllowedOnCartIfAllLinesNotValidForCustomerOrderOperations
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.RecalculateCustomerOrder,
        handler: new Operations.RecalculateCustomerOrderOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [Validators.containsNonReturnCartLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.RecalculateCharges,
        handler: new Operations.RecalculateChargesOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CarryoutSelectedProducts,
        handler: new Operations.CarryoutSelectedOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.cartLines;
                },
                validatorFunctions: [Validators.includeOnlyNonReturnLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PickupAllProducts,
        handler: new Operations.PickupAllOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PickupSelectedProducts,
        handler: new Operations.PickupSelectedOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.cartLines;
                },
                validatorFunctions: [Validators.includeOnlyNonReturnLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ShipAllProducts,
        handler: new Operations.ShipAllOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ShipSelectedProducts,
        handler: new Operations.ShipSelectedOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.cartLines;
                },
                validatorFunctions: [Validators.includeOnlyNonReturnLinesOnCustomerOrder]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SetQuotationExpirationDate,
        handler: new Operations.SetQuotationExpirationDateOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [
                    CartValidators.notAllowedOnCustomerOrderOnCreateQuotation,
                    CartValidators.notAllowedOnCartIfAllLinesNotValidForCustomerOrderOperations
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ReturnChargesOverride,
        handler: new Operations.ReturnChargesOverrideOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            { validatorFunctions: [Validators.notAllowedOnCustomerAccountDeposit] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ManageCharges,
        handler: new Operations.ManageChargesOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PaymentsHistory,
        handler: new Operations.GetPaymentsHistoryOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] },
            {
                dataAccessor: function (options) {
                    return options.cart;
                },
                validatorFunctions: [Validators.paymentsHistoryOperationValidator]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.LogOff,
        handler: new Operations.LogoffOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.userSessionValidAndNoExistingCartLogOffValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.LockTerminal,
        handler: new Operations.LockTerminalOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.DeactivateDevice,
        handler: new Operations.DeactivateDeviceOperationHandler(),
        validators: [
            {
                validatorFunctions: [
                    Validators.notAllowedInOffline,
                    Validators.noExistingCart
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ChangeHardwareStation,
        handler: new Operations.SelectHardwareStationOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PairHardwareStation,
        handler: new Operations.PairHardwareStationOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.OpenDrawer,
        handler: new Operations.OpenCashDrawerOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.DatabaseConnectionStatus,
        handler: new Operations.DatabaseConnectionStatusOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ChangePassword,
        handler: new Operations.ChangePasswordOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ResetPassword,
        handler: new Operations.ResetPasswordOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.TimeRegistration,
        handler: new Operations.TimeClockOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ViewTimeClockEntries,
        handler: new Operations.ViewTimeClockEntriesOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ShowJournal,
        handler: new Operations.ShowJournalOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ViewOrderFulfillmentLines,
        handler: new Operations.ViewOrderFulfillmentLinesOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.TenderDeclaration,
        handler: new Operations.TenderDeclarationOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            {
                dataAccessor: function (options) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(options) ? options.shift : undefined;
                },
                validatorFunctions: [Validators.notAllowedInNonDrawerModeUnlessShiftIsProvidedOperationValidator]
            },
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.BlindCloseShift,
        handler: new Operations.BlindCloseShiftOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ShowBlindClosedShifts,
        handler: new Operations.ManageShiftsOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.noExistingCart] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SuspendShift,
        handler: new Operations.SuspendShiftOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.CloseShift,
        handler: new Operations.CloseShiftOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.noExistingCart] },
            {
                dataAccessor: function (options) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(options) ? options.shift : undefined;
                },
                validatorFunctions: [Validators.notAllowedInNonDrawerModeUnlessShiftIsProvidedOperationValidator]
            },
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PrintX,
        handler: new Operations.PrintXOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.noExistingCart] },
            {
                dataAccessor: function (options) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(options) ? options.shift : undefined;
                },
                validatorFunctions: [Validators.notAllowedInNonDrawerModeUnlessShiftIsProvidedOperationValidator]
            },
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.PrintZ,
        handler: new Operations.PrintZOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInOffline] },
            { validatorFunctions: [Validators.noExistingCart] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.DeclareStartAmount,
        handler: new Operations.DeclareStartAmountOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            {
                dataAccessor: function (options) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(options) ? options.shift : undefined;
                },
                validatorFunctions: [Validators.notAllowedInNonDrawerModeUnlessShiftIsProvidedOperationValidator]
            },
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.FloatEntry,
        handler: new Operations.FloatEntryOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.TenderRemoval,
        handler: new Operations.TenderRemovalOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.SafeDrop,
        handler: new Operations.SafeDropOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ManageSafe,
        handler: new Operations.ManageSafesOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.KitDisassembly,
        handler: new Operations.KitDisassemblyOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedInNonDrawerModeOperationValidator] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.BankDrop,
        handler: new Operations.BankDropOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.noExistingCart] },
            {
                dataAccessor: function (options) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(options) ? options.shift : undefined;
                },
                validatorFunctions: [Validators.notAllowedInNonDrawerModeUnlessShiftIsProvidedOperationValidator]
            },
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.BlankOperation,
        handler: new Operations.BlankOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ExtendedLogOn,
        handler: new Operations.ExtendedLogOnOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ViewProductDetails,
        handler: new Operations.ViewProductDetailsOperationHandler(),
        validators: [
            {
                dataAccessor: function (options) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(options) ? [] : [options.cartLine];
                },
                validatorFunctions: [
                    Validators.singleCartLineOperationValidator
                ]
            }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ViewReport,
        handler: new Operations.ViewReportsOperationHandler(),
        validators: [
            { validatorFunctions: [Validators.notAllowedForPhone] }
        ]
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.ForceUnlockPeripheral,
        handler: new Operations.ForceUnlockPeripheralOperationHandler()
    }, CORRELATION_ID);
    operationsManager.registerOperationHandler({
        id: RetailOperation.OpenURL,
        handler: new Operations.OpenUrlOperationHandler()
    }, CORRELATION_ID);
});
var Commerce;
(function (Commerce) {
    "use strict";
    var DefaultImages = (function () {
        function DefaultImages() {
        }
        DefaultImages.ProductSmall = "Assets/defaultSmall.png";
        DefaultImages.ProductLarge = "Assets/defaultLarge.png";
        DefaultImages.CustomerLarge = "Assets/person_unavailable_large.png";
        DefaultImages.CustomerSmall = "Assets/person_unavailable_small.png";
        DefaultImages.DefaultUser = "Assets/DefaultUser.png";
        DefaultImages.AllProducts = "Assets/fabrikam_all_products.jpg";
        return DefaultImages;
    }());
    Commerce.DefaultImages = DefaultImages;
    var BindingHandlers = (function () {
        function BindingHandlers() {
        }
        BindingHandlers.SetDefaultImageOnError = function (element, imageUrl) {
            var $element = $(element);
            var originalSrc = $element.attr("src");
            Commerce.RetailLogger.coreBindingHandlersLoadImageFailed(originalSrc);
            var isIEBrowserOrMpos = (Commerce.ApplicationHelper.isWebApplicationType(Commerce.Host.instance.application.getApplicationType()) &&
                (Commerce.Host.instance.application.getBrowserType() === Commerce.Host.BrowserType.IE11))
                || (Commerce.Host.instance.application.getApplicationType() === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindows)
                || (Commerce.Host.instance.application.getApplicationType() === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindowsPhone);
            if (isIEBrowserOrMpos) {
                var image = document.createElement("img");
                image.onerror = function () {
                    $element.attr("src", imageUrl);
                };
                image.src = originalSrc;
            }
            else {
                $element.attr("src", imageUrl);
            }
        };
        return BindingHandlers;
    }());
    Commerce.BindingHandlers = BindingHandlers;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var Formatters = (function () {
        function Formatters() {
        }
        Formatters.AddressTypeTextFormatter = function (address) {
            var addressPurpose = Commerce.ArrayExtensions.firstOrUndefined(Commerce.ApplicationContext.Instance.addressPurposes, function (purpose) {
                return purpose.RecordId === address.LogisticsLocationRoleRecordId;
            });
            var addressTypeText = address.RoleCount > 1
                ? Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4849"), addressPurpose.Description, address.RoleCount - 1)
                : addressPurpose.Description;
            return addressTypeText;
        };
        Formatters.AddressHeaderFormatter = function (header) {
            if (Commerce.StringExtensions.isNullOrWhitespace(header)) {
                return Commerce.ViewModelAdapter.getResourceString("string_1316");
            }
            return header;
        };
        Formatters.YesNoBooleanFormatter = function (value) {
            return value
                ? Commerce.ViewModelAdapter.getResourceString("string_77")
                : Commerce.ViewModelAdapter.getResourceString("string_78");
        };
        Formatters.DateWithoutTime = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
            return formatter.format(value);
        };
        Formatters.DateWithoutTimeIgnoreTimezone = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
            return formatter.format(value, "Etc/UTC");
        };
        Formatters.ShortTime = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_TIME);
            return formatter.format(value);
        };
        Formatters.PriceFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ObjectExtensions.isObject(value)) {
                var currencyAmount = value;
                return Commerce.NumberExtensions.formatCurrency(currencyAmount.RoundedConvertedAmount, currencyAmount.CurrencyCode);
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                value = Commerce.NumberExtensions.parseNumber(value);
                if (isNaN(value)) {
                    return Commerce.StringExtensions.EMPTY;
                }
            }
            return Commerce.NumberExtensions.formatCurrency(value);
        };
        Formatters.NumberFormatter = function (value) {
            var numberValue;
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                numberValue = Commerce.NumberExtensions.parseNumber(value);
            }
            else {
                numberValue = value;
            }
            if (isNaN(numberValue)) {
                return Commerce.StringExtensions.EMPTY;
            }
            return Commerce.NumberExtensions.formatNumber(numberValue, Commerce.NumberExtensions.getNumberOfDecimals(numberValue));
        };
        Formatters.AdditionalComponentChargeFormatter = function (value, defaultValue) {
            if (defaultValue === void 0) { defaultValue = "-"; }
            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || isNaN(value)) {
                return defaultValue;
            }
            else if (value === 0) {
                return Commerce.ViewModelAdapter.getResourceString("string_836");
            }
            else {
                return Formatters.PriceFormatter(value);
            }
        };
        Formatters.ProductComponentQuantityFormatter = function (component, defaultValue) {
            if (defaultValue === void 0) { defaultValue = "-"; }
            var value = component.Quantity;
            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || isNaN(value)) {
                return defaultValue;
            }
            else {
                var unitOfMeasure = Commerce.ApplicationContext.Instance.unitsOfMeasureMap.getItem(component.UnitOfMeasure);
                var decimalPrecision = Commerce.ObjectExtensions.isNullOrUndefined(unitOfMeasure) ? undefined : unitOfMeasure.DecimalPrecision;
                return Commerce.NumberExtensions.formatNumber(value, decimalPrecision);
            }
        };
        Formatters.AbsoluteImageUrl = function (source) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(source)) {
                    return Formatters.ImageUrlFormatter(source);
                }
                else {
                    return source;
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(source);
            }
        };
        Formatters.CustomerOrderHistoryStatusFormatter = function (salesOrder) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else {
                return Commerce.Proxy.Entities.SalesOrderWrapper.getOrderStatusString(salesOrder.StatusValue);
            }
        };
        Formatters.InvoiceTypeFormatter = function (invoiceType) {
            return Commerce.InvoiceLineHelper.getInvoiceTypeTranslation(invoiceType);
        };
        Formatters.InvoicedQuantityFormatter = function (salesLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesLine)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerQuote.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.Quote))) {
                return Commerce.NumberExtensions.formatNumber(0, 0);
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerOrder.equals(salesLine.transactionType) ||
                Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.PendingSalesOrder.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.SalesOrder))) {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.QuantityInvoiced);
                return Commerce.NumberExtensions.formatNumber(salesLine.QuantityInvoiced, precision);
            }
            else {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.Quantity);
                return Commerce.NumberExtensions.formatNumber(salesLine.Quantity, precision);
            }
        };
        Formatters.OrderedQuantityFormatter = function (salesLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesLine)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerQuote.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.Quote))) {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.Quantity);
                return Commerce.NumberExtensions.formatNumber(salesLine.Quantity, precision);
            }
            else if (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.AsyncCustomerOrder.equals(salesLine.transactionType) ||
                Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.PendingSalesOrder.equals(salesLine.transactionType) ||
                (Commerce.ExtensibleEnumerations.ExtensibleSalesTransactionType.CustomerOrder.equals(salesLine.transactionType)
                    && (salesLine.customerOrderType === Commerce.Proxy.Entities.CustomerOrderType.SalesOrder))) {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.QuantityOrdered);
                return Commerce.NumberExtensions.formatNumber(salesLine.QuantityOrdered, precision);
            }
            else {
                var precision = Commerce.NumberExtensions.getNumberOfDecimals(salesLine.Quantity);
                return Commerce.NumberExtensions.formatNumber(salesLine.Quantity, precision);
            }
        };
        Formatters.OfferIdFormatter = function (cartLine) {
            var discountId = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine) && Commerce.ArrayExtensions.hasElements(cartLine.DiscountLines)) {
                var discountLineWithOffer = Commerce.ArrayExtensions.firstOrUndefined(cartLine.DiscountLines, function (discountLine) { return !Commerce.StringExtensions.isNullOrWhitespace(discountLine.OfferId); });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(discountLineWithOffer)) {
                    discountId = discountLineWithOffer.OfferId;
                }
            }
            return Commerce.StringExtensions.isNullOrWhitespace(discountId) ? Commerce.StringExtensions.EMPTY : discountId;
        };
        Formatters.OriginalPriceFormatter = function (cartLine) {
            var priceToUse = cartLine.OriginalPrice || cartLine.Price;
            return Commerce.Formatters.PriceFormatter(priceToUse);
        };
        Formatters.OrderIdFormatter = function (salesOrder) {
            var genericOrderId = "";
            if (!Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                genericOrderId = salesOrder.ReceiptId;
                if (Commerce.StringExtensions.isNullOrWhitespace(salesOrder.ReceiptId)) {
                    genericOrderId = salesOrder.ChannelReferenceId;
                    if (Commerce.StringExtensions.isNullOrWhitespace(salesOrder.ChannelReferenceId)) {
                        genericOrderId = salesOrder.SalesId;
                    }
                }
            }
            return genericOrderId;
        };
        Formatters.CustomerImage = function (customer, isLarge) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                isLarge = isLarge ? isLarge : false;
                if (Commerce.ArrayExtensions.hasElements(customer.Images)
                    && !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                    var url = Commerce.Formatters.ImageUrlFormatter(customer.Images[0].Uri);
                    return url;
                }
                else {
                    return isLarge ? "/Assets/defaultLarge.png" : "/Assets/defaultSmall.png";
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(customer.OfflineImage);
            }
        };
        Formatters.CustomerImageAltText = function (customer, isLarge) {
            var altText = customer.Name || Commerce.StringExtensions.EMPTY;
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (Commerce.ArrayExtensions.hasElements(customer.Images)
                    && !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].AltText)) {
                    altText = customer.Images[0].AltText;
                }
            }
            return altText;
        };
        Formatters.ImageBinaryFormatter = function (source) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(source) && !Commerce.StringExtensions.isNullOrWhitespace(source)) {
                return "data:image/jpeg;base64," + source;
            }
            else {
                return "/Assets/defaultLarge.png";
            }
        };
        Formatters.ImageUrlFormatter = function (url, defaultImagepath) {
            if (!Commerce.StringExtensions.isNullOrWhitespace(url)) {
                var imageUrl = Commerce.ApplicationContext.Instance.channelRichMediaBaseURL;
                if (Commerce.Config.isDemoMode) {
                    return Formatters.DemoModeImageUrlFormatter(url);
                }
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online && Commerce.Core.RegularExpressionValidations.validateUrl(url)) {
                    return url;
                }
                else {
                    return Commerce.UrlHelper.formatBaseUrl(imageUrl) + url;
                }
            }
            else {
                if (!Commerce.StringExtensions.isNullOrWhitespace(defaultImagepath)) {
                    return defaultImagepath;
                }
                else {
                    return Commerce.DefaultImages.ProductSmall;
                }
            }
        };
        Formatters.ImageFormatter = function (source, defaultImagepath) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                return this.ImageUrlFormatter(source, defaultImagepath);
            }
            else {
                return this.ImageBinaryFormatter(source);
            }
        };
        Formatters.productDimensionValueFormatter = function (cartLine, dimensionType) {
            if (cartLine.IsGiftCardLine) {
                return Commerce.StringExtensions.EMPTY;
            }
            var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
            return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : Commerce.SimpleProductHelper.getDimensionValue(product, dimensionType);
        };
        Formatters.CartLineProperty = function (cartLine, propertyName) {
            var returnValue = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine) && !Commerce.StringExtensions.isNullOrWhitespace(propertyName)) {
                switch (propertyName) {
                    case "RequestedDeliveryDate":
                        var formatter = Commerce.Host.instance.globalization.getDateTimeFormatterWithoutChannelTimeZone(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE);
                        returnValue = formatter.format(cartLine.RequestedDeliveryDate);
                        break;
                    case "ShippingAddressName":
                        var addressName = Commerce.StringExtensions.EMPTY;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ShippingAddress)) {
                            addressName = cartLine.ShippingAddress.Name;
                        }
                        returnValue = addressName;
                        break;
                    case "DeliveryDescription":
                        var deliveryDescription = Commerce.StringExtensions.EMPTY;
                        var deliveryOption = Commerce.ApplicationContext.Instance.deliveryOptionsMap.getItem(cartLine.DeliveryMode);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(deliveryOption)) {
                            var isPickupInStore = cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode;
                            var isCarryOutInStore = cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode;
                            var isEmailDelivery = cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.EmailDeliveryModeCode;
                            var store = Commerce.ApplicationContext.Instance.availableStores.getItem(cartLine.FulfillmentStoreId);
                            var hasFulfillmentStore = !Commerce.ObjectExtensions.isNullOrUndefined(store) && !Commerce.StringExtensions.isNullOrWhitespace(store.OrgUnitName);
                            if (isPickupInStore && hasFulfillmentStore) {
                                deliveryDescription = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29224"), store.OrgUnitName);
                            }
                            else if (isCarryOutInStore || isPickupInStore || isEmailDelivery) {
                                deliveryDescription = deliveryOption.Description;
                            }
                            else {
                                if (!hasFulfillmentStore) {
                                    store = Commerce.ApplicationContext.Instance.availableStores.getItem(Commerce.ApplicationContext.Instance.storeNumber);
                                }
                                deliveryDescription = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29420"), deliveryOption.Description, store.OrgUnitName);
                            }
                        }
                        returnValue = deliveryDescription;
                        break;
                    default:
                        throw "CartLineProperty formatter not implemented for property '" + propertyName + "'";
                }
            }
            else {
                Commerce.RetailLogger.coreFormattersCartLineWrongInputParameters(propertyName, JSON.stringify(cartLine));
            }
            return returnValue;
        };
        Formatters.CartTypeName = function (cart) {
            var resourceId;
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                return Commerce.StringExtensions.EMPTY;
            }
            switch (cart.CartTypeValue) {
                case Commerce.Proxy.Entities.CartType.CustomerOrder:
                    switch (cart.CustomerOrderModeValue) {
                        case Commerce.Proxy.Entities.CustomerOrderMode.Cancellation:
                            resourceId = "string_4360";
                            break;
                        case Commerce.Proxy.Entities.CustomerOrderMode.Pickup:
                            resourceId = "string_4358";
                            break;
                        case Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit:
                            resourceId = "string_4359";
                            break;
                        case Commerce.Proxy.Entities.CustomerOrderMode.Return:
                            resourceId = "string_4357";
                            break;
                        default:
                        case Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit:
                            resourceId = "string_4330";
                            break;
                    }
                    break;
                case Commerce.Proxy.Entities.CartType.AccountDeposit:
                    resourceId = "string_4384";
                    break;
                default:
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration.SalesModeDefaultsAsCustomerOrder === true) {
                        resourceId = "string_4330";
                    }
                    else {
                        resourceId = "string_108";
                    }
                    break;
            }
            return Commerce.ViewModelAdapter.getResourceString(resourceId);
        };
        Formatters.CategoryNameTranslator = function (category) {
            var translatedCategoryName = "";
            if (!Commerce.ObjectExtensions.isNullOrUndefined(category) && Commerce.ArrayExtensions.hasElements(category.NameTranslations)) {
                var categoryNameTranslation = category.NameTranslations.filter(function (value) {
                    var languageNameStrCmp = Commerce.StringExtensions.compare(value.Language, Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName, true);
                    return languageNameStrCmp === 0;
                });
                if (categoryNameTranslation.length !== 0) {
                    translatedCategoryName = categoryNameTranslation[0].Text;
                }
                else {
                    translatedCategoryName = category.Name;
                }
            }
            else {
                translatedCategoryName = category.Name;
            }
            return translatedCategoryName;
        };
        Formatters.TransactionTypeFormatter = function (value, entryStatusValue) {
            var transactionType = Number(value);
            var transactionEntryStatus = 0;
            if (isNaN(transactionType)) {
                return "";
            }
            if (typeof entryStatusValue === "number") {
                transactionEntryStatus = entryStatusValue;
            }
            switch (transactionType) {
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.CustomerOrder.Value:
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.AsyncCustomerOrder.Value:
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.AsyncCustomerQuote.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4515");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.IncomeExpense.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4516");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.PendingSalesOrder.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4518");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.Sales.Value:
                    return (transactionEntryStatus === Commerce.Proxy.Entities.TransactionStatus.Voided) ?
                        Commerce.ViewModelAdapter.getResourceString("string_4660") :
                        Commerce.ViewModelAdapter.getResourceString("string_4519");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4572");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4573");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.Payment.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4574");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SalesOrder.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4575");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SalesInvoice.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4576");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4577");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.OpenDrawer.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_6119");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SuspendedTransaction.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_4581");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_2149");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_2150");
                case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.Value:
                    return Commerce.ViewModelAdapter.getResourceString("string_2151");
                default:
                    return "";
            }
        };
        Formatters.GroupHeaderFormatter = function (category) {
            return Commerce.Formatters.CategoryNameTranslator(category) + "   >";
        };
        Formatters.CategoryImage = function (category, defaultImage) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(category)
                    && Commerce.ArrayExtensions.hasElements(category.Images)
                    && !Commerce.StringExtensions.isNullOrWhitespace(category.Images[0].Uri)) {
                    if (category.Images[0].Uri === Commerce.DefaultImages.AllProducts) {
                        return Commerce.DefaultImages.AllProducts;
                    }
                    else {
                        return Commerce.Formatters.ImageUrlFormatter(category.Images[0].Uri);
                    }
                }
                else {
                    return Commerce.DefaultImages.ProductLarge;
                }
            }
            else {
                if (Commerce.ObjectExtensions.isNullOrUndefined(category.OfflineImage)) {
                    return Commerce.Formatters.ImageBinaryFormatter(defaultImage);
                }
                return Commerce.Formatters.ImageBinaryFormatter(category.OfflineImage);
            }
        };
        Formatters.TenderLineTypeNameFormatter = function (tenderLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine) ||
                (!tenderLine.IsHistorical && Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.TenderType))) {
                return Commerce.StringExtensions.EMPTY;
            }
            return tenderLine.IsHistorical ? Commerce.ViewModelAdapter.getResourceString("string_4355") : tenderLine.TenderType.Name;
        };
        Formatters.AmountInTenderedCurrencyFormatter = function (tenderedCurrency) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderedCurrency) || Commerce.ObjectExtensions.isNullOrUndefined(tenderedCurrency.Currency)) {
                return Commerce.StringExtensions.EMPTY;
            }
            return Commerce.NumberExtensions.formatCurrency(tenderedCurrency.AmountInTenderedCurrency, tenderedCurrency.Currency);
        };
        Formatters.TenderLineMoreInformationFormatter = function (tenderLine) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderLine)) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(tenderLine.MaskedCardNumber)) {
                    return tenderLine.MaskedCardNumber;
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(tenderLine.GiftCardId)) {
                    return Commerce.PaymentHelper.getMaskedNumber(tenderLine.GiftCardId);
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.TenderLineNameFormatter = function (tenderLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine) ||
                (!tenderLine.IsHistorical && Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.TenderTypeId))) {
                return Commerce.StringExtensions.EMPTY;
            }
            var historicalTenderTypeName = Commerce.ViewModelAdapter.getResourceString("string_4355");
            var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
            return Commerce.ObjectExtensions.isNullOrUndefined(tenderType) ? historicalTenderTypeName : tenderType.Name;
        };
        Formatters.PurchaseTransferOrderEnumFormatter = function (value) {
            var stringValue;
            switch (value) {
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3862");
                    break;
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3863");
                    break;
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3864");
                    break;
                case Commerce.Proxy.Entities.PurchaseTransferOrderType.PickingList:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_3867");
                    break;
                default:
                    stringValue = Commerce.StringExtensions.EMPTY;
            }
            return stringValue;
        };
        Formatters.CartLineQuantityFormat = function (cartLine) {
            var precision;
            var quantity = 0;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                quantity = cartLine.Quantity;
                precision = Commerce.NumberExtensions.getNumberOfDecimals(quantity);
            }
            return Commerce.NumberExtensions.formatNumber(quantity, precision);
        };
        Formatters.CartLineUnitOfMeasureFormat = function (cartLine) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                return Commerce.UnitOfMeasureHelper.getDescriptionForSymbol(cartLine.UnitOfMeasureSymbol);
            }
            return null;
        };
        Formatters.VariantNameFormatter = function (cartLine) {
            if (cartLine.IsGiftCardLine) {
                return cartLine.Comment;
            }
            var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
            return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : Commerce.SimpleProductHelper.getVariantDescription(product);
        };
        Formatters.DeliveryDescriptionAndDateFormatter = function (cartLine) {
            var requestedDeliveryDate = Commerce.Formatters.CartLineProperty(cartLine, "RequestedDeliveryDate");
            var deliveryDescription = Commerce.Formatters.CartLineProperty(cartLine, "DeliveryDescription");
            if (Commerce.ViewModelAdapter.isInView("CartView")) {
                return Commerce.StringExtensions.format("{0}<br />{1}", Commerce.EscapingHelper.escapeHtml(deliveryDescription), Commerce.EscapingHelper.escapeHtml(requestedDeliveryDate));
            }
            return deliveryDescription;
        };
        Formatters.ShippingAddressNameFormatter = function (cartLine) {
            return Commerce.Formatters.CartLineProperty(cartLine, "ShippingAddressName");
        };
        Formatters.CartLineAddressFormatterWithHtmlEscape = function (cartLine) {
            return Commerce.Formatters.AddressFormatterWithHtmlEscape(cartLine.ShippingAddress, "span", Commerce.StringExtensions.EMPTY, true);
        };
        Formatters.CommonAddressFormatterWithHtmlEscape = function (address, maxLines) {
            if (maxLines === void 0) { maxLines = 0; }
            return Commerce.Formatters.AddressFormatterWithHtmlEscape(address, "h4", "ellipsis", false, maxLines);
        };
        Formatters.AddressFormatterWithHtmlEscape = function (address, htmlTag, cssClass, newLine, maxLines) {
            if (newLine === void 0) { newLine = false; }
            if (maxLines === void 0) { maxLines = 0; }
            if (Commerce.ObjectExtensions.isNullOrUndefined(address)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var addressString = Commerce.StringExtensions.EMPTY;
            var addressLines = Commerce.AddressHelper.getFormattedAddress(address);
            var newLineTag = newLine ? "<br />" : Commerce.StringExtensions.EMPTY;
            if (Commerce.StringExtensions.isNullOrWhitespace(htmlTag)) {
                htmlTag = "span";
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(cssClass)) {
                cssClass = Commerce.StringExtensions.EMPTY;
            }
            if (maxLines === 0) {
                maxLines = Number.MAX_VALUE;
            }
            for (var i = 0; i < addressLines.length && i < maxLines; i++) {
                addressString += Commerce.StringExtensions.format("<{0} class='{1}'>{2}</{0}>{3}", Commerce.EscapingHelper.escapeHtmlAttribute(htmlTag), Commerce.EscapingHelper.escapeHtmlAttribute(cssClass), Commerce.EscapingHelper.escapeHtml(addressLines[i]), newLineTag);
            }
            return addressString;
        };
        Formatters.CustomerOrderStatusFormatter = function (cartLine) {
            return Commerce.Proxy.Entities.SalesOrderWrapper.getOrderStatusString(cartLine.SalesStatusValue);
        };
        Formatters.QuantityFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            var quantity = (inventoryAvailability && inventoryAvailability.AvailableQuantity) ? inventoryAvailability.AvailableQuantity : 0;
            return quantity;
        };
        Formatters.OrderedSumFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            var orderedSum = (inventoryAvailability && inventoryAvailability.OrderedSum) ? inventoryAvailability.OrderedSum : 0;
            return orderedSum;
        };
        Formatters.PhysicalReservedFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            var physicalReserved = (inventoryAvailability && inventoryAvailability.PhysicalReserved) ? inventoryAvailability.PhysicalReserved : 0;
            return physicalReserved;
        };
        Formatters.UnitOfMeasureFromStoreInventoryFormatter = function (inventoryAvailabilities) {
            var inventoryAvailability = Commerce.ArrayExtensions.firstOrUndefined(inventoryAvailabilities);
            var unitOfMeasure = (inventoryAvailability && inventoryAvailability.UnitOfMeasure) ? inventoryAvailability.UnitOfMeasure : Commerce.StringExtensions.EMPTY;
            return unitOfMeasure;
        };
        Formatters.UnitOfMeasureFromAvailableToPromiseFormatter = function (promises) {
            var promise = Commerce.ArrayExtensions.firstOrUndefined(promises);
            var unitOfMeasure = (promise && promise.UnitOfMeasure) ? promise.UnitOfMeasure : Commerce.StringExtensions.EMPTY;
            return unitOfMeasure;
        };
        Formatters.IsRetailStoreFromOrgUnitLocationFormatter = function (storeLocation) {
            var nonStoreWarehouseIdentifier = 0;
            var isRetailStore = storeLocation.ChannelId !== nonStoreWarehouseIdentifier;
            return this.YesNoBooleanFormatter(isRetailStore);
        };
        Formatters.ManageShiftsDataListIconHtmlFormatter = function (shift) {
            var iconHtmlString = Commerce.StringExtensions.EMPTY;
            var cssClasses = Commerce.StringExtensions.EMPTY;
            var ariaLabel = Commerce.StringExtensions.EMPTY;
            if (shift.NumberOfUnreconciledLines > 0) {
                cssClasses = "iconError icon-20x20 width24";
                ariaLabel = Commerce.ViewModelAdapter.getResourceString("string_2160");
            }
            else {
                ariaLabel = Commerce.ViewModelAdapter.getResourceString("string_2159");
            }
            iconHtmlString += Commerce.StringExtensions.format("<div class='grow center pad0'><div class='{0}' role='img' aria-label='{1}'></div></div>", Commerce.EscapingHelper.escapeHtmlAttribute(cssClasses), Commerce.EscapingHelper.escapeHtmlAttribute(ariaLabel));
            return iconHtmlString;
        };
        Formatters.taxOverrideToDescriptionFormatter = function (taxOverride) {
            return taxOverride.AdditionalDescription || taxOverride.Code;
        };
        Formatters.taxExemptCodeFormatter = function (taxExemptCode) {
            var formattedTaxExemptCode;
            if (!Commerce.StringExtensions.isNullOrWhitespace(taxExemptCode)) {
                formattedTaxExemptCode = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4488"), taxExemptCode);
            }
            return formattedTaxExemptCode;
        };
        Formatters.EmptyFormatter = function (data) {
            return data;
        };
        Formatters.CardTenderTypeValueFormatter = function (value) {
            var stringValue;
            switch (value) {
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.AsCardTender:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_276");
                    break;
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.AsContactTender:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_277");
                    break;
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.NoTender:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_278");
                    break;
                case Commerce.Proxy.Entities.LoyaltyCardTenderType.Blocked:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_279");
                    break;
                default:
                    stringValue = Commerce.StringExtensions.EMPTY;
            }
            return stringValue;
        };
        Formatters.ExtensibleLoyaltyRewardPointActivityEntryTypeValueFormatter = function (value) {
            var stringValue = Commerce.StringExtensions.EMPTY;
            var activityType = Number(value);
            if (!isNaN(activityType)) {
                switch (value) {
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Earned.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3282");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Returned.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3283");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Redeemed.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3284");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Refunded.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3285");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Adjusted.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3286");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Expired.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3287");
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType.Pending.Value:
                        stringValue = Commerce.ViewModelAdapter.getResourceString("string_3288");
                        break;
                    default:
                }
            }
            return stringValue;
        };
        Formatters.ShortDateAndTimeFormatter = function (value) {
            var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
            return formatter.format(value);
        };
        Formatters.RecentPurchaseIdFormatter = function (purchaseHistory) {
            var result = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(purchaseHistory)) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(purchaseHistory.ReceiptId)) {
                    result = purchaseHistory.ReceiptId;
                }
                else {
                    result = purchaseHistory.SalesId;
                }
            }
            return result;
        };
        Formatters.LargeRecentPurchaseImage = function (imageUrl) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(imageUrl)) {
                    return Commerce.Formatters.ImageUrlFormatter(imageUrl);
                }
                else {
                    return Commerce.DefaultImages.ProductLarge;
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(imageUrl);
            }
        };
        Formatters.SmallRecentPurchaseImage = function (imageUrl) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(imageUrl)) {
                    return Commerce.Formatters.ImageUrlFormatter(imageUrl);
                }
                else {
                    return Commerce.DefaultImages.ProductSmall;
                }
            }
            else {
                return Commerce.Formatters.ImageBinaryFormatter(imageUrl);
            }
        };
        Formatters.SmallCustomerImage = function (customer) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) &&
                    Commerce.ArrayExtensions.hasElements(customer.Images) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                    return Commerce.Formatters.ImageUrlFormatter(customer.Images[0].Uri);
                }
                else {
                    return Commerce.DefaultImages.CustomerSmall;
                }
            }
            else {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer.OfflineImage)) {
                    return Commerce.Formatters.ImageBinaryFormatter(customer.OfflineImage);
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.LargeCustomerImage = function (customer) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) &&
                    Commerce.ArrayExtensions.hasElements(customer.Images) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                    return Commerce.Formatters.ImageUrlFormatter(customer.Images[0].Uri);
                }
                else {
                    return Commerce.DefaultImages.CustomerLarge;
                }
            }
            else {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer.OfflineImage)) {
                    return Commerce.Formatters.ImageBinaryFormatter(customer.OfflineImage);
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        Formatters.TextContentFormatter = function (value) {
            var stringValue = "";
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return stringValue;
            }
            else {
                return value;
            }
        };
        Formatters.SalesStatusContentFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else {
                var status_1 = value;
                return Commerce.Proxy.Entities.SalesOrderWrapper.getOrderStatusString(status_1);
            }
        };
        Formatters.TotalCollectionFormatter = function (value) {
            var numVal = (value && value.length) ? value.length : 0;
            return numVal.toLocaleString(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName);
        };
        Formatters.WishListTypeFormatter = function (value) {
            var stringValue = Commerce.StringExtensions.EMPTY;
            if (value === 1) {
                stringValue = Commerce.ViewModelAdapter.getResourceString("string_257");
            }
            return stringValue;
        };
        Formatters.SearchTextSuggestionFormatterWithHtmlEscape = function (htmlString) {
            var searchSuggestionHitPreTag = "{";
            var searchSuggestionHitPostTag = "}";
            var escapedString = Commerce.EscapingHelper.escapeHtmlAttribute(htmlString);
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPreTag, "g"), "<span class=\"bold\">");
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPostTag, "g"), "</span>");
            return escapedString;
        };
        Formatters.DeliveryModeCodeValueFormatter = function (dlvModeCode) {
            return Commerce.ApplicationContext.Instance.deliveryOptionsMap.getItem(dlvModeCode).Description;
        };
        Formatters.FulfillmentSalesPersonInfoFormatter = function (salesPersonId, salesPersonFirstName, salesPersonLastName) {
            salesPersonId = salesPersonId || Commerce.StringExtensions.EMPTY;
            salesPersonFirstName = salesPersonFirstName || Commerce.StringExtensions.EMPTY;
            salesPersonLastName = salesPersonLastName || Commerce.StringExtensions.EMPTY;
            var salesPersonInformationFormat = Commerce.ViewModelAdapter.getResourceString("string_13183");
            return Commerce.StringExtensions.format((Commerce.StringExtensions.isNullOrWhitespace(salesPersonInformationFormat) ? "{0} - {1} {2}" : salesPersonInformationFormat), salesPersonId, salesPersonFirstName, salesPersonLastName);
        };
        Formatters.CurrencyPriceFormatter = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || Commerce.ObjectExtensions.isNullOrUndefined(value.ExchangeRate)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var currencyAmountFrom = value.ExchangeRate;
            var currencyCodeFrom = value.CurrencyCode;
            var currencyAmountTo = 1;
            var currencyCodeTo = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
            var format = Commerce.ViewModelAdapter.getResourceString(Commerce.CSSHelpers.currentTextDir() === Commerce.CSSHelpers.RIGHT_TO_LEFT_TEXT_DIRECTION ?
                "string_1187" : "string_1192");
            return Commerce.StringExtensions.format(format, currencyCodeTo, currencyAmountTo, currencyCodeFrom, currencyAmountFrom);
        };
        Formatters.DemoModeImageUrlFormatter = function (url) {
            var imageUrl = "DemoMode/Images/";
            url = url.replace("%5C", "/").replace("jpg", "png").replace("Images/Products", "Products");
            var combinedUrl = imageUrl + url;
            return combinedUrl.replace("//", "/");
        };
        return Formatters;
    }());
    Commerce.Formatters = Formatters;
    WinJS.Namespace.define("Commerce.Core.Converter", {
        AddressTypeFormatter: WinJS.Binding.converter(function (address) {
            return Commerce.Formatters.AddressTypeTextFormatter(address);
        }),
        AddressHeaderFormatter: WinJS.Binding.converter(function (header) {
            return Commerce.Formatters.AddressHeaderFormatter(header);
        }),
        TenderLineTypeNameFormatter: WinJS.Binding.converter(function (tenderLine) { return Commerce.Formatters.TenderLineTypeNameFormatter(tenderLine); }),
        AmountInTenderedCurrencyFormatter: WinJS.Binding.converter(function (tenderedCurrency) {
            return Commerce.Formatters.AmountInTenderedCurrencyFormatter(tenderedCurrency);
        }),
        TenderLineMoreInformationFormatter: WinJS.Binding.converter(function (tenderLine) { return Commerce.Formatters.TenderLineMoreInformationFormatter(tenderLine); }),
        TenderLineNameFormatter: WinJS.Binding.converter(function (tenderLine) { return Commerce.Formatters.TenderLineNameFormatter(tenderLine); }),
        ProductNameFormatter: WinJS.Binding.converter(function (cartLine) {
            if (cartLine.IsGiftCardLine) {
                return Commerce.ViewModelAdapter.getResourceString("string_5152");
            }
            else if (cartLine.IsInvoiceLine) {
                return Commerce.Formatters.InvoiceTypeFormatter(cartLine.InvoiceTypeValue);
            }
            var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
            return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : product.Name;
        }),
        CartLineQuantityFormat: WinJS.Binding.converter(function (cartLine) { return Commerce.Formatters.CartLineQuantityFormat(cartLine); }),
        SizeNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Size);
        }),
        ColorNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Color);
        }),
        StyleNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Style);
        }),
        ConfigurationNameFormatter: WinJS.Binding.converter(function (cartLine) {
            return Commerce.Formatters.productDimensionValueFormatter(cartLine, Commerce.Proxy.Entities.ProductDimensionType.Configuration);
        }),
        CartCommentFormatter: WinJS.Binding.converter(function (cartLine) {
            if (cartLine.IsGiftCardLine) {
                return "";
            }
            else {
                return cartLine.Comment;
            }
        }),
        RecentPurchaseIdFormatter: WinJS.Binding.converter(function (purchaseHistory) {
            return Commerce.Formatters.RecentPurchaseIdFormatter(purchaseHistory);
        }),
        SearchTextSuggestionFormatterWithHtmlEscape: WinJS.Binding.converter(function (htmlString) {
            var searchSuggestionHitPreTag = "{";
            var searchSuggestionHitPostTag = "}";
            var escapedString = Commerce.EscapingHelper.escapeHtmlAttribute(htmlString);
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPreTag, "g"), "<span class=\"bold\">");
            escapedString = escapedString.replace(new RegExp(searchSuggestionHitPostTag, "g"), "</span>");
            return escapedString;
        }),
        PaymentCurrencyLineText: WinJS.Binding.converter(function (cartTenderLineTenderType) {
            var paymentCurrencyLineText = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartTenderLineTenderType)) {
                var currency = cartTenderLineTenderType.Currency;
                var foreignCurrencyAmount = cartTenderLineTenderType.AmountInTenderedCurrency;
                var exchangeRate = cartTenderLineTenderType.ExchangeRate;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(currency) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(foreignCurrencyAmount) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(exchangeRate)) {
                    var amount = Commerce.NumberExtensions.formatCurrency(foreignCurrencyAmount, currency);
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4342"), amount, currency, exchangeRate.toString());
                }
            }
            return paymentCurrencyLineText;
        }),
        IsPaymentCurrencyLineTextVisible: WinJS.Binding.converter(function (cartTenderLineTenderType) {
            var isVisible = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartTenderLineTenderType)) {
                var currency = cartTenderLineTenderType.Currency;
                var amountInTenderedCurrency = cartTenderLineTenderType.AmountInTenderedCurrency;
                var exchangeRate = cartTenderLineTenderType.ExchangeRate;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(currency) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(amountInTenderedCurrency) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(exchangeRate) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(cartTenderLineTenderType.TenderTypeId)) {
                    var storeCurrency = Commerce.ApplicationContext.Instance.storeInformation.Currency;
                    isVisible = storeCurrency !== currency;
                }
            }
            return isVisible ? "inline-block" : "none";
        }),
        DecimalFormatter: WinJS.Binding.converter(function (value) {
            if (Commerce.ObjectExtensions.isObject(value)) {
                var currencyAmount = value;
                return Commerce.NumberExtensions.formatCurrency(currencyAmount.ConvertedAmount, currencyAmount.CurrencyCode);
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                value = Number(value);
                if (isNaN(value)) {
                    return "";
                }
            }
            return Commerce.NumberExtensions.formatNumber(value, Commerce.NumberExtensions.getDecimalPrecision());
        }),
        DenominationFormatter: WinJS.Binding.converter(function (value) {
            var currency;
            var amount;
            if (Commerce.ObjectExtensions.isObject(value)) {
                var cashDeclaration = value;
                currency = cashDeclaration.Currency;
                amount = cashDeclaration.Amount;
            }
            else if (Commerce.ObjectExtensions.isString(value)) {
                amount = Number(value);
            }
            return Commerce.NumberExtensions.formatNumber(amount, Commerce.NumberExtensions.getDecimalPrecision(currency));
        }),
        LinkedProductFormatter: WinJS.Binding.converter(function (cartLine) {
            var isLinkedProduct = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                isLinkedProduct = !Commerce.StringExtensions.isNullOrWhitespace(cartLine.LinkedParentLineId);
                if (!isLinkedProduct) {
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    isLinkedProduct = !Commerce.ObjectExtensions.isNullOrUndefined(product) && Commerce.ArrayExtensions.hasElements(product.LinkedProducts);
                }
            }
            return Commerce.Formatters.YesNoBooleanFormatter(isLinkedProduct);
        }),
        InvoicedQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.InvoicedQuantityFormatter(value);
        }),
        OrderedQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.OrderedQuantityFormatter(value);
        }),
        CustomerOrderHistoryStatusFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CustomerOrderHistoryStatusFormatter(value);
        }),
        InvoiceTypeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.InvoiceTypeFormatter(value.InvoiceTypeValue);
        }),
        PriceFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.PriceFormatter(value);
        }),
        OfferIdFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.OfferIdFormatter(value);
        }),
        OriginalPriceFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.OriginalPriceFormatter(value);
        }),
        ExtendedPriceWithoutDiscountFormatter: WinJS.Binding.converter(function (value) {
            var price = value.Price || 0;
            var quantity = value.Quantity || 0;
            return Commerce.NumberExtensions.formatCurrency(price * quantity);
        }),
        TransactionTypeAndEntryStatusFormatter: WinJS.Binding.converter(function (transaction) {
            return Commerce.Formatters.TransactionTypeFormatter(transaction.TransactionTypeValue, transaction.TransactionStatusValue);
        }),
        TransactionTypeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.TransactionTypeFormatter(value);
        }),
        GroupHeaderFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CategoryNameTranslator(value) + "   >";
        }),
        CategoryNameFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CategoryNameTranslator(value);
        }),
        QuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.NumberExtensions.formatNumber(Commerce.ObjectExtensions.isNumber(value) ? value : 0, Commerce.NumberExtensions.getDecimalPrecision());
        }),
        NegativeQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.NumberExtensions.formatNumber(Commerce.ObjectExtensions.isNumber(value) ? -1 * value : 0, Commerce.NumberExtensions.getDecimalPrecision());
        }),
        IntegerQuantityFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.NumberExtensions.formatNumber(Commerce.ObjectExtensions.isNumber(value) ? value : 0, 0);
        }),
        YesNoBooleanFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.YesNoBooleanFormatter(value);
        }),
        ShouldDisplay: WinJS.Binding.converter(function (value) {
            return value ? "inline-block" : "none";
        }),
        AbsoluteImageUrl: WinJS.Binding.converter(function (url) {
            return Commerce.Formatters.AbsoluteImageUrl(url);
        }),
        ImageUrlFormatter: WinJS.Binding.converter(function (url) {
            return Commerce.Formatters.ImageUrlFormatter(url);
        }),
        LargeRecentPurchaseImage: WinJS.Binding.converter(function (imageUrl) {
            return Commerce.Formatters.LargeRecentPurchaseImage(imageUrl);
        }),
        SmallRecentPurchaseImage: WinJS.Binding.converter(function (imageUrl) {
            return Commerce.Formatters.SmallRecentPurchaseImage(imageUrl);
        }),
        CategoryImage: WinJS.Binding.converter(function (category) {
            return Commerce.Formatters.CategoryImage(category, category.DefaultImage);
        }),
        LargeCustomerImage: WinJS.Binding.converter(function (customer) {
            return Commerce.Formatters.LargeCustomerImage(customer);
        }),
        SmallCustomerImage: WinJS.Binding.converter(function (customer) {
            return Commerce.Formatters.SmallCustomerImage(customer);
        }),
        UnitOfMeasureFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.UnitOfMeasureFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        QuantityFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.QuantityFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        OrderedSumFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.OrderedSumFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        PhysicalReservedFromStoreInventory: WinJS.Binding.converter(function (inventoryAvailabilities) {
            return Commerce.Formatters.PhysicalReservedFromStoreInventoryFormatter(inventoryAvailabilities);
        }),
        UnitOfMeasureFromAvailableToPromiseFormatter: WinJS.Binding.converter(function (promises) {
            return Commerce.Formatters.UnitOfMeasureFromAvailableToPromiseFormatter(promises);
        }),
        IsRetailStoreFromOrgUnitLocation: WinJS.Binding.converter(function (storeLocation) {
            return Commerce.Formatters.IsRetailStoreFromOrgUnitLocationFormatter(storeLocation);
        }),
        FullAddressFromCustomerAddresses: WinJS.Binding.converter(function (customerAddresses) {
            var customerAddress = Commerce.ArrayExtensions.firstOrUndefined(customerAddresses);
            return (customerAddress && customerAddress.FullAddress) ? customerAddress.FullAddress : Commerce.StringExtensions.EMPTY;
        }),
        TotalCollection: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.TotalCollectionFormatter(value);
        }),
        Distance: WinJS.Binding.converter(function (value) {
            return Math.round(value * 10) / 10;
        }),
        DateWithoutTime: WinJS.Binding.converter(function (value) { return Commerce.Formatters.DateWithoutTime(value); }),
        DateWithoutTimeIgnoreTimezone: WinJS.Binding.converter(function (value) { return Commerce.Formatters.DateWithoutTimeIgnoreTimezone(value); }),
        manageShiftsDataListIconHtmlFormatter: WinJS.Binding.converter(function (shift) { return Commerce.Formatters.ManageShiftsDataListIconHtmlFormatter(shift); }),
        OrderIdFormatter: WinJS.Binding.converter(function (value) { return Commerce.Formatters.OrderIdFormatter(value); }),
        ShortDateAndTime: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.ShortDateAndTimeFormatter(value);
        }),
        ShortTime: WinJS.Binding.converter(function (value) { return Commerce.Formatters.ShortTime(value); }),
        PurchaseTransferOrderEnumFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.PurchaseTransferOrderEnumFormatter(value);
        }),
        shiftStatusEnumFormatter: WinJS.Binding.converter(function (value) {
            var stringValue;
            switch (value) {
                case Commerce.Proxy.Entities.ShiftStatus.BlindClosed:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4136");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Closed:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4137");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.None:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4138");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Open:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4139");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Suspended:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4140");
                    break;
                case Commerce.Proxy.Entities.ShiftStatus.Invalid:
                    stringValue = Commerce.ViewModelAdapter.getResourceString("string_4208");
                    break;
                default:
                    stringValue = "";
            }
            return stringValue;
        }),
        statusDateTimeFormatterForBlindClosed: WinJS.Binding.converter(function (value) {
            var shiftStatus = value.StatusValue;
            var stringValue;
            switch (shiftStatus) {
                case Commerce.Proxy.Entities.ShiftStatus.BlindClosed:
                    stringValue = Commerce.Formatters.ShortDateAndTimeFormatter(value.StatusDateTime);
                    break;
                default:
                    stringValue = "";
            }
            return stringValue;
        }),
        statusDateTimeFormatterForSuspended: WinJS.Binding.converter(function (value) {
            var shiftStatus = value.StatusValue;
            var stringValue;
            switch (shiftStatus) {
                case Commerce.Proxy.Entities.ShiftStatus.Suspended:
                    stringValue = Commerce.Formatters.ShortDateAndTimeFormatter(value.StatusDateTime);
                    break;
                default:
                    stringValue = "";
            }
            return stringValue;
        }),
        cardTenderTypeValueConverter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.CardTenderTypeValueFormatter(value);
        }),
        extensibleLoyaltyRewardPointActivityEntryTypeValueFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.ExtensibleLoyaltyRewardPointActivityEntryTypeValueFormatter(value);
        }),
        StockCountVariantFormatter: WinJS.Binding.converter(function (stockCountLine) {
            var variantStringValues = Commerce.StringExtensions.EMPTY;
            var variantValues = [
                stockCountLine.itemName,
                stockCountLine.colorTranslation,
                stockCountLine.configurationTranslation,
                stockCountLine.sizeTranslation,
                stockCountLine.styleTranslation
            ];
            for (var i = 0; i < variantValues.length; i++) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(variantValues[i])) {
                    if (variantStringValues === Commerce.StringExtensions.EMPTY) {
                        variantStringValues = variantValues[i];
                    }
                    else {
                        variantStringValues = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), variantStringValues, variantValues[i]);
                    }
                }
            }
            return variantStringValues;
        }),
        PickingAndReceivingDescriptionFormatter: WinJS.Binding.converter(function (pickingAndReceivingLine) {
            var variantStringValues = Commerce.StringExtensions.EMPTY;
            var variantValues = [
                pickingAndReceivingLine.description,
                pickingAndReceivingLine.colorTranslation,
                pickingAndReceivingLine.configurationTranslation,
                pickingAndReceivingLine.sizeTranslation,
                pickingAndReceivingLine.styleTranslation
            ];
            for (var i = 0; i < variantValues.length; i++) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(variantValues[i])) {
                    if (variantStringValues === Commerce.StringExtensions.EMPTY) {
                        variantStringValues = variantValues[i];
                    }
                    else {
                        variantStringValues = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), variantStringValues, variantValues[i]);
                    }
                }
            }
            return variantStringValues;
        }),
        IncomeExpenseAccountTypeFormatter: WinJS.Binding.converter(function (value) {
            var stringValue = "";
            if (value === Commerce.Proxy.Entities.IncomeExpenseAccountType.Income) {
                stringValue = Commerce.ViewModelAdapter.getResourceString("string_4132");
            }
            else {
                stringValue = Commerce.ViewModelAdapter.getResourceString("string_4133");
            }
            return stringValue;
        }),
        WishListTypeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.WishListTypeFormatter(value);
        }),
        TransferOrderLineVariantFormatter: WinJS.Binding.converter(function (orderLine) {
            var variantStringValues = Commerce.StringExtensions.EMPTY;
            var variantValues = [
                orderLine.ItemName,
                orderLine.InventColorId,
                orderLine.InventSizeId,
                orderLine.InventStyleId,
                orderLine.ConfigId
            ];
            for (var i = 0; i < variantValues.length; i++) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(variantValues[i])) {
                    if (variantStringValues === Commerce.StringExtensions.EMPTY) {
                        variantStringValues = variantValues[i];
                    }
                    else {
                        variantStringValues = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), variantStringValues, variantValues[i]);
                    }
                }
            }
            return variantStringValues;
        }),
        RewardPointsFormatter: WinJS.Binding.converter(function (value) {
            var totalActivePoints = 0;
            value.forEach(function (rewardLine) {
                totalActivePoints += rewardLine.ActivePoints;
            });
            return Commerce.NumberExtensions.formatNumber(totalActivePoints, 0);
        }),
        textContentFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.TextContentFormatter(value);
        }),
        SalesStatusContentFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.SalesStatusContentFormatter(value);
        }),
        commonAddressFormatterWithHtmlEscape: WinJS.Binding.converter(function (address) {
            return Commerce.Formatters.CommonAddressFormatterWithHtmlEscape(address);
        }),
        threeLineAddressFormatterWithHtmlEscape: WinJS.Binding.converter(function (address) {
            return Commerce.Formatters.CommonAddressFormatterWithHtmlEscape(address, 3);
        }),
        storeDistanceFormatter: WinJS.Binding.converter(function (storeLocation) {
            var distanceMeasurement = Commerce.ViewModelAdapter.getResourceString("string_2527");
            var distance = Commerce.NumberExtensions.roundToNDigits(storeLocation.Distance, 1);
            return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2529"), distance, distanceMeasurement);
        }),
        emptyFormatter: WinJS.Binding.converter(function (data) {
            return Commerce.Formatters.EmptyFormatter(data);
        }),
        ProductComponentQuantityFormatter: WinJS.Binding.converter(function (component) {
            return Commerce.Formatters.ProductComponentQuantityFormatter(component);
        }),
        AdditionalComponentChargeFormatter: WinJS.Binding.converter(function (value) {
            return Commerce.Formatters.AdditionalComponentChargeFormatter(value);
        })
    });
    var valueFormatManager = Commerce.Extensibility.ValueFormatterManager.instance;
    valueFormatManager.YesNoBooleanFormatter = Commerce.Formatters.YesNoBooleanFormatter;
    valueFormatManager.PriceFormatter = Commerce.Formatters.PriceFormatter;
    valueFormatManager.PurchaseTransferOrderTypeFormatter = Commerce.Formatters.PurchaseTransferOrderEnumFormatter;
    valueFormatManager.ShortDateAndTimeFormatter = Commerce.Formatters.ShortDateAndTimeFormatter;
    valueFormatManager.ShortDateFormatter = Commerce.Formatters.DateWithoutTime;
    valueFormatManager.TransactionTypeFormatter = Commerce.Formatters.TransactionTypeFormatter;
})(Commerce || (Commerce = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AskQuestionDialog = (function (_super) {
            __extends(AskQuestionDialog, _super);
            function AskQuestionDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "AskQuestionDialog";
                _this._textContent = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            AskQuestionDialog.prototype.onShowing = function (dialogState) {
                if (dialogState) {
                    this._textContent(dialogState.content);
                }
                this.visible(true);
            };
            AskQuestionDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, this._textContent());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return AskQuestionDialog;
        }(Controls.ModalDialog));
        Controls.AskQuestionDialog = AskQuestionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DateInputDialog = (function (_super) {
            __extends(DateInputDialog, _super);
            function DateInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "DateInputDialog";
                var dateNow = new Date();
                _this.currentDate = ko.observable(dateNow);
                _this.minimumYear = ko.observable(dateNow.getFullYear() - DateInputDialog.INTERVAL_YEAR);
                _this.maximumYear = ko.observable(dateNow.getFullYear() + DateInputDialog.INTERVAL_YEAR);
                return _this;
            }
            DateInputDialog.prototype.onShowing = function (dialogState) {
                this.minimumYear(dialogState.minYear);
                this.maximumYear(dialogState.maxYear);
                this.visible(true);
            };
            DateInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this.currentDate());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            DateInputDialog.prototype.dateChangeHandler = function (event) {
                var datePickerDiv = event.currentTarget;
                var datePickerControl = datePickerDiv.winControl;
                this.currentDate(Commerce.DateExtensions.getDate(datePickerControl.current));
            };
            DateInputDialog.INTERVAL_YEAR = 50;
            return DateInputDialog;
        }(Controls.ModalDialog));
        Controls.DateInputDialog = DateInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ListInputDialog = (function (_super) {
            __extends(ListInputDialog, _super);
            function ListInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "ListInputDialog";
                _this.items = ko.observableArray([]);
                _this.isCustomContentVisible = ko.observable(false);
                return _this;
            }
            ListInputDialog.prototype.onShowing = function (state) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(state.title)) {
                    this.title(state.title);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(state.subTitle)) {
                    this.subTitle(state.subTitle);
                }
                this.setItems(state.items, state.getDisplayNameCallback);
                if (Commerce.Client.Entities.isIFufillmentLineDetails(state.reasonCodesContainer)) {
                    var fulfillmentLineDetails = state.reasonCodesContainer;
                    this.isCustomContentVisible(true);
                    var placeholder = $(this.element).find(".customContent");
                    ko.applyBindingsToNode(placeholder[0], {
                        template: {
                            name: "FulfillmentRejectReasonDialogTemplate",
                            data: fulfillmentLineDetails
                        }
                    });
                }
                this.visible(true);
            };
            ListInputDialog.prototype.setItems = function (updatedItems, getDisplayNameCallback) {
                this.items(updatedItems.map(function (updatedItem) {
                    var displayName = Commerce.ObjectExtensions.isFunction(getDisplayNameCallback) ? getDisplayNameCallback(updatedItem) : updatedItem.toString();
                    return { key: displayName, value: updatedItem };
                }));
            };
            ListInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            ListInputDialog.prototype.itemClickHandler = function (event) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, event.data.value);
                return true;
            };
            return ListInputDialog;
        }(Controls.ModalDialog));
        Controls.ListInputDialog = ListInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TextInputType;
        (function (TextInputType) {
            TextInputType[TextInputType["multiLineText"] = 0] = "multiLineText";
            TextInputType[TextInputType["singleLineText"] = 1] = "singleLineText";
            TextInputType[TextInputType["password"] = 2] = "password";
        })(TextInputType = Controls.TextInputType || (Controls.TextInputType = {}));
        var TextInputDialog = (function (_super) {
            __extends(TextInputDialog, _super);
            function TextInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "TextInputDialog";
                _this.textInputType = ko.observable(TextInputType.multiLineText);
                _this._textContent = ko.observable("");
                _this._textMaxLength = ko.observable(null);
                _this._rowsNumber = ko.observable(TextInputDialog.DEFAULT_ROWS_NUMBER);
                _this._labelText = ko.observable(null);
                _this._hideScrollbar = ko.observable(false);
                _this._enterKeyDisabled = false;
                _this._ariaLabelText = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            TextInputDialog.prototype.onkeydown = function (data, event) {
                if (event.keyCode === 13 && this._enterKeyDisabled) {
                    event.preventDefault();
                    return false;
                }
                return true;
            };
            TextInputDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                if (dialogState) {
                    this._textContent(dialogState.content);
                    this._textMaxLength(dialogState.maxLength);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.textInputType)) {
                        this.textInputType(dialogState.textInputType);
                    }
                    this._labelText(dialogState.labelResx ? Commerce.ViewModelAdapter.getResourceString(dialogState.labelResx) : null);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.rowsNumber)) {
                        this._rowsNumber(dialogState.rowsNumber);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.hideScrollbar)) {
                        this._hideScrollbar(dialogState.hideScrollbar);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.enterKeyDisabled)) {
                        this._enterKeyDisabled = dialogState.enterKeyDisabled;
                    }
                    if (dialogState.enableBarcodeScan) {
                        Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                            _this._textContent(barcode);
                        }).done(function () { _this._scannerEnabled = true; });
                    }
                }
                this.visible(true);
                this._ariaLabelText(this.title() + " " +
                    (this.subTitle() || Commerce.StringExtensions.EMPTY) + " " +
                    (this._labelText() || Commerce.StringExtensions.EMPTY));
            };
            TextInputDialog.prototype.setTextContent = function (updatedContent) {
                this._textContent(updatedContent);
            };
            TextInputDialog.prototype.onHidden = function () {
                if (this._scannerEnabled) {
                    Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                }
                _super.prototype.onHidden.call(this);
            };
            TextInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._textContent());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            TextInputDialog.DEFAULT_ROWS_NUMBER = 5;
            return TextInputDialog;
        }(Controls.ModalDialog));
        Controls.TextInputDialog = TextInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NumberInputDialog = (function (_super) {
            __extends(NumberInputDialog, _super);
            function NumberInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "NumberInputDialog";
                _this._numberContent = ko.observable("0");
                _this._minValue = Number.MIN_VALUE;
                _this._maxValue = Number.MAX_VALUE;
                _this._label = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._decimalPrecision = ko.observable(0);
                return _this;
            }
            Object.defineProperty(NumberInputDialog.prototype, "label", {
                get: function () {
                    return this._label;
                },
                enumerable: true,
                configurable: true
            });
            NumberInputDialog.prototype.onShowing = function (dialogState) {
                if (dialogState) {
                    this._numberContent(dialogState.content.toString());
                    if (Commerce.ObjectExtensions.isNumber(dialogState.min) && !isNaN(dialogState.min)) {
                        this._minValue = dialogState.min;
                    }
                    if (Commerce.ObjectExtensions.isNumber(dialogState.max) && !isNaN(dialogState.max)) {
                        this._maxValue = dialogState.max;
                    }
                    if (Commerce.ObjectExtensions.isNumber(dialogState.decimalPrecision) && !isNaN(dialogState.decimalPrecision)) {
                        this._decimalPrecision(dialogState.decimalPrecision);
                    }
                }
                this.visible(true);
            };
            NumberInputDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            NumberInputDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            NumberInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var numberAsText = this._numberContent();
                        var numberAsDecimal = Commerce.NumberExtensions.parseNumber(numberAsText);
                        var errors = [];
                        if (Commerce.StringExtensions.isNullOrWhitespace(numberAsText) || isNaN(numberAsDecimal)) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_A_NUMBER));
                        }
                        else if (numberAsDecimal > this._maxValue) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NUMBER_INPUT_VALUE_GREATER_THAN_MAXIMUM_ALLOWED));
                        }
                        else if (numberAsDecimal < this._minValue) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NUMBER_INPUT_VALUE_LESS_THAN_MINIMUM_ALLOWED));
                        }
                        if (Commerce.ArrayExtensions.hasElements(errors)) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }
                        else {
                            this.dialogResult.resolve(Commerce.DialogResult.OK, numberAsDecimal);
                        }
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return NumberInputDialog;
        }(Controls.ModalDialog));
        Controls.NumberInputDialog = NumberInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectDropDownDialog = (function (_super) {
            __extends(SelectDropDownDialog, _super);
            function SelectDropDownDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectDropDownDialog";
                _this.optionsList = ko.observableArray([]);
                _this.selectedOption = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.cancelAllowed = ko.observable(false);
                _this.okAllowed = ko.observable(false);
                _this.isCustomContentVisible = ko.observable(false);
                return _this;
            }
            SelectDropDownDialog.prototype.onShowing = function (options) {
                var optionItemsExist = false;
                var cancelAllowed = true;
                var okAllowed = true;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    if (Commerce.ArrayExtensions.hasElements(options.optionItems)) {
                        optionItemsExist = true;
                        this.optionsList(options.optionItems);
                        if (!Commerce.StringExtensions.isNullOrWhitespace(options.defaultSelectedItem) &&
                            (options.optionItems.indexOf(options.defaultSelectedItem) >= 0)) {
                            this.selectedOption(options.defaultSelectedItem);
                        }
                    }
                    cancelAllowed = Commerce.ObjectExtensions.isNullOrUndefined(options.cancelNotAllowed) ? true : !options.cancelNotAllowed;
                    var fulfillmentLineDetails = options.reasonCodesContainer;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(fulfillmentLineDetails)) {
                        this.isCustomContentVisible(true);
                        var placeholder = $(this.element).find(".customContent");
                        ko.applyBindingsToNode(placeholder[0], {
                            template: {
                                name: "FulfillmentRejectReasonDialogTemplate",
                                data: fulfillmentLineDetails
                            }
                        });
                    }
                }
                if (!optionItemsExist) {
                    okAllowed = false;
                    cancelAllowed = true;
                }
                this.okAllowed(okAllowed);
                this.cancelAllowed(cancelAllowed);
                this.visible(true);
            };
            SelectDropDownDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this.selectedOption());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return SelectDropDownDialog;
        }(Controls.ModalDialog));
        Controls.SelectDropDownDialog = SelectDropDownDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ReasonCodeDialog = (function (_super) {
            __extends(ReasonCodeDialog, _super);
            function ReasonCodeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.controlName = "ReasonCodeDialog";
                return _this;
            }
            ReasonCodeDialog.prototype.onShowing = function (context) {
                var _this = this;
                var reasonCodes = context.reasonCodes;
                if (!Commerce.ArrayExtensions.hasElements(reasonCodes)) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                var reasonCodeLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                reasonCodes.forEach(function (reasonCode) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this.showControlForReasonCode(reasonCode, context))
                            .done(function (result) {
                            if (result.canceled) {
                                return;
                            }
                            reasonCodeLines.push(result.reasonCodeLine);
                        });
                    });
                });
                asyncQueue.run().done(function (result) {
                    if (result.canceled) {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        return;
                    }
                    _this.dialogResult.resolve(Commerce.DialogResult.OK, reasonCodeLines);
                }).fail(function (errors) { _this.dialogResult.reject(errors); });
                this.visible(true);
            };
            ReasonCodeDialog.prototype.hide = function () {
                _super.prototype.hide.call(this);
                return Commerce.VoidAsyncResult.createResolved();
            };
            ReasonCodeDialog.prototype.showControlForReasonCode = function (reasonCode, context) {
                var _this = this;
                var asyncResult = new Commerce.AsyncResult(null);
                var reasonCodeLine = {
                    ReasonCodeId: reasonCode.ReasonCodeId,
                    InputTypeValue: reasonCode.InputTypeValue,
                    SubReasonCodeId: "",
                    Information: ""
                };
                var maxLength = reasonCode.MaximumLength > 0 ? reasonCode.MaximumLength : 100;
                var prompt = Commerce.StringExtensions.isNullOrWhitespace(reasonCode.Prompt) ? reasonCode.ReasonCodeId : reasonCode.Prompt;
                switch (reasonCode.InputTypeValue) {
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Text:
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.None:
                        {
                            var dialog = new Controls.TextInputDialog();
                            dialog.title(prompt);
                            dialog.subTitle(this.subTitle());
                            var textInputType = reasonCode.IsMultiLineText ? Controls.TextInputType.multiLineText : Controls.TextInputType.singleLineText;
                            dialog.textInputType(textInputType);
                            this.getValidInputValue(dialog, { content: "", maxLength: maxLength }, reasonCode, reasonCodeLine, asyncResult);
                            this.resolveOnCancel(dialog, asyncResult);
                        }
                        break;
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.SubCode:
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.SubCodeButtons:
                        {
                            var listItems = reasonCode.ReasonSubCodes.map(function (reasonSubCode) {
                                return reasonSubCode.Description;
                            });
                            var selectDialogOptions = void 0;
                            var dialog_1 = null;
                            if (reasonCode.InputTypeValue === Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.SubCodeButtons) {
                                dialog_1 = new Controls.ListInputDialog();
                                selectDialogOptions = {
                                    items: listItems
                                };
                            }
                            else {
                                dialog_1 = new Controls.SelectDropDownDialog();
                                selectDialogOptions = {
                                    optionItems: listItems
                                };
                            }
                            if (Commerce.Client.Entities.isIFufillmentLineDetails(context.reasonCodesContainer)) {
                                selectDialogOptions.reasonCodesContainer = context.reasonCodesContainer;
                            }
                            dialog_1.title(prompt);
                            dialog_1.subTitle(this.subTitle());
                            dialog_1.show(selectDialogOptions, false)
                                .on(Commerce.DialogResult.OK, function (selectedItem) {
                                dialog_1.hide().done(function () {
                                    var selectedReasonSubCode;
                                    for (var itemIndex = 0; itemIndex < reasonCode.ReasonSubCodes.length; itemIndex++) {
                                        if (reasonCode.ReasonSubCodes[itemIndex].Description === selectedItem) {
                                            selectedReasonSubCode = reasonCode.ReasonSubCodes[itemIndex];
                                            break;
                                        }
                                    }
                                    reasonCodeLine.SubReasonCodeId = selectedReasonSubCode.SubCodeId;
                                    reasonCodeLine.Information = selectedReasonSubCode.Description;
                                    asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                                });
                            });
                            this.resolveOnCancel(dialog_1, asyncResult);
                            break;
                        }
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Date:
                        {
                            var dateNow = new Date();
                            var dialog_2 = new Controls.DateInputDialog();
                            dialog_2.title(prompt);
                            dialog_2.subTitle(this.subTitle());
                            dialog_2.show({ minYear: (dateNow.getFullYear() - 200), maxYear: (dateNow.getFullYear() + 200) })
                                .on(Commerce.DialogResult.OK, function (date) {
                                dialog_2.hide().done(function () {
                                    reasonCodeLine.Information = date.toLocaleDateString(Commerce.Host.instance.globalization.getApplicationLanguage(), { weekday: "short", year: "numeric", month: "short", day: "numeric" });
                                    asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                                });
                            });
                            this.resolveOnCancel(dialog_2, asyncResult);
                            break;
                        }
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.AgeLimit:
                        {
                            var dateNow = new Date();
                            var dialog_3 = new Controls.AskQuestionDialog();
                            var year = dateNow.getFullYear();
                            year = year - reasonCode.MinimumValue;
                            dateNow.setFullYear(year);
                            dialog_3.title(prompt);
                            dialog_3.subTitle(this.subTitle());
                            dialog_3.show({
                                content: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5922"), reasonCode.MinimumValue, dateNow.toLocaleDateString())
                            }).on(Commerce.DialogResult.Yes, function (inputValue) {
                                dialog_3.hide().done(function () {
                                    reasonCodeLine.Information = inputValue;
                                    asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                                });
                            });
                            this.resolveOnCancel(dialog_3, asyncResult);
                            break;
                        }
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Numeric:
                        {
                            var dialog = new Controls.NumberInputDialog();
                            dialog.title(prompt);
                            dialog.subTitle(this.subTitle());
                            var minValue = reasonCode.MinimumValue;
                            var maxValue = reasonCode.MaximumValue;
                            if (Commerce.NumberExtensions.isNullNaNOrZero(minValue) && Commerce.NumberExtensions.isNullNaNOrZero(maxValue)) {
                                minValue = Commerce.NumberExtensions.DECIMAL_MIN_VALUE;
                                maxValue = Commerce.NumberExtensions.DECIMAL_MAX_VALUE;
                            }
                            this.getValidInputValue(dialog, { content: 0, min: minValue, max: maxValue, decimalPrecision: Commerce.NumberExtensions.DEFAULT_DECIMAL_PRECISION }, reasonCode, reasonCodeLine, asyncResult);
                            this.resolveOnCancel(dialog, asyncResult);
                            break;
                        }
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Item:
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Customer:
                        {
                            var previousViewName_1 = Commerce.ViewModelAdapter.getCurrentViewName();
                            var dialog_4 = new Controls.TextInputDialog();
                            dialog_4.title(prompt);
                            dialog_4.subTitle(this.subTitle());
                            dialog_4.show({ content: "", maxLength: maxLength }, false)
                                .on(Commerce.DialogResult.OK, function (inputValue) {
                                dialog_4.hide().done(function () {
                                    var updateReasonCodeLineAndNavigateBack = function (information) {
                                        var informationProvided = !Commerce.ObjectExtensions.isNullOrUndefined(information);
                                        if (!informationProvided && reasonCode.InputRequired) {
                                            asyncResult.resolve({ canceled: true });
                                            return;
                                        }
                                        if (informationProvided) {
                                            reasonCodeLine.Information = information;
                                        }
                                        asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                                        if (Commerce.ViewModelAdapter.isInView("SearchView")) {
                                            Commerce.ViewModelAdapter.navigateBack();
                                        }
                                        else {
                                            Commerce.ViewModelAdapter.navigate("CartView", { navigationSource: previousViewName_1 });
                                        }
                                    };
                                    var options = {
                                        searchText: inputValue,
                                        selectionMode: undefined,
                                        searchEntity: undefined,
                                        correlationId: Commerce.StringExtensions.EMPTY
                                    };
                                    if (reasonCode.InputTypeValue === Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Item) {
                                        dialog_4.title(Commerce.ViewModelAdapter.getResourceString("string_5923"));
                                        options.selectionMode = Commerce.ViewModels.SearchViewSelectionMode.Product;
                                        var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                                            updateReasonCodeLineAndNavigateBack(result.simpleProduct.ItemId);
                                        }, function () {
                                            updateReasonCodeLineAndNavigateBack(undefined);
                                        });
                                        options.productSelectionOptions = {
                                            productSelectionHandler: productSelectionHandler,
                                            allowKitMasterSelection: true,
                                            allowChangeStoreAndCatalog: false
                                        };
                                        options.searchEntity = Commerce.ViewModels.SearchViewSearchEntity.Product;
                                    }
                                    else {
                                        dialog_4.title(Commerce.ViewModelAdapter.getResourceString("string_5924"));
                                        options.selectionMode = Commerce.ViewModels.SearchViewSelectionMode.Customer;
                                        var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                                            updateReasonCodeLineAndNavigateBack(customer.AccountNumber);
                                        }, function () {
                                            updateReasonCodeLineAndNavigateBack(undefined);
                                        });
                                        options.customerSelectionOptions = {
                                            customerSelectionHandler: customerSelectionHandler,
                                            isOnlySelectionAllowed: true
                                        };
                                        options.searchEntity = Commerce.ViewModels.SearchViewSearchEntity.Customer;
                                    }
                                    Commerce.ViewModelAdapter.navigate("SearchView", options);
                                });
                            });
                            this.resolveOnCancel(dialog_4, asyncResult);
                            break;
                        }
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Staff:
                        {
                            Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value.done(function (operators) {
                                var listItems = operators.map(function (employee) {
                                    return employee.Name;
                                });
                                var dialog = new Controls.SelectDropDownDialog();
                                dialog.title(prompt);
                                dialog.subTitle(_this.subTitle());
                                var selectDropDownDialogOptions = {
                                    optionItems: listItems
                                };
                                dialog.show(selectDropDownDialogOptions, false)
                                    .on(Commerce.DialogResult.OK, function (selectedValue) {
                                    dialog.hide().done(function () {
                                        var selectedStaff;
                                        for (var itemIndex = 0; itemIndex < operators.length; itemIndex++) {
                                            if (operators[itemIndex].Name === selectedValue) {
                                                selectedStaff = operators[itemIndex];
                                                break;
                                            }
                                        }
                                        reasonCodeLine.Information = selectedStaff.StaffId;
                                        asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                                    });
                                });
                                _this.resolveOnCancel(dialog, asyncResult);
                            }).fail(function (errors) {
                                asyncResult.reject(errors);
                            });
                            break;
                        }
                    case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.CompositeSubCodes:
                        {
                            var listItems = reasonCode.ReasonSubCodes.map(function (subCode) {
                                return subCode.Description;
                            });
                            var dialog_5 = new Controls.SelectDropDownDialog();
                            dialog_5.title(prompt);
                            dialog_5.subTitle(this.subTitle());
                            var selectDropDownDialogOptions = {
                                optionItems: listItems
                            };
                            dialog_5.show(selectDropDownDialogOptions, false)
                                .on(Commerce.DialogResult.OK, function (selectedValue) {
                                dialog_5.hide().done(function () {
                                    var selectedSubCode;
                                    for (var itemIndex = 0; itemIndex < reasonCode.ReasonSubCodes.length; itemIndex++) {
                                        if (reasonCode.ReasonSubCodes[itemIndex].Description === selectedValue) {
                                            selectedSubCode = reasonCode.ReasonSubCodes[itemIndex];
                                            break;
                                        }
                                    }
                                    reasonCodeLine.ReasonCodeId = selectedSubCode.SubCodeId;
                                    reasonCodeLine.Information = selectedSubCode.Description;
                                    asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                                });
                            });
                            this.resolveOnCancel(dialog_5, asyncResult);
                            break;
                        }
                    default:
                        asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                        break;
                }
                return asyncResult;
            };
            ReasonCodeDialog.prototype.getValidInputValue = function (dialog, dialogArgs, reasonCode, reasonCodeLine, asyncResult) {
                var _this = this;
                var dialogResult;
                if (dialog.visible()) {
                    dialogResult = dialog.dialogResult;
                }
                else {
                    dialogResult = dialog.show(dialogArgs, false);
                }
                dialogResult.on(Commerce.DialogResult.OK, function (inputValue) {
                    var error;
                    switch (reasonCode.InputTypeValue) {
                        case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.Text:
                        case Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.None:
                            if (inputValue.length < reasonCode.MinimumLength) {
                                error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.REASONCODE_LENGTH_SHORT);
                            }
                            else if (reasonCode.MaximumLength > 0 && inputValue.length > reasonCode.MaximumLength) {
                                error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.REASONCODE_LENGTH_EXCEEDED);
                            }
                            break;
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                        Commerce.NotificationHandler.displayClientErrors([error]).always(function () {
                            dialog.clearResult();
                            _this.getValidInputValue(dialog, dialogArgs, reasonCode, reasonCodeLine, asyncResult);
                        });
                    }
                    else {
                        dialog.hide().done(function () {
                            reasonCodeLine.Information = inputValue.toString();
                            asyncResult.resolve({ canceled: false, reasonCodeLine: reasonCodeLine });
                        });
                    }
                }).on(Commerce.DialogResult.Cancel, function () {
                    dialog.hide().done(function () {
                        asyncResult.resolve({ canceled: true });
                    });
                });
            };
            ReasonCodeDialog.prototype.resolveOnCancel = function (dialog, asyncResult) {
                dialog.dialogResult.on(Commerce.DialogResult.Cancel, function () {
                    dialog.hide().done(function () {
                        asyncResult.resolve({ canceled: true });
                    });
                });
            };
            return ReasonCodeDialog;
        }(Controls.ModalDialog));
        Controls.ReasonCodeDialog = ReasonCodeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ViewControllerBase = (function (_super) {
            __extends(ViewControllerBase, _super);
            function ViewControllerBase(saveInHistory) {
                var _this = _super.call(this, saveInHistory) || this;
                _this._saveInHistory = saveInHistory;
                _this._children = [];
                _this._numPadInputBroker = new Commerce.Peripherals.NumPadInputBroker();
                return _this;
            }
            Object.defineProperty(ViewControllerBase.prototype, "numPadInputBroker", {
                get: function () {
                    return this._numPadInputBroker;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewControllerBase.prototype, "saveInHistory", {
                get: function () { return this._saveInHistory; },
                enumerable: true,
                configurable: true
            });
            ViewControllerBase.prototype.addControl = function (control) {
                if (control) {
                    this._children.push(control);
                    if (this._element != null) {
                        this._element.appendChild(control.element);
                    }
                }
            };
            ViewControllerBase.prototype.onCreated = function (element) {
                this._element = element;
                this._children.forEach(function (control) {
                    element.appendChild(control.element);
                });
            };
            ViewControllerBase.prototype.unload = function () {
                this._element = null;
                this._children = null;
            };
            ViewControllerBase.prototype.enableNumPad = function () {
                Commerce.Peripherals.instance.numPad.enable(this.numPadInputBroker);
            };
            ViewControllerBase.prototype.disableNumPad = function () {
                Commerce.Peripherals.instance.numPad.disable();
            };
            ViewControllerBase.DEFAULT_DELAY_IN_MILLISECONDS_ON_PAGE_LOAD_VISIBILITY = 500;
            return ViewControllerBase;
        }(Commerce.Extensibility.DisposableViewControllerBase));
        ViewControllers.ViewControllerBase = ViewControllerBase;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var AffiliationsViewController = (function (_super) {
            __extends(AffiliationsViewController, _super);
            function AffiliationsViewController() {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.AffiliationsViewModel();
                return _this;
            }
            AffiliationsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            return AffiliationsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.AffiliationsViewController = AffiliationsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CategoriesViewController = (function (_super) {
            __extends(CategoriesViewController, _super);
            function CategoriesViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.indeterminateWaitVisible = ko.observable(true);
                _this.viewModel = new Commerce.ViewModels.CategoriesViewModel();
                _this.viewModel.GetCategoriesSuccessCallBack(Commerce.Session.instance.CurrentCategoryList);
                _this.indeterminateWaitVisible(false);
                _this.viewTitle = ko.observable(_this.viewModel.rootCategoryName());
                _this._pageLoadCorrelationId = Commerce.LoggerHelper.getFormattedCorrelationId(options);
                return _this;
            }
            CategoriesViewController.prototype.afterShown = function () {
                Commerce.RetailLogger.viewsMerchandisingCategoriesViewLoaded(this._pageLoadCorrelationId);
                this._pageLoadCorrelationId = Commerce.StringExtensions.EMPTY;
            };
            CategoriesViewController.prototype.itemInvokedHandler = function (item) {
                Commerce.ViewModelAdapter.navigate("ProductsView", {
                    category: item,
                    activeMode: Commerce.ViewModels.ProductsViewModelActiveMode.Products
                });
            };
            CategoriesViewController.prototype.categoriesCommand = function (options) {
                Commerce.ViewModelAdapter.navigate("ProductsView", {
                    category: options.SelectedGroupHeader,
                    activeMode: Commerce.ViewModels.ProductsViewModelActiveMode.Products
                });
            };
            return CategoriesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CategoriesViewController = CategoriesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SearchViewController = (function (_super) {
            __extends(SearchViewController, _super);
            function SearchViewController(options) {
                var _this = _super.call(this, true) || this;
                var searchViewModelOptions;
                if (options instanceof Commerce.Client.Entities.SearchNavigationParameters) {
                    searchViewModelOptions = {
                        searchEntity: options.searchEntity,
                        searchText: options.searchText,
                        selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                        correlationId: Commerce.StringExtensions.EMPTY,
                        autoFocusDelayInMilliseconds: ViewControllers.ViewControllerBase.DEFAULT_DELAY_IN_MILLISECONDS_ON_PAGE_LOAD_VISIBILITY
                    };
                }
                else {
                    searchViewModelOptions = options;
                    if (isNaN(searchViewModelOptions.autoFocusDelayInMilliseconds)) {
                        searchViewModelOptions.autoFocusDelayInMilliseconds = ViewControllers.ViewControllerBase.DEFAULT_DELAY_IN_MILLISECONDS_ON_PAGE_LOAD_VISIBILITY;
                    }
                }
                _this.viewModel = new Commerce.ViewModels.SearchViewModel(searchViewModelOptions);
                _this.viewModel.showCustomerDetailsHandler = _this.showCustomerDetails.bind(_this);
                _this.viewModel.changeStoreAndCatalogsHandler = _this.changeStoreAndCatalogs.bind(_this);
                _this.viewModel.showProductDetailsHandler = _this.showProductDetails.bind(_this);
                _this.viewModel.compareItemsHandler = _this._compareItems.bind(_this);
                _this.viewModel.addNewCustomerHandler = _this.addNewCustomer.bind(_this);
                _this._options = searchViewModelOptions || {
                    selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                    searchEntity: undefined,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                _this.viewModel.isSearchWithLocationAvailable.valueHasMutated();
                return _this;
            }
            SearchViewController.prototype.onCreated = function (element) {
                var _this = this;
                _super.prototype.onCreated.call(this, element);
                this._clearListSelectionTrigger = this.viewModel.clearProductSelection.subscribe(function (newValue) {
                    if (newValue) {
                        _this._clearProductListSelection();
                    }
                });
            };
            SearchViewController.prototype.onShown = function () {
                var _this = this;
                this._cancelSelectionOnHidden = true;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(barcode)) {
                        _this.viewModel.setSearchByText(barcode);
                        _this.viewModel.searchItems(true);
                    }
                });
            };
            SearchViewController.prototype.afterBind = function (element) {
                this._searchElement = element;
                if (this._options.searchEntity === Commerce.ViewModels.SearchViewSearchEntity.Customer
                    || this._options.selectionMode === Commerce.ViewModels.SearchViewSelectionMode.Customer) {
                    Commerce.Interaction.triggerEvent(element, "activateCustomersPivot");
                }
                else {
                    Commerce.Interaction.triggerEvent(element, "activateProductsPivot");
                }
            };
            SearchViewController.prototype.afterShown = function () {
                var _this = this;
                window.setTimeout(function () {
                    _this.viewModel.autoFocusDelayInMilliseconds(SearchViewController.DELAY_IN_MILLISECONDS_ON_FOCUS);
                }, ViewControllers.ViewControllerBase.DEFAULT_DELAY_IN_MILLISECONDS_ON_PAGE_LOAD_VISIBILITY);
            };
            SearchViewController.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                if (this._cancelSelectionOnHidden) {
                    if (this._options.selectionMode === Commerce.ViewModels.SearchViewSelectionMode.Customer) {
                        this._options.customerSelectionOptions.customerSelectionHandler.cancel();
                    }
                    else if (this._options.selectionMode === Commerce.ViewModels.SearchViewSelectionMode.Product) {
                        this._options.productSelectionOptions.productSelectionHandler.cancel();
                    }
                }
                this._clearListSelectionTrigger.dispose();
            };
            SearchViewController.prototype.showRefinerDialog = function () {
                this.viewModel.filterProducts();
            };
            SearchViewController.prototype.switchSearchMode = function (event) {
                var PRODUCT_SEARCH_TAB_INDEX = 0;
                var correlationId;
                var isProductSearch = event.detail.index === PRODUCT_SEARCH_TAB_INDEX;
                if ((isProductSearch && !this.viewModel.viewCustomers())
                    || (event.detail.index === PRODUCT_SEARCH_TAB_INDEX + 1 && this.viewModel.viewCustomers())) {
                    return;
                }
                var logEvent;
                if (isProductSearch) {
                    correlationId = this.viewModel.ProductSearchCorrelationId;
                    logEvent = Commerce.RetailLogger.viewsMerchandisingSearchViewSwitchToProductTab;
                }
                else {
                    correlationId = this.viewModel.CustomerSearchCorrelationId;
                    logEvent = Commerce.RetailLogger.viewsMerchandisingSearchViewSwitchToCustomerTab;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                logEvent(correlationId);
                this.viewModel.setSearchMode(isProductSearch, correlationId);
            };
            SearchViewController.prototype.searchClickHandler = function (searchString, searchType, correlationId) {
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                Commerce.RetailLogger.viewsMerchandisingSearchViewSearchClick(correlationId);
                this.viewModel.setSearchByText(searchString);
                this.viewModel.setSearchMode(searchType !== Commerce.Client.Entities.HeaderSearchType.Customer);
                if (searchType === Commerce.Client.Entities.HeaderSearchType.Customer) {
                    Commerce.Interaction.triggerEvent(this._searchElement, "activateCustomersPivot");
                }
                else {
                    Commerce.Interaction.triggerEvent(this._searchElement, "activateProductsPivot");
                }
            };
            SearchViewController.prototype.searchBySearchFieldClickHandler = function (customerSearchByFieldCriteria, correlationId) {
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                Commerce.RetailLogger.viewsMerchandisingSearchViewSearchClick(correlationId);
                this.viewModel.setSearchByCustomerFieldCriteria(customerSearchByFieldCriteria);
                this.viewModel.setSearchMode(false, correlationId);
                Commerce.Interaction.triggerEvent(this._searchElement, "activateCustomersPivot");
            };
            SearchViewController.prototype.searchByAdvancedSearchClickHandler = function () {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsMerchandisingAdvancedSearchViewSearchClick(correlationId);
                this.viewModel.getAndSetAdvancedCustomerSearchCriteria(correlationId).done(function (result) {
                    if (!result.canceled) {
                        _this.viewModel.setSearchMode(false, correlationId);
                        Commerce.Interaction.triggerEvent(_this._searchElement, "activateCustomersPivot");
                    }
                });
            };
            SearchViewController.prototype.addNewCustomer = function () {
                this._cancelSelectionOnHidden = false;
                this.viewModel.createCustomer();
            };
            SearchViewController.prototype.showProductDetails = function (product, quantity) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.RetailLogger.viewsMerchandisingSearchViewShowProductDetailsStarted(correlationId);
                    Commerce.RetailLogger.viewsMerchandisingSearchViewShowProductDetailsProduct(product.ItemId);
                    this._cancelSelectionOnHidden = false;
                    var isSelectionMode = this._options.selectionMode === Commerce.ViewModels.SearchViewSelectionMode.Product;
                    var simpleProduct = void 0;
                    if (product instanceof Commerce.Proxy.Entities.SimpleProductClass) {
                        simpleProduct = product;
                    }
                    var simpleProductDetailsViewModelOptions = {
                        productId: product.RecordId,
                        product: simpleProduct,
                        isSelectionMode: isSelectionMode,
                        correlationId: correlationId
                    };
                    if (isSelectionMode) {
                        simpleProductDetailsViewModelOptions.selectionOptions = {
                            productSelectionHandler: this._options.productSelectionOptions.productSelectionHandler
                        };
                    }
                    if (Commerce.ObjectExtensions.isNumber(quantity)) {
                        simpleProductDetailsViewModelOptions.addToCartOptions = {
                            quantity: quantity,
                            trackingId: this._options.trackingId
                        };
                    }
                    else {
                        simpleProductDetailsViewModelOptions.addToCartOptions = {
                            trackingId: this._options.trackingId
                        };
                    }
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                }
            };
            SearchViewController.prototype.changeStoreAndCatalogs = function (searchText, searchEntity) {
                var _this = this;
                this._cancelSelectionOnHidden = false;
                this._options.searchText = searchText;
                this._options.searchEntity = searchEntity;
                var parameters = {
                    destination: "SearchView",
                    destinationOptions: this._options
                };
                if (this.viewModel.selectionMode === Commerce.ViewModels.SearchViewSelectionMode.Product) {
                    parameters.onCatalogSelectionCanceled = function () {
                        _this._options.productSelectionOptions.productSelectionHandler.cancel();
                    };
                }
                Commerce.ViewModelAdapter.navigate("CatalogsView", parameters);
            };
            SearchViewController.prototype.showCustomerDetails = function (customerAccountNumber, correlationId) {
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                Commerce.RetailLogger.viewsMerchandisingSearchViewShowCustomerDetailsStarted(correlationId);
                Commerce.RetailLogger.viewsMerchandisingSearchViewShowCustomerDetails(customerAccountNumber);
                this._cancelSelectionOnHidden = false;
                var viewOptions = {
                    accountNumber: customerAccountNumber,
                    correlationId: correlationId
                };
                if (this._options.selectionMode === Commerce.ViewModels.SearchViewSelectionMode.Customer) {
                    viewOptions.customerSelectionOptions = {
                        customerSelectionHandler: this._options.customerSelectionOptions.customerSelectionHandler
                    };
                }
                Commerce.ViewModelAdapter.navigate("CustomerDetailsView", viewOptions);
            };
            SearchViewController.prototype._compareItems = function (productIds) {
                var options = {
                    productIds: productIds
                };
                Commerce.ViewModelAdapter.navigate("CompareProductsView", options);
            };
            SearchViewController.prototype._clearProductListSelection = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListViewModel)) {
                    var currentProductsListId = void 0;
                    if (!this.viewModel.viewPrePopulatedProductSearchResults()) {
                        currentProductsListId = SearchViewController._productsDataListId;
                    }
                    else {
                        currentProductsListId = SearchViewController._prePopulatedProductsDataListId;
                    }
                    var listElement = document.getElementById(currentProductsListId);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(listElement)) {
                        Commerce.RetailLogger.viewsMerchandisingSearchViewProductDataListElementNotFound(currentProductsListId);
                        return;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(listElement.dataListViewModel)) {
                        Commerce.RetailLogger.viewsMerchandisingSearchViewProductDataListViewModelNotFound(currentProductsListId);
                        return;
                    }
                    this._dataListViewModel = listElement.dataListViewModel;
                }
                this._dataListViewModel.clearAll();
            };
            SearchViewController.DELAY_IN_MILLISECONDS_ON_FOCUS = 100;
            SearchViewController._productsDataListId = "productsview";
            SearchViewController._prePopulatedProductsDataListId = "prePopulatedProductSearchResultsView";
            return SearchViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SearchViewController = SearchViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var InventoryLookupViewController = (function (_super) {
            __extends(InventoryLookupViewController, _super);
            function InventoryLookupViewController(options) {
                var _this = _super.call(this, true) || this;
                var viewModelOptions;
                if (options instanceof Commerce.Client.Entities.InventoryLookupNavigationParameters) {
                    viewModelOptions = {
                        product: options.product
                    };
                }
                else {
                    viewModelOptions = options;
                }
                _this.viewModel = new Commerce.ViewModels.InventoryLookupViewModel(viewModelOptions);
                _this.viewModel.setNumPadPublisher(_this.numPadInputBroker);
                _this.viewModel.product.subscribe(function (newProductValue) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(newProductValue)) {
                        Commerce.Interaction.triggerEvent(_this._inventoryElement, "productsByKeywordFound");
                    }
                });
                return _this;
            }
            InventoryLookupViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            InventoryLookupViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            InventoryLookupViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            InventoryLookupViewController.prototype.afterBind = function (element) {
                this._inventoryElement = element;
            };
            return InventoryLookupViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.InventoryLookupViewController = InventoryLookupViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var InventoryLookupMatrixViewController = (function (_super) {
            __extends(InventoryLookupMatrixViewController, _super);
            function InventoryLookupMatrixViewController(options) {
                var _this = _super.call(this, true) || this;
                options = options || { product: null, selectedStore: null };
                _this.viewModel = new Commerce.ViewModels.InventoryLookupMatrixViewModel(options);
                _this.viewTitle = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2639"), Commerce.ViewModelAdapter.getResourceString("string_2607"), _this.viewModel.selectedStore.OrgUnitName));
                _this.viewSubTitle = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2637"), _this.viewModel.product.ItemId, _this.viewModel.product.Name));
                _this.isMenuVisible = ko.observable(false);
                _this.menuAnchor = ko.observable(null);
                return _this;
            }
            InventoryLookupMatrixViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            InventoryLookupMatrixViewController.prototype.cellClickHandler = function (clickedItem, clickEvent) {
                this.viewModel.selectedItemAvailability = clickedItem;
                this.menuAnchor(clickEvent.currentTarget);
                this.isMenuVisible(true);
            };
            InventoryLookupMatrixViewController.prototype.getCellData = function (dimensionCombinations) {
                return this.viewModel.getItemAvailabilities(dimensionCombinations);
            };
            InventoryLookupMatrixViewController.prototype.changeStore = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._variantMatrixViewModel)) {
                    this._variantMatrixViewModel = this._getVariantMatrixViewModel();
                }
                this.viewModel.changeStoreAsync(this._variantMatrixViewModel).done(function () {
                    _this.viewTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2639"), Commerce.ViewModelAdapter.getResourceString("string_2607"), _this.viewModel.selectedStore.OrgUnitName));
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            InventoryLookupMatrixViewController.prototype._getVariantMatrixViewModel = function () {
                var variantMatrixViewModel;
                var variantMatrixElement = document.getElementById(InventoryLookupMatrixViewController.variantMatrixId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(variantMatrixElement) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(variantMatrixElement.variantMatrixViewModel)) {
                    variantMatrixViewModel = variantMatrixElement.variantMatrixViewModel;
                }
                return variantMatrixViewModel;
            };
            InventoryLookupMatrixViewController.variantMatrixId = "inventoryLookupVariantMatrix";
            return InventoryLookupMatrixViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.InventoryLookupMatrixViewController = InventoryLookupMatrixViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var InventoryAvailableToPromiseViewController = (function (_super) {
            __extends(InventoryAvailableToPromiseViewController, _super);
            function InventoryAvailableToPromiseViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.InventoryAvailableToPromiseViewModel(options);
                _this.viewModel.setNumPadPublisher(_this.numPadInputBroker);
                _this.viewModel.product.subscribe(function (newProductValue) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(newProductValue)) {
                        Commerce.Interaction.triggerEvent(_this._inventoryElement, "productsByKeywordFound");
                    }
                });
                return _this;
            }
            InventoryAvailableToPromiseViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            InventoryAvailableToPromiseViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            InventoryAvailableToPromiseViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            InventoryAvailableToPromiseViewController.prototype.afterBind = function (element) {
                this._inventoryElement = element;
            };
            return InventoryAvailableToPromiseViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.InventoryAvailableToPromiseViewController = InventoryAvailableToPromiseViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CompareProductsViewController = (function (_super) {
            __extends(CompareProductsViewController, _super);
            function CompareProductsViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.CompareProductsViewModel(options);
                return _this;
            }
            CompareProductsViewController.prototype.addProductClicked = function () {
                Commerce.navigator.navigateBack();
            };
            CompareProductsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            return CompareProductsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CompareProductsViewController = CompareProductsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SetDisassembleQuantityDialog = (function (_super) {
            __extends(SetDisassembleQuantityDialog, _super);
            function SetDisassembleQuantityDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SetDisassembleQuantityDialog";
                _this.productImageUrl = ko.observable("");
                _this.productDescription = ko.observable("");
                _this.productNumber = ko.observable("");
                _this.itemQuantity = ko.observable("1");
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_5364"));
                _this.isOKButtonDisabled = ko.computed(function () {
                    var quantity = Commerce.NumberExtensions.parseNumber(_this.itemQuantity());
                    return isNaN(quantity) || quantity <= 0;
                });
                return _this;
            }
            SetDisassembleQuantityDialog.prototype.onShowing = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.product)) {
                    this.cancelDialog();
                    return;
                }
                this.indeterminateWaitVisible(false);
                this.productImageUrl(dialogState.productImage.source);
                this.productDescription(dialogState.product.Name);
                this.productNumber(dialogState.product.ItemId);
                this.itemQuantity(Commerce.NumberExtensions.formatNumber(dialogState.originalQuantity, 0));
                this.visible(true);
            };
            SetDisassembleQuantityDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this.isOKButtonDisabled()) {
                    this.setItemDisassembleQuantityInvokedHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            SetDisassembleQuantityDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SetDisassembleQuantityDialog.prototype.setItemDisassembleQuantityInvokedHandler = function (operationId) {
                if (operationId === Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK) {
                    var quantity = Commerce.NumberExtensions.parseNumber(this.itemQuantity());
                    if (quantity <= 0) {
                        Commerce.ViewModelAdapter.displayMessage("string_3384", Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, "string_3383");
                    }
                    else {
                        this.dialogResult.resolve(Commerce.DialogResult.OK, quantity);
                    }
                }
                else {
                    this.cancelDialog();
                }
            };
            SetDisassembleQuantityDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SetDisassembleQuantityDialog;
        }(Controls.ModalDialog));
        Controls.SetDisassembleQuantityDialog = SetDisassembleQuantityDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var KitComponentSubstitutesViewController = (function (_super) {
            __extends(KitComponentSubstitutesViewController, _super);
            function KitComponentSubstitutesViewController(options) {
                var _this = _super.call(this, false) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options passed to the KitComponentSubstitutesView constructor: options cannot be null or undefined.";
                }
                _this.viewModel = new Commerce.ViewModels.KitComponentSubstitutesViewModel(options);
                _this.viewTitle = Commerce.ViewModelAdapter.getResourceString("string_919");
                _this._cancelSelectionOnHidden = true;
                return _this;
            }
            KitComponentSubstitutesViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            KitComponentSubstitutesViewController.prototype.onHidden = function () {
                if (this._cancelSelectionOnHidden) {
                    this.viewModel.cancelSubstituteSelection();
                }
            };
            KitComponentSubstitutesViewController.prototype.onNavigateBack = function () {
                this._cancelSelectionOnHidden = false;
                this.viewModel.reselectCurrentComponent();
                return true;
            };
            return KitComponentSubstitutesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.KitComponentSubstitutesViewController = KitComponentSubstitutesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var KitDisassemblyViewController = (function (_super) {
            __extends(KitDisassemblyViewController, _super);
            function KitDisassemblyViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._showNumPad = Commerce.ObjectExtensions.isNullOrUndefined(options);
                _this.viewModel = new Commerce.ViewModels.KitDisassemblyViewModel(options);
                _this._setDisassembleQuantityDialog = new Commerce.Controls.SetDisassembleQuantityDialog();
                return _this;
            }
            KitDisassemblyViewController.prototype.load = function () {
                this.viewModel.loadAsync()
                    .fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            KitDisassemblyViewController.prototype.onShown = function () {
                if (this._showNumPad) {
                    this.viewModel.performProductSearch();
                }
            };
            KitDisassemblyViewController.prototype.setKitQuantityToDisassemble = function () {
                var _this = this;
                var state = {
                    product: this.viewModel.kitProduct(),
                    productImage: this.viewModel.productImage(),
                    originalQuantity: this.viewModel.kitQuantity()
                };
                this._setDisassembleQuantityDialog.show(state)
                    .on(Commerce.DialogResult.OK, function (result) {
                    _this.viewModel.setQuantityToDisassemble(result);
                }).onError(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return KitDisassemblyViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.KitDisassemblyViewController = KitDisassemblyViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var DataList;
        (function (DataList) {
            function triggerInteractionEvent(element, event) {
                var eventName;
                switch (event) {
                    case DataList.InteractionEvents.RowClicked:
                        eventName = Commerce.InteractionEvents.ROWCLICKEDEVENT;
                        break;
                    case DataList.InteractionEvents.RowSelected:
                        eventName = Commerce.InteractionEvents.ROWSELECTEDEVENT;
                        break;
                    default:
                        throw "Commerce.Controls.DataList.triggerInteractionEvent: Unsupported event type.";
                }
                Commerce.Interaction.triggerEvent(element, eventName);
            }
            DataList.triggerInteractionEvent = triggerInteractionEvent;
        })(DataList = Controls.DataList || (Controls.DataList = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
Commerce.Controls.DataList.DataListBindingHandler.setTriggerEventMethod(Commerce.Controls.DataList.triggerInteractionEvent);
ko.bindingHandlers.dataList = new Commerce.Controls.DataList.DataListBindingHandler();
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var PickingAndReceivingDetailsViewController = (function (_super) {
            __extends(PickingAndReceivingDetailsViewController, _super);
            function PickingAndReceivingDetailsViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.PickingAndReceivingDetailsViewModel(options);
                _this.viewModel.setNumPadPublisher(_this.numPadInputBroker);
                _this.viewModel.setProductFoundCallback(function () {
                    _this._productFound();
                });
                _this.viewModel.setClearSelectionCallback(function () {
                    _this._clearSelection();
                });
                return _this;
            }
            PickingAndReceivingDetailsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            PickingAndReceivingDetailsViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            PickingAndReceivingDetailsViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            PickingAndReceivingDetailsViewController.prototype.afterBind = function (element) {
                this._pickingReceivingElement = element;
            };
            PickingAndReceivingDetailsViewController.prototype._productFound = function () {
                Commerce.Interaction.triggerEvent(this._pickingReceivingElement, "ProductByKeywordFound");
            };
            PickingAndReceivingDetailsViewController.prototype._clearSelection = function () {
                document.getElementById(PickingAndReceivingDetailsViewController.LIST_VIEW_CONTAINER_NAME).dataListViewModel.clearAll();
            };
            PickingAndReceivingDetailsViewController.LIST_VIEW_CONTAINER_NAME = "listviewContainer";
            return PickingAndReceivingDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.PickingAndReceivingDetailsViewController = PickingAndReceivingDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Bing;
        (function (Bing) {
            var MapMethods = (function () {
                function MapMethods() {
                }
                MapMethods.DEFAULT_ZOOM_LEVEL = 13;
                MapMethods.SHOW_ALL_ZOOM_LEVEL = 8;
                MapMethods.PIN_LOCATION = "pinLocation";
                MapMethods.SET_MAP_VIEW = "setMapView";
                MapMethods.INIT = "init";
                MapMethods.SEARCH_BY_ADDRESS = "searchByAddress";
                MapMethods.REMOVE_PUSHPINS = "removeAllPushpins";
                MapMethods.ADD_INFOBOX = "setInfobox";
                MapMethods.REMOVE_INFOBOX = "removeInfobox";
                MapMethods.APPLY_THEME = "applyCSSTheme";
                MapMethods.APPLY_ACCENT_COLOR = "applyAccentColor";
                MapMethods.APPLY_TEXT_DIRECTION = "applyTextDirection";
                MapMethods.INITIALIZE_THEME_ELEMENT_IDS = "initializeThemeElementIds";
                return MapMethods;
            }());
            Bing.MapMethods = MapMethods;
            var MapEvents = (function () {
                function MapEvents() {
                }
                MapEvents.ERROR = "error";
                MapEvents.INFOBOX_HYPERLINK_CLICKED = "infoboxHyperlinkClicked";
                MapEvents.INITIALIZATION_ERROR = "initialization_error";
                MapEvents.LOADED = "loaded";
                MapEvents.READY = "ready";
                MapEvents.SEARCH_SUCCESS = "searchSuccess";
                MapEvents.UPDATE_LOCATIONS = "updateLocations";
                return MapEvents;
            }());
            Bing.MapEvents = MapEvents;
            var MapController = (function () {
                function MapController(content, map, eventHandlers) {
                    var _this = this;
                    this._cssSettingsInitialized = false;
                    this._currentMessageEventListener = null;
                    this._map = map;
                    this._eventHandlers = eventHandlers;
                    this._content = content;
                    if (MapController._accentColorSubscription) {
                        MapController._accentColorSubscription.dispose();
                    }
                    MapController._accentColorSubscription = Commerce.CSSHelpers.accentColor.subscribe(function (newAccentColor) {
                        _this._postMessage(MapMethods.APPLY_ACCENT_COLOR, [newAccentColor]);
                    }, this);
                    if (MapController._themeSubscription) {
                        MapController._themeSubscription.dispose();
                    }
                    MapController._themeSubscription = Commerce.CSSHelpers.currentThemeLoaded.subscribe(function (newTheme) {
                        _this._postMessage(MapMethods.APPLY_THEME, [newTheme]);
                    }, this);
                    if (MapController._textDirectionSubscription) {
                        MapController._textDirectionSubscription.dispose();
                    }
                    MapController._textDirectionSubscription = Commerce.CSSHelpers.currentTextDir.subscribe(function (newTextDirection) {
                        _this._postMessage(MapMethods.APPLY_TEXT_DIRECTION, [newTextDirection]);
                    }, this);
                }
                MapController.createBingMapsElement = function (parentElementId, elementId, cssClass, dataBind) {
                    var iFrame = $("<iframe>").attr("id", elementId);
                    iFrame.attr("src", Commerce.UrlHelper.getWebCompartmentUrl(document, "Controls/Bing.Maps/map.html"));
                    iFrame.attr("sandbox", "allow-scripts allow-same-origin allow-forms");
                    if (!Commerce.StringExtensions.isNullOrWhitespace(cssClass)) {
                        iFrame.attr("class", cssClass);
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(dataBind)) {
                        iFrame.attr("data-bind", dataBind);
                    }
                    iFrame.appendTo("#" + parentElementId);
                    return document.getElementById(elementId);
                };
                MapController.prototype.addMessageEventListener = function (listener) {
                    this._removeCurrentEventListener();
                    this._currentMessageEventListener = listener;
                    window.addEventListener(MapController.LISTENER_TYPE, listener, false);
                };
                MapController.prototype.processMessage = function (msg) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(msg) || Commerce.ObjectExtensions.isNullOrUndefined(msg.data)) {
                        return;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._map)) {
                        return;
                    }
                    if (msg.source !== this._map.contentWindow) {
                        return;
                    }
                    var call = JSON.parse(msg.data);
                    if (this._eventHandlers.hasItem(call.event)) {
                        this._eventHandlers.getItem(call.event).call(this._content, call);
                    }
                    switch (call.event) {
                        case MapEvents.LOADED:
                            if (!this._cssSettingsInitialized) {
                                this._postMessage(MapMethods.INITIALIZE_THEME_ELEMENT_IDS, [Commerce.CSSHelpers.posLightThemeElementId,
                                    Commerce.CSSHelpers.posDarkThemeElementId, Commerce.CSSHelpers.winUILightThemeElementId, Commerce.CSSHelpers.winUIDarkThemeElementId]);
                                this._initializeCSSSettings();
                            }
                            break;
                        case MapEvents.READY:
                            this._loadMap();
                            break;
                    }
                };
                MapController.prototype.hasApiKey = function () {
                    return !(Commerce.StringExtensions.isEmptyOrWhitespace(Commerce.ApplicationContext.Instance.channelConfiguration.BingMapsApiKey));
                };
                MapController.prototype.addMapPin = function (latitude, longitude, pinText) {
                    this._postMessage(MapMethods.PIN_LOCATION, [latitude, longitude, pinText]);
                };
                MapController.prototype.setMapView = function (location) {
                    this._postMessage(MapMethods.SET_MAP_VIEW, [location != null ? location.Latitude : null,
                        location != null ? location.Longitude : null,
                        MapMethods.DEFAULT_ZOOM_LEVEL]);
                };
                MapController.prototype.searchByAddress = function (address) {
                    this._postMessage(MapMethods.SEARCH_BY_ADDRESS, [address]);
                };
                MapController.prototype.removePushpins = function () {
                    this._postMessage(MapMethods.REMOVE_PUSHPINS, []);
                };
                MapController.prototype.addInfoBox = function (latitude, longitude, title, text, hyperlinkId) {
                    this._postMessage(MapMethods.ADD_INFOBOX, [latitude, longitude, hyperlinkId, title, text]);
                };
                MapController.prototype.removeInfobox = function () {
                    this._postMessage(MapMethods.REMOVE_INFOBOX, []);
                };
                MapController.prototype.addStoreInfobox = function (storeWrapper, showDetailsUrl) {
                    var textContent = Commerce.StringExtensions.EMPTY;
                    var closeButtonId = "infobox-close";
                    textContent += "<div id='" + closeButtonId + "' class='h4 closeButton primaryFontColor iconCancel'></div>";
                    textContent += "<div class='row'>";
                    textContent += "<div>";
                    textContent += "<div class='h3 ellipsis primaryFontColor'>" + storeWrapper.store.OrgUnitName + "</div>";
                    textContent += "<div class='h4 primaryFontColor'>" + storeWrapper.store.OrgUnitNumber + "</div>";
                    textContent += "</div>";
                    textContent += "</div>";
                    textContent += "<div class='h4 ellipsis secondaryFontColor'>" +
                        Commerce.AddressHelper.getFormattedAddress(storeWrapper.orgUnit.OrgUnitAddress, true) + "</div>";
                    this.addInfoBox(storeWrapper.store.Latitude, storeWrapper.store.Longitude, Commerce.StringExtensions.EMPTY, textContent, closeButtonId);
                };
                MapController.prototype.dispose = function () {
                    this._map = null;
                    this._content = null;
                    this._eventHandlers.clear();
                    this._removeCurrentEventListener();
                };
                MapController.prototype._removeCurrentEventListener = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._currentMessageEventListener)) {
                        window.removeEventListener(MapController.LISTENER_TYPE, this._currentMessageEventListener, false);
                        this._currentMessageEventListener = null;
                    }
                };
                MapController.prototype._postMessage = function (functionName, args) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._map) || Commerce.ObjectExtensions.isNullOrUndefined(this._map.contentWindow)) {
                        return;
                    }
                    this._map.contentWindow.postMessage(JSON.stringify({
                        functionName: functionName,
                        args: args
                    }), "*");
                };
                MapController.prototype._initializeCSSSettings = function () {
                    this._postMessage(MapMethods.APPLY_ACCENT_COLOR, [Commerce.CSSHelpers.accentColor()]);
                    this._postMessage(MapMethods.APPLY_TEXT_DIRECTION, [Commerce.CSSHelpers.currentTextDir()]);
                    this._postMessage(MapMethods.APPLY_THEME, [Commerce.CSSHelpers.currentThemeLoaded()]);
                    this._cssSettingsInitialized = true;
                };
                MapController.prototype._loadMap = function () {
                    if (!this.hasApiKey()) {
                        Commerce.NotificationHandler.displayErrorMessage("string_29013");
                        return;
                    }
                    this._postMessage(MapMethods.INIT, [Commerce.ApplicationContext.Instance.channelConfiguration.BingMapsApiKey]);
                };
                MapController.LISTENER_TYPE = "message";
                MapController._accentColorSubscription = null;
                MapController._themeSubscription = null;
                MapController._textDirectionSubscription = null;
                return MapController;
            }());
            Bing.MapController = MapController;
        })(Bing = Controls.Bing || (Controls.Bing = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var PickUpInStoreViewController = (function (_super) {
            __extends(PickUpInStoreViewController, _super);
            function PickUpInStoreViewController(options) {
                var _this = _super.call(this, false) || this;
                _this.viewModel = new Commerce.ViewModels.PickUpInStoreViewModel(options);
                return _this;
            }
            PickUpInStoreViewController.prototype.load = function () {
                var map = new Commerce.NullMapController();
                if (this.viewModel.showMap()) {
                    map = this._createBingMapController();
                }
                this.viewModel.load(map);
            };
            PickUpInStoreViewController.prototype.unload = function () {
                this.viewModel.unload();
                _super.prototype.unload.call(this);
            };
            PickUpInStoreViewController.prototype.onNavigateBack = function () {
                this.viewModel.onNavigateBack();
                return true;
            };
            PickUpInStoreViewController.prototype._createBingMapController = function () {
                var _this = this;
                var mapElementId = "pickupInStoreMap";
                var mapElement = document.getElementById(mapElementId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(mapElement)) {
                    mapElement.parentElement.removeChild(mapElement);
                }
                mapElement = Commerce.Controls.Bing.MapController.createBingMapsElement("pickupInStoreMapContent", mapElementId, "grow positionRelative", "resx: { ariaLabel: 'string_2552' }");
                var mapHandlers = new Commerce.Dictionary();
                mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.LOADED, function () { return _this.viewModel.onMapLoaded(); });
                mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.ERROR, function (data) { return _this.viewModel.mapError(data); });
                mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.SEARCH_SUCCESS, function (data) { return _this.viewModel.mapSearchSuccessAsync(data); });
                mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.UPDATE_LOCATIONS, function (data) { return _this.viewModel.updateLocationsAsync(data); });
                mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.INITIALIZATION_ERROR, function (data) { return _this.viewModel.mapInitializationErrorAsync(data); });
                mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.INFOBOX_HYPERLINK_CLICKED, function (data) {
                    var storeDetailsOptions = {
                        storeId: data.elementId
                    };
                    Commerce.ViewModelAdapter.navigate("StoreDetailsView", storeDetailsOptions);
                });
                return new Commerce.Controls.Bing.MapController(this.viewModel, mapElement, mapHandlers);
            };
            return PickUpInStoreViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.PickUpInStoreViewController = PickUpInStoreViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var PriceCheckViewController = (function (_super) {
            __extends(PriceCheckViewController, _super);
            function PriceCheckViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.PriceCheckViewModel(options);
                return _this;
            }
            PriceCheckViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            PriceCheckViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            PriceCheckViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            return PriceCheckViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.PriceCheckViewController = PriceCheckViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ProductsViewController = (function (_super) {
            __extends(ProductsViewController, _super);
            function ProductsViewController(options) {
                var _this = _super.call(this, true) || this;
                options = options || {
                    activeMode: Commerce.ViewModels.ProductsViewModelActiveMode.Categories,
                    category: undefined,
                    categoryId: 0,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.category) && !Commerce.NumberExtensions.isNullOrZero(options.categoryId)) {
                    options.category = Commerce.ArrayExtensions.firstOrUndefined(Commerce.Session.instance.CurrentCategoryList, function (category) {
                        return category.RecordId === options.categoryId;
                    });
                }
                var viewTitle = Commerce.StringExtensions.EMPTY;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.category)) {
                    viewTitle = Commerce.Formatters.CategoryNameTranslator(options.category);
                }
                else {
                    Commerce.RetailLogger.viewsMerchandisingCategoryForCatalogViewTitleNotFound(options.categoryId);
                }
                _this.viewTitle = ko.observable(viewTitle);
                var viewModelOptions = {
                    activeMode: options.activeMode,
                    categoryId: options.categoryId,
                    category: options.category,
                    showProductDetailsHandler: _this.showProductDetails.bind(_this),
                    showProductsForCategoryHandler: _this.showProductsForCategory.bind(_this),
                    compareItemsHandler: _this._compareItems.bind(_this),
                    showCartHandler: _this._showCart.bind(_this),
                    correlationId: options.correlationId
                };
                _this.viewModel = new Commerce.ViewModels.ProductsViewModel(viewModelOptions);
                return _this;
            }
            ProductsViewController.prototype.onCreated = function (element) {
                var _this = this;
                _super.prototype.onCreated.call(this, element);
                this._clearListSelectionTrigger = this.viewModel.clearProductSelection.subscribe(function (newValue) {
                    if (newValue) {
                        _this._clearProductListSelection();
                    }
                });
            };
            ProductsViewController.prototype.onHidden = function () {
                this._clearListSelectionTrigger.dispose();
            };
            ProductsViewController.prototype.showRefinerDialog = function () {
                this.viewModel.filterProducts();
            };
            ProductsViewController.prototype.showProductDetails = function (product) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                    var simpleProductDetailsViewModelOptions = {
                        productId: product.RecordId,
                        product: undefined,
                        isSelectionMode: false,
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                    Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                }
            };
            ProductsViewController.prototype.showProductsForCategory = function (activeMode, category) {
                var options = {
                    category: category,
                    activeMode: Commerce.ViewModels.ProductsViewModelActiveMode.Products,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("ProductsView", options);
            };
            ProductsViewController.prototype._compareItems = function (categoryName, productIds) {
                var options = { productIds: productIds };
                Commerce.ViewModelAdapter.navigate("CompareProductsView", options);
            };
            ProductsViewController.prototype._showCart = function () {
                Commerce.ViewModelAdapter.navigate("CartView");
            };
            ProductsViewController.prototype._clearProductListSelection = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListViewModel)) {
                    var listElement = document.getElementById(ProductsViewController._productsDataListId);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(listElement)) {
                        Commerce.RetailLogger.viewsMerchandisingProductsViewDataListElementNotFound(ProductsViewController._productsDataListId);
                        return;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(listElement.dataListViewModel)) {
                        Commerce.RetailLogger.viewsMerchandisingProductsViewDataListViewModelNotFound(ProductsViewController._productsDataListId);
                        return;
                    }
                    this._dataListViewModel = listElement.dataListViewModel;
                }
                this._dataListViewModel.clearAll();
            };
            ProductsViewController._productsDataListId = "productsViewList";
            return ProductsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ProductsViewController = ProductsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ReturnMultipleTransactionDialog = (function (_super) {
            __extends(ReturnMultipleTransactionDialog, _super);
            function ReturnMultipleTransactionDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "ReturnMultipleTransactionDialog";
                _this._multipleTransactionStoreNames = ko.observableArray([]);
                _this._multipleTransactionRegisterNumbers = ko.observableArray([]);
                _this._multipleTransactionStore = ko.observable(null);
                _this._multipleTransactionRegister = ko.observable(null);
                _this._isOKButtonDisabled = ko.observable(true);
                _this._multipleTransactionRegisterNumberDisabled = ko.observable(true);
                _this._multipleTransactionStoreNameFocus = ko.observable(false);
                _this._multipleTransactionRegisterNumberFocus = ko.observable(false);
                _this._multipleTransactionStore.subscribe(function (newValue) {
                    if (newValue === undefined) {
                        _this._multipleTransactionRegisterNumberDisabled(true);
                        _this._isOKButtonDisabled(true);
                        _this._multipleTransactionRegisterNumbers([]);
                    }
                    else {
                        _this._multipleTransactionRegisterNumbers(newValue);
                        _this._multipleTransactionRegisterNumberDisabled(false);
                        _this._multipleTransactionRegisterNumberFocus(true);
                    }
                }, _this);
                _this._multipleTransactionRegister.subscribe(function (newValue) {
                    _this._isOKButtonDisabled(newValue === undefined);
                    if (newValue === undefined) {
                        _this._selectedSalesOrder = null;
                    }
                    else {
                        _this._selectedSalesOrder = newValue;
                    }
                }, _this);
                return _this;
            }
            ReturnMultipleTransactionDialog.prototype.returnMultipleTransactionDialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.transactionSelected();
                        break;
                }
            };
            ReturnMultipleTransactionDialog.prototype.onShowing = function (dialogState) {
                var storeList = dialogState.storeList;
                if (Commerce.ObjectExtensions.isNullOrUndefined(storeList) || (storeList.length === 0)) {
                    this.cancelDialog();
                    return;
                }
                this._multipleTransactionStoreNames(storeList);
                this._multipleTransactionRegisterNumberDisabled(true);
                this._isOKButtonDisabled(true);
                this._multipleTransactionStoreNameFocus(true);
                this.visible(true);
            };
            ReturnMultipleTransactionDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            ReturnMultipleTransactionDialog.prototype.transactionSelected = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { salesOrder: this._selectedSalesOrder });
            };
            return ReturnMultipleTransactionDialog;
        }(Controls.ModalDialog));
        Controls.ReturnMultipleTransactionDialog = ReturnMultipleTransactionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ReturnTransactionViewController = (function (_super) {
            __extends(ReturnTransactionViewController, _super);
            function ReturnTransactionViewController(options) {
                var _this = _super.call(this, true) || this;
                var viewModelOptions = {
                    orderSelectionHandler: _this._selectTransactionForReturn.bind(_this),
                    salesLineSelectionHandler: _this._selectSalesLines.bind(_this)
                };
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.salesOrderToReturn)) {
                        viewModelOptions.salesOrder = options.salesOrderToReturn;
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.processing)) {
                        viewModelOptions.processing = options.processing;
                    }
                }
                _this.viewModel = new Commerce.ViewModels.ReturnTransactionViewModel(viewModelOptions);
                _this._onReturnSalesOrderSalesLines = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this._onReturnSalesOrderSalesLines = options.onReturnSalesOrderSalesLines;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.processing)) {
                        options.processing.subscribe(function (newValue) {
                            if (newValue) {
                                _this._disablePageEventsAsync();
                            }
                            else {
                                _this._enablePageEventsAsync();
                            }
                        });
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.salesOrderToReturn)) {
                        _this.viewTitle = Commerce.ViewModelAdapter.getResourceString("string_1205");
                    }
                    else {
                        var titleFormatString = Commerce.ViewModelAdapter.getResourceString("string_1251");
                        _this.viewTitle = Commerce.StringExtensions.format(titleFormatString, options.salesOrderToReturn.ReceiptId);
                    }
                }
                if (Commerce.Config.isPhone) {
                    _this.salesLineColumns = [
                        { titleResx: "string_110", cssClass: "ratio6", field: "productName" },
                        { titleResx: "string_111", cssClass: "ratio2 textRight", field: "Quantity" },
                        {
                            titleResx: "string_1238", cssClass: "ratio2 textRight", field: "NetAmountWithAllInclusiveTax",
                            converter: "Commerce.Core.Converter.PriceFormatter"
                        }
                    ];
                }
                else {
                    _this.salesLineColumns = [
                        { titleResx: "string_4446", cssClass: "ratio1", field: "ItemId" },
                        { titleResx: "string_110", cssClass: "ratio5", field: "productName" },
                        { titleResx: "string_111", cssClass: "ratio2 textRight", field: "Quantity" },
                        {
                            titleResx: "string_1238", cssClass: "ratio2 textRight", field: "NetAmountWithAllInclusiveTax",
                            converter: "Commerce.Core.Converter.PriceFormatter"
                        }
                    ];
                }
                return _this;
            }
            ReturnTransactionViewController.prototype.onShown = function () {
                this._enablePageEventsAsync();
            };
            ReturnTransactionViewController.prototype.onHidden = function () {
                this._disablePageEventsAsync();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onReturnSalesOrderSalesLines)) {
                    this._onReturnSalesOrderSalesLines.resolve(null);
                }
            };
            ReturnTransactionViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            ReturnTransactionViewController.prototype.salesOrderLineListSelectionChangedEventHandler = function (items) {
                this.viewModel.selectedSalesLines(items);
            };
            ReturnTransactionViewController.prototype.returnSalesOrderLines = function (eventInfo) {
                if (this._onReturnSalesOrderSalesLines) {
                    var returnTransactionReturnLineData = {
                        salesOrder: this.viewModel.selectedSalesOrder(),
                        salesLines: this.viewModel.selectedSalesLines() || []
                    };
                    this._onReturnSalesOrderSalesLines.resolve(returnTransactionReturnLineData);
                }
            };
            ReturnTransactionViewController.prototype.selectAll = function () {
                this._getListViewViewModel().selectAllItems();
            };
            ReturnTransactionViewController.prototype.deselectAll = function () {
                this._getListViewViewModel().unselectAllItems();
            };
            ReturnTransactionViewController.prototype._selectSalesLines = function (salesLines) {
                this._getListViewViewModel().selectItems(salesLines);
            };
            ReturnTransactionViewController.prototype._disablePageEventsAsync = function () {
                return Commerce.Peripherals.instance.barcodeScanner.disableAsync();
            };
            ReturnTransactionViewController.prototype._enablePageEventsAsync = function () {
                var _this = this;
                return Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.viewModel.processBarcodeScanAsync(barcode);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsReturnTransactionViewEnableBarcodeScannerFailed();
                });
            };
            ReturnTransactionViewController.prototype._selectTransactionForReturn = function (stores) {
                var _this = this;
                this._disablePageEventsAsync();
                var asyncResult = new Commerce.AsyncResult();
                asyncResult.always(function () {
                    _this._enablePageEventsAsync();
                });
                var returnMultipleTransactionDialog = new Commerce.Controls.ReturnMultipleTransactionDialog();
                returnMultipleTransactionDialog.show({ storeList: stores })
                    .on(Commerce.DialogResult.OK, function (result) {
                    asyncResult.resolve({ canceled: false, data: result.salesOrder });
                })
                    .on(Commerce.DialogResult.Cancel, function (result) {
                    asyncResult.resolve({ canceled: true, data: undefined });
                })
                    .onError(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            ReturnTransactionViewController.prototype._getListViewViewModel = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._listViewViewModel)) {
                    this._listViewViewModel = document.getElementById("salesOrderLinesView").listViewViewModel;
                }
                return this._listViewViewModel;
            };
            return ReturnTransactionViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ReturnTransactionViewController = ReturnTransactionViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SearchPickingAndReceivingViewController = (function (_super) {
            __extends(SearchPickingAndReceivingViewController, _super);
            function SearchPickingAndReceivingViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.searchViewModel = new Commerce.ViewModels.SearchPickingAndReceivingViewModel(options);
                _this.editPurchaseTransferOrderDisabled = ko.observable(true);
                _this._getPurchaseTransferOrders();
                _this._searchText = Commerce.StringExtensions.EMPTY;
                _this.disableEditOrderButton = ko.observable(true);
                return _this;
            }
            SearchPickingAndReceivingViewController.prototype.searchPurchaseTransferOrders = function (searchText) {
                this.searchViewModel.searchPurchaseTransferOrders(searchText);
                return Commerce.AsyncResult.createResolved();
            };
            SearchPickingAndReceivingViewController.prototype.purchaseTransferOrderSelectionChanged = function (items) {
                this.editPurchaseTransferOrderDisabled(items.length !== 1);
                if (Commerce.ArrayExtensions.hasElements(items) && !Commerce.ObjectExtensions.isNullOrUndefined(items[0])) {
                    this.searchViewModel.selectedPurchaseTransferOrder(items[0]);
                    var order = this.searchViewModel.selectedPurchaseTransferOrder();
                    this.disableEditOrderButton((order.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) &&
                        (order.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) &&
                        (order.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOrder) ||
                        (order.status !== Commerce.ViewModels.TransferOrderDetailsViewModel.DRAFT_STATUS));
                    this.editPurchaseTransferOrderDisabled(order.status === Commerce.ViewModels.TransferOrderDetailsViewModel.DRAFT_STATUS);
                }
                else {
                    this.disableEditOrderButton(true);
                    this.searchViewModel.selectedPurchaseTransferOrder(null);
                }
            };
            SearchPickingAndReceivingViewController.prototype.editPurchaseTransferOrder = function () {
                var parameters = {
                    JournalId: this.searchViewModel.selectedPurchaseTransferOrder().orderId,
                    JournalType: this.searchViewModel.selectedPurchaseTransferOrder().orderType,
                    IsAdvancedWarehousingEnabled: this.searchViewModel.isAdvancedWarehousingEnabled()
                };
                Commerce.ViewModelAdapter.navigate("PickingAndReceivingDetailsView", parameters);
            };
            SearchPickingAndReceivingViewController.prototype.editOrderClickHandler = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.searchViewModel.selectedPurchaseTransferOrder())) {
                    if (this.searchViewModel.selectedPurchaseTransferOrder().orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn ||
                        this.searchViewModel.selectedPurchaseTransferOrder().orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut ||
                        this.searchViewModel.selectedPurchaseTransferOrder().orderType === Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOrder) {
                        var parameters = {
                            TransferId: this.searchViewModel.selectedPurchaseTransferOrder().orderId
                        };
                        Commerce.ViewModelAdapter.navigate("TransferOrderDetailsView", parameters);
                    }
                }
            };
            SearchPickingAndReceivingViewController.prototype.deleteOrderClickHandler = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.searchViewModel.selectedPurchaseTransferOrder())) {
                    this.searchViewModel.isBusyUntil(this.searchViewModel.deleteTransferOrderAsync(this.searchViewModel.selectedPurchaseTransferOrder()))
                        .done(function () {
                        var selectedIndex = _this.searchViewModel.purchaseTransferOrders().indexOf(_this.searchViewModel.selectedPurchaseTransferOrder());
                        _this.searchViewModel.purchaseTransferOrders().splice(selectedIndex, 1);
                        _this.searchViewModel.purchaseTransferOrders((_this.searchViewModel.purchaseTransferOrders()));
                    })
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
            };
            SearchPickingAndReceivingViewController.prototype.performSearchPickingAndReceivingOrder = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetSearchTextActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_3700"),
                        subTitle: Commerce.StringExtensions.EMPTY,
                        searchText: _this._searchText,
                        inputLabel: Commerce.ViewModelAdapter.getResourceString("string_3713")
                    });
                    activity.responseHandler = function (response) {
                        _this._searchText = response.searchText;
                        return asyncQueue.cancelOn(_this.searchPurchaseTransferOrders(response.searchText));
                    };
                    return activity.execute().done(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            asyncQueue.cancel();
                            return;
                        }
                    });
                });
                return this.searchViewModel.isBusyUntil(asyncQueue.run());
            };
            SearchPickingAndReceivingViewController.prototype.createInboundTransferOrder = function () {
                var orderType = Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn;
                this.searchViewModel.isBusyUntil(this.searchViewModel.createTransferOrder(orderType))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewController.prototype.createOutboundTransferOrder = function () {
                var orderType = Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut;
                this.searchViewModel.isBusyUntil(this.searchViewModel.createTransferOrder(orderType))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchPickingAndReceivingViewController.prototype._getPurchaseTransferOrders = function () {
                this.searchViewModel.isBusyUntil(this.searchViewModel.getPurchaseTransferOrders())
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return SearchPickingAndReceivingViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SearchPickingAndReceivingViewController = SearchPickingAndReceivingViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SearchStockCountViewController = (function (_super) {
            __extends(SearchStockCountViewController, _super);
            function SearchStockCountViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.searchViewModel = new Commerce.ViewModels.SearchStockCountViewModel();
                _this.deleteJournalsDisabled = ko.observable(true);
                _this.editJournalDisabled = ko.observable(true);
                _this.createJournalDisabled = ko.observable(false);
                return _this;
            }
            SearchStockCountViewController.prototype.load = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.searchViewModel.load()
                    .always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            SearchStockCountViewController.prototype.getJournals = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.searchViewModel.getStockCountJournals()
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                })
                    .fail(function (errors) {
                    _this.indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchStockCountViewController.prototype.deleteJournals = function () {
                var _this = this;
                this.searchViewModel.selectedJournals = this._selectedJournals;
                this.indeterminateWaitVisible(true);
                this.searchViewModel.deleteJournals()
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                    _this.getJournals();
                }).fail(function (errors) {
                    _this.indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SearchStockCountViewController.prototype.createJournal = function () {
                var parameters = {
                    IsAdvancedWarehousingEnabled: this.searchViewModel.isAdvancedWarehousingEnabled()
                };
                Commerce.ViewModelAdapter.navigate("StockCountDetailsView", parameters);
            };
            SearchStockCountViewController.prototype.editJournal = function () {
                var parameters = {
                    JournalId: this._selectedJournals[0].JournalId,
                    IsAdvancedWarehousingEnabled: this.searchViewModel.isAdvancedWarehousingEnabled()
                };
                Commerce.ViewModelAdapter.navigate("StockCountDetailsView", parameters);
            };
            SearchStockCountViewController.prototype.syncAllJournals = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.searchViewModel.syncAllJournals()
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this.indeterminateWaitVisible(false);
                });
            };
            SearchStockCountViewController.prototype.stockCountListSelectionChanged = function (items) {
                this._selectedJournals = items;
                var numJournalsSelected = items.length;
                this.deleteJournalsDisabled(numJournalsSelected < 1);
                this.editJournalDisabled(numJournalsSelected !== 1);
            };
            return SearchStockCountViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SearchStockCountViewController = SearchStockCountViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ExtensionPropertiesControl = (function (_super) {
            __extends(ExtensionPropertiesControl, _super);
            function ExtensionPropertiesControl(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "ExtensionPropertiesControl";
                options = options || { data: undefined, extensionVisible: null };
                _this._data = ko.observable(options.data);
                _this._flattenedData = ko.computed(function () {
                    var propertyKeyValueType = Commerce.ExtensibilityHelper.flatten(_this._data());
                    if (propertyKeyValueType.length > 0 && !Commerce.ObjectExtensions.isNullOrUndefined(options.extensionVisible)) {
                        options.extensionVisible(true);
                    }
                    return propertyKeyValueType;
                });
                return _this;
            }
            Object.defineProperty(ExtensionPropertiesControl.prototype, "data", {
                get: function () {
                    return this._data;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ExtensionPropertiesControl.prototype, "flattenedData", {
                get: function () {
                    return this._flattenedData;
                },
                enumerable: true,
                configurable: true
            });
            return ExtensionPropertiesControl;
        }(Controls.UserControl));
        Controls.ExtensionPropertiesControl = ExtensionPropertiesControl;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SimpleProductDetailsViewController = (function (_super) {
            __extends(SimpleProductDetailsViewController, _super);
            function SimpleProductDetailsViewController(options) {
                var _this = _super.call(this, true) || this;
                var simpleProductDetailsOptions;
                if (options instanceof Commerce.Client.Entities.SimpleProductDetailsNavigationParameters) {
                    simpleProductDetailsOptions = {
                        productId: options.productId,
                        product: undefined,
                        isSelectionMode: false,
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                }
                else {
                    simpleProductDetailsOptions = options;
                }
                Commerce.RetailLogger.viewsMerchandisingProductDetailsLoadStarted();
                _this.viewTitle = Commerce.ViewModelAdapter.getResourceString("string_919");
                var viewModelOptions = {
                    productId: simpleProductDetailsOptions.productId,
                    product: simpleProductDetailsOptions.product,
                    isSelectionMode: simpleProductDetailsOptions.isSelectionMode,
                    selectionOptions: simpleProductDetailsOptions.selectionOptions,
                    addToCartOptions: simpleProductDetailsOptions.addToCartOptions,
                    expandImageHandler: function (images) {
                        _this._navigateToRichMediaView(images);
                    },
                    channelId: simpleProductDetailsOptions.channelId,
                    correlationId: simpleProductDetailsOptions.correlationId
                };
                _this._isFirstTimeViewIsShown = true;
                _this._pageLoadCorrelationId = Commerce.LoggerHelper.getFormattedCorrelationId(simpleProductDetailsOptions);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(viewModelOptions.addToCartOptions)) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(viewModelOptions.addToCartOptions.trackingId)) {
                        Commerce.RetailLogger.viewsMerchandisingProductDetailsFromRecommendation(viewModelOptions.addToCartOptions.trackingId, viewModelOptions.productId);
                    }
                    viewModelOptions.addToCartOptions.quantity = viewModelOptions.addToCartOptions.quantity || 0;
                }
                _this.viewModel = new Commerce.ViewModels.SimpleProductDetailsViewModel(viewModelOptions);
                return _this;
            }
            SimpleProductDetailsViewController.prototype.onShown = function () {
                this.viewModel.ignoreSelectionModeCancelation = false;
            };
            SimpleProductDetailsViewController.prototype.onHidden = function () {
                this.viewModel.cancelProductSelection();
            };
            SimpleProductDetailsViewController.prototype.afterShown = function () {
                var correlationId;
                if (this._isFirstTimeViewIsShown) {
                    correlationId = this._pageLoadCorrelationId;
                    this._isFirstTimeViewIsShown = false;
                }
                else {
                    correlationId = Commerce.StringExtensions.EMPTY;
                }
                Commerce.RetailLogger.viewsMerchandisingProductDetailsIsVisible(correlationId);
            };
            SimpleProductDetailsViewController.prototype.onNavigateBack = function () {
                this.viewModel.ignoreSelectionModeCancelation = true;
                return true;
            };
            SimpleProductDetailsViewController.prototype.load = function () {
                this.viewModel.loadAsync(this._pageLoadCorrelationId);
            };
            SimpleProductDetailsViewController.prototype._navigateToRichMediaView = function (images) {
                this.viewModel.ignoreSelectionModeCancelation = true;
                var options = {
                    images: images
                };
                Commerce.ViewModelAdapter.navigate("ProductRichMediaView", options);
            };
            return SimpleProductDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SimpleProductDetailsViewController = SimpleProductDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var StockCountDetailsViewController = (function (_super) {
            __extends(StockCountDetailsViewController, _super);
            function StockCountDetailsViewController(options) {
                var _this = _super.call(this, false) || this;
                _this._options = options || { IsAdvancedWarehousingEnabled: false };
                _this.stockCountViewModel = new Commerce.ViewModels.StockCountDetailsViewModel(_this._options);
                _this.stockCountViewModel.isJournalSaved = ko.observable(!Commerce.ObjectExtensions.isNullOrUndefined(_this._options.JournalId));
                _this.viewSubTitle = Commerce.ViewModelAdapter.getResourceString("string_3370");
                return _this;
            }
            StockCountDetailsViewController.prototype.load = function () {
                var _this = this;
                this.stockCountViewModel.loadJournal()
                    .done(function () {
                    var pageTitle = _this.stockCountViewModel.journalId();
                    if (Commerce.StringExtensions.isNullOrWhitespace(pageTitle)) {
                        pageTitle = Commerce.ViewModelAdapter.getResourceString("string_3302");
                    }
                    _this.viewSubTitle = pageTitle;
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            StockCountDetailsViewController.prototype.onShown = function () {
                var _this = this;
                if (this.stockCountViewModel.isAdvancedWarehousingEnabled) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(this.stockCountViewModel.currentLocationId())) {
                        this.stockCountViewModel.showLocationDialogAsync();
                    }
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(this._options.Product)) {
                    this.stockCountViewModel.addNewProductHandler();
                }
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.stockCountViewModel.enterProductAsync(barcode);
                });
                this._subscriptionListData = this.stockCountViewModel.selectedIndex.subscribe(function (newValue) {
                    _this.selectionIndexChanged(newValue);
                });
            };
            StockCountDetailsViewController.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._subscriptionListData)) {
                    this._subscriptionListData.dispose();
                }
            };
            StockCountDetailsViewController.prototype.closeJournal = function () {
                if (!this.stockCountViewModel.isJournalSaved()) {
                    Commerce.ViewModelAdapter.displayMessage("string_3386", Commerce.MessageType.Error, Commerce.MessageBoxButtons.Default, "string_3385");
                }
                else {
                    Commerce.ViewModelAdapter.navigate("SearchStockCountView");
                }
            };
            StockCountDetailsViewController.prototype.selectionIndexChanged = function (newValue) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.dataListViewModel)) {
                    return;
                }
                if (newValue >= 0) {
                    this.dataListViewModel.selectItem(newValue);
                }
                else {
                    this.dataListViewModel.clearAll();
                }
            };
            Object.defineProperty(StockCountDetailsViewController.prototype, "dataListViewModel", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListViewModel)) {
                        this._dataListViewModel = document.getElementById(StockCountDetailsViewController._listViewContainerName).dataListViewModel;
                    }
                    return this._dataListViewModel;
                },
                enumerable: true,
                configurable: true
            });
            StockCountDetailsViewController._listViewContainerName = "stockCountDetailsView_dataList";
            return StockCountDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.StockCountDetailsViewController = StockCountDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var StoreDetailsViewController = (function (_super) {
            __extends(StoreDetailsViewController, _super);
            function StoreDetailsViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._storeNumber = 1;
                _this._messageEventListener = null;
                _this._bingMapsElementId = "storeDetailsMap";
                _this._eventListenerRegistered = false;
                _this.storeDetailsViewModel = new Commerce.ViewModels.StoreDetailsViewModel(options);
                _this._isMapLoaded = false;
                _this.viewTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.indeterminateWaitVisible = ko.observable(true);
                _this._storeDetailsVisible = ko.observable(false);
                return _this;
            }
            StoreDetailsViewController.prototype.load = function () {
                if (this.storeDetailsViewModel.showMap()) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(document.getElementById(this._bingMapsElementId))) {
                        this._map = this._createBingsMapController();
                        this._addBingMapsListener();
                        this._eventListenerRegistered = true;
                    }
                }
                else {
                    this._map = new Commerce.NullMapController();
                    this._onMapLoaded();
                }
            };
            StoreDetailsViewController.prototype.unload = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._map)) {
                    this._map.dispose();
                }
                _super.prototype.unload.call(this);
            };
            StoreDetailsViewController.prototype.popupMapInfobox = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._storeLocation)) {
                    return;
                }
                var orgUnitLocation = Commerce.Proxy.Entities.StoreLocationWrapper.convertToOrgUnitLocation(this.storeDetailsViewModel.storeDetails());
                orgUnitLocation.Longitude = this._storeLocation.Longitude;
                orgUnitLocation.Latitude = this._storeLocation.Latitude;
                var storeWrapper = new Commerce.Proxy.Entities.StoreLocationWrapper(orgUnitLocation);
                this._map.addStoreInfobox(storeWrapper, false);
            };
            StoreDetailsViewController.prototype.onShown = function () {
                if (this._eventListenerRegistered) {
                    this._eventListenerRegistered = false;
                    return;
                }
                this._addBingMapsListener();
            };
            StoreDetailsViewController.prototype._mapSearchSuccess = function (data) {
                this._storeLocation = {
                    Latitude: data.searchResult.location.latitude,
                    Longitude: data.searchResult.location.longitude
                };
                this._map.setMapView(this._storeLocation);
                this._map.addMapPin(this._storeLocation.Latitude, this._storeLocation.Longitude, this._storeNumber.toString());
            };
            StoreDetailsViewController.prototype._mapError = function (msg) {
                this.indeterminateWaitVisible(false);
                console.log(msg.message);
                var errors = [new Commerce.Proxy.Entities.Error("string_29015")];
                Commerce.NotificationHandler.displayClientErrors(errors);
            };
            Object.defineProperty(StoreDetailsViewController.prototype, "_currentStoreAddress", {
                get: function () {
                    var currentStoreAddress = Commerce.StringExtensions.EMPTY;
                    var orgUnit = this.storeDetailsViewModel.storeDetails();
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(orgUnit) && !Commerce.ObjectExtensions.isNullOrUndefined(orgUnit.OrgUnitAddress)) {
                        var addressLines = Commerce.AddressHelper.getFormattedAddress(orgUnit.OrgUnitAddress);
                        currentStoreAddress = addressLines.join();
                    }
                    return currentStoreAddress;
                },
                enumerable: true,
                configurable: true
            });
            StoreDetailsViewController.prototype._onMapLoaded = function () {
                var _this = this;
                if (this._isMapLoaded) {
                    return;
                }
                this.storeDetailsViewModel.getStoreDetails()
                    .done(function () {
                    _this._isMapLoaded = true;
                    _this._map.searchByAddress(_this._currentStoreAddress);
                    var storeName = _this.storeDetailsViewModel.storeDetails().OrgUnitName;
                    var storeNumber = _this.storeDetailsViewModel.storeDetails().OrgUnitNumber;
                    _this.viewTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_610"), storeNumber, storeName));
                    _this.storeDetailsViewModel.getStoreDistance()
                        .done(function () {
                        _this._storeDetailsVisible(true);
                        _this.indeterminateWaitVisible(false);
                    })
                        .fail(function (errors) {
                        _this.indeterminateWaitVisible(false);
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this.indeterminateWaitVisible(false);
                });
            };
            StoreDetailsViewController.prototype._addBingMapsListener = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._messageEventListener)) {
                    this._messageEventListener = this._map.processMessage.bind(this._map);
                }
                this._map.addMessageEventListener(this._messageEventListener);
            };
            StoreDetailsViewController.prototype._createBingsMapController = function () {
                var mapElement = Commerce.Controls.Bing.MapController.createBingMapsElement("storeDetailsMapContent", this._bingMapsElementId, "height400 grow positionRelative", "resx: { ariaLabel: 'string_2552' }");
                this._mapHandlers = new Commerce.Dictionary();
                this._mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.LOADED, this._onMapLoaded);
                this._mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.ERROR, this._mapError);
                this._mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.INITIALIZATION_ERROR, this._mapError);
                this._mapHandlers.setItem(Commerce.Controls.Bing.MapEvents.SEARCH_SUCCESS, this._mapSearchSuccess);
                return new Commerce.Controls.Bing.MapController(this, mapElement, this._mapHandlers);
            };
            return StoreDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.StoreDetailsViewController = StoreDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CatalogsViewController = (function (_super) {
            __extends(CatalogsViewController, _super);
            function CatalogsViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._options = options;
                _this.catalogViewModel = new Commerce.ViewModels.CatalogViewModel();
                _this.currentStore = Commerce.Session.instance.productCatalogStore.Store;
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.currentStoreLocation = ko.observable("");
                _this._cancelSelectionOnHidden = true;
                if (Commerce.Session.instance.productCatalogStore.StoreType !== Commerce.Proxy.Entities.StoreButtonControlType.Warehouse) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.productCatalogStore.Store) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.productCatalogStore.Store.OrgUnitFullAddress)) {
                        _this.currentStoreLocation(Commerce.Session.instance.productCatalogStore.Store.OrgUnitAddress.City + ", "
                            + Commerce.Session.instance.productCatalogStore.Store.OrgUnitAddress.State);
                    }
                    _this.indeterminateWaitVisible(true);
                    _this.catalogViewModel.getCatalogs()
                        .done(function (productCatalogs) {
                        _this.indeterminateWaitVisible(false);
                    }).fail(function (errors) {
                        _this._displayErrors(errors);
                    });
                }
                else {
                    var allStoreProductImage = Commerce.Session.instance.defaultCatalogImageFormat
                        .replace("{LanguageId}", Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)
                        .replace("{CatalogName}", Commerce.ViewModelAdapter.getResourceString("string_33"))
                        .replace("{ChannelName}", Commerce.Session.instance.productCatalogStore.Store.OrgUnitName);
                    _this.catalogViewModel.catalogs([new Commerce.Proxy.Entities.ProductCatalogClass({
                            RecordId: 0,
                            Name: Commerce.ViewModelAdapter.getResourceString("string_33"),
                            IsSnapshotEnabled: false,
                            ValidFrom: new Date(),
                            ValidTo: new Date(),
                            CreatedOn: new Date(),
                            ModifiedOn: new Date(),
                            PublishedOn: new Date(),
                            Images: [{ Uri: allStoreProductImage }]
                        })]);
                }
                return _this;
            }
            CatalogsViewController.prototype.onShown = function () {
                this._cancelSelectionOnHidden = true;
            };
            CatalogsViewController.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options)
                    && Commerce.ObjectExtensions.isFunction(this._options.onCatalogSelectionCanceled)
                    && this._cancelSelectionOnHidden) {
                    this._options.onCatalogSelectionCanceled();
                }
            };
            CatalogsViewController.prototype.onNavigateBack = function () {
                this._cancelSelectionOnHidden = false;
                return true;
            };
            CatalogsViewController.prototype.itemInvokedHandler = function (item) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsMerchandisingCatalogsCatalogClicked(correlationId, item.RecordId.toString(), item.Name);
                Commerce.Session.instance.productCatalogStore.Context.CatalogId = item.RecordId;
                Commerce.Session.instance.catalogName = item.Name;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options) && !Commerce.StringExtensions.isNullOrWhitespace(this._options.destination)) {
                    this._cancelSelectionOnHidden = false;
                    Commerce.ViewModelAdapter.navigate(this._options.destination, this._options.destinationOptions);
                }
                else {
                    var options = { correlationId: correlationId };
                    Commerce.ViewModelAdapter.navigate("CategoriesView", options);
                }
            };
            CatalogsViewController.prototype.switchToOtherStores = function () {
                var _this = this;
                var storeSelectionHandler = new Commerce.CancelableSelectionHandler(function (store) {
                    var returnOptions = _this._options || { destination: null, destinationOptions: null };
                    Commerce.ViewModelAdapter.collapseAndNavigate("CatalogsView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("CatalogsView");
                }, function (store) {
                    return _this.catalogViewModel.setVirtualCatalog(Commerce.Proxy.Entities.StoreButtonControlType.FindStore, store.OrgUnitNumber, store)
                        .map(function () {
                        return { canceled: false };
                    });
                });
                var parameters = {
                    isForPickUp: false,
                    storeSelectionHandler: storeSelectionHandler
                };
                this._cancelSelectionOnHidden = false;
                Commerce.ViewModelAdapter.navigate("PickUpInStoreView", parameters);
            };
            CatalogsViewController.prototype.switchToCurrentStore = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.catalogViewModel.setVirtualCatalog(Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore, null, null)
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                    _this._cancelSelectionOnHidden = false;
                    Commerce.ViewModelAdapter.navigate("CatalogsView", _this._options);
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CatalogsViewController.prototype.switchToAllStoreProducts = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.catalogViewModel.setVirtualCatalog(Commerce.Proxy.Entities.StoreButtonControlType.Warehouse, null, null)
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                    _this._cancelSelectionOnHidden = false;
                    Commerce.ViewModelAdapter.navigate("CatalogsView", _this._options);
                })
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CatalogsViewController.prototype.navigateToStoreDetails = function () {
                var storeDetailsViewModelOptions = {
                    storeId: Commerce.Session.instance.productCatalogStore.Store.OrgUnitNumber
                };
                Commerce.ViewModelAdapter.navigate("StoreDetailsView", storeDetailsViewModelOptions);
            };
            CatalogsViewController.prototype._displayErrors = function (errors) {
                this.indeterminateWaitVisible(false);
                Commerce.NotificationHandler.displayClientErrors(errors);
            };
            return CatalogsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CatalogsViewController = CatalogsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var AllStoresViewController = (function (_super) {
            __extends(AllStoresViewController, _super);
            function AllStoresViewController(options) {
                var _this = _super.call(this, false) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "The options parameter was not provided and is required for AllStoresView to function correctly.";
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.storeSelectionHandler)) {
                    throw "The store selection field is required on the options provided for AllStoresView to function correctly.";
                }
                _this._options = options;
                _this._indeterminateWaitVisible = ko.observable(true);
                _this._selectCommandDisabled = ko.observable(true);
                _this._cancelSelectionHandlerOnHidden = true;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    Commerce.RetailLogger.viewsMerchandisingAllStoresViewConstructorArgumentUndefined("options");
                    return _this;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.locations)) {
                    Commerce.RetailLogger.viewsMerchandisingAllStoresViewConstructorArgumentUndefined("options.locations");
                    return _this;
                }
                _this._locations = ko.observableArray(options.locations);
                return _this;
            }
            AllStoresViewController.prototype.load = function () {
                this._indeterminateWaitVisible(false);
            };
            AllStoresViewController.prototype.onNavigateBack = function () {
                this._cancelSelectionHandlerOnHidden = false;
                return true;
            };
            AllStoresViewController.prototype.onHidden = function () {
                if (this._cancelSelectionHandlerOnHidden && !Commerce.ObjectExtensions.isNullOrUndefined(this._options.storeSelectionHandler)) {
                    this._options.storeSelectionHandler.cancel();
                }
            };
            AllStoresViewController.prototype.invokeStore = function (selectedItem) {
                this._selectedStore = selectedItem;
            };
            AllStoresViewController.prototype.confirmStoreSelection = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options.storeSelectionHandler)) {
                    this._indeterminateWaitVisible(true);
                    this._options.storeSelectionHandler.select(this._selectedStore, function () {
                        _this._cancelSelectionHandlerOnHidden = true;
                        _this._indeterminateWaitVisible(false);
                    }, function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        _this._indeterminateWaitVisible(false);
                    });
                }
                else {
                    throw "Invalid storeSelectionCallback provided to AllStoresView.";
                }
            };
            AllStoresViewController.prototype.storeSelectionChanged = function (selectedLines) {
                this._selectedStore = selectedLines.length === 0 ? null : selectedLines[0];
                this._selectCommandDisabled(!Commerce.ArrayExtensions.hasElements(selectedLines));
            };
            AllStoresViewController.prototype.onItemDataSourceUpdated = function (viewModel) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._locations()) && this._locations.length === 1) {
                    viewModel.selectAll();
                }
            };
            return AllStoresViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.AllStoresViewController = AllStoresViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ProductRichMediaViewController = (function (_super) {
            __extends(ProductRichMediaViewController, _super);
            function ProductRichMediaViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._images = [];
                _this._images = options.images;
                return _this;
            }
            Object.defineProperty(ProductRichMediaViewController.prototype, "images", {
                get: function () {
                    return this._images;
                },
                enumerable: true,
                configurable: true
            });
            ProductRichMediaViewController.prototype.onCreated = function (element) {
                var _this = this;
                this.setImageSizeAsPerScreen(element, $(window).width(), $(window).height());
                Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, function (orientation) {
                    _this.setImageSizeAsPerScreen(element, $(window).width(), $(window).height());
                });
                Commerce.EventProxy.Instance.addWindowResizeHandler(element, function (eventArg) {
                    _this.setImageSizeAsPerScreen(element, $(eventArg.srcElement).width(), $(eventArg.srcElement).height());
                });
            };
            ProductRichMediaViewController.prototype.setImageSizeAsPerScreen = function (element, elementWidth, elementHeight) {
                var $element = $(element);
                var calculatedImageSize;
                var maxImagesize = 600;
                var thumbnailsDivHeight = 110;
                var marginPixel = 10;
                var backButtonSize = 70;
                var largeImageDiv = $element.find("#productimageflipview");
                var thumbnailsDiv = $element.find("#productimageflipviewThumbnails");
                if (elementWidth < elementHeight) {
                    if (elementWidth + thumbnailsDivHeight < elementHeight) {
                        calculatedImageSize = elementWidth;
                        thumbnailsDiv.css("width", calculatedImageSize + "px");
                    }
                    else {
                        calculatedImageSize = elementWidth - thumbnailsDivHeight;
                    }
                }
                else {
                    calculatedImageSize = elementHeight - thumbnailsDivHeight;
                    thumbnailsDiv.css("width", "auto");
                }
                calculatedImageSize = calculatedImageSize - marginPixel;
                if (calculatedImageSize > maxImagesize) {
                    calculatedImageSize = maxImagesize;
                }
                if (!Commerce.Config.isPhone) {
                    if (elementWidth < calculatedImageSize + 2 * backButtonSize) {
                        calculatedImageSize = elementWidth - 2 * backButtonSize;
                        if (elementHeight > calculatedImageSize + 2 * backButtonSize + thumbnailsDivHeight) {
                            calculatedImageSize = elementHeight - 2 * backButtonSize - thumbnailsDivHeight;
                        }
                    }
                }
                largeImageDiv.css({ width: calculatedImageSize, height: calculatedImageSize });
            };
            return ProductRichMediaViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ProductRichMediaViewController = ProductRichMediaViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var TransferOrderDetailsViewController = (function (_super) {
            __extends(TransferOrderDetailsViewController, _super);
            function TransferOrderDetailsViewController(options) {
                var _this = _super.call(this, false) || this;
                _this.viewModel = new Commerce.ViewModels.TransferOrderDetailsViewModel(options);
                return _this;
            }
            TransferOrderDetailsViewController.prototype.load = function () {
                this.viewModel.loadTransferOrder();
            };
            TransferOrderDetailsViewController.prototype.onShown = function () {
                var _this = this;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.viewModel.onProductSearchTextChange(barcode);
                });
                this._dataListSubscription = this.viewModel.selectedOrderLine
                    .subscribe(function (newValue) {
                    _this.selectionIndexChanged(newValue);
                });
            };
            TransferOrderDetailsViewController.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._dataListSubscription)) {
                    this._dataListSubscription.dispose();
                }
            };
            TransferOrderDetailsViewController.prototype.selectionIndexChanged = function (selectedTransferOrderLine) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.dataListViewModel)) {
                    return;
                }
                var index = this.viewModel.orderLines().indexOf(selectedTransferOrderLine);
                if (index >= 0) {
                    this.dataListViewModel.selectItem(index);
                }
                else {
                    this.dataListViewModel.clearAll();
                }
            };
            Object.defineProperty(TransferOrderDetailsViewController.prototype, "dataListViewModel", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListViewModel)) {
                        this._dataListViewModel = document.getElementById(TransferOrderDetailsViewController.LIST_VIEW_CONTAINER_NAME).dataListViewModel;
                    }
                    return this._dataListViewModel;
                },
                enumerable: true,
                configurable: true
            });
            TransferOrderDetailsViewController.LIST_VIEW_CONTAINER_NAME = "transferOrderDetailsView_dataList";
            return TransferOrderDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.TransferOrderDetailsViewController = TransferOrderDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CustomerAddEditViewController = (function (_super) {
            __extends(CustomerAddEditViewController, _super);
            function CustomerAddEditViewController(options) {
                var _this = _super.call(this, false) || this;
                _this.viewModel = new Commerce.ViewModels.CustomerAddEditViewModel(options);
                _this.viewModel.getDateTimeValueHandler = _this._getDateTimeValue.bind(_this);
                _this._tabIndexController = new Commerce.TabIndexController();
                return _this;
            }
            CustomerAddEditViewController.prototype.onShown = function () {
                this.viewModel.onShown();
                this._tabIndexController.init(".customerAddEditView", ["aria-selected", "disabled"]);
            };
            CustomerAddEditViewController.prototype.onNavigateBack = function () {
                return this.viewModel.onNavigateBack();
            };
            CustomerAddEditViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
                this._tabIndexController.disconnect();
            };
            CustomerAddEditViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            CustomerAddEditViewController.prototype._getDateTimeValue = function (index) {
                var dateTimeElementId = "customerCustomAttribute" + index;
                return Commerce.DateExtensions.getDate(document.getElementById(dateTimeElementId).winControl.current);
            };
            return CustomerAddEditViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CustomerAddEditViewController = CustomerAddEditViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var AddressAddEditViewController = (function (_super) {
            __extends(AddressAddEditViewController, _super);
            function AddressAddEditViewController(options) {
                var _this = _super.call(this, false) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    Commerce.NotificationHandler.displayErrorMessage("string_29000");
                    return _this;
                }
                _this._navigateTo = options.navigateTo;
                _this._destinationOptions = options.destinationOptions;
                _this._shouldSaveChanges = options.shouldSaveChanges;
                _this._onAddressCreatedAsyncResult = options.onAddressCreatedAsyncResult;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._onAddressCreatedAsyncResult)) {
                    _this._onAddressCreatedAsyncResult.done(function () { _this._onAddressCreatedAsyncResult = null; });
                }
                _this.addressAddEditViewModel = new Commerce.ViewModels.AddressAddEditViewModel(options);
                if (Commerce.ObjectExtensions.isNullOrUndefined(_this.addressAddEditViewModel.addressProxy.IsPrimary())) {
                    var isPrimary = !_this.hasCustomerPrimaryAddress();
                    _this.addressAddEditViewModel.addressProxy.IsPrimary(isPrimary);
                    _this.isPrimary = ko.observable(isPrimary);
                }
                else {
                    _this.isPrimary = ko.observable(_this.addressAddEditViewModel.addressProxy.IsPrimary());
                }
                _this.viewTitle = _this.addressAddEditViewModel.addressProxy.Name();
                _this.loadSalesTaxGroups();
                _this.addressAddEditViewModel.addressProxy.ThreeLetterISORegionName.subscribe(_this.selectedCountryChanged, _this);
                _this.showStreetName = ko.observable(true);
                _this.showStreetNumber = ko.observable(true);
                _this.showBuildingComplement = ko.observable(true);
                _this.showCity = ko.observable(true);
                _this.showCounty = ko.observable(true);
                _this.showDistrict = ko.observable(true);
                _this.showState = ko.observable(true);
                _this.showZip = ko.observable(true);
                _this.selectedCountryChanged(_this.addressAddEditViewModel.addressProxy.ThreeLetterISORegionName());
                _this.enableState = ko.computed(function () {
                    return _this.addressAddEditViewModel.states().length > 0;
                }, _this);
                return _this;
            }
            AddressAddEditViewController.prototype.load = function () {
                this.addressAddEditViewModel.loadAsync();
            };
            AddressAddEditViewController.prototype.setAddressProxyIsPrimary = function (isPrimary) {
                this.addressAddEditViewModel.addressProxy.IsPrimary(isPrimary);
            };
            AddressAddEditViewController.prototype.onHidden = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onAddressCreatedAsyncResult)
                    && this._onAddressCreatedAsyncResult.state() === Commerce.AsyncResultStateEnum.Pending) {
                    this._onAddressCreatedAsyncResult.resolve({ canceled: true, data: undefined });
                }
            };
            AddressAddEditViewController.prototype.saveClicked = function () {
                var _this = this;
                if (this._shouldSaveChanges) {
                    if (this.addressAddEditViewModel.canSave()) {
                        if (this.hasConflictedPrimaryAddress()) {
                            Commerce.ViewModelAdapter.displayMessage("string_4847", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                                .done(function (result) {
                                if (result === Commerce.DialogResult.Yes) {
                                    _this.saveCustomerAddress();
                                }
                            });
                        }
                        else {
                            this.saveCustomerAddress();
                        }
                    }
                }
                else {
                    Commerce.ViewModelAdapter.navigate(this._navigateTo, this._destinationOptions);
                }
            };
            AddressAddEditViewController.prototype.hasCustomerPrimaryAddress = function () {
                var customerProxy = this.addressAddEditViewModel.customerProxy;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customerProxy)) {
                    return false;
                }
                var customer = Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(customerProxy);
                var addresses = customer.Addresses;
                if (Commerce.ObjectExtensions.isNullOrUndefined(addresses)) {
                    return false;
                }
                return !Commerce.ObjectExtensions.isUndefined(Commerce.ArrayExtensions.firstOrUndefined(addresses, function (address) {
                    return address.IsPrimary === true;
                }));
            };
            AddressAddEditViewController.prototype.hasConflictedPrimaryAddress = function () {
                var customerProxy = this.addressAddEditViewModel.customerProxy;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customerProxy)) {
                    return false;
                }
                var customer = Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(customerProxy);
                var addresses = customer.Addresses;
                if (Commerce.ObjectExtensions.isNullOrUndefined(addresses)) {
                    return false;
                }
                var updatedAddress = Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.addressAddEditViewModel.addressProxy);
                return updatedAddress.IsPrimary &&
                    !Commerce.ObjectExtensions.isUndefined(Commerce.ArrayExtensions.firstOrUndefined(addresses, function (address) {
                        return address.RecordId !== updatedAddress.RecordId && address.IsPrimary === true;
                    }));
            };
            AddressAddEditViewController.prototype.selectedCountryChanged = function (newValue) {
                if (!Commerce.StringExtensions.isEmptyOrWhitespace(newValue)) {
                    var matchingCountry = this.addressAddEditViewModel
                        .countries
                        .filter(function (country) {
                        return country.CountryRegionId === newValue;
                    });
                    if (Commerce.ArrayExtensions.hasElements(matchingCountry)) {
                        this.updateVisibleAddressElements(matchingCountry[0].AddressFormatLines);
                    }
                }
            };
            AddressAddEditViewController.prototype.hideAllAddressFields = function () {
                this.showStreetName(false);
                this.showStreetNumber(false);
                this.showBuildingComplement(false);
                this.showCity(false);
                this.showCounty(false);
                this.showDistrict(false);
                this.showState(false);
                this.showZip(false);
            };
            AddressAddEditViewController.prototype.updateVisibleAddressElements = function (formatLines) {
                this.hideAllAddressFields();
                var formatLine;
                for (var index = 0; index < formatLines.length; index++) {
                    formatLine = formatLines[index];
                    if (formatLine.Inactive) {
                        continue;
                    }
                    switch (formatLines[index].AddressComponentNameValue) {
                        case Commerce.Proxy.Entities.AddressFormatLineType.StreetName:
                            this.showStreetName(true);
                            break;
                        case Commerce.Proxy.Entities.AddressFormatLineType.StreetNumber:
                            this.showStreetNumber(true);
                            break;
                        case Commerce.Proxy.Entities.AddressFormatLineType.BuildingCompliment:
                            this.showBuildingComplement(true);
                            break;
                        case Commerce.Proxy.Entities.AddressFormatLineType.Postbox:
                        case Commerce.Proxy.Entities.AddressFormatLineType.ZipCode:
                            this.showZip(true);
                            break;
                        case Commerce.Proxy.Entities.AddressFormatLineType.County:
                            this.showCounty(true);
                            break;
                        case Commerce.Proxy.Entities.AddressFormatLineType.District:
                            this.showDistrict(true);
                            break;
                        case Commerce.Proxy.Entities.AddressFormatLineType.State:
                            this.showState(true);
                            break;
                        case Commerce.Proxy.Entities.AddressFormatLineType.City:
                            this.showCity(true);
                            break;
                    }
                }
            };
            AddressAddEditViewController.prototype.loadSalesTaxGroups = function () {
                if (AddressAddEditViewController.salesTaxGroups.length === 0) {
                    this.addressAddEditViewModel.getSalesTaxGroups()
                        .done(function (salesTaxGroups) {
                        AddressAddEditViewController.salesTaxGroups(salesTaxGroups);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.viewsCustomerAddressAddEditViewDownloadTaxGroupsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    });
                }
            };
            AddressAddEditViewController.prototype.saveCustomerAddress = function () {
                var _this = this;
                var asyncResult;
                asyncResult = this.addressAddEditViewModel.updateAddress();
                asyncResult.done(function () { _this.saveCustomerAddressSuccessCallback(); })
                    .fail(function (errors) { _this.saveCustomerAddressErrorCallback(errors); });
            };
            AddressAddEditViewController.prototype.saveCustomerAddressSuccessCallback = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onAddressCreatedAsyncResult)) {
                    this._onAddressCreatedAsyncResult.resolve({
                        canceled: false,
                        data: Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.addressAddEditViewModel.customerProxy)
                    });
                    return;
                }
                var options;
                switch (this._navigateTo) {
                    case "PaymentView":
                        options = this._destinationOptions;
                        break;
                    case "ShippingMethodsView":
                        var shippingMethodOptions = {
                            cartLines: this._destinationOptions.cartLines,
                            shippingAddress: Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.addressAddEditViewModel.addressProxy),
                            selectedStore: this._destinationOptions.selectedStore
                        };
                        options = shippingMethodOptions;
                        break;
                    case "CustomerAddressesView":
                        options = {
                            customer: Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.addressAddEditViewModel.customerProxy),
                            cartLines: this._destinationOptions.cartLines,
                            selectionMode: this._destinationOptions.selectionMode
                        };
                        break;
                    default:
                        options = { customer: Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(this.addressAddEditViewModel.customerProxy) };
                        break;
                }
                Commerce.ViewModelAdapter.navigate(this._navigateTo, options);
            };
            AddressAddEditViewController.prototype.saveCustomerAddressErrorCallback = function (errors) {
                Commerce.NotificationHandler.displayClientErrors(errors);
            };
            AddressAddEditViewController.salesTaxGroups = ko.observableArray([]);
            return AddressAddEditViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.AddressAddEditViewController = AddressAddEditViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CustomerDetailsViewController = (function (_super) {
            __extends(CustomerDetailsViewController, _super);
            function CustomerDetailsViewController(options) {
                var _this = _super.call(this, true) || this;
                var viewModelOptions;
                if (options instanceof Commerce.Client.Entities.CustomerDetailsNavigationParameters) {
                    viewModelOptions = {
                        accountNumber: options.accountNumber,
                        correlationId: Commerce.StringExtensions.EMPTY
                    };
                }
                else {
                    viewModelOptions = options;
                }
                _this.viewModel = new Commerce.ViewModels.CustomerDetailsViewModel(viewModelOptions);
                _this.viewModel.refreshOrderHistoryList = function () {
                    _this._refreshOrderHistoryList();
                };
                return _this;
            }
            CustomerDetailsViewController.prototype.load = function () {
                this.viewModel.loadAsync()
                    .done(function () {
                    Commerce.RetailLogger.viewsCustomerDetailsLoaded();
                });
            };
            CustomerDetailsViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            CustomerDetailsViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            CustomerDetailsViewController.prototype.afterShown = function () {
                this.viewModel.afterShown();
                var $element = $(this._element);
                var listSteps = $element.find(".buttonBlock");
                for (var i = 0; i < listSteps.length; i++) {
                    listSteps[i].firstElementChild.setAttribute("tabindex", "-1");
                }
            };
            CustomerDetailsViewController.prototype.onNavigateBack = function () {
                return this.viewModel.onNavigateBack();
            };
            CustomerDetailsViewController.prototype._refreshOrderHistoryList = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._orderHistoryDataListViewModel)) {
                    var listElement = document.getElementById(CustomerDetailsViewController.ORDER_HISTORY_DATA_LIST_ID);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(listElement) && !Commerce.ObjectExtensions.isNullOrUndefined(listElement.dataListViewModel)) {
                        this._orderHistoryDataListViewModel = listElement.dataListViewModel;
                    }
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._orderHistoryDataListViewModel)) {
                    this._orderHistoryDataListViewModel.refreshList();
                }
            };
            CustomerDetailsViewController.ORDER_HISTORY_DATA_LIST_ID = "customerSalesOrderList";
            return CustomerDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CustomerDetailsViewController = CustomerDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var AddressWrapper = (function () {
            function AddressWrapper(address) {
                this.address = address;
            }
            return AddressWrapper;
        }());
        ViewControllers.AddressWrapper = AddressWrapper;
        var CustomerAddressesViewController = (function (_super) {
            __extends(CustomerAddressesViewController, _super);
            function CustomerAddressesViewController(options) {
                var _this = _super.call(this, true) || this;
                options = options || { customer: null, cartLines: null, selectionMode: null };
                _this._disposables = [];
                _this.customer = Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(options.customer) || null;
                _this.cartLines = options.cartLines || [];
                _this.selectionMode = !Commerce.ObjectExtensions.isNullOrUndefined(options.selectionMode) ? options.selectionMode : true;
                _this.addresses = _this._unwrapObservableAddresses(_this.customer.Addresses);
                _this._setCustomerAddressesWrappers();
                _this.viewTitle = _this.customer.Name;
                return _this;
            }
            CustomerAddressesViewController.prototype.addressTitleClicked = function (addressWrapper) {
                var address = addressWrapper.address;
                var returnOptions = {
                    customer: this.customer,
                    cartLines: this.cartLines,
                    selectionMode: this.selectionMode
                };
                var options = Commerce.ViewModels.AddressAddEditViewModelOptions.createInstance(this.customer, address, true, "CustomerAddressesView", returnOptions);
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", options);
            };
            CustomerAddressesViewController.prototype.unload = function () {
                if (Commerce.ArrayExtensions.hasElements(this._disposables)) {
                    this._disposables.forEach(function (disposable) { return disposable.dispose(); });
                }
                _super.prototype.unload.call(this);
            };
            CustomerAddressesViewController.prototype._setCustomerAddressesWrappers = function () {
                var ordinaryAddresses = this.addresses.filter(function (address) { return address.IsPrimary === false; });
                this.otherAddressWrappers = this._getCustomerAddressesWrappers(ordinaryAddresses);
                var primaryAddresses = this.addresses.filter(function (address) { return address.IsPrimary === true; });
                this.primaryAddressWrappers = this._getCustomerAddressesWrappers(primaryAddresses);
            };
            CustomerAddressesViewController.prototype._getCustomerAddressesWrappers = function (addresses) {
                var _this = this;
                var addressWrappers = [];
                addresses.forEach(function (address) {
                    var wrapper = new AddressWrapper(address);
                    wrapper.addressTitleClicked = function () {
                        _this.addressTitleClicked(wrapper);
                    };
                    WinJS.Utilities.markSupportedForProcessing(wrapper.addressTitleClicked);
                    if (_this.selectionMode) {
                        wrapper.addressSelected = function () {
                            _this._applyAddress(wrapper);
                        };
                        WinJS.Utilities.markSupportedForProcessing(wrapper.addressSelected);
                    }
                    addressWrappers.push(wrapper);
                });
                return addressWrappers;
            };
            CustomerAddressesViewController.prototype._applyAddress = function (addressWrapper) {
                var options = {
                    shippingAddress: Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(addressWrapper.address),
                    cartLines: this.cartLines,
                    selectedStore: null
                };
                Commerce.ViewModelAdapter.navigate("ShippingMethodsView", options);
            };
            CustomerAddressesViewController.prototype._unwrapObservableAddresses = function (addresses) {
                if (Commerce.ArrayExtensions.hasElements(addresses)) {
                    for (var i = 0; i < addresses.length; i++) {
                        addresses[i] = Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(addresses[i]);
                    }
                }
                return addresses;
            };
            return CustomerAddressesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CustomerAddressesViewController = CustomerAddressesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Dialog;
        (function (Dialog) {
            "use strict";
            var DialogTypes;
            (function (DialogTypes) {
                DialogTypes[DialogTypes["DEFAULT"] = 0] = "DEFAULT";
                DialogTypes[DialogTypes["SEQUENCE"] = 1] = "SEQUENCE";
            })(DialogTypes = Dialog.DialogTypes || (Dialog.DialogTypes = {}));
            var OperationIds = (function () {
                function OperationIds() {
                }
                OperationIds.OK_BUTTON_CLICK = "okButtonClick";
                OperationIds.CANCEL_BUTTON_CLICK = "cancelButtonClick";
                OperationIds.CLOSE_BUTTON_CLICK = "closeButtonClick";
                OperationIds.NO_BUTTON_CLICK = "noButtonClick";
                return OperationIds;
            }());
            Dialog.OperationIds = OperationIds;
            var DialogHandler = (function () {
                function DialogHandler() {
                }
                DialogHandler.buttonClick = function (dialogState, operationId, viewModel, e) {
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    if (dialogState.buttonClick && typeof (dialogState.buttonClick) === "function") {
                        dialogState.buttonClick.call(viewModel, operationId);
                    }
                };
                DialogHandler.subTitleClick = function (dialogState, viewModel, e) {
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    if (dialogState.subTitleClick && typeof (dialogState.subTitleClick) === "function") {
                        dialogState.subTitleClick.call(viewModel);
                    }
                };
                DialogHandler.backClick = function (dialogState, viewModel, e) {
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    if (dialogState.backClick && typeof (dialogState.backClick) === "function") {
                        dialogState.backClick.call(viewModel);
                    }
                };
                DialogHandler.escapeKeyPressedHandler = function (dialogState, viewModel, e) {
                    if (dialogState == null) {
                        return;
                    }
                    if (e) {
                        e.stopImmediatePropagation();
                    }
                    DialogHandler.hide(dialogState);
                    DialogHandler.buttonClick(dialogState, Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK, viewModel, e);
                };
                DialogHandler.keyPressed = function (dialogState, viewModel, e) {
                    DialogHandler.stopPropagation(e);
                    if (e.target.nodeName && e.target.nodeName === "BUTTON" && (e.keyCode !== 27 && e.keyCode !== 9)) {
                        return true;
                    }
                    if (dialogState == null) {
                        return true;
                    }
                    var handleEvent = false;
                    var operationId = Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK;
                    switch (e.keyCode) {
                        case 27:
                            if (dialogState.closeOnEscButton) {
                                Commerce.ViewModelAdapter.raiseTaskRecorderEvent(dialogState.$element.get(0), Commerce.DialogResult[Commerce.DialogResult.Close]);
                                if (dialogState.dialogCloseButtonClick && Commerce.ObjectExtensions.isFunction(dialogState.dialogCloseButtonClick)) {
                                    dialogState.dialogCloseButtonClick.call(viewModel);
                                }
                                DialogHandler.escapeKeyPressedHandler(dialogState, viewModel, e);
                            }
                            break;
                        case 13:
                            if ((dialogState.primaryButtonIndex >= 0)
                                && dialogState.buttons[dialogState.primaryButtonIndex].element.is(":enabled")) {
                                var sourceElement = $(e.target);
                                if (!sourceElement.is("textarea") && !sourceElement.is("select")) {
                                    var hasFocus = sourceElement.is("input");
                                    if (hasFocus) {
                                        sourceElement.trigger("change");
                                    }
                                    handleEvent = !(hasFocus && dialogState.enableValidation);
                                    operationId = dialogState.buttons[dialogState.primaryButtonIndex].operationId;
                                }
                            }
                            break;
                        case 9:
                            DialogHandler.tabKeyPressedHandler(dialogState, e);
                            break;
                    }
                    if (handleEvent) {
                        DialogHandler.buttonClick(dialogState, operationId, viewModel, e);
                    }
                    return true;
                };
                DialogHandler.tabKeyPressedHandler = function (dialogState, e) {
                    var focusableElements = Commerce.Controls.Dialog.DialogHandler.getFocusableChildren(dialogState.$element);
                    var VIDEO_TAG = "VIDEO";
                    var focusedElement;
                    if (focusableElements.length > 0) {
                        focusedElement = dialogState.$element.find(":focus")[0];
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(focusedElement) && focusedElement.tagName.toUpperCase() !== VIDEO_TAG) {
                            var focusedElementIndex = $.inArray(focusedElement, focusableElements);
                            var nextFocusedElementIndex = 0;
                            var lastFocusableElementIndex = focusableElements.length - 1;
                            if (!e.shiftKey) {
                                nextFocusedElementIndex = focusedElementIndex >= lastFocusableElementIndex ? 0 : focusedElementIndex + 1;
                            }
                            else {
                                nextFocusedElementIndex = focusedElementIndex <= 0 ? lastFocusableElementIndex : focusedElementIndex - 1;
                            }
                            if (nextFocusedElementIndex >= 0) {
                                focusableElements[nextFocusedElementIndex].focus();
                            }
                        }
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(focusedElement) && focusedElement.tagName.toUpperCase() !== VIDEO_TAG) {
                        e.preventDefault();
                    }
                };
                DialogHandler.stopPropagation = function (e) {
                    var eventData = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        eventData[_i - 1] = arguments[_i];
                    }
                    e.stopPropagation();
                };
                DialogHandler.addPrimarySecondaryButtonClassNames = function (button, $button, dialogState, viewModel, isPrimaryButton, isDisabled) {
                    $button.addClass(isPrimaryButton ? "primaryButton" : "secondaryButton");
                    return $button;
                };
                DialogHandler.getFocusableChildren = function ($parent) {
                    if ($parent == null) {
                        return null;
                    }
                    var tabbableElements = $parent.find(":tabbable");
                    var $videoElement = $parent.find("video");
                    if ($videoElement.length > 0) {
                        tabbableElements.add($videoElement);
                    }
                    return this.sortByTabindex(tabbableElements);
                };
                DialogHandler.setsFocusInDialog = function (dialogState) {
                    var $topElement = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.$initialContent) ? dialogState.$element : dialogState.$initialContent;
                    var $focusableChildren = DialogHandler.getFocusableChildren($topElement);
                    var focusableChildren = Commerce.ObjectExtensions.isNullOrUndefined($focusableChildren) ? [] : $focusableChildren.toArray();
                    var focusableChild = Commerce.ArrayExtensions.firstOrUndefined(focusableChildren, function (element) {
                        return Commerce.CSSHelpers.isVisible(element) && Commerce.CSSHelpers.isEnabled(element);
                    });
                    if (Commerce.ObjectExtensions.isNullOrUndefined(focusableChild) && !Commerce.ObjectExtensions.isNullOrUndefined(dialogState.$primaryButton)) {
                        var primaryButton = dialogState.$primaryButton[0];
                        if (Commerce.CSSHelpers.isVisible(primaryButton) && Commerce.CSSHelpers.isEnabled(primaryButton)) {
                            focusableChild = primaryButton;
                        }
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(focusableChild)) {
                        $focusableChildren = DialogHandler.getFocusableChildren(dialogState.$buttonsContainer);
                        focusableChildren = Commerce.ObjectExtensions.isNullOrUndefined($focusableChildren) ? [] : $focusableChildren.toArray();
                        focusableChild = Commerce.ArrayExtensions.firstOrUndefined(focusableChildren, function (element) {
                            return Commerce.CSSHelpers.isVisible(element) && Commerce.CSSHelpers.isEnabled(element);
                        });
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(focusableChild)) {
                        $(focusableChild).focus();
                    }
                    var $focused = $(":focus");
                    if ($focused.closest(dialogState.$element).length === 0) {
                        dialogState.$element.attr("tabindex", dialogState.tabIndex++);
                        dialogState.$element.focus();
                    }
                };
                DialogHandler.keepFocus = function (element) {
                    if (element.is(":visible")) {
                        var $focused = $(":focus");
                        if ($focused.closest(element).length === 0) {
                            element.focus();
                        }
                    }
                };
                DialogHandler.show = function (dialogState, forceShow) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                        return;
                    }
                    forceShow = forceShow || false;
                    var $element = dialogState.$element;
                    if (!forceShow && dialogState.visible) {
                        return;
                    }
                    dialogState.visible = true;
                    DialogHandler._visibleDialogs.push(dialogState);
                    var styles = { visibility: "visible", top: "", display: "" };
                    $element.css(styles);
                    $element.attr("role", "dialog");
                    $element.animate({ "width": DialogHandler._commerceDialogWidth }, dialogState.isAnimate !== false ? DialogHandler._slideDuration : 0, function () {
                        $element.on("keydown", dialogState.keyPressHandler);
                        $element.on("keyup", DialogHandler.stopPropagation);
                        $element.on("keypress", DialogHandler.stopPropagation);
                        dialogState.$dialogContainer.fadeIn(DialogHandler._fadeDuration, function () {
                            dialogState.$dialogContainer.css("visibility", "visible");
                            setTimeout(function () {
                                DialogHandler.setFocusInDialogOnShow(dialogState);
                            }, 100);
                        });
                    });
                };
                DialogHandler.setFocusInDialogOnShow = function (dialogState) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                        return;
                    }
                    if (dialogState.focus) {
                        DialogHandler.setsFocusInDialog(dialogState);
                    }
                    if (dialogState.afterShow) {
                        dialogState.afterShow();
                    }
                };
                DialogHandler.hide = function (dialogState, forceHide) {
                    if (dialogState == null) {
                        return;
                    }
                    dialogState.$element.off("keydown", dialogState.keyPressHandler);
                    dialogState.$element.off("keyup", DialogHandler.stopPropagation);
                    dialogState.$element.off("keypress", DialogHandler.stopPropagation);
                    forceHide = forceHide || false;
                    if (dialogState) {
                        if (!forceHide && !dialogState.visible) {
                            return;
                        }
                        dialogState.visible = false;
                        var index = DialogHandler._visibleDialogs.indexOf(dialogState);
                        if (index > -1) {
                            DialogHandler._visibleDialogs.splice(index, 1);
                        }
                    }
                    var dialogHiddenStyles = { visibility: "hidden", top: "-22000px" };
                    if (dialogState.initialized) {
                        dialogState.$element.fadeOut(DialogHandler._fadeDuration, function () {
                            dialogState.$element.css(dialogHiddenStyles);
                        });
                        dialogState.onHidden();
                    }
                    else {
                        dialogState.$element.css(dialogHiddenStyles);
                    }
                    if (DialogHandler._visibleDialogs.length > 0) {
                        DialogHandler.setsFocusInDialog(DialogHandler._visibleDialogs[DialogHandler._visibleDialogs.length - 1]);
                    }
                };
                DialogHandler.hideAll = function () {
                    while (Commerce.ArrayExtensions.hasElements(DialogHandler._visibleDialogs)) {
                        var dialogState = Commerce.ArrayExtensions.lastOrUndefined(DialogHandler._visibleDialogs);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                            DialogHandler.hide(dialogState);
                            DialogHandler.buttonClick(dialogState, OperationIds.CANCEL_BUTTON_CLICK, dialogState.viewModel);
                        }
                        else {
                            DialogHandler._visibleDialogs.pop();
                        }
                    }
                };
                DialogHandler.isADialogVisible = function () {
                    return Commerce.ArrayExtensions.hasElements(DialogHandler._visibleDialogs);
                };
                DialogHandler.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var _this = this;
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    var $element = $(element);
                    $element.addClass("commerceDialog win-ui-light");
                    $element.attr("tabindex", -1);
                    var afterShow;
                    if (viewModel.afterShow) {
                        afterShow = function () {
                            viewModel.afterShow.call(viewModel);
                        };
                    }
                    var onHidden = function () {
                        if (viewModel && Commerce.ObjectExtensions.isOfType(viewModel, Controls.ModalDialog) && Commerce.ObjectExtensions.isFunction(viewModel.invokeOnHidden)) {
                            viewModel.invokeOnHidden();
                        }
                    };
                    var dialogState = {
                        buttons: value.buttons || {},
                        viewModel: viewModel,
                        subTitleClick: value.subTitleClick || null,
                        buttonClick: value.buttonClick || null,
                        backClick: value.backClick || null,
                        afterShow: afterShow || null,
                        onHidden: onHidden,
                        showProgressIndicator: value.showProgressIndicator,
                        enableValidation: Commerce.ObjectExtensions.isBoolean(value.enableValidation) ? value.enableValidation : true,
                        initialized: false,
                        visible: false,
                        focus: Commerce.ObjectExtensions.isNullOrUndefined(value.focus) ? true : value.focus,
                        supportBackButton: false,
                        tabIndex: value.tabIndexButton || 0,
                        hasContent: false,
                        isFullView: value.isFullView,
                        $element: $element,
                        $initialContent: null,
                        $background: null,
                        $title: null,
                        $message: null,
                        $dialogContainer: null,
                        isAnimate: true,
                        $subTitle: null,
                        $dialogCloseButton: null,
                        $backButton: null,
                        $topSectionSeperatorSpace: null,
                        $buttonsContainer: null,
                        $primaryButton: null,
                        dialogCloseButtonClick: value.dialogCloseButtonClick || null,
                        closeOnEscButton: false,
                        primaryButtonIndex: -1,
                        keyPressHandler: null
                    };
                    dialogState.keyPressHandler = function (e) { DialogHandler.keyPressed(dialogState, viewModel, e); };
                    var dialogType = value.dialogType || DialogTypes.DEFAULT;
                    switch (dialogType) {
                        case DialogTypes.DEFAULT:
                            dialogState.supportBackButton = false;
                            break;
                        case DialogTypes.SEQUENCE:
                            dialogState.supportBackButton = true;
                            break;
                    }
                    $element.data(DialogHandler._dialogStateKey, dialogState);
                    var $initialContent = $element.contents();
                    var $dialogContainer = $("<div tabindex='-1' class='dialogContainer'></div>");
                    dialogState.$initialContent = $initialContent;
                    if (!dialogState.isFullView) {
                        $dialogContainer.addClass("centerY");
                        dialogState.$dialogContainer = $dialogContainer;
                        $element.append($dialogContainer);
                        var $dialogContainer2 = $("<div tabindex='1' class='dialogContainer2 row'></div>");
                        $dialogContainer.append($dialogContainer2);
                        $dialogContainer2.click(function (e) {
                            e.stopImmediatePropagation();
                        });
                        var $dialogSection1 = $("<div class='col grow marginTop20'></div>");
                        var $dialogSection2 = $("<div class='col grow marginTop20 width0'></div>");
                        var $dialog = $("<div class='col grow marginTop0 width100Percent'></div>");
                        var $dialogSection4 = $("<div class='dialogSection4 col grow marginTop20 width0'></div>");
                        var $dialogSection5 = $("<div class='col grow marginTop12'></div>");
                        var $row = $("<div class='row no-shrink dialogTitlePlacehoder'></div>");
                        $dialog.append($row);
                        $dialogContainer2.append($dialogSection1);
                        if (dialogState.supportBackButton) {
                            $dialogContainer2.append($dialogSection2);
                        }
                        $dialogContainer2.append($dialog);
                        if (dialogState.supportBackButton) {
                            $dialogContainer2.append($dialogSection4);
                        }
                        $dialogContainer2.append($dialogSection5);
                        if (dialogState.supportBackButton) {
                            var $backButtonWrappingDiv = $("<div tabindex='-1'></div>");
                            var $backButton = $("<button class='iconBack primaryFontColor backButton icon-24x24 margin12' aria-label='Back'></button>");
                            this.setDataAxBubbleAttribute($backButton, "backButton");
                            $backButton.click(function (e) { DialogHandler.backClick(dialogState, viewModel, e); });
                            dialogState.$backButton = $backButton;
                            $dialog.find(".dialogTitlePlacehoder").append($backButtonWrappingDiv);
                            $backButtonWrappingDiv.append($backButton);
                        }
                        var $titleWrappingDiv = $("<div class='marginTop0 padTop4 padRight12 padLeft12'></div>");
                        var $title = $("<h2 class='title'></h2>");
                        if (dialogState.supportBackButton) {
                            $titleWrappingDiv = $("<div class='marginTop0 padTop8 padRight12 padLeft12'></div>");
                            $title = $("<h3 class='title'></h3>");
                        }
                        if (value.titleCssClass) {
                            $title.addClass(value.titleCssClass);
                        }
                        $dialog.find(".dialogTitlePlacehoder").append($titleWrappingDiv);
                        $titleWrappingDiv.append($title);
                        dialogState.$title = $title;
                        if (dialogState.dialogCloseButtonClick && Commerce.ObjectExtensions.isFunction(dialogState.dialogCloseButtonClick)) {
                            var $dialogTitleCloseButtonSeparator = $("<div class='col grow'></div>");
                            $dialog.find(".dialogTitlePlacehoder").append($dialogTitleCloseButtonSeparator);
                            var $dialogCloseButtonWrappingDiv = $("<div tabindex='-1'></div>");
                            var $dialogCloseButton = $("<button class='iconCancel primaryFontColor dialogClose icon-24x24 margin12' aria-label='Close'></button>");
                            $dialogCloseButton.click(function (e) {
                                dialogState.dialogCloseButtonClick.call(viewModel);
                            });
                            dialogState.$dialogCloseButton = $dialogCloseButton;
                            $dialog.find(".dialogTitlePlacehoder").append($dialogCloseButtonWrappingDiv);
                            $dialogCloseButtonWrappingDiv.append($dialogCloseButton);
                        }
                        var $subTitleWrappingDiv = $("<div class='marginTop8 padLeft12 padRight12'></div>");
                        var $subTitle = $("<div class='h4'></div>");
                        $subTitle.click(function (e) { DialogHandler.subTitleClick(dialogState, viewModel, e); });
                        $subTitle.addClass(ko.utils.unwrapObservable(value.subTitleCssClass) || "secondaryFontColor");
                        $dialog.append($subTitleWrappingDiv);
                        $subTitleWrappingDiv.append($subTitle);
                        dialogState.$subTitle = $subTitle;
                        var $messageWrappingDiv = $("<div class='marginTop8 padLeft12 padRight12 no-shrink' style='display: none'></div>");
                        var $message = $("<div class='h4 message'></div>");
                        if (value.messageCssClass) {
                            $message.addClass(value.messageCssClass);
                        }
                        $dialog.append($messageWrappingDiv);
                        $messageWrappingDiv.append($message);
                        dialogState.$message = $message;
                        var $topSectionSeperatorSpace = $("<div class='marginTop0'></div>");
                        dialogState.$topSectionSeperatorSpace = $topSectionSeperatorSpace;
                        $dialog.append($topSectionSeperatorSpace);
                        var $dialogForm_1 = null;
                        if (dialogState.enableValidation) {
                            $dialogForm_1 = $("<form autocomplete='off' class=\"col grow padLeft12 padRight12 padTop4 padBottom2\"></form>");
                            $dialogForm_1.on("submit", function (e) {
                                e.preventDefault();
                                return false;
                            });
                            $dialog.append($dialogForm_1);
                            var $contentWrapper = $("<div class='grow col scrollY'></div>");
                            dialogState.hasContent = true;
                            if ($dialogForm_1 != null) {
                                $dialogForm_1.append($contentWrapper);
                            }
                            else {
                                $dialog.append($contentWrapper);
                            }
                            $initialContent.appendTo($contentWrapper);
                            if (dialogState.buttons && dialogState.buttons.length > 0) {
                                var $buttonsContainer_1 = $("<div class='buttonsContainer row no-shrink'></div>");
                                var visibleButtonExist = this.isAnyButtonVisible(dialogState.buttons);
                                if (visibleButtonExist) {
                                    $buttonsContainer_1.addClass("marginTop20");
                                }
                                var primaryButtonIndex_1 = -1;
                                var allButtonsAreSecondary_1 = true;
                                var buttonPrimaryInRightSection_1 = true;
                                var buttonsLeft_1 = [];
                                var buttonsRight_1 = [];
                                dialogState.buttons.forEach(function (button, index) {
                                    var buttonRight = Commerce.ObjectExtensions.isNullOrUndefined(button.flowLeft) || !button.flowLeft;
                                    if (buttonRight) {
                                        buttonsRight_1.push(button);
                                    }
                                    else {
                                        buttonsLeft_1.push(button);
                                    }
                                    if ((button.isPrimary) && (primaryButtonIndex_1 === -1)) {
                                        buttonPrimaryInRightSection_1 = buttonRight;
                                        primaryButtonIndex_1 = (buttonRight ? buttonsRight_1.length : buttonsLeft_1.length) - 1;
                                        allButtonsAreSecondary_1 = false;
                                    }
                                    else if (Commerce.ObjectExtensions.isNullOrUndefined(button.isPrimary)) {
                                        allButtonsAreSecondary_1 = false;
                                    }
                                });
                                if (!allButtonsAreSecondary_1 && (primaryButtonIndex_1 === -1)) {
                                    buttonPrimaryInRightSection_1 = buttonsRight_1.length > 0;
                                    primaryButtonIndex_1 = 0;
                                }
                                dialogState.primaryButtonIndex = primaryButtonIndex_1;
                                var createButton_1 = (function (button, $buttonDivPadding, isButtonPrimary) {
                                    var $buttonContainer = $("<div class='buttonContainer col no-shrink'></div>");
                                    var buttonType = (button.type) ?
                                        button.type : (button.operationId === OperationIds.OK_BUTTON_CLICK ?
                                        "submit" :
                                        "button");
                                    var $button = $("<button></button>");
                                    $button.prop("type", buttonType);
                                    _this.setDataAxBubbleAttribute($button, _this.getButtonIdentifier(button));
                                    button.element = $button;
                                    $button.attr("tabindex", dialogState.tabIndex);
                                    if (isButtonPrimary) {
                                        dialogState.$primaryButton = $button;
                                    }
                                    if (dialogState.tabIndex > 0) {
                                        dialogState.tabIndex++;
                                    }
                                    if (button.cssClass != null) {
                                        $button.addClass(button.cssClass);
                                    }
                                    if (button.id != null) {
                                        $button.attr("id", button.id);
                                    }
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.visible)) {
                                        var isButtonVisible = true;
                                        if (button.visible && button.visible.subscribe && (typeof button.visible === "function")) {
                                            isButtonVisible = button.visible();
                                            button.visible.subscribe(function (newValue) {
                                                var $buttonContaineroutside = $buttonsContainer_1.find(".buttonContainer");
                                                if (newValue) {
                                                    if ($buttonDivPadding) {
                                                        $buttonDivPadding.show();
                                                    }
                                                    $button.show();
                                                    if ($buttonContaineroutside !== undefined && $buttonContaineroutside.length > 1) {
                                                        $buttonContaineroutside.removeClass("blockWidth").addClass("halfWidth");
                                                    }
                                                }
                                                else {
                                                    if ($buttonDivPadding) {
                                                        $buttonDivPadding.hide();
                                                    }
                                                    $button.hide();
                                                    if ($buttonContaineroutside !== undefined && $buttonContaineroutside.length > 1) {
                                                        $buttonContaineroutside.removeClass("halfWidth").addClass("blockWidth");
                                                    }
                                                }
                                                var visibleButtonExist = _this.isAnyButtonVisible(dialogState.buttons);
                                                var marginTop20 = "marginTop20";
                                                if (visibleButtonExist) {
                                                    if (!$buttonsContainer_1.hasClass(marginTop20)) {
                                                        $buttonsContainer_1.addClass(marginTop20);
                                                    }
                                                }
                                                else {
                                                    $buttonsContainer_1.removeClass(marginTop20);
                                                }
                                            });
                                        }
                                        else if (typeof button.visible === "boolean") {
                                            isButtonVisible = button.visible;
                                        }
                                        if (isButtonVisible) {
                                            if ($buttonDivPadding) {
                                                $buttonDivPadding.show();
                                            }
                                            $button.show();
                                        }
                                        else {
                                            if ($buttonDivPadding) {
                                                $buttonDivPadding.hide();
                                            }
                                            $button.hide();
                                        }
                                    }
                                    var isButtonDisabled = button.disable;
                                    if (button.disable) {
                                        var firstButton_1 = $button[0];
                                        if (button.disable && button.disable.subscribe && (typeof button.disable === "function")) {
                                            firstButton_1.disabled = button.disable();
                                            isButtonDisabled = button.disable();
                                            button.disable.subscribe(function (newValue) {
                                                firstButton_1.disabled = newValue;
                                                $button = DialogHandler.addPrimarySecondaryButtonClassNames(button, $button, dialogState, viewModel, isButtonPrimary, newValue);
                                            });
                                        }
                                        else if (typeof button.disable === "boolean") {
                                            firstButton_1.disabled = button.disable;
                                            isButtonDisabled = button.disable;
                                        }
                                    }
                                    else {
                                        isButtonDisabled = false;
                                    }
                                    $button = DialogHandler.addPrimarySecondaryButtonClassNames(button, $button, dialogState, viewModel, isButtonPrimary, isButtonDisabled);
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.focus)) {
                                        if (button.focus.subscribe && (typeof button.focus === "function")) {
                                            if (button.focus.extend) {
                                                button.focus.extend({ notify: "always" });
                                            }
                                            button.focus.subscribe(function (newValue) {
                                                if (newValue) {
                                                    $button.focus();
                                                }
                                            });
                                        }
                                    }
                                    ko.applyBindingsToNode($button[0], { text: button.label });
                                    $button.click(function (e) {
                                        if (button.operationId === OperationIds.OK_BUTTON_CLICK && $dialogForm_1 != null) {
                                            var form = $dialogForm_1.get(0);
                                            if (!Commerce.ObjectExtensions.isNullOrUndefined(form) && !form.checkValidity()) {
                                                return;
                                            }
                                        }
                                        DialogHandler.buttonClick(dialogState, button.operationId, viewModel, e);
                                    });
                                    $buttonsContainer_1.append($buttonContainer);
                                    $buttonContainer.append($button);
                                });
                                buttonsLeft_1.forEach(function (button, index) {
                                    var $buttonDivPadding = null;
                                    if (index > 0) {
                                        $buttonDivPadding = $("<div class='col width16'></div>");
                                        $buttonsContainer_1.append($buttonDivPadding);
                                    }
                                    createButton_1(button, $buttonDivPadding, !buttonPrimaryInRightSection_1 && (index === primaryButtonIndex_1));
                                });
                                $buttonsContainer_1.append($("<div class='col grow'></div>"));
                                buttonsRight_1.forEach(function (button, index) {
                                    var $buttonDivPadding = null;
                                    if (index > 0) {
                                        $buttonDivPadding = $("<div class='col width16'></div>");
                                        $buttonsContainer_1.append($buttonDivPadding);
                                    }
                                    createButton_1(button, $buttonDivPadding, buttonPrimaryInRightSection_1 && (index === primaryButtonIndex_1));
                                });
                                if ($dialogForm_1 != null) {
                                    $dialogForm_1.append($buttonsContainer_1);
                                }
                                else {
                                    $dialog.append($buttonsContainer_1);
                                }
                                dialogState.$buttonsContainer = $buttonsContainer_1;
                            }
                        }
                    }
                    else {
                        $dialogContainer.addClass("center");
                        dialogState.$dialogContainer = $dialogContainer;
                        $element.append($dialogContainer);
                        var $dialogContainer2 = $("<div tabindex='-1' class='fullView row'></div>");
                        $dialogContainer.append($dialogContainer2);
                        $dialogContainer2.click(function (e) {
                            e.stopImmediatePropagation();
                        });
                        $dialogContainer2.append($initialContent);
                    }
                    $element.prepend("<div class='modal-backdrop'></div>");
                    ko.applyBindingsToDescendants(bindingContext, element);
                    var showProgressIndicatorArea = true;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(value.showProgressIndicator) ||
                        (Commerce.ObjectExtensions.isBoolean(value.showProgressIndicator) && !value.showProgressIndicator)) {
                        showProgressIndicatorArea = false;
                    }
                    if (showProgressIndicatorArea) {
                        var $progressIndicatorArea = $("<div tabindex='-1'></div>");
                        $element.append($progressIndicatorArea);
                        ko.applyBindingsToNode($progressIndicatorArea[0], {
                            loader: {
                                visible: value.showProgressIndicator,
                                type: Commerce.Controls.Loader.LoaderType.Dialog
                            }
                        });
                        dialogState.showProgressIndicator = value.showProgressIndicator;
                    }
                    return { controlsDescendantBindings: true };
                };
                DialogHandler.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element);
                    var dialogState = $element.data(DialogHandler._dialogStateKey);
                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                    if (dialogState.$backButton) {
                        var backButtonVisible = ko.utils.unwrapObservable(value.backButtonVisible) || false;
                        if (backButtonVisible) {
                            dialogState.$backButton.show();
                        }
                        else {
                            dialogState.$backButton.hide();
                        }
                    }
                    var title = ko.utils.unwrapObservable(value.title) || "";
                    if (dialogState.$title != null) {
                        dialogState.$title.text(title);
                    }
                    var hideOnEscape = ko.utils.unwrapObservable(value.hideOnEscape);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(hideOnEscape)) {
                        hideOnEscape = true;
                    }
                    dialogState.closeOnEscButton = ko.utils.unwrapObservable(value.closeOnEscButton) || hideOnEscape;
                    var subTitle = ko.utils.unwrapObservable(value.subTitle) || "";
                    if (dialogState.$subTitle != null) {
                        dialogState.$subTitle.text(subTitle);
                        var $wrappingSubtitleDiv = dialogState.$subTitle.parent();
                        if (subTitle.length === 0) {
                            $wrappingSubtitleDiv.hide();
                        }
                        else {
                            $wrappingSubtitleDiv.show();
                        }
                    }
                    var message = ko.utils.unwrapObservable(value.message) || "";
                    if (dialogState.$message != null) {
                        dialogState.$message.text(message);
                        var $wrappingMessageDiv = dialogState.$message.parent();
                        if (message.length === 0) {
                            $wrappingMessageDiv.hide();
                        }
                        else {
                            $wrappingMessageDiv.show();
                        }
                    }
                    if (dialogState.$topSectionSeperatorSpace != null) {
                        var $topSectionSeperatorSpace = dialogState.$topSectionSeperatorSpace;
                        if (dialogState.hasContent) {
                            $topSectionSeperatorSpace.show();
                        }
                        else {
                            $topSectionSeperatorSpace.hide();
                        }
                    }
                    dialogState.isAnimate = ko.utils.unwrapObservable(value.isAnimate);
                    var shouldDialogBeVisible = ko.utils.unwrapObservable(value.visible) || false;
                    if (shouldDialogBeVisible) {
                        DialogHandler.show(dialogState, !dialogState.initialized);
                        $(document.body).addClass("modal-dialog-is-active");
                    }
                    else {
                        $(document.body).removeClass("modal-dialog-is-active");
                        DialogHandler.hide(dialogState, !dialogState.initialized);
                    }
                    dialogState.initialized = true;
                };
                DialogHandler.isAnyButtonVisible = function (buttons) {
                    return buttons.some(function (button) {
                        var visible = button.visible &&
                            button.visible.subscribe &&
                            (typeof button.visible === "function") ?
                            button.visible()
                            : (typeof button.visible === "boolean") ?
                                button.visible :
                                true;
                        return visible === true;
                    });
                };
                DialogHandler.sortByTabindex = function (array) {
                    if (!array || array.length <= 1) {
                        return array;
                    }
                    var getTabindexWeight = function (tabindex) {
                        var weight = 0;
                        if (tabindex > 0) {
                            weight = 1;
                        }
                        else if (tabindex === 0) {
                            weight = 10;
                        }
                        else if ((typeof tabindex !== "number") || isNaN(tabindex)) {
                            weight = 100;
                        }
                        else if (tabindex < 0) {
                            weight = 1000;
                        }
                        return weight;
                    };
                    var sortedArray = Commerce.Utilities.SortingHelper.mergeSort(array.get(), function (a, b) {
                        var tabindex1 = Number(a.getAttribute("tabindex"));
                        var tabindex2 = Number(b.getAttribute("tabindex"));
                        var aWeight = getTabindexWeight(tabindex1);
                        var bWeight = getTabindexWeight(tabindex2);
                        var difference = (aWeight - bWeight) || (tabindex1 - tabindex2);
                        return difference <= 0;
                    });
                    return $(sortedArray);
                };
                DialogHandler.setDataAxBubbleAttribute = function ($element, elementIdentifier) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(elementIdentifier)) {
                        Commerce.BubbleHelper.formatAttribute($element, "messageDialog_{0}", elementIdentifier);
                    }
                };
                DialogHandler.getButtonIdentifier = function (button) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(button.operationId)) {
                        return button.operationId;
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(button.label)) {
                        return button.label.replace(/[^\w]/gi, Commerce.StringExtensions.EMPTY);
                    }
                    return Commerce.StringExtensions.EMPTY;
                };
                DialogHandler._fadeDuration = 100;
                DialogHandler._slideDuration = 250;
                DialogHandler._commerceDialogWidth = "320px";
                DialogHandler._dialogStateKey = "dialogStateKey";
                DialogHandler._visibleDialogs = [];
                return DialogHandler;
            }());
            Dialog.DialogHandler = DialogHandler;
        })(Dialog = Controls.Dialog || (Controls.Dialog = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.dialog = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        Commerce.Controls.Dialog.DialogHandler.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
        return { controlsDescendantBindings: true };
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        Commerce.Controls.Dialog.DialogHandler.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    Commerce.navigator = null;
    var ViewNavigator = (function () {
        function ViewNavigator(element, options) {
            var _this = this;
            this.element = null;
            this.home = Commerce.StringExtensions.EMPTY;
            this.stimefmt = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.LONG_TIME);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                this.element = element;
                $(this.element).empty();
            }
            else {
                this.element = document.createElement("div");
            }
            this._history = [];
            this._createPlaceholderElementAndAddToHistory();
            this._isNavigationDisabled = false;
            this.navigationLog = ko.observableArray([]);
            this.home = options.home;
            this._cachedEventHandlersByEventName = Object.create(null);
            window.addEventListener("resize", this._resized.bind(this));
            document.body.addEventListener("keyup", this._keyupHandler.bind(this));
            document.body.addEventListener("keypress", this._keypressHandler.bind(this));
            document.body.addEventListener("mspointerup", this._mspointerupHandler.bind(this));
            var windowsNamespace = "Windows";
            var Windows = window[windowsNamespace];
            if (typeof Windows !== "undefined") {
                var phoneNamespace = Windows.Phone;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(phoneNamespace) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(phoneNamespace.UI.Input.HardwareButtons)) {
                    phoneNamespace.UI.Input.HardwareButtons.addEventListener("backpressed", function (event) {
                        event.handled = true;
                        _this.navigateBack();
                    });
                }
            }
            Commerce.navigator = this;
            Commerce.Session.instance.addUserLogOnHandler(this.element, function () { _this._clearStateForNewUser(); });
        }
        Object.defineProperty(ViewNavigator.prototype, "isNavigationDisabled", {
            get: function () { return this._isNavigationDisabled; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewNavigator.prototype, "pageControl", {
            get: function () { return this.pageElement && this.pageElement.winControl; },
            enumerable: true,
            configurable: true
        });
        ViewNavigator.prototype.collapse = function (viewConfiguration) {
            this._collapseAndNavigateInternal(viewConfiguration, false);
        };
        ViewNavigator.prototype.collapseAndNavigate = function (viewConfiguration, state) {
            this._collapseAndNavigateInternal(viewConfiguration, true, state);
        };
        ViewNavigator.prototype.navigate = function (viewConfiguration, state) {
            var _this = this;
            if (this._isNavigationDisabled) {
                throw "Navigation is disabled and cannot be performed at this time.";
            }
            var viewName = viewConfiguration.deviceSpecificViewName;
            var location = viewConfiguration.deviceSpecificViewLocation;
            if (Commerce.StringExtensions.isNullOrWhitespace(location)) {
                var errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29056"), viewName);
                Commerce.NotificationHandler.displayErrorMessage(errorMessage);
                return;
            }
            Commerce.RetailLogger.writePageViewEvent(viewName);
            Commerce.UI.Tutorial.onBeforeNavigate();
            var performanceMarker = Commerce.PerformanceLogger.markStart("ViewNavigator.navigate", false);
            var oldElement = this.pageElement;
            var keepAliveViewsCollection = $(this.element).find("[" + ViewNavigator._STAY_ALIVE_VIEW_ELEMENT_ATTRIBUTE + "=\"" + location + "\"]");
            this.appendNavigationLog(location);
            if (keepAliveViewsCollection.length === 0) {
                var newElement_1 = this._createPageElement();
                $(newElement_1).attr(ViewNavigator._ACTION_ELEMENT_ATTRIBUTE, viewName);
                var parentedComplete_1;
                var parented = new WinJS.Promise(function (c) { parentedComplete_1 = c; });
                WinJS.UI.Pages.render(location, newElement_1, state, parented)
                    .then(function (control) {
                    _this.element.insertAdjacentElement("afterbegin", newElement_1);
                    _this._checkForAndRemoveNavigationCircle(newElement_1, oldElement);
                    _this._history.push({ element: newElement_1, viewConfiguration: viewConfiguration });
                    if (_this._isElementVisible(oldElement)) {
                        _this._hideElement(oldElement);
                    }
                    parentedComplete_1();
                    if (control.element.winControl.viewController && control.element.winControl.viewController.keepAliveViewActivated) {
                        $(control.element).attr(ViewNavigator._STAY_ALIVE_VIEW_ELEMENT_ATTRIBUTE, location);
                        control.element.winControl.viewController.keepAliveViewActivated(state);
                    }
                    _this._navigated();
                    Commerce.UI.Tutorial.onAfterNavigate(viewName, control.element);
                    performanceMarker.markEnd();
                });
            }
            else {
                var keepAliveView_1 = keepAliveViewsCollection.get(0);
                var winControl_1 = keepAliveView_1.winControl;
                WinJS.Promise.timeout().then(function () {
                    _this._checkForAndRemoveNavigationCircle(keepAliveView_1, oldElement);
                    _this._history.push({ element: keepAliveView_1, viewConfiguration: viewConfiguration });
                    _this._hideElement(oldElement);
                    _this._showElement(keepAliveView_1);
                    if (winControl_1
                        && winControl_1.viewController
                        && winControl_1.viewController.keepAliveViewActivated) {
                        winControl_1.viewController.keepAliveViewActivated(state);
                    }
                    _this._navigated();
                    Commerce.UI.Tutorial.onAfterNavigate(viewName, keepAliveView_1);
                    performanceMarker.markEnd();
                });
            }
        };
        ViewNavigator.prototype.disableNavigationDuringAsyncExecution = function (methodToExecute) {
            var _this = this;
            Commerce.ThrowIf.argumentIsNotFunction(methodToExecute, "methodToExecute");
            this._isNavigationDisabled = true;
            try {
                return methodToExecute().always(function () {
                    _this._isNavigationDisabled = false;
                });
            }
            catch (ex) {
                this._isNavigationDisabled = false;
                throw ex;
            }
        };
        ViewNavigator.prototype.navigateBack = function (correlationId) {
            correlationId = Commerce.LoggerHelper.resolveCorrelationId(correlationId);
            var destinationViewName = Commerce.StringExtensions.EMPTY;
            var originalViewName = Commerce.StringExtensions.EMPTY;
            if (Commerce.ArrayExtensions.hasElements(this._history)) {
                originalViewName = this.getCurrentViewName();
                if (this._history.length >= 2) {
                    var destinationElement = this._history[this._history.length - 2].element;
                    destinationViewName = $(destinationElement).attr(ViewNavigator._ACTION_ELEMENT_ATTRIBUTE);
                }
            }
            Commerce.RetailLogger.navigateBackStarted(originalViewName, destinationViewName, correlationId);
            if (this._isNavigationDisabled) {
                throw "Navigation is disabled and cannot be performed at this time.";
            }
            if (!this.isBackNavigationEnabled) {
                return;
            }
            var currentElement = this.pageElement;
            if (currentElement.winControl && currentElement.winControl.viewController) {
                var onNavigateBack = currentElement.winControl.viewController.onNavigateBack;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(onNavigateBack) && Commerce.ObjectExtensions.isFunction(onNavigateBack)) {
                    var shouldContinue = onNavigateBack.call(currentElement.winControl.viewController);
                    if (!shouldContinue) {
                        Commerce.RetailLogger.navigateBackCanceled(originalViewName, destinationViewName, correlationId);
                        return;
                    }
                }
            }
            Commerce.UI.Tutorial.onBeforeNavigate();
            Commerce.ViewModelAdapter.raiseTaskRecorderEvent(currentElement);
            this._navigateBackInternal();
            Commerce.RetailLogger.navigateBackFinished(originalViewName, destinationViewName, correlationId);
        };
        ViewNavigator.prototype.addEventHandler = function (element, eventName, eventHandler) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                throw new Error("navigator.addEventHandler: element is a required parameter.");
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName)) {
                throw new Error("navigator.addEventHandler: eventName is a required parameter.");
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(eventHandler)) {
                throw new Error("navigator.addEventHandler: eventHandler is a required parameter.");
            }
            this._cachedEventHandlersByEventName[eventName] = null;
            var $element = $(element);
            var globalEventHandlers = $element.data(ViewNavigator._GLOBAL_EVENTS_ATTRIBUTE_NAME);
            if (!globalEventHandlers) {
                globalEventHandlers = {};
            }
            if (!globalEventHandlers[eventName]) {
                globalEventHandlers[eventName] = [];
            }
            globalEventHandlers[eventName].push(eventHandler);
            $element.data(ViewNavigator._GLOBAL_EVENTS_ATTRIBUTE_NAME, globalEventHandlers);
            var removeHandler = function () {
                _this.removeEventHandler(element, eventName, eventHandler);
            };
            $element.on("remove", removeHandler.bind(this));
        };
        ViewNavigator.prototype.getCurrentViewName = function () {
            var currentViewConfiguration = this._history[this._history.length - 1].viewConfiguration;
            if (Commerce.ObjectExtensions.isNullOrUndefined(currentViewConfiguration)) {
                return $(this.pageElement).attr(ViewNavigator._ACTION_ELEMENT_ATTRIBUTE);
            }
            else {
                return currentViewConfiguration.page;
            }
        };
        Object.defineProperty(ViewNavigator.prototype, "pageElement", {
            get: function () { return this._history[this._history.length - 1].element; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewNavigator.prototype, "backButton", {
            get: function () { return this.pageElement.querySelector("nav .iconBack"); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewNavigator.prototype, "isBackNavigationEnabled", {
            get: function () {
                return (this.backButton && !this.backButton.disabled) ||
                    (this.pageElement.winControl && this.pageElement.winControl.viewController
                        && this.pageElement.winControl.viewController.isBackNavigationEnabled);
            },
            enumerable: true,
            configurable: true
        });
        ViewNavigator.prototype.removeEventHandler = function (element, eventName, eventHandler) {
            this._cachedEventHandlersByEventName[eventName] = null;
            var $element = $(element);
            var globalEventHandlers = $element.data(ViewNavigator._GLOBAL_EVENTS_ATTRIBUTE_NAME);
            if (globalEventHandlers) {
                var eventHandlers = globalEventHandlers[eventName];
                if (eventHandlers && eventHandlers.length > 0) {
                    var index = eventHandlers.indexOf(eventHandler);
                    if (index >= 0) {
                        eventHandlers.splice(index, 1);
                    }
                }
            }
        };
        ViewNavigator.prototype._resized = function (event) {
            if (this.pageControl && this.pageControl.updateLayout) {
                this.pageControl.updateLayout.call(this.pageControl, this.pageElement);
            }
        };
        ViewNavigator.prototype._hideElement = function (element) {
            Commerce.Controls.Dialog.DialogHandler.hideAll();
            if (element.winControl
                && element.winControl.viewController) {
                if (Commerce.ObjectExtensions.isFunction(element.winControl.viewController.onBarcodeScanned)) {
                    Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                }
                if (Commerce.ObjectExtensions.isFunction(element.winControl.viewController.onMsrSwiped)) {
                    Commerce.Peripherals.instance.magneticStripeReader.disableAsync();
                }
                if (element.winControl.viewController.captureGlobalInputForNumPad
                    && element.winControl.viewController.numPadInputBroker) {
                    Commerce.Peripherals.instance.numPad.disable();
                }
                if (Commerce.ObjectExtensions.isFunction(element.winControl.viewController.onHidden)) {
                    element.winControl.viewController.onHidden();
                }
            }
            this._addHiddenStyles(element);
            this._enableAppBar(element, false);
        };
        ViewNavigator.prototype._addHiddenStyles = function (element) {
            element.style.position = "fixed";
            element.style.left = "-200000px";
            element.style.visibility = ViewNavigator._HIDDEN_STYLE_VISIBILITY;
        };
        ViewNavigator.prototype._removeHiddenStyles = function (element) {
            element.style.visibility = ViewNavigator._VISIBLE_STYLE_VISIBILITY;
            element.style.position = "static";
            element.style.left = "";
        };
        ViewNavigator.prototype._isElementVisible = function (element) {
            return (element.style.visibility !== ViewNavigator._HIDDEN_STYLE_VISIBILITY);
        };
        ViewNavigator.prototype._showElement = function (element) {
            if (element) {
                this._removeHiddenStyles(element);
                this._enableAppBar(element, true);
                if (element.winControl
                    && element.winControl.viewController) {
                    if (Commerce.ObjectExtensions.isFunction(element.winControl.viewController.onBarcodeScanned)) {
                        Commerce.Peripherals.instance.barcodeScanner.enableAsync(element.winControl.viewController.onBarcodeScanned.bind(element.winControl.viewController));
                    }
                    if (Commerce.ObjectExtensions.isFunction(element.winControl.viewController.onMsrSwiped)) {
                        Commerce.Peripherals.instance.magneticStripeReader.enableAsync(element.winControl.viewController.onMsrSwiped.bind(element.winControl.viewController));
                    }
                    if (Commerce.ObjectExtensions.isFunction(element.winControl.viewController.onShown)) {
                        element.winControl.viewController.onShown();
                    }
                    if (element.winControl.viewController.captureGlobalInputForNumPad
                        && element.winControl.viewController.numPadInputBroker) {
                        Commerce.Peripherals.instance.numPad.enable(element.winControl.viewController.numPadInputBroker);
                    }
                }
                if (element.children.length !== 0) {
                    Commerce.Interaction.triggerEvent(element.children[0], Commerce.InteractionEvents.VIEWSHOWN);
                }
            }
        };
        ViewNavigator.prototype._createPageElement = function () {
            var element = document.createElement("div");
            element.style.width = "100%";
            element.style.height = "100%";
            return element;
        };
        ViewNavigator.prototype._keypressHandler = function (args) {
            if (args.key === "Backspace") {
                this.navigateBack();
            }
        };
        ViewNavigator.prototype._keyupHandler = function (args) {
            if ((args.key === "Left" && args.altKey) || (args.key === "BrowserBack")) {
                this.navigateBack();
            }
        };
        ViewNavigator.prototype._mspointerupHandler = function (args) {
            if (args.button === 3) {
                this.navigateBack();
            }
        };
        ViewNavigator.prototype.appendNavigationLog = function (location) {
            this.navigationLog().push(this.stimefmt.format(new Date()) + location);
        };
        ViewNavigator.prototype._collapseAndNavigateInternal = function (viewConfiguration, navigate, state) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(viewConfiguration)) {
                throw "viewConfiguration not defined for _collapseAndNavigateInternal.";
            }
            if (this._isNavigationDisabled) {
                throw "Navigation is disabled and cannot be performed at this time.";
            }
            var viewElement = undefined;
            for (var i = (this._history.length - 1); i >= 0; i--) {
                var currentElement = this._history[i].element;
                var currentActionElementAttribute = $(currentElement).attr(ViewNavigator._ACTION_ELEMENT_ATTRIBUTE);
                if (currentActionElementAttribute === viewConfiguration.deviceSpecificViewName) {
                    viewElement = currentElement;
                    break;
                }
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(viewElement)) {
                if (navigate) {
                    var errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29057"), viewConfiguration.deviceSpecificViewName);
                    Commerce.NotificationHandler.displayErrorMessage(errorMessage);
                }
            }
            else {
                var viewStayAliveViewElementAttribute = $(viewElement).attr(ViewNavigator._STAY_ALIVE_VIEW_ELEMENT_ATTRIBUTE);
                if (!Commerce.StringExtensions.isNullOrWhitespace(viewStayAliveViewElementAttribute) && navigate) {
                    this.navigate(viewConfiguration, state);
                    return;
                }
                else {
                    var topEntryFromHistory = undefined;
                    var topElementFromNavigationLog = undefined;
                    var topElementsLoaded = false;
                    while (true) {
                        var removedEntry = this._history.pop();
                        var removedElement = removedEntry.element;
                        var removedActionElementAttribute = $(removedElement).attr(ViewNavigator._ACTION_ELEMENT_ATTRIBUTE);
                        if (removedActionElementAttribute === viewConfiguration.deviceSpecificViewName) {
                            if (navigate) {
                                this.navigationLog().pop();
                                this._removeElement(removedElement);
                                this.navigate(viewConfiguration, state);
                                return;
                            }
                            else {
                                this._history.push(removedEntry);
                                if (topElementsLoaded) {
                                    this._history.push(topEntryFromHistory);
                                    this.navigationLog().push(topElementFromNavigationLog);
                                }
                                return;
                            }
                        }
                        else {
                            if (!navigate && !topElementsLoaded) {
                                topEntryFromHistory = removedEntry;
                                topElementFromNavigationLog = this.navigationLog().pop();
                                topElementsLoaded = true;
                            }
                            else {
                                this.navigationLog().pop();
                                this._removeElement(removedElement);
                            }
                        }
                    }
                }
            }
        };
        ViewNavigator.prototype._enableAppBar = function (element, appBarEnabled) {
            var appBar = element.querySelector("#commandAppBar");
            if (appBar) {
                appBar.winControl.disabled = (!appBarEnabled);
            }
        };
        ViewNavigator.prototype._removeElement = function (removeElement, removeAll) {
            if (!removeAll &&
                !Commerce.ObjectExtensions.isNullOrUndefined(removeElement.winControl) &&
                !Commerce.ObjectExtensions.isNullOrUndefined(removeElement.winControl.viewController) &&
                Commerce.ObjectExtensions.isFunction(removeElement.winControl.viewController.keepAliveViewActivated)) {
                return;
            }
            var $removeElement = $(removeElement);
            if ($removeElement.hasClass(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME)) {
                var disposableObjects = $removeElement.data(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME);
                while (disposableObjects.length > 0) {
                    var disposableObject = disposableObjects.pop();
                    Commerce.ObjectExtensions.tryDispose(disposableObject);
                }
                $removeElement.removeClass(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME).removeData(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME);
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(removeElement.winControl)) {
                if (Commerce.ObjectExtensions.isFunction(removeElement.winControl.unload)) {
                    removeElement.winControl.unload();
                }
                Commerce.ObjectExtensions.tryDispose(removeElement.winControl.viewController);
                WinJS.Utilities.disposeSubTree(removeElement);
                Commerce.ObjectExtensions.tryDispose(removeElement.winControl);
            }
            ko.removeNode(removeElement);
        };
        ViewNavigator.prototype._checkForAndRemoveNavigationCircle = function (newElement, oldElement) {
            if (this._history.length >= 2) {
                var firstPageInHistory = this._history[this._history.length - 2].element;
                if (oldElement.winControl &&
                    oldElement.winControl.viewController &&
                    oldElement.winControl.viewController.saveInHistory === false &&
                    firstPageInHistory && newElement.winControl.uri === firstPageInHistory.winControl.uri) {
                    this._removeElement(this._history.pop().element);
                    this._removeElement(this._history.pop().element);
                    this.navigationLog().pop();
                    this.navigationLog().pop();
                }
            }
        };
        ViewNavigator.prototype._navigated = function () {
            var _this = this;
            if (this.isBackNavigationEnabled) {
                if (this._history.length > ViewNavigator._NUMBER_OF_PAGES_IN_HISTORY) {
                    for (var i = 0; i < this._history.length; i++) {
                        var entry = this._history[i];
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(entry)
                            && Commerce.StringExtensions.isNullOrWhitespace($(entry.element).attr(ViewNavigator._STAY_ALIVE_VIEW_ELEMENT_ATTRIBUTE))) {
                            this._removeElement(this._history.splice(i, 1)[0].element);
                            break;
                        }
                    }
                }
                var backButton = this.backButton;
                if (backButton) {
                    backButton.onclick = function () {
                        _this.navigateBack();
                    };
                    if (this._history.length > 1) {
                        backButton.removeAttribute("disabled");
                    }
                    else {
                        backButton.setAttribute("disabled", "disabled");
                    }
                }
            }
            else {
                var currentView = this._history.pop();
                var view = this._history.pop();
                while (view) {
                    this._removeElement(view.element);
                    view = this._history.pop();
                }
                this._history.push(currentView);
            }
            var $element = $(this.pageElement);
            var disposableObjects;
            if ($element.hasClass(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME)) {
                disposableObjects = $element.data(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME);
            }
            else {
                disposableObjects = [];
                $element.addClass(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME).data(ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME, disposableObjects);
            }
            Object.keys(Commerce.Session.instance).forEach(function (property) {
                var instanceProperty = Commerce.Session.instance[property];
                if (ko.isObservable(instanceProperty)) {
                    var changeContainer = instanceProperty.w || instanceProperty.F;
                    if (Commerce.ArrayExtensions.hasElements(changeContainer.change)) {
                        for (var i = changeContainer.change.length - 1; i >= 0; i--) {
                            var changeHandler = changeContainer.change[i];
                            if (changeHandler.taggedForDispose) {
                                break;
                            }
                            disposableObjects.push(changeHandler);
                            changeHandler.taggedForDispose = true;
                        }
                    }
                }
            });
        };
        ViewNavigator.prototype._clearStateForNewUser = function () {
            this._hideElement(this.pageElement);
            this._clearAllContent();
        };
        ViewNavigator.prototype._clearAllContent = function () {
            this._history.splice(0, this._history.length);
            while (this.element.hasChildNodes()) {
                this._removeElement(this.element.lastChild, true);
            }
            $(document.body).find("[IRemoveable]").each(function (index, element) {
                ko.removeNode(element);
            });
            this._createPlaceholderElementAndAddToHistory();
        };
        ViewNavigator.prototype._createPlaceholderElementAndAddToHistory = function () {
            var pageElement = this._createPageElement();
            this.element.appendChild(pageElement);
            this._history.push({ element: pageElement });
        };
        ViewNavigator.prototype._navigateBackInternal = function () {
            var currentElement = this._history.pop().element;
            this.navigationLog().pop();
            this._hideElement(currentElement);
            this._removeElement(currentElement);
            var previousElement = this.pageElement;
            var pageName = $(previousElement).attr(ViewNavigator._ACTION_ELEMENT_ATTRIBUTE);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(pageName)) {
                Commerce.RetailLogger.writePageViewEvent(pageName);
            }
            Commerce.UI.Tutorial.onAfterNavigate(pageName, previousElement);
            this._showElement(previousElement);
        };
        ViewNavigator._ACTION_ELEMENT_ATTRIBUTE = "Action";
        ViewNavigator._STAY_ALIVE_VIEW_ELEMENT_ATTRIBUTE = "IKeepAliveView";
        ViewNavigator._GLOBAL_EVENTS_ATTRIBUTE_NAME = "GlobalEvents";
        ViewNavigator._DISPOSABLE_OBJECTS_TAG_NAME = "DisposableObjects";
        ViewNavigator._NUMBER_OF_PAGES_IN_HISTORY = 10;
        ViewNavigator._HIDDEN_STYLE_VISIBILITY = "hidden";
        ViewNavigator._VISIBLE_STYLE_VISIBILITY = "visible";
        return ViewNavigator;
    }());
    Commerce.ViewNavigator = ViewNavigator;
    WinJS.Utilities.markSupportedForProcessing(ViewNavigator);
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CustomerAffiliationsViewController = (function (_super) {
            __extends(CustomerAffiliationsViewController, _super);
            function CustomerAffiliationsViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.CustomerAffiliationsViewModel(options);
                _this.viewTitle = _this.viewModel.customer().Name;
                return _this;
            }
            CustomerAffiliationsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            CustomerAffiliationsViewController.prototype.navigateToCustomerDetailPage = function () {
                var viewOptions = {
                    accountNumber: this.viewModel.customer().AccountNumber,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("CustomerDetailsView", viewOptions);
            };
            return CustomerAffiliationsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CustomerAffiliationsViewController = CustomerAffiliationsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var RecentPurchasesViewController = (function (_super) {
            __extends(RecentPurchasesViewController, _super);
            function RecentPurchasesViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.RecentPurchasesViewModel(options);
                return _this;
            }
            RecentPurchasesViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            return RecentPurchasesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.RecentPurchasesViewController = RecentPurchasesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var PaymentViewController = (function (_super) {
            __extends(PaymentViewController, _super);
            function PaymentViewController(options) {
                var _this = _super.call(this, true) || this;
                if (options === null || options.tenderType === null) {
                    throw "Invalid argument exception";
                }
                _this._options = options;
                _this._resolvePendingResults = true;
                _this._options.tokenizeCard = _this._options.tokenizeCard || false;
                _this.tokenizeCard = ko.observable(_this._options.tokenizeCard);
                _this.cardPaymentAcceptPageUrl = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.cardPaymentAcceptPageSubmitUrl = _this._options.cardPaymentAcceptPageSubmitUrl;
                _this.cardPaymentAcceptMessageOrigin = _this._options.cardPaymentAcceptMessageOrigin;
                _this.isCardPaymentAcceptPage = ko.observable(!Commerce.StringExtensions.isNullOrWhitespace(_this._options.cardPaymentAcceptPageUrl));
                _this.cardPaymentAcceptMessageHandlerProxied = $.proxy(_this.cardPaymentAcceptMessageHandler, _this);
                _this.cardPaymentAcceptResultAccessCode = null;
                _this.paymentViewModel = _this.createPaymentViewModel(_this._options);
                var customerCardViewModelOptions = {
                    isLoyaltyCardDataReadOnly: true,
                    onAddressEditClicked: function (address) {
                        var shouldSaveChanges = true;
                        var addressAddEditOptions = Commerce.ViewModels.AddressAddEditViewModelOptions.createInstance(Commerce.Session.instance.Customer, address, shouldSaveChanges, PaymentViewController.PAYMENT_VIEW_NAME, _this._options);
                        Commerce.ViewModelAdapter.navigate("AddressAddEditView", addressAddEditOptions);
                    }
                };
                _this._customerCardViewModel = new Commerce.ViewModels.CustomerCardViewModel(customerCardViewModelOptions);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart)) {
                    _this.paymentViewModel.customerId(Commerce.Session.instance.cart.CustomerId);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._options.paymentCardInfo)) {
                    _this.paymentViewModel.updateCardInfo(_this._options.paymentCardInfo, _this._options.paymentCardSource);
                    _this._preloadPaymentCard = true;
                }
                _this.indeterminateWaitVisible = ko.observable(false);
                _this._cardInputOptions = ko.observableArray([]);
                _this._cardInputOption = ko.observable(0);
                _this._cardInputOption.subscribe(_this.clearCardFields, _this);
                _this.isSwipeCard = ko.computed(function () { return _this._cardInputOption() === 0; }, _this);
                _this.isManualCardEntry = ko.computed(function () { return _this._cardInputOption() === 1; }, _this);
                _this.isApprovalCode = ko.computed(function () { return _this._cardInputOption() === 2; }, _this);
                _this._cardInputOption(0);
                _this._hasForeignCurrencyDropDownBeenDisplayed = _this._options.tenderType.OperationId !== Commerce.Operations.RetailOperation.PayCurrency;
                _this.isTypeCashPayment = ko.computed(_this.computeIsTypeCashPayment, _this);
                _this.displayCurrencies = ko.computed(_this.computeShowCurrencies, _this);
                _this.toggleShowHideCurrencyCodeFlyout = ko.observable(function () { return; });
                _this.hideCurrencyCodeFlyout = ko.observable(function () { return; });
                _this.showCurrencyCodeFlyout = ko.observable(function () { return; });
                _this.forceLayoutForeignCurrencyListView = ko.observable(function () { return; });
                _this.setFocusCurrencyList = ko.observable(false);
                _this.currencyConversionString = ko.computed(_this.computeCurrencyConversionString, _this);
                _this.showDenominations = ko.computed(_this.computeShowDenominations, _this);
                _this.showCurrencyDenominations = ko.computed(_this.computeShowCurrencyDenominations, _this);
                _this.isCardPaymentAcceptSwipeSent = false;
                _this.isCardPaymentAcceptHeightReceived = false;
                _this.showPaymentDetails = ko.computed(_this.computeShowPaymentDetails, _this);
                _this.showCreditMemoBalance = ko.observable(false);
                _this.showAccountDetails = ko.computed(_this.computeShowAccountDetails, _this);
                _this.customerType = ko.computed(_this.computeCustomerType, _this);
                _this.isDebitCard = ko.observable(false);
                _this._isViewShown = false;
                _this.addControl(_this._approvePartialAmountDialog = new Commerce.Controls.ApprovePartialAmountDialog());
                _this.addControl(_this._cashbackDialog = new Commerce.Controls.CashbackDialog());
                _this.viewTitle = ko.observable(_this.paymentViewModel.tenderTypeName());
                return _this;
            }
            PaymentViewController.prototype.load = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this._isViewShown = false;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    _this.paymentViewModel.loadAsync().done(function () {
                        _this._cardInputOptions(_this.getCardInputOptions());
                        asyncResult.resolve();
                    }).fail(function (errors) {
                        _this.failedLoadAsync(errors).always(function () {
                            asyncResult.resolve();
                        });
                    });
                    return asyncResult;
                });
                asyncQueue.enqueue(function () {
                    if (_this.isCardPaymentAcceptPage()) {
                        _this.addCardPaymentAcceptListener();
                        var cardPaymentAcceptIframe = document.getElementById("cardPaymentAcceptFrame");
                        cardPaymentAcceptIframe.contentWindow.focus();
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (_this._options.tenderType.OperationId === Commerce.Operations.RetailOperation.PayCustomerAccount
                        || _this._options.tenderType.OperationId === Commerce.Operations.RetailOperation.PayLoyalty) {
                        _this.handleVoidAsyncResult(_this._customerCardViewModel.loadCustomerAsync(Commerce.Session.instance.cart.CustomerId))
                            .done(function () {
                            var customer = _this._customerCardViewModel.customer();
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.StringExtensions.isNullOrWhitespace(customer.InvoiceAccount)) {
                                _this.paymentViewModel.customerId(customer.InvoiceAccount);
                            }
                        }).always(function () {
                            asyncResult.resolve();
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                });
                asyncQueue.run().always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            PaymentViewController.prototype.onShown = function () {
                var _this = this;
                this._resolvePendingResults = true;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    if (_this.isCardPaymentAcceptPage()) {
                        var swipe = cardInfo.Track1 + cardInfo.Track2;
                        _this.sendCardPaymentAcceptSwipeMessage(swipe);
                    }
                    else if (!_this.paymentViewModel.isCardPayment || (!_this.isManualCardEntry())) {
                        var filteredCardTypes_1;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            _this.paymentViewModel.updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.MSR);
                            return Commerce.AsyncResult.createResolved();
                        }).enqueue(function () {
                            var request = new Commerce.GetPaymentCardTypeByBinRangeClientRequest(_this.paymentViewModel.paymentCard.CardNumber(), true, _this.paymentViewModel.cardInfo, null, correlationId);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                                .done(function (result) {
                                if (!result.canceled) {
                                    filteredCardTypes_1 = result.data.result;
                                }
                            }).map(function (result) {
                                return { canceled: result.canceled, data: result.data.result };
                            });
                        }).enqueue(function () {
                            if (filteredCardTypes_1.length === 0) {
                                _this.paymentViewModel.setPaymentCardType(null);
                                return Commerce.AsyncResult.createResolved();
                            }
                            else if (filteredCardTypes_1.length === 1) {
                                _this.paymentViewModel.setPaymentCardType(filteredCardTypes_1[0]);
                                return Commerce.AsyncResult.createResolved();
                            }
                            else {
                                return _this.selectCardType(filteredCardTypes_1).done(function (dataResult) {
                                    if (!dataResult.canceled) {
                                        _this.paymentViewModel.setPaymentCardType(dataResult.data);
                                    }
                                });
                            }
                        }).run();
                    }
                    else {
                        Commerce.NotificationHandler.displayErrorMessage("string_7207");
                    }
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.PAYMENTS);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.scannerMessageEventHandler(barcode);
                });
                if (this._preloadPaymentCard && !this.paymentViewModel.isCardTypeSet()) {
                    this.indeterminateWaitVisible(true);
                    this.getCardTypeAsync(correlationId).done(function () {
                        _this.indeterminateWaitVisible(false);
                        _this._isViewShown = true;
                    }).fail(function (errors) {
                        _this.indeterminateWaitVisible(false);
                        _this._isViewShown = true;
                        Commerce.NotificationHandler.displayClientErrors(errors)
                            .done(function () {
                            Commerce.ViewModelAdapter.navigateBack();
                        }).fail(function () {
                            Commerce.ViewModelAdapter.navigateBack();
                        });
                    });
                }
                else {
                    this._isViewShown = true;
                }
                this.enableNumPad();
                this.paymentViewModel.onShown();
            };
            PaymentViewController.prototype.afterBind = function () {
                if (this.computeIsCurrencyPayment()) {
                    this.showCurrencyCodeFlyout()();
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptPageUrl())) {
                    var updatedPaymentAcceptUrl = this._updateCardPaymentAcceptPageUrl(this._options.cardPaymentAcceptPageUrl, this._options.cardPaymentAcceptPageSubmitUrl);
                    this.cardPaymentAcceptPageUrl(updatedPaymentAcceptUrl);
                }
            };
            PaymentViewController.prototype.onHidden = function () {
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.PAYMENTS);
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                if (this.isCardPaymentAcceptPage()) {
                    this.removeCardPaymentAcceptListener();
                }
                this._isViewShown = false;
                if (this.paymentViewModel.onPaymentResultAvailableAsync && this._resolvePendingResults) {
                    this.paymentViewModel.onPaymentResultAvailableAsync(null);
                }
                this.disableNumPad();
            };
            Object.defineProperty(PaymentViewController.prototype, "titlePaymentAmount", {
                get: function () {
                    return Commerce.ViewModelAdapter.getResourceString(this._options.tokenizeCard ? "string_1173" : "string_1107");
                },
                enumerable: true,
                configurable: true
            });
            PaymentViewController.prototype.denominationsLineViewGroupInfo = function () {
                return {
                    enableCellSpanning: true,
                    cellWidth: PaymentViewController.denominationBlockSize,
                    cellHeight: PaymentViewController.denominationBlockSize
                };
            };
            PaymentViewController.prototype.denominationsLineViewItemInfo = function (itemIndex) {
                var denominations = this.paymentViewModel.currencyDenominations();
                var denomLength = denominations[itemIndex].Amount.toString().length;
                var numBlocks = Math.ceil(denomLength / 5);
                return {
                    width: numBlocks === 0 ? 0 : Math.round(PaymentViewController.denominationBlockSize * numBlocks) + Math.round(10 * (numBlocks - 1)),
                    height: PaymentViewController.denominationBlockSize
                };
            };
            PaymentViewController.prototype.foreignCurrencyItemInvokedHandler = function (itemSelected) {
                this.hideCurrencyCodeFlyout()();
                if (Commerce.StringExtensions.compare(itemSelected.CurrencyCode, this.paymentViewModel.currency()) !== 0) {
                    this.paymentViewModel.setCurrency(itemSelected.CurrencyCode, true);
                    this.paymentViewModel.cashTendered = 0;
                }
            };
            PaymentViewController.prototype.denominationInvokedHandler = function (itemSelected) {
                var paymentAmount = Commerce.NumberExtensions.formatNumber(itemSelected.Amount, Commerce.NumberExtensions.getDecimalPrecision(itemSelected.Currency));
                this.paymentViewModel.cashTendered = this.paymentViewModel.cashTendered + Commerce.NumberExtensions.parseNumber(paymentAmount);
                this.paymentViewModel.setPaymentAmountText(this.paymentViewModel.cashTendered);
                if (this.paymentViewModel.cashTendered >= this.paymentViewModel.fullAmount()) {
                    this.beginProcessingPayment(this.paymentViewModel.cashTendered.toString());
                }
                return true;
            };
            PaymentViewController.prototype.areTenderAmountsValidForCardPayment = function (paymentAmount) {
                if (isNaN(paymentAmount)) {
                    paymentAmount = this.paymentViewModel.getPaymentAmount();
                }
                var tenderLineToValidate = {
                    Amount: paymentAmount,
                    Currency: this.paymentViewModel.currency(),
                    TenderTypeId: this.paymentViewModel.tenderTypeId(),
                    CashBackAmount: this.paymentViewModel.cashBackAmount(),
                    CardTypeId: this.paymentViewModel.cardTypeId()
                };
                return this.paymentViewModel.validateTenderLineForAdd(tenderLineToValidate);
            };
            PaymentViewController.prototype.onNumPadEnterEventHandler = function (result) {
                this.beginProcessingPayment(result.value);
            };
            PaymentViewController.prototype.getCardTypeAsync = function (paymentCorrelationId) {
                var _this = this;
                var filteredCardTypes;
                var isSwipe = this.paymentViewModel.paymentCard.IsSwipe();
                var asyncQueue = new Commerce.AsyncQueue();
                var self = this;
                return asyncQueue
                    .enqueue(function () {
                    var correlationId = !Commerce.StringExtensions.isNullOrWhitespace(paymentCorrelationId)
                        ? paymentCorrelationId : Commerce.LoggerHelper.getNewCorrelationId();
                    var request = new Commerce.GetPaymentCardTypeByBinRangeClientRequest(_this.paymentViewModel.paymentCard.CardNumber(), isSwipe, _this.paymentViewModel.cardInfo, null, correlationId);
                    var asyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .done(function (result) {
                        if (!result.canceled) {
                            filteredCardTypes = result.data.result;
                        }
                    }).map(function (result) {
                        return { canceled: result.canceled, data: result.data.result };
                    });
                    return asyncQueue.cancelOn(asyncResult);
                })
                    .enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult(_this);
                    _this.indeterminateWaitVisible(false);
                    if (_this.paymentViewModel.isGiftCardPayment) {
                        var giftCardOnlyFilteredCardTypes = _this.filterGiftCardCardTypes(filteredCardTypes);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(giftCardOnlyFilteredCardTypes) && Commerce.ArrayExtensions.hasElements(giftCardOnlyFilteredCardTypes)) {
                            _this.paymentViewModel.setPaymentCardType(giftCardOnlyFilteredCardTypes[0]);
                            asyncResult.resolve();
                        }
                        else {
                            Commerce.ApplicationContext.Instance.cardTypesAsync.value.done(function (cardTypes) {
                                var filteredGiftCardCardTypes = _this.filterGiftCardCardTypes(cardTypes);
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(filteredGiftCardCardTypes) && Commerce.ArrayExtensions.hasElements(filteredGiftCardCardTypes)) {
                                    _this.paymentViewModel.setPaymentCardType(filteredGiftCardCardTypes[0]);
                                    asyncResult.resolve();
                                }
                                else {
                                    var unknownCardTypeInfo = {
                                        RecordId: 0,
                                        TypeId: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                                        Name: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                                        CardTypeValue: Commerce.Proxy.Entities.CardType.Unknown,
                                        Issuer: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                                        NumberFrom: "0",
                                        NumberTo: "0",
                                        CashBackLimit: 0,
                                        AllowManualInput: false,
                                        CheckModulus: false,
                                        ExtensionProperties: []
                                    };
                                    _this.paymentViewModel.setPaymentCardType(unknownCardTypeInfo);
                                    asyncResult.resolve();
                                }
                            }).fail(function (errors) {
                                var unknownCardTypeInfo = {
                                    RecordId: 0,
                                    TypeId: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                                    Name: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                                    CardTypeValue: Commerce.Proxy.Entities.CardType.Unknown,
                                    Issuer: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                                    NumberFrom: "0",
                                    NumberTo: "0",
                                    CashBackLimit: 0,
                                    AllowManualInput: false,
                                    CheckModulus: false,
                                    ExtensionProperties: []
                                };
                                _this.paymentViewModel.setPaymentCardType(unknownCardTypeInfo);
                                asyncResult.resolve();
                            });
                        }
                    }
                    else {
                        if (filteredCardTypes.length === 0) {
                            var tenderType = self.paymentViewModel.tenderType();
                            Commerce.RetailLogger.viewsOrderPaymentViewFilterCardTypesFailed(isSwipe, self.paymentViewModel.cardInfo ? self.paymentViewModel.cardInfo.CardTypeId : Commerce.StringExtensions.EMPTY, tenderType.TenderTypeId, tenderType.Name, self.paymentViewModel.cardInfo.CardNumber.substring(0, 1));
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CARD_NOT_SUPPORTED)]);
                        }
                        else if (filteredCardTypes.length === 1) {
                            _this.paymentViewModel.setPaymentCardType(filteredCardTypes[0]);
                            asyncResult.resolve();
                        }
                        else {
                            _this.selectCardType(filteredCardTypes).done(function (dataResult) {
                                if (!dataResult.canceled) {
                                    _this.paymentViewModel.setPaymentCardType(dataResult.data);
                                    asyncResult.resolve();
                                }
                                else {
                                    asyncResult.reject(null);
                                }
                            });
                        }
                    }
                    return asyncResult;
                }).run();
            };
            PaymentViewController.prototype.checkGiftCardBalance = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                var cardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
                this.paymentViewModel.updateCardInfo({ CardNumber: this.paymentViewModel.giftCardId(), CardTypeId: cardTypeId });
                this.paymentViewModel.checkGiftCardBalance(this.paymentViewModel.tenderType(), this.paymentViewModel.giftCardId()).done(function () {
                    _this.indeterminateWaitVisible(false);
                }).fail(function (errors) {
                    _this.paymentErrorCallback(errors);
                });
            };
            PaymentViewController.prototype.checkCreditMemoBalance = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.paymentViewModel.checkCreditMemoAmount().done(function () {
                    _this.indeterminateWaitVisible(false);
                    _this.showCreditMemoBalance(true);
                }).fail(function (errors) {
                    _this.showCreditMemoBalance(false);
                    _this.paymentErrorCallback(errors);
                });
            };
            PaymentViewController.prototype.changeCustomerAccount = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                this.searchCustomers(correlationId);
            };
            PaymentViewController.prototype.createNewCustomer = function () {
                var _this = this;
                this._resolvePendingResults = false;
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    Commerce.ViewModelAdapter.collapseAndNavigate("PaymentView", _this._options);
                }, function () {
                    _this._handleExternalCancelation();
                }, function (customer) {
                    if (Commerce.Session.instance.cart.CustomerId === customer.AccountNumber) {
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    }
                    var addCustomerOptions = {
                        cartAffiliations: [],
                        customer: customer,
                        customerId: customer.AccountNumber,
                        correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                    };
                    return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Proxy.Entities.RetailOperation.SetCustomer, addCustomerOptions);
                });
                var options = {
                    customerSelectionHandler: customerSelectionHandler
                };
                Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.CustomerAdd, options)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PaymentViewController.prototype.setFullAmountDue = function () {
                this.paymentViewModel.resetPaymentAmount();
            };
            PaymentViewController.prototype.removeCardPaymentAcceptListener = function () {
                window.removeEventListener("message", this.cardPaymentAcceptMessageHandlerProxied, false);
            };
            PaymentViewController.prototype.checkLoyaltyCardBalance = function () {
                if (Commerce.StringExtensions.isNullOrWhitespace(this.paymentViewModel.loyaltyCardId())) {
                    Commerce.NotificationHandler.displayErrorMessage("string_1170");
                    return;
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var loyaltyCardPointsBalanceOperationRequest = new Commerce.LoyaltyCardPointsBalanceOperationRequest(correlationId, this.paymentViewModel.loyaltyCardId());
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(loyaltyCardPointsBalanceOperationRequest))
                    .fail(function (error) {
                    Commerce.NotificationHandler.displayClientErrors(error);
                });
            };
            PaymentViewController.prototype.applyFormattedPaymentAmountText = function (amount) {
                var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                var formattedAmount = Commerce.NumberExtensions.formatCurrency(amount, currency);
                this.paymentViewModel.paymentAmountText(formattedAmount);
            };
            PaymentViewController.prototype.beginProcessingPayment = function (paymentAmountText) {
                var processingPaymentCorrelationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsOrderPaymentViewPaymentInitiated(processingPaymentCorrelationId);
                if (!this._isViewShown) {
                    return;
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(paymentAmountText) && (paymentAmountText !== this.paymentViewModel.paymentAmountText())) {
                    this.paymentViewModel.paymentAmountText(paymentAmountText);
                }
                if (this.paymentViewModel.isGiftCardPayment && !Commerce.StringExtensions.isNullOrWhitespace(this.paymentViewModel.giftCardId())) {
                    this.paymentViewModel.cardNumber(this.paymentViewModel.giftCardId());
                }
                var paymentAmount = this.paymentViewModel.getPaymentAmount();
                Commerce.RetailLogger.viewsOrderPaymentViewPaymentAmount(paymentAmount.toString());
                var errorCode = this.paymentViewModel.validatePaymentAmount();
                if (errorCode !== Commerce.StringExtensions.EMPTY) {
                    var errors = [new Commerce.Proxy.Entities.Error(errorCode)];
                    Commerce.RetailLogger.viewsOrderPaymentViewInvalidPaymentAmount(paymentAmount, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    Commerce.NotificationHandler.displayErrorMessage(errors[0].ErrorCode);
                    this.paymentCancel();
                    return;
                }
                if (this.paymentViewModel.isCardPayment && this.isCardPaymentAcceptPage()) {
                    Commerce.RetailLogger.viewsOrderPaymentViewUsingExternalPaymentPage();
                    if (Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptResultAccessCode)) {
                        this.cardPaymentAcceptSubmitPayment(paymentAmount);
                    }
                    else {
                        this.retrieveCardPaymentAcceptResult();
                    }
                    return;
                }
                else {
                    var isSwipeCard = this.isSwipeCard() && (this.paymentViewModel.isCardPayment || this.paymentViewModel.isGiftCardPayment);
                    var needCreditDebitCardInfo = this.paymentViewModel.cardSource() === Commerce.Proxy.Entities.CardSource.Unknown;
                    var isCreditDebitCardInfoFromPaymentTerminal = this.paymentViewModel.isCardSourcePaymentTerminal();
                    var isExternalGiftCard = !Commerce.StringExtensions.isNullOrWhitespace(this._options.tenderType.ConnectorId)
                        && this.paymentViewModel.isGiftCardPayment;
                    this.paymentViewModel.paymentCard.IsSwipe(isSwipeCard);
                    var isPaymentTerminal = this.canUsePaymentTerminal()
                        && (this.paymentViewModel.isCardPayment || this.paymentViewModel.isGiftCardPayment);
                    if (this._options.tokenizeCard && isPaymentTerminal) {
                        this.tokenizePaymentCard(processingPaymentCorrelationId);
                    }
                    else if (!this._options.tokenizeCard
                        && (isPaymentTerminal || this.paymentViewModel.isGiftCardPayment)
                        && (needCreditDebitCardInfo || isCreditDebitCardInfoFromPaymentTerminal || isExternalGiftCard)) {
                        this.paymentTerminalAuthorizeRefund(processingPaymentCorrelationId, paymentAmount, this.isManualCardEntry(), this.paymentViewModel.paymentCard.VoiceAuthorizationCode());
                        return;
                    }
                    else if (isSwipeCard && needCreditDebitCardInfo) {
                        Commerce.NotificationHandler.displayErrorMessage("string_7200");
                        this.paymentErrorCallback(null);
                        return;
                    }
                    else if (this.paymentViewModel.isCardPayment && needCreditDebitCardInfo && !isSwipeCard) {
                        var cardInfo = {
                            CardNumber: this.paymentViewModel.cardNumber(),
                            ExpirationMonth: this.paymentViewModel.paymentCard.ExpirationMonth(),
                            ExpirationYear: this.paymentViewModel.paymentCard.ExpirationYear(),
                            CCID: this.paymentViewModel.paymentCard.CCID(),
                            VoiceAuthorizationCode: this.paymentViewModel.paymentCard.VoiceAuthorizationCode(),
                            Address1: this.paymentViewModel.paymentCard.Address1(),
                            Zip: this.paymentViewModel.paymentCard.Zip()
                        };
                        this.paymentViewModel.updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.Manual);
                        this.continueProcessingPaymentStep1(processingPaymentCorrelationId);
                    }
                    else {
                        this.continueProcessingPaymentStep1(processingPaymentCorrelationId);
                    }
                }
            };
            PaymentViewController.prototype.continueProcessingPaymentStep1 = function (processingPaymentCorrelationId) {
                var _this = this;
                Commerce.RetailLogger.viewsOrderPaymentViewRetrievePaymentInformationFinished();
                if (!this.paymentViewModel.isPaymentInformationComplete(false, this.isApprovalCode())) {
                    this.paymentCancel();
                    return;
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var tenderLine;
                var hasAllCardInfo = this.paymentViewModel.isCardTypeSet() && !Commerce.ObjectExtensions.isNullOrUndefined(this.paymentViewModel.cardInfo);
                if (this.paymentViewModel.isGiftCardPayment) {
                    var giftCardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
                    this.paymentViewModel.updateCardInfo({
                        CardNumber: this.paymentViewModel.giftCardId(),
                        CardTypeId: giftCardTypeId
                    });
                }
                if ((this.paymentViewModel.isCardPayment || this.paymentViewModel.isGiftCardPayment)
                    && (!hasAllCardInfo || this.isManualCardEntry())) {
                    asyncQueue.enqueue(function () {
                        return _this.getCardTypeAsync(processingPaymentCorrelationId);
                    });
                }
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult(null);
                    var cardInfo = _this.paymentViewModel.cardInfo;
                    if (_this.getCashBackFromUI() && cardInfo) {
                        Commerce.RetailLogger.viewsOrderPaymentViewGettingCashbackStarted();
                        _this.paymentViewModel.getFilteredDenominationsForCurrencyAsync(_this.paymentViewModel.currency(), 1)
                            .done(function (denominations) {
                            var cashbackDialogShowOptions = {
                                cashbackAmount: Commerce.NumberExtensions.parseNumber(_this.paymentViewModel.cashBackAmountText()),
                                maximumCashbackAmount: _this.paymentViewModel.getMaximumCashbackAmount(),
                                denominations: denominations
                            };
                            _this.showDialog(_this._cashbackDialog, cashbackDialogShowOptions)
                                .on(Commerce.DialogResult.OK, function (cashbackAmount) {
                                _this.paymentViewModel.setCashbackAmount(cashbackAmount);
                                _this.areTenderAmountsValidForCardPayment()
                                    .done(function () {
                                    asyncResult.resolve({ canceled: false });
                                })
                                    .fail(function (errors) {
                                    Commerce.RetailLogger.viewsOrderPaymentViewTenderAmountsValidationForCardPaymentFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                                    asyncResult.reject(errors);
                                });
                            }).on(Commerce.DialogResult.No, function (cashbackAmount) {
                                _this.paymentViewModel.setCashbackAmount(0);
                                asyncResult.resolve({ canceled: false });
                            }).on(Commerce.DialogResult.Cancel, function (cashbackAmount) {
                                asyncResult.resolve({ canceled: true });
                            }).onError(function (errors) {
                                Commerce.RetailLogger.viewsOrderPaymentViewCashbackDialogFailure(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                                asyncResult.reject(errors);
                            });
                        })
                            .fail(function (errors) {
                            Commerce.RetailLogger.viewsOrderPaymentViewGettingFilteredDenominationsForCurrencyFailed(_this.paymentViewModel.currency(), Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                            asyncResult.reject(errors);
                        });
                    }
                    else {
                        asyncResult.resolve({ canceled: false });
                    }
                    return asyncQueue.cancelOn(asyncResult);
                });
                if (this.paymentViewModel.isCardPayment && !this._options.tokenizeCard) {
                    asyncQueue.enqueue(function () {
                        var paymentAmount = _this.paymentViewModel.getPaymentAmount();
                        return _this.areTenderAmountsValidForCardPayment(paymentAmount);
                    });
                }
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult(null);
                    if (_this.paymentViewModel.isDebitCard()
                        && !_this.canUsePaymentTerminal()) {
                        var pinpadActivityCanceled_1 = false;
                        var pinpadMessageActivity_1 = new Commerce.Activities.DisplayPaymentMessageDialogActivity({
                            title: Commerce.ViewModelAdapter.getResourceString("string_6908"),
                            messageText: Commerce.ViewModelAdapter.getResourceString("string_1174"),
                            buttonText: Commerce.ViewModelAdapter.getResourceString("string_76")
                        });
                        if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Peripherals.instance) || (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Peripherals.instance.pinPad))) {
                            Commerce.RetailLogger.viewsOrderPaymentViewNoPINPadInstanceWasFound();
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PINPAD_ERROR)]);
                            return asyncResult;
                        }
                        var pinPadQueue_1 = new Commerce.AsyncQueue();
                        if (!Commerce.Peripherals.instance.pinPad.isActive) {
                            pinPadQueue_1.enqueue(function () {
                                return pinPadQueue_1.cancelOn(_this.openPinPadDeviceAsync());
                            });
                        }
                        pinPadQueue_1.enqueue(function () {
                            var pinPadQueueAsyncResult = new Commerce.AsyncResult(null);
                            tenderLine = _this.paymentViewModel.getTenderLine();
                            pinpadMessageActivity_1.execute().done(function (result) {
                                if (result.canceled) {
                                    pinpadMessageActivity_1.cancel();
                                    Commerce.Peripherals.instance.pinPad.cancelPinEntry();
                                    pinpadActivityCanceled_1 = true;
                                }
                            });
                            var amountToDisplay;
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.CashBackAmount) && (tenderLine.CashBackAmount > 0)) {
                                amountToDisplay = Commerce.NumberExtensions.roundToNDigits(tenderLine.Amount + tenderLine.CashBackAmount, Commerce.NumberExtensions.getDecimalPrecision());
                            }
                            else {
                                amountToDisplay = tenderLine.Amount;
                            }
                            Commerce.Peripherals.instance.pinPad.getPinEntry(tenderLine.PaymentCard.CardNumber, amountToDisplay, _this)
                                .done(function (result) {
                                if (result) {
                                    pinpadMessageActivity_1.cancel();
                                    tenderLine.PaymentCard.EncryptedPin = result.encryptedPin;
                                    tenderLine.PaymentCard.AdditionalSecurityData = result.additionalSecurityData;
                                    pinPadQueueAsyncResult.resolve({ canceled: false });
                                }
                                else {
                                    if (!pinpadActivityCanceled_1) {
                                        pinpadMessageActivity_1.cancel()
                                            .done(function () {
                                            _this.showPinPadCanceledMessageDialog();
                                        });
                                        pinPadQueueAsyncResult.resolve({ canceled: true });
                                    }
                                }
                            })
                                .fail(function (errors) {
                                pinpadMessageActivity_1.cancel();
                                pinPadQueueAsyncResult.reject(errors);
                            });
                            return pinPadQueue_1.cancelOn(pinPadQueueAsyncResult);
                        });
                        pinPadQueue_1.run()
                            .done(function (result) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(result) || !result.canceled) {
                                asyncResult.resolve({ canceled: false });
                            }
                            else {
                                asyncResult.resolve({ canceled: true });
                            }
                        })
                            .fail(function (errors) {
                            Commerce.RetailLogger.viewsOrderPaymentViewGettingPINFromPINPadFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                            asyncResult.reject(errors);
                        });
                    }
                    else {
                        asyncResult.resolve({ canceled: false });
                    }
                    return asyncQueue.cancelOn(asyncResult);
                });
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this._makePaymentAsync(processingPaymentCorrelationId, tenderLine));
                });
                asyncQueue.run()
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && result.canceled) {
                        _this.paymentCancel();
                    }
                }).fail(function (errors) {
                    _this.paymentErrorCallback(errors);
                });
            };
            PaymentViewController.prototype._handleExternalCancelation = function () {
                if (!Commerce.ViewModelAdapter.isInView("PaymentView")) {
                    if (this.paymentViewModel.onPaymentResultAvailableAsync) {
                        Commerce.ViewModelAdapter.collapse("PaymentView");
                        this.paymentViewModel.onPaymentResultAvailableAsync(null);
                    }
                }
            };
            PaymentViewController.prototype.computeShowAccountDetails = function () {
                return !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CustomerId);
            };
            PaymentViewController.prototype.computeCustomerType = function () {
                return Commerce.CustomerHelper.computeCustomerType(Commerce.Session.instance.Customer);
            };
            PaymentViewController.prototype.isCashBackAllowed = function () {
                var result = false;
                result = !Commerce.ObjectExtensions.isNullOrUndefined(this.paymentViewModel.cardType())
                    && !this._preloadPaymentCard
                    && !this.paymentViewModel.isReturn()
                    && this.paymentViewModel.isDebitCard()
                    && this.paymentViewModel.cardType().CashBackLimit > 0
                    && (this.paymentViewModel.getPaymentAmount() === this.paymentViewModel.fullAmount());
                return result;
            };
            PaymentViewController.prototype.getCashBackFromUI = function () {
                return this.isCashBackAllowed() && (this.paymentViewModel.cardSource() !== Commerce.Proxy.Entities.CardSource.PaymentTerminal);
            };
            PaymentViewController.prototype.canUsePaymentTerminal = function () {
                var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
                return (this.paymentViewModel.isCardPayment
                    || this.paymentViewModel.isGiftCardPayment)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal.isActive)
                    && paymentTerminal.isActive
                    && Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
            };
            PaymentViewController.prototype.clearCardFields = function () {
                this.paymentViewModel.resetPaymentCard();
                this.paymentViewModel.setPaymentCardType(null);
                this.paymentViewModel.updateCardInfo(null);
            };
            PaymentViewController.prototype.getCardInputOptions = function () {
                var swipe = { caption: Commerce.ViewModelAdapter.getResourceString("string_1182"), value: 0 };
                var manual = { caption: Commerce.ViewModelAdapter.getResourceString("string_1127"), value: 1 };
                var voice = { caption: Commerce.ViewModelAdapter.getResourceString("string_1183"), value: 2 };
                if (this.paymentViewModel.isGiftCardPayment && !this.paymentViewModel.isManualCardNumberInputAllowed()) {
                    return [swipe];
                }
                if (!this._options.tokenizeCard || !this.paymentViewModel.isGiftCardPayment) {
                    return [swipe, manual, voice];
                }
                else {
                    return [swipe, manual];
                }
            };
            PaymentViewController.prototype.paymentTerminalAuthorizeRefund = function (processingPaymentCorrelationId, paymentAmount, isManual, voiceApprovalCode) {
                var _this = this;
                var paymentTerminalAuthorizeRefundQueue = new Commerce.AsyncQueue();
                var paymentTerminalAuthorizeRefundResult = new Commerce.VoidAsyncResult();
                var paymentInfo = null;
                var preProcessedTenderLine = null;
                var voidPayment = false;
                var voidPaymentMessageId = null;
                this.indeterminateWaitVisible(true);
                paymentTerminalAuthorizeRefundQueue.enqueue(function () {
                    Commerce.ErrorHandler.shouldNotHandleCartVersionErrorUntilResult(paymentTerminalAuthorizeRefundResult);
                    return Commerce.ErrorHandler.isCartVersionValid().always(function () {
                        _this.indeterminateWaitVisible(false);
                    }).fail(function (errors) {
                        Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                    });
                });
                paymentTerminalAuthorizeRefundQueue.enqueue(function () {
                    var checkRecoveryRequest = new Commerce.CheckForRecoveredPaymentTransactionClientRequest(processingPaymentCorrelationId, paymentAmount, Commerce.Payments.TransactionReferenceAllowedActions.Any);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(checkRecoveryRequest));
                }).enqueue(function (response) {
                    var transactionReferenceContainer = response.data.result;
                    if (transactionReferenceContainer.foundTransactionHasDifferentAmount) {
                        _this.applyFormattedPaymentAmountText(transactionReferenceContainer.foundTransaction.ApprovedAmount);
                    }
                    var tenderInfo = null;
                    if (_this.paymentViewModel.isGiftCardPayment) {
                        var cardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
                        if (!Commerce.StringExtensions.isNullOrWhitespace(_this.paymentViewModel.giftCardId())) {
                            tenderInfo = {
                                CardNumber: _this.paymentViewModel.giftCardId(),
                                TenderId: null,
                                CardTypeId: cardTypeId,
                                IsSwipe: _this.isSwipeCard()
                            };
                        }
                        else {
                            tenderInfo = {
                                TenderId: null,
                                CardTypeId: cardTypeId,
                                IsSwipe: _this.isSwipeCard()
                            };
                        }
                    }
                    if (Commerce.PaymentHelper.isAuthorize(paymentAmount)) {
                        var serializedId = JSON.stringify(transactionReferenceContainer.completeId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(transactionReferenceContainer.foundTransaction)) {
                            paymentInfo = transactionReferenceContainer.foundTransaction;
                            var resultContainer = {
                                transactionToUse: transactionReferenceContainer.foundTransaction,
                                transactionReferenceContainer: transactionReferenceContainer
                            };
                            var foundAuthResult = Commerce.AsyncResult.createResolved({
                                canceled: false, data: resultContainer
                            });
                            Commerce.RetailLogger.posPaymentSkippingDuplicateAuthorization(serializedId, processingPaymentCorrelationId);
                            return foundAuthResult;
                        }
                        else {
                            Commerce.RetailLogger.posPaymentDuplicateAuthorizationNotFound(serializedId, processingPaymentCorrelationId);
                        }
                        Commerce.RetailLogger.viewsOrderPaymentViewPaymentAuthorizationStarted();
                        var request = new Commerce.PaymentTerminalAuthorizePaymentActivityRequest(_this.paymentViewModel.tenderType().ConnectorId, paymentAmount, tenderInfo, voiceApprovalCode, isManual, null, processingPaymentCorrelationId, transactionReferenceContainer.completeId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .recoverOnFailure(function (errors) {
                            var printAsyncResult = new Commerce.AsyncResult();
                            if (Commerce.ArrayExtensions.hasElements(errors)) {
                                var declinedPaymentInfo = errors[0].extraData;
                                _this._printDeclinedOrVoidedCardPaymentReceiptAsync(processingPaymentCorrelationId, paymentAmount, declinedPaymentInfo, _this.paymentViewModel.tenderType())
                                    .always(function () {
                                    printAsyncResult.reject(errors);
                                });
                            }
                            else {
                                printAsyncResult.reject(errors);
                            }
                            return printAsyncResult;
                        }).done(function (result) {
                            if (!result.canceled) {
                                paymentInfo = result.data.result;
                            }
                        }).map(function (result) {
                            var paymentResultContainer = {
                                transactionToUse: result.data.result,
                                transactionReferenceContainer: transactionReferenceContainer
                            };
                            return { canceled: result.canceled, data: paymentResultContainer };
                        });
                    }
                    else {
                        var request = new Commerce.PaymentTerminalRefundPaymentActivityRequest(_this.paymentViewModel.tenderType().ConnectorId, paymentAmount * -1, tenderInfo, voiceApprovalCode, isManual, null);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .recoverOnFailure(function (errors) {
                            var printAsyncResult = new Commerce.AsyncResult();
                            if (Commerce.ArrayExtensions.hasElements(errors)) {
                                var declinedPaymentInfo = errors[0].extraData;
                                _this._printDeclinedOrVoidedCardPaymentReceiptAsync(processingPaymentCorrelationId, paymentAmount * -1, declinedPaymentInfo, _this.paymentViewModel.tenderType())
                                    .always(function () {
                                    printAsyncResult.reject(errors);
                                });
                            }
                            else {
                                printAsyncResult.reject(errors);
                            }
                            return printAsyncResult;
                        }).done(function (result) {
                            if (!result.canceled) {
                                paymentInfo = result.data.result;
                            }
                        }).map(function (result) {
                            var paymentResultContainer = {
                                transactionToUse: result.data.result,
                                transactionReferenceContainer: transactionReferenceContainer
                            };
                            return { canceled: result.canceled, data: paymentResultContainer };
                        });
                    }
                }).enqueue(function (paymentResultContainer) {
                    var asyncResult = new Commerce.AsyncResult(null);
                    if (paymentInfo && paymentInfo.IsApproved) {
                        asyncResult.resolve({ canceled: false, data: paymentResultContainer.data });
                    }
                    else {
                        voidPayment = false;
                        asyncResult.resolve({ canceled: true, data: paymentResultContainer.data });
                    }
                    return paymentTerminalAuthorizeRefundQueue.cancelOn(asyncResult);
                }).enqueue(function (paymentResultContainer) {
                    var asyncResult = new Commerce.AsyncResult(null);
                    var cardInfo = {
                        CardNumber: paymentInfo.CardNumberMasked,
                        CardTypeId: paymentInfo.CardType.toString()
                    };
                    _this.paymentViewModel.updateCardInfo(cardInfo, Commerce.Proxy.Entities.CardSource.PaymentTerminal);
                    _this.getCardTypeAsync()
                        .done(function () {
                        voidPayment = false;
                        asyncResult.resolve({ canceled: false, data: paymentResultContainer.data });
                    }).fail(function (errors) {
                        voidPayment = true;
                        voidPaymentMessageId = (paymentAmount >= 0) ? Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED : Commerce.ErrorTypeEnum.PAYMENT_CAPTURED_VOID_FAILED;
                        asyncResult.reject(errors);
                    })
                        .always(function () {
                        preProcessedTenderLine = _this.paymentViewModel.getPreprocessedTenderLine(paymentAmount, paymentInfo);
                        if (_this.paymentViewModel.isGiftCardPayment) {
                            preProcessedTenderLine.GiftCardId = paymentInfo.CardNumberMasked;
                        }
                        else if (paymentInfo.PaymentSdkContentType === Commerce.Client.Entities.PaymentSdkContentType.AuthorizationAndCardToken) {
                            preProcessedTenderLine.CardToken = paymentInfo.PaymentSdkData;
                        }
                    });
                    return paymentTerminalAuthorizeRefundQueue.cancelOn(asyncResult);
                }).enqueue(function (paymentResultContainer) {
                    var asyncResult = _this._paymentTerminalPartialPayment(preProcessedTenderLine, paymentAmount, paymentInfo, paymentResultContainer.data, processingPaymentCorrelationId)
                        .fail(function () {
                        voidPayment = true;
                        voidPaymentMessageId = Commerce.ErrorTypeEnum.PAYMENT_PARTIAL_VOID_FAILED;
                    });
                    return paymentTerminalAuthorizeRefundQueue.cancelOn(asyncResult);
                });
                paymentTerminalAuthorizeRefundQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult(null);
                    var request = new Commerce.AddPreprocessedTenderLineToCartClientRequest(preProcessedTenderLine);
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .done(function (result) {
                        voidPayment = false;
                        Commerce.Peripherals.HardwareStation.HardwareStationContext.clearPaymentTransactionReferenceData("pay card successfully completed", paymentAmount.toString(), processingPaymentCorrelationId);
                        asyncResult.resolve({ canceled: false });
                    })
                        .fail(function (errors) {
                        voidPayment = true;
                        var messageAuthorized = Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED;
                        var messageCaptured = Commerce.ErrorTypeEnum.PAYMENT_CAPTURED_VOID_FAILED;
                        voidPaymentMessageId = (paymentAmount >= 0) ? messageAuthorized : messageCaptured;
                        asyncResult.reject(errors);
                    });
                    return paymentTerminalAuthorizeRefundQueue.cancelOn(asyncResult);
                });
                paymentTerminalAuthorizeRefundQueue.run()
                    .done(function (result) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(result) || !result.canceled) {
                        _this.getSignature(processingPaymentCorrelationId);
                        paymentTerminalAuthorizeRefundResult.resolve();
                    }
                    else {
                        var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_UNABLE_AUTHORIZE_OR_REFUND)];
                        _this.paymentTerminalAuthRefundFail(errors);
                        paymentTerminalAuthorizeRefundResult.reject(errors);
                    }
                }).fail(function (errors) {
                    if (voidPayment) {
                        _this._paymentTerminalVoidPayment(preProcessedTenderLine, paymentInfo, errors, voidPaymentMessageId, processingPaymentCorrelationId);
                    }
                    else {
                        _this.paymentTerminalAuthRefundFail(errors);
                        paymentTerminalAuthorizeRefundResult.reject(errors);
                    }
                });
            };
            PaymentViewController.prototype._printDeclinedOrVoidedCardPaymentReceiptAsync = function (correlationId, paymentAmount, paymentInfo, tenderType) {
                var isHardwareProfileConfigured = !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.hardwareProfile);
                if (Commerce.Config.printReceiptsOnCardDeclineOrVoid && isHardwareProfileConfigured && !Commerce.ObjectExtensions.isNullOrUndefined(paymentInfo)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(paymentInfo.PaymentSdkData)) {
                    var isRefundOperation = paymentAmount < 0;
                    var cardTypeId = Commerce.StringExtensions.isNullOrWhitespace(paymentInfo.CardType.toString())
                        ? Commerce.Proxy.Entities.CardType.Unknown.toString().toUpperCase()
                        : paymentInfo.CardType.toString();
                    var printDeclinedOrVoidedCardReceiptsRequest = new Commerce.PrintDeclinedOrVoidedCardReceiptsClientRequest(correlationId, cardTypeId, Commerce.ApplicationContext.Instance.deviceConfiguration.Currency, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId, isRefundOperation, paymentInfo, tenderType);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(printDeclinedOrVoidedCardReceiptsRequest))
                        .map(function (result) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }).recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.printDeclinedOrVoidedCardPaymentReceiptsFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            PaymentViewController.prototype._paymentTerminalPartialPayment = function (preProcessedTenderLine, paymentAmount, paymentInfo, paymentResultContainer, processingPaymentCorrelationId) {
                var _this = this;
                var asyncResult = new Commerce.AsyncResult(null);
                var foundPayment = paymentResultContainer.transactionReferenceContainer.foundTransaction;
                if (paymentAmount >= 0) {
                    if (((paymentAmount !== paymentInfo.ApprovedAmount && Commerce.ObjectExtensions.isNullOrUndefined(foundPayment)) ||
                        (!Commerce.ObjectExtensions.isNullOrUndefined(foundPayment) && (paymentAmount !== paymentInfo.ApprovedAmount) &&
                            (paymentResultContainer.transactionReferenceContainer.completeId.Amount === paymentAmount)))) {
                        var currency_1 = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                        var approvePartialAmountDialogOptions = {
                            amountAuthorized: paymentInfo.ApprovedAmount,
                            amountRequested: paymentAmount,
                            amountAuthorizedCurrencyCode: currency_1,
                            amountRequestedCurrencyCode: currency_1,
                            correlationId: TsLogging.Utils.generateGuid()
                        };
                        this.showDialog(this._approvePartialAmountDialog, approvePartialAmountDialogOptions)
                            .on(Commerce.DialogResult.OK, function () {
                            var paymentAmountText = Commerce.NumberExtensions.formatCurrency(paymentInfo.ApprovedAmount, currency_1);
                            _this.paymentViewModel.paymentAmountText(paymentAmountText);
                            asyncResult.resolve({ canceled: false });
                        }).on(Commerce.DialogResult.Cancel, function () {
                            var voidPaymentMessageId = Commerce.ErrorTypeEnum.PAYMENT_PARTIAL_VOID_FAILED;
                            _this._paymentTerminalVoidPayment(preProcessedTenderLine, paymentInfo, null, voidPaymentMessageId, processingPaymentCorrelationId, true, paymentAmount)
                                .done(function (result) {
                                if (!result.canceled) {
                                    asyncResult.resolve({ canceled: false });
                                }
                                else {
                                    asyncResult.resolve({ canceled: true });
                                }
                            }).fail(function () {
                                asyncResult.reject(null);
                            });
                        });
                    }
                    else {
                        var serializedCorrelationId = JSON.stringify(paymentResultContainer.transactionReferenceContainer.completeId);
                        var isTransactionRecovered = !Commerce.ObjectExtensions.isNullOrUndefined(paymentResultContainer.transactionReferenceContainer.foundTransaction);
                        Commerce.RetailLogger.posPaymentSkippedPartialCheck(serializedCorrelationId, paymentAmount, paymentResultContainer.transactionToUse.ApprovedAmount, isTransactionRecovered, processingPaymentCorrelationId);
                        asyncResult.resolve({ canceled: false });
                    }
                }
                else {
                    asyncResult.resolve({ canceled: false });
                }
                return asyncResult;
            };
            PaymentViewController.prototype._paymentTerminalVoidPayment = function (preProcessedTenderLine, paymentInfo, errors, voidPaymentMessageId, processingPaymentCorrelationId, isPartialPayment, paymentAmount) {
                var _this = this;
                Commerce.RetailLogger.viewsOrderPaymentViewVoidPaymentStarted();
                isPartialPayment = isPartialPayment || false;
                var voidPaymentCall = function () {
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(preProcessedTenderLine.TenderTypeId);
                    var tenderInfo = {
                        TenderId: null,
                        CardTypeId: preProcessedTenderLine.CardTypeId
                    };
                    var request = new Commerce.PaymentTerminalVoidPaymentRequest(tenderType.ConnectorId, tenderInfo, paymentInfo.ApprovedAmount, paymentInfo.PaymentSdkData, null);
                    var asyncResult = new Commerce.AsyncResult(null);
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .done(function (result) {
                        if (!result.canceled) {
                            var voidInfo = result.data.result;
                            if (voidInfo && voidInfo.IsApproved) {
                                Commerce.Peripherals.HardwareStation.HardwareStationContext.clearPaymentTransactionReferenceData("void payment successfully completed", paymentInfo.ApprovedAmount.toString(), processingPaymentCorrelationId);
                                _this._printDeclinedOrVoidedCardPaymentReceiptAsync(Commerce.LoggerHelper.getNewCorrelationId(), voidInfo.ApprovedAmount, voidInfo, _this.paymentViewModel.tenderType())
                                    .done(function () {
                                    if (Commerce.ErrorHandler.hasInvalidCartVersionError(errors)) {
                                        _this.paymentErrorCallback(errors);
                                        asyncResult.reject(errors);
                                    }
                                    else {
                                        preProcessedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.Voided;
                                        var request_1 = new Commerce.AddPreprocessedTenderLineToCartClientRequest(preProcessedTenderLine);
                                        Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request_1))
                                            .done(function (result) {
                                            _this.paymentErrorCallback(errors);
                                            _this.paymentCompleted(processingPaymentCorrelationId);
                                            asyncResult.reject(errors);
                                        })
                                            .fail(function (addVoidedTenderErrors) {
                                            _this.paymentErrorCallback(errors);
                                            if (Commerce.ObjectExtensions.isNullOrUndefined(errors)) {
                                                asyncResult.reject(addVoidedTenderErrors);
                                            }
                                            else {
                                                asyncResult.reject(errors.concat(addVoidedTenderErrors));
                                            }
                                        });
                                    }
                                    asyncResult.resolve({ canceled: result.canceled });
                                }).fail(function () {
                                    asyncResult.resolve({ canceled: result.canceled });
                                });
                            }
                            else {
                                _this.voidPaymentFailureHandler(voidPaymentCall, voidPaymentMessageId, null, true)
                                    .recoverOnFailure(function (errors) {
                                    if (isPartialPayment) {
                                        return _this._paymentTerminalPartialPayment(preProcessedTenderLine, paymentAmount, paymentInfo, null, processingPaymentCorrelationId);
                                    }
                                    else {
                                        return Commerce.VoidAsyncResult.createRejected(errors);
                                    }
                                }).done(function () {
                                    asyncResult.resolve({ canceled: false });
                                }).fail(function () {
                                    asyncResult.reject(errors);
                                });
                                asyncResult.resolve({ canceled: result.canceled });
                            }
                        }
                        else {
                            asyncResult.resolve({ canceled: result.canceled });
                        }
                    }).fail(function (voidPaymentErrors) {
                        _this.voidPaymentFailureHandler(voidPaymentCall, voidPaymentMessageId, voidPaymentErrors, true)
                            .recoverOnFailure(function (errors) {
                            if (isPartialPayment) {
                                return _this._paymentTerminalPartialPayment(preProcessedTenderLine, paymentAmount, paymentInfo, null, processingPaymentCorrelationId);
                            }
                            else {
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                        }).done(function () {
                            asyncResult.resolve({ canceled: false });
                        }).fail(function () {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(errors)) {
                                asyncResult.reject(errors.concat(voidPaymentErrors));
                            }
                        });
                    });
                    return asyncResult;
                };
                return voidPaymentCall();
            };
            PaymentViewController.prototype._cardPaymentAuthorizeRefundAsync = function (processingPaymentCorrelationId, tenderLine) {
                var _this = this;
                var cardPaymentAuthorizeRefundQueue = new Commerce.AsyncQueue();
                var cardPaymentAuthorizeRefundResult = new Commerce.VoidAsyncResult();
                var paymentInfo = null;
                var preProcessedTenderLine = null;
                var voidPayment = false;
                var paymentAmount = this.paymentViewModel.getPaymentAmount();
                var voidPaymentMessageId = null;
                var tenderInfo = {
                    TenderId: tenderLine.TenderTypeId,
                    CardNumber: tenderLine.PaymentCard.CardNumber,
                    CardTypeId: this.paymentViewModel.cardType().CardTypeValue.toString(),
                    Track1: tenderLine.PaymentCard.Track1,
                    Track2: tenderLine.PaymentCard.Track2,
                    Track3: tenderLine.PaymentCard.Track3,
                    EncryptedPin: tenderLine.PaymentCard.EncryptedPin,
                    AdditionalSecurityData: tenderLine.PaymentCard.AdditionalSecurityData,
                    CCID: tenderLine.PaymentCard.CCID,
                    VoiceAuthorizationCode: tenderLine.PaymentCard.VoiceAuthorizationCode,
                    IsSwipe: tenderLine.PaymentCard.IsSwipe,
                    Name: tenderLine.PaymentCard.NameOnCard,
                    Country: tenderLine.PaymentCard.Country,
                    Address: tenderLine.PaymentCard.Address1,
                    Zip: tenderLine.PaymentCard.Zip,
                    ExpirationMonth: tenderLine.PaymentCard.ExpirationMonth,
                    ExpirationYear: tenderLine.PaymentCard.ExpirationYear,
                    CashbackAmount: tenderLine.CashBackAmount
                };
                cardPaymentAuthorizeRefundQueue.enqueue(function () {
                    Commerce.ErrorHandler.shouldNotHandleCartVersionErrorUntilResult(cardPaymentAuthorizeRefundResult);
                    return Commerce.ErrorHandler.isCartVersionValid().fail(function (errors) {
                        Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                    });
                });
                cardPaymentAuthorizeRefundQueue.enqueue(function () {
                    if (paymentAmount >= 0) {
                        var request = new Commerce.CardPaymentAuthorizePaymentRequest(_this.paymentViewModel.tenderType().ConnectorId, paymentAmount, tenderInfo, null);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .done(function (result) {
                            if (!result.canceled) {
                                paymentInfo = result.data.result;
                            }
                        }).map(function (result) {
                            return { canceled: result.canceled, data: result.data.result };
                        });
                    }
                    else {
                        var request = new Commerce.CardPaymentRefundPaymentRequest(_this.paymentViewModel.tenderType().ConnectorId, paymentAmount * -1, tenderInfo, null);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .done(function (result) {
                            if (!result.canceled) {
                                paymentInfo = result.data.result;
                            }
                        }).map(function (result) {
                            return { canceled: result.canceled, data: result.data.result };
                        });
                    }
                });
                cardPaymentAuthorizeRefundQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult(null);
                    if (paymentInfo && paymentInfo.IsApproved) {
                        preProcessedTenderLine = _this.paymentViewModel.getPreprocessedTenderLine(paymentAmount, paymentInfo);
                        voidPayment = false;
                        asyncResult.resolve({ canceled: false });
                    }
                    else {
                        voidPayment = false;
                        asyncResult.resolve({ canceled: true });
                    }
                    return cardPaymentAuthorizeRefundQueue.cancelOn(asyncResult);
                });
                cardPaymentAuthorizeRefundQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult(null);
                    if (paymentInfo && paymentInfo.IsApproved) {
                        if (paymentAmount >= 0 && paymentAmount !== paymentInfo.ApprovedAmount) {
                            var currency_2 = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                            var approvePartialAmountDialogOptions = {
                                amountAuthorized: paymentInfo.ApprovedAmount,
                                amountRequested: paymentAmount,
                                amountAuthorizedCurrencyCode: currency_2,
                                amountRequestedCurrencyCode: currency_2,
                                correlationId: TsLogging.Utils.generateGuid()
                            };
                            _this.showDialog(_this._approvePartialAmountDialog, approvePartialAmountDialogOptions)
                                .on(Commerce.DialogResult.OK, function () {
                                var paymentAmountText = Commerce.NumberExtensions.formatCurrency(paymentInfo.ApprovedAmount, currency_2);
                                _this.paymentViewModel.paymentAmountText(paymentAmountText);
                                asyncResult.resolve({ canceled: false });
                            }).on(Commerce.DialogResult.Cancel, function () {
                                voidPayment = true;
                                voidPaymentMessageId = Commerce.ErrorTypeEnum.PAYMENT_PARTIAL_VOID_FAILED;
                                asyncResult.reject(null);
                            });
                        }
                        else {
                            asyncResult.resolve({ canceled: false });
                        }
                    }
                    else {
                        voidPayment = false;
                        asyncResult.resolve({ canceled: true });
                    }
                    return cardPaymentAuthorizeRefundQueue.cancelOn(asyncResult);
                });
                cardPaymentAuthorizeRefundQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult(null);
                    var request = new Commerce.AddPreprocessedTenderLineToCartClientRequest(preProcessedTenderLine);
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .done(function (result) {
                        voidPayment = false;
                        asyncResult.resolve({ canceled: false });
                    })
                        .fail(function (errors) {
                        voidPayment = true;
                        voidPaymentMessageId = (paymentAmount >= 0) ? Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED : Commerce.ErrorTypeEnum.PAYMENT_CAPTURED_VOID_FAILED;
                        asyncResult.reject(errors);
                    });
                    return cardPaymentAuthorizeRefundQueue.cancelOn(asyncResult);
                });
                cardPaymentAuthorizeRefundQueue.run()
                    .done(function (result) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(result) || !result.canceled) {
                        _this.getSignature(processingPaymentCorrelationId);
                        cardPaymentAuthorizeRefundResult.resolve();
                    }
                    else {
                        var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_UNABLE_AUTHORIZE_OR_REFUND)];
                        _this.paymentErrorCallback(errors);
                        cardPaymentAuthorizeRefundResult.reject(errors);
                    }
                })
                    .fail(function (errors) {
                    if (voidPayment) {
                        var voidPaymentCall_1 = function () {
                            var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
                            var tenderInfo = {
                                TenderId: null,
                                CardTypeId: tenderLine.CardTypeId
                            };
                            var request = new Commerce.CardPaymentVoidPaymentRequest(tenderType.ConnectorId, paymentInfo.ApprovedAmount, tenderInfo, paymentInfo.PaymentSdkData, null);
                            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                                .done(function (result) {
                                if (!result.canceled) {
                                    var voidInfo = result.data.result;
                                    if (voidInfo && voidInfo.IsApproved) {
                                        if (Commerce.ErrorHandler.hasInvalidCartVersionError(errors)) {
                                            _this.paymentErrorCallback(errors);
                                            cardPaymentAuthorizeRefundResult.reject(errors);
                                        }
                                        else {
                                            preProcessedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.Voided;
                                            var request_2 = new Commerce.AddPreprocessedTenderLineToCartClientRequest(preProcessedTenderLine);
                                            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request_2))
                                                .done(function (result) {
                                                _this.paymentErrorCallback(errors);
                                                _this.paymentCompleted(processingPaymentCorrelationId);
                                                cardPaymentAuthorizeRefundResult.reject(errors);
                                            })
                                                .fail(function (addVoidedTenderErrors) {
                                                _this.paymentErrorCallback(errors);
                                                cardPaymentAuthorizeRefundResult.reject(errors.concat(addVoidedTenderErrors));
                                            });
                                        }
                                    }
                                    else {
                                        _this.voidPaymentFailureHandler(voidPaymentCall_1, voidPaymentMessageId).fail(function () {
                                            cardPaymentAuthorizeRefundResult.reject(errors);
                                        });
                                    }
                                }
                            }).fail(function (voidPaymentErrors) {
                                _this.voidPaymentFailureHandler(voidPaymentCall_1, voidPaymentMessageId, voidPaymentErrors).fail(function () {
                                    cardPaymentAuthorizeRefundResult.reject(errors.concat(voidPaymentErrors));
                                });
                            }).map(function (result) {
                                return { canceled: result.canceled, data: result.data.result };
                            });
                            return Commerce.AsyncResult.createResolved();
                        };
                        voidPaymentCall_1();
                    }
                    else {
                        _this.paymentErrorCallback(errors);
                        cardPaymentAuthorizeRefundResult.reject(errors);
                    }
                });
                return cardPaymentAuthorizeRefundResult;
            };
            PaymentViewController.prototype.showPinPadCanceledMessageDialog = function () {
                var pinPadCanceledMessageActivity = new Commerce.Activities.DisplayPaymentMessageDialogActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_4922"),
                    messageText: Commerce.StringExtensions.EMPTY,
                    buttonText: Commerce.ViewModelAdapter.getResourceString("string_75")
                });
                pinPadCanceledMessageActivity.execute();
            };
            PaymentViewController.prototype.cardPaymentAcceptSubmitPayment = function (paymentAmount) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var filteredCreditCardTypes;
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptCardPrefix)) {
                    asyncQueue.enqueue(function () {
                        return _this.paymentViewModel.filterCreditCardTypesAsync(_this.cardPaymentAcceptCardPrefix)
                            .done(function (types) {
                            filteredCreditCardTypes = types;
                        });
                    });
                    asyncQueue.enqueue(function () {
                        var asyncResult = new Commerce.VoidAsyncResult(null);
                        if (filteredCreditCardTypes.length === 0) {
                            Commerce.RetailLogger.viewsOrderPaymentViewFilterCreditCardTypesFailed(_this.cardPaymentAcceptCardPrefix);
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CARD_NOT_SUPPORTED)]);
                        }
                        else if (filteredCreditCardTypes.length === 1) {
                            _this.cardPaymentAcceptCardTypeInfo = filteredCreditCardTypes[0];
                            asyncResult.resolve();
                        }
                        else {
                            _this.selectCardType(filteredCreditCardTypes).done(function (dataResult) {
                                if (!dataResult.canceled) {
                                    _this.cardPaymentAcceptCardTypeInfo = dataResult.data;
                                    asyncResult.resolve();
                                }
                                else {
                                    asyncResult.reject(null);
                                }
                            });
                        }
                        return asyncResult;
                    });
                    if (!this._options.tokenizeCard && paymentAmount >= 0) {
                        asyncQueue.enqueue(function () {
                            var asyncResult = new Commerce.VoidAsyncResult(null);
                            var tenderLineToValidate = {
                                Amount: paymentAmount,
                                Currency: _this.paymentViewModel.currency(),
                                TenderTypeId: _this.paymentViewModel.tenderTypeId(),
                                CardTypeId: _this.cardPaymentAcceptCardTypeInfo.TypeId
                            };
                            _this.paymentViewModel.validateTenderLineForAdd(tenderLineToValidate)
                                .done(function () {
                                asyncResult.resolve();
                            })
                                .fail(function (errors) {
                                asyncResult.reject(errors);
                            });
                            return asyncResult;
                        });
                    }
                }
                asyncQueue.run()
                    .done(function (result) {
                    _this.submitCardPaymentAcceptPayment(paymentAmount);
                })
                    .fail(function (errors) {
                    _this.paymentErrorCallback(errors);
                });
            };
            PaymentViewController.prototype.retrieveCardPaymentAcceptResult = function () {
                var _this = this;
                var paymentAmount = this.paymentViewModel.getPaymentAmount();
                var isAuthorize = !this._options.tokenizeCard && paymentAmount >= 0;
                var isRefund = !this._options.tokenizeCard && paymentAmount < 0;
                var asyncQueue = new Commerce.AsyncQueue();
                var cardPaymentAcceptResult;
                Commerce.RetailLogger.viewsOrderPaymentViewRetrieveCardPaymentAcceptResultStarted();
                asyncQueue.enqueue(function () {
                    return _this.paymentViewModel.retrieveCardPaymentAcceptResultAsync(_this.cardPaymentAcceptResultAccessCode)
                        .done(function (result) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                            Commerce.RetailLogger.viewsOrderPaymentViewRetrieveCardPaymentAcceptResultFailed("Returned async result is null or undefined.");
                            _this.paymentErrorCallback([
                                new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETORETRIEVECARDPAYMENTACCEPTRESULT)
                            ]);
                        }
                        else if (isAuthorize && Commerce.ObjectExtensions.isNullOrUndefined(result.TenderLine)) {
                            Commerce.RetailLogger.viewsOrderPaymentViewRetrieveCardPaymentAcceptResultFailed("Returned tender line is null or undefined");
                            _this.paymentErrorCallback([
                                new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETORETRIEVECARDPAYMENTACCEPTRESULT)
                            ]);
                        }
                        else if ((isRefund || _this._options.tokenizeCard) && Commerce.ObjectExtensions.isNullOrUndefined(result.TokenizedPaymentCard)) {
                            Commerce.RetailLogger.viewsOrderPaymentViewRetrieveCardPaymentAcceptResultFailed("Returned tokenized payment card is null or undefined");
                            _this.paymentErrorCallback([
                                new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETORETRIEVECARDPAYMENTACCEPTRESULT)
                            ]);
                        }
                        else {
                            cardPaymentAcceptResult = result;
                        }
                    }).fail(function (errors) {
                        Commerce.RetailLogger.viewsOrderPaymentViewRetrieveCardPaymentAcceptResultFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                        _this.paymentErrorCallback(Commerce.PaymentErrorHelper.ConvertToClientErrors(errors));
                    });
                });
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.cardPaymentAcceptCardTypeInfo)) {
                    var filteredCreditCardTypes_1;
                    asyncQueue.enqueue(function () {
                        _this.cardPaymentAcceptCardPrefix = cardPaymentAcceptResult.TokenizedPaymentCard.CardTokenInfo.MaskedCardNumber;
                        return _this.paymentViewModel.filterCreditCardTypesAsync(_this.cardPaymentAcceptCardPrefix)
                            .done(function (types) {
                            filteredCreditCardTypes_1 = types;
                        });
                    });
                    asyncQueue.enqueue(function () {
                        var asyncResult = new Commerce.VoidAsyncResult(null);
                        if (filteredCreditCardTypes_1.length === 0) {
                            _this.indeterminateWaitVisible(false);
                            Commerce.RetailLogger.viewsOrderPaymentViewFilterCreditCardTypesFailed(_this.cardPaymentAcceptCardPrefix);
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CARD_NOT_SUPPORTED)]);
                        }
                        else if (filteredCreditCardTypes_1.length === 1) {
                            _this.cardPaymentAcceptCardTypeInfo = filteredCreditCardTypes_1[0];
                            asyncResult.resolve();
                        }
                        else {
                            _this.selectCardType(filteredCreditCardTypes_1).done(function (dataResult) {
                                _this.cardPaymentAcceptCardTypeInfo = dataResult.canceled ?
                                    filteredCreditCardTypes_1[0] : dataResult.data;
                                asyncResult.resolve();
                            });
                        }
                        return asyncResult;
                    });
                }
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult(null);
                    if (isAuthorize) {
                        cardPaymentAcceptResult.TenderLine.CardTypeId = _this.cardPaymentAcceptCardTypeInfo.TypeId;
                        _this.handleCardPaymentAcceptAuthorize(cardPaymentAcceptResult);
                    }
                    else if (isRefund) {
                        cardPaymentAcceptResult.TokenizedPaymentCard.CardTypeId = _this.cardPaymentAcceptCardTypeInfo.TypeId;
                        _this.handleCardPaymentAcceptRefund(cardPaymentAcceptResult, paymentAmount);
                    }
                    else {
                        cardPaymentAcceptResult.TokenizedPaymentCard.CardTypeId = _this.cardPaymentAcceptCardTypeInfo.TypeId;
                        cardPaymentAcceptResult.TokenizedPaymentCard.TenderType = _this.paymentViewModel.tenderTypeId();
                        _this.indeterminateWaitVisible(false);
                        _this._resolvePendingResults = false;
                        var paymentResult = {
                            paymentResult: cardPaymentAcceptResult.TokenizedPaymentCard,
                            paymentCorrelationId: Commerce.LoggerHelper.getNewCorrelationId()
                        };
                        _this.paymentViewModel.onPaymentResultAvailableAsync(paymentResult);
                    }
                    asyncResult.resolve();
                    return asyncResult;
                });
                asyncQueue.run();
            };
            PaymentViewController.prototype.voidPaymentFailureHandler = function (voidPaymentCall, voidPaymentMessageId, errors, isPartialPayment) {
                var _this = this;
                isPartialPayment = isPartialPayment || false;
                if (voidPaymentMessageId === Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED) {
                    Commerce.RetailLogger.viewsOrderPaymentViewPaymentAuthorizedVoidFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                }
                else if (voidPaymentMessageId === Commerce.ErrorTypeEnum.PAYMENT_CAPTURED_VOID_FAILED) {
                    Commerce.RetailLogger.viewsOrderPaymentViewPaymentCapturedVoidFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                }
                else {
                    Commerce.RetailLogger.viewsOrderPaymentViewPartialPaymentVoidFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                }
                var asyncResult = new Commerce.VoidAsyncResult();
                Commerce.ViewModelAdapter.displayMessage(voidPaymentMessageId, Commerce.MessageType.Info, Commerce.MessageBoxButtons.RetryNo, "string_4909")
                    .done(function (result) {
                    if (result === Commerce.DialogResult.Yes) {
                        voidPaymentCall().done(function () {
                            asyncResult.resolve();
                        }).fail(function (errors) {
                            asyncResult.reject(errors);
                        });
                    }
                    else {
                        if (isPartialPayment) {
                            asyncResult.reject(errors);
                        }
                        else {
                            var request = new Commerce.PaymentTerminalUpdateLinesRequest(Commerce.Session.instance.cart);
                            Commerce.Runtime.executeAsync(request);
                            _this.paymentErrorCallback(errors || null);
                            asyncResult.reject(errors);
                        }
                    }
                })
                    .fail(function () {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            PaymentViewController.prototype.paymentTerminalAuthRefundFail = function (errors) {
                Commerce.RetailLogger.viewsOrderPaymentViewPaymentTerminalAuthRefundFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                this.paymentErrorCallback(errors);
                var request = new Commerce.PaymentTerminalUpdateLinesRequest(Commerce.Session.instance.cart);
                this.paymentViewModel.isBusyUntil(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)));
            };
            PaymentViewController.prototype.submitCardPaymentAcceptPayment = function (paymentAmount) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptPageSubmitUrl)) {
                    Commerce.RetailLogger.viewsOrderPaymentViewSubmitCardPaymentToAcceptPageByUsingURL();
                    var submitUrl = this.cardPaymentAcceptPageSubmitUrl;
                    var d = new Date();
                    submitUrl = submitUrl + "#" + d.getTime();
                    this.cardPaymentAcceptPageUrl(submitUrl);
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptMessageOrigin)) {
                    Commerce.RetailLogger.viewsOrderPaymentViewSubmitCardPaymentToAcceptPageBySendingMessage();
                    var cardPaymentAcceptIframe = document.getElementById("cardPaymentAcceptFrame");
                    var cardPaymentAcceptMessage = void 0;
                    if (!this._options.tokenizeCard && paymentAmount >= 0) {
                        cardPaymentAcceptMessage = {
                            type: PaymentViewController.CARDPAYMENTACCEPTAMOUNT,
                            value: paymentAmount.toString()
                        };
                    }
                    cardPaymentAcceptIframe.contentWindow.postMessage(JSON.stringify(cardPaymentAcceptMessage), this.cardPaymentAcceptMessageOrigin);
                    cardPaymentAcceptMessage = {
                        type: PaymentViewController.CARDPAYMENTACCEPTSUBMIT,
                        value: "true"
                    };
                    cardPaymentAcceptIframe.contentWindow.postMessage(JSON.stringify(cardPaymentAcceptMessage), this.cardPaymentAcceptMessageOrigin);
                    if (this.isCardPaymentAcceptHeightReceived) {
                        this.indeterminateWaitVisible(true);
                    }
                }
            };
            PaymentViewController.prototype.sendCardPaymentAcceptSwipe = function () {
                if (this.isCardPaymentAcceptSwipeSent) {
                    return;
                }
                else {
                    this.isCardPaymentAcceptSwipeSent = true;
                }
                if (this.paymentViewModel.paymentCard === null) {
                    return;
                }
                var swipe = this.paymentViewModel.paymentCard.Track1() + this.paymentViewModel.paymentCard.Track2();
                this.sendCardPaymentAcceptSwipeMessage(swipe);
            };
            PaymentViewController.prototype.sendCardPaymentAcceptSwipeMessage = function (swipe) {
                if (swipe.length === 0) {
                    return;
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptMessageOrigin)) {
                    var cardPaymentAcceptIframe = document.getElementById("cardPaymentAcceptFrame");
                    var cardPaymentAcceptMessage = void 0;
                    cardPaymentAcceptMessage = {
                        type: PaymentViewController.CARDPAYMENTACCEPTSWIPE,
                        value: swipe
                    };
                    cardPaymentAcceptIframe.contentWindow.postMessage(JSON.stringify(cardPaymentAcceptMessage), this.cardPaymentAcceptMessageOrigin);
                }
            };
            PaymentViewController.prototype.sendCardPaymentAcceptPartialOK = function (partialOK) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.cardPaymentAcceptMessageOrigin)) {
                    var cardPaymentAcceptIframe = document.getElementById("cardPaymentAcceptFrame");
                    var cardPaymentAcceptMessage = void 0;
                    cardPaymentAcceptMessage = {
                        type: PaymentViewController.CARDPAYMENTACCEPTPARTIALOK,
                        value: partialOK.toString()
                    };
                    cardPaymentAcceptIframe.contentWindow.postMessage(JSON.stringify(cardPaymentAcceptMessage), this.cardPaymentAcceptMessageOrigin);
                    this.indeterminateWaitVisible(true);
                }
            };
            PaymentViewController.prototype.handleCardPaymentAcceptAuthorize = function (result) {
                var _this = this;
                Commerce.RetailLogger.viewsOrderPaymentViewHandleCardPaymentAcceptAuthorize();
                var preProcessedTenderLine = result.TenderLine;
                preProcessedTenderLine.TenderTypeId = this.paymentViewModel.tenderTypeId();
                var asyncResult = new Commerce.VoidAsyncResult();
                Commerce.ErrorHandler.shouldNotHandleCartVersionErrorUntilResult(asyncResult);
                var request = new Commerce.AddPreprocessedTenderLineToCartClientRequest(preProcessedTenderLine);
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .done(function (tenderLineResult) {
                    if (Commerce.ArrayExtensions.hasElements(result.PaymentSdkErrors)) {
                        var error_1 = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETORETRIEVECARDPAYMENTACCEPTRESULT);
                        var paymentException = new Commerce.Proxy.Entities.PaymentExceptionClass();
                        paymentException.PaymentSdkErrors = result.PaymentSdkErrors;
                        error_1.commerceException = paymentException;
                        _this.paymentErrorCallback(Commerce.PaymentErrorHelper.ConvertToClientErrors([error_1])).always(function () {
                            _this.paymentCompleted();
                            asyncResult.reject([error_1]);
                        });
                    }
                    else {
                        _this.paymentCompleted();
                        asyncResult.resolve();
                    }
                })
                    .fail(function (errors) {
                    _this.paymentErrorCallback(Commerce.PaymentErrorHelper.ConvertToClientErrors(errors)).always(function () {
                        asyncResult.reject(errors);
                        if (Commerce.ErrorHandler.hasInvalidCartVersionError(errors)) {
                            Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                        }
                        else {
                            Commerce.ViewModelAdapter.navigate("CartView");
                        }
                    });
                });
            };
            PaymentViewController.prototype.handleCardPaymentAcceptRefund = function (result, paymentAmount) {
                var _this = this;
                Commerce.RetailLogger.viewsOrderPaymentViewHandleCardPaymentAcceptRefund();
                var cartTenderLine = {
                    TokenizedPaymentCard: result.TokenizedPaymentCard,
                    Amount: paymentAmount,
                    TenderTypeId: this.paymentViewModel.tenderTypeId(),
                    Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                    CardTypeId: this.cardPaymentAcceptCardTypeInfo.TypeId
                };
                var asyncResult = new Commerce.VoidAsyncResult();
                Commerce.ErrorHandler.shouldNotHandleCartVersionErrorUntilResult(asyncResult);
                this.paymentViewModel.addTenderLineToCart(cartTenderLine)
                    .done(function () {
                    _this.paymentCompleted();
                    asyncResult.resolve();
                })
                    .fail(function (errors) {
                    _this.paymentErrorCallback(Commerce.PaymentErrorHelper.ConvertToClientErrors(errors)).always(function () {
                        asyncResult.reject(errors);
                        if (Commerce.ErrorHandler.hasInvalidCartVersionError(errors)) {
                            Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                        }
                        else {
                            Commerce.ViewModelAdapter.navigate("CartView");
                        }
                    });
                });
            };
            PaymentViewController.prototype.cardPaymentAcceptMessageHandler = function (eventInfo) {
                var _this = this;
                if (!(this.cardPaymentAcceptMessageOrigin.indexOf(eventInfo.origin) === 0)) {
                    return;
                }
                var message = eventInfo.data;
                if (typeof (message) === "string" && message.length > 0) {
                    var messageObject = JSON.parse(message);
                    switch (messageObject.type) {
                        case PaymentViewController.CARDPAYMENTACCEPTHEIGHT:
                            this.isCardPaymentAcceptHeightReceived = true;
                            this.sendCardPaymentAcceptSwipe();
                            break;
                        case PaymentViewController.CARDPAYMENTACCEPTCARDPREFIX:
                            this.cardPaymentAcceptCardPrefix = messageObject.value;
                            break;
                        case PaymentViewController.CARDPAYMENTACCEPTERROR:
                            var paymentErrors = messageObject.value;
                            var errors = [];
                            for (var i = 0; i < paymentErrors.length; i++) {
                                errors.push(new Commerce.Proxy.Entities.Error(paymentErrors[i].Code.toString(), false, paymentErrors[i].Message));
                            }
                            this.paymentErrorCallback(Commerce.PaymentErrorHelper.ConvertToClientErrors(errors));
                            break;
                        case PaymentViewController.CARDPAYMENTACCEPTPARTIALAMOUNT:
                            var paymentAmount = this.paymentViewModel.getPaymentAmount();
                            var approvedAmount_1 = Commerce.NumberExtensions.parseNumber(messageObject.value);
                            var currency_3 = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                            var approvePartialAmountDialogOptions = {
                                amountAuthorized: approvedAmount_1,
                                amountRequested: paymentAmount,
                                amountAuthorizedCurrencyCode: currency_3,
                                amountRequestedCurrencyCode: currency_3,
                                correlationId: TsLogging.Utils.generateGuid()
                            };
                            this.showDialog(this._approvePartialAmountDialog, approvePartialAmountDialogOptions)
                                .on(Commerce.DialogResult.OK, function () {
                                var paymentAmountText = Commerce.NumberExtensions.formatCurrency(approvedAmount_1, currency_3);
                                _this.paymentViewModel.paymentAmountText(paymentAmountText);
                                _this.sendCardPaymentAcceptPartialOK(true);
                            }).on(Commerce.DialogResult.Cancel, function () {
                                _this.sendCardPaymentAcceptPartialOK(false);
                            });
                            break;
                        case PaymentViewController.CARDPAYMENTACCEPTRESULT:
                            this.indeterminateWaitVisible(true);
                            this.cardPaymentAcceptResultAccessCode = messageObject.value;
                            this.retrieveCardPaymentAcceptResult();
                            break;
                        default:
                    }
                }
            };
            PaymentViewController.prototype.addCardPaymentAcceptListener = function () {
                this.removeCardPaymentAcceptListener();
                window.addEventListener("message", this.cardPaymentAcceptMessageHandlerProxied, false);
            };
            PaymentViewController.prototype.showDialog = function (dialog, input) {
                return dialog.show(input);
            };
            PaymentViewController.prototype.createPaymentViewModel = function (options) {
                var viewModel = new Commerce.ViewModels.PaymentViewModel({
                    currency: undefined,
                    fullAmount: options.paymentAmount(),
                    onPaymentResultAvailableAsync: options.onPaymentResultAvailableAsync,
                    tenderType: options.tenderType
                });
                viewModel.paymentAmountText.subscribe(function (newValue) {
                    viewModel.cashTendered = Commerce.NumberExtensions.parseNumber(newValue) || 0;
                });
                if (!Commerce.StringExtensions.isNullOrWhitespace(options.loyaltyCardId)) {
                    viewModel.loyaltyCardId(options.loyaltyCardId);
                }
                return viewModel;
            };
            PaymentViewController.prototype.scannerMessageEventHandler = function (barcode) {
                var viewModel = this.paymentViewModel;
                if (viewModel.isGiftCardPayment || viewModel.isLoyaltyCardPayment) {
                    viewModel.updateCardInfo({ CardNumber: barcode });
                }
                else if (viewModel.isCreditMemoPayment) {
                    viewModel.creditMemoId(barcode);
                }
            };
            PaymentViewController.prototype.openPinPadDeviceAsync = function () {
                var _this = this;
                var pinPadQueueAsyncResult = new Commerce.AsyncResult(null);
                this.indeterminateWaitVisible(true);
                Commerce.Peripherals.instance.pinPad.openDevice()
                    .done(function () {
                    if (Commerce.Peripherals.instance.pinPad.isActive) {
                        pinPadQueueAsyncResult.resolve({ canceled: false });
                    }
                    else {
                        pinPadQueueAsyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PINPAD_ERROR)]);
                    }
                }).fail(function (errors) {
                    pinPadQueueAsyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PINPAD_ERROR)]);
                }).always(function () {
                    _this.indeterminateWaitVisible(false);
                });
                return pinPadQueueAsyncResult;
            };
            PaymentViewController.prototype.handleVoidAsyncResult = function (asyncResult, continueProcessingOnDone, isErrorHandled) {
                var _this = this;
                if (continueProcessingOnDone === void 0) { continueProcessingOnDone = false; }
                if (isErrorHandled === void 0) { isErrorHandled = false; }
                this.indeterminateWaitVisible(true);
                if (!continueProcessingOnDone) {
                    asyncResult.done(function () { _this.indeterminateWaitVisible(false); });
                }
                return isErrorHandled ? asyncResult : asyncResult.fail(function (errors) { _this.paymentErrorCallback(errors); });
            };
            PaymentViewController.prototype.failedLoadAsync = function (errors) {
                var asyncResult = new Commerce.VoidAsyncResult();
                if (this.computeIsCurrencyPayment()) {
                    Commerce.NotificationHandler.displayErrorMessage("string_1143").always(function () {
                        asyncResult.resolve();
                    });
                }
                else {
                    asyncResult.resolve();
                }
                return asyncResult;
            };
            PaymentViewController.prototype.computeShowPaymentDetails = function () {
                return (this.paymentViewModel.isCardPayment
                    || this.paymentViewModel.isGiftCardPayment
                    || this.paymentViewModel.isLoyaltyCardPayment)
                    && !(this.paymentViewModel.isCardPayment
                        && Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()
                        && this._options.tenderType.HideCardInputDetails);
            };
            PaymentViewController.prototype.computeIsTypeCashPayment = function () {
                return this.paymentViewModel.operationId() === Commerce.Operations.RetailOperation.PayCash;
            };
            PaymentViewController.prototype.computeIsCurrencyPayment = function () {
                return this.paymentViewModel.operationId() === Commerce.Operations.RetailOperation.PayCurrency;
            };
            PaymentViewController.prototype.computeShowCurrencies = function () {
                return !this._hasForeignCurrencyDropDownBeenDisplayed
                    || (this.computeIsCurrencyPayment() && (this.paymentViewModel.currencyAmounts().length > 1));
            };
            PaymentViewController.prototype.computeShowDenominations = function () {
                return this.paymentViewModel.isCashPayment
                    && Commerce.ArrayExtensions.hasElements(this.paymentViewModel.currencyDenominations());
            };
            PaymentViewController.prototype.computeShowCurrencyDenominations = function () {
                return this.paymentViewModel.isCashPayment
                    && this.displayCurrencies()
                    && Commerce.ArrayExtensions.hasElements(this.paymentViewModel.currencyDenominations());
            };
            PaymentViewController.prototype.computeCurrencyConversionString = function () {
                var currencyConversionString = Commerce.StringExtensions.EMPTY;
                if (this.paymentViewModel) {
                    var currencyAmount = this.paymentViewModel.getSelectedCurrencyAmount();
                    if (currencyAmount) {
                        var currencyAmountFrom = currencyAmount.ExchangeRate;
                        var currencyCodeFrom = currencyAmount.CurrencyCode;
                        var currencyAmountTo = 1;
                        var currencyCodeTo = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                        if (currencyAmountFrom) {
                            if (Commerce.CSSHelpers.currentTextDir() === Commerce.CSSHelpers.RIGHT_TO_LEFT_TEXT_DIRECTION) {
                                currencyConversionString = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1187"), currencyCodeTo, currencyAmountTo, currencyCodeFrom, currencyAmountFrom);
                            }
                            else {
                                currencyConversionString = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1187"), currencyAmountFrom, currencyCodeFrom, currencyAmountTo, currencyCodeTo);
                            }
                        }
                    }
                }
                return currencyConversionString;
            };
            PaymentViewController.prototype.tokenizePaymentCard = function (correlationId) {
                var _this = this;
                var paymentTerminalMessageActivity = new Commerce.Activities.DisplayPaymentMessageDialogActivity({
                    title: Commerce.ViewModelAdapter.getResourceString("string_6908"),
                    messageText: Commerce.ViewModelAdapter.getResourceString("string_1174"),
                    buttonText: Commerce.ViewModelAdapter.getResourceString("string_76")
                });
                paymentTerminalMessageActivity.execute();
                var request = new Commerce.PaymentTerminalFetchTokenPeripheralRequest(correlationId, this.isManualCardEntry(), { ExtensionProperties: [] });
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (response) {
                    return Commerce.PaymentHelper.createTokenizedPaymentCardResult(correlationId, response.data.result, _this.paymentViewModel.tenderTypeId());
                }).done(function (response) {
                    if ((Commerce.ObjectExtensions.isNullOrUndefined(response) && Commerce.ObjectExtensions.isNullOrUndefined(response.data))
                        || !response.canceled) {
                        _this.indeterminateWaitVisible(false);
                        Commerce.RetailLogger.viewsOrderPaymentViewCardTokenizationFinished();
                        _this._resolvePendingResults = false;
                        var paymentResult = {
                            paymentResult: response.data,
                            paymentCorrelationId: correlationId
                        };
                        _this.paymentViewModel.onPaymentResultAvailableAsync(paymentResult);
                    }
                    else {
                        _this.paymentErrorCallback([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_BALANCE_TOKEN_ERROR)]);
                    }
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.viewsOrderPaymentViewCardTokenizationFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    _this.paymentErrorCallback([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_BALANCE_TOKEN_ERROR)]);
                })
                    .always(function () {
                    paymentTerminalMessageActivity.cancel();
                });
            };
            PaymentViewController.prototype._makePaymentAsync = function (processingPaymentCorrelationId, tenderLine) {
                var _this = this;
                Commerce.RetailLogger.viewsOrderPaymentViewMakeFinalPaymentStarted();
                if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine)) {
                    tenderLine = this.paymentViewModel.getTenderLine();
                }
                this.indeterminateWaitVisible(true);
                var cardInfo = this.paymentViewModel.cardInfo;
                if (cardInfo && (!Commerce.ObjectExtensions.isNullOrUndefined(cardInfo.CashBackAmount)) && (cardInfo.CashBackAmount !== 0)) {
                    tenderLine.CashBackAmount = cardInfo.CashBackAmount;
                }
                if (this.paymentViewModel.isCreditCard() || this.paymentViewModel.isDebitCard()) {
                    return this._cardPaymentAuthorizeRefundAsync(processingPaymentCorrelationId, tenderLine);
                }
                this._resolvePendingResults = false;
                var paymentInfo;
                var asyncQueue = new Commerce.AsyncQueue();
                if (this.paymentViewModel.isGiftCardPayment && !Commerce.StringExtensions.isNullOrWhitespace(this.paymentViewModel.tenderType().ConnectorId)) {
                    var isApproved_1 = false;
                    var giftCardTypeId_1 = Commerce.Proxy.Entities.CardType.GiftCard;
                    return asyncQueue.enqueue(function () {
                        var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
                        var cardPayment = Commerce.Peripherals.instance.cardPayment;
                        var tenderInfo = {
                            CardNumber: tenderLine.GiftCardId,
                            TenderId: tenderLine.TenderTypeId,
                            CardTypeId: giftCardTypeId_1,
                            IsSwipe: _this.isSwipeCard()
                        };
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal) && _this.canUsePaymentTerminal()) {
                            var request = new Commerce.PaymentTerminalAuthorizePaymentActivityRequest(_this.paymentViewModel.tenderType().ConnectorId, tenderLine.Amount, tenderInfo, _this.paymentViewModel.paymentCard.VoiceAuthorizationCode(), _this.isManualCardEntry(), null);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                                .done(function (result) {
                                if (!result.canceled) {
                                    isApproved_1 = result.data.result.IsApproved;
                                    tenderLine.Amount = result.data.result.ApprovedAmount;
                                    paymentInfo = result.data.result;
                                }
                            }).always(function () {
                                _this.indeterminateWaitVisible(false);
                            }).map(function (result) {
                                return { canceled: result.canceled, data: result.data.result };
                            });
                        }
                        else if (!Commerce.ObjectExtensions.isNullOrUndefined(cardPayment)) {
                            var request = new Commerce.CardPaymentAuthorizePaymentRequest(_this.paymentViewModel.tenderType().ConnectorId, tenderLine.Amount, tenderInfo, null);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                                .done(function (result) {
                                if (!result.canceled) {
                                    isApproved_1 = result.data.result.IsApproved;
                                    tenderLine.Amount = result.data.result.ApprovedAmount;
                                    paymentInfo = result.data.result;
                                }
                            }).always(function () {
                                _this.indeterminateWaitVisible(false);
                            }).map(function (result) {
                                return { canceled: result.canceled, data: result.data.result };
                            });
                        }
                        else {
                            var errors = new Array();
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED));
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        }
                    }).enqueue(function () {
                        if (isApproved_1) {
                            var preprocessedTenderLine = _this.paymentViewModel.getPreprocessedTenderLine(paymentInfo.ApprovedAmount, paymentInfo);
                            preprocessedTenderLine.GiftCardId = tenderLine.GiftCardId;
                            return _this._addPreprocessedTenderLineToCart(preprocessedTenderLine, processingPaymentCorrelationId);
                        }
                        else {
                            var errors = new Array();
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.GIFT_CARD_NOT_APPROVED));
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        }
                    }).run();
                }
                else {
                    return asyncQueue.enqueue(function () {
                        var checkRecoveryRequest = new Commerce.CheckForRecoveredPaymentTransactionClientRequest(processingPaymentCorrelationId, tenderLine.Amount, Commerce.Payments.TransactionReferenceAllowedActions.Read);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(checkRecoveryRequest));
                    }).enqueue(function (correlationContainer) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer.data.result.foundTransaction)) {
                            return _this._addTenderLineToCart(tenderLine, processingPaymentCorrelationId);
                        }
                        else {
                            _this._resolvePendingResults = true;
                            Commerce.RetailLogger.posOperationCanceledDueToRecoveredPayment(_this._options.tenderType.Name, processingPaymentCorrelationId);
                            asyncQueue.cancel();
                            return Commerce.AsyncResult.createResolved();
                        }
                    }).run();
                }
            };
            PaymentViewController.prototype._addPreprocessedTenderLineToCart = function (tenderLine, processingPaymentCorrelationId) {
                var _this = this;
                var request = new Commerce.AddPreprocessedTenderLineToCartClientRequest(tenderLine);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .done(function (result) {
                    if (result.canceled) {
                        _this.paymentCancel();
                        return;
                    }
                    _this.getSignature(processingPaymentCorrelationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsOrderPaymentViewAddTenderLineToCartFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    _this.paymentErrorCallback(errors);
                }).always(function () {
                    _this._resolvePendingResults = true;
                });
            };
            PaymentViewController.prototype._addTenderLineToCart = function (tenderLine, processingPaymentCorrelationId) {
                var _this = this;
                return this.paymentViewModel.addTenderLineToCart(tenderLine)
                    .done(function (result) {
                    if (result.canceled) {
                        _this.paymentCancel();
                        return;
                    }
                    _this.getSignature(processingPaymentCorrelationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsOrderPaymentViewAddTenderLineToCartFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                }).always(function () {
                    _this._resolvePendingResults = true;
                });
            };
            PaymentViewController.prototype.validateSignature = function (processingPaymentCorrelationId, signatureData) {
                var _this = this;
                var validateSignatureActivityOptions = {
                    signature: signatureData,
                    paymentAmount: this.paymentViewModel.getPaymentAmount()
                };
                var validateSignatureActivity = new Commerce.Activities.ValidateSignatureActivity(validateSignatureActivityOptions);
                validateSignatureActivity.execute().done(function () {
                    var result = Commerce.Activities.SignatureActivityResultEnum.Cancelled;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(validateSignatureActivity.response) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(validateSignatureActivity.response.result)) {
                        result = validateSignatureActivity.response.result;
                    }
                    switch (result) {
                        case Commerce.Activities.SignatureActivityResultEnum.OK:
                            _this.paymentViewModel.signatureData(signatureData);
                            _this.beginUploadingSignature(processingPaymentCorrelationId, signatureData);
                            break;
                        default:
                            if (!_this.paymentViewModel.isCardSourcePaymentTerminal()) {
                                _this.paymentViewModel.signatureData(null);
                                _this.getSignature(processingPaymentCorrelationId, true);
                            }
                            else {
                                var tenderLine = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart);
                                _this.paymentViewModel.voidPayment([tenderLine], processingPaymentCorrelationId)
                                    .done(function () {
                                    _this.paymentCompleted(processingPaymentCorrelationId);
                                })
                                    .fail(function (errors) {
                                    _this.paymentErrorCallback(Commerce.PaymentErrorHelper.ConvertToClientErrors(errors));
                                });
                            }
                            break;
                    }
                });
            };
            PaymentViewController.prototype.getSignatureFromPOS = function (processingPaymentCorrelationId, allowSkip) {
                var _this = this;
                if (allowSkip === void 0) { allowSkip = false; }
                var getSignatureActivityOptions = {
                    allowSkip: allowSkip,
                    paymentAmount: this.paymentViewModel.getPaymentAmount()
                };
                var getSignatureActivity = new Commerce.Activities.GetSignatureActivity(getSignatureActivityOptions);
                getSignatureActivity.execute().done(function () {
                    var result = Commerce.Activities.SignatureActivityResultEnum.Cancelled;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(getSignatureActivity.response) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(getSignatureActivity.response.result)) {
                        result = getSignatureActivity.response.result;
                    }
                    switch (result) {
                        case Commerce.Activities.SignatureActivityResultEnum.OK:
                            _this.paymentViewModel.signatureData(getSignatureActivity.response.signature);
                            _this.beginUploadingSignature(processingPaymentCorrelationId, getSignatureActivity.response.signature);
                            break;
                        case Commerce.Activities.SignatureActivityResultEnum.Skipped:
                            _this.paymentCompleted(processingPaymentCorrelationId);
                            break;
                        default:
                            _this.paymentViewModel.signatureData(null);
                            _this.getSignature(processingPaymentCorrelationId, true);
                            break;
                    }
                });
            };
            PaymentViewController.prototype.getSignature = function (processingPaymentCorrelationId, allowSkip) {
                var _this = this;
                if (allowSkip === void 0) { allowSkip = false; }
                this.indeterminateWaitVisible(false);
                if (this.paymentViewModel.isSignatureRequired()) {
                    var signature = this.paymentViewModel.signatureData();
                    if (!Commerce.StringExtensions.isNullOrWhitespace(signature)) {
                        this.validateSignature(processingPaymentCorrelationId, signature);
                    }
                    else if (Commerce.Peripherals.instance && Commerce.Peripherals.instance.signatureCapture) {
                        if (!this.paymentViewModel.isCardSourcePaymentTerminal()) {
                            Commerce.Peripherals.instance.signatureCapture.openDevice(this)
                                .done(function () {
                                if (Commerce.Peripherals.instance.signatureCapture.isActive) {
                                    var waitForSignatureActivityOptions = {
                                        allowSkip: allowSkip,
                                        onReady: null
                                    };
                                    var waitForSignatureActivity_1 = new Commerce.Activities.WaitForSignatureActivity(waitForSignatureActivityOptions);
                                    waitForSignatureActivity_1.context.onReady = _this.getSignatureFromDevice.bind(_this, processingPaymentCorrelationId, waitForSignatureActivity_1, allowSkip);
                                    waitForSignatureActivity_1.execute().done(function () {
                                        var result = Commerce.Activities.SignatureActivityResultEnum.Cancelled;
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity_1.response) &&
                                            !Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity_1.response.result)) {
                                            result = waitForSignatureActivity_1.response.result;
                                        }
                                        switch (result) {
                                            case Commerce.Activities.SignatureActivityResultEnum.OK:
                                                Commerce.Peripherals.instance.signatureCapture.cancelSignature(_this)
                                                    .fail(function (errors) {
                                                    var error = Commerce.ArrayExtensions.firstOrUndefined(errors);
                                                    var errorCode = "Microsoft_Dynamics_Commerce_HardwareStation_PeripheralLockNotAcquired";
                                                    if (error && error.ErrorCode === errorCode) {
                                                        Commerce.ViewModelAdapter.displayMessage("string_4924", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_4909")
                                                            .always(function () {
                                                            _this.getSignature(processingPaymentCorrelationId, true);
                                                        });
                                                    }
                                                    else {
                                                        Commerce.Peripherals.instance.signatureCapture.closeDevice()
                                                            .always(function () {
                                                            Commerce.ViewModelAdapter.displayMessage("string_4924", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_4909")
                                                                .always(function () {
                                                                _this.getSignature(processingPaymentCorrelationId, allowSkip);
                                                            });
                                                        });
                                                    }
                                                });
                                                break;
                                            case Commerce.Activities.SignatureActivityResultEnum.Cancelled:
                                                Commerce.Peripherals.instance.signatureCapture.cancelSignature(_this)
                                                    .always(function () {
                                                    Commerce.Peripherals.instance.signatureCapture.closeDevice()
                                                        .always(function () {
                                                        _this.getSignatureFromPOS(processingPaymentCorrelationId, allowSkip);
                                                    });
                                                });
                                                break;
                                            case Commerce.Activities.SignatureActivityResultEnum.Skipped:
                                                Commerce.Peripherals.instance.signatureCapture.cancelSignature(_this)
                                                    .always(function () {
                                                    Commerce.Peripherals.instance.signatureCapture.closeDevice()
                                                        .always(function () {
                                                        _this.paymentCompleted(processingPaymentCorrelationId);
                                                    });
                                                });
                                                break;
                                        }
                                    });
                                }
                                else {
                                    _this.getSignatureFromPOS(processingPaymentCorrelationId, allowSkip);
                                }
                            })
                                .fail(function (errors) {
                                Commerce.RetailLogger.viewsOrderPaymentViewGetSignatureFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                                Commerce.NotificationHandler.displayClientErrors(errors)
                                    .always(function () {
                                    _this.getSignatureFromPOS(processingPaymentCorrelationId, allowSkip);
                                });
                            });
                        }
                        else {
                            this.paymentCompleted(processingPaymentCorrelationId);
                        }
                    }
                    else {
                        this.getSignatureFromPOS(processingPaymentCorrelationId, allowSkip);
                    }
                }
                else {
                    this.paymentCompleted(processingPaymentCorrelationId);
                }
            };
            PaymentViewController.prototype.getSignatureFromDevice = function (processingPaymentCorrelationId, waitForSignatureActivity, allowSkip) {
                var _this = this;
                if (allowSkip === void 0) { allowSkip = false; }
                if (Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity)) {
                    throw "waitForSignatureActivity parameter cannot be null or undefined";
                }
                Commerce.Peripherals.instance.signatureCapture.getSignature(this)
                    .done(function (signature) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity.response) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity.response.result) ||
                        (waitForSignatureActivity.response.result === Commerce.Activities.SignatureActivityResultEnum.OK)) {
                        Commerce.Peripherals.instance.signatureCapture.closeDevice()
                            .always(function () {
                            if (!Commerce.StringExtensions.isNullOrWhitespace(signature)) {
                                waitForSignatureActivity.cancel()
                                    .always(function () {
                                    _this.validateSignature(processingPaymentCorrelationId, signature);
                                });
                            }
                            else {
                                waitForSignatureActivity.cancel()
                                    .always(function () {
                                    Commerce.ViewModelAdapter.displayMessage("string_4922", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default)
                                        .always(function () {
                                        _this.getSignature(processingPaymentCorrelationId, true);
                                    });
                                });
                            }
                        });
                    }
                    else {
                        Commerce.Peripherals.instance.signatureCapture.closeDevice();
                    }
                })
                    .fail(function (errors) {
                    var error = Commerce.ArrayExtensions.firstOrUndefined(errors);
                    if (error && error.ErrorCode === "Microsoft_Dynamics_Commerce_HardwareStation_PeripheralLockNotAcquired") {
                        Commerce.ViewModelAdapter.displayMessage("string_4924", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_4909")
                            .always(function () {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity.response) ||
                                Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity.response.result)) {
                                waitForSignatureActivity.cancel().always(function () {
                                    _this.getSignature(processingPaymentCorrelationId, true);
                                });
                            }
                        });
                    }
                    else {
                        Commerce.Peripherals.instance.signatureCapture.closeDevice()
                            .always(function () {
                            Commerce.NotificationHandler.displayClientErrors(errors)
                                .always(function () {
                                if (Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity.response) ||
                                    Commerce.ObjectExtensions.isNullOrUndefined(waitForSignatureActivity.response.result)) {
                                    waitForSignatureActivity.cancel().always(function () {
                                        _this.getSignatureFromPOS(processingPaymentCorrelationId, allowSkip);
                                    });
                                }
                            });
                        });
                    }
                });
            };
            PaymentViewController.prototype.paymentCompleted = function (correlationId, tenderLine) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine)) {
                    tenderLine = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart);
                }
                var triggerOptions = { cart: Commerce.Session.instance.cart, tenderLine: tenderLine };
                Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostPayment, triggerOptions).done(function () {
                    _this.indeterminateWaitVisible(false);
                    _this.resolvePaymentResult(correlationId, { paymentResult: tenderLine, paymentCorrelationId: correlationId });
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors).always(function () {
                        _this.indeterminateWaitVisible(false);
                        _this.resolvePaymentResult(correlationId, { paymentResult: tenderLine, paymentCorrelationId: correlationId });
                    });
                });
            };
            PaymentViewController.prototype.paymentCancel = function () {
                try {
                    var isSwipeCard = this.isSwipeCard() && (this.paymentViewModel.isCardPayment || this.paymentViewModel.isGiftCardPayment);
                    if (isSwipeCard && this.canUsePaymentTerminal()) {
                        this.paymentViewModel.updateCardInfo(null);
                    }
                    this._handleExternalCancelation();
                }
                finally {
                    this.indeterminateWaitVisible(false);
                }
            };
            PaymentViewController.prototype.paymentErrorCallback = function (errors) {
                var _this = this;
                return Commerce.NotificationHandler.displayClientErrors(errors)
                    .done(function () { _this.paymentCancel(); })
                    .fail(function () { _this.paymentCancel(); });
            };
            PaymentViewController.prototype.resolvePaymentResult = function (correlationId, paymentResult) {
                var _this = this;
                if (this.paymentViewModel.onPaymentResultAvailableAsync) {
                    this.indeterminateWaitVisible(true);
                    this._resolvePendingResults = false;
                    this.paymentViewModel.onPaymentResultAvailableAsync(paymentResult)
                        .done(function (result) {
                        if (result.canceled) {
                            _this.paymentCancel();
                        }
                    }).fail(function (errors) {
                        _this.paymentErrorCallback(errors);
                    }).always(function () {
                        _this._resolvePendingResults = true;
                        _this.indeterminateWaitVisible(false);
                    });
                }
                else {
                    Commerce.ViewModelAdapter.navigate("CartView", { navigationSource: "PaymentView", correlationId: correlationId });
                }
            };
            PaymentViewController.prototype.beginUploadingSignature = function (correlationId, signatureData) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(signatureData)) {
                    return;
                }
                var tenderLine = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart);
                if (tenderLine === null) {
                    Commerce.NotificationHandler.displayErrorMessage("string_1136");
                    return;
                }
                else {
                    tenderLine.SignatureData = signatureData;
                }
                this.indeterminateWaitVisible(true);
                this.paymentViewModel.updateTenderLineSignatureInCart(tenderLine)
                    .done(function () {
                    _this.paymentCompleted(correlationId, tenderLine);
                })
                    .fail(function (errors) {
                    _this.paymentErrorCallback(errors);
                });
            };
            PaymentViewController.prototype.searchCustomers = function (correlationId) {
                var _this = this;
                this._resolvePendingResults = false;
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    Commerce.ViewModelAdapter.collapseAndNavigate("PaymentView", _this._options);
                }, function () {
                    _this._handleExternalCancelation();
                }, function (customer) {
                    return Commerce.CustomerHelper.crossCompanyCustomerTransferAndAddToCartAsync(correlationId, customer);
                });
                var options = {
                    searchText: Commerce.StringExtensions.EMPTY,
                    customerSelectionHandler: customerSelectionHandler
                };
                Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.CustomerSearch, options)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            PaymentViewController.prototype.selectCardType = function (cardTypes) {
                var _this = this;
                Commerce.RetailLogger.viewsOrderPaymentViewShowSelectPaymentCardTypeDialog();
                this.indeterminateWaitVisible(true);
                var activity = new Commerce.Activities.SelectCardTypeActivity({
                    cardTypes: cardTypes
                });
                return activity.execute().map(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        Commerce.RetailLogger.viewsOrderPaymentViewCancelSelectPaymentCardTypeDialog();
                        return { canceled: true, data: undefined };
                    }
                    else {
                        Commerce.RetailLogger.viewsOrderPaymentViewPaymentCardTypeSelectedInDialog(activity.response.cardType.TypeId, activity.response.cardType.PaymentMethodId, activity.response.cardType.RecordId);
                        return { canceled: false, data: activity.response.cardType };
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            PaymentViewController.prototype.filterGiftCardCardTypes = function (cardTypes) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(cardTypes)) {
                    return null;
                }
                return cardTypes.filter(function (cardType) {
                    var isGiftCardTypeVal = cardType.CardTypeValue === Commerce.Proxy.Entities.CardType.GiftCard;
                    var isSameTenderType = Commerce.StringExtensions.compare(cardType.PaymentMethodId, _this.paymentViewModel.tenderTypeId(), true) === 0;
                    return isGiftCardTypeVal && isSameTenderType;
                });
            };
            PaymentViewController.prototype._updateCardPaymentAcceptPageUrl = function (cardPaymentAcceptPageUrl, cardPaymentAcceptPageSubmitUrl) {
                var paymentAcceptUrl;
                if (!Commerce.StringExtensions.isNullOrWhitespace(cardPaymentAcceptPageSubmitUrl)) {
                    paymentAcceptUrl = cardPaymentAcceptPageUrl;
                }
                else {
                    var bodyElement = $(document).find("body");
                    var bodyBackgroundColor = this._convertToHexColor(bodyElement.css("background-color"));
                    var textElement = $(this.getViewContainer()).find("#sampleText");
                    var textBackgroundColor = this._convertToHexColor(textElement.css("background-color"));
                    var textColor = this._convertToHexColor(textElement.css("color"));
                    var textFontSize = textElement.css("font-size");
                    var labelElement = $(this.getViewContainer()).find("#sampleLabel");
                    var labelColor = this._convertToHexColor(labelElement.css("color"));
                    var textFontFamilyString = labelElement.css("font-family").replace(/\"/g, "").replace(/\'/g, "");
                    paymentAcceptUrl = cardPaymentAcceptPageUrl
                        + "&pagebackgroundcolor=" + encodeURIComponent(bodyBackgroundColor)
                        + "&disabledtextbackgroundcolor=" + encodeURIComponent(bodyBackgroundColor)
                        + "&labelcolor=" + encodeURIComponent(labelColor)
                        + "&textbackgroundcolor=" + encodeURIComponent(textBackgroundColor)
                        + "&textcolor=" + encodeURIComponent(textColor)
                        + "&fontsize=" + encodeURIComponent(textFontSize)
                        + "&fontfamily=" + encodeURIComponent(textFontFamilyString)
                        + "&pagewidth=320px"
                        + "&columnnumber=1";
                }
                return paymentAcceptUrl;
            };
            PaymentViewController.prototype._convertToHexColor = function (color) {
                if (color.indexOf("#") !== -1) {
                    return color;
                }
                color = color
                    .replace("rgba", "")
                    .replace("rgb", "")
                    .replace("(", "")
                    .replace(")", "");
                var colorObj = color.split(",");
                return "#"
                    + ("0" + parseInt(colorObj[0], 10).toString(16)).slice(-2)
                    + ("0" + parseInt(colorObj[1], 10).toString(16)).slice(-2)
                    + ("0" + parseInt(colorObj[2], 10).toString(16)).slice(-2);
            };
            PaymentViewController.denominationBlockSize = 120;
            PaymentViewController.PAYMENT_VIEW_NAME = "PaymentView";
            PaymentViewController.CARDPAYMENTACCEPTSWIPE = "msax-cc-swipe";
            PaymentViewController.CARDPAYMENTACCEPTPARTIALOK = "msax-cc-partialok";
            PaymentViewController.CARDPAYMENTACCEPTAMOUNT = "msax-cc-amount";
            PaymentViewController.CARDPAYMENTACCEPTSUBMIT = "msax-cc-submit";
            PaymentViewController.CARDPAYMENTACCEPTERROR = "msax-cc-error";
            PaymentViewController.CARDPAYMENTACCEPTPARTIALAMOUNT = "msax-cc-partialamount";
            PaymentViewController.CARDPAYMENTACCEPTRESULT = "msax-cc-result";
            PaymentViewController.CARDPAYMENTACCEPTHEIGHT = "msax-cc-height";
            PaymentViewController.CARDPAYMENTACCEPTCARDPREFIX = "msax-cc-cardprefix";
            return PaymentViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.PaymentViewController = PaymentViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CartViewController = (function (_super) {
            __extends(CartViewController, _super);
            function CartViewController(options) {
                var _this = _super.call(this, true) || this;
                var detailViewMode = Commerce.ViewModels.CartViewTransactionDetailViewMode.items;
                _this._setOptions = function (options) {
                    _this._options = options = options || {};
                    if (!_this.navigationSource) {
                        _this.navigationSource = ko.observable("");
                    }
                    _this.navigationSource(options.navigationSource || "");
                    if (!Commerce.StringExtensions.isNullOrWhitespace(options.transactionDetailViewMode)) {
                        detailViewMode = options.transactionDetailViewMode;
                    }
                };
                _this._setOptions(options);
                var addSessionCartStateUpdateHandler = function (updateCartStateHandler) {
                    Commerce.Session.instance.addCartStateUpdateHandler(_this._element, updateCartStateHandler);
                };
                addSessionCartStateUpdateHandler = addSessionCartStateUpdateHandler.bind(_this);
                var removeSessionCartStateUpdateHandler = function (updateCartStateHandler) {
                    Commerce.Session.instance.removeCartStateUpdateHandler(_this._element, updateCartStateHandler);
                };
                removeSessionCartStateUpdateHandler = removeSessionCartStateUpdateHandler.bind(_this);
                var cartViewModelOptions = {
                    selectLoyaltyCardHandler: _this.selectCustomerLoyaltyCardAndAddToCartAsync.bind(_this),
                    onAddressEditClicked: function (address) {
                        var shouldSaveChanges = true;
                        var addressAddEditOptions = Commerce.ViewModels.AddressAddEditViewModelOptions.createInstance(Commerce.Session.instance.Customer, address, shouldSaveChanges, CartViewController._cartViewName, _this._options);
                        Commerce.ViewModelAdapter.navigate("AddressAddEditView", addressAddEditOptions);
                    },
                    addSessionCartStateUpdateHandler: addSessionCartStateUpdateHandler,
                    removeSessionCartStateUpdateHandler: removeSessionCartStateUpdateHandler
                };
                _this.cartViewModel = new Commerce.ViewModels.CartViewModel(cartViewModelOptions);
                _this.cartViewModel.viewMode(detailViewMode);
                _this.customerDetailsVisible = ko.computed(function () { return !Commerce.StringExtensions.isNullOrWhitespace(_this.cartViewModel.cart().CustomerId); }, _this);
                _this.searchText = ko.observable("");
                _this.printerEnabled = ko.observable(false);
                _this.isBackNavigationEnabled = false;
                _this.isAdditionalInfoVisible = ko.observable(true);
                _this.showLinesGridColumnHeaders = ko.observable(true);
                _this.showPaymentGridColumnHeaders = ko.observable(true);
                _this.showDeliveryGridColumnHeaders = ko.observable(true);
                _this.discountLabelResourceId = ko.computed(_this._getDiscountLabelResourceId, _this);
                _this.isNavigationBarVisible = ko.observable(false);
                _this.viewTitle = ko.computed(_this.getCartTypeHeader, _this);
                _this.showDeliveryUI = ko.computed(_this.isDeliveryUIVisible, _this);
                _this.showDeliveryUI.subscribe(function (isVisible) {
                    if (!isVisible) {
                        _this._transactionGridListViewViewModelsHelper.releaseDeliveryListViewViewModel();
                    }
                });
                _this.cartViewModel.selectedCartLines.subscribe(function (newSelectedCartLines) {
                    if (Commerce.ArrayExtensions.hasElements(newSelectedCartLines)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel())) {
                            _this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel().selectItems(newSelectedCartLines);
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel())) {
                            _this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel().selectItems(newSelectedCartLines);
                        }
                    }
                    else {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel())) {
                            _this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel().unselectAllItems();
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel())) {
                            _this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel().unselectAllItems();
                        }
                    }
                });
                _this._transactionGridListViewViewModelsHelper = new TransactionGridListViewViewModelsHelper();
                _this._tabIndexController = new Commerce.TabIndexController();
                return _this;
            }
            Object.defineProperty(CartViewController.prototype, "isAlwaysExpand", {
                get: function () {
                    return Commerce.ApplicationContext.Instance.deviceConfiguration.AlwaysExpandTransactionScreenLineDetails;
                },
                enumerable: true,
                configurable: true
            });
            CartViewController.prototype.keepAliveViewActivated = function (options) {
                this._setOptions(options);
                if (Commerce.Session.instance.productCatalogStore.StoreType !== Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore) {
                    var catalogViewModel = new Commerce.ViewModels.CatalogViewModel();
                    var setVirtualCatalogAsyncResult = catalogViewModel.setVirtualCatalog(Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore, null, null)
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                    this.cartViewModel.isBusyUntil(setVirtualCatalogAsyncResult);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(this._options.itemToAddOrSearch) && this._options.itemToAddOrSearch !== "0") {
                    this.addOrSearchProductsAndCustomers(this._options.itemToAddOrSearch, null, Commerce.Proxy.Entities.BarcodeEntryMethodType.Selected);
                }
                this.setNavigationBarVisibility();
                this._setColumnsProperties();
                var correlationId = Commerce.LoggerHelper.getFormattedCorrelationId(options);
                this.handleNavigationFromPaymentView(correlationId);
                this._handleNavigationFromFulfillmentLineView(correlationId);
                Commerce.RetailLogger.viewModelCartViewIsVisible(correlationId);
            };
            CartViewController.prototype.load = function () {
                if (Commerce.ArrayExtensions.hasElements(this.cartViewModel.selectedCartLines())) {
                    this.cartViewModel.selectedCartLines([]);
                }
                if (Commerce.ArrayExtensions.hasElements(this.cartViewModel.selectedTenderLines())) {
                    this.cartViewModel.selectedTenderLines([]);
                }
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.load());
            };
            CartViewController.prototype.onCreated = function (element) {
                var _this = this;
                _super.prototype.onCreated.call(this, element);
                this.setNavigationBarVisibility();
                this._setColumnsProperties();
                this.updateMaxNumberOfRecommendedProducts();
                Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, function (args) {
                    _this.setNavigationBarVisibility();
                    _this._setColumnsProperties();
                    _this.updateMaxNumberOfRecommendedProducts();
                });
            };
            CartViewController.prototype.onShown = function () {
                var _this = this;
                var $element = $(this._element);
                $element.find("#TotalsPanel").attr("aria-hidden", "false");
                this.cartViewModel.onShown();
                this._activeControllerForPeripheralEvents = this;
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.setCartAsync(Commerce.Session.instance.cart), this.cartViewModel.isBusy());
                if (Commerce.Session.instance.cartReloadedNotificationPending) {
                    Commerce.Session.instance.cartReloaded();
                }
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    if (_this._activeControllerForPeripheralEvents && _this.barcodeScannerHandler) {
                        _this.barcodeScannerHandler.call(_this._activeControllerForPeripheralEvents, barcode, Commerce.Proxy.Entities.BarcodeEntryMethodType.SingleScanned);
                    }
                });
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    if (_this._activeControllerForPeripheralEvents && _this.magneticStripeReaderHandler) {
                        _this.magneticStripeReaderHandler.call(_this._activeControllerForPeripheralEvents, cardInfo);
                    }
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.CART);
                this.enableNumPad();
                if (!Commerce.ArrayExtensions.hasElements(this.cartViewModel.selectedCartLines())) {
                    this.cartViewModel.selectLastCartLine();
                }
                var tabbableSectionSelectors = ["#ButtonGrid1", "#ButtonGrid2", "#ButtonGrid3",
                    "#ButtonGrid4", "#ButtonGrid5", "#ButtonGrid6", "#ButtonGrid7", "#ButtonGrid8", "#ButtonGrid9",
                    "#ButtonGrid10", "#productRecommendations", "#NumberPad", "#CustomerPanel", "#TransactionGrid",
                    "#TotalsPanel", "#TabControl", "#AttributesPanel"
                ];
                this._tabIndexController.init(".cartView", ["aria-selected", "disabled"], tabbableSectionSelectors);
            };
            CartViewController.prototype.afterBind = function () {
                this.cartViewModel.selectLastCartLine();
            };
            CartViewController.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.CART);
                this.disableNumPad();
                var $element = $(this._element);
                $element.find("#TotalsPanel").attr("aria-hidden", "true");
                this.cartViewModel.onHidden();
                this._tabIndexController.disconnect();
            };
            CartViewController.prototype.onNumPadEnterEventHandler = function (result) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(result.value)) {
                    this.addOrSearchProductsAndCustomers(result.value, result.quantity, Commerce.Proxy.Entities.BarcodeEntryMethodType.ManuallyEntered);
                }
                this.searchText(Commerce.StringExtensions.EMPTY);
            };
            CartViewController.prototype.onAddCustomerClick = function (sender, eventArgs) {
                this.searchCustomers();
            };
            CartViewController.prototype.lineItemSelectionHandler = function (cartLines) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel())
                    || Commerce.ObjectExtensions.isNullOrUndefined(this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel())) {
                    this.cartViewModel.selectCartLinesIfDifferent(cartLines);
                }
                else if (!this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel().isChangingItemSelection) {
                    this.cartViewModel.selectCartLinesIfDifferent(cartLines);
                    this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel().selectItems(cartLines);
                }
            };
            CartViewController.prototype.deliverySelectionHandler = function (cartLines) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel())
                    || Commerce.ObjectExtensions.isNullOrUndefined(this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel())) {
                    this.cartViewModel.selectCartLinesIfDifferent(cartLines);
                }
                else if (!this._transactionGridListViewViewModelsHelper.getDeliveryListViewViewModel().isChangingItemSelection) {
                    this.cartViewModel.selectCartLinesIfDifferent(cartLines);
                    this._transactionGridListViewViewModelsHelper.getLineItemListViewViewModel().selectItems(cartLines);
                }
            };
            CartViewController.prototype.tenderLinesSelectionChanged = function (tenderLines) {
                this.cartViewModel.selectedTenderLines(tenderLines);
            };
            CartViewController.prototype.isDeliveryRowExpandable = function (cartLine) {
                var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                var isVariant = !Commerce.ObjectExtensions.isNullOrUndefined(product) && product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant;
                var isExpandable = isVariant ||
                    !Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ShippingAddress) &&
                        (!Commerce.StringExtensions.isNullOrWhitespace(cartLine.ShippingAddress.Name) ||
                            !Commerce.StringExtensions.isNullOrWhitespace(cartLine.ShippingAddress.FullAddress));
                return isExpandable;
            };
            CartViewController.prototype.isCustomerAccountDepositGridRowExpandable = function (customerAccountDepositCartLine) {
                var isExpandable = !Commerce.ObjectExtensions.isNullOrUndefined(customerAccountDepositCartLine)
                    && (customerAccountDepositCartLine.Comment && (customerAccountDepositCartLine.Comment.length > 0));
                return isExpandable;
            };
            CartViewController.prototype.getPriceOverrideText = function (cartLine) {
                var priceOverrideText = Commerce.StringExtensions.EMPTY;
                if (cartLine && cartLine.IsPriceOverridden) {
                    var originalFormattedPriceText = Commerce.NumberExtensions.formatCurrency(cartLine.OriginalPrice);
                    priceOverrideText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4368"), originalFormattedPriceText);
                }
                return priceOverrideText;
            };
            CartViewController.prototype.isPaymentVoided = function (tenderLine) {
                return tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.Voided;
            };
            CartViewController.prototype.executeShowPaymentFlow = function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (this.cartViewModel.canCheckout) {
                    this.cartViewModel.concludeTransaction(correlationId);
                }
                else if (this.cartViewModel.canAddPayment) {
                    this.showPaymentDialog(correlationId);
                }
            };
            CartViewController.prototype.browseProducts = function () {
                Commerce.ViewModelAdapter.navigate("CategoriesView");
            };
            CartViewController.prototype.selectCustomerLoyaltyCardAndAddToCartAsync = function (cartLoyaltyCardId) {
                var _this = this;
                var activity = new Commerce.Activities.SelectCustomerLoyaltyCardActivity({
                    loyaltyCards: this.cartViewModel.customerLoyaltyCards(),
                    currentLoyaltyCardId: cartLoyaltyCardId
                });
                activity.responseHandler = function (response) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(response)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    return _this.cartViewModel.addLoyaltyCardToCartAsync(response.loyaltyCard.CardNumber);
                };
                return this.cartViewModel.isBusyUntil(activity.execute());
            };
            CartViewController.prototype.viewRecommendedProductDetails = function (itemInvoked) {
                var recordId = itemInvoked.data.RecordId;
                var trackingId = itemInvoked.data.TrackingId;
                Commerce.RetailLogger.viewModelCartViewRecommendedProductDetails(trackingId, recordId);
                var simpleProductDetailsViewModelOptions = {
                    productId: recordId,
                    product: undefined,
                    isSelectionMode: false,
                    addToCartOptions: {
                        trackingId: trackingId
                    },
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
            };
            CartViewController.prototype.showDeliveryGrid = function () {
                this.cartViewModel.viewMode(Commerce.ViewModels.CartViewTransactionDetailViewMode.delivery);
            };
            CartViewController.prototype.operationsButtonGridClick = function (operationId, actionProperty) {
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online &&
                    !Commerce.Operations.OperationsManager.instance.canExecuteInOfflineMode(operationId)) {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE)];
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    return true;
                }
                if (this.cartViewModel.isProcessTextRunning() &&
                    Commerce.Operations.RetailOperation.ItemSale !== operationId) {
                    return true;
                }
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsCartButtonGridOperationExecutionStarted(CORRELATION_ID, operationId.toString(), actionProperty || Commerce.StringExtensions.EMPTY);
                switch (operationId) {
                    case Commerce.Operations.RetailOperation.DiscountCodeBarcode:
                        this.addDiscountCode();
                        return true;
                    case Commerce.Operations.RetailOperation.ClearQuantity:
                        this.clearQuantityOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.SetQuantity:
                        this.setQuantityOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.AddSerialNumber:
                        this.addSerialNumberOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.ChangeUnitOfMeasure:
                        this.changeUnitOfMeasureOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.VoidItem:
                        this.voidProducts();
                        return true;
                    case Commerce.Operations.RetailOperation.VoidPayment:
                        this.voidPayment(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.ReturnItem:
                        this.returnProductOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.TransactionComment:
                        this.transactionComment(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.ItemComment:
                        this.lineComment();
                        return true;
                    case Commerce.Operations.RetailOperation.LoyaltyRequest:
                        this.addLoyaltyCardOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.IssueCreditMemo:
                        var errors = Commerce.Operations.IssueCreditMemoOperationHelper.preOperationValidation(Commerce.Session.instance.cart);
                        if (errors != null) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }
                        else {
                            this.cartViewModel.issueCreditMemo(CORRELATION_ID);
                        }
                        return true;
                    case Commerce.Operations.RetailOperation.LoyaltyIssueCard:
                        var operationResult = Commerce.Operations.OperationsManager.instance.runOperation(operationId, { customer: this.cartViewModel.customer() });
                        this.handleAsyncResult(operationResult);
                        return true;
                    case Commerce.Operations.RetailOperation.IssueGiftCertificate:
                        this.cartViewModel.issueGiftCardOperationAsync(actionProperty);
                        return true;
                    case Commerce.Operations.RetailOperation.AddToGiftCard:
                        this.cartViewModel.addToGiftCardOperationAsync(actionProperty);
                        return true;
                    case Commerce.Operations.RetailOperation.GiftCardBalance:
                        this.cartViewModel.checkGiftCardBalanceOperationAsync(actionProperty);
                        return true;
                    case Commerce.Operations.RetailOperation.LoyaltyCardPointsBalance:
                        this.handleAsyncResult(this.cartViewModel.displayLoyaltyCardBalance(CORRELATION_ID));
                        return true;
                    case Commerce.Operations.RetailOperation.VoidTransaction:
                        this.voidTransaction();
                        return true;
                    case Commerce.Operations.RetailOperation.InvoiceComment:
                        this.invoiceComment();
                        return true;
                    case Commerce.Operations.RetailOperation.OverrideTaxTransaction:
                        this.transactionTaxOverride(actionProperty);
                        return true;
                    case Commerce.Operations.RetailOperation.OverrideTaxTransactionList:
                        this.transactionTaxOverrideFromList();
                        return true;
                    case Commerce.Operations.RetailOperation.OverrideTaxLine:
                        this.lineTaxOverride(actionProperty, CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.OverrideTaxLineList:
                        this.lineTaxOverrideFromList(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.SuspendTransaction:
                        this.suspendTransaction();
                        return true;
                    case Commerce.Operations.RetailOperation.RecallTransaction:
                        this.recallTransaction();
                        return true;
                    case Commerce.Operations.RetailOperation.SalesInvoice:
                        this.salesInvoiceOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.PriceCheck:
                        this.priceCheck();
                        return true;
                    case Commerce.Operations.RetailOperation.CreateCustomerOrder:
                        this.createCustomerOrderClickHandler();
                        return true;
                    case Commerce.Operations.RetailOperation.CreateQuotation:
                        this.createQuotationClickHandler(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.SetQuotationExpirationDate:
                        this.setQuotationExpirationDateClickHandler(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.CalculateFullDiscounts:
                        this.calculateTotalAsync(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.RecalculateCustomerOrder:
                        this.recalculateOrder(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.RecalculateCharges:
                        this.recalculateCharges(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.SalesPerson:
                        this.changeSalesPerson(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.ShipSelectedProducts:
                        this.shipSelected(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.ShipAllProducts:
                        this.shipAll(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.PickupSelectedProducts:
                        this.pickUpSelected(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.PickupAllProducts:
                        this.pickUpAll(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.CarryoutAllProducts:
                        this.carryOutAll(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.CarryoutSelectedProducts:
                        this.carryOutSelected(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.PaymentsHistory:
                        this.paymentsHistoryHandler();
                        return true;
                    case Commerce.Operations.RetailOperation.CreateRetailTransaction:
                        this.createRetailTransactionClickHandler();
                        return true;
                    case Commerce.Operations.RetailOperation.CustomerClear:
                        this.removeCustomer();
                        return true;
                    case Commerce.Operations.RetailOperation.DepositOverride:
                        this.depositOverride(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.PayCashQuick:
                        this._payCashQuickAsync(Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(actionProperty));
                        return true;
                    case Commerce.Operations.RetailOperation.PayGiftCertificate:
                        this.executePaymentFlow(RetailOperation.PayGiftCertificate, Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(actionProperty), undefined, undefined, CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.PayCash:
                    case Commerce.Operations.RetailOperation.PayCheck:
                    case Commerce.Operations.RetailOperation.PayCurrency:
                    case Commerce.Operations.RetailOperation.PayCustomerAccount:
                    case Commerce.Operations.RetailOperation.PayLoyalty:
                    case Commerce.Operations.RetailOperation.PayCreditMemo:
                        this.executePaymentFlow(operationId, Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(actionProperty), undefined, undefined, CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.PayCard:
                        this.payCard(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.TotalDiscountAmount:
                        {
                            var discountValue = Commerce.NumberExtensions.parseNumber(actionProperty);
                            discountValue = isNaN(discountValue) ? undefined : discountValue;
                            this.addTotalDiscountAmount(discountValue);
                        }
                        return true;
                    case Commerce.Operations.RetailOperation.TotalDiscountPercent:
                        {
                            var discountValue = parseFloat(actionProperty);
                            discountValue = isNaN(discountValue) ? undefined : discountValue;
                            this.addTotalDiscountPercent(discountValue);
                        }
                        return true;
                    case Commerce.Operations.RetailOperation.LineDiscountAmount:
                        {
                            var discountValue = Commerce.NumberExtensions.parseNumber(actionProperty);
                            discountValue = isNaN(discountValue) ? undefined : discountValue;
                            this.addLineDiscountAmount(discountValue);
                        }
                        return true;
                    case Commerce.Operations.RetailOperation.LineDiscountPercent:
                        {
                            var discountValue = parseFloat(actionProperty);
                            discountValue = isNaN(discountValue) ? undefined : discountValue;
                            this.addLineDiscountPercent(discountValue);
                        }
                        return true;
                    case Commerce.Operations.RetailOperation.PriceOverride:
                        this.priceOverrideOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.CustomerSearch:
                        this.searchCustomers();
                        return true;
                    case Commerce.Operations.RetailOperation.TimeRegistration:
                        Commerce.Operations.OperationsManager.instance.runOperation(operationId, this);
                        return true;
                    case Commerce.Operations.RetailOperation.ItemSale:
                        this.addOrSearchProductsAndCustomers(actionProperty, null, Commerce.Proxy.Entities.BarcodeEntryMethodType.Selected);
                        return true;
                    case Commerce.Operations.RetailOperation.AddAffiliation:
                        if (!Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                            var affiliationNames = actionProperty.split(";");
                            var options = { affiliationNames: affiliationNames, affiliations: [] };
                            var operationResult_1 = Commerce.Operations.OperationsManager.instance.runOperation(operationId, options);
                            this.handleAsyncResult(operationResult_1);
                        }
                        return true;
                    case Commerce.Operations.RetailOperation.CustomerEdit:
                        if (this.isCustomerAddedToSale()) {
                            Commerce.Operations.OperationsManager.instance.runOperation(operationId, {
                                customer: new Commerce.Proxy.Entities.CustomerClass({ AccountNumber: this.cartViewModel.customer().AccountNumber })
                            });
                        }
                        else {
                            Commerce.NotificationHandler.displayErrorMessage("string_4371");
                        }
                        return true;
                    case Commerce.Operations.RetailOperation.CustomerAccountDeposit:
                        this.customerAccountDeposit(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.PackSlip:
                    case Commerce.Operations.RetailOperation.EditCustomerOrder:
                    case Commerce.Operations.RetailOperation.EditQuotation:
                        this.redirectOperationProcessing();
                        return true;
                    case Commerce.Operations.RetailOperation.ViewProductDetails:
                        this.viewProductDetails();
                        return true;
                    case Commerce.Operations.RetailOperation.ClearCommissionSalesGroupOnLine:
                        this._clearCommissionSalesGroupOnLineOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.ClearCommissionSalesGroupOnTransaction:
                        this._clearCommissionSalesGroupOnTransactionOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.SetCommissionSalesGroupOnLine:
                        this._setCommissionSalesGroupOnLineOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.SetCommissionSalesGroupOnTransaction:
                        this._setCommissionSalesGroupOnTransactionOperation();
                        return true;
                    case Commerce.Operations.RetailOperation.AddCoupons:
                        this._addCoupons(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.RemoveCoupons:
                        this._removeCoupons();
                        return true;
                    case Commerce.Operations.RetailOperation.AddLineCharge:
                        this.addLineChargeClickHandler(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.AddHeaderCharge:
                        this.addHeaderChargeClickHandler(CORRELATION_ID);
                        return true;
                    case Commerce.Operations.RetailOperation.ConcludeTransaction:
                        this.executeShowPaymentFlow();
                        return true;
                    default:
                        return Commerce.Operations.DefaultButtonGridHandler.handleOperation(operationId, actionProperty, CORRELATION_ID, this.cartViewModel.setIsBusy.bind(this.cartViewModel));
                }
            };
            CartViewController.prototype.showOrderHeaderAttributes = function () {
                var _this = this;
                return this.cartViewModel.isBusyUntil(Commerce.ApplicationContext.Instance.salesOrderHeaderAttributeGroupDetailsAsync.value
                    .done(function (attributeGroupDetails) {
                    _this._showOrderAttributes(Commerce.ViewModelAdapter.getResourceString("string_4482"), attributeGroupDetails, function (cart) { return Commerce.ObjectExtensions.isNullOrUndefined(cart) ? [] : cart.AttributeValues; }, function (attributeValues) {
                        return new Commerce.SaveAttributesOnCartClientRequest(attributeValues, Commerce.LoggerHelper.getNewCorrelationId());
                    });
                }));
            };
            CartViewController.prototype.showOrderLineAttributes = function () {
                var _this = this;
                return this.cartViewModel.isBusyUntil(Commerce.ApplicationContext.Instance.salesOrderLinesAttributeGroupDetailsAsync.value
                    .done(function (attributeGroupDetails) {
                    _this._showOrderAttributes(Commerce.ViewModelAdapter.getResourceString("string_4483"), attributeGroupDetails, function (cart) {
                        var selectedCartLine = null;
                        var selectedCartLines = _this.cartViewModel.selectedCartLines();
                        if (Commerce.ArrayExtensions.hasElements(cart.CartLines) &&
                            Commerce.ArrayExtensions.hasElements(selectedCartLines) &&
                            !Commerce.ObjectExtensions.isNullOrUndefined(selectedCartLines[0])) {
                            selectedCartLine = Commerce.ArrayExtensions.firstOrUndefined(cart.CartLines, function (cartLine) {
                                return cartLine.LineId === selectedCartLines[0].LineId;
                            });
                        }
                        return Commerce.ObjectExtensions.isNullOrUndefined(selectedCartLine) ? [] : selectedCartLine.AttributeValues;
                    }, function (attributeValues) {
                        var selectedCartLines = _this.cartViewModel.selectedCartLines();
                        var cartLineId = Commerce.ArrayExtensions.hasElements(selectedCartLines) && !Commerce.ObjectExtensions.isNullOrUndefined(selectedCartLines[0])
                            ? selectedCartLines[0].LineId
                            : Commerce.StringExtensions.EMPTY;
                        if (Commerce.StringExtensions.isNullOrWhitespace(cartLineId)) {
                            return new Commerce.SaveAttributesOnCartLinesClientRequest([], Commerce.LoggerHelper.getNewCorrelationId());
                        }
                        var attributesOnCartLine = {
                            cartLineId: cartLineId,
                            attributes: attributeValues
                        };
                        return new Commerce.SaveAttributesOnCartLinesClientRequest([attributesOnCartLine], Commerce.LoggerHelper.getNewCorrelationId());
                    });
                }));
            };
            CartViewController.prototype._showOrderAttributes = function (title, attributeGroupDetails, getAttributeValues, getSaveAttributesRequest) {
                var showSalesOrderAttributeGroupsDialog = new Commerce.Controls.ShowSalesOrderAttributeGroupsDialog();
                var showSalesOrderAttributeGroupsDialogOptions = {
                    title: title,
                    attributeGroups: attributeGroupDetails,
                    attributeValues: getAttributeValues(this.cartViewModel.cart()),
                    onEditAsync: function (attributeValues) {
                        var request = getSaveAttributesRequest(attributeValues);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .map(function (result) {
                            return result.canceled ? [] : getAttributeValues(result.data.result);
                        });
                    }
                };
                showSalesOrderAttributeGroupsDialog.show(showSalesOrderAttributeGroupsDialogOptions);
            };
            CartViewController.prototype.paymentSelected = function (tenderType, correlationId) {
                var _this = this;
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online &&
                    !Commerce.Operations.OperationsManager.instance.canExecuteInOfflineMode(tenderType.OperationId)) {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE)];
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    return;
                }
                switch (tenderType.OperationId) {
                    case Commerce.Operations.RetailOperation.PayCash:
                    case Commerce.Operations.RetailOperation.PayCheck:
                    case Commerce.Operations.RetailOperation.PayCreditMemo:
                    case Commerce.Operations.RetailOperation.PayCurrency:
                    case Commerce.Operations.RetailOperation.PayCustomerAccount:
                    case Commerce.Operations.RetailOperation.PayGiftCertificate:
                    case Commerce.Operations.RetailOperation.PayLoyalty:
                        this.executePaymentFlow(tenderType.OperationId, tenderType);
                        break;
                    case Commerce.Operations.RetailOperation.PayCard:
                        this.payCard(correlationId, null, null, tenderType);
                        break;
                    default:
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Extensibility.ExtensionOperationProvider)
                            && Commerce.Extensibility.ExtensionOperationProvider.operationRequestExists(tenderType.OperationId)) {
                            Commerce.Extensibility.ExtensionOperationProvider.getOperationRequest(tenderType.OperationId, [], correlationId)
                                .then(function (result) {
                                var request = result.data;
                                if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                                    Commerce.Runtime.executeAsync(request).then(function (result) {
                                        _this.paymentSuccessCallback(request.correlationId, !result.canceled);
                                    }).catch(function (errors) {
                                        _this.cartViewModel.setIsBusy(false);
                                        Commerce.NotificationHandler.displayClientErrors(errors);
                                    });
                                }
                            });
                        }
                        else {
                            Commerce.NotificationHandler.displayErrorMessage("string_1133", tenderType.Name);
                        }
                        break;
                }
            };
            CartViewController.prototype.setNavigationBarVisibility = function () {
                var layout = Commerce.ApplicationContext.Instance.tillLayoutProxy.getLayout("transactionScreenLayout");
                if (!Commerce.ObjectExtensions.isNullOrUndefined(layout)) {
                    this.isNavigationBarVisible(layout.IsBrowseBarAlwaysVisible);
                }
            };
            CartViewController.prototype._setColumnsProperties = function () {
                var layout = Commerce.ApplicationContext.Instance.tillLayoutProxy.getLayoutItem("transactionScreenLayout", "TransactionGrid");
                if (!Commerce.ObjectExtensions.isNullOrUndefined(layout)) {
                    this.isAdditionalInfoVisible(layout.ShowLineFieldLabels);
                    this.showLinesGridColumnHeaders(Commerce.ObjectExtensions.isNullOrUndefined(layout.ShowLineColumnHeaderLabels) ? true : layout.ShowLineColumnHeaderLabels);
                    this.showPaymentGridColumnHeaders(Commerce.ObjectExtensions.isNullOrUndefined(layout.ShowPaymentColumnHeaderLabels) ? true : layout.ShowPaymentColumnHeaderLabels);
                    this.showDeliveryGridColumnHeaders(Commerce.ObjectExtensions.isNullOrUndefined(layout.ShowDeliveryColumnHeaderLabels) ? true : layout.ShowDeliveryColumnHeaderLabels);
                }
            };
            CartViewController.prototype.isCustomerAddedToSale = function () {
                var customer = this.cartViewModel.customer();
                if (Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                    return false;
                }
                return !Commerce.StringExtensions.isNullOrWhitespace(customer.AccountNumber);
            };
            CartViewController.prototype.getPaymentDialogOptions = function (showOnlyReturnWithoutReceiptTenders) {
                var dialogOptions = {};
                if (!Commerce.ObjectExtensions.isNullOrUndefined(showOnlyReturnWithoutReceiptTenders) && showOnlyReturnWithoutReceiptTenders) {
                    dialogOptions.title = Commerce.ViewModelAdapter.getResourceString("string_4489");
                    dialogOptions.message = Commerce.ViewModelAdapter.getResourceString("string_29709");
                }
                else {
                    if (Commerce.CustomerOrderHelper.isCustomerOrderCreationOrEdition(Commerce.Session.instance.cart)) {
                        dialogOptions.title = Commerce.ViewModelAdapter.getResourceString("string_4317");
                        dialogOptions.message = Commerce.ViewModelAdapter.getResourceString("string_4318");
                    }
                    else {
                        dialogOptions.title = Commerce.ViewModelAdapter.getResourceString("string_100");
                        dialogOptions.message = Commerce.ViewModelAdapter.getResourceString("string_101");
                    }
                }
                return dialogOptions;
            };
            CartViewController.prototype.isDeliveryUIVisible = function () {
                if (Commerce.ApplicationContext.Instance.deviceConfiguration.SalesModeDefaultsAsCustomerOrder === true) {
                    return true;
                }
                return Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(this.cartViewModel.cart());
            };
            CartViewController.prototype._getDiscountLabelResourceId = function () {
                var isEstimatedDiscount;
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.cartViewModel.cart().IsDiscountFullyCalculated)) {
                    isEstimatedDiscount = Commerce.ApplicationContext.Instance.deviceConfiguration.ManuallyCalculateComplexDiscounts;
                }
                else {
                    isEstimatedDiscount = !this.cartViewModel.cart().IsDiscountFullyCalculated;
                }
                if (isEstimatedDiscount) {
                    return "string_4375";
                }
                else {
                    return "string_118";
                }
            };
            CartViewController.prototype.getCartTypeHeader = function () {
                var cart = this.cartViewModel.cart();
                return Commerce.Formatters.CartTypeName(cart);
            };
            CartViewController.prototype._handleNavigationFromFulfillmentLineView = function (correlationId) {
                if (this.navigationSource() === "FulfillmentLineView") {
                    if (Commerce.CustomerOrderHelper.shouldWarnForDepositOverrideActionOnPickup(Commerce.Session.instance.cart)) {
                        var result = new Commerce.VoidAsyncResult();
                        var displayMessageResult = Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.CUSTOMERORDER_MANUAL_DEPOSIT_REQUIRED, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default)
                            .always(function () {
                            var depositOverrideOperationRequest = new Commerce.DepositOverrideOperationRequest(correlationId);
                            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(depositOverrideOperationRequest));
                        });
                        result.resolveOrRejectOn(displayMessageResult);
                    }
                }
            };
            CartViewController.prototype.handleNavigationFromPaymentView = function (correlationId) {
                if (this.navigationSource() === "PaymentView") {
                    this.paymentSuccessCallback(correlationId);
                }
            };
            CartViewController.prototype._displayWarningIfUnableToPay = function () {
                var cart = Commerce.Session.instance.cart;
                var validationErrors = [];
                if (!Commerce.ArrayExtensions.hasElements(Commerce.CartHelper.GetNonVoidedCartLines(this.cartViewModel.originalCartLines()))
                    && (!Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.AccountDeposit))
                    && (Commerce.ObjectExtensions.isNullOrUndefined(cart)
                        || !Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines))) {
                    validationErrors = validationErrors.concat([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CART_IS_EMPTY)]);
                }
                validationErrors = validationErrors.concat(CartValidators.cartHasCustomerIfCustomerOrderOrQuote(cart));
                validationErrors = validationErrors.concat(CartValidators.cartHasDeliveryInfoIfCustomerOrderOrQuote(cart));
                if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                    Commerce.NotificationHandler.displayClientErrors([validationErrors[0]]);
                    return true;
                }
                return false;
            };
            CartViewController.prototype.showPaymentDialog = function (correlationId, showOnlyReturnWithoutReceiptTenders, promptForLinkedRefund) {
                var _this = this;
                var tenderTypes = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypesForSalesTransactions();
                var executableTenderTypes = Commerce.TenderTypeHelper.getExecutableTenderTypes(tenderTypes);
                executableTenderTypes = Commerce.ArrayExtensions.hasElements(executableTenderTypes) ? executableTenderTypes : tenderTypes;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(showOnlyReturnWithoutReceiptTenders)
                    && showOnlyReturnWithoutReceiptTenders) {
                    executableTenderTypes = executableTenderTypes.filter(function (tenderType) {
                        return tenderType.RestrictReturnsWithoutReceipt === false;
                    });
                }
                var paymentDialogOptions = this.getPaymentDialogOptions(showOnlyReturnWithoutReceiptTenders);
                var activity = new Commerce.Activities.SelectTenderTypeActivity({
                    title: paymentDialogOptions.title,
                    message: paymentDialogOptions.message,
                    tenderTypes: executableTenderTypes
                });
                var asyncResult = activity.execute();
                this.cartViewModel.isBusyUntil(asyncResult).done(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        _this.paymentSelected(activity.response.tenderType, correlationId);
                    }
                });
            };
            CartViewController.prototype.executePaymentFlow = function (operationId, tenderType, paymentCardInfo, paymentCardSource, correlationId) {
                correlationId = Commerce.LoggerHelper.resolveCorrelationId(correlationId);
                if (this.cartViewModel.isProcessTextRunning()) {
                    return;
                }
                if (this.cartViewModel.canCheckout) {
                    this.cartViewModel.concludeTransaction(correlationId);
                }
                else if (this.cartViewModel.canAddPayment) {
                    if (this._displayWarningIfUnableToPay()) {
                        return;
                    }
                    var errors = Commerce.Operations.PaymentOperationHelper.preOperationValidation(operationId, Commerce.Session.instance.cart);
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        return;
                    }
                    this.executePaymentOperation(correlationId, operationId, tenderType, paymentCardInfo, paymentCardSource);
                }
            };
            CartViewController.prototype.executePaymentOperation = function (correlationId, operationId, tenderType, paymentCardInfo, paymentCardSource) {
                var _this = this;
                if (tenderType == null) {
                    tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(operationId);
                }
                switch (operationId) {
                    case Commerce.Operations.RetailOperation.PayCashQuick:
                        {
                            this.handleAsyncResult(this.cartViewModel.payCashQuickAsync(tenderType)).done(function () {
                                _this.paymentSuccessCallback(correlationId);
                            });
                        }
                        break;
                    case Commerce.Operations.RetailOperation.PayCash:
                        this.handleAsyncResult(this.cartViewModel.payCashAsync(tenderType)).done(function () {
                            _this.paymentSuccessCallback(correlationId);
                        });
                        break;
                    case Commerce.Operations.RetailOperation.PayCheck:
                        this.handleAsyncResult(this.cartViewModel.payCheckAsync(tenderType)).done(function () {
                            _this.paymentSuccessCallback(correlationId);
                        });
                        break;
                    case Commerce.Operations.RetailOperation.PayCurrency:
                        this.handleAsyncResult(this.cartViewModel.payCurrencyAsync(tenderType)).done(function () {
                            _this.paymentSuccessCallback(correlationId);
                        });
                        break;
                    case Commerce.Operations.RetailOperation.PayCustomerAccount:
                        this.handleAsyncResult(this.cartViewModel.payCustomerAccountAsync(tenderType)).done(function () {
                            _this.paymentSuccessCallback(correlationId);
                        });
                        break;
                    case Commerce.Operations.RetailOperation.PayCreditMemo:
                        this.handleAsyncResult(this.cartViewModel.payCreditMemoAsync(correlationId, tenderType)).done(function () {
                            _this.paymentSuccessCallback(correlationId);
                        });
                        break;
                    case Commerce.Operations.RetailOperation.PayCard:
                        var payCardOperationOptions = {
                            tenderType: tenderType,
                            paymentCardInfo: paymentCardInfo,
                            paymentCardSource: paymentCardSource ? paymentCardSource : Commerce.Proxy.Entities.CardSource.Unknown,
                            tokenizeCard: false,
                            correlationId: correlationId
                        };
                        this.handleAsyncResult(Commerce.Operations.OperationsManager.instance.runOperation(RetailOperation.PayCard, payCardOperationOptions));
                        break;
                    default:
                        var paymentOperationOptions = {
                            tenderType: tenderType,
                            correlationId: correlationId
                        };
                        Commerce.Operations.OperationsManager.instance.runOperation(operationId, paymentOperationOptions).fail(function (errors) {
                            _this.cartViewModel.setIsBusy(false);
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                        break;
                }
            };
            CartViewController.prototype.payCard = function (correlationId, paymentCardInfo, paymentCardSource, paymentCardTenderType) {
                if (this.cartViewModel.canCheckout) {
                    this.cartViewModel.concludeTransaction(correlationId);
                }
                else if (this.cartViewModel.canAddPayment) {
                    var cardTenderType = !Commerce.ObjectExtensions.isNullOrUndefined(paymentCardTenderType) ? paymentCardTenderType :
                        Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(Commerce.Proxy.Entities.RetailOperation.PayCard);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(cardTenderType)) {
                        Commerce.NotificationHandler.displayErrorMessage("string_1158");
                        return;
                    }
                    this.executePaymentFlow(Commerce.Operations.RetailOperation.PayCard, cardTenderType, paymentCardInfo, paymentCardSource);
                }
                else {
                    Commerce.NotificationHandler.displayErrorMessage(Commerce.ErrorTypeEnum.CANNOT_PAYMENT_TRANSACTION_COMPLETED);
                }
            };
            CartViewController.prototype._payCashQuickAsync = function (tenderType) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsCartCartViewPayQuickCash(correlationId);
                this.executePaymentFlow(Commerce.Operations.RetailOperation.PayCashQuick, tenderType, null, null, correlationId);
            };
            CartViewController.prototype.voidTransaction = function () {
                var _this = this;
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.voidTransaction(), false)
                    .done(function () { _this.cartViewModel.viewMode(Commerce.ViewModels.CartViewTransactionDetailViewMode.items); });
            };
            CartViewController.prototype.voidProducts = function () {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.voidProducts(this.cartViewModel.selectedCartLines()), false);
            };
            CartViewController.prototype.voidPayment = function (correlationId) {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.voidPayment(this.cartViewModel.selectedTenderLines(), correlationId), false);
            };
            CartViewController.prototype.priceCheck = function () {
                Commerce.ViewModelAdapter.navigate("PriceCheckView");
            };
            CartViewController.prototype.transactionTaxOverrideFromList = function () {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.overrideTransactionTaxFromList());
            };
            CartViewController.prototype.transactionTaxOverride = function (overrideCode) {
                var taxOverride = new Commerce.Proxy.Entities.TaxOverrideClass({ Code: overrideCode });
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.overrideTransactionTax(taxOverride));
            };
            CartViewController.prototype.lineTaxOverrideFromList = function (correlationId) {
                if (this.verifyOneItemSelected()) {
                    this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.overrideLineTaxFromList(correlationId));
                }
            };
            CartViewController.prototype.lineTaxOverride = function (overrideCode, correlationId) {
                if (this.verifyOneItemSelected()) {
                    var taxOverride = new Commerce.Proxy.Entities.TaxOverrideClass({ Code: overrideCode });
                    this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.overrideLineTax(taxOverride, correlationId));
                }
            };
            CartViewController.prototype.verifyOneItemSelected = function () {
                var selectedItems = this.cartViewModel.selectedCartLines();
                if (!Commerce.ArrayExtensions.hasElements(selectedItems)) {
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_TAX_OVERRDE, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_4341");
                    return false;
                }
                if (selectedItems.length > 1) {
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_CART_LINES, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default);
                    return false;
                }
                return true;
            };
            CartViewController.prototype.transactionComment = function (correlationId) {
                this.handleAsyncResult(this.cartViewModel.addTransactionComment(correlationId));
            };
            CartViewController.prototype.lineComment = function () {
                if (Commerce.CartHelper.isCartType(Commerce.Session.instance.cart, Commerce.Proxy.Entities.CartType.AccountDeposit)) {
                    this.handleAsyncResult(this.cartViewModel.addCustomerAccountDepositComment());
                }
                else if (Commerce.CartHelper.isCartType(Commerce.Session.instance.cart, Commerce.Proxy.Entities.CartType.IncomeExpense)) {
                    this.handleAsyncResult(this.cartViewModel.addIncomeAccountComment());
                }
                else {
                    var selectedProducts = this.cartViewModel.selectedCartLines();
                    if (!Commerce.ArrayExtensions.hasElements(selectedProducts)) {
                        Commerce.ViewModelAdapter.displayMessage("string_4423", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_4341");
                        return;
                    }
                    this.handleAsyncResult(this.cartViewModel.addProductComments());
                }
            };
            CartViewController.prototype.invoiceComment = function () {
                this.handleAsyncResult(this.cartViewModel.addInvoiceComment());
            };
            CartViewController.prototype.addOrSearchProductsAndCustomers = function (searchText, quantity, entryType) {
                var _this = this;
                var processTextAsyncResult = this.cartViewModel.processText(searchText, quantity, entryType)
                    .done(function (dataResult) {
                    if (dataResult.canceled || dataResult.data.cartUpdated) {
                        return;
                    }
                    if (_this.cartViewModel.isProcessTextRunning()) {
                        _this.cartViewModel.cancelQueuedProcessTextOperations();
                    }
                    var processTextResult = dataResult.data;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(processTextResult.product)) {
                        var simpleProductDetailsViewModelOptions = {
                            productId: processTextResult.product.RecordId,
                            product: processTextResult.product,
                            isSelectionMode: false,
                            addToCartOptions: {
                                quantity: quantity
                            },
                            correlationId: Commerce.StringExtensions.EMPTY
                        };
                        Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", simpleProductDetailsViewModelOptions);
                    }
                    else if (Commerce.ArrayExtensions.hasElements(processTextResult.productSearchResults)) {
                        var options = {
                            searchText: searchText,
                            searchEntity: Commerce.ViewModels.SearchViewSearchEntity.Product,
                            quantity: quantity,
                            selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                            correlationId: Commerce.StringExtensions.EMPTY
                        };
                        Commerce.ViewModelAdapter.navigate("SearchView", options);
                    }
                    else if (Commerce.ArrayExtensions.hasElements(processTextResult.customers)) {
                        _this.searchCustomers(searchText);
                    }
                    else {
                        var searchViewOptions = {
                            searchText: searchText,
                            searchEntity: Commerce.ViewModels.SearchViewSearchEntity.Product,
                            quantity: quantity,
                            selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                            correlationId: Commerce.StringExtensions.EMPTY
                        };
                        Commerce.ViewModelAdapter.navigate("SearchView", searchViewOptions);
                    }
                });
                processTextAsyncResult.fail(function (errors) {
                    _this.cartViewModel.setIsBusy(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            CartViewController.prototype.searchCustomers = function (searchText) {
                var cart = Commerce.Session.instance.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && !Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId)) {
                    Commerce.NotificationHandler.displayErrorMessage("string_4420");
                    return Commerce.AsyncResult.createRejected();
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                    searchText = this.searchText();
                }
                var options = {
                    searchText: searchText
                };
                return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.CustomerSearch, options);
            };
            CartViewController.prototype.changeSalesPerson = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.SalesPerson, correlationId);
            };
            CartViewController.prototype.handleAsyncResult = function (asyncResult) {
                var _this = this;
                return this.cartViewModel.isBusyUntil(asyncResult).fail(function (errors) {
                    _this.cartViewModel.setIsBusy(false);
                    if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_RETURNWITHOUTRECEIPTPAYMENT)) {
                        _this.showPaymentDialog(_this._options.correlationId, true);
                    }
                    else {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                });
            };
            CartViewController.prototype.addLoyaltyCardOperation = function () {
                this.handleAsyncResult(this.cartViewModel.addLoyaltyCardToCartAsync());
            };
            CartViewController.prototype.addDiscountCode = function () {
                this.handleAsyncResult(this.cartViewModel.addDiscountCode());
            };
            CartViewController.prototype.addLineDiscountAmount = function (discountValue) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsCartAddLineDiscountAmountStarted(correlationId);
                this.handleAsyncResult(this.cartViewModel.addLineDiscountAmount([discountValue])).done(function (result) {
                    Commerce.RetailLogger.viewsCartAddLineDiscountAmountFinishedSuccessfully(correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsCartAddLineDiscountAmountFailed(correlationId, Commerce.ErrorHelper.getErrorMessages(errors));
                });
            };
            CartViewController.prototype.addLineDiscountPercent = function (discountValue) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsCartAddLineDiscountPercentStarted(correlationId);
                this.handleAsyncResult(this.cartViewModel.addLineDiscountPercent([discountValue])).done(function (result) {
                    Commerce.RetailLogger.viewsCartAddLineDiscountPercentFinishedSuccessfully(correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.viewsCartAddLineDiscountPercentFailed(correlationId, Commerce.ErrorHelper.getErrorMessages(errors));
                });
            };
            CartViewController.prototype.addTotalDiscountAmount = function (discountValue) {
                this.handleAsyncResult(this.cartViewModel.addTransactionDiscountAmount(discountValue));
            };
            CartViewController.prototype.addTotalDiscountPercent = function (discountValue) {
                this.handleAsyncResult(this.cartViewModel.addTransactionDiscountPercent(discountValue));
            };
            CartViewController.prototype.priceOverrideOperation = function () {
                this.handleAsyncResult(this.cartViewModel.priceOverride());
            };
            CartViewController.prototype.setQuantityOperation = function () {
                this.handleAsyncResult(this.cartViewModel.setQuantities());
            };
            CartViewController.prototype.clearQuantityOperation = function () {
                this.handleAsyncResult(this.cartViewModel.clearQuantities());
            };
            CartViewController.prototype.addSerialNumberOperation = function () {
                this.handleAsyncResult(this.cartViewModel.addSerialNumberAsync());
            };
            CartViewController.prototype.salesInvoiceOperation = function () {
                this.handleAsyncResult(this.cartViewModel.salesInvoiceAsync());
            };
            CartViewController.prototype.viewProductDetails = function () {
                this.handleAsyncResult(this.cartViewModel.viewProductDetails());
            };
            CartViewController.prototype.changeUnitOfMeasureOperation = function () {
                this.handleAsyncResult(this.cartViewModel.changeUnitOfMeasures());
            };
            CartViewController.prototype._clearCommissionSalesGroupOnLineOperation = function () {
                this.handleAsyncResult(this.cartViewModel.clearCommissionSalesGroupOnLineOperationAsync());
            };
            CartViewController.prototype._clearCommissionSalesGroupOnTransactionOperation = function () {
                this.handleAsyncResult(this.cartViewModel.clearCommissionSalesGroupOnTransactionOperationAsync());
            };
            CartViewController.prototype._setCommissionSalesGroupOnLineOperation = function () {
                this.handleAsyncResult(this.cartViewModel.setCommissionSalesGroupOnLineOperationAsync());
            };
            CartViewController.prototype._setCommissionSalesGroupOnTransactionOperation = function () {
                this.handleAsyncResult(this.cartViewModel.setCommissionSalesGroupOnTransactionOperationAsync());
            };
            CartViewController.prototype._addCoupons = function (correlationId) {
                this.handleAsyncResult(this.cartViewModel.addCouponsOperationAsync(correlationId));
            };
            CartViewController.prototype._removeCoupons = function () {
                this.handleAsyncResult(this.cartViewModel.removeCouponsOperationAsync());
            };
            CartViewController.prototype.returnProductOperation = function () {
                var selectedCartLines = this.cartViewModel.selectedCartLines();
                if (!Commerce.ArrayExtensions.hasElements(selectedCartLines)) {
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.RETURN_NO_ITEM_SELECTED, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_4341");
                    return;
                }
                if (selectedCartLines.length > 1) {
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_CART_LINES, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default);
                    return;
                }
                this.handleAsyncResult(this.cartViewModel.returnCartLines());
            };
            CartViewController.prototype.showLinesGrid = function () {
                this.cartViewModel.viewMode(Commerce.ViewModels.CartViewTransactionDetailViewMode.items);
            };
            CartViewController.prototype.showPaymentsGrid = function () {
                this.cartViewModel.viewMode(Commerce.ViewModels.CartViewTransactionDetailViewMode.payments);
            };
            CartViewController.prototype.calculateTotalAsync = function (correlationId) {
                return this.cartViewModel.calculateTotalAsync(correlationId)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_4374");
                });
            };
            CartViewController.prototype.recalculateOrder = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.RecalculateCustomerOrder, correlationId);
            };
            CartViewController.prototype.recalculateCharges = function (correlationId) {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.recalculateCharges(correlationId));
            };
            CartViewController.prototype.shipAll = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.ShipAllProducts, correlationId);
            };
            CartViewController.prototype.shipSelected = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.ShipSelectedProducts, correlationId);
            };
            CartViewController.prototype.carryOutAll = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.CarryoutAllProducts, correlationId);
            };
            CartViewController.prototype.carryOutSelected = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.CarryoutSelectedProducts, correlationId);
            };
            CartViewController.prototype.pickUpAll = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.PickupAllProducts, correlationId);
            };
            CartViewController.prototype.pickUpSelected = function (correlationId) {
                this.executeCustomerOrderOperation(Commerce.Operations.RetailOperation.PickupSelectedProducts, correlationId);
            };
            CartViewController.prototype.removeCustomer = function () {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.removeCustomerFromCart());
            };
            CartViewController.prototype.customerAccountDeposit = function (correlationId) {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.customerAccountDeposit(correlationId), false);
            };
            CartViewController.prototype.recallTransaction = function () {
                this.cartViewModel.handleVoidAsyncResult(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.RecallTransaction, null));
            };
            CartViewController.prototype.suspendTransaction = function () {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.suspendTransaction());
            };
            CartViewController.prototype.paymentSuccessCallback = function (correlationId, showPaymentGrid) {
                if (showPaymentGrid === void 0) { showPaymentGrid = true; }
                if (showPaymentGrid) {
                    this.showPaymentsGrid();
                }
                this.cartViewModel.setIsBusy(this.cartViewModel.canCheckout);
                if (this.cartViewModel.canCheckout) {
                    this.cartViewModel.concludeTransaction(correlationId);
                }
            };
            CartViewController.prototype.createCustomerOrderClickHandler = function () {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                var queue = new Commerce.AsyncQueue();
                var proceedWithCustomerOrderCreation = false;
                if (Commerce.CustomerOrderHelper.isQuote(cart) && !Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId) && Commerce.CustomerOrderHelper.isQuoteExpired(cart)) {
                    queue.enqueue(function () {
                        return Commerce.ViewModelAdapter.displayMessage("string_4311", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_4312").done(function () {
                            proceedWithCustomerOrderCreation = true;
                        });
                    });
                }
                else {
                    proceedWithCustomerOrderCreation = true;
                }
                queue.enqueue(function () {
                    if (!proceedWithCustomerOrderCreation) {
                        queue.cancel();
                        return Commerce.AsyncResult.createResolved();
                    }
                    return _this.cartViewModel.createCustomerOrder();
                });
                this.handleAsyncResult(queue.run());
            };
            CartViewController.prototype.createQuotationClickHandler = function (correlationId) {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.createQuotationAndSetExpirationDateAsync(correlationId));
            };
            CartViewController.prototype.addLineChargeClickHandler = function (correlationId) {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.addLineChargeAsync(correlationId));
            };
            CartViewController.prototype.addHeaderChargeClickHandler = function (correlationId) {
                this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.addHeaderChargeAsync(correlationId));
            };
            CartViewController.prototype.setQuotationExpirationDateClickHandler = function (correlationId) {
                var cart = Commerce.Session.instance.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.Shopping) {
                    this.createQuotationClickHandler(correlationId);
                }
                else {
                    this.cartViewModel.handleVoidAsyncResult(this.cartViewModel.setQuotationExpirationDate(correlationId));
                }
            };
            CartViewController.prototype.createRetailTransactionClickHandler = function () {
                this.handleAsyncResult(this.cartViewModel.createRetailTransaction());
            };
            CartViewController.prototype.paymentsHistoryHandler = function () {
                var errors = Commerce.Operations.Validators.paymentsHistoryOperationValidator(Commerce.Session.instance.cart);
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }
                else {
                    Commerce.ViewModelAdapter.navigate("PaymentHistoryView");
                }
            };
            CartViewController.prototype.executeCustomerOrderOperation = function (operationEnum, correlationId) {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                var selectedCartLines = this.cartViewModel.selectedCartLines();
                if (Commerce.CartHelper.areAllCartLinesSelected(cart, selectedCartLines)) {
                    if (operationEnum === Commerce.Operations.RetailOperation.ShipSelectedProducts) {
                        operationEnum = Commerce.Operations.RetailOperation.ShipAllProducts;
                    }
                    else if (operationEnum === Commerce.Operations.RetailOperation.PickupSelectedProducts) {
                        operationEnum = Commerce.Operations.RetailOperation.PickupAllProducts;
                    }
                    else if (operationEnum === Commerce.Operations.RetailOperation.CarryoutSelectedProducts) {
                        operationEnum = Commerce.Operations.RetailOperation.CarryoutAllProducts;
                    }
                }
                if (operationEnum === Commerce.Operations.RetailOperation.ShipAllProducts
                    || operationEnum === Commerce.Operations.RetailOperation.PickupAllProducts
                    || operationEnum === Commerce.Operations.RetailOperation.CarryoutAllProducts) {
                    selectedCartLines = Commerce.CartHelper.getNonReturnCartLines(cart.CartLines);
                    if (!Commerce.ArrayExtensions.hasElements(selectedCartLines)) {
                        Commerce.NotificationHandler.displayErrorMessage("string_29060");
                        return;
                    }
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    var operationResult = _this.cartViewModel.customerOrderPreExecuteOperation(selectedCartLines, operationEnum, correlationId);
                    return asyncQueue.cancelOn(operationResult);
                }).enqueue(function () {
                    _this.cartViewModel.cart(Commerce.Session.instance.cart);
                    var asyncResult = Commerce.VoidAsyncResult.createResolved();
                    switch (operationEnum) {
                        case Commerce.Operations.RetailOperation.ShipAllProducts:
                        case Commerce.Operations.RetailOperation.ShipSelectedProducts:
                        case Commerce.Operations.RetailOperation.PickupAllProducts:
                        case Commerce.Operations.RetailOperation.PickupSelectedProducts:
                        case Commerce.Operations.RetailOperation.CarryoutSelectedProducts:
                        case Commerce.Operations.RetailOperation.CarryoutAllProducts:
                            if (!Commerce.ArrayExtensions.hasElements(selectedCartLines)) {
                                _this.navigateToSaleslineSelectorView(Commerce.Session.instance.cart, operationEnum);
                            }
                            else {
                                asyncResult = _this.cartViewModel.changeDeliveryModeForSelectedLines(selectedCartLines, operationEnum, correlationId);
                            }
                            break;
                        case Commerce.Operations.RetailOperation.RecalculateCustomerOrder:
                            asyncResult = _this.cartViewModel.recalculateCustomerOrder();
                            break;
                        case Commerce.Operations.RetailOperation.SalesPerson:
                            asyncResult = _this.cartViewModel.changeSalesPerson();
                            break;
                    }
                    return asyncResult;
                });
                this.cartViewModel.handleVoidAsyncResult(asyncQueue.run()).done(function () {
                    if (!_this.showDeliveryUI() && (_this.cartViewModel.viewMode() === Commerce.ViewModels.CartViewTransactionDetailViewMode.delivery)) {
                        _this.showLinesGrid();
                    }
                });
            };
            CartViewController.prototype.navigateToSaleslineSelectorView = function (cart, operationId) {
                Commerce.ViewModelAdapter.navigate("SaleslineSelectorView", {
                    cart: cart,
                    operationId: operationId
                });
            };
            CartViewController.prototype.barcodeScannerHandler = function (barcode, entryType) {
                this.addOrSearchProductsAndCustomers(barcode, null, entryType);
            };
            CartViewController.prototype.magneticStripeReaderHandler = function (cardInfo) {
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                if (!this._displayWarningIfUnableToPay()) {
                    if (this.cartViewModel.canAddPayment) {
                        var isMasked = Commerce.PaymentHelper.isCardNumberMasked(cardInfo.CardNumber);
                        if (isMasked) {
                            this.payCard(CORRELATION_ID, cardInfo, Commerce.Proxy.Entities.CardSource.MSR);
                        }
                        else {
                            Commerce.NotificationHandler.displayErrorMessage("string_4388");
                        }
                    }
                    else {
                        Commerce.NotificationHandler.displayErrorMessage("string_4356");
                    }
                }
            };
            CartViewController.prototype.depositOverride = function (correlationId) {
                var cart = Commerce.Session.instance.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit
                        || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup)) {
                    var errors = Commerce.Operations.Validators.containsNonReturnCartLinesOnCustomerOrder(cart);
                    if (!Commerce.ArrayExtensions.hasElements(errors)) {
                        var depositOverrideOperationRequest = new Commerce.DepositOverrideOperationRequest(correlationId);
                        Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(depositOverrideOperationRequest));
                    }
                    else {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }
                else {
                    Commerce.NotificationHandler.displayErrorMessage("string_4602");
                }
            };
            CartViewController.prototype.redirectOperationProcessing = function () {
                var _this = this;
                var dialogResult = Commerce.ViewModelAdapter.displayMessage("string_4583", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo, null, 0);
                dialogResult.done(function (result) {
                    if (result === Commerce.DialogResult.Yes) {
                        var options = void 0;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.cartViewModel.customer())
                            && !Commerce.ObjectExtensions.isNullOrUndefined(_this.cartViewModel.customer().AccountNumber)) {
                            var criteria = new Commerce.Proxy.Entities.OrderSearchCriteriaClass();
                            criteria.CustomerAccountNumber = _this.cartViewModel.customer().AccountNumber;
                            options = {
                                searchCriteria: criteria
                            };
                        }
                        Commerce.ViewModelAdapter.navigate("SearchOrdersView", options);
                    }
                });
            };
            CartViewController.prototype.updateMaxNumberOfRecommendedProducts = function () {
                var productRecommendationsGridDimensions;
                if (Commerce.ApplicationContext.Instance.tillLayoutProxy.orientation.toLowerCase() === CartViewController._landscapeOrientation.toLowerCase()) {
                    productRecommendationsGridDimensions = this.getProductRecommendationsGridDimensions(Commerce.ApplicationContext.Instance.tillLayoutProxy.transactionScreenLayout.landscape.DesignerControls);
                }
                if (Commerce.ApplicationContext.Instance.tillLayoutProxy.orientation.toLowerCase() === CartViewController._portraitOrientation.toLowerCase()) {
                    productRecommendationsGridDimensions = this.getProductRecommendationsGridDimensions(Commerce.ApplicationContext.Instance.tillLayoutProxy.transactionScreenLayout.portrait.DesignerControls);
                }
                var buttonDimension = 160;
                var numberOfColumns = Math.floor(productRecommendationsGridDimensions[1] / buttonDimension);
                var numberOfRows = Math.floor(productRecommendationsGridDimensions[0] / buttonDimension);
                var maxNumberOfRecommendedProducts = numberOfColumns * numberOfRows;
                this.cartViewModel.maxNumberOfRecommendedProducts(maxNumberOfRecommendedProducts);
                this.cartViewModel.recommendedProducts.removeAll();
                this.cartViewModel.updateRecommendedProducts();
            };
            CartViewController.prototype.getProductRecommendationsGridDimensions = function (designControls) {
                var height = 0;
                var width = 0;
                designControls.forEach(function (c) {
                    if (c.ID.toLowerCase() === CartViewController._productRecommendations.toLowerCase()) {
                        height = c.Height;
                        width = c.Width;
                    }
                });
                if (height === 0 && width === 0) {
                    designControls.forEach(function (c) {
                        if (c.ID.toLowerCase() === CartViewController._tabControl.toLowerCase()) {
                            c.TabPages.forEach(function (p) {
                                if (p.Content.ID.toLowerCase() === CartViewController._productRecommendations.toLowerCase()) {
                                    height = Math.min(p.Content.Height, c.Height);
                                    width = Math.min(p.Content.Width, c.Width);
                                }
                            });
                        }
                    });
                }
                return [height, width];
            };
            CartViewController._landscapeOrientation = "Landscape";
            CartViewController._portraitOrientation = "Portrait";
            CartViewController._tabControl = "TabControl";
            CartViewController._productRecommendations = "ProductRecommendations";
            CartViewController._cartViewName = "CartView";
            return CartViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CartViewController = CartViewController;
        var TransactionGridListViewViewModelsHelper = (function () {
            function TransactionGridListViewViewModelsHelper() {
            }
            TransactionGridListViewViewModelsHelper.prototype.getLineItemListViewViewModel = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._lineItemsListViewViewModel)) {
                    this._lineItemsListViewViewModel = this.getListViewViewModel(TransactionGridListViewViewModelsHelper.LINE_ITEM_LIST_VIEW_ID);
                }
                return this._lineItemsListViewViewModel;
            };
            TransactionGridListViewViewModelsHelper.prototype.getPaymentListViewViewModel = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._paymentListViewViewModel)) {
                    this._paymentListViewViewModel = this.getListViewViewModel(TransactionGridListViewViewModelsHelper.PAYMENT_LIST_VIEW_ID);
                }
                return this._paymentListViewViewModel;
            };
            TransactionGridListViewViewModelsHelper.prototype.getDeliveryListViewViewModel = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._deliveryListViewViewModel)) {
                    this._deliveryListViewViewModel = this.getListViewViewModel(TransactionGridListViewViewModelsHelper.DELIVERY_LIST_VIEW_ID);
                }
                return this._deliveryListViewViewModel;
            };
            TransactionGridListViewViewModelsHelper.prototype.releaseDeliveryListViewViewModel = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._deliveryListViewViewModel)) {
                    this._deliveryListViewViewModel.dispose();
                    this._deliveryListViewViewModel = null;
                }
            };
            TransactionGridListViewViewModelsHelper.prototype.clearListSelections = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.getLineItemListViewViewModel())) {
                    this.getLineItemListViewViewModel().unselectAllItems();
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.getPaymentListViewViewModel())) {
                    this.getPaymentListViewViewModel().unselectAllItems();
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.getDeliveryListViewViewModel())) {
                    this.getDeliveryListViewViewModel().unselectAllItems();
                }
            };
            TransactionGridListViewViewModelsHelper.prototype.getListViewViewModel = function (elementId) {
                var listViewViewModel;
                var listElement = document.getElementById(elementId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(listElement) && !Commerce.ObjectExtensions.isNullOrUndefined(listElement.listViewViewModel)) {
                    listViewViewModel = listElement.listViewViewModel;
                }
                return listViewViewModel;
            };
            TransactionGridListViewViewModelsHelper.LINE_ITEM_LIST_VIEW_ID = "lineItemListView";
            TransactionGridListViewViewModelsHelper.PAYMENT_LIST_VIEW_ID = "paymentListView";
            TransactionGridListViewViewModelsHelper.DELIVERY_LIST_VIEW_ID = "deliveryListView";
            return TransactionGridListViewViewModelsHelper;
        }());
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ResumeCartViewController = (function (_super) {
            __extends(ResumeCartViewController, _super);
            function ResumeCartViewController() {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ResumeCartViewModel();
                return _this;
            }
            ResumeCartViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            ResumeCartViewController.prototype.onShown = function () {
                this._enablePageEventsAsync();
            };
            ResumeCartViewController.prototype.onHidden = function () {
                this._disablePageEventsAsync();
            };
            ResumeCartViewController.prototype._enablePageEventsAsync = function () {
                var _this = this;
                return Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    _this.viewModel.recallTransactionByReceiptIdAsync(barcode);
                });
            };
            ResumeCartViewController.prototype._disablePageEventsAsync = function () {
                return Commerce.Peripherals.instance.barcodeScanner.disableAsync();
            };
            return ResumeCartViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ResumeCartViewController = ResumeCartViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ShowJournalViewController = (function (_super) {
            __extends(ShowJournalViewController, _super);
            function ShowJournalViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ShowJournalViewModel(options);
                return _this;
            }
            ShowJournalViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            ShowJournalViewController.prototype.afterBind = function (element) {
                this._showJournalElement = element;
            };
            ShowJournalViewController.prototype.journalSelectionChangedHandlerAsync = function (selectedTransactions) {
                var _this = this;
                this.viewModel.journalSelectionChangedHandlerAsync(selectedTransactions).done(function () {
                    Commerce.Interaction.triggerEvent(_this._showJournalElement, "journalSelectionChanged");
                });
            };
            return ShowJournalViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ShowJournalViewController = ShowJournalViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var DualDisplay;
(function (DualDisplay) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var DualDisplayViewController = (function (_super) {
            __extends(DualDisplayViewController, _super);
            function DualDisplayViewController() {
                var _this = _super.call(this, true) || this;
                var addSessionCartStateUpdateHandler = function (updateCartStateHandler) {
                    Commerce.EventProxy.Instance.addCustomEventHandler(_this._element, "CartStateUpdateEvent", updateCartStateHandler);
                };
                addSessionCartStateUpdateHandler = addSessionCartStateUpdateHandler.bind(_this);
                var removeSessionCartStateUpdateHandler = function (updateCartStateHandler) {
                    Commerce.EventProxy.Instance.removeCustomEventHandler(_this._element, "CartStateUpdateEvent", updateCartStateHandler);
                };
                removeSessionCartStateUpdateHandler = removeSessionCartStateUpdateHandler.bind(_this);
                var addSessionCustomerStateUpdateHandler = function (updateCustomerStateHandler) {
                    Commerce.EventProxy.Instance.addCustomEventHandler(_this._element, "CustomerStateUpdateEvent", updateCustomerStateHandler);
                };
                addSessionCustomerStateUpdateHandler = addSessionCustomerStateUpdateHandler.bind(_this);
                var removeSessionCustomerStateUpdateHandler = function (updateCustomerStateHandler) {
                    Commerce.EventProxy.Instance.removeCustomEventHandler(_this._element, "CustomerStateUpdateEvent", updateCustomerStateHandler);
                };
                removeSessionCustomerStateUpdateHandler = removeSessionCustomerStateUpdateHandler.bind(_this);
                var addSessionIsLoggedOnStateUpdateHandler = function (updateIsLoggedOnStateHandler) {
                    Commerce.EventProxy.Instance.addCustomEventHandler(_this._element, "IsLoggedOnStateUpdateEvent", updateIsLoggedOnStateHandler);
                };
                addSessionIsLoggedOnStateUpdateHandler = addSessionIsLoggedOnStateUpdateHandler.bind(_this);
                var removeSessionIsLoggedOnStateUpdateHandler = function (updateIsLoggedOnStateHandler) {
                    Commerce.EventProxy.Instance.removeCustomEventHandler(_this._element, "IsLoggedOnStateUpdateEvent", updateIsLoggedOnStateHandler);
                };
                removeSessionIsLoggedOnStateUpdateHandler = removeSessionIsLoggedOnStateUpdateHandler.bind(_this);
                var viewModelOptions = {
                    addSessionCartStateUpdateHandler: addSessionCartStateUpdateHandler,
                    removeSessionCartStateUpdateHandler: removeSessionCartStateUpdateHandler,
                    addSessionCustomerStateUpdateHandler: addSessionCustomerStateUpdateHandler,
                    removeSessionCustomerStateUpdateHandler: removeSessionCustomerStateUpdateHandler,
                    addSessionIsLoggedOnStateUpdateHandler: addSessionIsLoggedOnStateUpdateHandler,
                    removeSessionIsLoggedOnStateUpdateHandler: removeSessionIsLoggedOnStateUpdateHandler
                };
                _this._viewModel = new DualDisplay.ViewModels.DualDisplayViewModel(viewModelOptions);
                return _this;
            }
            DualDisplayViewController.prototype.load = function () {
                this.viewModel.load();
            };
            DualDisplayViewController.prototype.onShown = function () {
                this._viewModel.onShown();
            };
            DualDisplayViewController.prototype.onHidden = function () {
                this._viewModel.onHidden();
            };
            Object.defineProperty(DualDisplayViewController.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            return DualDisplayViewController;
        }(Commerce.ViewControllers.ViewControllerBase));
        ViewControllers.DualDisplayViewController = DualDisplayViewController;
    })(ViewControllers = DualDisplay.ViewControllers || (DualDisplay.ViewControllers = {}));
})(DualDisplay || (DualDisplay = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var DatabaseConnectionStatusViewController = (function (_super) {
            __extends(DatabaseConnectionStatusViewController, _super);
            function DatabaseConnectionStatusViewController() {
                var _this = _super.call(this, true) || this;
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.isCommandEnable = ko.observable(false);
                _this.connectionButtonText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.viewModel = new Commerce.ViewModels.DatabaseConnectionStatusViewModel();
                _this.viewDownload = ko.observable(true);
                Commerce.Session.instance.offlineSyncing.subscribe(function () {
                    _this.viewModel.showOfflineSyncStatus();
                    _this.viewModel.loadOfflineSyncStats();
                    if (Commerce.Session.instance.isOfflineAvailable) {
                        _this.viewModel.loadPendingTransactionCount();
                    }
                });
                Commerce.Session.instance.pendingDownloadSessionCount.subscribe(function () {
                    _this.viewModel.pendingDownloadSessionCount(Commerce.Session.instance.pendingDownloadSessionCount().toString());
                });
                _this.updateUI();
                return _this;
            }
            DatabaseConnectionStatusViewController.prototype.load = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.viewModel.loadOfflineSyncStats();
                });
                asyncQueue.run()
                    .always(function () {
                    _this.viewModel.showOfflineSyncStatus();
                });
                if (Commerce.Session.instance.isOfflineAvailable) {
                    this.viewModel.loadPendingTransactionCount();
                }
                this.viewModel.pendingDownloadSessionCount(Commerce.Session.instance.pendingDownloadSessionCount().toString());
            };
            DatabaseConnectionStatusViewController.prototype.toggleConnection = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.viewModel.toggleConnection()
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                    _this.updateUI();
                })
                    .fail(function (errors) {
                    _this.indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            DatabaseConnectionStatusViewController.prototype.syncOfflineData = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.viewModel.syncOfflineData()
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                })
                    .fail(function (errors) {
                    _this.indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            DatabaseConnectionStatusViewController.prototype.showDownloadViewHandler = function () {
                this.viewDownload(true);
            };
            DatabaseConnectionStatusViewController.prototype.showUploadViewHandler = function () {
                this.viewDownload(false);
            };
            DatabaseConnectionStatusViewController.prototype.updateUI = function () {
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    this.connectionButtonText(Commerce.ViewModelAdapter.getResourceString("string_6640"));
                }
                else {
                    this.connectionButtonText(Commerce.ViewModelAdapter.getResourceString("string_6605"));
                }
            };
            return DatabaseConnectionStatusViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.DatabaseConnectionStatusViewController = DatabaseConnectionStatusViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SettingsViewController = (function (_super) {
            __extends(SettingsViewController, _super);
            function SettingsViewController() {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.SettingsViewModel();
                _this.viewModel.setTaskRecorder(Commerce.TaskRecorder);
                _this.viewModel.setTutorial(Commerce.UI.Tutorial);
                _this.viewModel.setConfig(Commerce.Config);
                _this.viewModel.init();
                _this._windowResizeHandler = _this.viewModel.refreshWindowResolution.bind(_this.viewModel);
                return _this;
            }
            SettingsViewController.prototype.onShown = function () {
                Commerce.EventProxy.Instance.addWindowResizeHandler(this._element, this._windowResizeHandler);
            };
            SettingsViewController.prototype.onHidden = function () {
                Commerce.EventProxy.Instance.removeWindowResizeHandler(this._element, this._windowResizeHandler);
            };
            return SettingsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SettingsViewController = SettingsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Extensibility = Commerce.Extensibility;
        var DefaultButtonGridHandler = (function () {
            function DefaultButtonGridHandler() {
            }
            DefaultButtonGridHandler.handleOperation = function (operationId, actionProperty, actionTitle, correlationId, isBusy) {
                var operationsManager = Operations.OperationsManager.instance;
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online &&
                    !operationsManager.canExecuteInOfflineMode(operationId)) {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE)];
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    return true;
                }
                correlationId = Commerce.LoggerHelper.resolveCorrelationId(correlationId);
                switch (operationId) {
                    case Operations.RetailOperation.BlankOperation:
                        if (Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                            return false;
                        }
                        var blankOperationParameters = actionProperty.split(";");
                        var blankOperationOptions = {
                            operationId: blankOperationParameters.shift(), operationData: blankOperationParameters.shift()
                        };
                        operationsManager.runOperation(operationId, blankOperationOptions)
                            .fail(function (errors) { Commerce.NotificationHandler.displayClientErrors(errors); });
                        return true;
                    case Operations.RetailOperation.ItemSale:
                        var options = {
                            itemToAddOrSearch: actionProperty
                        };
                        Commerce.ViewModelAdapter.navigate("CartView", options);
                        return true;
                    case Operations.RetailOperation.PriceCheck:
                        Commerce.ViewModelAdapter.navigate("PriceCheckView");
                        return true;
                    case Operations.RetailOperation.InventoryLookup:
                        if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                            var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE)];
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        }
                        else {
                            Commerce.ViewModelAdapter.navigate("InventoryLookupView");
                        }
                        return true;
                    case Operations.RetailOperation.ViewReport:
                        if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                            isBusy(true);
                        }
                        operationsManager.runOperation(operationId, null)
                            .fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        })
                            .always(function () {
                            if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                                isBusy(false);
                            }
                        });
                        return true;
                    case Operations.RetailOperation.ChangePassword:
                        Commerce.ViewModelAdapter.navigate("ChangePasswordView");
                        return true;
                    case Operations.RetailOperation.ResetPassword:
                        Commerce.ViewModelAdapter.navigate("ResetPasswordView");
                        return true;
                    case Operations.RetailOperation.KitDisassembly:
                        Commerce.ViewModelAdapter.navigate("KitDisassemblyView");
                        return true;
                    case Operations.RetailOperation.ChangeHardwareStation:
                        var activity = new Commerce.Activities.SelectHardwareStationActivity({
                            activeOnly: false,
                            title: Commerce.ViewModelAdapter.getResourceString("string_6000"),
                            subTitle: Commerce.ViewModelAdapter.getResourceString("string_6001"),
                            isPairedHardwareStationView: false
                        });
                        activity.responseHandler = function (response) {
                            if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(response.hardwareStation)
                                && !Commerce.HardwareStationEndpointStorage.hasHardwareStationToken(response.hardwareStation.recordId, response.hardwareStation.url)) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_MUST_BE_PAIRED_BEFORE_ACTIVATE)]);
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        activity.execute();
                        return true;
                    case Operations.RetailOperation.CustomerSearch:
                        var customerSearchOperationOptions = {
                            searchText: Commerce.StringExtensions.EMPTY
                        };
                        operationsManager.runOperation(Operations.RetailOperation.CustomerSearch, customerSearchOperationOptions);
                        return true;
                    case Operations.RetailOperation.ItemSearch:
                        var itemSearchOptions = {
                            searchEntity: Commerce.ViewModels.SearchViewSearchEntity.Product,
                            selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                            correlationId: correlationId
                        };
                        Commerce.ViewModelAdapter.navigate("SearchView", itemSearchOptions);
                        return true;
                    case Operations.RetailOperation.Search:
                        var searchParameters = actionProperty.split(";");
                        var params = {
                            searchEntity: Commerce.ViewModels.SearchViewSearchEntity.Product,
                            searchText: Commerce.StringExtensions.EMPTY,
                            selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                            correlationId: correlationId
                        };
                        if (!Commerce.StringExtensions.isNullOrWhitespace(searchParameters[0])) {
                            switch (searchParameters[0]) {
                                case "Item":
                                    params.searchEntity = Commerce.ViewModels.SearchViewSearchEntity.Product;
                                    params.searchText = !Commerce.ObjectExtensions.isNullOrUndefined(searchParameters[1]) ? searchParameters[1] : "";
                                    Commerce.ViewModelAdapter.navigate("SearchView", params);
                                    break;
                                case "Customer":
                                    params.searchEntity = Commerce.ViewModels.SearchViewSearchEntity.Customer;
                                    params.searchText = !Commerce.ObjectExtensions.isNullOrUndefined(searchParameters[1]) ? searchParameters[1] : "";
                                    Commerce.ViewModelAdapter.navigate("SearchView", params);
                                    break;
                                case "Category":
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(searchParameters[1])) {
                                        Commerce.ViewModelAdapter.navigate("ProductsView", {
                                            categoryId: parseInt(searchParameters[1], 10), activeMode: Commerce.ViewModels.ProductsViewModelActiveMode.Products
                                        });
                                    }
                                    else {
                                        Commerce.ViewModelAdapter.navigate("CategoriesView");
                                    }
                                    break;
                            }
                        }
                        else {
                            Commerce.ViewModelAdapter.navigate("SearchView", params);
                        }
                        return true;
                    case Operations.RetailOperation.BankDrop:
                    case Operations.RetailOperation.DeclareStartAmount:
                    case Operations.RetailOperation.FloatEntry:
                    case Operations.RetailOperation.SafeDrop:
                    case Operations.RetailOperation.TenderDeclaration:
                    case Operations.RetailOperation.TenderRemoval:
                        DefaultButtonGridHandler._runTenderOperation(operationId, isBusy);
                        return true;
                    case Operations.RetailOperation.PrintX:
                        DefaultButtonGridHandler._runOperation(operationId, { shift: Commerce.Session.instance.Shift, notifyOnNoPrintableReceipts: true }, isBusy);
                        return true;
                    case Operations.RetailOperation.PrintZ:
                        DefaultButtonGridHandler._runOperation(operationId, { notifyOnNoPrintableReceipts: true }, isBusy);
                        return true;
                    case Operations.RetailOperation.OpenDrawer:
                    case Operations.RetailOperation.CloseShift:
                        DefaultButtonGridHandler._runOperation(operationId, null, isBusy);
                        return true;
                    case Operations.RetailOperation.PrintFiscalX:
                    case Operations.RetailOperation.PrintFiscalZ:
                        DefaultButtonGridHandler._runOperation(operationId, { correlationId: correlationId }, isBusy);
                        return true;
                    case Operations.RetailOperation.DisplayTotal:
                    case Operations.RetailOperation.ExtendedLogOn:
                        operationsManager.runOperation(operationId, null).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors, "string_4159");
                        });
                        return true;
                    case Operations.RetailOperation.ReturnTransaction:
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, null, true, true, isBusy);
                        return true;
                    case Operations.RetailOperation.ShowJournal:
                        var showJournalOperationOptions = {
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, showJournalOperationOptions, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.AddAffiliationFromList:
                    case Operations.RetailOperation.BlindCloseShift:
                    case Operations.RetailOperation.CustomerAccountDeposit:
                    case Operations.RetailOperation.CustomerAdd:
                    case Operations.RetailOperation.DatabaseConnectionStatus:
                    case Operations.RetailOperation.ExpenseAccounts:
                    case Operations.RetailOperation.IncomeAccounts:
                    case Operations.RetailOperation.LogOff:
                    case Operations.RetailOperation.LoyaltyIssueCard:
                    case Operations.RetailOperation.ManageCharges:
                    case Operations.RetailOperation.PickingAndReceiving:
                    case Operations.RetailOperation.RecallSalesOrder:
                    case Operations.RetailOperation.ShowBlindClosedShifts:
                    case Operations.RetailOperation.ShowJournal:
                    case Operations.RetailOperation.StockCount:
                    case Operations.RetailOperation.SuspendShift:
                    case Operations.RetailOperation.TimeRegistration:
                    case Operations.RetailOperation.ViewTimeClockEntries:
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, null, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.ViewOrderFulfillmentLines:
                        var fulfillmentLineViewOptions = {
                            fulfillmentDeliveryType: Commerce.ExtensibleEnumerations.FulfillmentLineDeliveryType.getByValue(Number(actionProperty)),
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, fulfillmentLineViewOptions, false, true, isBusy);
                        return true;
                    case Operations.RetailOperation.OpenURL:
                        if (Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                            return false;
                        }
                        var urlOptions = {
                            actionProperty: actionProperty,
                            actionTitle: actionTitle,
                            correlationId: correlationId
                        };
                        operationsManager.runOperation(operationId, urlOptions)
                            .fail(function (errors) { Commerce.NotificationHandler.displayClientErrors(errors); });
                        return true;
                    case Operations.RetailOperation.CashOutGiftCard:
                        var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(actionProperty);
                        var cashOutGiftCardOperationRequest = new Commerce.Payments.CashOutGiftCardOperationRequest(correlationId, tenderType);
                        this.runOperationRequestWithIndeterminateWait(cashOutGiftCardOperationRequest, false, isBusy);
                        return true;
                    case Operations.RetailOperation.ManageSafe:
                        var manageSafeOptions = {
                            correlationId: correlationId
                        };
                        DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationId, manageSafeOptions, false, true, isBusy);
                        return true;
                    default:
                        return DefaultButtonGridHandler.handleExtensionOperation(operationId, actionProperty, correlationId, isBusy);
                }
            };
            DefaultButtonGridHandler.handleExtensionOperation = function (operationId, actionProperty, correlationId, isBusy) {
                var actionParameters = [];
                var operationRequestExists = false;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Extensibility.ExtensionOperationProvider)) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                        actionParameters = actionProperty.split(";");
                    }
                    operationRequestExists = Extensibility.ExtensionOperationProvider.operationRequestExists(operationId);
                    if (!operationRequestExists) {
                        return false;
                    }
                    Extensibility.ExtensionOperationProvider.getOperationRequest(operationId, actionParameters, correlationId)
                        .then(function (result) {
                        var request = result.data;
                        if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                            var actualOperationId = request.operationId;
                            if (actualOperationId === operationId) {
                                DefaultButtonGridHandler.runOperationRequestWithIndeterminateWait(request, true, isBusy);
                            }
                            else {
                                Commerce.RetailLogger.coreButtonGridHandlerExtensionOperationRequestFromFactoryOperationMismatch(actualOperationId, operationId, correlationId);
                            }
                        }
                        else {
                            Commerce.RetailLogger.coreButtonGridHandlerInvalidExtensionOperationRequestFromFactory(JSON.stringify(request), operationId, result.canceled, correlationId);
                        }
                    });
                    return operationRequestExists;
                }
                return false;
            };
            DefaultButtonGridHandler.runOperationRequestWithIndeterminateWait = function (operationRequest, displayClientErrorsOnFail, isBusy) {
                if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                    isBusy(true);
                }
                return Commerce.Runtime.executeAsync(operationRequest)
                    .then(function (result) {
                    if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                        isBusy(false);
                    }
                })
                    .catch(function (errors) {
                    if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                        isBusy(false);
                    }
                    if (displayClientErrorsOnFail) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                });
            };
            DefaultButtonGridHandler._runOperation = function (operationType, parameters, isBusy) {
                DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationType, parameters, false, false, isBusy)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            DefaultButtonGridHandler._runTenderOperation = function (operationType, isBusy) {
                DefaultButtonGridHandler._runOperationWithIndeterminateWait(operationType, null, false, false, isBusy)
                    .fail(function (errors) {
                    DefaultButtonGridHandler._handleTenderOperationErrors(errors, operationType);
                });
            };
            DefaultButtonGridHandler._runOperationWithIndeterminateWait = function (operationType, parameters, navigateToCartViewOnCancel, displayClientErrorsOnFail, isBusy) {
                if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                    isBusy(true);
                }
                return Commerce.Operations.OperationsManager.instance.runOperation(operationType, parameters)
                    .done(function (result) {
                    if (navigateToCartViewOnCancel) {
                        if (result && !result.canceled) {
                            Commerce.ViewModelAdapter.navigate("CartView");
                        }
                    }
                }).fail(function (errors) {
                    if (displayClientErrorsOnFail) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    }
                }).always(function () {
                    if (Commerce.ObjectExtensions.isFunction(isBusy)) {
                        isBusy(false);
                    }
                });
            };
            DefaultButtonGridHandler._handleTenderOperationErrors = function (errors, operationType) {
                if (errors.length === 1) {
                    var formattedErrorMessage = Commerce.ErrorHelper.getFormattedErrorMessage(errors[0]);
                    var messageResourceID = Commerce.ErrorHelper.getActiveResourceID(formattedErrorMessage);
                    if (messageResourceID === Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED
                        || messageResourceID === Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED
                        || messageResourceID === Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_CASHDRAWER_ERROR) {
                        Commerce.ViewModelAdapter.displayMessage("string_421", Commerce.MessageType.Error, Commerce.MessageBoxButtons.YesNo, null, 1, Commerce.ViewModelAdapter.getResourceString(messageResourceID), "\r\n\r\n")
                            .done(function (continueMessageResult) {
                            if (continueMessageResult === Commerce.DialogResult.Yes) {
                                DefaultButtonGridHandler._createOptionsAndNavigateToView(operationType);
                            }
                        });
                        return;
                    }
                }
                Commerce.NotificationHandler.displayClientErrors(errors);
            };
            DefaultButtonGridHandler._createOptionsAndNavigateToView = function (operationType) {
                switch (operationType) {
                    case Operations.RetailOperation.TenderDeclaration:
                        var tenderDeclarationOptions = {};
                        tenderDeclarationOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.TenderDeclaration, tenderDeclarationOptions);
                        break;
                    case Operations.RetailOperation.BankDrop:
                        var bankDropOptions = {};
                        bankDropOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.BankDrop, bankDropOptions);
                        break;
                    case Operations.RetailOperation.SafeDrop:
                        var safeDropOptions = {};
                        safeDropOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.SafeDrop, safeDropOptions);
                        break;
                    case Operations.RetailOperation.DeclareStartAmount:
                        var declareStartAmountOptions = {};
                        declareStartAmountOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.DeclareStartAmount, declareStartAmountOptions);
                        break;
                    case Operations.RetailOperation.TenderRemoval:
                        var tenderRemovalOptions = {};
                        tenderRemovalOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.TenderRemoval, tenderRemovalOptions);
                        break;
                    case Operations.RetailOperation.FloatEntry:
                        var floatEntryOptions = {};
                        floatEntryOptions.skipOpenDrawer = true;
                        Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.FloatEntry, floatEntryOptions);
                        break;
                }
            };
            return DefaultButtonGridHandler;
        }());
        Operations.DefaultButtonGridHandler = DefaultButtonGridHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        var HomeViewController = (function (_super) {
            __extends(HomeViewController, _super);
            function HomeViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._searchView = "SearchView";
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.viewModel = new Commerce.ViewModels.HomeViewModel();
                _this.catalogViewModel = new Commerce.ViewModels.CatalogViewModel();
                _this.isBackNavigationEnabled = false;
                _this.backgroundImageEncodingURL = ko.computed(function () {
                    return "url(data:image/png;base64," + _this.viewModel.base64ImageData() + ")";
                }, _this);
                _this.backgroundImageEncodingSrc = ko.computed(function () {
                    return "data:image/png;base64," + _this.viewModel.base64ImageData();
                }, _this);
                return _this;
            }
            HomeViewController.prototype.onShown = function () {
                var _this = this;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(barcode)) {
                        _this._navigateToSearchView(barcode);
                    }
                });
            };
            HomeViewController.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
            };
            HomeViewController.prototype.keepAliveViewActivated = function (options) {
                if (Commerce.Session.instance.productCatalogStore.StoreType !== Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore) {
                    var asyncResult = this.catalogViewModel.setVirtualCatalog(Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore, null, null);
                    this.handleAsyncResult(asyncResult);
                }
                Commerce.RetailLogger.viewsHomeViewIsVisible(Commerce.LoggerHelper.getFormattedCorrelationId(options));
            };
            HomeViewController.prototype.buttonGridClick = function (operationId, actionProperty, actionTitle) {
                var _this = this;
                var CORRELATION_ID = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.viewsHomeTileClick(operationId.toString(), CORRELATION_ID);
                if (operationId === RetailOperation.ViewOrderFulfillmentLines) {
                    Commerce.RetailLogger.fulfillmentViewNavigationStart(actionProperty, CORRELATION_ID);
                }
                switch (operationId) {
                    case Commerce.Operations.RetailOperation.AddAffiliation:
                        if (!Commerce.StringExtensions.isNullOrWhitespace(actionProperty)) {
                            var affiliationNames = actionProperty.split(";");
                            var options = { affiliationNames: affiliationNames, affiliations: [] };
                            Commerce.Operations.OperationsManager.instance.runOperation(operationId, options);
                        }
                        else {
                            this.indeterminateWaitVisible(false);
                            Commerce.ViewModelAdapter.navigate("CartView");
                        }
                        return true;
                    default:
                        var setIndeterminateWaitVisible = function (indeterminateWaitVisible) { _this.indeterminateWaitVisible(indeterminateWaitVisible); };
                        return Commerce.Operations.DefaultButtonGridHandler.handleOperation(operationId, actionProperty, actionTitle, CORRELATION_ID, setIndeterminateWaitVisible);
                }
            };
            HomeViewController.prototype.handleAsyncResult = function (asyncResult) {
                var _this = this;
                this.indeterminateWaitVisible(true);
                return asyncResult
                    .always(function () { _this.indeterminateWaitVisible(false); })
                    .fail(function (errors) { Commerce.NotificationHandler.displayClientErrors(errors); });
            };
            HomeViewController.prototype._navigateToSearchView = function (searchText) {
                var options = {
                    searchText: searchText,
                    searchEntity: Commerce.ViewModels.SearchViewSearchEntity.Product,
                    selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                Commerce.ViewModelAdapter.navigate(this._searchView, options);
            };
            return HomeViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.HomeViewController = HomeViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ChangePasswordViewController = (function (_super) {
            __extends(ChangePasswordViewController, _super);
            function ChangePasswordViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._viewModel = new Commerce.ViewModels.ChangePasswordViewModel(options);
                return _this;
            }
            ChangePasswordViewController.prototype.onShown = function () {
                this._viewModel.clearPasswordFields();
            };
            return ChangePasswordViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ChangePasswordViewController = ChangePasswordViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var DeviceActivationProcessViewController = (function (_super) {
            __extends(DeviceActivationProcessViewController, _super);
            function DeviceActivationProcessViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.activationParameters = options;
                _this.operatorId = Commerce.StringExtensions.EMPTY;
                _this.viewModel = new Commerce.ViewModels.DeviceActivationProcessViewModel();
                _this.applicationLanguage = Commerce.ViewModelAdapter.getCurrentAppLanguage();
                _this.indeterminateWaitVisible = ko.observable(false);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.activationParameters)) {
                    if (Commerce.ObjectExtensions.isString(options)) {
                        _this.activationParameters = _this.deserializeActivationParameters(options);
                    }
                    _this.viewModel.serviceUrl(_this.activationParameters.serverUrl);
                    _this.viewModel.deviceId(_this.activationParameters.deviceId);
                    _this.viewModel.registerId(_this.activationParameters.registerId);
                    _this.operatorId = _this.activationParameters.operatorId;
                    _this.viewModel.password(_this.activationParameters.password);
                    _this.viewModel.skipConnectivityOperation = _this.activationParameters.skipConnectivityOperation;
                    if (Commerce.Config.aadEnabled) {
                        var activationParamString = _this.serializeActivationParameters(_this.activationParameters);
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.ACTIVATION_PAGE_PARAMETERS_KEY, activationParamString);
                    }
                }
                _this.progressBarValue = ko.observable(0);
                _this.progressMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.errorHeaderMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.errorMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.errorDetails = ko.observableArray([]);
                _this.clientErrorMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.footerMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.headerDeviceId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.headerRegisterNumber = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.continueLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_8074"));
                _this.getStartedMessage = ko.observable(Commerce.ViewModelAdapter.getResourceString(DeviceActivationProcessViewController.getStartedResourceStr));
                _this.deviceActivatedMessage = ko.observable(Commerce.ViewModelAdapter.getResourceString(DeviceActivationProcessViewController.deviceActivatedResourceStr));
                _this.viewModel.currentActivationOperation.subscribe(function (newValue) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(newValue)) {
                        return;
                    }
                    var currentStep = _this.viewModel.currentOperationStep();
                    var totalSteps = _this.viewModel.totalOperationSteps();
                    var statusName = newValue.processingStatusName();
                    if (currentStep === totalSteps) {
                        statusName = Commerce.ViewModelAdapter.getResourceString("string_8071");
                    }
                    _this.progressBarValue((currentStep - 1) / totalSteps);
                    _this.progressMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_8040"), currentStep, totalSteps, statusName));
                    _this.updateTextTranslations();
                }, _this);
                _this.controllerState = ko.observable(Commerce.Proxy.Entities.DeviceActivationControllerState.Processing);
                _this.appTitle = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(DeviceActivationProcessViewController.appTitleResourceStrFormat), Commerce.Config.appName));
                return _this;
            }
            DeviceActivationProcessViewController.prototype.onShown = function () {
                this.viewModel.currentActivationOperation(null);
                this.activateDevice();
            };
            DeviceActivationProcessViewController.prototype.activateDevice = function () {
                var _this = this;
                this.controllerState(Commerce.Proxy.Entities.DeviceActivationControllerState.Processing);
                this.viewModel.activateDeviceAsync(this.operatorId)
                    .done(function () {
                    _this.controllerState(Commerce.Proxy.Entities.DeviceActivationControllerState.Succeeded);
                    if (Commerce.Helpers.DeviceActivationHelper.isMassActivationAllowed()) {
                        var loginViewOptions = {
                            operatorId: _this.activationParameters.operatorId,
                            password: _this.activationParameters.password
                        };
                        Commerce.ViewModelAdapter.navigate(Commerce.ViewModelAdapter.getLoginViewName(), loginViewOptions);
                    }
                })
                    .fail(function (errors) {
                    if (Commerce.Config.aadEnabled) {
                        Commerce.RetailLogger.viewsCloudDeviceActivationViewActivationFailed();
                    }
                    var errorDetails = Commerce.ErrorHelper.resolveError(errors[0].ErrorCode);
                    var errorMessage = Commerce.ErrorHelper.formatErrorMessage(errors[0]);
                    _this.errorHeaderMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_8039"), _this.viewModel.currentOperationStep(), _this.viewModel.totalOperationSteps(), _this.viewModel.currentActivationOperation().errorStatusName()));
                    _this.clientErrorMessage(errorDetails.clientErrorCode);
                    _this.errorMessage(errorMessage);
                    var localizedMessageDetails = errorDetails.messageDetailsResource;
                    if (Commerce.ArrayExtensions.hasElements(localizedMessageDetails)) {
                        for (var i = 0; i < localizedMessageDetails.length; i++) {
                            localizedMessageDetails[i] = Commerce.ViewModelAdapter.getResourceString(localizedMessageDetails[i]);
                        }
                    }
                    _this.errorDetails(localizedMessageDetails);
                    var forceActivate = Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ATTEMPTTOACTIVATEFROMDIFFERENTPHYSICALDEVICE.serverErrorCode
                        === errorDetails.serverErrorCode;
                    _this.setErrorDetailsMessage(forceActivate);
                    _this.viewModel.forceActivate = forceActivate;
                    _this.controllerState(Commerce.Proxy.Entities.DeviceActivationControllerState.Error);
                });
            };
            DeviceActivationProcessViewController.prototype.navigateToActivationPage = function () {
                Commerce.ViewModelAdapter.navigate("DeviceActivationView", this.activationParameters);
            };
            DeviceActivationProcessViewController.prototype.switchActivationMode = function () {
                Commerce.Config.allowMassActivation = false;
                Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
            };
            DeviceActivationProcessViewController.prototype.launch = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                this.viewModel.loadExtensionsAsync(this.operatorId)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors).always(function () {
                        _this._navigateToLoginView();
                    });
                })
                    .done(function () {
                    _this._navigateToLoginView();
                });
            };
            DeviceActivationProcessViewController.prototype._navigateToLoginView = function () {
                var _this = this;
                if (Commerce.Config.aadEnabled) {
                    Commerce.Utilities.LogonHelper.logoffAuthenticationProviderAsync(true).always(function () {
                        _this.indeterminateWaitVisible(false);
                        Commerce.ViewModelAdapter.navigate("LoginView");
                    });
                }
                else {
                    this.indeterminateWaitVisible(false);
                    Commerce.ViewModelAdapter.navigate("LoginView");
                }
            };
            DeviceActivationProcessViewController.prototype.updateTextTranslations = function () {
                var currentLanguage = Commerce.ViewModelAdapter.getCurrentAppLanguage();
                if (!Commerce.StringExtensions.isNullOrWhitespace(currentLanguage) && currentLanguage !== this.applicationLanguage) {
                    this.appTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(DeviceActivationProcessViewController.appTitleResourceStrFormat), Commerce.Config.appName));
                    this.getStartedMessage(Commerce.ViewModelAdapter.getResourceString(DeviceActivationProcessViewController.getStartedResourceStr));
                    this.deviceActivatedMessage(Commerce.ViewModelAdapter.getResourceString(DeviceActivationProcessViewController.deviceActivatedResourceStr));
                }
            };
            DeviceActivationProcessViewController.prototype.serializeActivationParameters = function (activationParameters) {
                var param = activationParameters.serverUrl + ";" +
                    activationParameters.deviceId + ";" +
                    activationParameters.registerId + ";" +
                    activationParameters.operatorId + ";" +
                    activationParameters.password + ";" +
                    activationParameters.skipConnectivityOperation + ";";
                return param;
            };
            DeviceActivationProcessViewController.prototype.deserializeActivationParameters = function (param) {
                var parameters = param.split(";");
                var activationParameters = {
                    serverUrl: parameters[0],
                    deviceId: parameters[1],
                    registerId: parameters[2],
                    operatorId: parameters[3],
                    password: parameters[4],
                    skipConnectivityOperation: "true" === parameters[5]
                };
                return activationParameters;
            };
            DeviceActivationProcessViewController.prototype.setErrorDetailsMessage = function (isErrorFromActivationAttemptFromDifferentDevice) {
                if (isErrorFromActivationAttemptFromDifferentDevice) {
                    this.errorHeaderMessage(Commerce.ViewModelAdapter.getResourceString("string_1443"));
                    this.headerDeviceId(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1445"), this.viewModel.deviceId()));
                    this.headerRegisterNumber(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1446"), this.viewModel.registerId()));
                    this.footerMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1444"), Commerce.Config.appName));
                    this.continueLabel(Commerce.ViewModelAdapter.getResourceString("string_1447"));
                }
                else {
                    this.headerDeviceId(Commerce.StringExtensions.EMPTY);
                    this.headerRegisterNumber(Commerce.StringExtensions.EMPTY);
                    this.footerMessage(Commerce.ViewModelAdapter.getResourceString("string_8072"));
                    this.continueLabel(Commerce.ViewModelAdapter.getResourceString("string_8074"));
                }
            };
            DeviceActivationProcessViewController.appTitleResourceStrFormat = "string_8000";
            DeviceActivationProcessViewController.getStartedResourceStr = "string_8026";
            DeviceActivationProcessViewController.deviceActivatedResourceStr = "string_8025";
            return DeviceActivationProcessViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.DeviceActivationProcessViewController = DeviceActivationProcessViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var DeviceActivationViewController = (function (_super) {
            __extends(DeviceActivationViewController, _super);
            function DeviceActivationViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.DeviceActivationViewModel();
                _this.operatorId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.retryActivation = false;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this.retryActivation = true;
                    _this.viewModel.serviceUrl(options.serverUrl);
                    _this.viewModel.deviceId(options.deviceId);
                    _this.viewModel.registerId(options.registerId);
                    _this.operatorId(options.operatorId);
                    _this.viewModel.password(options.password);
                }
                _this.showDeviceInfo = ko.computed(function () {
                    return !Commerce.Helpers.DeviceActivationHelper.isMassActivationAllowed();
                }, _this);
                _this.showServerUrl = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.onlineDatabase) && _this.showDeviceInfo();
                }, _this);
                _this.showGuidedActivationNavigation = ko.computed(function () {
                    return Commerce.Config.aadEnabled && _this.showDeviceInfo();
                }, _this);
                _this.disableActivateButton = ko.computed(function () {
                    return !_this.canActivate();
                }, _this);
                _this.appTitle = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_8000"), Commerce.Config.appName));
                if (Commerce.Config.persistentRetailServerEnabled) {
                    _this.viewModel.serviceUrl(Commerce.Config.persistentRetailServerUrl);
                }
                return _this;
            }
            DeviceActivationViewController.prototype.onShown = function () {
                if (!Commerce.Config.isDemoMode && !this.retryActivation) {
                    this.operatorId(Commerce.StringExtensions.EMPTY);
                    this.viewModel.password(Commerce.StringExtensions.EMPTY);
                }
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS, Commerce.Proxy.Entities.DeviceActivationType.ManualActivation.toString());
            };
            DeviceActivationViewController.prototype.ActivateDeviceHandler = function () {
                if (this.canActivate()) {
                    this.retryActivation = false;
                    var parameters = {
                        serverUrl: this.viewModel.serviceUrl(),
                        deviceId: this.viewModel.deviceId(),
                        registerId: this.viewModel.registerId(),
                        operatorId: this.operatorId(),
                        password: this.viewModel.password()
                    };
                    Commerce.ViewModelAdapter.navigate(Commerce.Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_PROCESS_VIEW_NAME, parameters);
                }
            };
            DeviceActivationViewController.prototype.navigateToGuidedActivation = function () {
                Commerce.Config.retailServerUrl = this.viewModel.serviceUrl();
                Commerce.ViewModelAdapter.navigate(Commerce.Helpers.DeviceActivationHelper.GUIDED_ACTIVATION_VIEW_NAME);
            };
            DeviceActivationViewController.prototype.canActivate = function () {
                return Commerce.Helpers.DeviceActivationHelper.isActivationPermitted(this.viewModel.serviceUrl(), this.operatorId(), this.viewModel.password());
            };
            return DeviceActivationViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.DeviceActivationViewController = DeviceActivationViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DeviceDeactivation = (function (_super) {
            __extends(DeviceDeactivation, _super);
            function DeviceDeactivation() {
                var _this = _super.call(this) || this;
                _this.controlName = "DeviceDeactivation";
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.storeId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY));
                _this.registerId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY)
                    || Commerce.Config.demoModeTerminalId);
                _this.deviceId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY)
                    || Commerce.Config.demoModeDeviceId);
                return _this;
            }
            DeviceDeactivation.prototype.deactivateDeviceHandler = function () {
                var _this = this;
                Commerce.ViewModelAdapter.displayMessage("string_1415", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo, null, 1, "\n\n", "\n")
                    .done(function (result) {
                    if (result === Commerce.DialogResult.Yes) {
                        _this.indeterminateWaitVisible(true);
                        Commerce.Operations.OperationsManager.instance
                            .runOperation(Commerce.Operations.RetailOperation.DeactivateDevice, {})
                            .done(function () {
                            Commerce.UI.Tutorial.init();
                        }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors, "string_1417");
                        }).always(function () {
                            _this.indeterminateWaitVisible(false);
                        });
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_1417");
                });
            };
            return DeviceDeactivation;
        }(Controls.UserControl));
        Controls.DeviceDeactivation = DeviceDeactivation;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var GetStartedViewController = (function (_super) {
            __extends(GetStartedViewController, _super);
            function GetStartedViewController() {
                var _this = _super.call(this, true) || this;
                _this.appTitle = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_8000"), Commerce.Config.appName));
                _this.isBackNavigationEnabled = false;
                return _this;
            }
            GetStartedViewController.prototype.navigateToActivationPage = function () {
                Commerce.UserActivityTracker.setupServerConfiguredAutoExitTimeout();
                Commerce.Helpers.DeviceActivationHelper.navigateToActivationPage();
            };
            return GetStartedViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.GetStartedViewController = GetStartedViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var Entities = Commerce.Proxy.Entities;
        var GuidedActivationViewController = (function (_super) {
            __extends(GuidedActivationViewController, _super);
            function GuidedActivationViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.GuidedActivationViewModel();
                _this.activationViewModel = new Commerce.ViewModels.ActivationViewModel();
                _this.retryActivation = false;
                _this.operatorId = Commerce.StringExtensions.EMPTY;
                _this.storeOptions = ko.observableArray([]);
                _this.registerAndDeviceOptions = ko.observableArray([]);
                _this.deviceOptions = ko.observableArray([]);
                _this.selectedStore = ko.observable(null);
                _this.selectedRegisterAndDevice = ko.observable(null);
                _this.selectedDevice = ko.observable(null);
                _this.newDeviceId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isAutoDeviceIdChecked = ko.observable(false);
                _this.skipConnectivityOperation = false;
                _this.showStores = ko.observable(false);
                _this.showRetrievingStores = ko.observable(false);
                _this.showRetrievingRegistersAndDevices = ko.observable(false);
                _this.showRetrievingEnvironmentConfiguration = ko.observable(false);
                _this.showRegistersAndDevices = ko.observable(false);
                _this.showHealthCheckStatus = ko.observable(false);
                _this.addNewDeviceSelected = ko.observable(false);
                _this.showUserAuthenticating = ko.observable(false);
                _this._indeterminateWaitVisible = ko.observable(false);
                _this.errorHeaderMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.errorMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.errorDetails = ko.observableArray([]);
                _this.clientErrorMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.databaseStatusStr = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.rtsStatusStr = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.rtsIconStatus = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.databaseIconStatus = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.footerMessage = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_8072"));
                _this.previousLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_1449"));
                _this.continueLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_8074"));
                _this.isCheckInProgress = ko.observable(false);
                _this.showErrorControl = ko.observable(false);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this.retryActivation = true;
                    _this.viewModel.serviceUrl(options.serverUrl);
                    _this.viewModel.deviceId(options.deviceId);
                    _this.viewModel.registerId(options.registerId);
                    _this.operatorId = options.operatorId;
                    _this.viewModel.password(options.password);
                    _this._errorsToShow = options.errors;
                }
                _this.activationViewModel.dbConnectivityStatus.subscribe(function (newValue) {
                    _this.setConnectionStatusMessage(_this.databaseIconStatus, "string_8090", _this.databaseStatusStr, newValue);
                });
                _this.activationViewModel.rtsConnectivityStatus.subscribe(function (newValue) {
                    _this.setConnectionStatusMessage(_this.rtsIconStatus, "string_8091", _this.rtsStatusStr, newValue);
                });
                _this.showSelectedStore = ko.computed(function () {
                    return _this.showRetrievingRegistersAndDevices() || _this.showRegistersAndDevices();
                }, _this);
                _this.showDeviceSelector = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedRegisterAndDevice())
                        && Commerce.StringExtensions.isNullOrWhitespace(_this.selectedRegisterAndDevice().DeviceNumber)
                        && !_this.showDeviceCreator();
                }, _this);
                _this.showDeviceCreator = ko.computed(function () {
                    return _this.addNewDeviceSelected()
                        && !Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedRegisterAndDevice())
                        && Commerce.StringExtensions.isNullOrWhitespace(_this.selectedRegisterAndDevice().DeviceNumber);
                }, _this);
                _this.showNextButton = ko.computed(function () {
                    return (!_this.showRetrievingStores() || _this.showStores())
                        && !_this.showRetrievingRegistersAndDevices()
                        && !_this.showRegistersAndDevices()
                        && !_this.showUserAuthenticating()
                        && !_this.showRetrievingEnvironmentConfiguration();
                }, _this);
                _this.showStartButton = ko.computed(function () {
                    return _this.showRetrievingStores()
                        || _this.showStores()
                        || _this.showUserAuthenticating()
                        || _this.showRetrievingEnvironmentConfiguration();
                }, _this);
                _this.showServerUrlInput = ko.computed(function () {
                    var serverUrl = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL);
                    return (Commerce.StringExtensions.isNullOrWhitespace(serverUrl) && !_this.showStartButton());
                }, _this);
                _this.showServerUrlText = ko.computed(function () {
                    return !_this.showServerUrlInput();
                }, _this);
                _this.showServerUrl = ko.computed(function () {
                    return !(_this.showRegistersAndDevices()
                        || _this.showRetrievingRegistersAndDevices()
                        || _this.showUserAuthenticating()
                        || _this.showRetrievingEnvironmentConfiguration());
                }, _this);
                _this.disableNextButton = ko.computed(function () {
                    return (!_this.showStartButton() && !Commerce.Core.RegularExpressionValidations.validateUrl(_this.viewModel.serviceUrl()))
                        || (_this.showStores() && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedStore()))
                        || (_this.showRegistersAndDevices() && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedRegisterAndDevice()));
                }, _this);
                _this.disableActivateButton = ko.computed(function () {
                    return (_this.showRegistersAndDevices() && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedRegisterAndDevice()))
                        || (_this.showDeviceSelector() && Commerce.ObjectExtensions.isNullOrUndefined(_this.selectedDevice()))
                        || (_this.showDeviceCreator() && (Commerce.StringExtensions.isNullOrWhitespace(_this.newDeviceId()) && !_this.isAutoDeviceIdChecked()));
                }, _this);
                _this.disableHealthCheckButton = ko.computed(function () {
                    return !Commerce.Core.RegularExpressionValidations.validateUrl(_this.viewModel.serviceUrl());
                });
                _this.appTitle = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_8000"), Commerce.Config.appName));
                if (Commerce.Config.persistentRetailServerEnabled) {
                    _this.viewModel.serviceUrl(Commerce.Config.persistentRetailServerUrl);
                }
                return _this;
            }
            GuidedActivationViewController.getActivationStatusStrings = function (statusNumber) {
                var statusString = Commerce.StringExtensions.EMPTY;
                switch (statusNumber) {
                    case Commerce.Proxy.Entities.DeviceActivationStatus.Pending:
                        statusString = Commerce.ViewModelAdapter.getResourceString("string_1468");
                        break;
                    case Commerce.Proxy.Entities.DeviceActivationStatus.Activated:
                        statusString = Commerce.ViewModelAdapter.getResourceString("string_1469");
                        break;
                    case Commerce.Proxy.Entities.DeviceActivationStatus.Deactivated:
                        statusString = Commerce.ViewModelAdapter.getResourceString("string_1470");
                        break;
                    case Commerce.Proxy.Entities.DeviceActivationStatus.Disabled:
                        statusString = Commerce.ViewModelAdapter.getResourceString("string_1471");
                        break;
                    case Commerce.Proxy.Entities.DeviceActivationStatus.None:
                        statusString = Commerce.ViewModelAdapter.getResourceString("string_1472");
                        break;
                }
                return statusString;
            };
            GuidedActivationViewController.prototype.onShown = function () {
                if (!Commerce.Config.isDemoMode && !this.retryActivation) {
                    this.operatorId = Commerce.StringExtensions.EMPTY;
                    this.viewModel.password(Commerce.StringExtensions.EMPTY);
                }
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS, Entities.DeviceActivationType.GuidedActivation.toString());
                if (Commerce.ArrayExtensions.hasElements(this._errorsToShow)) {
                    Commerce.NotificationHandler.displayClientErrors(this._errorsToShow);
                }
                else {
                    this.authenticateAndRetrieveStores();
                }
            };
            GuidedActivationViewController.prototype.activateDeviceHandler = function () {
                this.viewModel.registerId(this.selectedRegisterAndDevice().TerminalId);
                if (!Commerce.StringExtensions.isNullOrWhitespace(this.selectedRegisterAndDevice().DeviceNumber)) {
                    this.viewModel.deviceId(this.selectedRegisterAndDevice().DeviceNumber);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedDevice()) && !this.showDeviceCreator()) {
                    this.viewModel.deviceId(this.selectedDevice().DeviceNumber);
                }
                else if (!this.isAutoDeviceIdChecked() && !Commerce.StringExtensions.isNullOrWhitespace(this.newDeviceId())) {
                    this.viewModel.deviceId(this.newDeviceId());
                }
                else {
                    this.viewModel.deviceId(Commerce.StringExtensions.EMPTY);
                }
                if (this.canActivate()) {
                    this.retryActivation = false;
                    var parameters_1 = {
                        serverUrl: this.viewModel.serviceUrl(),
                        deviceId: this.viewModel.deviceId(),
                        registerId: this.viewModel.registerId(),
                        operatorId: this.operatorId,
                        password: this.viewModel.password(),
                        skipConnectivityOperation: this.skipConnectivityOperation
                    };
                    this.authenticateUser().done(function () {
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS, Entities.DeviceActivationType.ManualActivation.toString());
                        Commerce.ViewModelAdapter.navigate(Commerce.Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_PROCESS_VIEW_NAME, parameters_1);
                    });
                }
            };
            GuidedActivationViewController.prototype.pingHealthCheck = function () {
                this.showHealthCheckStatus(true);
                this.activationViewModel.pingHealthCheck(this.viewModel.serviceUrl());
            };
            GuidedActivationViewController.prototype.nextHandler = function () {
                var _this = this;
                this.showErrorControl(false);
                this.resetHealthCheckStatus();
                if (this.showServerUrlInput() || !Commerce.Utilities.LogonHelper.isLoggedOn()) {
                    this.viewModel.updateServerUrl();
                    this.authenticateAndRetrieveStores();
                }
                else if (this.showRetrievingStores()) {
                    this.authenticateAndRetrieveStores();
                }
                else if (this.showStores() && !Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStore())) {
                    this.showRetrievingRegistersAndDevices(true);
                    this.activationViewModel.getTerminalInfoAsync(this.selectedStore().OrgUnitNumber, Commerce.Host.instance.application.getApplicationType())
                        .done(function (terminals) {
                        _this.registerAndDeviceOptions(terminals);
                        _this.activationViewModel.getAvailableDevicesAsync()
                            .done(function (devices) {
                            _this.deviceOptions(devices);
                            _this.showRegistersAndDevices(true);
                            _this.showRetrievingRegistersAndDevices(false);
                        }).fail(function (errors) {
                            _this.displayErrorControl(errors, Commerce.ViewModelAdapter.getResourceString("string_1467"));
                        });
                    }).fail(function (errors) {
                        _this.displayErrorControl(errors, Commerce.ViewModelAdapter.getResourceString("string_1466"));
                    });
                }
            };
            GuidedActivationViewController.prototype.startOverHandler = function () {
                var _this = this;
                Commerce.RetailLogger.viewsCloudDeviceActivationViewStartOver();
                this._indeterminateWaitVisible(true);
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL, Commerce.StringExtensions.EMPTY);
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.RETAILSERVER_TENANT_ID, Commerce.StringExtensions.EMPTY);
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS, Commerce.StringExtensions.EMPTY);
                if (Commerce.Utilities.LogonHelper.isLoggedOn()) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))).always(function () {
                        _this._indeterminateWaitVisible(false);
                    }).done(function () {
                        Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
                    });
                }
                else {
                    this._indeterminateWaitVisible(false);
                    Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
                }
            };
            GuidedActivationViewController.prototype.addNewDeviceHandler = function () {
                this.addNewDeviceSelected(true);
            };
            GuidedActivationViewController.prototype.navigateToManualActivation = function () {
                Commerce.Config.retailServerUrl = this.viewModel.serviceUrl();
                Commerce.ViewModelAdapter.navigate(Commerce.Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_VIEW_NAME);
            };
            GuidedActivationViewController.prototype.getSelectedStoreDisplayName = function () {
                var storeName = Commerce.StringExtensions.EMPTY;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.selectedStore())) {
                    storeName = this.selectedStore().OrgUnitName;
                }
                return storeName;
            };
            GuidedActivationViewController.prototype.authenticateAndRetrieveStores = function () {
                var _this = this;
                var retailServerUrl = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL);
                if (!Commerce.StringExtensions.isNullOrWhitespace(retailServerUrl)) {
                    Commerce.Model.Managers.Factory.updateServerUriInCommerceContext(retailServerUrl);
                    var asyncQueue = new Commerce.AsyncQueue();
                    if (!Commerce.Utilities.LogonHelper.isLoggedOn()) {
                        asyncQueue.enqueue(function () {
                            return _this.configureEnvironment();
                        }).enqueue(function () {
                            return _this.authenticateUser();
                        });
                    }
                    asyncQueue.enqueue(function () {
                        _this.showRetrievingStores(true);
                        return _this.activationViewModel.getEmployeeStoresAsync()
                            .done(function (stores) {
                            _this.storeOptions(stores);
                            _this.showStores(true);
                            _this.showRetrievingStores(false);
                            _this.skipConnectivityOperation = true;
                        }).fail(function (errors) {
                            _this.displayErrorControl(errors, Commerce.ViewModelAdapter.getResourceString("string_1465"));
                        });
                    });
                    asyncQueue.run();
                }
            };
            GuidedActivationViewController.prototype.canActivate = function () {
                return Commerce.Helpers.DeviceActivationHelper.isActivationPermitted(this.viewModel.serviceUrl(), this.operatorId, this.viewModel.password());
            };
            GuidedActivationViewController.prototype.authenticateUser = function () {
                var _this = this;
                this.showUserAuthenticating(true);
                return this.viewModel.authenticateUser().fail(function (errors) {
                    _this.displayErrorControl(errors, Commerce.ViewModelAdapter.getResourceString("string_1477"));
                }).always(function () {
                    _this.showUserAuthenticating(false);
                });
            };
            GuidedActivationViewController.prototype.configureEnvironment = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                this.showRetrievingEnvironmentConfiguration(true);
                asyncQueue.enqueue(function () {
                    return _this.activationViewModel.checkServerConnectivityAsync(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL));
                }).enqueue(function () {
                    return _this.activationViewModel.getEnvironmentConfigurationAsync()
                        .done(function (configuration) {
                        Commerce.InstrumentationHelper.setEnvironmentInfo(configuration);
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.RETAILSERVER_TENANT_ID, configuration.TenantId);
                        _this.showRetrievingEnvironmentConfiguration(false);
                    });
                });
                return asyncQueue.run().fail(function (errors) {
                    _this.displayErrorControl(errors, Commerce.ViewModelAdapter.getResourceString("string_8087"));
                });
            };
            GuidedActivationViewController.prototype.displayErrorControl = function (errors, headerMessage) {
                if (Commerce.Config.aadEnabled) {
                    Commerce.RetailLogger.viewsCloudDeviceActivationViewActivationFailed();
                }
                var errorDetails = Commerce.ErrorHelper.resolveError(errors[0].ErrorCode);
                var errorMessage = Commerce.ErrorHelper.formatErrorMessage(errors[0]);
                this.errorHeaderMessage(headerMessage);
                this.clientErrorMessage(errorDetails.clientErrorCode);
                this.errorMessage(errorMessage);
                var localizedMessageDetails = errorDetails.messageDetailsResource;
                if (Commerce.ArrayExtensions.hasElements(localizedMessageDetails)) {
                    for (var i = 0; i < localizedMessageDetails.length; i++) {
                        localizedMessageDetails[i] = Commerce.ViewModelAdapter.getResourceString(localizedMessageDetails[i]);
                    }
                }
                this.errorDetails(localizedMessageDetails);
                this.showErrorControl(true);
            };
            GuidedActivationViewController.prototype.setConnectionStatusMessage = function (observableIcon, connectionTypeResource, observable, newStatus) {
                var connectionStatus;
                var iconClass = Commerce.StringExtensions.EMPTY;
                var cssProgressClassName = "iconProgressLoopInner";
                var cssSucceededClassName = "iconCompleted";
                var cssErrorClassName = "iconError";
                var cssUnknownClassName = "iconWarning";
                this.isCheckInProgress(false);
                switch (newStatus) {
                    case Entities.HealthCheckConnectivityStatus.Connecting:
                        this.isCheckInProgress(true);
                        connectionStatus = Commerce.ViewModelAdapter.getResourceString("string_8094");
                        iconClass = cssProgressClassName;
                        break;
                    case Entities.HealthCheckConnectivityStatus.Succeeded:
                        connectionStatus = Commerce.ViewModelAdapter.getResourceString("string_8092");
                        iconClass = cssSucceededClassName;
                        break;
                    case Entities.HealthCheckConnectivityStatus.Failed:
                        connectionStatus = Commerce.ViewModelAdapter.getResourceString("string_8093");
                        iconClass = cssErrorClassName;
                        break;
                    case Entities.HealthCheckConnectivityStatus.Unknown:
                        connectionStatus = Commerce.ViewModelAdapter.getResourceString("string_8096");
                        iconClass = cssUnknownClassName;
                        break;
                    default:
                        connectionStatus = Commerce.StringExtensions.EMPTY;
                        break;
                }
                var template = Commerce.ViewModelAdapter.getResourceString("string_8088");
                var localizedMessage = Commerce.StringExtensions.format(template, Commerce.ViewModelAdapter.getResourceString(connectionTypeResource), connectionStatus);
                observable(localizedMessage);
                observableIcon(iconClass);
            };
            GuidedActivationViewController.prototype.resetHealthCheckStatus = function () {
                this.showHealthCheckStatus(false);
                this.activationViewModel.setAllHealthCheckStatuses(Entities.HealthCheckConnectivityStatus.None);
            };
            return GuidedActivationViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.GuidedActivationViewController = GuidedActivationViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ExtendedLogonViewController = (function (_super) {
            __extends(ExtendedLogonViewController, _super);
            function ExtendedLogonViewController() {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ExtendedLogOnViewModel(Commerce.Peripherals.instance, Commerce.Model.Managers.Factory, Commerce.NotificationHandler.displayClientErrors, Commerce.ViewModelAdapter);
                return _this;
            }
            ExtendedLogonViewController.prototype.employeeSelectionChanged = function (employees) {
                this.viewModel.selectedEmployee(employees[0]);
            };
            ExtendedLogonViewController.prototype.assignDialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.viewModel.assignConfirm();
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.viewModel.assignCancel();
                        break;
                }
            };
            ExtendedLogonViewController.prototype.unAssignDialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.viewModel.unassignConfirm();
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.viewModel.unassignCancel();
                        break;
                }
            };
            return ExtendedLogonViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ExtendedLogonViewController = ExtendedLogonViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var LockRegisterViewController = (function (_super) {
            __extends(LockRegisterViewController, _super);
            function LockRegisterViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.LoginViewModel();
                _this.viewModel.operatorId = ko.observable(options.OperatorId);
                _this.viewModel.password(Commerce.StringExtensions.EMPTY);
                _this.store = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY));
                _this._isPortraitOrientation = ko.observable(false);
                _this.isBackNavigationEnabled = false;
                _this.disableUnlockButton = ko.computed(function () {
                    var requiredInputMissing = Commerce.StringExtensions.isEmptyOrWhitespace(_this.viewModel.password());
                    return _this.viewModel.isBusy() || requiredInputMissing;
                }, _this);
                return _this;
            }
            LockRegisterViewController.prototype.onShown = function () {
                this.viewModel.enableExtendedLogon();
            };
            LockRegisterViewController.prototype.onHidden = function () {
                this.viewModel.disableExtendedLogon();
            };
            LockRegisterViewController.prototype.onCreated = function (element) {
                var _this = this;
                _super.prototype.onCreated.call(this, element);
                this._isPortraitOrientation(Commerce.ApplicationContext.Instance.tillLayoutProxy.orientation === Commerce.Proxy.Entities.Orientation.PORTRAIT);
                Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, function (args) {
                    _this._isPortraitOrientation(args === Commerce.Proxy.Entities.Orientation.PORTRAIT);
                });
            };
            LockRegisterViewController.prototype.switchUser = function () {
                Commerce.ViewModelAdapter.navigate("LoginView");
            };
            LockRegisterViewController.prototype.unlockRegisterButtonClick = function () {
                this.viewModel.unlockRegister();
            };
            return LockRegisterViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.LockRegisterViewController = LockRegisterViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var LoginViewController = (function (_super) {
            __extends(LoginViewController, _super);
            function LoginViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._options = options;
                _this.viewModel = new Commerce.ViewModels.LoginViewModel();
                _this.isBackNavigationEnabled = false;
                _this.signInButton = ko.observable(null);
                _this.firstTimeUsageVisible = ko.computed(function () {
                    var firstTimeUseStr = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.FIRST_TIME_USE);
                    if (_this.viewModel.isBusy() && "true" === firstTimeUseStr && !_this.useAad()) {
                        return true;
                    }
                    else {
                        return false;
                    }
                });
                _this._loadingOperatorList = ko.observable(false);
                _this.indeterminateWaitVisible = ko.computed(function () {
                    return _this._loadingOperatorList() || (_this.viewModel.isBusy() && !_this.firstTimeUsageVisible());
                });
                _this.useAad = ko.observable(false);
                _this.operatorList = ko.observableArray([]);
                _this.selectedOperator = ko.observable(new Commerce.Proxy.Entities.EmployeeClass({ StaffId: ("") }));
                _this._isPortraitOrientation = ko.observable(false);
                _this.selectedOperator.subscribe(function (newValue) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(newValue)) {
                        _this.viewModel.operatorId(newValue.StaffId);
                    }
                }, _this);
                _this._showList = ko.observable(false);
                _this.applicationVersion = ko.observable("Version: " + Commerce.ViewModelAdapter.getApplicationVersion());
                _this.storeId = ko.observable(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY));
                _this.isOperatorIdTextVisible = ko.computed(function () {
                    return !_this._showList();
                }, _this);
                _this.isOperatorIdSelectVisible = ko.computed(function () {
                    return !_this.isOperatorIdTextVisible();
                }, _this);
                _this.disableInput = ko.computed(function () {
                    return _this.indeterminateWaitVisible();
                }, _this);
                var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                if (deviceConfiguration) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration.Theme)) {
                        Commerce.CSSHelpers.applyThemeAsync(deviceConfiguration);
                    }
                    _this._loadingOperatorList(true);
                    if (deviceConfiguration.ShowStaffListAtLogOn) {
                        _this.operatorList(JSON.parse(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.EMPLOYEE_LIST_KEY)));
                        if (Commerce.ArrayExtensions.hasElements(_this.operatorList())) {
                            _this._showList(true);
                        }
                    }
                    _this._loadingOperatorList(false);
                    _this.useAad(Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode());
                }
                _this.disableSignInButton = ko.computed(function () {
                    var requiredInputMissing = Commerce.StringExtensions.isEmptyOrWhitespace(_this.viewModel.operatorId())
                        || Commerce.StringExtensions.isEmptyOrWhitespace(_this.viewModel.password());
                    return !_this.useAad() && (_this.disableInput() || requiredInputMissing);
                }, _this);
                _this._orientationMediaQuery = matchMedia("(orientation: landscape)");
                _this._isPortraitOrientation(!_this._orientationMediaQuery.matches);
                _this._orientationChangedHandler = (function () {
                    _this._isPortraitOrientation(!_this._orientationMediaQuery.matches);
                }).bind(_this);
                _this._orientationMediaQuery.addListener(_this._orientationChangedHandler);
                if (Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode() &&
                    (Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED) === "true")) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.RetailLogger.posAuthentication_AadLogonAlreadyInitiatedSoAutomaticallyStartAadLogon(correlationId);
                    _this.signInHandler(correlationId);
                }
                return _this;
            }
            LoginViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            LoginViewController.prototype.dispose = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._orientationMediaQuery)) {
                    this._orientationMediaQuery.removeListener(this._orientationChangedHandler);
                }
                _super.prototype.dispose.call(this);
            };
            LoginViewController.prototype.onCreated = function (element) {
                if (Commerce.ApplicationContext.Instance.deviceConfiguration &&
                    Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName) {
                    Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
            };
            LoginViewController.prototype.onShown = function () {
                this.viewModel.enableExtendedLogon();
                this.viewModel.initializeOfflineDataSync();
                if (this._options
                    && !Commerce.StringExtensions.isNullOrWhitespace(this._options.operatorId)
                    && !Commerce.StringExtensions.isNullOrWhitespace(this._options.password)) {
                    this.viewModel.operatorId(this._options.operatorId);
                    this.viewModel.password(this._options.password);
                    this.signInHandler();
                }
                Commerce.Host.instance.timers.setImmediate(function () {
                    $("#operatorTextBox").focus();
                });
            };
            LoginViewController.prototype.onHidden = function () {
                this.viewModel.disableExtendedLogon();
            };
            LoginViewController.prototype.signInHandler = function (correlationId) {
                var trackingId = correlationId;
                if (!Commerce.ObjectExtensions.isString(trackingId)) {
                    trackingId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                this.viewModel.logOn(trackingId);
            };
            LoginViewController.prototype._disableNavigation = function (eventObject) {
                eventObject.preventDefault();
                eventObject.cancelBubble = true;
            };
            return LoginViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.LoginViewController = LoginViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ResetPasswordViewController = (function (_super) {
            __extends(ResetPasswordViewController, _super);
            function ResetPasswordViewController() {
                var _this = _super.call(this, true) || this;
                _this.operatorId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.newPassword = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.confirmedNewPassword = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.requireChangeAfterUse = ko.observable(true);
                return _this;
            }
            ResetPasswordViewController.prototype.onShown = function () {
                this.clearPasswordFields();
            };
            ResetPasswordViewController.prototype.toggleRequireChange = function (requireChangeAfterUse) {
                this.requireChangeAfterUse(requireChangeAfterUse);
            };
            ResetPasswordViewController.prototype.resetPassword = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                var errors = this.validateFields();
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    this.indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors, "string_6804");
                    return;
                }
                var options = {
                    targetUserId: this.operatorId(),
                    newPassword: this.newPassword(),
                    changePassword: this.requireChangeAfterUse()
                };
                Commerce.Operations.OperationsManager.instance
                    .runOperation(Commerce.Operations.RetailOperation.ResetPassword, options)
                    .done(function () {
                    _this.indeterminateWaitVisible(false);
                    Commerce.ViewModelAdapter.navigate("HomeView");
                }).fail(function (errors) {
                    _this.indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            ResetPasswordViewController.prototype.clearPasswordFields = function () {
                this.operatorId(Commerce.StringExtensions.EMPTY);
                this.newPassword(Commerce.StringExtensions.EMPTY);
                this.confirmedNewPassword(Commerce.StringExtensions.EMPTY);
            };
            ResetPasswordViewController.prototype.validateFields = function () {
                var errors = [];
                if (Commerce.StringExtensions.compare(this.operatorId(), Commerce.Session.instance.CurrentEmployee.StaffId) === 0) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RESET_PASSWORD_CURRENT_EMPLOYEE));
                }
                if (Commerce.StringExtensions.isEmptyOrWhitespace(this.operatorId())
                    || Commerce.StringExtensions.isEmptyOrWhitespace(this.newPassword())
                    || Commerce.StringExtensions.isEmptyOrWhitespace(this.confirmedNewPassword())) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RESET_PASSWORD_DETAILS_NOT_SPECIFIED));
                }
                if (Commerce.StringExtensions.compare(this.newPassword(), this.confirmedNewPassword())) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NEW_PASSWORD_AND_CONFIRMATION_NOT_MATCHING_ERROR));
                }
                return errors;
            };
            return ResetPasswordViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ResetPasswordViewController = ResetPasswordViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var IssueLoyaltyCardViewController = (function (_super) {
            __extends(IssueLoyaltyCardViewController, _super);
            function IssueLoyaltyCardViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._activateOrIssueLoyaltyCardInAction = false;
                _this.customer = ko.observable(null);
                var loyaltyCard = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this.customer(options.customer);
                    loyaltyCard = options.loyaltyCard;
                }
                _this.customerName = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.customer()) || Commerce.ObjectExtensions.isNullOrUndefined(_this.customer().Name) ?
                        Commerce.StringExtensions.EMPTY :
                        _this.customer().Name;
                }, _this);
                _this.customerAccountNumber = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.customer()) || Commerce.ObjectExtensions.isNullOrUndefined(_this.customer().AccountNumber) ?
                        Commerce.StringExtensions.EMPTY :
                        _this.customer().AccountNumber;
                }, _this);
                _this.issueLoyaltyCardViewModel = new Commerce.ViewModels.IssueLoyaltyCardViewModel(_this.customer(), loyaltyCard);
                _this.enableLoyaltyCardAction = ko.computed(function () {
                    return (_this.issueLoyaltyCardViewModel.isLoyaltyCardInformationComplete() ||
                        _this.issueLoyaltyCardViewModel.isAutoGenerateLoyaltyCardNumberEnabled()) && !_this._activateOrIssueLoyaltyCardInAction;
                }, _this);
                _this.enableIssueLoyaltyCardAction = ko.computed(function () {
                    return _this.enableLoyaltyCardAction() && _this.issueLoyaltyCardViewModel.canIssueLoyaltyCard();
                }, _this);
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.showAccountDetails = ko.computed(function () {
                    var customer = _this.customer();
                    return !Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.StringExtensions.isNullOrWhitespace(customer.AccountNumber);
                });
                return _this;
            }
            IssueLoyaltyCardViewController.prototype.onShown = function () {
                this.enablePageEvents();
            };
            IssueLoyaltyCardViewController.prototype.onHidden = function () {
                this.disablePageEvents();
            };
            IssueLoyaltyCardViewController.prototype.disablePageEvents = function () {
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.LOYALTY);
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                this.disableNumPad();
            };
            IssueLoyaltyCardViewController.prototype.enablePageEvents = function () {
                var _this = this;
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cardInfo.CardNumber)) {
                        _this.issueLoyaltyCardViewModel.updateLoyaltyCard(cardInfo.CardNumber);
                    }
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.LOYALTY);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(barcode)) {
                        _this.issueLoyaltyCardViewModel.updateLoyaltyCard(barcode);
                    }
                });
                this.enableNumPad();
            };
            IssueLoyaltyCardViewController.prototype.navigateToCustomerDetails = function () {
                var parameters = {
                    accountNumber: this.customerAccountNumber(),
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("CustomerDetailsView", parameters);
            };
            IssueLoyaltyCardViewController.prototype.removeCustomer = function () {
                this.issueLoyaltyCardViewModel.customer = null;
                this.customer(null);
                this.indeterminateWaitVisible(false);
            };
            IssueLoyaltyCardViewController.prototype.activateLoyaltyCard = function () {
                var _this = this;
                if (!this.issueLoyaltyCardViewModel.isLoyaltyCardInformationComplete()
                    && !this.issueLoyaltyCardViewModel.isAutoGenerateLoyaltyCardNumberEnabled()) {
                    return;
                }
                this.indeterminateWaitVisible(true);
                this._activateOrIssueLoyaltyCardInAction = true;
                this.issueLoyaltyCardViewModel.activateLoyaltyCardAsync()
                    .done(function () {
                    if (_this.issueLoyaltyCardViewModel.isAutoGenerateLoyaltyCardNumberEnabled()) {
                        _this.issueLoyaltyCardViewModel.showLoyaltyCardDetailsAsync().done(function () {
                            _this.activateLoyaltyCardSuccess();
                        });
                    }
                    else {
                        _this.activateLoyaltyCardSuccess();
                    }
                })
                    .fail(function (errors) { _this.activateLoyaltyCardFailed(errors); });
            };
            IssueLoyaltyCardViewController.prototype.issueLoyaltyCard = function (numPadResult) {
                var _this = this;
                if (!this.issueLoyaltyCardViewModel.isLoyaltyCardInformationComplete()
                    && !this.issueLoyaltyCardViewModel.isAutoGenerateLoyaltyCardNumberEnabled()) {
                    return;
                }
                this.indeterminateWaitVisible(true);
                this._activateOrIssueLoyaltyCardInAction = true;
                var navigateToCartView = false;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.issueLoyaltyCardViewModel.activateLoyaltyCardAsync();
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.issueLoyaltyCardViewModel.addLoyaltyCardToCart())
                        .fail(function (errors) {
                        navigateToCartView = true;
                    });
                });
                asyncQueue.run()
                    .done(function (queueResult) {
                    if (queueResult.canceled) {
                        _this.indeterminateWaitVisible(false);
                    }
                    else {
                        _this.activateLoyaltyCardSuccess();
                    }
                }).fail(function (errors) {
                    _this.activateLoyaltyCardFailed(errors, navigateToCartView);
                });
            };
            IssueLoyaltyCardViewController.prototype.searchCustomers = function () {
                var _this = this;
                var localCustomer;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    var returnOptions = {
                        customer: localCustomer,
                        loyaltyCard: Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.issueLoyaltyCardViewModel.loyaltyCard)
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("IssueLoyaltyCardView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("IssueLoyaltyCardView");
                }, function (customer) {
                    return Commerce.CustomerHelper.crossCompanyCustomerTransferAsync(correlationId, customer)
                        .map(function (customerResult) {
                        localCustomer = customerResult;
                        return { canceled: false };
                    });
                });
                var options = {
                    searchEntity: Commerce.ViewModels.SearchViewSearchEntity.Customer,
                    selectionMode: Commerce.ViewModels.SearchViewSelectionMode.Customer,
                    customerSelectionOptions: {
                        customerSelectionHandler: customerSelectionHandler,
                        isOnlySelectionAllowed: false
                    },
                    correlationId: correlationId
                };
                Commerce.ViewModelAdapter.navigate("SearchView", options);
            };
            IssueLoyaltyCardViewController.prototype.createNewCustomer = function () {
                var _this = this;
                var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (customer) {
                    if (!Commerce.ViewModelAdapter.isInView("IssueLoyaltyCardView")) {
                        var returnOptions = {
                            customer: customer,
                            loyaltyCard: Commerce.ViewModels.Utilities.ObservableProxyHelper.unwrapObservableProxyObject(_this.issueLoyaltyCardViewModel.loyaltyCard)
                        };
                        Commerce.ViewModelAdapter.collapseAndNavigate("IssueLoyaltyCardView", returnOptions);
                    }
                }, function () {
                    Commerce.ViewModelAdapter.collapse("IssueLoyaltyCardView");
                });
                var customerAddOptions = {
                    customerSelectionHandler: customerSelectionHandler
                };
                Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.CustomerAdd, customerAddOptions)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            IssueLoyaltyCardViewController.prototype.activateLoyaltyCardSuccess = function () {
                this._activateOrIssueLoyaltyCardInAction = false;
                this.indeterminateWaitVisible(false);
                Commerce.ViewModelAdapter.navigate("CartView");
            };
            IssueLoyaltyCardViewController.prototype.activateLoyaltyCardFailed = function (errors, navigateToCartView) {
                if (navigateToCartView === void 0) { navigateToCartView = false; }
                this.indeterminateWaitVisible(false);
                Commerce.NotificationHandler.displayClientErrors(errors);
                this._activateOrIssueLoyaltyCardInAction = false;
                if (navigateToCartView) {
                    Commerce.ViewModelAdapter.navigate("CartView");
                }
            };
            return IssueLoyaltyCardViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.IssueLoyaltyCardViewController = IssueLoyaltyCardViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        var ManageChargesViewController = (function (_super) {
            __extends(ManageChargesViewController, _super);
            function ManageChargesViewController() {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ManageChargesViewModel();
                return _this;
            }
            ManageChargesViewController.prototype.load = function () {
                this.viewModel.load();
            };
            return ManageChargesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ManageChargesViewController = ManageChargesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var NewPaymentViewController = (function (_super) {
            __extends(NewPaymentViewController, _super);
            function NewPaymentViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPaymentView: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.fullAmountDue)) {
                    throw new Error("Invalid options passed to NewPaymentView: fullAmountDue cannot be null or undefined.");
                }
                _this.viewModel = new Commerce.ViewModels.NewPaymentViewModel(options);
                return _this;
            }
            NewPaymentViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            NewPaymentViewController.prototype.onShown = function () {
                this.enableNumPad();
                this.viewModel.onShownAsync();
            };
            NewPaymentViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
                this.disableNumPad();
            };
            NewPaymentViewController.prototype.tenderPaymentClickHandlerAsync = function () {
                Commerce.RetailLogger.posTenderPaymentButtonClicked(this.viewModel.paymentMethodViewModel.correlationId);
                return this.viewModel.tenderPaymentAsync();
            };
            NewPaymentViewController.prototype.numpadEnterClickHandlerAsync = function () {
                Commerce.RetailLogger.posPaymentViewNumpadEnterButtonClicked(this.viewModel.paymentMethodViewModel.correlationId);
                return this.viewModel.tenderPaymentAsync();
            };
            NewPaymentViewController.prototype.denominationClickHandlerAsync = function (itemSelected) {
                Commerce.RetailLogger.posDenominationButtonClicked(this.viewModel.paymentMethodViewModel.correlationId, itemSelected.Amount);
                return this.viewModel.addDenominationAsync(itemSelected);
            };
            NewPaymentViewController.prototype.getDenominationListGroupInfo = function () {
                var groupInfo = {
                    enableCellSpanning: true,
                    cellWidth: NewPaymentViewController.DENOMINATION_LIST_CARD_SIZE,
                    cellHeight: NewPaymentViewController.DENOMINATION_LIST_CARD_SIZE
                };
                return groupInfo;
            };
            NewPaymentViewController.prototype.getDenominationListItemInfo = function (itemIndex) {
                var denominations = this.viewModel.paymentMethodViewModel.currencyDenominationList();
                var denomLength = denominations[itemIndex].Amount.toString().length;
                var numBlocks = Math.ceil(denomLength / 5);
                var itemInfo = {
                    width: numBlocks === 0 ? 0 : Math.round(NewPaymentViewController.DENOMINATION_LIST_CARD_SIZE * numBlocks) + Math.round(10 * (numBlocks - 1)),
                    height: NewPaymentViewController.DENOMINATION_LIST_CARD_SIZE
                };
                return itemInfo;
            };
            NewPaymentViewController.DENOMINATION_LIST_CARD_SIZE = 120;
            return NewPaymentViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.NewPaymentViewController = NewPaymentViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ReportsViewController = (function (_super) {
            __extends(ReportsViewController, _super);
            function ReportsViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ReportsViewModel(options);
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    _this.viewTitle = Commerce.ViewModelAdapter.getResourceString("string_2409");
                }
                else {
                    _this.viewTitle = Commerce.ViewModelAdapter.getResourceString("string_2410");
                }
                return _this;
            }
            ReportsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            ReportsViewController.prototype.reportInvokedHandler = function (eventArgs) {
                Commerce.ViewModelAdapter.navigate("ReportDetailsView", eventArgs.data);
            };
            return ReportsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ReportsViewController = ReportsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ReportDetailsViewController = (function (_super) {
            __extends(ReportDetailsViewController, _super);
            function ReportDetailsViewController(report) {
                var _this = _super.call(this, true) || this;
                _this.summaryReportOptions = ko.observable(null);
                _this._summaryColumns = ko.observableArray([]);
                _this._parsedChartsData = [];
                _this._content = ko.observableArray([]);
                _this._titles = [];
                _this._charts = [];
                _this.viewModel = new Commerce.ViewModels.ReportDetailsViewModel(report);
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    _this.viewTitle = Commerce.ViewModelAdapter.getResourceString("string_2409");
                }
                else {
                    _this.viewTitle = Commerce.ViewModelAdapter.getResourceString("string_2410");
                }
                return _this;
            }
            ReportDetailsViewController.prototype.load = function () {
                this.getReportFilterValuesAsync();
            };
            ReportDetailsViewController.prototype.getReportFilterValuesAsync = function () {
                var _this = this;
                this.viewModel.getReportFilterValuesAsync()
                    .done(function (result) {
                    if (!result.canceled) {
                        _this._createHighCharts(result.data);
                    }
                });
            };
            ReportDetailsViewController.prototype.dispose = function () {
                if (Commerce.ArrayExtensions.hasElements(this._charts)) {
                    this._charts.forEach(function (chart) {
                        if (Commerce.ObjectExtensions.isFunction(chart.destroy)) {
                            chart.destroy();
                        }
                    });
                }
                _super.prototype.dispose.call(this);
            };
            ReportDetailsViewController.prototype._createHighCharts = function (reportDataSet) {
                if (Commerce.ArrayExtensions.hasElements(reportDataSet.Output)) {
                    this.viewModel.totalColumns([]);
                    this.summaryReportOptions(null);
                    this._titles = [];
                    this._parsedChartsData = [];
                    this._content([]);
                    this._charts = [];
                    this._summaryColumns([]);
                    this.viewModel.visibleReportResults(false);
                    this._createReportsData(reportDataSet);
                    this.viewModel.visibleReportResults(true);
                    this._loadHighChart();
                }
                else {
                    Commerce.NotificationHandler.displayErrorMessage("string_2403");
                }
            };
            ReportDetailsViewController.prototype._createReportsData = function (reportDataSet) {
                this._stepVal = Math.floor(reportDataSet.Output.length / 7) + 1;
                for (var j = 0; j < reportDataSet.Output[0].RowData.length; j++) {
                    var rowCol = reportDataSet.Output[0].RowData[j];
                    var series = { name: rowCol.Key, data: [] };
                    this._parsedChartsData.push(series);
                    this._titles.push(rowCol.Key);
                }
                for (var i = 0; i < reportDataSet.Output.length; i++) {
                    if (Commerce.ArrayExtensions.hasElements(reportDataSet.Output[i].RowData)) {
                        var values = {};
                        var currencyCode = Commerce.StringExtensions.EMPTY;
                        for (var j = 0; j < this._titles.length; j++) {
                            var chartValue = this.viewModel.getCommercePropertyValue(reportDataSet.Output[i].RowData[j].Value);
                            if (!reportDataSet.HasTotalRow || i !== reportDataSet.Output.length - 1) {
                                this._parsedChartsData[j].data.push(chartValue);
                            }
                            if (reportDataSet.Output[i].RowData[j].Key === "Currency" && typeof (chartValue) === "string") {
                                currencyCode = chartValue;
                            }
                            var currentValue = chartValue;
                            var isNumber = false;
                            if (j !== 0 && typeof (currentValue) === "number") {
                                currentValue = Commerce.NumberExtensions.formatNumber(currentValue, Commerce.NumberExtensions.getDecimalPrecision(currencyCode));
                                isNumber = true;
                            }
                            values["Data" + j.toString()] = currentValue;
                            values["DataIsNumber" + j.toString()] = isNumber;
                        }
                        this._content.push(values);
                    }
                }
                var summaryContentData = this._content();
                var totalRow;
                if (Commerce.ArrayExtensions.hasElements(summaryContentData)) {
                    totalRow = summaryContentData[summaryContentData.length - 1];
                }
                for (var j = 0; j < this._titles.length; j++) {
                    var cssClass = "width252 ellipsis";
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(totalRow)) {
                        if (totalRow["DataIsNumber" + j.toString()]) {
                            cssClass = "width152 ellipsis textRight";
                        }
                    }
                    var summaryColumn = {
                        title: this._titles[j],
                        cssClass: cssClass,
                        field: "Data" + j.toString()
                    };
                    if (reportDataSet.HasTotalRow) {
                        var val = totalRow["DataIsNumber" + j.toString()] ? totalRow["Data" + j.toString()] : "";
                        var title = totalRow["DataIsNumber" + j.toString()] ? this._titles[j] : "";
                        this.viewModel.totalColumns.push({ cssClass: cssClass, value: val, title: title });
                    }
                    this._summaryColumns.push(summaryColumn);
                }
                if (this.viewModel.isTotalsEnabled()) {
                    this._content.remove(this._content()[this._content().length - 1]);
                }
                var summaryReportOptions = {
                    itemDataSource: this._content,
                    selectionMode: WinJS.UI.SelectionMode.none,
                    tapBehavior: "none",
                    columns: this._summaryColumns()
                };
                this.summaryReportOptions(summaryReportOptions);
            };
            ReportDetailsViewController.prototype._loadHighChart = function () {
                var chartVisible = [];
                this.viewModel.chartVisible([]);
                for (var i = 0; i < this.viewModel.charts.length; i++) {
                    if (i >= 3) {
                        break;
                    }
                    chartVisible[i] = true;
                }
                this.viewModel.chartVisible(chartVisible);
                for (var i = 0; i < this.viewModel.charts.length; i++) {
                    if (i >= 3) {
                        break;
                    }
                    var categories = [];
                    var cindex = jQuery.inArray(this.viewModel.charts[i].Categories, this._titles);
                    if (cindex > -1) {
                        categories = this._parsedChartsData[cindex].data;
                    }
                    var series = [];
                    for (var j = 0; j < this.viewModel.charts[i].Series.length; j++) {
                        var sindex = jQuery.inArray(this.viewModel.charts[i].Series[j], this._titles);
                        if (sindex > -1) {
                            series.push(this._parsedChartsData[sindex]);
                        }
                    }
                    if (i <= ReportDetailsViewController.REPORT_PLACEHOLDER_DIV_IDS.length) {
                        this._createChart(categories, series, ReportDetailsViewController.REPORT_PLACEHOLDER_DIV_IDS[i]);
                    }
                }
            };
            ReportDetailsViewController.prototype._createChart = function (categories, series, renderDivName) {
                var accentColor = Commerce.CSSHelpers.accentColor();
                var tooltipText = Commerce.ViewModelAdapter.getResourceString("string_2407");
                var fontName = "Segoi UI";
                var lineColor = "#999999";
                var fontColor = Commerce.CSSHelpers.currentThemeLoaded() === "light" ? "#616365" : "#A1A3A5";
                var options = {
                    colors: [accentColor, "#B1E3F9", "#1098D2", "#0A658C", "#8BD6F6", "#074156", "#D8F1FC"],
                    chart: {
                        renderTo: document.getElementById(renderDivName),
                        type: "column",
                        backgroundColor: "transparent"
                    },
                    title: {
                        text: "",
                        style: {
                            color: fontColor,
                            font: fontName
                        },
                        useHTML: true
                    },
                    xAxis: {
                        categories: categories,
                        labels: {
                            step: this._stepVal,
                            rotation: 0,
                            align: "center",
                            style: {
                                color: fontColor,
                                font: fontName,
                                fontSize: "9px",
                                width: "50px"
                            },
                            formatter: function () {
                                return this.value;
                            }
                        },
                        lineColor: lineColor,
                        lineWidth: 1
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: "",
                            style: {
                                color: fontColor,
                                font: fontName,
                                fontSize: "9px"
                            }
                        },
                        allowDecimals: false
                    },
                    legend: {
                        itemStyle: {
                            color: fontColor,
                            font: fontName
                        },
                        rtl: Commerce.CSSHelpers.isRightToLeft,
                        useHTML: true
                    },
                    series: series,
                    tooltip: {
                        style: {
                            font: fontName
                        },
                        formatter: function () {
                            return "<b>" + this.x + "</b><br/><br/><br/>" +
                                Commerce.StringExtensions.format(tooltipText, this.series.name, Commerce.NumberExtensions.formatNumber(this.y, Commerce.NumberExtensions.getDecimalPrecision()));
                        },
                        rtl: Commerce.CSSHelpers.isRightToLeft,
                        useHTML: true
                    },
                    credits: {
                        enabled: false,
                        href: Commerce.StringExtensions.EMPTY
                    }
                };
                var chart = new Highcharts.Chart(options);
                this._charts.push(chart);
            };
            ReportDetailsViewController.REPORT_PLACEHOLDER_DIV_IDS = ["chartPlaceHolder1", "chartPlaceHolder2", "chartPlaceHolder3"];
            return ReportDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ReportDetailsViewController = ReportDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var DepositOverrideViewController = (function (_super) {
            __extends(DepositOverrideViewController, _super);
            function DepositOverrideViewController(options) {
                var _this = _super.call(this, true) || this;
                var viewModelOptions = {
                    selectionHandler: options.selectionHandler,
                    numpadBroker: _this.numPadInputBroker
                };
                _this.viewModel = new Commerce.ViewModels.DepositOverrideViewModel(viewModelOptions);
                return _this;
            }
            DepositOverrideViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            DepositOverrideViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            return DepositOverrideViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.DepositOverrideViewController = DepositOverrideViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var FulfillmentLineViewController = (function (_super) {
            __extends(FulfillmentLineViewController, _super);
            function FulfillmentLineViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'Options' is required for FulfillmentLineView.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.fulfillmentDeliveryType)) {
                    throw Error("options.FulfillmentLineView' is required for FulfillmentLineView. The fulfillment delivery type is empty.");
                }
                Commerce.RetailLogger.fulfillmentViewNavigationEnd(options.fulfillmentDeliveryType.Name, options.correlationId);
                _this.viewModel = new Commerce.ViewModels.FulfillmentLineViewModel(options);
                return _this;
            }
            FulfillmentLineViewController.prototype.onNavigateBack = function () {
                return this.viewModel.onNavigateBack();
            };
            return FulfillmentLineViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.FulfillmentLineViewController = FulfillmentLineViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var InvoicedSalesLinesViewController = (function (_super) {
            __extends(InvoicedSalesLinesViewController, _super);
            function InvoicedSalesLinesViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'Options' is required for InvoicedSalesLinesView.");
                }
                else if (!Commerce.ArrayExtensions.hasElements(options.salesIds)) {
                    throw Error("'options.salesIds' is required for InvoicedSalesLinesView");
                }
                _this.viewModel = new Commerce.ViewModels.InvoicedSalesLinesViewModel(options);
                return _this;
            }
            return InvoicedSalesLinesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.InvoicedSalesLinesViewController = InvoicedSalesLinesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var PickUpViewController = (function (_super) {
            __extends(PickUpViewController, _super);
            function PickUpViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.PickUpViewModel(options);
                return _this;
            }
            PickUpViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            PickUpViewController.prototype.onHidden = function () {
                this.viewModel.cancelSalesLinesSelection();
            };
            PickUpViewController.prototype.selectAll = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._dataListViewModel)) {
                    this._dataListViewModel = document.getElementById("pickUpSalesLinesList").dataListViewModel;
                }
                this._dataListViewModel.selectAll();
            };
            return PickUpViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.PickUpViewController = PickUpViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PrintableReceiptToDisplay = (function (_super) {
            __extends(PrintableReceiptToDisplay, _super);
            function PrintableReceiptToDisplay() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PrintableReceiptToDisplay;
        }(Commerce.Proxy.Entities.PrintableReceipt));
        Controls.PrintableReceiptToDisplay = PrintableReceiptToDisplay;
        var PrintReceiptDialog = (function (_super) {
            __extends(PrintReceiptDialog, _super);
            function PrintReceiptDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "PrintReceiptDialog";
                _this.printGiftReceipt = false;
                _this._promptUserReceipts = [];
                _this._alwaysPrintReceipts = [];
                _this._printableReceiptsToDisplay = ko.observableArray([]);
                _this.okButtonDisabled = ko.computed(function () { return !_this.anyReceiptsToPrint(); }, _this);
                return _this;
            }
            PrintReceiptDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                this._dialogState = dialogState;
                this._printableReceiptsToDisplay([]);
                var allPrintableReceipts = Commerce.ReceiptHelper.getPrintableReceipts(dialogState.receipts);
                this._promptUserReceipts = allPrintableReceipts.filter(function (receipt) {
                    return receipt.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Prompt;
                });
                this._alwaysPrintReceipts = allPrintableReceipts.filter(function (receipt) {
                    return receipt.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Always;
                });
                var isHardwareStationActive = Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
                var hasDevicePrinter = allPrintableReceipts.some(function (receipt) {
                    return receipt.printerType === Commerce.Proxy.Entities.PeripheralType.Device;
                });
                var promptAnyReceipt = !dialogState.ignoreShouldPrompt && Commerce.ArrayExtensions.hasElements(this._promptUserReceipts);
                if (isHardwareStationActive || hasDevicePrinter) {
                    if (promptAnyReceipt) {
                        this._promptUserReceipts.forEach(function (printableReceipt) {
                            var printReceiptToDisplay = $.extend({
                                shouldPrintObservable: ko.observable(true)
                            }, printableReceipt);
                            _this._printableReceiptsToDisplay.push(printReceiptToDisplay);
                        });
                        Commerce.RetailLogger.viewsControlsPrintReceiptShown();
                        this.visible(true);
                    }
                    else {
                        Commerce.RetailLogger.viewsControlsPrintReceiptSkippedToPrintDirectly();
                        this.printReceiptsIfPromptOrAlways(this._alwaysPrintReceipts.concat(this._promptUserReceipts));
                        this.onHidden();
                    }
                }
                else if (dialogState.rejectOnHardwareStationErrors && Commerce.ArrayExtensions.hasElements(allPrintableReceipts)) {
                    var notifyResult = this.showHardwareStationNotConfiguredError();
                    notifyResult.always(function () {
                        _this.cancelDialog();
                        _this.onHidden();
                    });
                }
                else {
                    var numberOfPrintableReceipts = Commerce.ArrayExtensions.hasElements(allPrintableReceipts) ? allPrintableReceipts.length : 0;
                    Commerce.RetailLogger.viewsControlsPrintReceiptSkipped(numberOfPrintableReceipts);
                    this.cancelDialog();
                    this.onHidden();
                }
            };
            PrintReceiptDialog.prototype.printButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dontPrintReceiptsClicked();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.printReceiptsClicked();
                        break;
                }
            };
            PrintReceiptDialog.prototype.onShouldPrintToggle = function (checked, toggleSwitch, item) {
                item.shouldPrintObservable(checked);
            };
            PrintReceiptDialog.prototype.getReceiptTitle = function (receipt) {
                var receiptTitle = receipt.receiptName;
                var transactionStringRegEx = new RegExp("<T:(.+?)>");
                var translationMatch = transactionStringRegEx.exec(receiptTitle);
                while (translationMatch) {
                    receiptTitle = receiptTitle.replace(translationMatch[0], Commerce.ViewModelAdapter.getResourceString(translationMatch[1]));
                    translationMatch = transactionStringRegEx.exec(receiptTitle);
                }
                return receiptTitle;
            };
            PrintReceiptDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            PrintReceiptDialog.prototype.anyReceiptsToPrint = function () {
                var printAnyReceipt = false;
                if (this._printableReceiptsToDisplay) {
                    printAnyReceipt = this._printableReceiptsToDisplay()
                        .some(function (receipt) { return receipt.shouldPrompt && receipt.shouldPrintObservable(); });
                }
                return printAnyReceipt;
            };
            PrintReceiptDialog.prototype.printReceiptsClicked = function () {
                var _this = this;
                var receiptsToPrint = this._printableReceiptsToDisplay()
                    .filter(function (receiptToDisplay) { return receiptToDisplay.shouldPrintObservable() === true; });
                var triggerOptions = {
                    shouldPrintReceipt: true,
                    selectedReceipts: receiptsToPrint.map(function (printableReceipt) { return printableReceipt.receipt; })
                };
                Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostReceiptPrompt, triggerOptions)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                })
                    .always(function () {
                    receiptsToPrint = receiptsToPrint.concat(_this._alwaysPrintReceipts);
                    _this.printReceiptsIfPromptOrAlways(receiptsToPrint);
                });
            };
            PrintReceiptDialog.prototype.dontPrintReceiptsClicked = function () {
                var _this = this;
                var triggerOptions = {
                    shouldPrintReceipt: false,
                    selectedReceipts: []
                };
                Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostReceiptPrompt, triggerOptions)
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                })
                    .always(function () {
                    if (Commerce.ArrayExtensions.hasElements(_this._alwaysPrintReceipts)) {
                        _this.printReceiptsIfPromptOrAlways(_this._alwaysPrintReceipts);
                    }
                    else {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    }
                });
            };
            PrintReceiptDialog.prototype.printReceiptsIfPromptOrAlways = function (printableReceipts) {
                var _this = this;
                var printAnyReceipt = printableReceipts.some(function (receipt) { return receipt.shouldPrint; });
                if (!printAnyReceipt) {
                    var notifyResult = this.showNoPrintableReceiptsError();
                    notifyResult.always(function () {
                        _this.printReceiptsSuccess();
                    });
                }
                else {
                    this.indeterminateWaitVisible(true);
                    var hasPrintableGiftReceipts = printableReceipts.some(function (r) {
                        return r.receiptTypeValue === Commerce.Proxy.Entities.ReceiptType.GiftReceipt
                            && (r.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Always
                                || r.printBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Prompt);
                    });
                    if (hasPrintableGiftReceipts) {
                        printableReceipts = printableReceipts.filter(function (r) {
                            return r.receiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.GiftReceipt;
                        });
                        this.printGiftReceipt = true;
                        this.printReceipts(printableReceipts);
                    }
                    else {
                        this.printGiftReceipt = false;
                        this.printReceipts(printableReceipts);
                    }
                }
            };
            PrintReceiptDialog.prototype.printReceipts = function (printableReceipts) {
                var _this = this;
                var printReceiptsRequest = new Commerce.PrintReceiptsClientRequest(printableReceipts, this._dialogState.associatedOrder, this._dialogState.isCopyOfReceipt);
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(printReceiptsRequest))
                    .done(function (printingResult) {
                    if (printingResult && !printingResult.canceled) {
                        _this.printReceiptsSuccess();
                        Commerce.RetailLogger.viewsControlsPrintReceiptPrinted();
                    }
                    else {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                }).always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            PrintReceiptDialog.prototype.showNoPrintableReceiptsError = function () {
                var notifyResult;
                if (this._dialogState.notifyOnNoPrintableReceipts) {
                    notifyResult = Commerce.NotificationHandler.displayClientErrors([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_NO_PRINTABLE_RECEIPTS)
                    ]);
                }
                else {
                    notifyResult = Commerce.VoidAsyncResult.createResolved();
                }
                return notifyResult;
            };
            PrintReceiptDialog.prototype.showHardwareStationNotConfiguredError = function () {
                var notifyResult = Commerce.NotificationHandler.displayClientErrors([
                    new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED)
                ]);
                return notifyResult;
            };
            PrintReceiptDialog.prototype.printReceiptsSuccess = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK);
            };
            return PrintReceiptDialog;
        }(Controls.ModalDialog));
        Controls.PrintReceiptDialog = PrintReceiptDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SearchOrdersViewController = (function (_super) {
            __extends(SearchOrdersViewController, _super);
            function SearchOrdersViewController(options) {
                var _this = _super.call(this, true) || this;
                var viewModelOptions;
                if (options instanceof Commerce.Client.Entities.SearchOrdersNavigationParameters) {
                    viewModelOptions = {
                        searchCriteria: options.searchCriteria
                    };
                }
                else {
                    viewModelOptions = options;
                }
                _this.searchOrdersViewModel = new Commerce.ViewModels.SearchOrdersViewModel(viewModelOptions);
                _this._initializeAppBarButtons();
                _this.addControl(_this._printReceiptDialog = new Commerce.Controls.PrintReceiptDialog());
                _this.selectionMode = Commerce.ApplicationContext.Instance.channelConfiguration.EnableReturnsForMultipleOrderInvoices ?
                    Commerce.Controls.DataList.SelectionMode.MultiSelect : Commerce.Controls.DataList.SelectionMode.SingleSelect;
                return _this;
            }
            SearchOrdersViewController.prototype.searchOrdersViewAnimationEndHandler = function () {
                if (!this.searchOrdersViewModel.hasSearchCriteria) {
                    this.searchOrdersViewModel.performSalesOrderSearch();
                }
            };
            SearchOrdersViewController.prototype.loadingStateChanged = function (viewModel) {
                viewModel.getItemCountAsync().done(function (count) {
                    if (count === 1) {
                        viewModel.selectAll();
                    }
                });
            };
            SearchOrdersViewController.prototype.printPackingSlip = function () {
                var _this = this;
                var salesOrder = this.searchOrdersViewModel.selectedOrder().salesOrder;
                this.searchOrdersViewModel.printPackingSlip(salesOrder.SalesId)
                    .done(function (receipts) {
                    _this._printPackingSlipSuccess(receipts);
                });
            };
            SearchOrdersViewController.prototype.createPackingSlip = function () {
                var salesOrder = this.searchOrdersViewModel.selectedOrder().salesOrder;
                this.searchOrdersViewModel.createPackingSlip(salesOrder)
                    .done(function () {
                    Commerce.ViewModelAdapter.displayMessage("string_4545");
                });
            };
            SearchOrdersViewController.prototype.createPickingList = function () {
                var salesOrder = this.searchOrdersViewModel.selectedOrder().salesOrder;
                this.searchOrdersViewModel.createPickingList(salesOrder)
                    .done(function () {
                    Commerce.ViewModelAdapter.displayMessage("string_4543");
                });
            };
            SearchOrdersViewController.prototype.pickUp = function () {
                this.searchOrdersViewModel.pickUpAsync();
            };
            SearchOrdersViewController.prototype.cancelOrder = function () {
                this.searchOrdersViewModel.cancelCustomerOrder(this.searchOrdersViewModel.selectedOrder().salesOrder)
                    .done(function () {
                    Commerce.ViewModelAdapter.navigate("CartView");
                });
            };
            SearchOrdersViewController.prototype.returnOrder = function () {
                if (Commerce.ApplicationContext.Instance.channelConfiguration.EnableReturnsForMultipleOrderInvoices) {
                    var orderIds = this.searchOrdersViewModel.selectedOrders().map(function (order) { return order.salesOrder.SalesId; });
                    var viewOptions = { salesIds: orderIds };
                    Commerce.ViewModelAdapter.navigate("InvoicedSalesLinesView", viewOptions);
                }
                else {
                    var order = this.searchOrdersViewModel.selectedOrder().salesOrder;
                    var viewOptions = { salesId: order.SalesId };
                    Commerce.ViewModelAdapter.navigate("SalesInvoicesView", viewOptions);
                }
            };
            SearchOrdersViewController.prototype.editOrder = function () {
                this.searchOrdersViewModel.recallCustomerOrderOrQuoteForEdition(this.searchOrdersViewModel.selectedOrder().salesOrder).
                    done(function () {
                    Commerce.ViewModelAdapter.navigate("CartView");
                });
            };
            SearchOrdersViewController.prototype.onSelectionChanged = function (salesOrder) {
                this.searchOrdersViewModel.selectedOrders(salesOrder);
            };
            SearchOrdersViewController.prototype._printPackingSlipSuccess = function (receipts) {
                var _this = this;
                this._printReceiptDialog.show({ receipts: receipts, rejectOnHardwareStationErrors: true })
                    .onError(function (errors) { _this.searchOrdersViewModel.displayError(errors); });
            };
            SearchOrdersViewController.prototype._initializeAppBarButtons = function () {
                var _this = this;
                this._printPackingSlipDisabled = ko.computed(function () {
                    return _this._singleOrderOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperations.PrintPackingSlip);
                });
                this._createPackingSlipDisabled = ko.computed(function () {
                    return _this._singleOrderOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperations.CreatePackingSlip);
                });
                this._createPickingListDisabled = ko.computed(function () {
                    return _this._singleOrderOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperations.CreatePickingList);
                });
                this._pickUpDisabled = ko.computed(function () {
                    return _this._singleOrderOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperations.PickUpFromStore);
                });
                this.cancelOrderDisabled = ko.computed(function () {
                    return _this._singleOrderOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperations.Cancel);
                });
                this.editOrderDisabled = ko.computed(function () {
                    return _this._singleOrderOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperations.Edit);
                });
                this.salesOrderReturnDisabled = ko.computed(function () {
                    return _this._multiOrderOperationDisabled(Commerce.Proxy.Entities.CustomerOrderOperations.Return);
                }, this);
                this.pickingAndPackingDisabled = ko.computed(function () {
                    return _this._printPackingSlipDisabled() && _this._createPackingSlipDisabled() && _this._createPickingListDisabled() && _this._pickUpDisabled();
                });
            };
            SearchOrdersViewController.prototype._singleOrderOperationDisabled = function (operationId) {
                var multipleOrdersSelected = !Commerce.ObjectExtensions.isNullOrUndefined(this.searchOrdersViewModel.selectedOrders())
                    && this.searchOrdersViewModel.selectedOrders().length > 1;
                return Commerce.ObjectExtensions.isNullOrUndefined(this.searchOrdersViewModel.selectedOrder())
                    || !Commerce.CustomerOrderHelper.isOrderAvailableForOperation(this.searchOrdersViewModel.selectedOrder().salesOrder, operationId)
                    || multipleOrdersSelected;
            };
            SearchOrdersViewController.prototype._multiOrderOperationDisabled = function (operationId) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.searchOrdersViewModel.selectedOrder())) {
                    return true;
                }
                var customerId = this.searchOrdersViewModel.selectedOrder().salesOrder.CustomerId;
                var loyaltyId = this.searchOrdersViewModel.selectedOrder().salesOrder.LoyaltyCardId;
                return this.searchOrdersViewModel.selectedOrders().map(function (orderWrapper) { return orderWrapper.salesOrder; })
                    .some(function (order) {
                    return (order.CustomerId !== customerId)
                        || (order.LoyaltyCardId !== loyaltyId)
                        || (!Commerce.CustomerOrderHelper.isOrderAvailableForOperation(order, operationId));
                });
            };
            return SearchOrdersViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SearchOrdersViewController = SearchOrdersViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ShippingMethodsViewController = (function (_super) {
            __extends(ShippingMethodsViewController, _super);
            function ShippingMethodsViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ShippingMethodsViewModel(options);
                return _this;
            }
            ShippingMethodsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            ShippingMethodsViewController.prototype.shippingMethodButtonClick = function (eventArgs) {
                var shippingMethod = eventArgs.data;
                if (shippingMethod.Code === Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode) {
                    var pickUpOptions = {
                        isForPickUp: true,
                        cartLines: this.viewModel.cartLines
                    };
                    Commerce.ViewModelAdapter.navigate("PickUpInStoreView", pickUpOptions);
                    return;
                }
                if (!this.viewModel.isShippingAddressProvided) {
                    this.createNewAddressButtonClick();
                    return;
                }
                this.viewModel.selectShippingMethodAsync(shippingMethod).done(function (queueResult) {
                    if (!queueResult.canceled) {
                        var parameters = {
                            transactionDetailViewMode: Commerce.ViewModels.CartViewTransactionDetailViewMode.delivery,
                            correlationId: Commerce.StringExtensions.EMPTY
                        };
                        Commerce.ViewModelAdapter.navigate("CartView", parameters);
                    }
                });
            };
            ShippingMethodsViewController.prototype.updateAddressButtonClick = function () {
                var selectedAddress = this.viewModel.shippingAddress();
                if (Commerce.ObjectExtensions.isNullOrUndefined(selectedAddress)) {
                    return;
                }
                var returnOptions = {
                    cartLines: this.viewModel.cartLines,
                    shippingAddress: null,
                    selectedStore: this.viewModel.selectedStore
                };
                var options = Commerce.ViewModels.AddressAddEditViewModelOptions.createInstance(this.viewModel.customer, selectedAddress, true, "ShippingMethodsView", returnOptions);
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", options);
            };
            ShippingMethodsViewController.prototype.createNewAddressButtonClick = function () {
                var returnOptions = {
                    cartLines: this.viewModel.cartLines,
                    shippingAddress: null,
                    selectedStore: this.viewModel.selectedStore
                };
                var options = Commerce.ViewModels.AddressAddEditViewModelOptions.createInstance(this.viewModel.customer, null, true, "ShippingMethodsView", returnOptions);
                Commerce.ViewModelAdapter.navigate("AddressAddEditView", options);
            };
            return ShippingMethodsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ShippingMethodsViewController = ShippingMethodsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SalesInvoicesViewController = (function (_super) {
            __extends(SalesInvoicesViewController, _super);
            function SalesInvoicesViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options) || Commerce.StringExtensions.isNullOrWhitespace(options.salesId)) {
                    throw new Error("options is a required parameter for SalesInvoiceViewController and the salesId field must be set.");
                }
                _this._salesId = options.salesId;
                _this._indeterminateWaitVisible = ko.observable(false);
                _this._selectedInvoice = ko.observable(null);
                _this.returnSalesInvoiceDisabled = ko.computed(function () { return _this._selectedInvoice() == null; }, _this);
                _this._salesInvoices = ko.observableArray([]);
                _this._salesInvoicesViewModel = new Commerce.ViewModels.SalesInvoicesViewModel();
                _this._loadSalesInvoices();
                return _this;
            }
            SalesInvoicesViewController.prototype.onItemDataSourceUpdated = function (viewModel) {
                if (Commerce.ArrayExtensions.hasElements(this._salesInvoices()) && this._salesInvoices().length === 1) {
                    viewModel.selectAll();
                }
            };
            SalesInvoicesViewController.prototype.onSelectionChanged = function (salesInvoices) {
                this._selectedInvoice(salesInvoices[0] || null);
            };
            SalesInvoicesViewController.prototype.returnSalesInvoice = function () {
                var invoice = this._selectedInvoice();
                var options = {
                    invoiceId: invoice.Id
                };
                Commerce.ViewModelAdapter.navigate("SalesInvoiceDetailsView", options);
            };
            SalesInvoicesViewController.prototype._loadSalesInvoices = function () {
                var _this = this;
                this._indeterminateWaitVisible(true);
                this._salesInvoicesViewModel.getSalesInvoicesBySalesId(this._salesId)
                    .done(this._loadSalesInvoicesSuccess.bind(this))
                    .fail(function (errors) {
                    _this._indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            SalesInvoicesViewController.prototype._loadSalesInvoicesSuccess = function (salesInvoices) {
                this._indeterminateWaitVisible(false);
                this._salesInvoices(salesInvoices);
            };
            return SalesInvoicesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SalesInvoicesViewController = SalesInvoicesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SalesInvoiceDetailsViewController = (function (_super) {
            __extends(SalesInvoiceDetailsViewController, _super);
            function SalesInvoiceDetailsViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "SalesInvoiceDetailsViewController::ctor options are a required parameter.";
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.invoiceId)) {
                    throw "SalesInvoiceDetailsViewController::ctor The options did not contain a value for the invoiceId, which is a required field.";
                }
                _this._invoiceId = options.invoiceId;
                _this._indeterminateWaitVisible = ko.observable(false);
                _this._viewModel = new Commerce.ViewModels.SalesInvoiceDetailsViewModel();
                return _this;
            }
            SalesInvoiceDetailsViewController.prototype.onItemDataSourceUpdated = function (viewModel) {
                if (Commerce.ArrayExtensions.hasElements(this._viewModel.cartLinesForDisplay()) && this._viewModel.cartLinesForDisplay().length === 1) {
                    viewModel.selectAll();
                }
            };
            SalesInvoiceDetailsViewController.prototype.load = function () {
                this.handleAsyncResult(this._viewModel.recallCartByInvoiceId(this._invoiceId));
            };
            SalesInvoiceDetailsViewController.prototype.returnSalesInvoice = function () {
                this.handleAsyncResult(this._viewModel.returnCartLines())
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.ViewModelAdapter.navigate("CartView");
                    }
                });
            };
            SalesInvoiceDetailsViewController.prototype.handleAsyncResult = function (asyncResult) {
                var _this = this;
                this._indeterminateWaitVisible(true);
                return asyncResult
                    .done(function () {
                    _this._indeterminateWaitVisible(false);
                }).fail(function (errors) {
                    _this._indeterminateWaitVisible(false);
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return SalesInvoiceDetailsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SalesInvoiceDetailsViewController = SalesInvoiceDetailsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CustomerOrderInvoicesViewController = (function (_super) {
            __extends(CustomerOrderInvoicesViewController, _super);
            function CustomerOrderInvoicesViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.CustomerOrderInvoicesViewModel(options);
                return _this;
            }
            CustomerOrderInvoicesViewController.prototype.load = function () {
                this.viewModel.load();
            };
            CustomerOrderInvoicesViewController.prototype.loadingStateChanged = function (event) {
                var winControl = event.currentTarget.winControl;
                if (winControl.itemDataSource.list.length === 1 && winControl.selection.count() === 0) {
                    winControl.selection.add(0);
                }
            };
            return CustomerOrderInvoicesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CustomerOrderInvoicesViewController = CustomerOrderInvoicesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var SaleslineSelectorViewController = (function (_super) {
            __extends(SaleslineSelectorViewController, _super);
            function SaleslineSelectorViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw Error("'Options' is required for SaleslineSelectorView.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.operationId)) {
                    throw Error("options.operationId' is required for selecting sales line. The operation Id is null or empty.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cart)) {
                    throw Error("options.cart' is required for for selecting sales line. The cart is null or empty.");
                }
                var viewModelOptions = {
                    cart: options.cart,
                    operationId: options.operationId
                };
                _this.viewModel = new Commerce.ViewModels.SaleslineSelectorViewModel(viewModelOptions);
                return _this;
            }
            return SaleslineSelectorViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.SaleslineSelectorViewController = SaleslineSelectorViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var PaymentHistoryViewController = (function (_super) {
            __extends(PaymentHistoryViewController, _super);
            function PaymentHistoryViewController() {
                var _this = _super.call(this, false) || this;
                _this.historicalTenderLines = ko.observableArray([]);
                _this.viewTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            PaymentHistoryViewController.prototype.load = function () {
                var _this = this;
                this.cart = Commerce.Session.instance.cart;
                this.paymentHistoryViewModel = new Commerce.ViewModels.PaymentHistoryViewModel();
                this.paymentHistoryViewModel.getPaymentsHistory(this.cart)
                    .done(function (tenderLines) {
                    _this.historicalTenderLines(tenderLines);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
                var salesId = Commerce.StringExtensions.isNullOrWhitespace(this.cart.SalesId) ?
                    Commerce.StringExtensions.EMPTY : this.cart.SalesId;
                this.viewTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4529"), salesId));
            };
            return PaymentHistoryViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.PaymentHistoryViewController = PaymentHistoryViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ManageShiftsViewController = (function (_super) {
            __extends(ManageShiftsViewController, _super);
            function ManageShiftsViewController() {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ManageShiftsViewModel();
                return _this;
            }
            ManageShiftsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            return ManageShiftsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ManageShiftsViewController = ManageShiftsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ReconcileShiftsViewController = (function (_super) {
            __extends(ReconcileShiftsViewController, _super);
            function ReconcileShiftsViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to  ReconcileShiftsView: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.shiftsToReconcile)) {
                    throw new Error("Invalid options passed to ReconcileShiftsView: shiftsToReconcile cannot be null or undefined.");
                }
                _this.viewModel = new Commerce.ViewModels.ReconcileShiftsViewModel(options);
                return _this;
            }
            ReconcileShiftsViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            ReconcileShiftsViewController.prototype.afterBind = function (element) {
                this._reconcileShiftsModeTrigger = this.viewModel.reconcileShiftsMode.subscribe(function (newValue) {
                    if (newValue === Commerce.ViewModels.ReconcileShiftsMode.Active) {
                        Commerce.Interaction.triggerEvent(element, "activateActiveTabPivotItem");
                    }
                    else {
                        Commerce.Interaction.triggerEvent(element, "activateCompletedTabPivotItem");
                    }
                });
            };
            ReconcileShiftsViewController.prototype.onHidden = function () {
                this._reconcileShiftsModeTrigger.dispose();
            };
            return ReconcileShiftsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ReconcileShiftsViewController = ReconcileShiftsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CashManagementViewController = (function (_super) {
            __extends(CashManagementViewController, _super);
            function CashManagementViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.CashManagementViewModel(options);
                _this.viewModel.setNumPadPublisher(_this.numPadInputBroker);
                return _this;
            }
            CashManagementViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            CashManagementViewController.prototype.enterAmount = function (numPadResult) {
                this.viewModel.enterAmount();
                Commerce.Interaction.triggerEvent(this._cashManagementElement, CashManagementViewController._amountByKeywordFound);
            };
            CashManagementViewController.prototype.afterBind = function (element) {
                this._cashManagementElement = element;
            };
            CashManagementViewController.prototype.onNavigateBack = function () {
                return this.viewModel.onNavigateBack();
            };
            CashManagementViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            CashManagementViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            CashManagementViewController._amountByKeywordFound = "AmountByKeywordFound";
            return CashManagementViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CashManagementViewController = CashManagementViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var CostAccountViewController = (function (_super) {
            __extends(CostAccountViewController, _super);
            function CostAccountViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.CostAccountViewModel(options);
                _this.viewModel.setNumPadPublisher(_this.numPadInputBroker);
                return _this;
            }
            CostAccountViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            CostAccountViewController.prototype.onShown = function () {
                this.viewModel.onShown();
            };
            CostAccountViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            return CostAccountViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.CostAccountViewController = CostAccountViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var DenominationsViewController = (function (_super) {
            __extends(DenominationsViewController, _super);
            function DenominationsViewController(options) {
                var _this = _super.call(this, false) || this;
                _this.viewModel = new Commerce.ViewModels.DenominationsViewModel(options);
                return _this;
            }
            DenominationsViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            return DenominationsViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.DenominationsViewController = DenominationsViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ManageSafesViewController = (function (_super) {
            __extends(ManageSafesViewController, _super);
            function ManageSafesViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.ManageSafesViewModel(options);
                return _this;
            }
            ManageSafesViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            return ManageSafesViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ManageSafesViewController = ManageSafesViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var ResumeShiftViewController = (function (_super) {
            __extends(ResumeShiftViewController, _super);
            function ResumeShiftViewController(options) {
                var _this = _super.call(this, true) || this;
                _this._options = options || { onShiftSelected: null, availableShiftActions: null };
                _this.indeterminateWaitVisible = ko.observable(false);
                _this.availableShifts = ko.observableArray([]);
                _this.isShiftSelected = ko.observable(false);
                return _this;
            }
            ResumeShiftViewController.prototype.load = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options.availableShiftActions)) {
                    if (Commerce.ArrayExtensions.hasElements(this._options.availableShiftActions.reusableShifts)) {
                        this._options.availableShiftActions.reusableShifts.forEach(function (shiftValue, shiftIndex, shiftArray) {
                            _this.availableShifts.push(shiftValue);
                        });
                    }
                    if (Commerce.ArrayExtensions.hasElements(this._options.availableShiftActions.suspendedShifts)) {
                        this._options.availableShiftActions.suspendedShifts.forEach(function (shiftValue, shiftIndex, shiftArray) {
                            _this.availableShifts.push(shiftValue);
                        });
                    }
                }
            };
            ResumeShiftViewController.prototype.shiftSelectionChangedHandler = function (shifts) {
                this._selectedShift = shifts[0];
                this.isShiftSelected(!Commerce.ObjectExtensions.isNullOrUndefined(this._selectedShift));
            };
            ResumeShiftViewController.prototype.useExistingShift = function () {
                var _this = this;
                if (this._selectedShift && this._options.onShiftSelected) {
                    this.indeterminateWaitVisible(true);
                    this._options.onShiftSelected(this._selectedShift)
                        .always(function () {
                        _this.indeterminateWaitVisible(false);
                    });
                }
            };
            ResumeShiftViewController.prototype.cancelUseExistingShift = function () {
                if (this._options.onShiftSelected) {
                    this._options.onShiftSelected(null);
                }
            };
            ResumeShiftViewController.prototype.onHidden = function () {
                if (this._options.onShiftSelected) {
                    this._options.onShiftSelected(null);
                }
            };
            return ResumeShiftViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.ResumeShiftViewController = ResumeShiftViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var TenderCountingViewController = (function (_super) {
            __extends(TenderCountingViewController, _super);
            function TenderCountingViewController(options) {
                var _this = _super.call(this, false) || this;
                var viewModelOptions = {
                    transactionType: options.transactionType,
                    shift: options.shift,
                    reasonCodeLines: options.reasonCodeLines,
                    onTenderLineSelected: _this.tenderSelectionChangedHandler.bind(_this),
                    selectionHandler: options.selectionHandler,
                    tenderCountingLines: options.tenderCountingLines
                };
                _this.viewModel = new Commerce.ViewModels.TenderCountingViewModel(viewModelOptions);
                _this._ignoreTenderLineClick = false;
                var tenderCountingType = options.transactionType;
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(tenderCountingType)) {
                    _this.viewTitle = "string_4029";
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(tenderCountingType)) {
                    _this.viewTitle = "string_4572";
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(tenderCountingType)) {
                    _this.viewTitle = "string_4573";
                }
                return _this;
            }
            TenderCountingViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            TenderCountingViewController.prototype.onShown = function () {
                this._tenderLineListControl = $("#paymentMethodList")[0].winControl;
            };
            TenderCountingViewController.prototype.onHidden = function () {
                this.viewModel.onHidden();
            };
            TenderCountingViewController.prototype.onNavigateBack = function () {
                this.viewModel.abortOperationAsync();
                return true;
            };
            TenderCountingViewController.prototype.clickCountButton = function (event) {
                if (!this._ignoreTenderLineClick) {
                    var parent_1 = event.target.parentElement;
                    while (!parent_1.classList.contains("win-item")) {
                        parent_1 = parent_1.parentElement;
                        if (Commerce.ObjectExtensions.isNullOrUndefined(parent_1)) {
                            return;
                        }
                    }
                    var denominationLineIndex = parseInt(parent_1.attributes["aria-posinset"].value, 10) - 1;
                    this.viewModel.switchToDenominationsMode(denominationLineIndex);
                }
                else {
                    this._ignoreTenderLineClick = false;
                    this.viewModel.changeDeclareAmount(true);
                }
            };
            TenderCountingViewController.prototype.tenderSelectionChangedHandler = function (selectedLine, lineIndex) {
                this._ignoreTenderLineClick = true;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(lineIndex) && lineIndex >= 0) {
                    this._tenderLineListControl.selection.set(lineIndex);
                    this._tenderLineListControl.ensureVisible(lineIndex);
                }
            };
            return TenderCountingViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.TenderCountingViewController = TenderCountingViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var TimeClockViewController = (function (_super) {
            __extends(TimeClockViewController, _super);
            function TimeClockViewController() {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.TimeClockViewModel();
                return _this;
            }
            TimeClockViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            return TimeClockViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.TimeClockViewController = TimeClockViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var TimeClockManagerViewController = (function (_super) {
            __extends(TimeClockManagerViewController, _super);
            function TimeClockManagerViewController(options) {
                var _this = _super.call(this, true) || this;
                _this.viewModel = new Commerce.ViewModels.TimeClockManagerViewModel(options);
                return _this;
            }
            TimeClockManagerViewController.prototype.load = function () {
                this.viewModel.loadAsync();
            };
            TimeClockManagerViewController.prototype.setStoreFilter = function () {
                var storeSelectionHandler = new Commerce.CancelableSelectionHandler(function (store) {
                    var returnOptions = {
                        storeId: store.OrgUnitNumber
                    };
                    Commerce.ViewModelAdapter.collapseAndNavigate("TimeClockManagerView", returnOptions);
                }, function () {
                    Commerce.ViewModelAdapter.collapse("TimeClockManagerView");
                });
                var parameters = {
                    isForPickUp: false,
                    storeSelectionHandler: storeSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("PickUpInStoreView", parameters);
            };
            return TimeClockManagerViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.TimeClockManagerViewController = TimeClockManagerViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DeveloperMode = (function (_super) {
            __extends(DeveloperMode, _super);
            function DeveloperMode() {
                var _this = _super.call(this) || this;
                _this.isEventAttached = false;
                _this.controlName = "DeveloperMode";
                _this.isGridHelperVisible = ko.observable(Commerce.CSSHelpers.isGridHelperVisible());
                _this.isGridHelperVisible.subscribe(function (newValue) {
                    Commerce.CSSHelpers.setGridHelperVisibility(newValue);
                }, _this);
                _this.isColoringVisible = ko.observable(Commerce.CSSHelpers.isDeveloperModeColoringVisible());
                _this.isColoringVisible.subscribe(function (newValue) {
                    Commerce.CSSHelpers.setDeveloperModeColoring(newValue);
                }, _this);
                _this.areStringIdsVisible = ko.observable(Commerce.StringResourceManager.isIncludeStringIdsModeEnabled());
                _this.areStringIdsVisible.subscribe(function (newValue) {
                    Commerce.StringResourceManager.setIncludeStringIdsMode(newValue);
                }, _this);
                _this.isPseudoLocalizationEnabled = ko.observable(Commerce.ViewModelAdapter.getDeveloperModeEnablePseudoLocalization());
                _this.isPseudoLocalizationEnabled.subscribe(function (newValue) {
                    Commerce.ViewModelAdapter.setDeveloperModeEnablePseudoLocalization(newValue);
                }, _this);
                _this.theme = ko.observable(Commerce.CSSHelpers.getDeveloperModeTheme());
                _this.theme.subscribe(function (newValue) {
                    Commerce.CSSHelpers.setDeveloperModeTheme(newValue);
                }, _this);
                _this.dir = ko.observable(Commerce.CSSHelpers.getDeveloperModeTextDirection());
                _this.dir.subscribe(function (newValue) {
                    Commerce.CSSHelpers.setTextDirection(newValue);
                }, _this);
                _this.keyDown = function (event) {
                    if (event.ctrlKey && event.altKey) {
                        switch (String.fromCharCode(event.which)) {
                            case "G":
                                this.toggleGridVisibility(!this.isGridHelperVisible());
                                break;
                            case "T":
                                this.theme(this.theme() === DeveloperMode.DARK_THEME
                                    ? DeveloperMode.LIGHT_THEME : DeveloperMode.DARK_THEME);
                                break;
                            case "D":
                                this.dir(this.dir() === DeveloperMode.LEFT_TO_RIGHT_TEXT_DIRECTION
                                    ? DeveloperMode.RIGHT_TO_LEFT_TEXT_DIRECTION : DeveloperMode.LEFT_TO_RIGHT_TEXT_DIRECTION);
                                break;
                            case "C":
                                this.toggleColorVisibility(!this.isColoringVisible());
                                break;
                        }
                    }
                }.bind(_this);
                _this.isDeveloperMode = ko.observable(Commerce.CSSHelpers.isCSSDeveloperMode());
                _this.isDeveloperMode.subscribe(function (newValue) {
                    Commerce.CSSHelpers.setCSSDeveloperMode(newValue);
                    if (Commerce.CSSHelpers.isCSSDeveloperMode()) {
                        if (_this.isEventAttached === false) {
                            $(document).on("keydown", _this.keyDown);
                            _this.isEventAttached = true;
                        }
                    }
                    else {
                        _this.areStringIdsVisible(false);
                        _this.isPseudoLocalizationEnabled(false);
                        _this.dir(Commerce.ViewModelAdapter.getLanguageTextDirection(Commerce.ViewModelAdapter.getDefaultUILanguage()));
                        _this.isGridHelperVisible(false);
                        _this.theme(Commerce.CSSHelpers.deviceConfigurationTheme);
                        _this.isColoringVisible(false);
                        _this.isPerformanceLogEnabled(false);
                        if (_this.isEventAttached) {
                            $(document).off("keydown", _this.keyDown);
                            _this.isEventAttached = false;
                        }
                    }
                }, _this);
                _this.isPerformanceLogEnabled = ko.observable(Commerce.PerformanceLogger.performanceMarkersEnabled);
                _this.isPerformanceLogEnabled.subscribe(function (newValue) {
                    Commerce.PerformanceLogger.enableDisablePerformanceMarkers(newValue);
                }, _this);
                return _this;
            }
            DeveloperMode.prototype.toggleStringIdsVisibility = function (checked) {
                this.areStringIdsVisible(checked);
            };
            DeveloperMode.prototype.togglePseudoLocalization = function (checked) {
                this.isPseudoLocalizationEnabled(checked);
            };
            DeveloperMode.prototype.togglePerformanceLog = function (checked) {
                this.isPerformanceLogEnabled(checked);
            };
            DeveloperMode.prototype.toggleGridVisibility = function (checked) {
                this.isGridHelperVisible(checked);
            };
            DeveloperMode.prototype.toggleColorVisibility = function (checked) {
                this.isColoringVisible(checked);
            };
            DeveloperMode.prototype.toggleDeveloperMode = function (checked) {
                this.isDeveloperMode(checked);
            };
            DeveloperMode.DARK_THEME = "dark";
            DeveloperMode.LIGHT_THEME = "light";
            DeveloperMode.LEFT_TO_RIGHT_TEXT_DIRECTION = "ltr";
            DeveloperMode.RIGHT_TO_LEFT_TEXT_DIRECTION = "rtl";
            return DeveloperMode;
        }(Controls.UserControl));
        Controls.DeveloperMode = DeveloperMode;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ViewControllers;
    (function (ViewControllers) {
        "use strict";
        var UrlOperationViewController = (function (_super) {
            __extends(UrlOperationViewController, _super);
            function UrlOperationViewController(options) {
                var _this = _super.call(this, true) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to the UrlOperationViewController constructor: options cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(options.url)) {
                    throw new Error("Invalid options passed to the UrlOperationViewController constructor: options.url cannot be null or empty.");
                }
                _this.launchUrl = ko.observable(options.url);
                _this.pageTitle = ko.observable(options.actionTitle);
                var applicationType = Commerce.Host.instance.application.getApplicationType();
                if (Commerce.ApplicationHelper.isWebApplicationType(applicationType)) {
                    _this.isCloudPos = ko.observable(true);
                }
                else {
                    _this.isCloudPos = ko.observable(false);
                }
                return _this;
            }
            UrlOperationViewController.prototype.onShown = function () {
                Commerce.UserActivityTracker.detachHandler();
            };
            UrlOperationViewController.prototype.onHidden = function () {
                Commerce.UserActivityTracker.setupServerConfiguredAutoExitTimeout();
            };
            return UrlOperationViewController;
        }(ViewControllers.ViewControllerBase));
        ViewControllers.UrlOperationViewController = UrlOperationViewController;
    })(ViewControllers = Commerce.ViewControllers || (Commerce.ViewControllers = {}));
})(Commerce || (Commerce = {}));
var DualDisplayViewControllers = DualDisplay.ViewControllers;
var Commerce;
(function (Commerce) {
    var Config;
    (function (Config) {
        Config.viewRoot = "Views";
        Config.controlRoot = Config.viewRoot + "/Controls";
        Config.navigation = [
            {
                title: "Affiliation View",
                page: "AffiliationsView",
                phonePage: "AffiliationsView",
                path: "Affiliation",
                viewController: Commerce.ViewControllers.AffiliationsViewController
            },
            {
                title: "Address Add\Edit View",
                page: "AddressAddEditView",
                phonePage: "AddressAddEditViewPhone",
                path: "Customer",
                viewController: Commerce.ViewControllers.AddressAddEditViewController
            },
            {
                title: "Customer Addresses View",
                page: "CustomerAddressesView",
                phonePage: "CustomerAddressesViewPhone",
                path: "Customer",
                viewController: Commerce.ViewControllers.CustomerAddressesViewController
            },
            {
                title: "Customer Affiliations View",
                page: "CustomerAffiliationsView",
                phonePage: "CustomerAffiliationsView",
                path: "Customer",
                viewController: Commerce.ViewControllers.CustomerAffiliationsViewController
            },
            {
                title: "Cart View",
                page: "CartView",
                phonePage: "CartViewPhone",
                path: "Cart",
                viewController: Commerce.ViewControllers.CartViewController
            },
            {
                title: "Resume Cart View",
                page: "ResumeCartView",
                phonePage: "ResumeCartView",
                path: "Cart",
                viewController: Commerce.ViewControllers.ResumeCartViewController
            },
            {
                title: "Show Journal View",
                page: "ShowJournalView",
                phonePage: "ShowJournalViewPhone",
                path: "Cart",
                viewController: Commerce.ViewControllers.ShowJournalViewController
            },
            {
                title: "Customer Details",
                page: "CustomerDetailsView",
                phonePage: "CustomerDetailsViewPhone",
                path: "Customer",
                viewController: Commerce.ViewControllers.CustomerDetailsViewController
            },
            {
                title: "Recent Purchases View",
                page: "RecentPurchasesView",
                phonePage: "RecentPurchasesView",
                path: "Customer",
                viewController: Commerce.ViewControllers.RecentPurchasesViewController
            },
            {
                title: "Categories",
                page: "CategoriesView",
                phonePage: "CategoriesViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.CategoriesViewController
            },
            {
                title: "Compare products",
                page: "CompareProductsView",
                phonePage: "CompareProductsViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.CompareProductsViewController
            },
            {
                title: "Database connection status",
                page: "DatabaseConnectionStatusView",
                phonePage: "DatabaseConnectionStatusViewPhone",
                path: "Device",
                viewController: Commerce.ViewControllers.DatabaseConnectionStatusViewController
            },
            {
                title: "Deposit Override View",
                page: "DepositOverrideView",
                phonePage: "DepositOverrideViewPhone",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.DepositOverrideViewController
            },
            {
                title: "ChangePassword",
                page: "ChangePasswordView",
                phonePage: "ChangePasswordViewPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.ChangePasswordViewController
            },
            {
                title: "ResetPassword",
                page: "ResetPasswordView",
                phonePage: "ResetPasswordViewPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.ResetPasswordViewController
            },
            {
                title: "DeviceActivation",
                page: "DeviceActivationView",
                phonePage: "DeviceActivationViewPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.DeviceActivationViewController
            },
            {
                title: "DeviceActivationProcess",
                page: "DeviceActivationProcessView",
                phonePage: "DeviceActivationProcessViewPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.DeviceActivationProcessViewController
            },
            {
                title: "ExtendedLogOn",
                page: "ExtendedLogOnView",
                phonePage: "ExtendedLogOnView",
                path: "Login",
                viewController: Commerce.ViewControllers.ExtendedLogonViewController
            },
            {
                title: "GetStarted",
                page: "GetStartedView",
                phonePage: "GetStartedViewPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.GetStartedViewController
            },
            {
                title: "GuidedActivation",
                page: "GuidedActivationView",
                phonePage: "GuidedActivationViewPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.GuidedActivationViewController
            },
            {
                title: "Home",
                page: "HomeView",
                phonePage: "HomeViewPhone",
                path: "Home",
                viewController: Commerce.ViewControllers.HomeViewController
            },
            {
                title: "Customer Add Edit View",
                page: "CustomerAddEditView",
                phonePage: "CustomerAddEditViewPhone",
                path: "Customer",
                viewController: Commerce.ViewControllers.CustomerAddEditViewController
            },
            {
                title: "Issue Loyalty Card View",
                page: "IssueLoyaltyCardView",
                phonePage: "IssueLoyaltyCardViewPhone",
                path: "Order",
                viewController: Commerce.ViewControllers.IssueLoyaltyCardViewController
            },
            {
                title: "LockRegister",
                page: "LockRegister",
                phonePage: "LockRegisterPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.LockRegisterViewController
            },
            {
                title: "Login",
                page: "LoginView",
                phonePage: "LoginViewPhone",
                path: "Login",
                viewController: Commerce.ViewControllers.LoginViewController
            },
            {
                title: "Payment",
                page: "PaymentView",
                phonePage: "PaymentViewPhone",
                path: "Order",
                viewController: Commerce.ViewControllers.PaymentViewController
            },
            {
                title: "NewPayment",
                page: "NewPaymentView",
                phonePage: "NewPaymentViewPhone",
                path: "Payments",
                viewController: Commerce.ViewControllers.NewPaymentViewController
            },
            {
                title: "Products",
                page: "ProductsView",
                phonePage: "ProductsView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.ProductsViewController
            },
            {
                title: "Product Rich Media",
                page: "ProductRichMediaView",
                phonePage: "ProductRichMediaViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.ProductRichMediaViewController
            },
            {
                title: "Return Transaction View",
                page: "ReturnTransactionView",
                phonePage: "ReturnTransactionView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.ReturnTransactionViewController
            },
            {
                title: "Search View",
                page: "SearchView",
                phonePage: "SearchView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.SearchViewController
            },
            {
                title: "Simple Products Details",
                page: "SimpleProductDetailsView",
                phonePage: "SimpleProductDetailsViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.SimpleProductDetailsViewController
            },
            {
                title: "Reports View",
                page: "ReportsView",
                phonePage: "ReportsView",
                path: "Reports",
                viewController: Commerce.ViewControllers.ReportsViewController
            },
            {
                title: "Report Details View",
                page: "ReportDetailsView",
                phonePage: "ReportDetailsView",
                path: "Reports",
                viewController: Commerce.ViewControllers.ReportDetailsViewController
            },
            {
                title: "Shipping Methods View",
                page: "ShippingMethodsView",
                phonePage: "ShippingMethodsViewPhone",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.ShippingMethodsViewController
            },
            {
                title: "Inventory Lookup View",
                page: "InventoryLookupView",
                phonePage: "InventoryLookupViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.InventoryLookupViewController
            },
            {
                title: "Inventory Lookup Matrix View",
                page: "InventoryLookupMatrixView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.InventoryLookupMatrixViewController
            },
            {
                title: "Inventory Available To Promise View",
                page: "InventoryAvailableToPromiseView",
                phonePage: "InventoryAvailableToPromiseViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.InventoryAvailableToPromiseViewController
            },
            {
                title: "Pick up in store View",
                page: "PickUpInStoreView",
                phonePage: "PickUpInStoreViewPhone",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.PickUpInStoreViewController
            },
            {
                title: "Search Orders View",
                page: "SearchOrdersView",
                phonePage: "SearchOrdersView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.SearchOrdersViewController
            },
            {
                title: "Sales Invoices View",
                page: "SalesInvoicesView",
                phonePage: "SalesInvoicesView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.SalesInvoicesViewController
            },
            {
                title: "Sales Invoice Details View",
                page: "SalesInvoiceDetailsView",
                phonePage: "SalesInvoiceDetailsView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.SalesInvoiceDetailsViewController
            },
            {
                title: "Customer Order Invoices View",
                page: "CustomerOrderInvoicesView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.CustomerOrderInvoicesViewController
            },
            {
                title: "Cartline selection View",
                page: "SaleslineSelectorView",
                phonePage: "SaleslineSelectorView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.SaleslineSelectorViewController
            },
            {
                title: "Search Stock Count View",
                page: "SearchStockCountView",
                phonePage: "SearchStockCountView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.SearchStockCountViewController
            },
            {
                title: "Stock Count Details View",
                page: "StockCountDetailsView",
                phonePage: "StockCountDetailsView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.StockCountDetailsViewController
            },
            {
                title: "Transfer Order Details View",
                page: "TransferOrderDetailsView",
                phonePage: "TransferOrderDetailsView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.TransferOrderDetailsViewController
            },
            {
                title: "Kit Component Substitutes View",
                page: "KitComponentSubstitutesView",
                phonePage: "KitComponentSubstitutesView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.KitComponentSubstitutesViewController
            },
            {
                title: "Kit Disassembly View",
                page: "KitDisassemblyView",
                phonePage: "KitDisassemblyViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.KitDisassemblyViewController
            },
            {
                title: "Price Check View",
                page: "PriceCheckView",
                phonePage: "PriceCheckViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.PriceCheckViewController
            },
            {
                title: "Search Picking and Receiving View",
                page: "SearchPickingAndReceivingView",
                phonePage: "SearchPickingAndReceivingView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.SearchPickingAndReceivingViewController
            },
            {
                title: "Picking and Receiving Details View",
                page: "PickingAndReceivingDetailsView",
                phonePage: "PickingAndReceivingDetailsViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.PickingAndReceivingDetailsViewController
            },
            {
                title: "Store Details View",
                page: "StoreDetailsView",
                phonePage: "StoreDetailsViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.StoreDetailsViewController
            },
            {
                title: "Pick up View",
                page: "PickUpView",
                phonePage: "PickUpView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.PickUpViewController
            },
            {
                title: "Show Manage Shifts View",
                page: "ManageShiftsView",
                phonePage: "ManageShiftsView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.ManageShiftsViewController
            },
            {
                title: "Reconcile Shifts View",
                page: "ReconcileShiftsView",
                phonePage: "ReconcileShiftsView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.ReconcileShiftsViewController
            },
            {
                title: "Denominations View",
                page: "DenominationsView",
                phonePage: "DenominationsView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.DenominationsViewController
            },
            {
                title: "Resume Shift View",
                page: "ResumeShiftView",
                phonePage: "ResumeShiftView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.ResumeShiftViewController
            },
            {
                title: "Cash Management View",
                page: "CashManagementView",
                phonePage: "CashManagementViewPhone",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.CashManagementViewController
            },
            {
                title: "Tender Counting View",
                page: "TenderCountingView",
                phonePage: "TenderCountingView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.TenderCountingViewController
            },
            {
                title: "Cost Account View",
                page: "CostAccountView",
                phonePage: "CostAccountView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.CostAccountViewController
            },
            {
                title: "Safe management",
                page: "ManageSafesView",
                phonePage: "ManageSafesView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.ManageSafesViewController
            },
            {
                title: "Settings",
                page: "SettingsView",
                phonePage: "SettingsViewPhone",
                path: "Device",
                viewController: Commerce.ViewControllers.SettingsViewController
            },
            {
                title: "Time Clock View",
                page: "TimeClockView",
                phonePage: "TimeClockView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.TimeClockViewController
            },
            {
                title: "Time Clock Manager View",
                page: "TimeClockManagerView",
                phonePage: "TimeClockManagerView",
                path: "DailyOperations",
                viewController: Commerce.ViewControllers.TimeClockManagerViewController
            },
            {
                title: "Catalogs view",
                page: "CatalogsView",
                phonePage: "CatalogsViewPhone",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.CatalogsViewController
            },
            {
                title: "All stores view",
                page: "AllStoresView",
                phonePage: "AllStoresView",
                path: "Merchandising",
                viewController: Commerce.ViewControllers.AllStoresViewController
            },
            {
                title: "Payment history view",
                page: "PaymentHistoryView",
                phonePage: "PaymentHistoryView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.PaymentHistoryViewController
            },
            {
                title: "Fulfillment line view",
                page: "FulfillmentLineView",
                phonePage: "FulfillmentLineViewPhone",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.FulfillmentLineViewController
            },
            {
                title: "Invoiced sales lines view",
                page: "InvoicedSalesLinesView",
                phonePage: "InvoicedSalesLinesView",
                path: "CustomerOrder",
                viewController: Commerce.ViewControllers.InvoicedSalesLinesViewController
            },
            {
                title: "Dual display view",
                page: "DualDisplayView",
                phonePage: "DualDisplayView",
                path: "Device",
                viewController: DualDisplayViewControllers.DualDisplayViewController
            },
            {
                title: "URL operation view",
                page: "UrlOperationView",
                phonePage: "UrlOperationView",
                path: "UrlOperation",
                viewController: Commerce.ViewControllers.UrlOperationViewController
            },
            {
                title: "Manage Charges View",
                page: "ManageChargesView",
                phonePage: "ManageChargesView",
                path: "Order",
                viewController: Commerce.ViewControllers.ManageChargesViewController
            },
        ];
    })(Config = Commerce.Config || (Commerce.Config = {}));
})(Commerce || (Commerce = {}));
document.addEventListener("DOMContentLoaded", function (evt) {
    Commerce.Config.navigation.forEach(function (viewConfiguration) {
        if (Commerce.StringExtensions.isNullOrWhitespace(viewConfiguration.page) ||
            Commerce.StringExtensions.isNullOrWhitespace(viewConfiguration.path) ||
            Commerce.ObjectExtensions.isNullOrUndefined(viewConfiguration.viewController)) {
            return;
        }
        Commerce.ViewModelAdapterWinJS.define(new Commerce.ViewConfiguration(viewConfiguration));
    });
});
var Commerce;
(function (Commerce) {
    var Config;
    (function (Config) {
        Config.retailServerUrl = Commerce.StringExtensions.EMPTY;
        Config.demoModeDeviceId = Commerce.StringExtensions.EMPTY;
        Config.demoModeTerminalId = Commerce.StringExtensions.EMPTY;
        Config.demoModeStaffId = Commerce.StringExtensions.EMPTY;
        Config.demoModePassword = Commerce.StringExtensions.EMPTY;
        Config.isDemoMode = false;
        Config.isDebugMode = false;
        Config.onlineDatabase = Commerce.StringExtensions.EMPTY;
        Config.offlineDatabase = Commerce.StringExtensions.EMPTY;
        Config.connectionTimeout = 120;
        Config.aadLoginUrl = Commerce.StringExtensions.EMPTY;
        Config.appHardwareId = Commerce.StringExtensions.EMPTY;
        Config.defaultOfflineDownloadIntervalInMilliseconds = 60000;
        Config.defaultOfflineUploadIntervalInMilliseconds = 60000;
        Config.defaultPageSize = 250;
        Config.commerceAuthenticationAudience = "Modern POS";
        Config.sqlCommandTimeout = 3600;
        Config.printReceiptsOnCardDeclineOrVoid = false;
        Config.appBaseVersion = Microsoft.Dynamics.Diagnostics.TypeScriptCore.AppInsightsSink.appBaseVersion;
        Config.taskRecorderPanels = {
            "MainPanel": {
                viewModelType: Commerce.TaskRecorder.ViewModel.MainPanelViewModel
            }
        };
        Config.taskRecorderPages = {
            "Welcome": {
                viewModelType: Commerce.TaskRecorder.ViewModel.WelcomeViewModel
            },
            "NewRecording": {
                viewModelType: Commerce.TaskRecorder.ViewModel.NewRecordingViewModel
            },
            "Recording": {
                viewModelType: Commerce.TaskRecorder.ViewModel.RecordingViewModel
            },
            "NewTask": {
                viewModelType: Commerce.TaskRecorder.ViewModel.NewTaskViewModel
            },
            "EditStep": {
                viewModelType: Commerce.TaskRecorder.ViewModel.EditStepViewModel
            },
            "EditTask": {
                viewModelType: Commerce.TaskRecorder.ViewModel.EditTaskViewModel
            },
            "CompleteRecording": {
                viewModelType: Commerce.TaskRecorder.ViewModel.CompleteRecordingViewModel
            },
            "Help": {
                viewModelType: Commerce.TaskRecorder.ViewModel.HelpViewModel
            },
            "StartTaskGuide": {
                viewModelType: Commerce.TaskRecorder.ViewModel.StartTaskGuideViewModel
            }
        };
    })(Config = Commerce.Config || (Commerce.Config = {}));
})(Commerce || (Commerce = {}));
document.addEventListener("DOMContentLoaded", function (evt) {
    var minSmallSide = 768;
    var $window = $(window);
    var $body = $("body");
    var maxValue = Math.max($window.height(), $window.width());
    if (!Commerce.ObjectExtensions.isBoolean(Commerce.Config.isPhone)) {
        Commerce.Config.isPhone = maxValue < minSmallSide;
    }
    if (!Commerce.ObjectExtensions.isString(Commerce.Config.appName) || Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.appName)) {
        Commerce.Config.appName = Commerce.StringResourceManager.getString("string_0");
    }
    if (Commerce.Config.isPhone) {
        $body.addClass("phone");
    }
    Commerce.Host.Globalization.CultureHelper.overrideDefaultCultureInfo();
    Commerce.PerformanceLogger.enableDisablePerformanceMarkers(Commerce.PerformanceLogger.performanceMarkersEnabled);
});
var Pos;
(function (Pos) {
    "use strict";
    var GetChannelConfigurationClientRequest = Commerce.GetChannelConfigurationClientRequest;
    var PosInitializer = (function (_super) {
        __extends(PosInitializer, _super);
        function PosInitializer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PosInitializer.prototype.initialize = function (userAgent) {
            _super.prototype.initialize.call(this, userAgent);
            this._setHighchartsGlobalOptions();
        };
        PosInitializer.prototype._loadConfigurationsAsync = function (correlationId) {
            if (Commerce.ApplicationContext.Instance.isDeviceActivated) {
                var getChannelConfigurationClientRequest = new GetChannelConfigurationClientRequest(Commerce.LoggerHelper.getNewCorrelationId());
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getChannelConfigurationClientRequest))
                    .fail(function (errors) {
                    Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "ChannelConfiguration", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                });
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        PosInitializer.prototype._onFirstReady = function (args, userAgent) {
            var _this = this;
            var onFirstReadyQueue = new Commerce.AsyncQueue();
            onFirstReadyQueue.enqueue(function () {
                return _super.prototype._onFirstReady.call(_this, args, userAgent);
            }).enqueue(function () {
                _this._addConnectionStatusChangeTriggerExecutor();
                var applicationStartTriggerOptions = {};
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.ApplicationStart, applicationStartTriggerOptions).recoverOnFailure(function () {
                    return Commerce.VoidAsyncResult.createResolved();
                });
            }).enqueue(function () {
                if (_this._checkWindowIsSafe(navigator.userAgent)) {
                    _this._navigateToStartPage(args);
                }
                return Commerce.VoidAsyncResult.createResolved();
            });
            return onFirstReadyQueue.run();
        };
        PosInitializer.prototype._onCheckpoint = function (args) {
            var _this = this;
            var onCheckpointQueue = new Commerce.AsyncQueue();
            onCheckpointQueue.enqueue(function () {
                return _super.prototype._onCheckpoint.call(_this, args);
            }).enqueue(function () {
                var options = {};
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.ApplicationSuspend, options).recoverOnFailure(function () {
                    return Commerce.VoidAsyncResult.createResolved();
                });
            });
            return onCheckpointQueue.run();
        };
        PosInitializer.prototype._attachLoggingSinks = function (configurationProvider) {
            var diagnosticsConfiguration = configurationProvider.getValue("Diagnostics");
            diagnosticsConfiguration = diagnosticsConfiguration || { Sinks: {} };
            diagnosticsConfiguration.Sinks = diagnosticsConfiguration.Sinks || {};
            Commerce.attachLoggingSink(new Microsoft.Dynamics.Diagnostics.TypeScriptCore.DebuggingConsoleSink(diagnosticsConfiguration.Sinks.DebuggingConsoleSink));
            var applicationType = Commerce.Host.instance.application.getApplicationType();
            if (configurationProvider.getValue("IsAppInsightsLoggingEnabled") === "true") {
                var appInsightsApplicatioName = configurationProvider.getValue("AppInsightsApplicationName");
                var appInsightsInstrumentationKey = void 0;
                var environmentId = void 0;
                if (Commerce.ApplicationHelper.isWebApplicationType(applicationType)) {
                    appInsightsInstrumentationKey = configurationProvider.getValue("AppInsightsInstrumentationKey");
                    environmentId = configurationProvider.getValue("EnvironmentId");
                    this._updateTelemetryConfigurationOnHostAsync(appInsightsInstrumentationKey, environmentId);
                }
                else {
                    var config = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.ENVIRONMENT_CONFIGURATION_KEY);
                    if (config !== null) {
                        var environmentConfiguration = JSON.parse(config);
                        appInsightsInstrumentationKey = environmentConfiguration.WindowsPhonePosAppInsightsInstrumentationKey;
                        environmentId = environmentConfiguration.EnvironmentId;
                    }
                }
                Commerce.Config.appName = appInsightsApplicatioName;
                TsLogging.LoggerBase.setTenantInfo(environmentId);
                Commerce.attachLoggingSink(new Microsoft.Dynamics.Diagnostics.TypeScriptCore.AppInsightsSink(appInsightsInstrumentationKey, appInsightsApplicatioName, diagnosticsConfiguration.Sinks.AppInsightsSink));
            }
            if (configurationProvider.getValue("IsNativeLoggingEnabled") === "true") {
                Commerce.attachLoggingSink(new Microsoft.Dynamics.Diagnostics.TypeScriptCore.WindowsLoggingRequest(diagnosticsConfiguration.Sinks.LoggingRequest));
            }
        };
        PosInitializer.prototype._initializePeripheralsAsync = function () {
            return Commerce.Peripherals.instance.initializeAsync();
        };
        PosInitializer.prototype._updateTelemetryConfigurationOnHostAsync = function (appInsightsInstrumentationKey, environmentId) {
            var request = new Commerce.Host.Messages.UpdateTelemetryOnHostRequest(Commerce.LoggerHelper.getNewCorrelationId(), environmentId, appInsightsInstrumentationKey);
            return Commerce.Runtime.executeAsync(request).then(function (response) {
                Commerce.RetailLogger.applicationTelemetryContextUpdateCompleted(JSON.stringify(response));
            }).catch(function (error) {
                Commerce.RetailLogger.applicationTelemetryContextUpdateCompleted("Call to update telemetry config failed. error: " + JSON.stringify(error));
            });
        };
        PosInitializer.prototype._setHighchartsGlobalOptions = function () {
            Highcharts.setOptions({
                global: {
                    VMLRadialGradientURL: null,
                    canvasToolsURL: null
                }
            });
        };
        PosInitializer.prototype._addConnectionStatusChangeTriggerExecutor = function () {
            var contentHost = $("#contenthost").get(0);
            Commerce.EventProxy.Instance.addCustomEventHandler(contentHost, "ConnectionStatusUpdateEvent", function (args) {
                var triggerOptions = {
                    connectionStatus: args.newStatus,
                    previousConnectionStatus: args.oldStatus
                };
                Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostConnectionStatusChange, triggerOptions);
            });
        };
        PosInitializer.prototype._navigateToStartPage = function (args) {
            args.setPromise(WinJS.UI.processAll()
                .then(function () {
                var splashScreen = document.getElementById("splashScreen");
                if (!Commerce.ObjectExtensions.isNullOrUndefined(splashScreen)) {
                    $(splashScreen).remove();
                }
                Commerce.ViewModelAdapter.navigateToLoginPage(true);
            }));
        };
        return PosInitializer;
    }(Pos.InitializerBase));
    Pos.PosInitializer = PosInitializer;
})(Pos || (Pos = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    Commerce.appBarAlwaysVisible = ko.observable(true);
    Commerce.isAppBarVisible = function () { return !Commerce.ObjectExtensions.isNullOrUndefined($("#commandAppBar").get(0)); };
    Commerce.appBarAlwaysVisible.subscribe(function (newValue) {
        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.APP_BAR_ALWAYS_VISIBLE, Commerce.StringExtensions.EMPTY + newValue);
    });
    var AppBarControl = (function () {
        function AppBarControl(element, options) {
            this._parentViewPath = Commerce.navigator.navigationLog()[Commerce.navigator.navigationLog().length - 1];
            var $element = $(element);
            $element.addClass("primaryAppBarBackground dynamicsSymbolFont");
            this.appBar = new WinJS.UI.AppBar(element, options);
            this.appBar.sticky = true;
            if (!Commerce.Config.isPhone) {
                this.appBar.closedDisplayMode = "full";
            }
            this.appBar.parentViewPath = this._parentViewPath;
            Commerce.AppBarControl.initializeAppBar(this.appBar, Commerce.appBarAlwaysVisible());
            this.applyWinJsFix($element);
            return this.appBar;
        }
        AppBarControl.initializeAppBar = function (appBar, isAlwaysVisible) {
            if (isAlwaysVisible) {
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.APP_BAR_ALWAYS_VISIBLE, "true");
                var $appBar_1 = $(appBar.element);
                $appBar_1.addClass("hideEllipsis win-appbar-shown").removeClass("win-appbar-hidden");
                appBar.hide = function () {
                    var navigationNewView = Commerce.navigator.navigationLog()[Commerce.navigator.navigationLog().length - 1];
                    if (this.parentViewPath !== navigationNewView) {
                        $appBar_1.removeClass("win-appbar-shown").addClass("win-appbar-hidden");
                    }
                };
                appBar.show = function () {
                    $appBar_1.addClass("hideEllipsis win-appbar-shown").removeClass("win-appbar-hidden");
                };
            }
        };
        AppBarControl.prototype.applyWinJsFix = function ($element) {
            var $form = $element.parents("form");
            if ($form.length > 0) {
                $element.find(".win-appbar-invokebutton").each(function (index, elem) {
                    elem.type = "button";
                });
            }
        };
        return AppBarControl;
    }());
    Commerce.AppBarControl = AppBarControl;
    WinJS.Utilities.markSupportedForProcessing(AppBarControl);
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AsyncImageControlOptions = (function () {
        function AsyncImageControlOptions() {
        }
        return AsyncImageControlOptions;
    }());
    Commerce.AsyncImageControlOptions = AsyncImageControlOptions;
    var AsyncImageControl = (function () {
        function AsyncImageControl(element, options) {
            var _this = this;
            this._options = options || { offlineBinaryImageHandlerProperty: null, defaultImage: null };
            element.winControl = this;
            this._element = element;
            this._imageElement = document.createElement("img");
            this._imageElement.className = this._element.className;
            if (!Commerce.StringExtensions.isNullOrWhitespace(this._options.defaultImage)) {
                this._imageElement.src = this._options.defaultImage;
                this._imageElement.addEventListener("error", (function () {
                    Commerce.BindingHandlers.SetDefaultImageOnError(_this._imageElement, _this._options.defaultImage);
                }).bind(this));
            }
            else {
                Commerce.RetailLogger.viewsAsyncImageControlInvalidDefaultImage();
            }
            this._element.appendChild(this._imageElement);
            return this;
        }
        Object.defineProperty(AsyncImageControl.prototype, "data", {
            set: function (data) {
                this._data = data;
                this.setImage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AsyncImageControl.prototype, "onlineImage", {
            set: function (image) {
                this._onlineImage = image;
                this.setImage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AsyncImageControl.prototype, "alt", {
            set: function (alt) {
                this._imageElement.alt = alt;
            },
            enumerable: true,
            configurable: true
        });
        AsyncImageControl.prototype.setImage = function () {
            var _this = this;
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onlineImage)) {
                    this._imageElement.src = Commerce.Formatters.ImageUrlFormatter(this._onlineImage);
                }
            }
            else {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._data) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this._options.offlineBinaryImageHandlerProperty)) {
                    var imageHandler = this._data[this._options.offlineBinaryImageHandlerProperty];
                    if (Commerce.ObjectExtensions.isFunction(imageHandler)) {
                        imageHandler(this._data).done(function (imageSource) {
                            if (!Commerce.StringExtensions.isNullOrWhitespace(imageSource)) {
                                _this._imageElement.src = Commerce.Formatters.ImageBinaryFormatter(imageSource);
                            }
                        });
                    }
                }
            }
        };
        return AsyncImageControl;
    }());
    Commerce.AsyncImageControl = AsyncImageControl;
    WinJS.Utilities.markSupportedForProcessing(AsyncImageControl);
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AxBubbleAttr = (function () {
            function AxBubbleAttr() {
            }
            AxBubbleAttr.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.utils.unwrapObservable(valueAccessor()) || Commerce.StringExtensions.EMPTY;
                element.setAttribute(Commerce.BubbleHelper.DATA_AX_BUBBLE_ATTRIBUTE, Commerce.EscapingHelper.escapeHtmlAttribute(value));
                var $element = $(element);
                if ($element.hasClass("win-datepicker") && !Commerce.StringExtensions.isNullOrWhitespace(value)) {
                    AxBubbleAttr.addAttributesToDatePicker($element, value);
                    var mutationObserver = new MutationObserver(function () { AxBubbleAttr.addAttributesToDatePicker($element, value); });
                    var observerConfig = { childList: true };
                    mutationObserver.observe(element, observerConfig);
                }
            };
            AxBubbleAttr.addAttributesToDatePicker = function ($element, prefix) {
                Commerce.BubbleHelper.formatAttribute($element.find(".win-datepicker-month"), "{0}_month", prefix);
                Commerce.BubbleHelper.formatAttribute($element.find(".win-datepicker-date"), "{0}_date", prefix);
                Commerce.BubbleHelper.formatAttribute($element.find(".win-datepicker-year"), "{0}_year", prefix);
            };
            return AxBubbleAttr;
        }());
        ko.bindingHandlers.axBubbleAttr = new AxBubbleAttr();
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ClearMarkToggleStatus;
        (function (ClearMarkToggleStatus) {
            ClearMarkToggleStatus[ClearMarkToggleStatus["Unknown"] = 0] = "Unknown";
            ClearMarkToggleStatus[ClearMarkToggleStatus["Hidden"] = 1] = "Hidden";
            ClearMarkToggleStatus[ClearMarkToggleStatus["Shown"] = 2] = "Shown";
        })(ClearMarkToggleStatus || (ClearMarkToggleStatus = {}));
        var ClearMark = (function () {
            function ClearMark() {
            }
            ClearMark.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);
                var clearMarkValue = valueAccessor();
                var fontSize = clearMarkValue.fontSize || $element.css(ClearMark.fontSizeClass);
                var originalPadding = $element.css(ClearMark.paddingRightClass);
                var $wrapper = $(ClearMark.divElement, {
                    "class": ClearMark.wrapperCssClass
                });
                $element.wrap($wrapper);
                var $clearMark = $(ClearMark.divElement)
                    .addClass("iconCancel")
                    .addClass(ClearMark.clearMarkCssClass)
                    .css(ClearMark.fontSizeClass, fontSize)
                    .css(ClearMark.topClass, "calc(50% - " + (parseInt(fontSize, 10) / 2) + "px)")
                    .hide()
                    .appendTo($element.parent());
                $element.on("input change ax-retail-clearMark-toggle", function () {
                    ClearMark.toggleClearMark($element, $clearMark, fontSize, originalPadding);
                });
                $clearMark.on("click", function (clickEvent) {
                    var handler = clearMarkValue.handler;
                    if (Commerce.ObjectExtensions.isFunction(handler)) {
                        handler();
                    }
                    else {
                        $element.val(Commerce.StringExtensions.EMPTY).trigger("change");
                    }
                    $element.focus();
                    clickEvent.stopPropagation();
                });
                ClearMark.toggleClearMark($element, $clearMark, fontSize, originalPadding);
            };
            ClearMark.toggleClearMark = function ($element, $clearMark, fontSize, originalPadding) {
                var currentClearMarkVisibility = $clearMark.data(ClearMark.clearMarkToggleStatusKey);
                var hasValue = $element.val() && $element.val().length > 0;
                if (hasValue && currentClearMarkVisibility !== ClearMarkToggleStatus.Shown) {
                    ClearMark.show($element, $clearMark, fontSize);
                }
                else if (!hasValue && currentClearMarkVisibility !== ClearMarkToggleStatus.Hidden) {
                    ClearMark.hide($element, $clearMark, originalPadding);
                }
            };
            ClearMark.show = function ($element, $clearMark, fontSize) {
                var em = parseFloat($("body").css(ClearMark.fontSizeClass));
                var additionalPadding = 5;
                $element.css(ClearMark.paddingRightClass, "");
                $element.css(ClearMark.paddingLeftClass, "");
                var fontPadding = parseInt(fontSize, null);
                var elementPadding = em + ClearMark.markShift + fontPadding + additionalPadding;
                var paddingClass = !Commerce.CSSHelpers.isRightToLeft() ? ClearMark.paddingRightClass : ClearMark.paddingLeftClass;
                $element.css(paddingClass, elementPadding + "px");
                $clearMark.show();
                $clearMark.data(ClearMark.clearMarkToggleStatusKey, ClearMarkToggleStatus.Shown);
            };
            ClearMark.hide = function ($element, $clearMark, originalPadding) {
                $element.css(ClearMark.paddingRightClass, originalPadding);
                $element.css(ClearMark.paddingLeftClass, originalPadding);
                $clearMark.hide();
                $clearMark.data(ClearMark.clearMarkToggleStatusKey, ClearMarkToggleStatus.Hidden);
            };
            ClearMark.markShift = 5;
            ClearMark.paddingLeftClass = "padding-left";
            ClearMark.paddingRightClass = "padding-right";
            ClearMark.fontSizeClass = "font-size";
            ClearMark.topClass = "top";
            ClearMark.wrapperCssClass = "search-wrapper";
            ClearMark.clearMarkCssClass = "clear-mark";
            ClearMark.divElement = "<div />";
            ClearMark.clearMarkToggleStatusKey = "clearMarkToggleStatusDataKey";
            return ClearMark;
        }());
        ko.bindingHandlers.clearMark = ClearMark;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.customControlInternal = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var descendantBindingContext = $(element.parentElement).attr("descendantBindingContextApplied");
        var FLAG_VALUE = "true";
        if (descendantBindingContext !== FLAG_VALUE) {
            $(element.parentElement).attr("descendantBindingContextApplied", FLAG_VALUE);
            ko.applyBindingsToDescendants(bindingContext, element);
        }
        return { controlsDescendantBindings: true };
    }
};
var _this = this;
ko.bindingHandlers.customerCard = (function () {
    function render(customer, data, templateName, templateElement) {
        data.customerPrimaryAddress(Commerce.ArrayExtensions.firstOrUndefined(customer.Addresses, function (address) {
            return address.IsPrimary;
        }));
        data.customerInvoiceAddress(Commerce.ArrayExtensions.firstOrUndefined(customer.Addresses, function (address) {
            return Commerce.Client.Entities.ExtensibleAddressType.Invoice.equals(address.AddressTypeValue);
        }));
        if ((templateName === "customerPrimaryAddressCardTemplate"
            && Commerce.ObjectExtensions.isNullOrUndefined(data.customerPrimaryAddress()))
            || (templateName === "customerInvoiceAddressCardTemplate"
                && Commerce.ObjectExtensions.isNullOrUndefined(data.customerInvoiceAddress()))) {
            templateName = "customerAddAddressCardTemplate";
        }
        var templateData = ko.observable(data);
        ko.applyBindingsToNode(templateElement, {
            template: { name: templateName, data: templateData }
        });
    }
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var templateElement = element;
            var data = value.data;
            var templateName = value.template;
            if (Commerce.ObjectExtensions.isNullOrUndefined(data)) {
                Commerce.RetailLogger.viewsControlsKnockoutCustomerCardDataPropertyRequired();
                return { controlsDescendantBindings: true };
            }
            var $element = $(element);
            if (templateName === "customerDetailsCardTemplate"
                || templateName === "customerContactCardTemplate") {
                var layoutData = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(data.layoutData)) {
                    layoutData = data.layoutData;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(value.layoutData)) {
                    layoutData = value.layoutData;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(layoutData)) {
                    $element.attr("layoutData", "");
                    $element.data("layoutData", layoutData);
                }
            }
            var customer = ko.utils.unwrapObservable(data.customer);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                render(customer, data, templateName, templateElement);
            }
            if (ko.isObservable(data.customer)) {
                data.customer.subscribe(function (updatedCustomer) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(updatedCustomer)
                        && !Commerce.StringExtensions.isNullOrWhitespace(updatedCustomer.Name)) {
                        render(updatedCustomer, data, templateName, templateElement);
                    }
                }, _this);
            }
            return { controlsDescendantBindings: true };
        }
    };
})();
ko.bindingHandlers.customerLoyaltyCard = (function () {
    function render(viewModel, loyaltyCardDataArray, $element) {
        var loyaltyCardCount = Commerce.ArrayExtensions.hasElements(loyaltyCardDataArray) ?
            loyaltyCardDataArray.filter(function (card) { return card.CardTenderTypeValue !== Commerce.Proxy.Entities.LoyaltyCardTenderType.Blocked; }).length : 0;
        var loyaltyCardActionLabel;
        if (!viewModel.isLoyaltyCardDataReadOnly()) {
            var loyaltyCardIdOnCart_1 = Commerce.Session.instance ?
                (Commerce.Session.instance.cart ? Commerce.Session.instance.cart.LoyaltyCardId : null)
                : null;
            $element.unbind("click");
            if (loyaltyCardCount > 1) {
                loyaltyCardActionLabel = Commerce.ViewModelAdapter.getResourceString("string_3269");
                if (!Commerce.ObjectExtensions.isNullOrUndefined(viewModel.chooseCardClick) && typeof (viewModel.chooseCardClick) === "function") {
                    $element
                        .click(function () {
                        viewModel.chooseCardClick(loyaltyCardIdOnCart_1);
                    });
                    viewModel.isLoyaltyCardLabelActionable(true);
                }
                else {
                    viewModel.isLoyaltyCardLabelActionable(false);
                }
            }
            else if (loyaltyCardCount === 0 && Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardIdOnCart_1)) {
                loyaltyCardActionLabel = Commerce.ViewModelAdapter.getResourceString("string_3264");
                $element
                    .click(function () {
                    viewModel.issueLoyaltyCardAsync();
                });
                viewModel.isLoyaltyCardLabelActionable(true);
            }
            else {
                viewModel.isLoyaltyCardLabelActionable(false);
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardIdOnCart_1)) {
                viewModel.customerLoyaltyCardLabel(loyaltyCardIdOnCart_1);
            }
            else {
                viewModel.customerLoyaltyCardLabel(loyaltyCardActionLabel);
            }
        }
        else {
            var labelResourceString = loyaltyCardCount === 1 ?
                Commerce.ViewModelAdapter.getResourceString("string_3263") :
                Commerce.ViewModelAdapter.getResourceString("string_3268");
            viewModel.customerLoyaltyCardLabel(Commerce.StringExtensions.format(labelResourceString, loyaltyCardCount));
            viewModel.isLoyaltyCardLabelActionable(false);
        }
    }
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var data = value.data;
            var $element = $(element);
            render(data, data.customerLoyaltyCards(), $element);
        },
        update: function (element, valueAccessor) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var data = value.data;
            var $element = $(element);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(data) &&
                !Commerce.ObjectExtensions.isNullOrUndefined(data.customerLoyaltyCards)) {
                render(data, data.customerLoyaltyCards(), $element);
            }
        }
    };
})();
ko.bindingHandlers.customerTillLayoutCard = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = valueAccessor();
        var $container;
        var render = function () {
            if (Commerce.ObjectExtensions.isNullOrUndefined($container)) {
                $container = $("<div />");
                $(element).append($container);
            }
            value.data.layoutData = Commerce.ApplicationContext.Instance.tillLayoutProxy
                .getLayoutItem(value.screenName, value.panelName);
            ko.cleanNode($container[0]);
            ko.applyBindingsToNode($container[0], {
                customerCard: {
                    template: "customerDetailsCardTemplate",
                    data: value.data
                }
            }, viewModel);
        };
        render();
        Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, render);
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.datePicker = new Commerce.Controls.DatePicker.DatePickerBindingHandler();
ko.bindingHandlers.enableAll = {
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var enabled = ko.utils.unwrapObservable(valueAccessor());
        ko.bindingHandlers.enable.update(element, function () { return enabled; });
        var elements = element.getElementsByTagName("input");
        for (var i = 0; i < elements.length; i++) {
            ko.bindingHandlers.enable.update(elements.item(i), function () { return enabled; });
        }
    }
};
ko.bindingHandlers.enterKeyPress = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        ko.utils.registerEventHandler(element, "keypress", function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                event.stopImmediatePropagation();
                ko.utils.triggerEvent(element, "change");
                valueAccessor().call(viewModel);
            }
        });
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.fadeVisible = {
    update: function (element, valueAccessor, allBindingsAccessor) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
            throw new Error("Invalid options passed to the fadeVisible control: options cannot be null or undefined.");
        }
        else if (!Commerce.ObjectExtensions.isBoolean(options.isShowed)) {
            throw new Error("Invalid options passed to the fadeVisible control: isShowed should be a boolean value.");
        }
        if (options.isShowed) {
            $(element).fadeIn(300);
        }
        else {
            $(element).hide();
        }
    }
};
ko.bindingHandlers.flyout = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        if (Commerce.ObjectExtensions.isNullOrUndefined(value.anchor)) {
            throw new Error("The parameter anchor must be defined");
        }
        if (Commerce.ObjectExtensions.isNullOrUndefined(value.placement)) {
            value.placement = "auto";
        }
        if (Commerce.ObjectExtensions.isNullOrUndefined(value.alignment)) {
            value.alignment = "center";
        }
        if (!Commerce.ObjectExtensions.isNullOrUndefined(value.onAfterShowEvent)) {
            element.winControl.onaftershow = function (event) { return (value.onAfterShowEvent.call(viewModel, event)); };
        }
        if ((value.alignment === "right" || value.alignment === "left") && Commerce.CSSHelpers.isRightToLeft()) {
            value.alignment = (value.alignment === "right") ? "left" : "right";
        }
        var toggleShowHide = function () {
            if (element.winControl.hidden) {
                var dynamicPlacement = $(value.anchor)[0].offsetTop > $("body").height() / 2 ? "top" : "bottom";
                element.winControl.show($(value.anchor)[0], dynamicPlacement, value.alignment);
            }
            else {
                element.winControl.hide();
            }
        };
        if (!Commerce.ObjectExtensions.isNullOrUndefined(value.toggleShowHide)) {
            value.toggleShowHide(toggleShowHide);
        }
        var showFlyout = function () { if (element.winControl.hidden) {
            toggleShowHide();
        } };
        if (!Commerce.ObjectExtensions.isNullOrUndefined(value.show)) {
            value.show(showFlyout);
        }
        var hideFlyout = function () { if (!element.winControl.hidden) {
            toggleShowHide();
        } };
        if (!Commerce.ObjectExtensions.isNullOrUndefined(value.hide)) {
            value.hide(hideFlyout);
        }
        if (!Commerce.ObjectExtensions.isNullOrUndefined(value.sticky)) {
            var observableMember = value.sticky;
            var memberValue = ko.utils.unwrapObservable(observableMember);
            if (typeof memberValue === "boolean") {
                element.winControl._sticky = memberValue;
                if (observableMember.subscribe) {
                    observableMember.subscribe(function (newValue) {
                        element.winControl._sticky = newValue;
                    });
                }
            }
        }
        element.winControl.addEventListener("beforeshow", function (event) {
            var listViewElements = element.querySelectorAll(".win-listview");
            for (var i = 0; i < listViewElements.length; i++) {
                listViewElements.item(i).winControl.recalculateItemPosition();
            }
        });
        element.winControl.addEventListener("afterhide", function (event) {
            $(value.anchor).attr("aria-expanded", "false");
        });
        element.winControl.addEventListener("aftershow", function (event) {
            $(value.anchor).attr("aria-expanded", "true");
        });
        ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
            if (element.winControl) {
                element.winControl.dispose();
            }
        });
    }
};
ko.bindingHandlers.formatPrice = {
    update: function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (!Commerce.ObjectExtensions.isNumber(value)) {
            value = 0;
        }
        element.innerText = Commerce.NumberExtensions.formatCurrency(value);
    }
};
ko.bindingHandlers.formatPriceOrEmpty = {
    update: function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (!Commerce.ObjectExtensions.isNumber(value)) {
            element.innerText = Commerce.StringExtensions.EMPTY;
        }
        else {
            element.innerText = Commerce.NumberExtensions.formatCurrency(value);
        }
    }
};
ko.bindingHandlers.hasfocus.update = function (element, valueAccessor) {
    var value = ko.utils.unwrapObservable(valueAccessor());
    window.setTimeout(function () {
        if (value
            && element.offsetWidth && element.offsetHeight
            && document.activeElement !== element) {
            element.focus();
        }
    });
};
ko.bindingHandlers.image = (function () {
    "use strict";
    return {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            $(element).on("error", function () {
                var value = valueAccessor(), defaultSrc = value.defaultSrc;
                Commerce.BindingHandlers.SetDefaultImageOnError(element, defaultSrc);
            });
        },
        update: function (element, valueAccessor) {
            var value = valueAccessor(), src = value.src, alt = value.alt, defaultSrc = value.defaultSrc;
            if (!Commerce.StringExtensions.isNullOrWhitespace(src)) {
                $(element).attr("src", src);
            }
            else {
                $(element).attr("src", defaultSrc);
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(alt)) {
                $(element).attr("alt", alt);
            }
        }
    };
})();
var Commerce;
(function (Commerce) {
    "use strict";
    var InteractionData = (function () {
        function InteractionData() {
        }
        return InteractionData;
    }());
    Commerce.InteractionData = InteractionData;
    var InteractionEvents = (function () {
        function InteractionEvents() {
        }
        InteractionEvents.VIEWSHOWN = "viewShown";
        InteractionEvents.VIEWUNLOAD = "viewUnload";
        InteractionEvents.ROWSELECTEDEVENT = "rowSelected";
        InteractionEvents.ROWCLICKEDEVENT = "rowClicked";
        InteractionEvents.NUMPADENTER = "numpadEnter";
        InteractionEvents.BUTTONGRIDBUTTONCLICKED = "buttonGridButtonClicked";
        return InteractionEvents;
    }());
    Commerce.InteractionEvents = InteractionEvents;
    var Interaction = (function () {
        function Interaction(element, options) {
            var _this = this;
            this._supportedEvents = [];
            this._currentEventName = "";
            if (Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                throw "'element' is required parameter for Interaction class.";
            }
            this._$element = $(element);
            this._$element.addClass(Interaction._interactionElementMarker);
            this._$element.data(Interaction._interactionElementMarker, this);
            this._$pageElement = this._$element.closest(".pagecontrol");
            if (this._$pageElement.length < 1) {
                throw "Unable to locate view control. This element is required to narrow down search area.";
            }
            for (var key in InteractionEvents) {
                if (key) {
                    this._supportedEvents.push(InteractionEvents[key]);
                }
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                $.each(options, function (key, value) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(key) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                        throw "One or more items in 'options' is missing eventName or activity for Interaction class.";
                    }
                    _this.on(key).setActivityData(value);
                });
            }
            ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                _this.dispose();
            });
        }
        Interaction.triggerEvent = function (element, eventName) {
            var interactionObject = Interaction.getInteractionObject(element);
            if (Commerce.ObjectExtensions.isNullOrUndefined(interactionObject)) {
                return Interaction.raiseEvent(element, eventName);
            }
            interactionObject.triggerEvent(eventName);
        };
        Interaction.prototype.dispose = function () {
            this._$element
                .off()
                .removeData(Interaction._interactionElementMarker);
        };
        Interaction.prototype.on = function (eventName, callback) {
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName)) {
                throw "Parameter 'eventName' cannot be empty in Interaction.on method.";
            }
            if (this._supportedEvents.indexOf(eventName) < 0) {
                this._supportedEvents.push(eventName);
            }
            this._currentEventName = eventName;
            if (Commerce.ObjectExtensions.isFunction) {
                this._$element.on(this._currentEventName, callback);
            }
            return this;
        };
        Interaction.prototype.triggerEvent = function (eventName) {
            this.validateEventName(eventName);
            this._$element.trigger(eventName);
        };
        Interaction.prototype.setActivityData = function (interactionActivityData) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(interactionActivityData)) {
                for (var key in interactionActivityData) {
                    if (key) {
                        this[key](interactionActivityData[key]);
                    }
                }
            }
            return this;
        };
        Interaction.prototype.show = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.show method.";
            }
            this.jQuery({
                method: "show",
                selector: elementSelector
            });
            return this;
        };
        Interaction.prototype.hide = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.hide method.";
            }
            this.jQuery({
                method: "hide",
                selector: elementSelector
            });
            return this;
        };
        Interaction.prototype.toggle = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.toggle method.";
            }
            this.jQuery({
                method: "toggle",
                selector: elementSelector
            });
            return this;
        };
        Interaction.prototype.focus = function (elementSelector) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.focus method.";
            }
            this._$element.on(this._currentEventName, function () {
                setTimeout(function () {
                    _this._$pageElement.find(elementSelector).focus();
                }, 500);
            });
            return this;
        };
        Interaction.prototype.navigate = function (viewName) {
            if (Commerce.StringExtensions.isNullOrWhitespace(viewName)) {
                throw "'viewName' is a required parameter for Interaction.navigate method.";
            }
            this._$element.on(this._currentEventName, function () {
                if (!Commerce.ViewModelAdapter.isInView(viewName)) {
                    Commerce.ViewModelAdapter.navigate(viewName);
                }
            });
            return this;
        };
        Interaction.prototype.click = function (elementSelector) {
            if (Commerce.StringExtensions.isNullOrWhitespace(elementSelector)) {
                throw "'elementSelector' is a required parameter for Interaction.click method.";
            }
            this.jQuery({
                method: "click",
                selector: elementSelector
            });
            return this;
        };
        Interaction.prototype.selectPivot = function (elementSelector) {
            var _this = this;
            this._$element.on(this._currentEventName, function () {
                var $targetElement = _this._$pageElement.find(elementSelector);
                var pivotItemElement = $targetElement.get(0);
                if (Commerce.ObjectExtensions.isNullOrUndefined(pivotItemElement) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(pivotItemElement.winControl)) {
                    throw "Unable to find PivotItem control for TargetElementInteractionActivity.selectPivot method.";
                }
                var pivotItem = pivotItemElement.winControl;
                var pivotControlElement = _this._$pageElement.find(elementSelector).closest(".win-pivot").get(0);
                if (Commerce.ObjectExtensions.isNullOrUndefined(pivotControlElement) ||
                    Commerce.ObjectExtensions.isNullOrUndefined(pivotControlElement.winControl)) {
                    throw "Unable to find Pivot control for TargetElementInteractionActivity.selectPivot method.";
                }
                var pivotControl = pivotControlElement.winControl;
                if (pivotControl.selectedItem !== pivotItem) {
                    pivotControl.selectedItem = pivotItem;
                }
            });
            return this;
        };
        Interaction.prototype.raiseEvent = function (eventName) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName)) {
                throw "'eventName' is a required parameter for Interaction.raiseEvent method.";
            }
            this._$element.on(this._currentEventName, function () {
                Interaction.raiseEvent(_this._$element.get(0).parentElement, eventName);
            });
            return this;
        };
        Interaction.prototype.jQuery = function (activitySettings) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(activitySettings)) {
                throw "'activitySettings' is a required parameter for Interaction.jQuery method.";
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(activitySettings.method) ||
                Commerce.StringExtensions.isNullOrWhitespace(activitySettings.selector)) {
                throw "'selector' and 'method' are required in 'activitySettings' parameter for Interaction.jQuery method.";
            }
            this._$element.on(this._currentEventName, function () {
                var selectedActivityElement = _this._$pageElement.find(activitySettings.selector);
                if (selectedActivityElement.length < 1) {
                    return;
                }
                var activityMethod = selectedActivityElement[activitySettings.method];
                if (Commerce.ObjectExtensions.isFunction(activityMethod)) {
                    activityMethod.apply(selectedActivityElement, activitySettings.param);
                }
            });
            return this;
        };
        Interaction.raiseEvent = function (element, eventName) {
            var interactionObject = Interaction.getClosestParentInteractionObject(element);
            if (Commerce.ObjectExtensions.isNullOrUndefined(interactionObject)) {
                return;
            }
            interactionObject.triggerEvent(eventName);
        };
        Interaction.getInteractionObject = function (element) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                return $(element).data(Interaction._interactionElementMarker);
            }
            return null;
        };
        Interaction.getClosestParentInteractionObject = function (element) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                return $(element.parentElement).closest("." + Interaction._interactionElementMarker).data(Interaction._interactionElementMarker);
            }
            return null;
        };
        Interaction.prototype.validateEventName = function (eventName) {
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName) ||
                this._supportedEvents.indexOf(eventName) < 0) {
                throw "'" + eventName + "' event name is not supported by Interaction class.";
            }
        };
        Interaction._interactionElementMarker = "interactionElement";
        return Interaction;
    }());
    Commerce.Interaction = Interaction;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.interaction = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || null;
        if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
            throw "Interaction options are required parameters for ko.bindingHandlers.interaction class.";
        }
        new Commerce.Interaction(element, options);
    }
};
ko.bindingHandlers.invoke = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var methodToInvoke = ko.utils.unwrapObservable(valueAccessor());
        var tagName = element.tagName;
        if (tagName === "a" || tagName === "button" || tagName === "area"
            || tagName === "select" || tagName === "textArea" || tagName === "object") {
            throw "Invoke binding doesn't support element " + tagName;
        }
        if (typeof (methodToInvoke) !== "function") {
            throw "Invoke binding value must be a function";
        }
        var parent = element.parentElement;
        var wrapper = document.createElement("div");
        parent.replaceChild(wrapper, element);
        wrapper.appendChild(element);
        var itemContainer = new WinJS.UI.ItemContainer(wrapper, null);
        itemContainer.selectionDisabled = true;
        itemContainer.tapBehavior = WinJS.UI.TapBehavior.invokeOnly;
        var item = $(wrapper).find(".win-itembox");
        item.css("background-color", "transparent");
        itemContainer.addEventListener("invoked", WinJS.Utilities.markSupportedForProcessing(methodToInvoke));
        ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
            if (wrapper.winControl) {
                wrapper.winControl.dispose();
            }
        });
    }
};
var Commerce;
(function (Commerce) {
    var InvokeButton;
    (function (InvokeButton) {
        "use strict";
    })(InvokeButton = Commerce.InvokeButton || (Commerce.InvokeButton = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.invokeButton = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var itemContainerOptions = {
            swipeBehavior: WinJS.UI.SwipeBehavior.none
        };
        var itemContainer = new WinJS.UI.ItemContainer(element, itemContainerOptions);
        if (Commerce.ObjectExtensions.isFunction(options.itemInvoked)) {
            var itemInvokeHandler = function (eventArgs) {
                options.itemInvoked.call(viewModel, { currentTarget: eventArgs.currentTarget, data: options.data });
            };
            itemContainer.addEventListener("invoked", WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler));
        }
        ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
            if (element.winControl) {
                element.winControl.dispose();
            }
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.invokeButtonList = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var afterForeachRender = function (elements, elementBindingContext) {
            if (Commerce.ArrayExtensions.hasElements(elements)) {
                elements.forEach(function (invokeButtonElement) {
                    if (invokeButtonElement.nodeType === 1) {
                        var invokeButtonOptions = {
                            itemInvoked: options.itemInvoked,
                            data: elementBindingContext
                        };
                        invokeButtonOptions.data = elementBindingContext;
                        ko.applyBindingsToNode(invokeButtonElement, { invokeButton: invokeButtonOptions });
                    }
                });
            }
        };
        var template = {
            name: options.template,
            foreach: options.data,
            afterRender: afterForeachRender
        };
        ko.applyBindingsToNode(element, { template: template });
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var InvokeValidate = (function () {
            function InvokeValidate() {
            }
            InvokeValidate.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);
                var methodToInvoke = ko.utils.unwrapObservable(valueAccessor());
                if (typeof methodToInvoke !== "function") {
                    throw "invokeValidate binding value must be a function.";
                }
                var $formElementQuery = $(element).parents("form").first();
                if ($formElementQuery.length < 1) {
                    throw "Button with invokeValidate binding must be enclosed into a form.";
                }
                var clickHandler = function (eventObject) {
                    var $submitButton = $("<input type='submit' class='hide invokeValidateHiddenButton' />");
                    $formElementQuery.append($submitButton);
                    $submitButton.attr("type", "submit");
                    InvokeValidate.currentHandler = methodToInvoke;
                    $submitButton.click();
                    $submitButton.remove();
                    return false;
                };
                $element.click(clickHandler);
                $formElementQuery.submit(function (eventObject) {
                    if (InvokeValidate.currentHandler !== null) {
                        InvokeValidate.currentHandler.call(viewModel);
                        InvokeValidate.currentHandler = null;
                    }
                    return false;
                });
            };
            InvokeValidate.currentHandler = null;
            return InvokeValidate;
        }());
        Controls.InvokeValidate = InvokeValidate;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.invokeValidate = new Commerce.Controls.InvokeValidate();
ko.bindingHandlers.navBarKeyboardSupport = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        ko.utils.registerEventHandler(element, "keydown", function (event) {
            valueAccessor().keyValues.forEach(function (value) {
                if (event.keyCode === value && $(element).is(":focus")) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    ko.utils.triggerEvent(element, "change");
                    valueAccessor().handler.call(viewModel);
                }
            });
        });
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    ko.bindingHandlers.preventInteraction = new Commerce.Controls.PreventInteraction.PreventInteractionBindingHandler();
})(Commerce || (Commerce = {}));
ko.bindingHandlers.resx = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var _this = this;
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        Object.keys(value).forEach(function (memberName) {
            switch (memberName) {
                case "textContent":
                    var textContent = value[memberName];
                    if (ko.isObservable(value[memberName])) {
                        textContent = ko.utils.unwrapObservable(value[memberName]);
                        value[memberName].subscribe(function (updatedTextContent) {
                            setTextContent(Commerce.ViewModelAdapterWinJS.getResourceString(updatedTextContent));
                        }, _this);
                    }
                    setTextContent(Commerce.ViewModelAdapterWinJS.getResourceString(textContent));
                    break;
                case "textWithTooltip":
                    var memberValue = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                    setTextContent(memberValue);
                    element.setAttribute("title", memberValue);
                    break;
                case "attribute":
                    var memberAttributes_1 = ko.utils.unwrapObservable(value[memberName]);
                    Object.keys(memberAttributes_1).forEach(function (memberAttributeName) {
                        element.setAttribute(memberAttributeName, Commerce.ViewModelAdapterWinJS.getResourceString(memberAttributes_1[memberAttributeName]));
                    });
                    break;
                case "label":
                    {
                        var memberValue_1 = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                        element.winControl.label = memberValue_1;
                        setDefaultTooltip(memberValue_1);
                    }
                    break;
                case "labelOn":
                    element.winControl.labelOn = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                    break;
                case "labelOff":
                    element.winControl.labelOff = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                    break;
                case "title":
                    {
                        var memberValue_2 = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                        element.winControl.title = memberValue_2;
                        setDefaultTooltip(memberValue_2);
                    }
                    break;
                case "tooltip":
                    element.winControl.tooltip = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                    break;
                case "ariaLabel":
                    var areaLabel = value[memberName];
                    if (ko.isObservable(value[memberName])) {
                        areaLabel = ko.utils.unwrapObservable(value[memberName]);
                        value[memberName].subscribe(function (updatedAreaLabel) {
                            element.setAttribute("aria-label", Commerce.ViewModelAdapterWinJS.getResourceString(updatedAreaLabel));
                        }, _this);
                    }
                    element.setAttribute("aria-label", Commerce.ViewModelAdapterWinJS.getResourceString(areaLabel));
                    break;
            }
        });
        function setDefaultTooltip(memberValue) {
            if (("tooltip" in element.winControl) && !("tooltip" in value)) {
                element.winControl.tooltip = memberValue;
            }
        }
        function setTextContent(content) {
            element.textContent = content;
            if (Commerce.StringExtensions.endsWith(content, ")")) {
                var leftToRightMark = "\u200E";
                element.textContent += leftToRightMark;
            }
        }
    }
};
ko.bindingHandlers.setElementRef = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var value = valueAccessor();
        if (ko.isObservable(value)) {
            value(element);
        }
    }
};
ko.bindingHandlers.setImageOnError = {
    init: function (element, valueAccessor) {
        element.addEventListener("error", function () {
            var value = ko.utils.unwrapObservable(valueAccessor() || {});
            Commerce.BindingHandlers.SetDefaultImageOnError(element, value);
        });
    }
};
ko.bindingHandlers.showHideWithFocus = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        var observable = valueAccessor();
        var $element = $(element);
        observable.subscribe(function (newValue) {
            var slidedirection = !Commerce.CSSHelpers.isRightToLeft() ? "left" : "right";
            if (newValue) {
                $element.show("slide", { easing: "easeInOutQuint", direction: slidedirection }, "fast", function () {
                    $(element).focus();
                });
            }
            else {
                $element.hide("slide", { easing: "easeInOutQuint", direction: slidedirection }, "fast", function () {
                    $(element).blur();
                });
            }
        });
    }
};
ko.bindingHandlers.slider = {
    init: function (element, valueAccessor, allBindingsAccessor) {
        var options = allBindingsAccessor().sliderOptions || {};
        var onSlide = allBindingsAccessor().onSlide || {};
        var $element = $(element);
        var sliderRangeValue = ko.utils.unwrapObservable(valueAccessor());
        options.slide = function (event, selectedRangeValues) {
            if (Commerce.CSSHelpers.isRightToLeft()) {
                var originalMin = selectedRangeValues.values[0];
                var originalMax = selectedRangeValues.values[1];
                selectedRangeValues.values[0] = options.max - (originalMax - options.min);
                selectedRangeValues.values[1] = options.max - (originalMin - options.min);
            }
            onSlide(event, selectedRangeValues);
        };
        $element.slider(options);
        $element.slider(sliderRangeValue.slice ? "values" : "value", sliderRangeValue);
        Commerce.UI.JQueryUITouchExtensions.enableTouchEmulation($element);
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            Commerce.UI.JQueryUITouchExtensions.disableTouchEmulation($element);
        });
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.slideVisible = {
    update: function (element, valueAccessor, allBindingsAccessor) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var slideDirection = !Commerce.CSSHelpers.isRightToLeft() ? "right" : "left";
        if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
            throw new Error("Invalid options passed to the slideVisible control: options cannot be null or undefined.");
        }
        else if (!Commerce.ObjectExtensions.isBoolean(options.isShowed)) {
            throw new Error("Invalid options passed to the slideVisible control: isShowed should be a boolean value.");
        }
        if (options.isShowed) {
            $(element).show("slide", { easing: "easeInOutCirc", direction: slideDirection }, "fast");
        }
        else {
            $(element).hide("slide", { easing: "easeInOutCirc", direction: slideDirection }, "fast");
        }
    }
};
ko.bindingHandlers.textAndTooltip = {
    init: function (element, valueAccessor) {
        setTextAndTooltip(element, valueAccessor);
    },
    update: function (element, valueAccessor) {
        setTextAndTooltip(element, valueAccessor);
    }
};
function setTextAndTooltip(element, valueAccessor) {
    var text = valueAccessor().toString();
    element.innerText = text;
    element.setAttribute("title", text);
}
ko.bindingHandlers.timePicker = new Commerce.Controls.TimePicker.TimePickerBindingHandler();
ko.bindingHandlers.timestamp = {
    update: function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || new Date();
        element.innerText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1146"), Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE).format(value), Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_TIME).format(value));
    }
};
ko.bindingHandlers.toggleClass = {
    init: function (element, valueAccessor, allBindingsAccessor) {
        var value = valueAccessor();
        var className = allBindingsAccessor().bindingOptions.className || "";
        var updateCount = allBindingsAccessor().bindingOptions.updateCount || null;
        value.subscribe(function (newValue) {
            $(element).fadeOut("fast", "easeInOutExpo", function () {
                updateCount();
                $(element).addClass(className).fadeIn("slow", "easeInOutExpo", function () {
                    $(element).removeClass(className);
                });
            });
        });
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var UserControlBindingHandler = (function () {
        function UserControlBindingHandler() {
        }
        UserControlBindingHandler.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor() || {});
            var uri = value.uri;
            var options = value.options || {};
            var pageControl = WinJS.UI.Pages.get(uri);
            var viewControllerType = pageControl.prototype._viewControllerType;
            var control;
            if (viewControllerType && Commerce.ObjectExtensions.isOfType(viewControllerType.prototype, Commerce.Controls.UserControl)) {
                control = new viewControllerType(options);
                if (bindingContext.$data && options.controlHandle) {
                    bindingContext.$data[options.controlHandle] = control;
                }
                element.appendChild(control.element);
                control.render();
            }
            else {
                Commerce.Host.instance.timers.setImmediate(function () {
                    WinJS.UI.Pages.render(uri, element.children[0], options);
                });
            }
            return { controlsDescendantBindings: true };
        };
        return UserControlBindingHandler;
    }());
    Commerce.UserControlBindingHandler = UserControlBindingHandler;
    ko.bindingHandlers.userControl = Commerce.UserControlBindingHandler;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.validator = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var binding = ko.utils.unwrapObservable(valueAccessor()) || {};
        if (!Commerce.StringExtensions.isNullOrWhitespace(binding.field)) {
            var valueObject = binding.data ? binding.data[binding.field] : bindingContext.$data[binding.field];
            if (Commerce.ObjectExtensions.isNullOrUndefined(valueObject)) {
                throw "Unable to get '"
                    + binding.field
                    + "' property. Make sure that validator binding has either data attribute provided or has proper context.";
            }
            ko.applyBindingsToNode(element, { value: valueObject, valueUpdate: "afterkeydown" });
        }
        if (Commerce.ObjectExtensions.isNullOrUndefined(binding.validatorType)) {
            throw "validatorType attribute is not provided for validator binding.";
        }
        var validator = Object.create(Commerce.Proxy.Entities[binding.validatorType].prototype);
        validator.constructor.apply(validator);
        var field = binding.validatorField ? binding.validatorField : binding.field;
        validator.setValidationAttributes(element, field);
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.winControl = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        Commerce.Host.instance.timers.setImmediate(function () {
            var value = ko.utils.unwrapObservable(valueAccessor() || {});
            var _loop_1 = function (memberName) {
                if (typeof memberName === "string") {
                    var observableMember = value[memberName];
                    var memberValue_3 = ko.utils.unwrapObservable(observableMember);
                    switch (memberName) {
                        case "incrementalDataSource":
                            Commerce.ViewModelAdapterWinJS.createIncrementalDataSourceAdapter(element.winControl, memberValue_3.dataManager, memberValue_3.callerMethod, memberValue_3.pageSize, memberValue_3.afterLoadComplete, memberValue_3.onLoading, memberValue_3.autoSelectFirstItem, memberValue_3.autoFocusFirstItem, memberValue_3.selectInvokedItem, memberValue_3.pageLoadCallBack, memberValue_3.reloadCallBack, memberValue_3.updateItemCallBack, memberValue_3.pageLoadCompleteCallBackFunction, memberValue_3.autoFocusDelayInMilliseconds);
                            break;
                        case "itemDataSource":
                            var listDataSource_1 = new WinJS.Binding.List(memberValue_3);
                            if (observableMember.subscribe) {
                                observableMember.subscribe(function (newValue) {
                                    WinJS.Promise.timeout().then(function () {
                                        listDataSource_1.splice(0, listDataSource_1.length);
                                        if (Commerce.ArrayExtensions.hasElements(newValue)) {
                                            newValue.forEach(function (value) { listDataSource_1.push(value); });
                                            if (element.winControl.autoFocusFirstItem) {
                                                Commerce.ViewModelAdapterWinJS.setFocusInWinControl(element.winControl);
                                            }
                                        }
                                    });
                                });
                            }
                            element.winControl.itemDataSource = listDataSource_1.dataSource;
                            if (listDataSource_1.length > 0
                                && element.winControl.autoFocusFirstItem) {
                                Commerce.ViewModelAdapterWinJS.setFocusInWinControl(element.winControl);
                            }
                            break;
                        case "selectListViewItem":
                            if (memberValue_3.listViewId !== "") {
                                var listViewId_1 = memberValue_3.listViewId;
                                element.winControl.addEventListener("pageselected", function (eventInfo) {
                                    var listViewControl = $(listViewId_1)[0];
                                    listViewControl.winControl.selection.clear();
                                    listViewControl.winControl.selection.add(element.winControl.currentPage);
                                    listViewControl.winControl.ensureVisible(element.winControl.currentPage);
                                });
                            }
                            break;
                        case "flipItem":
                            if (memberValue_3.flipViewId !== "") {
                                var flipViewId = memberValue_3.flipViewId;
                                var $flipElement = $(flipViewId);
                                var flipViewControl_1 = $flipElement[0].winControl;
                                element.winControl.addEventListener("selectionchanged", function () {
                                    if (element.winControl.selection.getIndices().length === 1) {
                                        flipViewControl_1.currentPage = element.winControl.selection.getIndices()[0];
                                    }
                                });
                                $flipElement.find("div[class='win-surface'][tabindex='-1']").addClass("focusOutline");
                            }
                            break;
                        case "loadingstatechanged":
                            var memberValueTmp_1 = memberValue_3;
                            var loadstatechangeHandlerAttached = "loadstatechangeHandlerAttached";
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(memberValueTmp_1)) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(memberValueTmp_1.AfterLoadComplete) &&
                                    Commerce.ObjectExtensions.isNullOrUndefined(element[loadstatechangeHandlerAttached]) &&
                                    !element[loadstatechangeHandlerAttached]) {
                                    element.winControl.addEventListener(memberName, function (eventInfo) {
                                        if (element.winControl.loadingState === "complete") {
                                            if (element.winControl.indexOfFirstVisible < 0
                                                && element.style.display !== "none") {
                                                $(memberValueTmp_1.AfterLoadComplete).css("display", "flex");
                                                $(element).hide();
                                            }
                                            else {
                                                Commerce.RetailLogger.librariesWinJsListViewShown(element.id);
                                                if (!Commerce.ObjectExtensions.isNullOrUndefined(memberValueTmp_1.AutoSelectFirstItem) &&
                                                    memberValueTmp_1.AutoSelectFirstItem &&
                                                    element.winControl.indexOfFirstVisible === 0 &&
                                                    element.winControl.selection.count() === 0) {
                                                    element.winControl.selection.set(0);
                                                }
                                            }
                                        }
                                        else if (element.winControl.loadingState === "viewPortLoaded") {
                                            if (!Commerce.ObjectExtensions.isNullOrUndefined(memberValueTmp_1.OnLoading) && memberValueTmp_1.OnLoading()) {
                                                memberValueTmp_1.OnLoading(false);
                                            }
                                        }
                                        else {
                                            $(memberValueTmp_1.AfterLoadComplete).hide();
                                            $(element).show();
                                        }
                                    });
                                    element[loadstatechangeHandlerAttached] = true;
                                }
                                else {
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(memberValueTmp_1.call)) {
                                        element.winControl.addEventListener(memberName, function (eventInfo) {
                                            memberValueTmp_1.call(viewModel, eventInfo);
                                        });
                                    }
                                }
                            }
                            break;
                        case "templateSwitch":
                            for (var i = 0; i < memberValue_3.length; i++) {
                                if (memberValue_3[i].buttonId !== ""
                                    && memberValue_3[i].templateId !== ""
                                    && memberValue_3[i].layoutType !== ""
                                    && memberValue_3[i].layoutType.type !== "") {
                                    var templateProperties = {
                                        buttonId: memberValue_3[i].buttonId,
                                        templateId: memberValue_3[i].templateId,
                                        layoutType: memberValue_3[i].layoutType.type,
                                        assignClassToId: memberValue_3[i].layoutType.assignClassToId,
                                        cssClasses: memberValue_3[i].layoutType.cssClasses,
                                        displayElementId: memberValue_3[i].displayElementId,
                                        appBarIds: memberValue_3[i].appBarIds
                                    };
                                    var setClickHandler = function (templateOptions, templateValues) {
                                        $(templateOptions.buttonId).click(function (event) {
                                            if ((!Commerce.ArrayExtensions.hasElements(element.winControl.itemTemplateId)
                                                && templateValues[0].templateId === templateOptions.templateId)
                                                || element.winControl.itemTemplateId === templateOptions.templateId) {
                                                return;
                                            }
                                            $(templateOptions.assignClassToId).removeClass().addClass(templateOptions.cssClasses).promise().done(function () {
                                                element.winControl.itemTemplateId = templateOptions.templateId;
                                                var templateElement = $(templateOptions.templateId)[0];
                                                if (element.winControl.setTemplate) {
                                                    element.winControl.setTemplate(templateElement);
                                                }
                                                else {
                                                    element.winControl.itemTemplate = templateElement;
                                                }
                                                element.winControl.layout = new templateOptions.layoutType();
                                                element.winControl.layout.orientation = "vertical";
                                                element.winControl.forceLayout();
                                            });
                                            for (var i_1 = 0; i_1 < templateValues.length; i_1++) {
                                                if (templateValues[i_1].displayElementId) {
                                                    var $displayElement = $(templateValues[i_1].displayElementId);
                                                    if (templateValues[i_1].templateId !== templateOptions.templateId) {
                                                        $displayElement.addClass("hide");
                                                    }
                                                    else {
                                                        $displayElement.removeClass("hide");
                                                    }
                                                }
                                            }
                                        });
                                    };
                                    setClickHandler(templateProperties, memberValue_3);
                                }
                            }
                            break;
                        case "groupedDataSource":
                            Commerce.ViewModelAdapterWinJS.createGroupedDataSourceAdapter(element.winControl, memberValue_3.itemList, memberValue_3.groupKeySelector, memberValue_3.groupDataSelector, memberValue_3.parentId, memberValue_3.keyName);
                            break;
                        case "groupheaderinvoked":
                            element.winControl.addEventListener("groupheaderinvoked", function (eventInfo) {
                                eventInfo.detail.groupHeaderPromise.then(function (headerItem) {
                                    memberValue_3.call(viewModel, headerItem.data);
                                });
                            });
                            break;
                        case "swipeBehavior":
                            Commerce.Host.instance.application.registerSwipeBinding(element);
                            break;
                        case "iteminvoked":
                            var itemInvokedAttached = "itemInvokedAttached";
                            var itemInvokedCallback_1 = memberValue_3;
                            if (Commerce.ObjectExtensions.isNullOrUndefined(element[itemInvokedAttached])) {
                                var newHandler = function (eventInfo) {
                                    if (element.winControl.tapBehavior === WinJS.UI.TapBehavior.invokeOnly) {
                                        Commerce.RetailLogger.librariesWinJsListViewItemClick(element.id);
                                        eventInfo.detail.itemPromise.then(function (item) {
                                            itemInvokedCallback_1.call(viewModel, item.data);
                                        });
                                    }
                                };
                                element.winControl.addEventListener(memberName, newHandler);
                                element[itemInvokedAttached] = true;
                            }
                            break;
                        case "click":
                            var clickCallback_1 = memberValue_3;
                            element.winControl.addEventListener(memberName, function (eventInfo) {
                                clickCallback_1.call(viewModel, eventInfo);
                            });
                            break;
                        case "toggleChanged":
                            var changeCallback_1 = memberValue_3;
                            element.winControl.addEventListener("change", function (eventInfo) {
                                changeCallback_1.call(viewModel, eventInfo, eventInfo.currentTarget.winControl.checked);
                            });
                            break;
                        case "toggleOnOff":
                            if (typeof memberValue_3 === "boolean") {
                                element.winControl.checked = memberValue_3;
                                if (observableMember.subscribe) {
                                    observableMember.subscribe(function (newValue) {
                                        element.winControl.checked = newValue;
                                    });
                                }
                            }
                            break;
                        case "selectionchanged":
                            var selectionChangedCallBack_1 = memberValue_3;
                            element.winControl.addEventListener(memberName, function (eventInfo) {
                                eventInfo.target.winControl.selection.getItems().then(function (item) {
                                    selectionChangedCallBack_1.eventHandlerCallBack.call(viewModel, item.map(function (item) { return item.data; }));
                                    eventInfo.preventDefault();
                                    eventInfo.stopImmediatePropagation();
                                });
                            });
                            break;
                        case "clearListViewSelection":
                            if (typeof memberValue_3 === "boolean") {
                                if (observableMember.subscribe) {
                                    observableMember.subscribe(function (newValue) {
                                        if (newValue) {
                                            element.winControl.selection.clear();
                                        }
                                    });
                                }
                            }
                            break;
                        case "contentanimating":
                        case "keyboardnavigating":
                            element.winControl.addEventListener(memberName, function (eventInfo) {
                                memberValue_3.call(viewModel, eventInfo);
                            });
                            break;
                        case "clearButton":
                            var setClearClickHandler = function (elementId) {
                                $(elementId).click(function (event) {
                                    element.winControl.selection.clear();
                                });
                            };
                            setClearClickHandler(memberValue_3);
                            break;
                        case "selectAllButton":
                            var setSelectAllClickHandler = function (elementId) {
                                $(elementId).click(function (event) {
                                    element.winControl.selection.selectAll();
                                });
                            };
                            setSelectAllClickHandler(memberValue_3);
                            break;
                        case "disabled":
                        case "enabled":
                            if (typeof memberValue_3 === "boolean") {
                                var isForDisable_1 = (memberName === "disabled");
                                element.winControl.disabled = isForDisable_1 ? memberValue_3 : !memberValue_3;
                                if (observableMember.subscribe) {
                                    observableMember.subscribe(function (newValue) {
                                        element.winControl.disabled = isForDisable_1 ? newValue : !newValue;
                                    });
                                }
                            }
                            break;
                        case "visible":
                            if (typeof memberValue_3 === "boolean") {
                                if (memberValue_3 && element.winControl.show) {
                                    element.winControl.show();
                                }
                                else if (element.winControl.hide) {
                                    element.winControl.hide();
                                }
                                if (observableMember.subscribe) {
                                    observableMember.subscribe(function (newValue) {
                                        if (typeof newValue === "boolean") {
                                            if (newValue === true && element.winControl.show) {
                                                element.winControl.show();
                                            }
                                            else if (element.winControl.hide) {
                                                element.winControl.hide();
                                            }
                                        }
                                    });
                                }
                            }
                            break;
                        case "forcelayout":
                            var forceLayout = function () {
                                var disposed = element.winControl._disposed || false;
                                if (!disposed) {
                                    element.winControl.forceLayout();
                                }
                            };
                            observableMember(forceLayout);
                            break;
                        case "layout":
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(memberValue_3.itemInfoMethod)) {
                                memberValue_3.itemInfo = function (itemIndex) {
                                    return memberValue_3.itemInfoMethod.call(viewModel, itemIndex);
                                };
                            }
                            element.winControl.layout = memberValue_3;
                            break;
                        case "labelOn":
                            element.winControl.labelOn = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                            break;
                        case "labelOff":
                            element.winControl.labelOff = Commerce.ViewModelAdapterWinJS.getResourceString(value[memberName]);
                            break;
                        case "tabIndex":
                            element.tabIndex = memberValue_3;
                            break;
                        case "preventDefaulListViewEvents":
                            if (Commerce.ObjectExtensions.isBoolean(memberValue_3) && memberValue_3) {
                                var addListener = false;
                                var winControlAttribute = element.getAttribute("data-win-control");
                                if (Commerce.StringExtensions.endsWith(winControlAttribute, "ListView")) {
                                    addListener = true;
                                }
                                else {
                                    winControlAttribute = element.getAttribute("data-bind");
                                    if (Commerce.StringExtensions.beginsWith(winControlAttribute, "dataList")) {
                                        addListener = true;
                                    }
                                }
                                if (addListener) {
                                    element.addEventListener("keydown", function (event) {
                                        var key = event.keyCode;
                                        if ((key === 13 || key === 108)) {
                                            var target_1 = event.target;
                                            if (!Commerce.ObjectExtensions.isNullOrUndefined(target_1)) {
                                                event.stopPropagation();
                                                event.preventDefault();
                                                setTimeout(function () {
                                                    var clickEvent = document.createEvent("Event");
                                                    clickEvent.initEvent("click", true, false);
                                                    target_1.dispatchEvent(clickEvent);
                                                }, 0);
                                            }
                                        }
                                    }, true);
                                }
                            }
                            break;
                        default:
                            element.winControl[memberName] = memberValue_3;
                            if (observableMember.subscribe) {
                                observableMember.subscribe(function (newValue) {
                                    element.winControl[memberName] = newValue;
                                });
                            }
                            break;
                    }
                }
            };
            for (var memberName in value) {
                _loop_1(memberName);
            }
        });
    }
};
ko.bindingHandlers.withCustomerPanelTillLayout = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var boundLayoutData = $element.closest("div[tillLayoutItem]").data("tillLayoutItem") ||
            $element.closest("div[layoutData]").data("layoutData");
        var layoutData;
        if (Commerce.ObjectExtensions.isNullOrUndefined(boundLayoutData)) {
            layoutData = {
                ShowImage: true,
                ShowName: true,
                ShowAccountNumber: true,
                ShowLoyaltyCard: true,
                ShowBalance: true,
                ShowCreditLimit: true,
                AddressType: 1,
                SelectedCustomerFields: [{
                        "__type": "ControlField:#Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls",
                        "AttributeName": null,
                        "AttributeTypeName": null,
                        "ID": "LoyaltyCardField",
                        "IsCustomAttribute": false,
                        "Width": 0
                    }, {
                        "__type": "ControlField:#Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls",
                        "AttributeName": null,
                        "AttributeTypeName": null,
                        "ID": "BalanceField",
                        "IsCustomAttribute": false,
                        "Width": 0
                    }, {
                        "__type": "ControlField:#Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls",
                        "AttributeName": null,
                        "AttributeTypeName": null,
                        "ID": "CreditLimitField",
                        "IsCustomAttribute": false,
                        "Width": 0
                    }
                ]
            };
        }
        else {
            layoutData = {
                ShowImage: boundLayoutData.ShowImage,
                ShowName: boundLayoutData.ShowName,
                ShowAccountNumber: boundLayoutData.ShowAccountNumber,
                ShowLoyaltyCard: boundLayoutData.ShowLoyaltyCard,
                ShowBalance: boundLayoutData.ShowBalance,
                ShowCreditLimit: boundLayoutData.ShowCreditLimit,
                AddressType: boundLayoutData.AddressType,
                SelectedCustomerFields: boundLayoutData.SelectedCustomerFields
            };
        }
        var childBindingContext = bindingContext.createChildContext(layoutData);
        ko.applyBindingsToDescendants(childBindingContext, element);
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var WithPairs = (function () {
            function WithPairs() {
            }
            WithPairs.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.utils.unwrapObservable(valueAccessor()) || {};
                var data = ko.isObservable(value.data) ? value.data : ko.observable(value.data);
                var pairData = WithPairs.getDataPairs(data);
                var childBindingContext = bindingContext.createChildContext(pairData);
                ko.applyBindingsToDescendants(childBindingContext, element);
                return { controlsDescendantBindings: true };
            };
            WithPairs.getDataPairs = function (data) {
                return ko.computed(function () {
                    var dataPairs = [];
                    if (Commerce.ArrayExtensions.hasElements(data())) {
                        for (var i = 0; i < data().length; i += 2) {
                            var firstData = data()[i];
                            var secondData = (i + 1 < data().length) ? data()[i + 1] : null;
                            dataPairs.push({ first: firstData, second: secondData });
                        }
                    }
                    return dataPairs;
                });
            };
            return WithPairs;
        }());
        ko.bindingHandlers.withPairs = WithPairs;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CustomWinJSBindings = (function () {
        function CustomWinJSBindings() {
        }
        CustomWinJSBindings.SetDefaultImage = function (source, sourceProperty, dest, destProperty) {
            if (destProperty.length !== 1 || destProperty[0] !== "onerror") {
                throw new Error("Only 'onerror' destination property is supported for binding 'SetDefaultImage'. Provided value was: '" + destProperty + "'.");
            }
            dest.addEventListener("error", function () {
                if (Commerce.ArrayExtensions.hasElements(sourceProperty) && sourceProperty[0] === "Commerce") {
                    var value = Commerce;
                    for (var i = 1; i < sourceProperty.length && value != null; i++) {
                        value = value[sourceProperty[i]];
                    }
                    var url = value || "";
                    Commerce.BindingHandlers.SetDefaultImageOnError(dest, url);
                }
                else {
                    Commerce.RetailLogger.customWinJSBindingsSetDefaultImage((sourceProperty || []).join());
                }
            });
        };
        return CustomWinJSBindings;
    }());
    (function () {
        WinJS.Namespace.define("Commerce.CustomBindings", {
            "SetDefaultImage": WinJS.Binding.initializer(CustomWinJSBindings.SetDefaultImage)
        });
    })();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var FulfillmentLineSearchCriteriaConverter = (function () {
        function FulfillmentLineSearchCriteriaConverter() {
        }
        FulfillmentLineSearchCriteriaConverter.getRefiners = function (criteria) {
            criteria = Commerce.ObjectExtensions.isNullOrUndefined(criteria) ? {} : criteria;
            var fulfillmentStatusEnums = Commerce.Client.Entities.FulfillmentLineStatus.getValues();
            var getFulfillmentLineStatusCallback = function (enumMember) {
                return {
                    key: Commerce.FulfillmentLineHelper.getFulfillmentStatusTranslation(enumMember),
                    value: enumMember.Value
                };
            };
            var getFulfillmentStatusFromValueCallback = function (enumValue) {
                var controlKey = Commerce.StringExtensions.EMPTY;
                var controlValue = -1;
                var filteredFulfillmentStatuses = fulfillmentStatusEnums.filter(function (enumMember) {
                    return enumMember.Value === enumValue;
                });
                if (Commerce.ArrayExtensions.hasElements(filteredFulfillmentStatuses)) {
                    controlKey = Commerce.FulfillmentLineHelper.getFulfillmentStatusTranslation(filteredFulfillmentStatuses[0]);
                    controlValue = filteredFulfillmentStatuses[0].Value;
                }
                return { key: controlKey, value: controlValue };
            };
            var deliveryTypeEnums = Commerce.Client.Entities.FulfillmentLineDeliveryType.getValues();
            var getFulfillmentDeliveryTypeCallback = function (enumMember) {
                return {
                    key: Commerce.FulfillmentLineHelper.getFulfillmentDeliveryTypeTranslation(enumMember.Value),
                    value: enumMember.Value
                };
            };
            var getFulfillmentDeliveryTypeFromValueCallback = function (enumValue) {
                var controlKey = Commerce.StringExtensions.EMPTY;
                var controlValue = -1;
                var filteredDeliveryTypes = deliveryTypeEnums.filter(function (enumMember) {
                    return enumMember.Value === enumValue;
                });
                if (Commerce.ArrayExtensions.hasElements(filteredDeliveryTypes)) {
                    controlKey = Commerce.FulfillmentLineHelper.getFulfillmentDeliveryTypeTranslation(filteredDeliveryTypes[0].Value);
                    controlValue = filteredDeliveryTypes[0].Value;
                }
                return { key: controlKey, value: controlValue };
            };
            var deliveryModeRefiners = FulfillmentLineSearchCriteriaConverter.getDeliveryModeRefinerValues();
            var getDeliveryModeCallback = function (deliveryMode) {
                var key = Commerce.StringExtensions.EMPTY;
                var value = -1;
                var filteredDeliveryMode = Commerce.ArrayExtensions.firstOrUndefined(deliveryModeRefiners, function (deliveryModeRefiner) {
                    return deliveryModeRefiner.deliveryMode.Code === deliveryMode.deliveryMode.Code;
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(filteredDeliveryMode)) {
                    var deliveryCode = filteredDeliveryMode.deliveryMode.Code;
                    var deliveryDescription = filteredDeliveryMode.deliveryMode.Description;
                    key = Commerce.StringExtensions.isNullOrWhitespace(deliveryDescription) ? deliveryCode : deliveryDescription;
                    value = filteredDeliveryMode.refinerValue;
                }
                return { key: key, value: value };
            };
            var getDeliveryModeFromValueCallback = function (deliveryModeValue) {
                var controlKey = Commerce.StringExtensions.EMPTY;
                var controlValue = -1;
                var filteredDeliveryMode = Commerce.ArrayExtensions.firstOrUndefined(deliveryModeRefiners, function (deliveryModeRefiner) {
                    return deliveryModeRefiner.deliveryMode.Code === deliveryModeValue;
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(filteredDeliveryMode)) {
                    var deliveryCode = filteredDeliveryMode.deliveryMode.Code;
                    var deliveryDescription = filteredDeliveryMode.deliveryMode.Description;
                    controlKey = Commerce.StringExtensions.isNullOrWhitespace(deliveryDescription) ? deliveryCode : deliveryDescription;
                    controlValue = filteredDeliveryMode.refinerValue;
                }
                return { key: controlKey, value: controlValue };
            };
            var fulfillmentLineStatusFilterCallback = function (enumMember) {
                switch (enumMember.Value) {
                    case Commerce.Client.Entities.FulfillmentLineStatus.Pending.Value:
                    case Commerce.Client.Entities.FulfillmentLineStatus.Accepted.Value:
                    case Commerce.Client.Entities.FulfillmentLineStatus.Picking.Value:
                    case Commerce.Client.Entities.FulfillmentLineStatus.PartiallyPicked.Value:
                    case Commerce.Client.Entities.FulfillmentLineStatus.Picked.Value:
                    case Commerce.Client.Entities.FulfillmentLineStatus.PartiallyPacked.Value:
                    case Commerce.Client.Entities.FulfillmentLineStatus.Packed.Value:
                    case Commerce.Client.Entities.FulfillmentLineStatus.PartiallyInvoiced.Value:
                        return true;
                    default:
                        return false;
                }
            };
            var refiners = [
                Commerce.RefinerHelper.createSingleSelectListRefiner(FulfillmentLineSearchCriteriaConverter.DELIVERY_TYPE_ID, Commerce.ViewModelAdapter.getResourceString("string_13153"), Commerce.ObjectExtensions.isNullOrUndefined(criteria.DeliveryTypeValue) ?
                    null : [criteria.DeliveryTypeValue].map(getFulfillmentDeliveryTypeFromValueCallback), deliveryTypeEnums.map(getFulfillmentDeliveryTypeCallback)),
                Commerce.RefinerHelper.createTextRefiner(FulfillmentLineSearchCriteriaConverter.CUSTOMER_NUMBER_ID, Commerce.ViewModelAdapter.getResourceString("string_4594"), criteria.CustomerId),
                Commerce.RefinerHelper.createTextRefiner(FulfillmentLineSearchCriteriaConverter.CUSTOMER_NAME_ID, Commerce.ViewModelAdapter.getResourceString("string_4595"), criteria.CustomerName),
                Commerce.RefinerHelper.createTextRefiner(FulfillmentLineSearchCriteriaConverter.CUSTOMER_EMAIL_ID, Commerce.ViewModelAdapter.getResourceString("string_4596"), criteria.EmailAddress),
                Commerce.RefinerHelper.createTextRefiner(FulfillmentLineSearchCriteriaConverter.ORDER_NUMBER_ID, Commerce.ViewModelAdapter.getResourceString("string_4588"), criteria.SalesId),
                Commerce.RefinerHelper.createSingleSelectListRefiner(FulfillmentLineSearchCriteriaConverter.MODE_OF_DELIVERY, Commerce.ViewModelAdapter.getResourceString("string_13115"), Commerce.StringExtensions.isNullOrWhitespace(criteria.DeliveryModeCode) ?
                    null : [criteria.DeliveryModeCode].map(getDeliveryModeFromValueCallback), deliveryModeRefiners.map(getDeliveryModeCallback)),
                Commerce.RefinerHelper.createTextRefiner(FulfillmentLineSearchCriteriaConverter.RECEIPT_ID, Commerce.ViewModelAdapter.getResourceString("string_4589"), criteria.ReceiptId),
                Commerce.RefinerHelper.createTextRefiner(FulfillmentLineSearchCriteriaConverter.CHANNEL_REF_ID, Commerce.ViewModelAdapter.getResourceString("string_4593"), criteria.ChannelReferenceId),
                Commerce.RefinerHelper.createTextRefiner(FulfillmentLineSearchCriteriaConverter.STORE_NUMBER_ID, Commerce.ViewModelAdapter.getResourceString("string_13161"), criteria.StoreId),
                Commerce.RefinerHelper.createMultiSelectListRefiner(FulfillmentLineSearchCriteriaConverter.LINE_STATUS, Commerce.ViewModelAdapter.getResourceString("string_13116"), Commerce.ArrayExtensions.hasElements(criteria.FulfillmentStatusValues) ?
                    criteria.FulfillmentStatusValues.map(getFulfillmentStatusFromValueCallback) : null, Commerce.Client.Entities.FulfillmentLineStatus.getValues()
                    .filter(fulfillmentLineStatusFilterCallback)
                    .map(getFulfillmentLineStatusCallback)),
                Commerce.RefinerHelper.createDateRefiner(FulfillmentLineSearchCriteriaConverter.ORDER_DATE_ID, Commerce.ViewModelAdapter.getResourceString("string_13113"), criteria.OrderCreatedStartDate, criteria.OrderCreatedEndDate),
                Commerce.RefinerHelper.createDateRefiner(FulfillmentLineSearchCriteriaConverter.DELIVERY_DATE_ID, Commerce.ViewModelAdapter.getResourceString("string_13151"), criteria.RequestedDeliveryStartDate, criteria.RequestedDeliveryEndDate),
                Commerce.RefinerHelper.createDateRefiner(FulfillmentLineSearchCriteriaConverter.RECEIPT_DATE_ID, Commerce.ViewModelAdapter.getResourceString("string_13152"), criteria.RequestedReceiptStartDate, criteria.RequestedReceiptEndDate)
            ];
            return refiners;
        };
        FulfillmentLineSearchCriteriaConverter.getFulfillmentLineSearchCriteria = function (refiners) {
            var criteria = {};
            var deliveryType = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.DELIVERY_TYPE_ID);
            criteria.DeliveryTypeValue = Commerce.ObjectExtensions.isNullOrUndefined(deliveryType) ? NaN : deliveryType.value;
            criteria.CustomerId = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.CUSTOMER_NUMBER_ID);
            criteria.CustomerName = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.CUSTOMER_NAME_ID);
            criteria.EmailAddress = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.CUSTOMER_EMAIL_ID);
            criteria.SalesId = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.ORDER_NUMBER_ID);
            criteria.StoreId = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.STORE_NUMBER_ID);
            criteria.ChannelReferenceId = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.CHANNEL_REF_ID);
            criteria.ReceiptId = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.RECEIPT_ID);
            var deliveryModeResult = Commerce.RefinerHelper.getRefinerValue(refiners, FulfillmentLineSearchCriteriaConverter.MODE_OF_DELIVERY);
            var deliveryModeRefiners = FulfillmentLineSearchCriteriaConverter.getDeliveryModeRefinerValues();
            if (!Commerce.ObjectExtensions.isNullOrUndefined(deliveryModeResult)) {
                var deliveryModeRefinerResult = Commerce.ArrayExtensions.firstOrUndefined(deliveryModeRefiners, function (deliveryModeRefiner) {
                    return deliveryModeRefiner.refinerValue === deliveryModeResult.value;
                });
                criteria.DeliveryModeCode = Commerce.ObjectExtensions.isNullOrUndefined(deliveryModeRefinerResult) ?
                    Commerce.StringExtensions.EMPTY : deliveryModeRefinerResult.deliveryMode.Code;
            }
            else {
                criteria.DeliveryModeCode = Commerce.StringExtensions.EMPTY;
            }
            var fulfillmentLineStatus = Commerce.RefinerHelper.getRefinerValues(refiners, FulfillmentLineSearchCriteriaConverter.LINE_STATUS);
            criteria.FulfillmentStatusValues = Commerce.ArrayExtensions.hasElements(fulfillmentLineStatus) ?
                fulfillmentLineStatus.map(function (v) { return v.value; }) : undefined;
            var orderDateValues = Commerce.RefinerHelper.getRefinerValues(refiners, FulfillmentLineSearchCriteriaConverter.ORDER_DATE_ID);
            criteria.OrderCreatedStartDate = Commerce.RefinerHelper.getStartEndDate(orderDateValues, true);
            criteria.OrderCreatedEndDate = Commerce.RefinerHelper.getStartEndDate(orderDateValues, false);
            var deliveryDateValues = Commerce.RefinerHelper.getRefinerValues(refiners, FulfillmentLineSearchCriteriaConverter.DELIVERY_DATE_ID);
            criteria.RequestedDeliveryStartDate = Commerce.RefinerHelper.getStartEndDate(deliveryDateValues, true);
            criteria.RequestedDeliveryEndDate = Commerce.RefinerHelper.getStartEndDate(deliveryDateValues, false);
            var receiptDateValues = Commerce.RefinerHelper.getRefinerValues(refiners, FulfillmentLineSearchCriteriaConverter.RECEIPT_DATE_ID);
            criteria.RequestedReceiptStartDate = Commerce.RefinerHelper.getStartEndDate(receiptDateValues, true);
            criteria.RequestedReceiptEndDate = Commerce.RefinerHelper.getStartEndDate(receiptDateValues, false);
            return criteria;
        };
        FulfillmentLineSearchCriteriaConverter.getDeliveryModeRefinerValues = function () {
            var deliveryModes = Commerce.ApplicationContext.Instance.deliveryOptions
                .filter(function (deliveryMode) {
                return deliveryMode.Code !== Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode
                    && deliveryMode.Code !== Commerce.ApplicationContext.Instance.channelConfiguration.EmailDeliveryModeCode
                    && deliveryMode.Code !== Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode;
            });
            var numCounter = 1;
            var deliveryModeRefiners = deliveryModes.map(function (deliveryMode) {
                return { refinerValue: numCounter++, deliveryMode: deliveryMode };
            });
            return deliveryModeRefiners;
        };
        FulfillmentLineSearchCriteriaConverter.DELIVERY_TYPE_ID = "deliveryType";
        FulfillmentLineSearchCriteriaConverter.CUSTOMER_NUMBER_ID = "customerNumber";
        FulfillmentLineSearchCriteriaConverter.CUSTOMER_NAME_ID = "customerName";
        FulfillmentLineSearchCriteriaConverter.CUSTOMER_EMAIL_ID = "customerEmail";
        FulfillmentLineSearchCriteriaConverter.ORDER_NUMBER_ID = "orderNumber";
        FulfillmentLineSearchCriteriaConverter.ORDER_DATE_ID = "orderDate";
        FulfillmentLineSearchCriteriaConverter.RECEIPT_ID = "receiptId";
        FulfillmentLineSearchCriteriaConverter.STORE_NUMBER_ID = "storeNumber";
        FulfillmentLineSearchCriteriaConverter.CHANNEL_REF_ID = "channelRefId";
        FulfillmentLineSearchCriteriaConverter.RECEIPT_DATE_ID = "receiptDate";
        FulfillmentLineSearchCriteriaConverter.DELIVERY_DATE_ID = "deliveryDate";
        FulfillmentLineSearchCriteriaConverter.MODE_OF_DELIVERY = "modeOfDelivery";
        FulfillmentLineSearchCriteriaConverter.LINE_STATUS = "lineStatus";
        return FulfillmentLineSearchCriteriaConverter;
    }());
    Commerce.FulfillmentLineSearchCriteriaConverter = FulfillmentLineSearchCriteriaConverter;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var UI;
    (function (UI) {
        "use strict";
        var JQueryUITouchExtensions = (function () {
            function JQueryUITouchExtensions() {
            }
            JQueryUITouchExtensions.enableTouchEmulation = function (element) {
                element.on({
                    touchstart: JQueryUITouchExtensions.onTouchStart,
                    touchmove: JQueryUITouchExtensions.onTouchMove,
                    touchend: JQueryUITouchExtensions.onTouchEnd
                });
            };
            JQueryUITouchExtensions.disableTouchEmulation = function (element) {
                element.off({
                    touchstart: JQueryUITouchExtensions.onTouchStart,
                    touchmove: JQueryUITouchExtensions.onTouchMove,
                    touchend: JQueryUITouchExtensions.onTouchEnd
                });
            };
            JQueryUITouchExtensions.simulateMouseEvent = function (event, simulatedType) {
                var touchEvent = event.originalEvent;
                if (touchEvent.touches.length > 1) {
                    return;
                }
                event.preventDefault();
                var touch = touchEvent.changedTouches[0];
                var simulatedEvent = document.createEvent("MouseEvents");
                simulatedEvent.initMouseEvent(simulatedType, true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
                event.target.dispatchEvent(simulatedEvent);
            };
            JQueryUITouchExtensions.onTouchStart = function (event) {
                if (this.touchHandled) {
                    return;
                }
                JQueryUITouchExtensions.touchHandled = true;
                JQueryUITouchExtensions.touchMoved = false;
                JQueryUITouchExtensions.simulateMouseEvent(event, "mouseover");
                JQueryUITouchExtensions.simulateMouseEvent(event, "mousemove");
                JQueryUITouchExtensions.simulateMouseEvent(event, "mousedown");
            };
            JQueryUITouchExtensions.onTouchMove = function (event) {
                if (!JQueryUITouchExtensions.touchHandled) {
                    return;
                }
                JQueryUITouchExtensions.touchMoved = true;
                JQueryUITouchExtensions.simulateMouseEvent(event, "mousemove");
            };
            JQueryUITouchExtensions.onTouchEnd = function (event) {
                if (!JQueryUITouchExtensions.touchHandled) {
                    return;
                }
                JQueryUITouchExtensions.simulateMouseEvent(event, "mouseup");
                JQueryUITouchExtensions.simulateMouseEvent(event, "mouseout");
                if (!JQueryUITouchExtensions.touchMoved) {
                    JQueryUITouchExtensions.simulateMouseEvent(event, "click");
                }
                JQueryUITouchExtensions.touchHandled = false;
            };
            return JQueryUITouchExtensions;
        }());
        UI.JQueryUITouchExtensions = JQueryUITouchExtensions;
    })(UI = Commerce.UI || (Commerce.UI = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RefinerHelper = (function () {
        function RefinerHelper() {
        }
        RefinerHelper.createTextRefiner = function (id, keyName, selectedValue) {
            return Commerce.Refiners.RefinerFactory.createTextRefiner(id, keyName, selectedValue);
        };
        RefinerHelper.createDateRefiner = function (id, keyName, startDate, endDate) {
            return Commerce.Refiners.RefinerFactory.createDateRefiner(id, keyName, startDate, endDate);
        };
        RefinerHelper.createSingleSelectListRefiner = function (id, keyName, selectedValues, values) {
            return Commerce.Refiners.RefinerFactory.createSingleSelectListRefiner(id, keyName, selectedValues, values);
        };
        RefinerHelper.createMultiSelectListRefiner = function (id, keyName, selectedValues, values) {
            return Commerce.Refiners.RefinerFactory.createMultiSelectListRefiner(id, keyName, selectedValues, values);
        };
        RefinerHelper.getRefinerValue = function (refiners, id) {
            var values = RefinerHelper.getRefinerValues(refiners, id);
            return Commerce.ArrayExtensions.firstOrUndefined(values);
        };
        RefinerHelper.getRefinerValues = function (refiners, id) {
            var refiner = Commerce.ArrayExtensions.firstOrUndefined(refiners, function (r) {
                return r.ID === id;
            });
            return Commerce.ObjectExtensions.isNullOrUndefined(refiner) || !Commerce.ArrayExtensions.hasElements(refiner.SelectedValues) ? undefined : refiner.SelectedValues;
        };
        RefinerHelper.getStartEndDate = function (dateValues, isStartDate) {
            var result = Commerce.ArrayExtensions.firstOrUndefined(dateValues, function (v) { return v.isStartDate === isStartDate; });
            return Commerce.ObjectExtensions.isNullOrUndefined(result) ? undefined : result.date;
        };
        RefinerHelper.createRefinerControl = function (refiner, container, refinerRemovedHandler) {
            var showInputDialogCallback;
            var refinerValueTemplate = RefinerHelper.REFINER_TEXT_VALUE_TEMPLATE_ID;
            switch (refiner.Type) {
                case Commerce.Refiners.RefinerType.Text:
                    showInputDialogCallback = RefinerHelper.showTextInputDialogCallback.bind(null, refiner);
                    break;
                case Commerce.Refiners.RefinerType.SingleSelectList:
                case Commerce.Refiners.RefinerType.MultiSelectList:
                    if (refiner instanceof Commerce.Refiners.ListRefiner) {
                        var getDisplayNameCallback = function (value) { return value.key; };
                        refinerValueTemplate = RefinerHelper.REFINER_KEY_VALUE_TEMPLATE_ID;
                        showInputDialogCallback = refiner.Type === Commerce.Refiners.RefinerType.MultiSelectList ?
                            RefinerHelper.showMultiSelectListInputDialogCallback.bind(null, refiner.KeyName, refiner.Values, getDisplayNameCallback) :
                            RefinerHelper.showSingleSelectListInputDialogCallback.bind(null, refiner.KeyName, refiner.Values, getDisplayNameCallback);
                    }
                    else {
                        throw new Error("RefinerHelper::Refiner with id '" + refiner.ID + "' has list refiner type but is not an instance of ListRefiner.");
                    }
                    break;
                case Commerce.Refiners.RefinerType.Date:
                    refinerValueTemplate = RefinerHelper.REFINER_DATE_VALUE_TEMPLATE_ID;
                    showInputDialogCallback = RefinerHelper.showDateRangeInputDialogCallback.bind(null, refiner);
                    break;
                default:
                    return false;
            }
            ko.applyBindingsToNode(container, {
                selectRefinerControl: {
                    refiner: refiner,
                    refinerValueTemplate: refinerValueTemplate,
                    showInputDialogCallback: showInputDialogCallback,
                    refinerRemovedHandler: refinerRemovedHandler.bind(null, refiner)
                }
            });
            return true;
        };
        RefinerHelper.showMultiSelectListInputDialogCallback = function (subTitle, refinerValues, getDisplayNameCallback) {
            var title = Commerce.ViewModelAdapter.getResourceString("string_940");
            var dialogResult = new Commerce.AsyncResult();
            var dialog = RefinerHelper.configureDialog(new Commerce.Controls.CheckedListInputDialog(), title, subTitle);
            dialog.show({ items: refinerValues, getDisplayNameCallback: getDisplayNameCallback })
                .onAny(function (result, dlgResult) {
                dialogResult.resolve(dlgResult === Commerce.DialogResult.OK ? result : null);
            });
            return dialogResult;
        };
        RefinerHelper.showSingleSelectListInputDialogCallback = function (subTitle, refinerValues, getDisplayNameCallback) {
            var title = Commerce.ViewModelAdapter.getResourceString("string_940");
            var dialogResult = new Commerce.AsyncResult();
            var dialog = RefinerHelper.configureDialog(new Commerce.Controls.ListInputDialog(), title, subTitle);
            dialog.show({ items: refinerValues, getDisplayNameCallback: getDisplayNameCallback })
                .onAny(function (result, dlgResult) {
                dialogResult.resolve(dlgResult === Commerce.DialogResult.OK ? [result] : null);
            });
            return dialogResult;
        };
        RefinerHelper.configureDialog = function (dialog, title, subTitle) {
            dialog.title(title);
            dialog.subTitle(Commerce.ObjectExtensions.isNullOrUndefined(subTitle) ? title : subTitle);
            return dialog;
        };
        RefinerHelper.showRefinerAsync = function (refiner) {
            var showInputDialogCallback = null;
            switch (refiner.Type) {
                case Commerce.Refiners.RefinerType.Text:
                    showInputDialogCallback = RefinerHelper.showTextInputDialogCallback.bind(null, refiner);
                    break;
                case Commerce.Refiners.RefinerType.Date:
                    showInputDialogCallback = RefinerHelper.showDateRangeInputDialogCallback.bind(null, refiner);
                    break;
                default:
                    Commerce.RetailLogger.refinerHelperShowRefinerAsyncUnsupportedRefiner(Commerce.ObjectExtensions.isNullOrUndefined(refiner) ? "NullOrUndefined" : Commerce.Refiners.RefinerType[refiner.Type]);
                    break;
            }
            if (showInputDialogCallback) {
                return showInputDialogCallback();
            }
            else {
                return Commerce.AsyncResult.createResolved(null);
            }
        };
        RefinerHelper.showTextInputDialogCallback = function (refiner) {
            var dialog = RefinerHelper.configureDialog(new Commerce.Controls.TextInputDialog(), Commerce.ViewModelAdapter.getResourceString("string_940"), refiner.KeyName);
            var textInputDialogOptions = {
                content: Commerce.ArrayExtensions.hasElements(refiner.SelectedValues) ? refiner.SelectedValues[0] : Commerce.StringExtensions.EMPTY,
                textInputType: Commerce.Controls.TextInputType.singleLineText
            };
            dialog.show(textInputDialogOptions, false);
            var textInputDialogAsyncResult = Commerce.Activities.ModalDialogHelper.handleDialogResult(dialog, Commerce.DialogResult.OK, function (result) {
                if (Commerce.StringExtensions.isEmptyOrWhitespace(result)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.REFINER_VALUE_MUST_BE_SET)]);
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            });
            return textInputDialogAsyncResult.map(function (result) {
                return result.canceled ? null : [result.data];
            }).recoverOnFailure(function () {
                return Commerce.AsyncResult.createResolved(null);
            });
        };
        RefinerHelper.showDateRangeInputDialogCallback = function (refiner) {
            var dialogResult = new Commerce.AsyncResult();
            var dialog = RefinerHelper.configureDialog(new Commerce.Controls.DateRangeInputDialog(), Commerce.ViewModelAdapter.getResourceString("string_940"), refiner.KeyName);
            dialog.show({}).onAny(function (result, dlgResult) {
                var value = null;
                if (dlgResult === Commerce.DialogResult.OK) {
                    refiner.updateSelectedValues(result.startDate, result.endDate);
                    value = refiner.SelectedValues;
                }
                dialogResult.resolve(value);
            });
            return dialogResult;
        };
        RefinerHelper.REFINER_TEXT_VALUE_TEMPLATE_ID = "refinerTextValueTemplate";
        RefinerHelper.REFINER_KEY_VALUE_TEMPLATE_ID = "refinerKeyValueTemplate";
        RefinerHelper.REFINER_DATE_VALUE_TEMPLATE_ID = "refinerDateValueTemplate";
        return RefinerHelper;
    }());
    Commerce.RefinerHelper = RefinerHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        TaskRecorder.ELEMENT_ID_TASKRECORDER_HOST = "taskRecorderHost";
        var TaskRecorderController = (function () {
            function TaskRecorderController() {
                var _this = this;
                this.manager = null;
                this.viewManager = null;
                this.hostElement = null;
                this.mainPanel = null;
                this.controlPanel = null;
                this.manager = new TaskRecorder.TaskRecorderManager();
                this.viewManager = new TaskRecorder.TaskRecorderViewManager(this, this.manager, Commerce.Config.viewRoot);
                ko.computed(function () {
                    var session = _this.manager.activeSession();
                    return session != null && session.state() !== TaskRecorder.TaskRecorderState.None ? session : null;
                }).subscribe(this.toggleControlPanel.bind(this));
                this.initializeHtmlHost();
                this.initializePanelDefinitions();
                this.initializePageDefinitions();
            }
            TaskRecorderController.prototype.showMainPanel = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.mainPanel)) {
                    $(this.mainPanel.element).show();
                }
            };
            TaskRecorderController.prototype.hideMainPanel = function () {
                $(this.mainPanel.element).hide();
                if (!this.manager.isRecordingActive()) {
                    this.deactivateMainPanel();
                }
            };
            TaskRecorderController.prototype.toggleMainPanel = function () {
                $(this.mainPanel.element).toggle();
                var session = this.manager.activeSession();
                var recordingStates = [TaskRecorder.TaskRecorderState.Recording, TaskRecorder.TaskRecorderState.RecordingPaused];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(session) && Commerce.ArrayExtensions.hasElement(recordingStates, session.state())) {
                    session.updateRecordingView();
                }
            };
            TaskRecorderController.prototype.activateMainPanel = function (viewName) {
                var session = this.manager.activeSession();
                if (!Commerce.StringExtensions.isNullOrWhitespace(viewName)) {
                    this.navigate(viewName);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(session)) {
                    var state = session.state();
                    switch (state) {
                        case TaskRecorder.TaskRecorderState.Recording:
                        case TaskRecorder.TaskRecorderState.RecordingPaused:
                            this.navigate("Recording");
                            break;
                        case TaskRecorder.TaskRecorderState.RecordingCompleted:
                            this.navigate("CompleteRecording");
                            break;
                        default:
                            throw new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_CONTROLLER_NOT_SUPPORTED_STATE);
                    }
                }
                else {
                    this.navigate("Welcome");
                }
            };
            TaskRecorderController.prototype.deactivateMainPanel = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.mainPanel)) {
                    this.viewManager.unloadView(this.hostElement, this.mainPanel);
                    this.mainPanel = null;
                }
            };
            TaskRecorderController.prototype.navigate = function (pageName, options) {
                Commerce.ThrowIf.argumentIsNotString(pageName, "pageName");
                this.openMainPanel()
                    .done(function (mainPanel) {
                    mainPanel.viewModel.navigate(pageName, options);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TaskRecorderController.prototype.navigateBack = function () {
                this.openMainPanel()
                    .done(function (mainPanel) {
                    mainPanel.viewModel.navigateBack();
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            TaskRecorderController.prototype.getTaskRecorderState = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.manager)) {
                    return TaskRecorder.TaskRecorderState.None;
                }
                var session = this.manager.activeSession();
                if (Commerce.ObjectExtensions.isNullOrUndefined(session)) {
                    return TaskRecorder.TaskRecorderState.None;
                }
                return session.state();
            };
            TaskRecorderController.errorInvalidDom = function () {
                return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_INVALID_DOM)];
            };
            TaskRecorderController.prototype.initializeHtmlHost = function () {
                var hostElement = document.getElementById(TaskRecorder.ELEMENT_ID_TASKRECORDER_HOST);
                if (Commerce.ObjectExtensions.isNullOrUndefined(hostElement)) {
                    throw TaskRecorderController.errorInvalidDom();
                }
                this.hostElement = hostElement;
            };
            TaskRecorderController.prototype.openMainPanel = function () {
                var _this = this;
                var asyncResult;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.mainPanel)) {
                    asyncResult = Commerce.AsyncResult.createResolved(this.mainPanel);
                }
                else {
                    asyncResult = this.viewManager.loadView("MainPanel", this.viewManager, this.hostElement).done(function (vvm) {
                        ko.applyBindings(vvm.viewModel, vvm.element);
                        _this.mainPanel = vvm;
                        return vvm;
                    });
                }
                return asyncResult.done(function () {
                    _this.showMainPanel();
                });
            };
            TaskRecorderController.prototype.toggleControlPanel = function (session) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(session)) {
                    this.openControlPanel(session);
                }
                else {
                    this.closeControlPanel();
                }
            };
            TaskRecorderController.prototype.openControlPanel = function (session) {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.controlPanel)) {
                    return Commerce.AsyncResult.createResolved(this.controlPanel);
                }
                return this.viewManager.loadView("ControlPanel", session, this.hostElement).done(function (vvm) {
                    ko.applyBindings(vvm.viewModel, vvm.element);
                    _this.controlPanel = vvm;
                    return vvm;
                });
            };
            TaskRecorderController.prototype.closeControlPanel = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.controlPanel)) {
                    this.viewManager.unloadView(this.hostElement, this.controlPanel);
                    this.controlPanel = null;
                }
            };
            TaskRecorderController.prototype.initializePanelDefinitions = function () {
                var _this = this;
                Object.getOwnPropertyNames(Commerce.Config.taskRecorderPanels).forEach(function (viewName) {
                    var viewDefinition = Commerce.Config.taskRecorderPanels[viewName];
                    _this.viewManager.registerView(viewName, viewDefinition.viewModelType);
                });
            };
            TaskRecorderController.prototype.initializePageDefinitions = function () {
                var _this = this;
                Object.getOwnPropertyNames(Commerce.Config.taskRecorderPages).forEach(function (viewName) {
                    var viewDefinition = Commerce.Config.taskRecorderPages[viewName];
                    _this.viewManager.registerView(viewName, viewDefinition.viewModelType);
                });
            };
            return TaskRecorderController;
        }());
        TaskRecorder.TaskRecorderController = TaskRecorderController;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var taskRecorderController = null;
        function activateTaskRecorder(viewName) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(taskRecorderController)) {
                taskRecorderController = new TaskRecorder.TaskRecorderController();
            }
            taskRecorderController.activateMainPanel(viewName);
        }
        TaskRecorder.activateTaskRecorder = activateTaskRecorder;
        function toggleMainPanel() {
            if (Commerce.ObjectExtensions.isNullOrUndefined(taskRecorderController)) {
                return;
            }
            taskRecorderController.toggleMainPanel();
        }
        TaskRecorder.toggleMainPanel = toggleMainPanel;
        function getTaskRecorderState() {
            if (Commerce.ObjectExtensions.isNullOrUndefined(taskRecorderController)) {
                return TaskRecorder.TaskRecorderState.None;
            }
            return taskRecorderController.getTaskRecorderState();
        }
        TaskRecorder.getTaskRecorderState = getTaskRecorderState;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var UI;
    (function (UI) {
        "use strict";
        var Tutorial = (function () {
            function Tutorial() {
            }
            Tutorial.init = function () {
                Tutorial.bubbleControl = UI.HelpBubbles.BubbleControl.instance();
                Tutorial.isBubbleTourInProgress = Tutorial.bubbleControl.isInProgress;
                Tutorial.isTutorialStarted = false;
                Tutorial.tutorialVideoDisabled = ko.observable(false);
                Tutorial.bubbleTourDisabled = ko.observable(false);
                Tutorial.bubbleTourDisabled.subscribe(function (value) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.BUBBLE_TOUR_DISABLED, JSON.stringify(value));
                });
                Tutorial.tutorialVideoDisabled.subscribe(function (value) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.VIDEO_TUTORIAL_DISABLED, JSON.stringify(value));
                });
                Tutorial.tutorialVideoDialog = new Commerce.Controls.TutorialVideoDialog();
            };
            Tutorial.onBeforeNavigate = function () {
                if (!Tutorial.isTutorialModeEnabled()) {
                    return;
                }
                if (Tutorial.isBubbleTourInProgress()) {
                    Tutorial.bubbleControl.onBeforeNavigate();
                }
            };
            Tutorial.onAfterNavigate = function (location, element) {
                if (!Tutorial.isTutorialModeEnabled()) {
                    Tutorial.isTutorialStarted = false;
                    if (Tutorial.isBubbleTourInProgress()) {
                        Tutorial.bubbleControl.stopTour(false);
                    }
                    return;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(location)) {
                    return;
                }
                Tutorial.activeLocation = location;
                Tutorial.pageElement = element;
                if (location === Tutorial.startPage && !Tutorial.isTutorialStarted) {
                    Tutorial.startTutorialMode();
                }
                else if (Tutorial.isBubbleTourInProgress()) {
                    Tutorial.bubbleControl.onAfterNavigate(location, element);
                }
            };
            Tutorial.stopBubbleTour = function () {
                Tutorial.bubbleControl.stopTour(true);
            };
            Tutorial.startTutorialMode = function () {
                Tutorial.tutorialVideoDisabled(Tutorial.readBooleanSetting(Commerce.ApplicationStorageIDs.VIDEO_TUTORIAL_DISABLED));
                Tutorial.setColor();
                Tutorial.isTutorialStarted = true;
                if (Tutorial.isSupportedScreenSize()) {
                    if (!Tutorial.tutorialVideoDisabled()) {
                        Tutorial.startVideoTutorial().onAny(function () {
                            Tutorial.startBubbleTour();
                        });
                    }
                    else {
                        Tutorial.startBubbleTour();
                    }
                }
            };
            Tutorial.startVideoTutorial = function () {
                return Tutorial.tutorialVideoDialog.show(null, true);
            };
            Tutorial.startBubbleTour = function () {
                Tutorial.bubbleTourDisabled(Tutorial.readBooleanSetting(Commerce.ApplicationStorageIDs.BUBBLE_TOUR_DISABLED));
                if (Tutorial.isBubbleTourInProgress() || Tutorial.bubbleTourDisabled()) {
                    return;
                }
                Tutorial.isBubbleTourInProgress(true);
                Tutorial.bubbleControl.reset(Tutorial.activeLocation, Tutorial.pageElement, Tutorial.arrowColor);
            };
            Tutorial.isTutorialModeEnabled = function () {
                return Commerce.Session.instance.isLoggedOn && Commerce.ApplicationContext.Instance.retailTrialPlanOffer;
            };
            Tutorial.toggleBubbleTour = function () {
                Tutorial.bubbleTourDisabled(!Tutorial.bubbleTourDisabled());
            };
            Tutorial.setColor = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.CSSHelpers.accentColorId)) {
                    Tutorial.arrowColor = Tutorial.accentColors[Commerce.CSSHelpers.accentColorId];
                }
            };
            Tutorial.readBooleanSetting = function (key) {
                var settingValue = JSON.parse(Commerce.ApplicationStorage.getItem(key));
                return Commerce.ObjectExtensions.isBoolean(settingValue) && settingValue;
            };
            Tutorial.isSupportedScreenSize = function () {
                var $window = $(window);
                return $window.width() >= 1180;
            };
            Tutorial.startPage = "HomeView";
            Tutorial.arrowColor = "#0F6FCF";
            Tutorial.accentColors = {
                13004559: "#8D4294",
                3776084: "#0F6FCF",
                2376177: "#8D4294",
                13850523: "#0F6FCF"
            };
            return Tutorial;
        }());
        UI.Tutorial = Tutorial;
    })(UI = Commerce.UI || (Commerce.UI = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ActivationUserInfoViewModel = (function () {
        function ActivationUserInfoViewModel($element, options, controllerViewModel) {
            this.activationUserInfoMenu = ko.observable(null);
            this.activationUserInfoMenuAnchor = ko.observable(null);
            Commerce.CSSHelpers.applyThemeAsync({ Theme: "light" });
            this.isMenuHidden = ko.observable(false);
            this.indeterminateWaitVisible = ko.observable(false);
            this.isUserLoggedOn = ko.computed(function () {
                return Commerce.Session.instance.isLoggedOn;
            });
        }
        ActivationUserInfoViewModel.prototype.showUserMenu = function () {
            this.activationUserInfoMenu().winControl.show(this.activationUserInfoMenuAnchor());
        };
        ActivationUserInfoViewModel.prototype.logOff = function () {
            var _this = this;
            this.isMenuHidden(false);
            this.indeterminateWaitVisible(true);
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))).fail(function (error) {
                Commerce.NotificationHandler.displayClientErrors(error, Commerce.ViewModelAdapter.getResourceString("string_509"));
            }).always(function () {
                _this.indeterminateWaitVisible(false);
            });
        };
        return ActivationUserInfoViewModel;
    }());
    Commerce.ActivationUserInfoViewModel = ActivationUserInfoViewModel;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.activationUserInfo = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var $element = $(element);
        $element.addClass("activationUserInfo");
        var activationUserInfoViewModel = new Commerce.ActivationUserInfoViewModel($element, options, viewModel);
        ko.applyBindingsToNode(element, {
            template: {
                name: "activationUserInfoTemplate",
                data: activationUserInfoViewModel
            }
        }, this);
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers.appBar = new Commerce.Controls.AppBar.AppBarBindingHandler();
ko.bindingHandlers.appBarCommand = new Commerce.Controls.AppBar.AppBarCommandBindingHandler();
var Commerce;
(function (Commerce) {
    "use strict";
    var IAsyncImageOptions = (function () {
        function IAsyncImageOptions() {
        }
        return IAsyncImageOptions;
    }());
    Commerce.IAsyncImageOptions = IAsyncImageOptions;
    var AsyncImage = (function () {
        function AsyncImage() {
        }
        AsyncImage.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var imageElement;
            var _errorEventHandler = function () {
                Commerce.BindingHandlers.SetDefaultImageOnError(imageElement, options.defaultImage);
            }.bind(this);
            imageElement = document.createElement("img");
            imageElement.className = element.className;
            imageElement.alt = options.altText;
            if (!Commerce.StringExtensions.isNullOrWhitespace(options.defaultImage)) {
                imageElement.src = options.defaultImage;
                imageElement.addEventListener("error", _errorEventHandler);
            }
            else {
                Commerce.RetailLogger.viewsAsyncImageControlInvalidDefaultImage();
            }
            element.appendChild(imageElement);
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.onlineImage)) {
                    imageElement.src = Commerce.Formatters.ImageUrlFormatter(options.onlineImage);
                }
            }
            else {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.data) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(options.offlineBinaryImageHandlerProperty)) {
                    var imageHandler = options.data[options.offlineBinaryImageHandlerProperty];
                    if (Commerce.ObjectExtensions.isFunction(imageHandler)) {
                        imageHandler(options.data).done(function (imageSource) {
                            if (!Commerce.StringExtensions.isNullOrWhitespace(imageSource)) {
                                imageElement.src = Commerce.Formatters.ImageBinaryFormatter(imageSource);
                            }
                        });
                    }
                }
            }
            ko.utils.domNodeDisposal.addDisposeCallback(imageElement, function (e) {
                imageElement.removeEventListener("error", _errorEventHandler);
            });
            return { controlsDescendantBindings: true };
        };
        return AsyncImage;
    }());
    Commerce.AsyncImage = AsyncImage;
    ko.bindingHandlers.asyncImage = new AsyncImage();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var UI;
    (function (UI) {
        var HelpBubbles;
        (function (HelpBubbles) {
            "use strict";
            var BubbleControl = (function () {
                function BubbleControl() {
                    this.isInProgress = ko.observable(false);
                    this._activeTitle = ko.observable(null);
                }
                BubbleControl.instance = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._instance)) {
                        this._instance = new BubbleControl();
                    }
                    return this._instance;
                };
                BubbleControl.prototype.reset = function (location, element, arrowColor) {
                    var _this = this;
                    this._arrowColor = arrowColor;
                    $.getJSON(BubbleControl._path)
                        .done((function (data) {
                        _this._bubbleConfig = data;
                        _this._$container = $(BubbleControl._bubbleContainerSelector);
                        _this._targetHandler = (function (event) { _this.moveNext(true); }).bind(_this);
                        _this.isInProgress(true);
                        _this.onAfterNavigate(location, element);
                    }).bind(this));
                };
                BubbleControl.prototype.stopTour = function (showHowToEnable) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._bubbleConfig.stopTourBubble) && showHowToEnable) {
                        this._bubbleConfig.intro = [];
                        this._bubbleConfig.global = [this._bubbleConfig.stopTourBubble];
                        this._bubbleConfig.totalCount = 1;
                        this._bubbleConfig.byPage = {};
                        this.moveNext(true);
                    }
                    else {
                        this.hideActiveBubble();
                    }
                    this.isInProgress(false);
                };
                BubbleControl.prototype.onBeforeNavigate = function () {
                    this._activePage = null;
                    this.hideActiveBubble();
                };
                BubbleControl.prototype.onAfterNavigate = function (location, element) {
                    this._activePage = location;
                    this._$pageContainer = $(element);
                    this._timer = window.setTimeout(this.moveNext.bind(this), BubbleControl._delay);
                };
                BubbleControl.prototype.textSwitch = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._activeBubble)) {
                        return false;
                    }
                    if (this._activeBubble.title.length > this._activeTextIndex) {
                        this._activeTitle(Commerce.ViewModelAdapter.getResourceString(this._activeBubble.title[this._activeTextIndex]));
                        if (this._activeTextIndex + 1 < this._activeBubble.title.length) {
                            this._textTimer = window.setTimeout(this.moveNext.bind(this), BubbleControl.TEXT_DELAY);
                        }
                        else {
                            return false;
                        }
                        return true;
                    }
                    return false;
                };
                BubbleControl.prototype.moveNext = function (isTargetClick) {
                    if (isTargetClick === void 0) { isTargetClick = false; }
                    this.clearTimers();
                    if (!isTargetClick) {
                        if (this.textSwitch()) {
                            return;
                        }
                    }
                    this.hideActiveBubble();
                    this._timer = window.setTimeout(this.showBubble.bind(this), BubbleControl._delay);
                };
                BubbleControl.prototype.showBubble = function () {
                    var bubble = this.getNextBubble();
                    if (Commerce.ObjectExtensions.isNullOrUndefined(bubble)) {
                        return;
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._$target)) {
                        this._$target.bind("click", this._targetHandler);
                    }
                    this._activeTextIndex = 0;
                    this._activeTitle(Commerce.ViewModelAdapter.getResourceString(bubble.title[this._activeTextIndex]));
                    this._activeBubble = bubble;
                    bubble.isArrowVisible =
                        Commerce.ObjectExtensions.isNullOrUndefined(bubble.isArrowVisible) ? true : bubble.isArrowVisible;
                    ko.cleanNode(this._$container[0]);
                    ko.applyBindingsToNode(this._$container[0], {
                        template: {
                            name: BubbleControl._templateName,
                            data: {
                                title: this._activeTitle,
                                size: bubble.size,
                                isArrowVisible: bubble.isArrowVisible,
                                arrowColor: this._arrowColor
                            }
                        },
                        click: this.moveNext.bind(this)
                    });
                    var $bubbleElement = this._$container.find(BubbleControl._bubbleElementSelector);
                    this.setPosition(this._$target, bubble, $bubbleElement);
                    if (bubble.title.length > 1) {
                        this._textTimer = window.setTimeout(this.textSwitch.bind(this), BubbleControl.TEXT_DELAY);
                    }
                    else {
                        this._timer = window.setTimeout(this.moveNext.bind(this), BubbleControl.HIDE_DELAY);
                    }
                };
                BubbleControl.prototype.setRotation = function ($bubbleElement, rotation) {
                    var $rotateContainer = $bubbleElement.find(BubbleControl._rotateContainer);
                    $rotateContainer.css("transform", Commerce.StringExtensions.format(BubbleControl._rotateFormatter, rotation + 45));
                };
                BubbleControl.prototype.getNextBubble = function () {
                    if (this._bubbleConfig.totalCount === 0) {
                        this.isInProgress(false);
                        return null;
                    }
                    var bubble = null;
                    var bubbleList;
                    var pageBubbles = this._bubbleConfig.byPage[this._activePage];
                    if (this._bubbleConfig.intro.length > 0) {
                        bubbleList = this._bubbleConfig.intro;
                    }
                    else if (pageBubbles && pageBubbles.length > 0) {
                        bubbleList = pageBubbles;
                    }
                    else if (this._bubbleConfig.global.length > 0) {
                        bubbleList = this._bubbleConfig.global;
                    }
                    if (bubbleList) {
                        bubble = bubbleList[bubbleList.length - 1];
                        if (bubble.targetElement !== "viewport") {
                            var targetElement = this._$pageContainer.find(Commerce.StringExtensions.format(BubbleControl._searhByAttributeSelector, bubble.targetElement));
                            if (targetElement.length === 0 || targetElement.is(":hidden")) {
                                this._timer = window.setTimeout(this.moveNext.bind(this), BubbleControl._delay);
                                return null;
                            }
                            else {
                                this._$target = targetElement;
                            }
                        }
                        else {
                            this._$target = null;
                        }
                        bubbleList.pop();
                        this._bubbleConfig.totalCount--;
                    }
                    return bubble;
                };
                BubbleControl.prototype.setPosition = function ($target, bubble, $bubbleElem) {
                    var top = 0;
                    var left = 0;
                    var position = bubble.position;
                    this.setRotation($bubbleElem, bubble.rotation);
                    if (bubble.targetElement === "viewport") {
                        this.positionInViewPort(bubble, $bubbleElem);
                        return;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(position.top)) {
                        top = $target.offset().top + $target.outerHeight() - position.bottom;
                    }
                    else {
                        top = $target.offset().top + position.top;
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(position.left)) {
                        left = $target.offset().left + $target.outerWidth() - position.right;
                    }
                    else {
                        left = $target.offset().left + position.left;
                    }
                    var elementPosition = this.fixPosition($bubbleElem, bubble, top, left);
                    $bubbleElem.css("top", elementPosition.top + "px");
                    $bubbleElem.css("left", elementPosition.left + "px");
                };
                BubbleControl.prototype.positionInViewPort = function (bubble, $bubbleElem) {
                    this.fixPosition($bubbleElem, bubble, 0, 0);
                    $bubbleElem.css("position", "fixed");
                    if (bubble.position.anchor === "center") {
                        var elementSize = $bubbleElem.height();
                        var position = Commerce.StringExtensions.format(BubbleControl._centerFormatting, elementSize / 2);
                        $bubbleElem.css("top", position);
                        $bubbleElem.css("left", position);
                        return;
                    }
                    if (bubble.position.anchor.indexOf("left") >= 0) {
                        $bubbleElem.css("left", BubbleControl._viewPortAnchorDistance);
                    }
                    if (bubble.position.anchor.indexOf("top") >= 0) {
                        $bubbleElem.css("top", BubbleControl._viewPortAnchorDistance);
                    }
                    if (bubble.position.anchor.indexOf("bottom") >= 0) {
                        $bubbleElem.css("bottom", BubbleControl._viewPortAnchorDistance);
                    }
                    if (bubble.position.anchor.indexOf("right") >= 0) {
                        $bubbleElem.css("right", BubbleControl._viewPortAnchorDistance);
                    }
                };
                BubbleControl.prototype.fixPosition = function ($bubbleElem, bubble, top, left) {
                    var elementHeight = $bubbleElem.height();
                    var elementWidth = $bubbleElem.width();
                    var $textElement = $bubbleElem.find(BubbleControl._bubbleTextElementSelector);
                    var paddingBottom = window.parseInt($textElement.css("padding-bottom"));
                    if (!bubble.isArrowVisible) {
                        $textElement.css("padding-top", paddingBottom + "px");
                        return null;
                    }
                    if (bubble.rotation > 0) {
                        left -= elementWidth;
                    }
                    if (bubble.rotation === -90 || bubble.rotation === 90) {
                        top -= elementHeight / 2;
                        var paddingClass = bubble.rotation > 0 ? BubbleControl._arrowRightClass : BubbleControl._arrowLeftClass;
                        $textElement.addClass(paddingClass);
                    }
                    if (bubble.rotation >= 135 || bubble.rotation <= -135) {
                        top -= elementHeight;
                        $textElement.addClass(BubbleControl._arrowBottomClass);
                    }
                    return { top: top, left: left };
                };
                BubbleControl.prototype.clearTimers = function () {
                    window.clearTimeout(this._timer);
                    window.clearTimeout(this._textTimer);
                };
                BubbleControl.prototype.hideActiveBubble = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._$target)) {
                        this._$target.unbind("click", this._targetHandler);
                    }
                    if (this._bubbleConfig.totalCount <= 0) {
                        this.isInProgress(false);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._activeBubble)) {
                        ko.cleanNode(this._$container[0]);
                        this._$container.empty();
                        this._activeBubble = null;
                        this._activeTextIndex = -1;
                        this.clearTimers();
                    }
                };
                BubbleControl.HIDE_DELAY = 7000;
                BubbleControl.TEXT_DELAY = 5000;
                BubbleControl._delay = 100;
                BubbleControl._arrowLeftClass = "arrow-left";
                BubbleControl._arrowRightClass = "arrow-right";
                BubbleControl._arrowBottomClass = "arrow-bottom";
                BubbleControl._viewPortAnchorDistance = "50px";
                BubbleControl._path = "Controls/Bubbles/bubble.config.json";
                BubbleControl._bubbleElementSelector = ".bubble";
                BubbleControl._bubbleContainerSelector = ".bubble-container";
                BubbleControl._bubbleTextElementSelector = ".bubble-text-container";
                BubbleControl._rotateContainer = ".arrow-rotate-container";
                BubbleControl._templateName = "bubble-template";
                BubbleControl._searhByAttributeSelector = "[data-ax-bubble='{0}']";
                BubbleControl._rotateFormatter = "rotate({0}deg)";
                BubbleControl._centerFormatting = "calc(50% - {0}px)";
                return BubbleControl;
            }());
            HelpBubbles.BubbleControl = BubbleControl;
        })(HelpBubbles = UI.HelpBubbles || (UI.HelpBubbles = {}));
    })(UI = Commerce.UI || (Commerce.UI = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ButtonGrid;
        (function (ButtonGrid) {
            var ButtonGridState = (function () {
                function ButtonGridState() {
                }
                return ButtonGridState;
            }());
            ButtonGrid.ButtonGridState = ButtonGridState;
        })(ButtonGrid = Controls.ButtonGrid || (Controls.ButtonGrid = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.buttonGrid = (function () {
    "use strict";
    var _buttonGridStateKey = "commerceButtonGridState";
    var _buttonOptionsKey = "commerceButtonGridButtonOptions";
    var _buttonWidth = 80;
    var _buttonHeight = 80;
    var _margin = 8;
    var commonOperationsHander;
    var render;
    var buttonClick = function (e) {
        e.stopPropagation();
        var viewModel = this;
        var $button = $(e.currentTarget);
        var $element = $button.closest(".commerceButtonGrid");
        var buttonGridState = $element.data(_buttonGridStateKey);
        var buttonData = $button.data(_buttonOptionsKey);
        $button.blur();
        if (buttonGridState == null || buttonData == null) {
            return;
        }
        var handled = false;
        if (typeof (buttonGridState.buttonClick) === "function") {
            handled = buttonGridState.buttonClick.call(viewModel, buttonData.Action, buttonData.ActionProperty, buttonData.DisplayText);
        }
        if (!handled) {
            handled = commonOperationsHander(buttonData.Action, buttonData.ActionProperty, buttonData, buttonGridState, $element);
            if (!handled) {
                Commerce.NotificationHandler.displayErrorMessage("string_29802");
            }
        }
        else {
            Commerce.Interaction.triggerEvent($element.get(0), Commerce.InteractionEvents.BUTTONGRIDBUTTONCLICKED);
        }
    };
    commonOperationsHander = function (action, actionProperty, buttonData, buttonGridState, $element) {
        switch (action) {
            case Commerce.Operations.RetailOperation.Submenu:
                var buttonGrid = Commerce.ApplicationContext.Instance.tillLayoutProxy.getButtonGridById(actionProperty);
                if (buttonGrid) {
                    render($element, buttonGridState, buttonGrid, buttonGridState.showName, true);
                }
                return true;
        }
        return false;
    };
    render = function (element, buttonGridState, buttonGrid, showName, visible) {
        var $element = $(element);
        if (visible) {
            buttonGridState.$headerContainer.empty();
            var $header = $("<h2>").text(buttonGrid.Name);
            buttonGridState.$headerContainer.append($header);
            if (showName && !Commerce.StringExtensions.isNullOrWhitespace(buttonGrid.Name)) {
                buttonGridState.$headerContainer.removeClass("hide");
            }
            var index_2 = 0;
            buttonGridState.$buttonsContainer.empty();
            var columns_1 = 1;
            var rows_1 = 1;
            var preventButtonInteraction_1 = buttonGridState.preventButtonInteraction;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(buttonGridState.preventButtonInteraction)) {
                if (!ko.isObservable(preventButtonInteraction_1.prevent)) {
                    preventButtonInteraction_1 = null;
                }
                else if (!Commerce.ArrayExtensions.hasElements(preventButtonInteraction_1.actionsToNotPrevent)) {
                    preventButtonInteraction_1.actionsToNotPrevent = [];
                }
            }
            buttonGrid.Buttons.sort(function (a, b) {
                if (a.Row > b.Row || (a.Row === b.Row && a.Column > b.Column)) {
                    return 1;
                }
                return -1;
            }).forEach(function (button) {
                var $button = $("<button></button>");
                $button.data(_buttonOptionsKey, button);
                var buttonClass = "button" + index_2;
                $button.addClass(Commerce.StringExtensions.format("accentBackground highContrastBorder pad0 margin0 positionAbsolute {0}", buttonClass));
                $button.attr("data-action", button.Action);
                if (button.EnableLiveContent) {
                    var $liveContentNumber_1 = $("<div class='right12 top05 textRight padLeft12'><h2 class='margin0'></h2></div>");
                    if (button.NotificationContentAlignment === 0) {
                        $liveContentNumber_1 = $("<div class='center'><h1></h1></div>");
                    }
                    if (Commerce.Session.instance.recentlyPulledNotificationsStatus) {
                        if (Commerce.Session.instance.notifications.hasItem(button.Action)) {
                            Commerce.Session.instance.notifications.getItem(button.Action)
                                .NotificationDetails.forEach(function (notificationDetail) {
                                if (button.ActionProperty === notificationDetail.ActionProperty) {
                                    if (notificationDetail.ItemCount > 99 && button.ColumnSpan === 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 99));
                                    }
                                    else if (notificationDetail.ItemCount > 999 && button.ColumnSpan > 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 999));
                                    }
                                    else {
                                        $liveContentNumber_1.children().text(notificationDetail.ItemCount);
                                    }
                                }
                            });
                        }
                    }
                    Commerce.Session.instance.addRecentlyPulledNotificationsUpdateHandler(element, function (isNew) {
                        if (Commerce.Session.instance.notifications.hasItem(button.Action)) {
                            Commerce.Session.instance.notifications.getItem(button.Action)
                                .NotificationDetails.forEach(function (notificationDetail) {
                                if (button.ActionProperty === notificationDetail.ActionProperty) {
                                    if (notificationDetail.ItemCount > 99 && button.ColumnSpan === 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 99));
                                    }
                                    else if (notificationDetail.ItemCount > 999 && button.ColumnSpan > 1) {
                                        $liveContentNumber_1.children().text(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13209"), 999));
                                    }
                                    else {
                                        $liveContentNumber_1.children().text(notificationDetail.ItemCount);
                                    }
                                }
                            });
                        }
                    });
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        Commerce.Session.instance.removeRecentlyPulledNotificationsUpdateHandler(element, function (isNew) { return; });
                        if (element.winControl) {
                            element.winControl.dispose();
                        }
                    });
                    if (button.EnableCustomFontForPOS) {
                        $liveContentNumber_1.find("h2").css({ "font-size": "inherit", "font-weight": "inherit", "line-height": "100%" });
                    }
                    $button.append($liveContentNumber_1);
                }
                var $displayText = $("<div class='left12 bottom05 textLeft padRight12'><div class='h4 margin0'></div></div>");
                if (Commerce.ObjectExtensions.isNullOrUndefined(button.HideButtonText) || !button.HideButtonText) {
                    $displayText.find(".h4").text(button.DisplayText);
                }
                if (button.EnableCustomFontForPOS) {
                    $displayText.find(".h4").css({ "font-size": "inherit", "font-weight": "inherit", "line-height": "100%" });
                }
                $button.append($displayText);
                $button.attr({
                    title: !Commerce.StringExtensions.isNullOrWhitespace(button.Tooltip) ? button.Tooltip : button.DisplayText,
                    alt: button.DisplayText
                });
                var cssText = "";
                if (!Commerce.StringExtensions.isNullOrWhitespace(button.PictureAsBase64)) {
                    cssText += " background-image:url('data:image;base64," + button.PictureAsBase64 + "');";
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(button.BackColorAsARGB) &&
                    button.BackColorAsARGB.A !== 0) {
                    cssText += " background-color:" + Commerce.CSSHelpers.colorToRGBAStyle(button.BackColorAsARGB) + " !important;";
                }
                if (button.EnableCustomFontForPOS) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.FontSize) &&
                        button.FontSize !== 0) {
                        cssText += "font-size:" + button.FontSize + "px !important; ";
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.FontColorAsARGB) &&
                        button.FontColorAsARGB.A !== 0) {
                        cssText += "color:" + Commerce.CSSHelpers.colorToRGBAStyle(button.FontColorAsARGB) + " !important;";
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(button.FontStyle) &&
                        button.FontStyle !== 0) {
                        cssText += Commerce.CSSHelpers.getButtonFontStyle(button.FontStyle) + " !important;";
                    }
                }
                $button.css("cssText", cssText);
                button.Column = button.Column || 1;
                button.Row = button.Row || 1;
                button.ColumnSpan = button.ColumnSpan || 1;
                button.RowSpan = button.RowSpan || 1;
                var directionStyleName = !Commerce.CSSHelpers.isRightToLeft() ? "left" : "right";
                var styles = {
                    top: (button.Row - 1) * buttonGridState.buttonHeight,
                    width: (buttonGridState.buttonWidth * button.ColumnSpan) - buttonGridState.margin,
                    height: (buttonGridState.buttonHeight * button.RowSpan) - buttonGridState.margin
                };
                styles[directionStyleName] = (button.Column - 1) * buttonGridState.buttonWidth;
                $button.css(styles);
                var buttonColumn = button.Column + (button.ColumnSpan - 1);
                var buttonRow = button.Row + (button.RowSpan - 1);
                columns_1 = buttonColumn > columns_1 ? buttonColumn : columns_1;
                rows_1 = buttonRow > rows_1 ? buttonRow : rows_1;
                $button.click(buttonClick.bind(buttonGridState.callbackContext));
                buttonGridState.$buttonsContainer.append($button);
                Commerce.BubbleHelper.formatAttribute($button, "{0}_{1}", buttonGridState.id, button.ButtonId);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(preventButtonInteraction_1)) {
                    if (preventButtonInteraction_1.actionsToNotPrevent.indexOf(button.Action) < 0) {
                        ko.applyBindingsToNode($button[0], {
                            preventInteraction: preventButtonInteraction_1.prevent
                        });
                    }
                }
                index_2++;
            });
            var containerHeight = buttonGridState.buttonHeight * rows_1 - buttonGridState.margin;
            var containerWidth = buttonGridState.buttonWidth * columns_1 - buttonGridState.margin;
            var containerStyles = {
                height: containerHeight,
                width: containerWidth
            };
            buttonGridState.$buttonsContainer.css(containerStyles);
            $element.show();
        }
        else {
            $element.hide();
        }
    };
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass("commerceButtonGrid");
            $element.empty();
            if (value.id) {
                $element.attr("id", value.id);
            }
            var id = $element.attr("id");
            if (!id) {
                Commerce.ViewModelAdapter.displayMessage("buttonGrid control requires a unique Id", Commerce.MessageType.Error);
                return;
            }
            var buttonGridState = {
                buttonClick: value.buttonClick,
                buttonWidth: value.buttonWidth || _buttonWidth,
                buttonHeight: value.buttonHeight || _buttonHeight,
                callbackContext: value.callbackContext || bindingContext.$root,
                id: id,
                margin: value.margin || _margin,
                $buttonsContainer: null,
                $headerContainer: null,
                showName: value.showName,
                preventButtonInteraction: value.preventButtonInteraction
            };
            var $headerContainer = $("<div></div>").addClass("titleAboveControl padBottom8 padTop8 hide");
            $element.append($headerContainer);
            buttonGridState.$headerContainer = $headerContainer;
            var $buttonsContainer = $("<div class='buttonsContainer positionRelative'></div>");
            $element.append($buttonsContainer);
            buttonGridState.$buttonsContainer = $buttonsContainer;
            $element.data(_buttonGridStateKey, buttonGridState);
            return { controlsDescendantBindings: false };
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
            var $element = $(element);
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var buttonGrid = ko.utils.unwrapObservable(value.data);
            if (Commerce.ObjectExtensions.isNullOrUndefined(buttonGrid)) {
                return;
            }
            var buttonGridState = $element.data(_buttonGridStateKey);
            if (Commerce.ObjectExtensions.isNullOrUndefined(buttonGridState) ||
                Commerce.ObjectExtensions.isNullOrUndefined(buttonGridState.id)) {
                return;
            }
            var visible = value.visible == null ? true : ko.utils.unwrapObservable(value.visible);
            value.showName = value.showName || buttonGrid.DisplayTitleAboveControl;
            render(element, buttonGridState, buttonGrid, value.showName, visible);
        }
    };
})();
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.gridSelectionMode = {
    createAfterRender: function (id) {
        if (Commerce.ObjectExtensions.isNullOrUndefined(id)) {
            return null;
        }
        return function (element) {
            var $element = $(element);
            var enableMultiSelectionForDataList = function (dataListViewModel) {
                dataListViewModel.toggleSelectionMode();
            };
            var enableMultiSelectionForListView = function (listViewControlInstance) {
                listViewControlInstance.selection.clear();
                switch (listViewControlInstance.selectionMode) {
                    case "multi":
                        listViewControlInstance.selectionMode = WinJS.UI.SelectionMode.multi;
                        listViewControlInstance.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                        break;
                    case "single":
                        listViewControlInstance.selectionMode = WinJS.UI.SelectionMode.single;
                        listViewControlInstance.tapBehavior = WinJS.UI.TapBehavior.toggleSelect;
                        $(listViewControlInstance.element).find(".win-surface").addClass("win-selectionmode");
                        break;
                    case "none":
                        listViewControlInstance.selectionMode = WinJS.UI.SelectionMode.none;
                        listViewControlInstance.tapBehavior = WinJS.UI.TapBehavior.invokeOnly;
                        break;
                }
            };
            $element.parent().click(function (event) {
                var $listViewElement = $(id);
                if ($listViewElement.length > 0) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined($listViewElement[0].dataListViewModel)) {
                        var dataListViewModel = $listViewElement[0].dataListViewModel;
                        enableMultiSelectionForDataList(dataListViewModel);
                    }
                    else {
                        var listViewWinControl = $listViewElement[0].winControl;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(listViewWinControl)) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(listViewWinControl.mode)) {
                                listViewWinControl.mode = listViewWinControl.selectionMode;
                            }
                            else if (listViewWinControl.mode === listViewWinControl.selectionMode) {
                                listViewWinControl.selectionMode = WinJS.UI.SelectionMode.none;
                            }
                            else {
                                listViewWinControl.selectionMode = listViewWinControl.mode;
                            }
                            enableMultiSelectionForListView(listViewWinControl);
                        }
                        event.preventDefault();
                        event.stopImmediatePropagation();
                    }
                }
            });
            $element.keydown(function (event) {
                var anyKeyPressHandled = false;
                if ((event.keyCode === 13 || event.keyCode === 108)) {
                    $element.click();
                    anyKeyPressHandled = true;
                }
                if (anyKeyPressHandled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
        };
    },
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        $(element).addClass("gridSelection");
        var afterRender = ko.bindingHandlers.gridSelectionMode.createAfterRender(options.id);
        ko.applyBindingsToNode(element, {
            template: { afterRender: afterRender }
        });
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var HeaderSearchType = Commerce.Client.Entities.HeaderSearchType;
    var HeaderSearch;
    (function (HeaderSearch) {
        var HeaderSearchCategory = (function () {
            function HeaderSearchCategory(label, searchType, subCategories, showSubCategories) {
                var _this = this;
                this._label = label;
                this._searchType = searchType;
                this._subCategories = subCategories;
                this._showSubCategories = showSubCategories;
                this._areSubCategoriesDisplayable = ko.computed(function () {
                    return _this.subCategories && _this.subCategories.length > 0 && _this.showSubCategories();
                });
            }
            Object.defineProperty(HeaderSearchCategory.prototype, "label", {
                get: function () {
                    return this._label;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(HeaderSearchCategory.prototype, "searchType", {
                get: function () {
                    return this._searchType;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(HeaderSearchCategory.prototype, "subCategories", {
                get: function () {
                    return this._subCategories;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(HeaderSearchCategory.prototype, "showSubCategories", {
                get: function () {
                    return this._showSubCategories;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(HeaderSearchCategory.prototype, "areSubCategoriesDisplayable", {
                get: function () {
                    return this._areSubCategoriesDisplayable;
                },
                enumerable: true,
                configurable: true
            });
            HeaderSearchCategory.prototype.getAriaLabel = function (searchText) {
                searchText = Commerce.StringExtensions.isNullOrWhitespace(searchText) ? Commerce.StringExtensions.EMPTY : searchText;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1049"), this.label, searchText);
            };
            return HeaderSearchCategory;
        }());
        HeaderSearch.HeaderSearchCategory = HeaderSearchCategory;
        var HeaderSearchCustomerSearchField = (function () {
            function HeaderSearchCustomerSearchField(customerSearchField) {
                this.CustomerSearchField = customerSearchField;
            }
            Object.defineProperty(HeaderSearchCustomerSearchField.prototype, "label", {
                get: function () {
                    return this.CustomerSearchField.DisplayName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(HeaderSearchCustomerSearchField.prototype, "CustomerSearchField", {
                get: function () {
                    return this._customerSearchField;
                },
                set: function (value) {
                    this._customerSearchField = value;
                },
                enumerable: true,
                configurable: true
            });
            HeaderSearchCustomerSearchField.prototype.getAriaLabel = function (categoryName, searchText) {
                searchText = Commerce.StringExtensions.isNullOrWhitespace(searchText) ? Commerce.StringExtensions.EMPTY : searchText;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1050"), categoryName, this.label, searchText);
            };
            return HeaderSearchCustomerSearchField;
        }());
        HeaderSearch.HeaderSearchCustomerSearchField = HeaderSearchCustomerSearchField;
    })(HeaderSearch || (HeaderSearch = {}));
    var HeaderSearchHandler = (function () {
        function HeaderSearchHandler($element, options) {
            var _this = this;
            this.isProductSuggestionsEnabled = false;
            this._textFormatPreTag = "{";
            this._textFormatPostTag = "}";
            this._defaultNumberOfSearchSuggestions = 5;
            this._splitViewSearchText = ".splitViewSearchText";
            this._searchHelperDivSelector = ".searchOptions";
            this._categorySearchHelperDivSelector = ".categorySearchOptions";
            this._productSuggestionsSearchHelperDivSelector = ".productSearchSuggestionSearchOption";
            this._searchHelperDivSelectedClass = "searchOptionSelectedBackgroundColor";
            this._$element = $element;
            this.isSplitViewSearchPaneActive = ko.observable(false);
            this.isCompactMode = options.isCompactMode;
            this.searchText = options.searchText;
            this.searchClicked = options.searchClicked;
            this.searchBySearchFieldClicked = options.searchBySearchFieldClicked;
            this.$splitViewTitle = $(options.splitViewTitleSelector);
            this._subscriptionListData = [];
            this.setFocusOnSearchText = options.setFocusOnSearchText;
            this._subscriptionListData.push(options.isCompactMode.subscribe(function (newValue) {
                _this.toggleSearchVisibility(!newValue);
            }));
            this._subscriptionListData.push(this.searchText.subscribe(function (partialSearchText) {
                _this.updateProductCustomerSearchContexts(partialSearchText);
            }));
            if (Commerce.ObjectExtensions.isNullOrUndefined(options.hideProductSearchCategory)) {
                options.hideProductSearchCategory = false;
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(options.hideCustomerSearchCategory)) {
                options.hideCustomerSearchCategory = false;
            }
            if (ko.isObservable(options.searchType)) {
                this._searchType = options.searchType;
            }
            else if (Commerce.ObjectExtensions.isNumber(options.searchType)) {
                this._searchType = ko.observable(options.searchType);
            }
            else {
                this._searchType = ko.observable(HeaderSearchType.Product);
            }
            if (ko.isObservable(options.hideProductSuggestions)) {
                this._hideProductSuggestions = options.hideProductSuggestions;
            }
            else if (Commerce.ObjectExtensions.isBoolean(options.hideProductSuggestions)) {
                this._hideProductSuggestions = ko.observable(options.hideProductSuggestions);
            }
            else {
                this._hideProductSuggestions = ko.observable(false);
            }
            if (ko.isObservable(options.allowSearchHelper)) {
                this._allowSearchHelper = options.allowSearchHelper;
            }
            else if (Commerce.ObjectExtensions.isBoolean(options.allowSearchHelper)) {
                this._allowSearchHelper = ko.observable(options.allowSearchHelper);
            }
            else {
                this._allowSearchHelper = ko.observable(true);
            }
            this.showSearchHelper = ko.observable(false);
            this.searchHelperVisible = ko.computed(function () {
                return _this._allowSearchHelper() && _this.showSearchHelper();
            });
            if (ko.isObservable(this.setFocusOnSearchText)) {
                this.setFocusOnSearchText.extend({ notify: "always" });
                this._subscriptionListData.push((this.setFocusOnSearchText.subscribe(function (newValue) {
                    if (newValue) {
                        if (_this.isCompactMode()) {
                            _this.toggleSearchVisibility(newValue);
                        }
                        else {
                            var $splitViewSearchText = _this._$element.find(_this._splitViewSearchText);
                            $splitViewSearchText.focus();
                        }
                    }
                })));
            }
            this.headerSearchSuggestionsCategories = this._createHeaderSearchSuggestionsCategories(options);
            this.isProductSuggestionsEnabled = Commerce.ApplicationContext.Instance.deviceConfiguration.IsProductSuggestionsEnabled;
            this.productSuggestionsFound = ko.observable(false);
            this.productSearchSuggestionsVisible = ko.computed(function () { return _this.productSuggestionsVisible(); });
            this.searchSwitchOptions = ko.observableArray([]);
            this.productSearchSuggestions = ko.observableArray([]);
            this.searchTextAreaHasFocus = ko.observable(false);
            this.searchTextAreaHasFocus.subscribe(function (val) {
                if (val === true) {
                    _this.showSearchHelper(true);
                }
            });
            this.searchType = ko.computed(function () {
                return _this._searchType();
            });
        }
        HeaderSearchHandler.prototype.productSuggestionsVisible = function () {
            return this.isProductSuggestionsEnabled && !this._hideProductSuggestions() && this.productSuggestionsFound();
        };
        HeaderSearchHandler.prototype.searchSuggestionOffScreenClickHandler = function () {
            this.showSearchHelper(false);
        };
        HeaderSearchHandler.prototype.updateProductCustomerSearchContexts = function (partialSearchText) {
            this.productSearchSuggestions.removeAll();
            if (partialSearchText.length >= 1) {
                this.showSearchHelper(true);
                this.productSearchSuggestions.removeAll();
                this.productSuggestionsFound(false);
                if (this.isProductSuggestionsEnabled && !this._hideProductSuggestions()) {
                    this.retrieveAndSetProductSearchTextSuggestionsAsync(partialSearchText);
                }
                this.bindKeyPressWithSearchHelper(this, this._categorySearchHelperDivSelector);
            }
            else {
                this.showSearchHelper(false);
            }
        };
        HeaderSearchHandler.prototype.searchBoxKeyDown = function (data, event) {
            if (event.keyCode === 40 && this.searchHelperVisible()) {
                if ($(this._searchHelperDivSelector).first().length) {
                    $(this._searchHelperDivSelector).first().focus().addClass(this._searchHelperDivSelectedClass);
                }
                event.preventDefault();
            }
            return true;
        };
        HeaderSearchHandler.prototype.invokeSearch = function (category, subCategory) {
            var searchType = Commerce.Client.Entities.HeaderSearchType.Product;
            if (subCategory instanceof HeaderSearch.HeaderSearchCustomerSearchField) {
                searchType = Commerce.Client.Entities.HeaderSearchType.Customer;
                Commerce.RetailLogger.viewModelSearchViewModelInvokeSearch("Product", "Customer");
            }
            else if (category.searchType === HeaderSearchType.Product) {
                Commerce.RetailLogger.viewModelSearchViewModelInvokeSearch("Customer", "Product");
            }
            else {
                searchType = Commerce.Client.Entities.HeaderSearchType.Customer;
                Commerce.RetailLogger.viewModelSearchViewModelInvokeSearch("Product", "Customer");
            }
            this._searchType(searchType);
            this.searchInvokeValidate(category.searchType, subCategory);
        };
        HeaderSearchHandler.prototype.invokeSearchByProductSearchSuggestion = function (productSearchSuggestion) {
            Commerce.RetailLogger.viewModelSearchViewModelInvokeSearch("Customer", "Product");
            this.searchText(productSearchSuggestion.plainText);
            this._searchType(Commerce.Client.Entities.HeaderSearchType.Product);
            this.searchInvokeValidate(this._searchType(), null);
        };
        HeaderSearchHandler.prototype.shouldTopSeperatorForHeaderSearchCategoryBeDisplayed = function (index) {
            var headerSearchSuggestionsCategoriesArray = this.headerSearchSuggestionsCategories();
            if ((index > 0) && (headerSearchSuggestionsCategoriesArray.length > index)) {
                return headerSearchSuggestionsCategoriesArray[index].areSubCategoriesDisplayable() ||
                    headerSearchSuggestionsCategoriesArray[index - 1].areSubCategoriesDisplayable();
            }
            return false;
        };
        HeaderSearchHandler.prototype.showSearchButtonClick = function () {
            this.toggleSearchVisibility(true);
        };
        HeaderSearchHandler.prototype.toggleSearchVisibility = function (isVisible) {
            var $splitViewShowSearch = this._$element.find(".splitViewShowSearch");
            var $splitViewSearchPane = this._$element.find(".splitViewSearchPane");
            var $splitViewSearchText = this._$element.find(this._splitViewSearchText);
            if (isVisible) {
                if ($splitViewSearchPane.is(":hidden")) {
                    if (this.isCompactMode()) {
                        this.$splitViewTitle.hide();
                        $splitViewShowSearch.hide({
                            duration: 0,
                            complete: function () {
                                $splitViewSearchPane.show("slide", { direction: "right", easing: "easeInOutQuint" }, "100", function () {
                                    $splitViewSearchText.focus();
                                });
                            }
                        });
                    }
                    else {
                        $splitViewShowSearch.hide();
                        $splitViewSearchPane.show();
                    }
                }
                else {
                    $splitViewShowSearch.hide();
                }
            }
            else {
                if (!Commerce.ViewModelAdapter.isInView("SearchView")) {
                    if (this.isCompactMode()) {
                        if (this.isSplitViewSearchPaneActive()) {
                            this.$splitViewTitle.hide();
                            $splitViewShowSearch.hide();
                        }
                        else {
                            this.$splitViewTitle.show();
                            $splitViewSearchPane.hide();
                            $splitViewShowSearch.show();
                        }
                    }
                }
            }
        };
        HeaderSearchHandler.prototype.dispose = function () {
            if (Commerce.ArrayExtensions.hasElements(this._subscriptionListData)) {
                this._subscriptionListData.forEach(function (subscription) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(subscription)) {
                        subscription.dispose();
                    }
                });
            }
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        HeaderSearchHandler.prototype.retrieveAndSetProductSearchTextSuggestionsAsync = function (partialSearchText) {
            var _this = this;
            var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
            var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
            var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
            var top = this._defaultNumberOfSearchSuggestions;
            var skip = 0;
            var viewModel = this;
            if (partialSearchText.length > 1) {
                return productManager.getSearchTextSuggestionsAsync(channelId, catalogId, partialSearchText, this._textFormatPreTag, this._textFormatPostTag, top, skip)
                    .done(function (searchSuggestions) {
                    var results = new Array();
                    searchSuggestions.forEach(function (suggestion) {
                        var plainTextValue = suggestion.Value;
                        plainTextValue = plainTextValue.replace(new RegExp(_this._textFormatPreTag, "g"), "");
                        plainTextValue = plainTextValue.replace(new RegExp(_this._textFormatPostTag, "g"), "");
                        var item = {
                            htmlString: suggestion.Value,
                            plainText: plainTextValue,
                            getAriaLabel: function (productLabel) {
                                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1051"), productLabel);
                            }
                        };
                        results.push(item);
                    });
                    if (results.length > 0) {
                        viewModel.productSearchSuggestions(results);
                        viewModel.productSuggestionsFound(true);
                        viewModel.bindKeyPressWithSearchHelper(viewModel, _this._productSuggestionsSearchHelperDivSelector);
                    }
                });
            }
            else {
                return Commerce.VoidAsyncResult.createResolved();
            }
        };
        HeaderSearchHandler.prototype.bindKeyPressWithSearchHelper = function (headerSearchHandler, elementsClassIdentifier) {
            var $splitViewSearchText = headerSearchHandler._$element.find(this._splitViewSearchText);
            var $elementsToBindKeyPressEventHandler = this._$element.find(elementsClassIdentifier);
            $elementsToBindKeyPressEventHandler.on("keydown", function (event) {
                var anyKeyPressHandled = false;
                var $target = $(event.target);
                if (headerSearchHandler.searchHelperVisible()) {
                    if (event.keyCode === 40) {
                        if ($target.nextAll(headerSearchHandler._searchHelperDivSelector + ":eq(0)").length !== 0) {
                            $target.removeClass(headerSearchHandler._searchHelperDivSelectedClass);
                            $target.nextAll(headerSearchHandler._searchHelperDivSelector + ":eq(0)")
                                .focus()
                                .addClass(headerSearchHandler._searchHelperDivSelectedClass);
                        }
                        anyKeyPressHandled = true;
                    }
                    else if (event.keyCode === 38) {
                        $target.removeClass(headerSearchHandler._searchHelperDivSelectedClass);
                        if ($target.prevAll(headerSearchHandler._searchHelperDivSelector + ":eq(0)").length !== 0) {
                            $target.prevAll(headerSearchHandler._searchHelperDivSelector + ":eq(0)")
                                .focus()
                                .addClass(headerSearchHandler._searchHelperDivSelectedClass);
                        }
                        else {
                            $splitViewSearchText.focus();
                        }
                        anyKeyPressHandled = true;
                    }
                    else if (event.keyCode === 13) {
                        $target.click();
                        anyKeyPressHandled = true;
                    }
                    if (anyKeyPressHandled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        return false;
                    }
                }
                return true;
            });
        };
        HeaderSearchHandler.prototype.searchInvokeValidate = function (categoryId, subCategory) {
            var $splitViewSearchText = this._$element.find(this._splitViewSearchText);
            if (this.searchText().length <= 0) {
                this.toggleSearchVisibility(false);
                $splitViewSearchText.focus();
                this.showSearchHelper(false);
            }
            else {
                var searchString = this.searchText();
                var customerSearchByFieldCriteria = void 0;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(subCategory) && (subCategory instanceof HeaderSearch.HeaderSearchCustomerSearchField)) {
                    var customerSearchByFieldCriterion = void 0;
                    customerSearchByFieldCriterion = {
                        SearchTerm: searchString,
                        SearchField: subCategory.CustomerSearchField.SearchField
                    };
                    customerSearchByFieldCriteria = {
                        Criteria: [customerSearchByFieldCriterion]
                    };
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.controlsHeaderSearchSearchInitiated(correlationId);
                if (!Commerce.ViewModelAdapter.isInView("SearchView")) {
                    this.searchText(Commerce.StringExtensions.EMPTY);
                    $splitViewSearchText.trigger("change");
                    var searchEntity = void 0;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(customerSearchByFieldCriteria)) {
                        searchEntity = Commerce.ViewModels.SearchViewSearchEntity.Customer;
                    }
                    else {
                        searchEntity = this._searchType() === HeaderSearchType.Product ?
                            Commerce.ViewModels.SearchViewSearchEntity.Product :
                            Commerce.ViewModels.SearchViewSearchEntity.Customer;
                    }
                    this._searchType(HeaderSearchType.Product);
                    var searchViewOptions = {
                        selectionMode: Commerce.ViewModels.SearchViewSelectionMode.None,
                        searchText: searchString,
                        searchEntity: searchEntity,
                        correlationId: correlationId,
                        customerSearchByFieldCriteria: customerSearchByFieldCriteria
                    };
                    this.showSearchHelper(false);
                    Commerce.ViewModelAdapter.navigate("SearchView", searchViewOptions);
                }
                else {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(customerSearchByFieldCriteria) &&
                        Commerce.ObjectExtensions.isFunction(this.searchBySearchFieldClicked)) {
                        this.searchBySearchFieldClicked(customerSearchByFieldCriteria, correlationId);
                    }
                    else if (Commerce.ObjectExtensions.isFunction(this.searchClicked)) {
                        this.searchClicked.call(this, searchString, Commerce.ObjectExtensions.isNullOrUndefined(categoryId) ? this._searchType() : categoryId, correlationId);
                    }
                    this.showSearchHelper(false);
                }
            }
        };
        HeaderSearchHandler.prototype._createHeaderSearchSuggestionsCategories = function (options) {
            var headerSearchSuggestionsCategories = [];
            var productSearchSuggestionCategory;
            var customerSearchSuggestionCategory;
            if (!options.hideProductSearchCategory) {
                productSearchSuggestionCategory = this._createProductSearchSuggestionCategory();
                headerSearchSuggestionsCategories.push(productSearchSuggestionCategory);
            }
            if (!options.hideCustomerSearchCategory) {
                customerSearchSuggestionCategory = this._createCustomerSearchSuggestionCategory(options.showCustomerSearchFields);
                headerSearchSuggestionsCategories.push(customerSearchSuggestionCategory);
            }
            return ko.observableArray(headerSearchSuggestionsCategories);
        };
        HeaderSearchHandler.prototype._createProductSearchSuggestionCategory = function () {
            return new HeaderSearch.HeaderSearchCategory(Commerce.ViewModelAdapter.getResourceString("string_1043"), HeaderSearchType.Product, null, ko.observable(true));
        };
        HeaderSearchHandler.prototype._createCustomerSearchSuggestionCategory = function (showCustomerSearchFields) {
            var customerSearchSubCategories = this._getCustomerSearchSubCategories();
            var shouldShowCustomerSubCategories = ko.observable(true);
            if (ko.isObservable(showCustomerSearchFields)) {
                shouldShowCustomerSubCategories = showCustomerSearchFields;
            }
            else if (Commerce.ObjectExtensions.isBoolean(showCustomerSearchFields)) {
                shouldShowCustomerSubCategories = ko.observable(showCustomerSearchFields);
            }
            return new HeaderSearch.HeaderSearchCategory(Commerce.ViewModelAdapter.getResourceString("string_1044"), HeaderSearchType.Customer, customerSearchSubCategories, shouldShowCustomerSubCategories);
        };
        HeaderSearchHandler.prototype._getCustomerSearchSubCategories = function () {
            var customerSearchFields = Commerce.ApplicationContext.Instance.customerSearchFields;
            var customerSearchSubCategories = [];
            if (Commerce.ArrayExtensions.hasElements(customerSearchFields)) {
                customerSearchSubCategories = customerSearchFields.filter(function (customerSearchField) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(customerSearchField) && customerSearchField.IsShortcut;
                }).map(function (customerSearchField) {
                    return new HeaderSearch.HeaderSearchCustomerSearchField(customerSearchField);
                });
            }
            return customerSearchSubCategories;
        };
        return HeaderSearchHandler;
    }());
    ko.bindingHandlers.headerSearch = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass("headerSearch");
            var headerSearchHandler = new HeaderSearchHandler($element, options);
            ko.applyBindingsToNode(element, {
                template: {
                    name: "headerSearchTemplate",
                    data: headerSearchHandler
                }
            }, this);
            var $headerSearchControl = $element.find(".headerSearchControl");
            var $splitViewSearchPane = $headerSearchControl.find(".splitViewSearchPane");
            var $searchTextBox = $headerSearchControl.find(".splitViewSearchText");
            if ($searchTextBox !== undefined && $searchTextBox != null && $searchTextBox.length > 0) {
                headerSearchHandler.isSplitViewSearchPaneActive($searchTextBox.val().length > 0);
                headerSearchHandler.toggleSearchVisibility($searchTextBox.val().length > 0);
            }
            $splitViewSearchPane.on("focusout", function () {
                headerSearchHandler.isSplitViewSearchPaneActive($searchTextBox.val().length > 0);
                headerSearchHandler.toggleSearchVisibility($searchTextBox.val().length > 0);
            });
            $searchTextBox.on("focus", function () {
                headerSearchHandler.isSplitViewSearchPaneActive(true);
                headerSearchHandler.updateProductCustomerSearchContexts($searchTextBox.val());
            });
            $headerSearchControl.on("focusout", function (event) {
                if ($(event.relatedTarget).hasClass("searchOptions")) {
                    return;
                }
                headerSearchHandler.showSearchHelper(false);
            });
            headerSearchHandler.toggleSearchVisibility(!headerSearchHandler.isCompactMode());
            ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                if (element.winControl) {
                    element.winControl.dispose();
                }
                headerSearchHandler.dispose();
                headerSearchHandler = null;
            });
            return { controlsDescendantBindings: true };
        }
    };
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DatabaseConnectionStatusDialog = (function (_super) {
            __extends(DatabaseConnectionStatusDialog, _super);
            function DatabaseConnectionStatusDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "DatabaseConnectionStatusDialog";
                _this.status = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isConnected = ko.observable(false);
                return _this;
            }
            DatabaseConnectionStatusDialog.prototype.onShowing = function (dialogState) {
                if (dialogState.connectionStatus) {
                    this.status(Commerce.ViewModelAdapter.getResourceString("string_6610"));
                }
                else {
                    this.status(Commerce.ViewModelAdapter.getResourceString("string_6611"));
                }
                this.isConnected(dialogState.connectionStatus);
                this.visible(true);
            };
            DatabaseConnectionStatusDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return DatabaseConnectionStatusDialog;
        }(Controls.ModalDialog));
        Controls.DatabaseConnectionStatusDialog = DatabaseConnectionStatusDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NotificationCenterDialog = (function (_super) {
            __extends(NotificationCenterDialog, _super);
            function NotificationCenterDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "NotificationCenterDialog";
                _this._notificationCenterViewModel = new Commerce.ViewModels.NotificationCenterViewModel();
                return _this;
            }
            NotificationCenterDialog.prototype.onShowing = function (dialogOptions) {
                Commerce.Session.instance.addRecentlyPulledNotificationsUpdateHandler(this.element, this.viewModel.updateNotifications.bind(this.viewModel));
                Commerce.Session.instance.newNotificationStatus = false;
                this.visible(true);
            };
            Object.defineProperty(NotificationCenterDialog.prototype, "viewModel", {
                get: function () {
                    return this._notificationCenterViewModel;
                },
                enumerable: true,
                configurable: true
            });
            NotificationCenterDialog.prototype.navigate = function (action, actionProperty) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (action === RetailOperation.ViewOrderFulfillmentLines) {
                    Commerce.RetailLogger.fulfillmentViewNavigationStart(actionProperty, correlationId);
                }
                var isNavigateSuccessful = Commerce.Operations.DefaultButtonGridHandler.handleOperation(action, actionProperty, correlationId);
                if (isNavigateSuccessful) {
                    Commerce.NotificationHelper.acknowledgeNotifications(Commerce.Session.instance.lastPullDateTime);
                    this.dialogResult.resolve(Commerce.DialogResult.OK);
                }
            };
            NotificationCenterDialog.prototype.notificationDialogCloseButtonClick = function () {
                Commerce.NotificationHelper.acknowledgeNotifications(Commerce.Session.instance.lastPullDateTime);
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            NotificationCenterDialog.prototype.dispose = function () {
                Commerce.Session.instance.removeRecentlyPulledNotificationsUpdateHandler(this.element, this.viewModel.updateNotifications);
                _super.prototype.dispose.call(this);
            };
            return NotificationCenterDialog;
        }(Controls.ModalDialog));
        Controls.NotificationCenterDialog = NotificationCenterDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var HeaderSplitViewModel = (function () {
        function HeaderSplitViewModel($element, options) {
            var _this = this;
            this._onCartUpdateHandlerProxied = this.updateCartCountDisplayText.bind(this);
            this._onTaskRecorderStateChangedProxied = this.onTaskRecorderStateChanged.bind(this);
            this._onConnectionStatusChangedProxied = this._onConnectionStatusChanged.bind(this);
            this._onNotificationStatusChanged = this.onNewNotificationStatusChanged.bind(this);
            this._$element = $element;
            this._element = $element.get(0);
            this._options = options;
            this.searchClicked = options.searchClick;
            this.searchBySearchFieldClicked = options.searchBySearchFieldClick;
            this.hideProductSuggestions = options.hideProductSuggestions;
            this.searchType = options.searchType;
            if (Commerce.ObjectExtensions.isNullOrUndefined(options.hideCustomerHeaderSearchCategory)) {
                this.hideCustomerHeaderSearchCategory = false;
            }
            else {
                this.hideCustomerHeaderSearchCategory = options.hideCustomerHeaderSearchCategory;
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(options.hideProductHeaderSearchCategory)) {
                this.hideProductHeaderSearchCategory = false;
            }
            else {
                this.hideProductHeaderSearchCategory = options.hideProductHeaderSearchCategory;
            }
            if (Commerce.ObjectExtensions.isFunction(options.getCartUpdateCorrelationId)) {
                this._getCartUpdateCorrelationId = options.getCartUpdateCorrelationId;
            }
            else {
                this._getCartUpdateCorrelationId = function () {
                    return Commerce.StringExtensions.EMPTY;
                };
            }
            this.title = ko.computed(function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.titleResx)) {
                    return Commerce.ViewModelAdapter.getResourceString(ko.utils.unwrapObservable(options.titleResx));
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(options.title)) {
                    return ko.utils.unwrapObservable(options.title);
                }
                return Commerce.StringExtensions.EMPTY;
            });
            this.navigateBackVisible = ko.computed(function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.navigateBackVisible)) {
                    return ko.utils.unwrapObservable(options.navigateBackVisible);
                }
                return true;
            });
            this.setFocusOnSearchText = options.setFocusOnSearchText;
            this.showCustomerSearchFields = options.showCustomerSearchFields;
            this.isConnected = ko.observable(Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online);
            this.isConnectionStatusPulsing = ko.observable(false);
            this.isNewNotifications = ko.observable(Commerce.Session.instance.newNotificationStatus);
            this._isShowTotalLines = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.tillLayoutProxy)) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.tillLayoutProxy.getLayout("transactionScreenLayout")) &&
                    Commerce.ApplicationContext.Instance.tillLayoutProxy.getLayout("transactionScreenLayout").TransactionSummaryOptionsValue ===
                        Commerce.Proxy.Entities.TransactionSummaryOptions.TotalLines) {
                    this._isShowTotalLines = true;
                }
            }
            this.reduceItemCountDescriptionSize = ko.observable(false);
            this.connectivityStatus = ko.computed(function () {
                return _this.isConnected() ? Commerce.ViewModelAdapter.getResourceString("string_6610") : Commerce.ViewModelAdapter.getResourceString("string_6611");
            });
            if (ko.isObservable(this._options.searchText)) {
                this.searchText = this._options.searchText;
            }
            else {
                this.searchText = ko.observable(ko.utils.unwrapObservable(this._options.searchText) || Commerce.StringExtensions.EMPTY);
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(this._options.allowSearchHelper)) {
                this.allowSearchHelper = ko.observable(true);
            }
            else {
                this.allowSearchHelper = this._options.allowSearchHelper;
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(HeaderSplitViewModel.miniCartProductPrimaryImageAttributeMap)) {
                HeaderSplitViewModel.miniCartProductPrimaryImageAttributeMap = new Commerce.Dictionary();
            }
            this.miniCart = ko.observable(null);
            this.currentCartItemCount = ko.observable(Commerce.StringExtensions.EMPTY);
            this.transactionSummaryOptionsText = ko.observable(Commerce.StringExtensions.EMPTY);
            this.updateCartCountDisplayText();
            this.miniCartItemCount
                = ko.observable(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_46"), 0));
            this.isCompactMode = ko.observable($(window).width() <= 960);
            this.isHeaderContentVisible = ko.observable(true);
            this.isSearchVisible = ko.observable(true);
            this.preventInteraction = ko.observable(false);
            this.splitViewTitleSectionRatioEnabled = ko.computed(function () {
                var returnValue = !_this.isCompactMode() && _this.isHeaderContentVisible();
                return returnValue;
            }, this);
            this.isHeaderSplitViewToggleButtonVisible = ko.computed(function () {
                var returnValue;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.inlineNavigation)) {
                    returnValue = ko.utils.unwrapObservable(options.inlineNavigation) !== true;
                }
                else {
                    returnValue = _this.isCompactMode() || !_this.isHeaderContentVisible();
                }
                return returnValue;
            }, this);
            this._isRecordingActive = false;
            this.isRecordingInProgress = ko.observable(false);
            this.isRecordingPaused = ko.observable(false);
            this.isRecordingActive = ko.computed(function () {
                return _this.isRecordingInProgress() || _this.isRecordingPaused();
            });
            this.updateTaskRecorderStateProperties();
            this._isRecordingActive = this.isRecordingActive();
            this.updateOptions(options);
            this.isBusy = ko.observable(false);
            this.renderCategoryTree = ko.observable(false);
            Commerce.Session.instance.addCartStateUpdateHandler(this._element, this._onCartUpdateHandlerProxied);
            Commerce.EventProxy.Instance.addCustomEventHandler(this._element, "ConnectionStatusUpdateEvent", this._onConnectionStatusChangedProxied);
            Commerce.Session.instance.addNewNotificationsStatusUpdateHandler(this._element, this._onNotificationStatusChanged);
            var onPackUnpackProxied = this._onPackUnpack.bind(this);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.channelConfiguration)
                && Commerce.ApplicationContext.Instance.channelConfiguration.NotificationRefreshInterval > 0) {
                if (Commerce.Config.isPhone) {
                    this.addSelfPackingItem("SelfPackingConnectionStatusItem", 2, 1, "SelfPackingConnectionStatusPacked", "SelfPackingConnectionStatusUnpacked", true, onPackUnpackProxied);
                    this.addSelfPackingItem("SelfPackingSettingsItem", 1, 1, "SelfPackingSettingsPacked", "SelfPackingSettingsUnpacked");
                    this.addSelfPackingItem("SelfPackingUserInfoItem", 3, 4, "SelfPackingUserInfoPacked", "SelfPackingUserInfoUnpacked");
                    this.addSelfPackingItem("SelfPackingNotificationItem", 4, 1, "SelfPackingNotificationPacked", "SelfPackingNotificationUnpacked", false);
                }
                else {
                    this.addSelfPackingItem("SelfPackingConnectionStatusItem", 3, 1, "SelfPackingConnectionStatusPacked", "SelfPackingConnectionStatusUnpacked", true, onPackUnpackProxied);
                    this.addSelfPackingItem("SelfPackingSettingsItem", 2, 1, "SelfPackingSettingsPacked", "SelfPackingSettingsUnpacked");
                    this.addSelfPackingItem("SelfPackingHelpItem", 1, 1, "SelfPackingHelpPacked", "SelfPackingHelpUnpacked");
                    this.addSelfPackingItem("SelfPackingUserInfoItem", 4, 4, "SelfPackingUserInfoPacked", "SelfPackingUserInfoUnpacked");
                    this.addSelfPackingItem("SelfPackingNotificationItem", 5, 1, "SelfPackingNotificationPacked", "SelfPackingNotificationUnpacked", false);
                    if (this.isRecordingActive()) {
                        this.addTaskRecorderSelfPackingItem();
                    }
                }
            }
            else {
                if (Commerce.Config.isPhone) {
                    this.addSelfPackingItem("SelfPackingConnectionStatusItem", 2, 1, "SelfPackingConnectionStatusPacked", "SelfPackingConnectionStatusUnpacked", true, onPackUnpackProxied);
                    this.addSelfPackingItem("SelfPackingSettingsItem", 1, 1, "SelfPackingSettingsPacked", "SelfPackingSettingsUnpacked");
                    this.addSelfPackingItem("SelfPackingUserInfoItem", 3, 4, "SelfPackingUserInfoPacked", "SelfPackingUserInfoUnpacked");
                }
                else {
                    this.addSelfPackingItem("SelfPackingConnectionStatusItem", 3, 1, "SelfPackingConnectionStatusPacked", "SelfPackingConnectionStatusUnpacked", true, onPackUnpackProxied);
                    this.addSelfPackingItem("SelfPackingSettingsItem", 2, 1, "SelfPackingSettingsPacked", "SelfPackingSettingsUnpacked");
                    this.addSelfPackingItem("SelfPackingHelpItem", 1, 1, "SelfPackingHelpPacked", "SelfPackingHelpUnpacked");
                    this.addSelfPackingItem("SelfPackingUserInfoItem", 4, 4, "SelfPackingUserInfoPacked", "SelfPackingUserInfoUnpacked");
                    if (this.isRecordingActive()) {
                        this.addTaskRecorderSelfPackingItem();
                    }
                }
            }
            this.isRecordingActive.subscribe(function (newValue) {
                if (newValue === _this._isRecordingActive || Commerce.Config.isPhone) {
                    return;
                }
                _this._isRecordingActive = newValue;
                if (_this._isRecordingActive) {
                    _this.addTaskRecorderSelfPackingItem();
                }
                else {
                    _this.removeTaskRecorderSelfPackingItem();
                }
                var selfPackingList = Commerce.KnockoutHandlerHelper.getHandlerInstance(_this._$element, ".headerSplitViewSelfPackingList");
                selfPackingList.refresh();
            });
            Commerce.ViewModelAdapter.addTaskRecorderStateChangedEvent(this._onTaskRecorderStateChangedProxied);
            if (Commerce.ObjectExtensions.isNullOrUndefined(this._compactModeMediaQuery)) {
                this._compactModeMediaQuery = window.matchMedia("(max-width: 960px)");
                this._compactModeSwitchHandler = (function (mediaQueryArgs) {
                    var isCompactSize = mediaQueryArgs.matches;
                    _this.isCompactMode(isCompactSize);
                    _this.toggleCompactMode(isCompactSize);
                }).bind(this);
                this._compactModeMediaQuery.addListener(this._compactModeSwitchHandler);
            }
            this._windowResizeHandler = this.onWindowResize.bind(this);
            window.addEventListener("resize", this._windowResizeHandler);
            ko.utils.domNodeDisposal.addDisposeCallback($element.get(0), function (e) {
                _this.dispose();
            });
        }
        Object.defineProperty(HeaderSplitViewModel, "isBackButtonAllowed", {
            get: function () {
                return Commerce.Utilities.LogonHelper.isLoggedOnForPOS();
            },
            enumerable: true,
            configurable: true
        });
        HeaderSplitViewModel.getProductPrimaryImage = function (miniCartLine) {
            var imageDetails = HeaderSplitViewModel.miniCartProductPrimaryImageAttributeMap.getItem(miniCartLine.ProductId);
            if (Commerce.ObjectExtensions.isNullOrUndefined(imageDetails)) {
                var product = Commerce.Session.instance.getFromProductsInCartCache(miniCartLine.ProductId);
                imageDetails = ko.observable({ Uri: ko.observable(Commerce.DefaultImages.ProductSmall), AltText: ko.observable(Commerce.StringExtensions.EMPTY) });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                    imageDetails().AltText(product.Name);
                }
                HeaderSplitViewModel.miniCartProductPrimaryImageAttributeMap.setItem(miniCartLine.ProductId, imageDetails);
                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                    var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                    var catalogId = Commerce.Session.instance.productCatalogStore.Context.CatalogId;
                    productManager.getMediaLocationsAsync(miniCartLine.ProductId, channelId, catalogId, 1, 0)
                        .done(function (mediaLocations) {
                        var mediaLocation = Commerce.ArrayExtensions.firstOrUndefined(mediaLocations);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(mediaLocation) && !Commerce.StringExtensions.isEmptyOrWhitespace(mediaLocation.Uri)) {
                            imageDetails().Uri(Commerce.Formatters.ImageUrlFormatter(mediaLocation.Uri));
                        }
                        if (!Commerce.StringExtensions.isNullOrWhitespace(mediaLocation.AltText)) {
                            imageDetails().AltText(mediaLocation.AltText);
                        }
                    });
                }
            }
            return imageDetails;
        };
        HeaderSplitViewModel.callNotificationCenterDialog = function () {
            var state = {
                notifications: Commerce.Session.instance.notifications
            };
            var notificationCenterDialog = new Controls.NotificationCenterDialog();
            notificationCenterDialog.show(state)
                .onError(function (errors) {
                Commerce.NotificationHandler.displayClientErrors(errors);
            });
        };
        HeaderSplitViewModel.callConnectivityStatusDialog = function () {
            var state = {
                connectionStatus: Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online
            };
            var dataBaseConnectionStatusDialog = new Controls.DatabaseConnectionStatusDialog();
            dataBaseConnectionStatusDialog.show(state)
                .onError(function (errors) {
                Commerce.NotificationHandler.displayClientErrors(errors);
            });
        };
        HeaderSplitViewModel.callUserInfoDialog = function () {
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var activity = new Commerce.Activities.UserInfoActivity({
                    title: Commerce.StringExtensions.EMPTY,
                    subTitle: Commerce.StringExtensions.EMPTY
                });
                activity.responseHandler = function () {
                    return asyncQueue.cancelOn(Commerce.AsyncResult.createResolved());
                };
                return activity.execute().done(function () {
                    if (!activity.response) {
                        asyncQueue.cancel();
                        return;
                    }
                });
            });
            return asyncQueue.run();
        };
        HeaderSplitViewModel.prototype.dispose = function () {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._compactModeMediaQuery)) {
                this._compactModeMediaQuery.removeListener(this._compactModeSwitchHandler);
                this._compactModeMediaQuery = null;
                this._compactModeSwitchHandler = null;
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._windowResizeHandler)) {
                window.removeEventListener("resize", this._windowResizeHandler);
            }
            Commerce.ViewModelAdapter.removeTaskRecorderStateChangedEvent(this._onTaskRecorderStateChangedProxied);
            Commerce.Session.instance.removeCartStateUpdateHandler(this._element, this._onCartUpdateHandlerProxied);
            Commerce.EventProxy.Instance.removeCustomEventHandler(this._element, "ConnectionStatusUpdateEvent", this._onConnectionStatusChangedProxied);
            Commerce.Session.instance.removeNewNotificationsStatusUpdateHandler(this._element, this._onNotificationStatusChanged);
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        HeaderSplitViewModel.prototype.updateOptions = function (options) {
            if (!Commerce.ObjectExtensions.isObject(options)) {
                throw "Cannot execute updateOptions with undefined options";
            }
            this._options = options;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(options.headerContentVisible)) {
                this.isHeaderContentVisible(ko.utils.unwrapObservable(options.headerContentVisible) === true);
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(options.inlineNavigation)) {
                this.toggleInlineNavigation(ko.utils.unwrapObservable(options.inlineNavigation) === true);
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(options.hideNavigateBar)
                && (ko.utils.unwrapObservable(options.hideNavigateBar) === true)
                && this.isHeaderSplitViewToggleButtonVisible()
                && (!Commerce.ObjectExtensions.isNullOrUndefined(this._element.winControl) && this._element.winControl._isOpenedMode)) {
                this.clickToggleButton();
            }
        };
        HeaderSplitViewModel.prototype.openRecordingPane = function () {
            Commerce.TaskRecorder.activateTaskRecorder();
        };
        HeaderSplitViewModel.prototype.openHelpPane = function () {
            Commerce.TaskRecorder.activateTaskRecorder("Help");
        };
        HeaderSplitViewModel.prototype.onTaskRecorderStateChanged = function () {
            this.updateTaskRecorderStateProperties();
        };
        HeaderSplitViewModel.prototype.hideAllExtraPanels = function () {
            var $allExtraPanels = this._$element.find(HeaderSplitViewModel.selectorMiniCartPanel + ", " + HeaderSplitViewModel.selectorCategoriesPanel);
            $allExtraPanels.each(function (index, elem) {
                var $panel = $(elem);
                if ($panel.data(HeaderSplitViewModel.panelVisibilityAttr) === true) {
                    $panel.hide();
                    $panel.data(HeaderSplitViewModel.panelVisibilityAttr, false);
                }
            });
        };
        HeaderSplitViewModel.prototype.toggleCompactMode = function (isCompact) {
            this.toggleInlineNavigation(!isCompact);
            this.onWindowResize();
        };
        HeaderSplitViewModel.prototype.showHelpViewPanelClick = function () {
            Commerce.TaskRecorder.activateTaskRecorder("Help");
        };
        HeaderSplitViewModel.prototype.navigateToCatalogsView = function () {
            Commerce.ViewModelAdapter.navigate("CatalogsView");
        };
        HeaderSplitViewModel.prototype.navigateToProductsView = function (data) {
            var productCategoryName = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(data) &&
                !Commerce.ObjectExtensions.isNullOrUndefined(data.category) &&
                !Commerce.ObjectExtensions.isNullOrUndefined(data.category.Name)) {
                productCategoryName = data.category.Name;
            }
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            Commerce.RetailLogger.viewsHeaderSplitViewProductCategorySelected(correlationId, productCategoryName);
            Commerce.ViewModelAdapter.navigate("ProductsView", {
                category: data.category,
                activeMode: Commerce.ViewModels.ProductsViewModelActiveMode.Products,
                correlationId: correlationId
            });
        };
        HeaderSplitViewModel.prototype.logOff = function () {
            var _this = this;
            this.isBusy(true);
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))).fail(function (error) {
                _this.isBusy(false);
                Commerce.NotificationHandler.displayClientErrors(error, "string_509");
            });
        };
        HeaderSplitViewModel.prototype.showMiniCart = function () {
            var labelForCartTotalLineOrItemCount;
            var cartTotalLineOrItemCount;
            this.showExtraPanel(HeaderSplitViewModel.selectorMiniCartPanel);
            this.miniCart(Commerce.Session.instance.cart);
            if (this._isShowTotalLines) {
                cartTotalLineOrItemCount = Commerce.CartHelper.GetNonVoidedCartLines(Commerce.Session.instance.cart.CartLines).length;
                labelForCartTotalLineOrItemCount = cartTotalLineOrItemCount === 1 ?
                    Commerce.ViewModelAdapter.getResourceString("string_45") : Commerce.ViewModelAdapter.getResourceString("string_46");
            }
            else {
                cartTotalLineOrItemCount = !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart.TotalItems) ? Commerce.Session.instance.cart.TotalItems : 0;
                labelForCartTotalLineOrItemCount = cartTotalLineOrItemCount === 1 ?
                    Commerce.ViewModelAdapter.getResourceString("string_29991") : Commerce.ViewModelAdapter.getResourceString("string_29992");
            }
            this.miniCartItemCount(Commerce.StringExtensions.format(labelForCartTotalLineOrItemCount, cartTotalLineOrItemCount));
        };
        HeaderSplitViewModel.prototype.showCategories = function () {
            if (!this.renderCategoryTree()) {
                this.renderCategoryTree(true);
            }
            this.showExtraPanel(HeaderSplitViewModel.selectorCategoriesPanel);
        };
        HeaderSplitViewModel.prototype.userPanelClick = function () {
            this.hideAllExtraPanels();
            HeaderSplitViewModel.callUserInfoDialog();
        };
        HeaderSplitViewModel.prototype.navigateBack = function () {
            Commerce.navigator.navigateBack();
        };
        HeaderSplitViewModel.prototype._onConnectionStatusChanged = function (args) {
            this.isConnected(args.newStatus === Commerce.Client.Entities.ConnectionStatusType.Online);
            if (!this.isConnected()) {
                this._pulseConnectionStatus();
            }
        };
        HeaderSplitViewModel.prototype._pulseConnectionStatus = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this._ellipsisElement)) {
                this.isConnectionStatusPulsing(true);
                setTimeout(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.isConnectionStatusPulsing)) {
                        _this.isConnectionStatusPulsing(false);
                    }
                }, 2000);
            }
            else {
                this._ellipsisElement.addClass("pulse");
                setTimeout(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._ellipsisElement)) {
                        _this._ellipsisElement.removeClass("pulse");
                    }
                }, 2000);
            }
        };
        HeaderSplitViewModel.prototype._onPackUnpack = function (id, isPacked) {
            if (isPacked) {
                var $overflowButton = this._$element.find(".selfPackingListOverflowEllipsis");
                this._ellipsisElement = $overflowButton;
            }
            else {
                this._ellipsisElement = null;
            }
        };
        HeaderSplitViewModel.prototype.onNewNotificationStatusChanged = function (newStatus) {
            this.isNewNotifications(newStatus);
        };
        HeaderSplitViewModel.prototype.addSelfPackingItem = function (id, collapseOrder, widthInBlocks, templatePacked, templateUnpacked, toRight, onPackUnpack) {
            if (toRight === void 0) { toRight = true; }
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.selfPackingListItems)) {
                this.selfPackingListItems = {
                    rightList: [],
                    leftList: []
                };
            }
            var newItem = {
                id: id,
                collapseOrder: collapseOrder,
                widthInBlocks: widthInBlocks,
                templatePacked: templatePacked,
                templateUnpacked: templateUnpacked,
                data: this,
                onPackUnpack: onPackUnpack
            };
            if (toRight) {
                this.selfPackingListItems.rightList.push(newItem);
            }
            else {
                this.selfPackingListItems.leftList.push(newItem);
            }
        };
        HeaderSplitViewModel.prototype.addTaskRecorderSelfPackingItem = function () {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.channelConfiguration)
                && Commerce.ApplicationContext.Instance.channelConfiguration.NotificationRefreshInterval > 0) {
                this.addSelfPackingItem(HeaderSplitViewModel.taskRecorderSelfPackingItemId, 6, 2, "SelfPackingTaskRecorderPacked", "SelfPackingTaskRecorderUnpacked");
            }
            else {
                this.addSelfPackingItem(HeaderSplitViewModel.taskRecorderSelfPackingItemId, 5, 2, "SelfPackingTaskRecorderPacked", "SelfPackingTaskRecorderUnpacked");
            }
        };
        HeaderSplitViewModel.prototype.removeTaskRecorderSelfPackingItem = function () {
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.selfPackingListItems)) {
                return;
            }
            var removeIndex = Commerce.ArrayExtensions.findIndex(this.selfPackingListItems.rightList, function (element) {
                return element.id === HeaderSplitViewModel.taskRecorderSelfPackingItemId;
            });
            if (removeIndex !== -1) {
                this.selfPackingListItems.rightList.splice(removeIndex, 1);
            }
        };
        HeaderSplitViewModel.prototype.updateTaskRecorderStateProperties = function () {
            var currentState = Commerce.TaskRecorder.getTaskRecorderState();
            this.isRecordingInProgress(currentState === Commerce.TaskRecorder.TaskRecorderState.Recording);
            this.isRecordingPaused(currentState === Commerce.TaskRecorder.TaskRecorderState.RecordingPaused);
        };
        HeaderSplitViewModel.prototype.getNonVoidedTotalLinesOrItems = function () {
            var linesOrItemsCount = 0;
            if (this._isShowTotalLines) {
                linesOrItemsCount = Commerce.CartHelper.GetNonVoidedCartLines(Commerce.Session.instance.cart.CartLines).length;
            }
            else {
                linesOrItemsCount = !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart.TotalItems) ? Commerce.Session.instance.cart.TotalItems : 0;
            }
            return linesOrItemsCount;
        };
        HeaderSplitViewModel.prototype.showExtraPanel = function (panelSelector) {
            var _this = this;
            var $extraPanels = this._$element.find(panelSelector);
            if ($extraPanels.data(HeaderSplitViewModel.panelVisibilityAttr) !== true) {
                this.hideAllExtraPanels();
                var animationCompleteCallBack_1 = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._element)) {
                        _this.openSplitViewPane();
                    }
                };
                var dir_1 = Commerce.CSSHelpers.isRightToLeft() ? "right" : "left";
                $extraPanels.each(function (index, elem) {
                    var $panel = $(elem);
                    if ($panel.data(HeaderSplitViewModel.panelVisibilityAttr) === true) {
                        $panel.hide("slide", { direction: dir_1 }, "300", animationCompleteCallBack_1);
                        $panel.data(HeaderSplitViewModel.panelVisibilityAttr, false);
                    }
                    else {
                        $panel.show("slide", { direction: dir_1 }, "300", animationCompleteCallBack_1);
                        $panel.data(HeaderSplitViewModel.panelVisibilityAttr, true);
                        $panel.focus();
                        var tabIndex = "tabindex";
                        if (Commerce.StringExtensions.isNullOrWhitespace($panel.attr(tabIndex))) {
                            $panel.attr(tabIndex, "-1");
                        }
                    }
                });
            }
        };
        HeaderSplitViewModel.prototype.openSplitViewPane = function () {
            var splitView = this._$element[0].winControl;
            if (!splitView.paneOpened) {
                splitView.openPane();
            }
        };
        HeaderSplitViewModel.prototype.toggleInlineNavigation = function (isInline) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._options.inlineNavigation)) {
                isInline = ko.utils.unwrapObservable(this._options.inlineNavigation) === true;
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._element.winControl)) {
                this._element.winControl.closedDisplayMode = !isInline || !this.isHeaderContentVisible() ? "none" : "inline";
            }
        };
        HeaderSplitViewModel.prototype.onWindowResize = function () {
            var selfPackingList = Commerce.KnockoutHandlerHelper.getHandlerInstance(this._$element, ".headerSplitViewSelfPackingList");
            var selfPackingListWidth = 0;
            if (this.isCompactMode()) {
                selfPackingListWidth = this._$element.find(".win-splitview-content").width() / 3;
            }
            else {
                selfPackingListWidth = this._$element.find(".selfPackingControlSection").width();
            }
            selfPackingList.resize(selfPackingListWidth);
        };
        HeaderSplitViewModel.prototype.updateCartCountDisplayText = function () {
            var displayText = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart) &&
                Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.cart.CartLines)) {
                var linesOrItemsCount = this.getNonVoidedTotalLinesOrItems();
                if (linesOrItemsCount > 99) {
                    displayText = "99+";
                    this.reduceItemCountDescriptionSize(true);
                }
                else {
                    displayText = linesOrItemsCount.toString();
                    if (displayText.length > 2) {
                        this.reduceItemCountDescriptionSize(true);
                    }
                    else {
                        this.reduceItemCountDescriptionSize(false);
                    }
                }
            }
            else {
                displayText = "0";
                this.reduceItemCountDescriptionSize(false);
            }
            this.currentCartItemCount(displayText);
            var labelForCartTotalLineOrItemCount;
            var cartTotalLineOrItemCount;
            if (this._isShowTotalLines) {
                cartTotalLineOrItemCount = Commerce.CartHelper.GetNonVoidedCartLines(Commerce.Session.instance.cart.CartLines).length;
                labelForCartTotalLineOrItemCount = cartTotalLineOrItemCount === 1 ?
                    Commerce.ViewModelAdapter.getResourceString("string_1879") : Commerce.ViewModelAdapter.getResourceString("string_1877");
            }
            else {
                cartTotalLineOrItemCount = !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart.TotalItems) ? Commerce.Session.instance.cart.TotalItems : 0;
                labelForCartTotalLineOrItemCount = cartTotalLineOrItemCount === 1 ?
                    Commerce.ViewModelAdapter.getResourceString("string_1880") : Commerce.ViewModelAdapter.getResourceString("string_1878");
            }
            this.transactionSummaryOptionsText(labelForCartTotalLineOrItemCount);
            var numberOfCartLinesInCart = Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.cart.CartLines) ?
                Commerce.Session.instance.cart.CartLines.length :
                0;
            Commerce.RetailLogger.viewsHeaderSplitViewCartDisplayTextUpdated(this._getCartUpdateCorrelationId(), displayText, numberOfCartLinesInCart);
        };
        HeaderSplitViewModel.prototype.clickToggleButton = function () {
            var toggleButtons = this._element.getElementsByClassName("headerSplitViewToggleButton");
            if (toggleButtons.length === 0) {
                return;
            }
            var toggleButton = toggleButtons[0];
            toggleButton.click();
        };
        HeaderSplitViewModel.selectorCategoriesPanel = "#splitViewCategoriesPanel";
        HeaderSplitViewModel.selectorMiniCartPanel = "#splitViewMiniCartPanel";
        HeaderSplitViewModel.miniCartProductPrimaryImageAttributeMap = null;
        HeaderSplitViewModel.panelVisibilityAttr = "panelVisible";
        HeaderSplitViewModel.taskRecorderSelfPackingItemId = "SelfPackingTaskRecorderItem";
        return HeaderSplitViewModel;
    }());
    Commerce.HeaderSplitViewModel = HeaderSplitViewModel;
    var Controls;
    (function (Controls) {
        var HeaderSplitView;
        (function (HeaderSplitView) {
            function createHeaderSplitViewModel($element, options) {
                return new HeaderSplitViewModel($element, options);
            }
            HeaderSplitView.createHeaderSplitViewModel = createHeaderSplitViewModel;
        })(HeaderSplitView = Controls.HeaderSplitView || (Controls.HeaderSplitView = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
Commerce.Controls.HeaderSplitView.HeaderSplitViewBindingHandler.setViewModelFactory(Commerce.Controls.HeaderSplitView.createHeaderSplitViewModel);
ko.bindingHandlers.headerSplitView = new Commerce.Controls.HeaderSplitView.HeaderSplitViewBindingHandler();
ko.bindingHandlers.headerSplitViewButton = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        if (element.nodeName !== "BUTTON") {
            throw "headerSplitViewButton can only be used with <button></button> element.";
        }
        var $element = $(element);
        var dataSource = valueAccessor();
        var hasCustomContent = element.children.length !== 0;
        $element.addClass("headerSplitViewNavButton row height48 width100Percent navigationButton pad0 noBorder accentBackgroundHover accentBackgroundActive");
        $element.click(function (eventObject) {
            if (Commerce.ObjectExtensions.isFunction(dataSource.click)) {
                dataSource.click.call(viewModel);
            }
            else {
                $element.closest(".headerSplitView").each(function (index, elem) {
                    var headerSplitViewControl = elem.winControl;
                    if ($element.attr("id") !== "splitViewToggleCategoriesButton") {
                        $(elem).find(Commerce.HeaderSplitViewModel.selectorCategoriesPanel).hide();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(headerSplitViewControl) &&
                            Commerce.ObjectExtensions.isFunction(headerSplitViewControl.closePane)) {
                            headerSplitViewControl.closePane();
                        }
                    }
                });
            }
            eventObject.preventDefault();
            eventObject.stopPropagation();
        });
        if (!hasCustomContent) {
            ko.applyBindingsToNode(element, {
                template: { name: "headerSplitViewNavButtonTemplate", data: dataSource }
            });
        }
        return { controlsDescendantBindings: !hasCustomContent };
    }
};
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var IncrementalControl;
        (function (IncrementalControl) {
            var CategoryTreeNode = (function () {
                function CategoryTreeNode() {
                }
                return CategoryTreeNode;
            }());
            var CategoryTreeDataRenderer = (function () {
                function CategoryTreeDataRenderer(categoryNodes, onClick) {
                    this._categoryTreeNodes = [];
                    this.getCategoryTreeNodes(this._categoryTreeNodes, categoryNodes, 0);
                    this._maxIndex = Commerce.ObjectExtensions.isNullOrUndefined(this._categoryTreeNodes) ? -1 : this._categoryTreeNodes.length - 1;
                    this._index = -1;
                    this._onClick = onClick;
                }
                CategoryTreeDataRenderer.prototype.moveNext = function () {
                    if (this._index <= this._maxIndex) {
                        this._index++;
                    }
                    return this._index <= this._maxIndex;
                };
                CategoryTreeDataRenderer.prototype.current = function () {
                    if ((this._index > -1) && (this._index <= this._maxIndex)) {
                        var categoryTreeNode = this._categoryTreeNodes[this._index];
                        var $dialogContainer = $(CategoryTreeDataRenderer.EMPTY_DIV_HTML);
                        ko.cleanNode($dialogContainer[0]);
                        ko.applyBindingsToNode($dialogContainer[0], {
                            template: {
                                name: CategoryTreeDataRenderer.CATEGORY_TREE_DATA_RENDERER_NODE_TEMPLATE_ID,
                                data: { category: categoryTreeNode.categoryNode.value, onClick: this._onClick }
                            }
                        });
                        var padding = void 0;
                        if (Commerce.CSSHelpers.isRightToLeft()) {
                            padding = "padding-right";
                        }
                        else {
                            padding = "padding-left";
                        }
                        $dialogContainer.css(padding, "calc(" + categoryTreeNode.level.toString() + " * 20px)");
                        return $dialogContainer[0];
                    }
                    return null;
                };
                CategoryTreeDataRenderer.prototype.getRendererContainerStyles = function () {
                    return "pad0 padRight20 padBottom100 marginTop0";
                };
                CategoryTreeDataRenderer.prototype.reset = function () {
                    this._index = -1;
                };
                CategoryTreeDataRenderer.prototype.dispose = function () {
                    this._categoryTreeNodes = null;
                    this._onClick = null;
                };
                CategoryTreeDataRenderer.prototype.getCategoryTreeNodes = function (categoryTreeNodes, categoryNodes, level) {
                    var _this = this;
                    if (Commerce.ArrayExtensions.hasElements(categoryNodes)) {
                        categoryNodes.forEach(function (categoryNode) {
                            categoryTreeNodes.push({ categoryNode: categoryNode, level: level });
                            _this.getCategoryTreeNodes(categoryTreeNodes, categoryNode.children, level + 1);
                        });
                    }
                };
                CategoryTreeDataRenderer.EMPTY_DIV_HTML = "<div></div>";
                CategoryTreeDataRenderer.CATEGORY_TREE_DATA_RENDERER_NODE_TEMPLATE_ID = "categoryTreeDataRendererNodeTemplate";
                return CategoryTreeDataRenderer;
            }());
            IncrementalControl.CategoryTreeDataRenderer = CategoryTreeDataRenderer;
        })(IncrementalControl = Controls.IncrementalControl || (Controls.IncrementalControl = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IncrementalScrollableControlViewModel = (function () {
        function IncrementalScrollableControlViewModel(element, options) {
            var _this = this;
            this._numberItemsToRenderIfRenderedSizeInfoNotAvailable = IncrementalScrollableControlViewModel.DEFAULT_NUMBER_ITEMS_TO_RENDER;
            ko.cleanNode(element);
            ko.applyBindingsToNode(element, {
                template: {
                    name: "incrementalScrollableControlTemplate"
                }
            });
            this._scrollableDivElement = element.children[0];
            this._dataContainerElement = this._scrollableDivElement.children[0];
            var renderedContainedStyles = options.dataRenderer.getRendererContainerStyles();
            if (!Commerce.StringExtensions.isNullOrWhitespace(renderedContainedStyles)) {
                $(this._dataContainerElement).addClass(renderedContainedStyles);
            }
            this.updateOptions(options);
            this._scrollableDivElement.onscroll = this.renderItems.bind(this);
            this._windowResizeHandler = this.renderItems.bind(this);
            window.addEventListener("resize", this._windowResizeHandler);
            ko.utils.domNodeDisposal.addDisposeCallback($(this._scrollableDivElement).get(0), function (e) {
                _this.dispose();
            });
        }
        IncrementalScrollableControlViewModel.prototype.renderItems = function () {
            var scrollableDivElement = this._scrollableDivElement;
            var dataRenderer = this._options.dataRenderer;
            if (scrollableDivElement.clientHeight > 0) {
                var offSetHeight = IncrementalScrollableControlViewModel.DEFAULT_ADDITONAL_ITEM_RENDER_FACTOR * scrollableDivElement.clientHeight;
                var clientHeight = scrollableDivElement.clientHeight;
                while ((scrollableDivElement.scrollTop >= (scrollableDivElement.scrollHeight - offSetHeight) - clientHeight) &&
                    dataRenderer.moveNext()) {
                    this._numRenderedElements++;
                    scrollableDivElement.children[0].appendChild(dataRenderer.current());
                }
            }
            else {
                while (((this._numRenderedElements < this._numberItemsToRenderIfRenderedSizeInfoNotAvailable) ||
                    (this._numberItemsToRenderIfRenderedSizeInfoNotAvailable < 0)) &&
                    dataRenderer.moveNext()) {
                    this._numRenderedElements++;
                    scrollableDivElement.children[0].appendChild(dataRenderer.current());
                }
            }
        };
        IncrementalScrollableControlViewModel.prototype.dispose = function () {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._windowResizeHandler)) {
                window.removeEventListener("resize", this._windowResizeHandler);
            }
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        IncrementalScrollableControlViewModel.prototype.updateOptions = function (options) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(options) || Commerce.ObjectExtensions.isNullOrUndefined(options.dataRenderer)) {
                throw "The options and data renderer for an incrementalScrollableControl must be specified.";
            }
            this._options = options;
            this.clearControlItems();
            this.renderItems();
        };
        IncrementalScrollableControlViewModel.prototype.clearControlItems = function () {
            this._numRenderedElements = 0;
            $(this._dataContainerElement).empty();
            this._options.dataRenderer.reset();
        };
        IncrementalScrollableControlViewModel.DEFAULT_ADDITONAL_ITEM_RENDER_FACTOR = .20;
        IncrementalScrollableControlViewModel.DEFAULT_NUMBER_ITEMS_TO_RENDER = 40;
        return IncrementalScrollableControlViewModel;
    }());
    Commerce.IncrementalScrollableControlViewModel = IncrementalScrollableControlViewModel;
    var IncrementalScrollableControlHandler = (function () {
        function IncrementalScrollableControlHandler() {
        }
        IncrementalScrollableControlHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || { dataRenderer: null, onClick: null };
            var incrementalScrollableControlViewModel = new IncrementalScrollableControlViewModel(element, options);
            element.controlViewModel = incrementalScrollableControlViewModel;
            return { controlsDescendantBindings: true };
        };
        IncrementalScrollableControlHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || { dataRenderer: null, onClick: null };
            var incrementalScrollableControlViewModel = element.controlViewModel;
            incrementalScrollableControlViewModel.updateOptions(options);
        };
        return IncrementalScrollableControlHandler;
    }());
    Commerce.IncrementalScrollableControlHandler = IncrementalScrollableControlHandler;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.incrementalScrollableControl = new Commerce.IncrementalScrollableControlHandler();
ko.bindingHandlers.loader = new Commerce.Controls.Loader.LoaderBindingHandler();
ko.bindingHandlers.menu = new Commerce.Controls.Menu.MenuBindingHandler();
ko.bindingHandlers.menuCommand = new Commerce.Controls.Menu.MenuCommandBindingHandler();
ko.bindingHandlers.toggleMenu = new Commerce.Controls.Menu.ToggleMenuBindingHandler();
ko.bindingHandlers.toggleMenuCommand = new Commerce.Controls.Menu.ToggleMenuCommandBindingHandler();
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var NumPad;
        (function (NumPad) {
            function triggerInteractionEvent(element, event) {
                var eventName;
                if (event === NumPad.InteractionEvents.NumpadEnter) {
                    eventName = Commerce.InteractionEvents.NUMPADENTER;
                }
                else {
                    throw "Commerce.Controls.NumPad.triggerInteractionEvent: unsupported event type.";
                }
                Commerce.Interaction.triggerEvent(element, eventName);
            }
            NumPad.triggerInteractionEvent = triggerInteractionEvent;
        })(NumPad = Controls.NumPad || (Controls.NumPad = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
Commerce.Controls.NumPad.NumPadState.setTriggerEventMethod(Commerce.Controls.NumPad.triggerInteractionEvent);
ko.bindingHandlers.transactionNumpad = new Commerce.Controls.NumPad.TransactionNumPadBindingHandler();
ko.bindingHandlers.numericNumpad = new Commerce.Controls.NumPad.NumericNumPadBindingHandler();
ko.bindingHandlers.alphanumericNumpad = new Commerce.Controls.NumPad.AlphanumericNumPadBindingHandler();
ko.bindingHandlers.currencyNumpad = new Commerce.Controls.NumPad.CurrencyNumPadBindingHandler();
var orientationEnum;
(function (orientationEnum) {
    orientationEnum[orientationEnum["landscape"] = 1] = "landscape";
    orientationEnum[orientationEnum["portrait"] = 2] = "portrait";
})(orientationEnum || (orientationEnum = {}));
var ParallaxOptions = (function () {
    function ParallaxOptions() {
    }
    return ParallaxOptions;
}());
ko.bindingHandlers.parallax = (function () {
    "use strict";
    var DEFAULT_PARALLAX_SPEED = 3;
    function applyParallax(element, options, orientation, $parallaxBackground) {
        var isOrientationLandscape = orientation === orientationEnum.landscape;
        var parallaxScrollElement = options.parallaxScrollElement ? options.parallaxScrollElement : element;
        $(parallaxScrollElement).scroll(function (event) {
            var scrollPosition = isOrientationLandscape ? scrollLeft(this) : $(this).scrollTop();
            var direction;
            var backgroundScrollDirection;
            if (isOrientationLandscape) {
                direction = (!Commerce.CSSHelpers.isRightToLeft() && options.parallaxReverse) ||
                    (Commerce.CSSHelpers.isRightToLeft() && !options.parallaxReverse) ? 1 : -1;
                backgroundScrollDirection = "background-position-x";
            }
            else {
                direction = 1;
                backgroundScrollDirection = "background-position-y";
            }
            var scrollTo = scrollPosition / (options.parallaxSpeed ? options.parallaxSpeed : DEFAULT_PARALLAX_SPEED);
            $parallaxBackground.css(backgroundScrollDirection, Math.floor(direction * scrollTo) + "px");
        });
    }
    function scrollLeft(elem) {
        var scrollLeft = $(elem).scrollLeft();
        if (Commerce.CSSHelpers.isRightToLeft() && Commerce.Host.instance.application.getBrowserType() === Commerce.Host.BrowserType.Chrome) {
            scrollLeft = elem.scrollWidth - elem.clientWidth - scrollLeft;
        }
        return scrollLeft;
    }
    return {
        init: function (element, optionsValueAccessor) {
            var orientation = window.innerHeight > window.innerWidth ? orientationEnum.portrait : orientationEnum.landscape;
            var value = optionsValueAccessor();
            var $parallaxBackground;
            if (value.parallaxBackgroundElement) {
                $parallaxBackground = $(value.parallaxBackgroundElement);
            }
            else {
                Commerce.RetailLogger.viewsControlsKnockoutParallaxBackgroundElementRequired();
                return;
            }
            Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, function () {
                orientation = (Commerce.ApplicationContext.Instance.tillLayoutProxy.orientation === "Portrait") ?
                    orientationEnum.portrait : orientationEnum.landscape;
                $(element).scrollTop(0);
                $(element).scrollLeft(0);
                $parallaxBackground.unbind("scroll");
                applyParallax(element, value, orientation, $parallaxBackground);
            });
            applyParallax(element, optionsValueAccessor(), orientation, $parallaxBackground);
        }
    };
})();
ko.bindingHandlers.pivot = new Commerce.Controls.Pivot.PivotBindingHandler();
ko.bindingHandlers.pivotItem = new Commerce.Controls.Pivot.PivotItemBindingHandler();
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.progressBar = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        var progressBarCssClass = "win-progress-bar win-large width100Percent progressBar height08";
        var $progress = $("<progress />").addClass(progressBarCssClass).attr("value", ko.utils.unwrapObservable(options.value));
        $element.append($progress);
        return { controlsDescendantBindings: false };
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        $element.find("progress").attr("value", ko.utils.unwrapObservable(options.value));
        return { controlsDescendantBindings: false };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var IRefinerOptions = (function () {
        function IRefinerOptions() {
        }
        return IRefinerOptions;
    }());
    Commerce.IRefinerOptions = IRefinerOptions;
    var Refiner = (function () {
        function Refiner() {
        }
        Refiner.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var _this = this;
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass("Refiner");
            var refinerViewModel = options.refinerViewModel ? options.refinerViewModel : new Commerce.ViewModels.RefinerViewModel();
            var availableRefinersDisposable;
            availableRefinersDisposable = refinerViewModel.availableRefiners.subscribe(function (newAvailableRefiners) {
                ko.applyBindingsToNode(element, {
                    template: {
                        name: "refinerControlTemplate",
                        data: refinerViewModel
                    }
                }, _this);
            }, this);
            ko.applyBindingsToNode(element, {
                template: {
                    name: "refinerControlTemplate",
                    data: refinerViewModel
                }
            }, this);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(availableRefinersDisposable)) {
                    availableRefinersDisposable.dispose();
                }
            });
            return { controlsDescendantBindings: true };
        };
        return Refiner;
    }());
    Commerce.Refiner = Refiner;
    ko.bindingHandlers.refiner = new Refiner();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ISalesOrderAttributeGroupOptions = (function () {
            function ISalesOrderAttributeGroupOptions() {
            }
            return ISalesOrderAttributeGroupOptions;
        }());
        Controls.ISalesOrderAttributeGroupOptions = ISalesOrderAttributeGroupOptions;
        var SalesOrderAttributeGroup = (function () {
            function SalesOrderAttributeGroup() {
            }
            SalesOrderAttributeGroup.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var options = ko.utils.unwrapObservable(valueAccessor()) || {};
                var $element = $(element);
                $element.addClass("salesOrderAttributeGroup");
                var salesOrderAttributeGroupViewModel = options.salesOrderAttributeGroupViewModel
                    ? options.salesOrderAttributeGroupViewModel :
                    new Commerce.ViewModels.SalesOrderAttributeGroupViewModel(null);
                ko.applyBindingsToNode(element, {
                    template: {
                        name: "salesOrderAttributeGroupTemplate",
                        data: salesOrderAttributeGroupViewModel
                    }
                }, this);
                return { controlsDescendantBindings: true };
            };
            return SalesOrderAttributeGroup;
        }());
        Controls.SalesOrderAttributeGroup = SalesOrderAttributeGroup;
        ko.bindingHandlers.salesOrderAttributeGroup = new SalesOrderAttributeGroup();
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ISalesOrderAttributesOptions = (function () {
        function ISalesOrderAttributesOptions() {
        }
        return ISalesOrderAttributesOptions;
    }());
    Commerce.ISalesOrderAttributesOptions = ISalesOrderAttributesOptions;
    var SalesOrderAttributes = (function () {
        function SalesOrderAttributes() {
        }
        SalesOrderAttributes.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass("salesOrderAttributes");
            var salesOrderAttributesViewModel = options.salesOrderAttributesViewModel
                ? options.salesOrderAttributesViewModel :
                new Commerce.ViewModels.SalesOrderAttributesViewModel(null);
            ko.applyBindingsToNode(element, {
                template: {
                    name: "salesOrderAttributesTemplate",
                    data: salesOrderAttributesViewModel
                }
            }, this);
            return { controlsDescendantBindings: true };
        };
        return SalesOrderAttributes;
    }());
    Commerce.SalesOrderAttributes = SalesOrderAttributes;
    ko.bindingHandlers.salesOrderAttributes = new SalesOrderAttributes();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
ko.bindingHandlers.sectionWrapper = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var options = ko.utils.unwrapObservable(valueAccessor()) || {};
        ko.applyBindingsToDescendants(bindingContext, element);
        if (!Commerce.ObjectExtensions.isNullOrUndefined(options.headerResx)) {
            options.header = Commerce.ViewModelAdapter.getResourceString(ko.utils.unwrapObservable(options.headerResx));
        }
        var $divElement = $("<div></div>");
        $(element).prepend($divElement);
        ko.applyBindingsToNode($divElement[0], {
            template: {
                name: "sectionWrapper",
                data: { header: options.header }
            }
        });
        return { controlsDescendantBindings: true };
    }
};
var Commerce;
(function (Commerce) {
    "use strict";
    var SelectTile;
    (function (SelectTile) {
        var SelectTileType;
        (function (SelectTileType) {
            SelectTileType[SelectTileType["SingleLine"] = 0] = "SingleLine";
            SelectTileType[SelectTileType["DoubleLine"] = 1] = "DoubleLine";
            SelectTileType[SelectTileType["SmallDoubleLine"] = 2] = "SmallDoubleLine";
        })(SelectTileType = SelectTile.SelectTileType || (SelectTile.SelectTileType = {}));
    })(SelectTile = Commerce.SelectTile || (Commerce.SelectTile = {}));
    var SelectTileControl = (function () {
        function SelectTileControl() {
        }
        SelectTileControl.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var _this = this;
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                throw new Error("Invalid options passed to the SelectTile control: options cannot be null or undefined.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.primaryText)) {
                throw new Error("Invalid options passed to the SelectTile control: primaryText cannot be null or undefined.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.iteminvoked)) {
                throw new Error("Invalid options passed to the SelectTile control: iteminvoked cannot be null or undefined.");
            }
            else if (!Commerce.ObjectExtensions.isFunction(options.iteminvoked)) {
                throw new Error("Invalid options passed to the SelectTile control: iteminvoked must be a function.");
            }
            options.secondaryText = options.secondaryText || Commerce.StringExtensions.EMPTY;
            options.iconClass = options.iconClass || null;
            options.tileType = options.tileType || SelectTile.SelectTileType.SingleLine;
            options.disabled = options.disabled || false;
            options.displayChevron = Commerce.ObjectExtensions.isNullOrUndefined(options.displayChevron) ? true : options.displayChevron;
            options.isPreSelected = Commerce.ObjectExtensions.isNullOrUndefined(options.isPreSelected) ? false : options.isPreSelected;
            options.primaryTextCssClass = options.primaryTextCssClass || Commerce.StringExtensions.EMPTY;
            options.secondaryTextCssClass = options.secondaryTextCssClass || Commerce.StringExtensions.EMPTY;
            options.displayBottomBorder = options.displayBottomBorder || false;
            options.cheveronCssClass = options.cheveronCssClass || Commerce.StringExtensions.EMPTY;
            options.backgroundCssClass = options.backgroundCssClass || "accentBackground";
            options.backgroundCssClass += options.disabled ? " disabled" : Commerce.StringExtensions.EMPTY;
            $element.addClass("selectTile wrap");
            var afterRender = function () {
                var viewModelTemp = viewModel;
                $element.find(".itemContainer").each(function (index, itemContainerElement) {
                    if (!itemContainerElement.winControl) {
                        var $itemContainer_1 = $(itemContainerElement);
                        if (options.disabled) {
                            (itemContainerElement).tabIndex = -1;
                        }
                        $itemContainer_1.attr("role", "button");
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel)
                            && !Commerce.ObjectExtensions.isNullOrUndefined(viewModel._viewModel.selectionType)) {
                            var primaryTextValue = void 0;
                            if (ko.isObservable(options.primaryText)) {
                                primaryTextValue = ko.utils.unwrapObservable(options.primaryText);
                                options.primaryText.subscribe(function (newPrimaryText) {
                                    $itemContainer_1.attr("aria-label", viewModel._viewModel.selectionType() + " " + newPrimaryText);
                                }, _this);
                            }
                            else {
                                primaryTextValue = options.primaryText;
                            }
                            $itemContainer_1.attr("aria-label", viewModel._viewModel.selectionType() + " " + primaryTextValue);
                        }
                        var itemContainerOptions = {
                            swipeBehavior: WinJS.UI.SelectionMode.none,
                            selectionDisabled: true,
                            tapBehavior: WinJS.UI.TapBehavior.invokeOnly
                        };
                        var itemContainer = new WinJS.UI.ItemContainer(itemContainerElement, itemContainerOptions);
                        if (!options.disabled) {
                            var itemInvokeHandler = void 0;
                            itemInvokeHandler = function (event) {
                                if (options.iteminvoked) {
                                    options.iteminvoked.call(viewModelTemp);
                                }
                                event.stopPropagation();
                            };
                            var handler = void 0;
                            handler = WinJS.Utilities.markSupportedForProcessing(itemInvokeHandler);
                            itemContainer.addEventListener("invoked", handler);
                        }
                        $itemContainer_1.find(".win-itembox, .win-item").addClass("col grow");
                    }
                });
            };
            ko.applyBindingsToNode(element, {
                template: {
                    name: SelectTileControl.selectTileTemplateName,
                    data: options,
                    afterRender: afterRender
                }
            }, this);
            return { controlsDescendantBindings: true };
        };
        SelectTileControl.selectTileTemplateName = "selectTileTemplate";
        return SelectTileControl;
    }());
    Commerce.SelectTileControl = SelectTileControl;
    ko.bindingHandlers.selectTile = new SelectTileControl();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SelfPackingButton = (function () {
        function SelfPackingButton(selfPackingListItemOptions, $elementUnpacked, $elementPacked) {
            this.$elementUnpacked = null;
            this.$elementPacked = null;
            this._options = null;
            this._next = null;
            this._previous = null;
            this._isPacked = false;
            this._width = 0;
            if (selfPackingListItemOptions != null && $elementUnpacked != null && $elementPacked != null) {
                this._options = selfPackingListItemOptions;
                this._width = selfPackingListItemOptions.widthInBlocks * SelfPackingListHandler.minBlockSize;
                this.$elementUnpacked = $elementUnpacked;
                this.$elementPacked = $elementPacked;
                this._packUnpackCallback = selfPackingListItemOptions.onPackUnpack;
            }
        }
        SelfPackingButton.prototype.dispose = function () {
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        SelfPackingButton.prototype.setNext = function (next) {
            next._previous = this;
            this._next = next;
        };
        SelfPackingButton.prototype.pack = function () {
            if (this.$elementPacked != null && this.$elementUnpacked != null) {
                this.$elementPacked.removeClass(SelfPackingButton._packedClass);
                this.$elementUnpacked.addClass(SelfPackingButton._packedClass);
                if (Commerce.ObjectExtensions.isFunction(this._packUnpackCallback)) {
                    this._packUnpackCallback(this.options.id, true);
                }
            }
            this._isPacked = true;
        };
        SelfPackingButton.prototype.unpack = function () {
            if (this.$elementPacked != null && this.$elementUnpacked != null) {
                this.$elementUnpacked.removeClass(SelfPackingButton._packedClass);
                this.$elementPacked.addClass(SelfPackingButton._packedClass);
                if (Commerce.ObjectExtensions.isFunction(this._packUnpackCallback)) {
                    this._packUnpackCallback(this.options.id, false);
                }
            }
            this._isPacked = false;
        };
        Object.defineProperty(SelfPackingButton.prototype, "next", {
            get: function () {
                return this._next;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelfPackingButton.prototype, "previous", {
            get: function () {
                return this._previous;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelfPackingButton.prototype, "isPacked", {
            get: function () {
                return this._isPacked;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelfPackingButton.prototype, "width", {
            get: function () {
                return this._width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelfPackingButton.prototype, "options", {
            get: function () {
                return this._options;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelfPackingButton.prototype, "totalListWidth", {
            get: function () {
                var extraWidth = this.previous !== null && this.previous.isPacked ? SelfPackingListHandler.minBlockSize : 0;
                if (this.next != null) {
                    return this.next.totalListWidth + this.width + extraWidth;
                }
                else {
                    return this.width + extraWidth;
                }
            },
            enumerable: true,
            configurable: true
        });
        SelfPackingButton._packedClass = "hide";
        return SelfPackingButton;
    }());
    Commerce.SelfPackingButton = SelfPackingButton;
    var SelfPackingListHandler = (function () {
        function SelfPackingListHandler() {
            this._currentButton = null;
            this._overflowFlyoutAfrerHideHandlerProxied = this._overflowFlyoutAfterHideHandler.bind(this);
            this._overflowFlyoutBeforeShowHandlerProxied = this._overflowFlyoutBeforeShowHandler.bind(this);
        }
        Object.defineProperty(SelfPackingListHandler.prototype, "currentUnpackedListWidth", {
            get: function () {
                var nextButton = this.getNextButtonToPack();
                var totalWidth = 0;
                if (nextButton != null) {
                    totalWidth = nextButton.totalListWidth;
                }
                else {
                    totalWidth = this.overflowButtonWidth;
                }
                return totalWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelfPackingListHandler.prototype, "overflowButtonWidth", {
            get: function () {
                if (this._$overflowButton.is(":visible")) {
                    return SelfPackingListHandler.minBlockSize;
                }
                else {
                    return 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        SelfPackingListHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            this._$element = $(element);
            this._$element.addClass("selfPackingList alignRight row");
            return { controlsDescendantBindings: true };
        };
        SelfPackingListHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            this._options = ko.utils.unwrapObservable(valueAccessor()) || {};
            this.initializeButtons();
        };
        SelfPackingListHandler.prototype.dispose = function () {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._overflowFlyoutWinControl)) {
                this._overflowFlyoutWinControl.removeEventListener("afterhide", this._overflowFlyoutAfrerHideHandlerProxied);
                this._overflowFlyoutWinControl.removeEventListener("beforeshow", this._overflowFlyoutBeforeShowHandlerProxied);
                this._overflowFlyoutWinControl.dispose();
            }
            window.removeEventListener("resize", this._windowResizeHandler);
            this._windowResizeHandler = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._currentButton)) {
                this._currentButton.dispose();
            }
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        SelfPackingListHandler.prototype.resize = function (newWidth) {
            window.removeEventListener("resize", this._windowResizeHandler);
            this._windowResizeHandler = null;
            if (newWidth < 0) {
                newWidth = 0;
            }
            if (newWidth >= this.currentUnpackedListWidth + 5) {
                var nextUnpackButton = this.getNextButtonToUnPack();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(nextUnpackButton)) {
                    var widthWithNextUnpackedButton = nextUnpackButton.totalListWidth;
                    if (newWidth > widthWithNextUnpackedButton) {
                        this._$element.width(widthWithNextUnpackedButton);
                    }
                    else {
                        this._$element.width(this.currentUnpackedListWidth);
                    }
                }
            }
            else if (newWidth < this.currentUnpackedListWidth) {
                var nextPackButton = this.getNextButtonToPack();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(nextPackButton)) {
                    var widthWithNextPackButton = nextPackButton.totalListWidth;
                    if (newWidth < widthWithNextPackButton) {
                        if (nextPackButton.next === null) {
                            this._$element.width(SelfPackingListHandler.minBlockSize);
                        }
                        else {
                            this._$element.width(widthWithNextPackButton - nextPackButton.width);
                        }
                    }
                }
                else {
                    this._$element.width(this.overflowButtonWidth);
                }
            }
            this.revalidateLayout();
        };
        SelfPackingListHandler.prototype.toggleOveflowFlyout = function () {
            if (this._isOverflowFlyoutHidden) {
                this._overflowFlyoutWinControl.show(this._$overflowButton[0]);
            }
            else {
                this._overflowFlyoutWinControl.hide();
            }
        };
        SelfPackingListHandler.prototype.refresh = function () {
            this.initializeButtons();
        };
        SelfPackingListHandler.prototype.addButtonBlock = function (selfPackingListItem, $placeholder) {
            var divTag = "<div class='selfPackingItem row' />";
            var $unpackedButtonBlock = $(divTag);
            $unpackedButtonBlock.addClass(SelfPackingListHandler._blockSizes[selfPackingListItem.widthInBlocks - 1]);
            $unpackedButtonBlock.appendTo($placeholder);
            ko.applyBindingsToNode($unpackedButtonBlock[0], { template: { name: selfPackingListItem.templateUnpacked, data: selfPackingListItem.data } });
            var $packedButtonBlock = $(divTag);
            $packedButtonBlock.addClass("width240");
            if (selfPackingListItem.templatePacked) {
                $packedButtonBlock.prependTo(this._$oveflowFlyout);
                ko.applyBindingsToNode($packedButtonBlock[0], { template: { name: selfPackingListItem.templatePacked, data: selfPackingListItem.data } });
            }
            var buttonSettings = new SelfPackingButton(selfPackingListItem, $unpackedButtonBlock, $packedButtonBlock);
            buttonSettings.pack();
            return buttonSettings;
        };
        SelfPackingListHandler.prototype.onWindowResize = function () {
            this._overflowFlyoutWinControl.hide();
            this.revalidateLayout();
        };
        SelfPackingListHandler.prototype.getNextButtonToUnPack = function () {
            var returnValue = null;
            if ((this._currentButton.isPacked && this._currentButton.next == null) ||
                this._currentButton.isPacked && this._currentButton.next != null && !this._currentButton.next.isPacked) {
                returnValue = this._currentButton;
            }
            else if (!this._currentButton.isPacked && this._currentButton.previous != null) {
                this._currentButton = this._currentButton.previous;
                returnValue = this.getNextButtonToUnPack();
            }
            else if (this._currentButton.isPacked && this._currentButton.next != null) {
                this._currentButton = this._currentButton.next;
                returnValue = this.getNextButtonToUnPack();
            }
            return returnValue;
        };
        SelfPackingListHandler.prototype.getNextButtonToPack = function () {
            var returnValue = null;
            if ((!this._currentButton.isPacked && this._currentButton.previous == null) ||
                !this._currentButton.isPacked && this._currentButton.previous != null && this._currentButton.previous.isPacked) {
                returnValue = this._currentButton;
            }
            else if (this._currentButton.isPacked && this._currentButton.next != null) {
                this._currentButton = this._currentButton.next;
                returnValue = this.getNextButtonToPack();
            }
            else if (!this._currentButton.isPacked && this._currentButton.previous != null) {
                this._currentButton = this._currentButton.previous;
                returnValue = this.getNextButtonToPack();
            }
            return returnValue;
        };
        SelfPackingListHandler.prototype.showOverflowButton = function () {
            if (!this._$overflowButton.is(":visible")) {
                this._$overflowButton.show();
            }
        };
        SelfPackingListHandler.prototype.hideOverflowButton = function () {
            if (this._$overflowButton.is(":visible")) {
                this._$overflowButton.hide();
            }
        };
        SelfPackingListHandler.prototype.packNext = function () {
            var handled = false;
            var nextButton = this.getNextButtonToPack();
            if (nextButton != null && !nextButton.isPacked) {
                nextButton.pack();
                this.showOverflowButton();
                handled = true;
            }
            return handled;
        };
        SelfPackingListHandler.prototype.unPackNext = function () {
            var handled = false;
            var nextButton = this.getNextButtonToUnPack();
            if (nextButton != null && nextButton.isPacked) {
                nextButton.unpack();
                if (nextButton.previous == null) {
                    this.hideOverflowButton();
                }
                handled = true;
            }
            return handled;
        };
        SelfPackingListHandler.prototype.revalidateLayout = function () {
            var controlWidth = this._$element.width();
            var currentListWidth = this.currentUnpackedListWidth;
            if (controlWidth < currentListWidth && controlWidth >= this.overflowButtonWidth) {
                this.packNext();
                this.revalidateLayout();
            }
            else if (controlWidth >= currentListWidth) {
                var nextButton = this.getNextButtonToUnPack();
                if (nextButton != null && controlWidth >= nextButton.totalListWidth) {
                    this.unPackNext();
                    this.revalidateLayout();
                }
            }
        };
        SelfPackingListHandler.prototype.validateOptions = function (option) {
            var selfPackingItemList = [];
            var uniqueIds = {};
            var collapseOrderSum = 0;
            if (option.leftList && option.leftList.length > 0) {
                selfPackingItemList = selfPackingItemList.concat(option.leftList);
            }
            if (option.rightList && option.rightList.length > 0) {
                selfPackingItemList = selfPackingItemList.concat(option.rightList);
            }
            var expectedCollapseOrderSum = 0;
            selfPackingItemList.forEach(function (selfPackingListItem, index) {
                if (!selfPackingListItem.templateUnpacked) {
                    throw "Required parameter 'templateUnpacked' missing.";
                }
                if (Object.keys(uniqueIds).indexOf(selfPackingListItem.id) < 0) {
                    uniqueIds[selfPackingListItem.id] = true;
                }
                else {
                    throw "Required parameter 'id' is not unieque on items for self packing list. Found duplicate for:" + selfPackingListItem.id;
                }
                collapseOrderSum += selfPackingListItem.collapseOrder;
                expectedCollapseOrderSum += index + 1;
                if (!Commerce.ObjectExtensions.isNumber(selfPackingListItem.widthInBlocks) &&
                    selfPackingListItem.widthInBlocks > SelfPackingListHandler._blockSizes.length) {
                    throw "Invalid value for required property widthInBlocks. Expected number 1-" + SelfPackingListHandler._blockSizes.length;
                }
            });
            if (expectedCollapseOrderSum !== collapseOrderSum) {
                throw "Required parameter 'collapseOrder' incorrectly specified on items for self packing list.";
            }
        };
        SelfPackingListHandler.prototype.initializeButtons = function () {
            var _this = this;
            this.validateOptions(this._options);
            ko.applyBindingsToNode(this._$element[0], { template: { name: "selfPackingListTemplate", data: this } });
            var $leftList = this._$element.find(".selfPackingListLeftList");
            var $rightList = this._$element.find(".selfPackingListRightList");
            this._$overflowButton = this._$element.find(".selfPackingListOverflowButton");
            this._$oveflowFlyout = this._$element.find(".selfPackingListOverflowFlyout");
            this._overflowFlyoutWinControl = new WinJS.UI.Flyout(this._$oveflowFlyout[0]);
            this._overflowFlyoutWinControl.addEventListener("afterhide", this._overflowFlyoutAfrerHideHandlerProxied);
            this._overflowFlyoutWinControl.addEventListener("beforeshow", this._overflowFlyoutBeforeShowHandlerProxied);
            this._isOverflowFlyoutHidden = true;
            var allButtons = [];
            if (this._currentButton) {
                this._currentButton.dispose();
                this._currentButton = null;
            }
            if (this._options.leftList && this._options.leftList.length > 0) {
                this._options.leftList.forEach(function (selfPackingListItem) {
                    allButtons.push(_this.addButtonBlock(selfPackingListItem, $leftList));
                }, this);
            }
            if (this._options.rightList && this._options.rightList.length > 0) {
                this._options.rightList.forEach(function (selfPackingListItem) {
                    allButtons.push(_this.addButtonBlock(selfPackingListItem, $rightList));
                }, this);
            }
            if (allButtons.length > 0) {
                allButtons.sort(function (a, b) {
                    return a.options.collapseOrder - b.options.collapseOrder;
                });
                allButtons.forEach(function (selfPackingListItem) {
                    if (_this._currentButton == null) {
                        _this._currentButton = selfPackingListItem;
                    }
                    else {
                        _this._currentButton.setNext(selfPackingListItem);
                        _this._currentButton = selfPackingListItem;
                    }
                }, this);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._windowResizeHandler)) {
                    window.removeEventListener("resize", this._windowResizeHandler);
                    this._windowResizeHandler = null;
                }
                this._windowResizeHandler = this.onWindowResize.bind(this);
                window.addEventListener("resize", this._windowResizeHandler);
                this.revalidateLayout();
            }
            else {
                this.hideOverflowButton();
            }
        };
        SelfPackingListHandler.prototype._overflowFlyoutAfterHideHandler = function () {
            this._isOverflowFlyoutHidden = true;
        };
        SelfPackingListHandler.prototype._overflowFlyoutBeforeShowHandler = function () {
            this._isOverflowFlyoutHidden = false;
        };
        SelfPackingListHandler.minBlockSize = 48;
        SelfPackingListHandler._blockSizes = ["width48", "width96", "width144", "width192"];
        return SelfPackingListHandler;
    }());
    Commerce.SelfPackingListHandler = SelfPackingListHandler;
})(Commerce || (Commerce = {}));
ko.bindingHandlers.selfPackingList = Commerce.KnockoutHandlerHelper.createMultiInstanceKnockoutHandler(Commerce.SelfPackingListHandler);
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var Tab;
        (function (Tab) {
            var TabOptions = (function () {
                function TabOptions() {
                }
                return TabOptions;
            }());
            Tab.TabOptions = TabOptions;
            var TabsPosition;
            (function (TabsPosition) {
                TabsPosition[TabsPosition["Left"] = 0] = "Left";
                TabsPosition[TabsPosition["Right"] = 2] = "Right";
            })(TabsPosition = Tab.TabsPosition || (Tab.TabsPosition = {}));
        })(Tab = Controls.Tab || (Controls.Tab = {}));
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
ko.bindingHandlers.tabControl = (function () {
    "use strict";
    var OPTIONS_KEY = "tabControlOptions";
    var TABOPTIONS_KEY = "tabOptions";
    var ACCENTCOLORCSS_CLASS = "accent";
    var CONTROLCSS_CLASS = "commerceTabControl";
    function tabClick(e) {
        e.stopPropagation();
        var $tab = $(e.currentTarget);
        var $element = $tab.closest("." + CONTROLCSS_CLASS);
        var options = $element.data(OPTIONS_KEY);
        var tab = $tab.data(TABOPTIONS_KEY);
        if (options === null || tab === null) {
            return;
        }
        var newIndex = options.data.tabItems.indexOf(tab);
        if (options.data.selectedIndex && options.data.selectedIndex.subscribe) {
            options.data.selectedIndex(newIndex);
        }
        else {
            options.data.selectedIndex = newIndex;
            updateDOM(options);
        }
        if (typeof (options.tabClick) === "function") {
            options.tabClick.call(options.callbackContext, options.data.selectedIndex);
        }
    }
    function updateDOM(options) {
        if (Commerce.ObjectExtensions.isNullOrUndefined(options.data.selectedIndex)) {
            options.data.selectedIndex = 0;
        }
        if (options.data.tabItems) {
            var tabs = options.data.tabItems;
            if (tabs !== null) {
                options.$tabsContainer.empty();
                for (var i = 0; i < tabs.length; i++) {
                    var tab = tabs[i];
                    tab.isSelected = i === ko.utils.unwrapObservable(options.data.selectedIndex);
                    var $associatedElement = $("#" + tab.associatedElementId);
                    if (tab.visible == null || tab.visible) {
                        var tabDisplayText = Commerce.ObjectExtensions.isNullOrUndefined(tab.displayText) ? Commerce.StringExtensions.EMPTY : tab.displayText;
                        var $tab = $("<button class='tab tabBackgroundColor'><div class='icon'></div><div class='text semilight primaryFontColor'>"
                            + tabDisplayText
                            + "</div><div class='indicator'></div></button>");
                        $tab.attr("type", "button");
                        $tab.data(TABOPTIONS_KEY, tab);
                        options.$tabContent.append($associatedElement);
                        if (tab.isSelected) {
                            $tab.addClass("selected");
                            $tab.find(".indicator").addClass(ACCENTCOLORCSS_CLASS + "Background");
                            $associatedElement.show();
                        }
                        else {
                            $associatedElement.hide();
                        }
                        if (!Commerce.StringExtensions.isNullOrWhitespace(tab.pictureAsBase64)) {
                            $tab.find(".icon").css("background-image", "url('data:image;base64," + tab.pictureAsBase64 + "')");
                        }
                        if (tab.cssClasses) {
                            $tab.addClass(tab.cssClasses);
                        }
                        options.$tabsContainer.append($tab);
                        Commerce.BubbleHelper.formatAttribute($tab, "tab_{0}", tabDisplayText.toLowerCase());
                        $tab.click(tabClick);
                    }
                    else {
                        $associatedElement.hide();
                    }
                }
            }
        }
    }
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var value = ko.utils.unwrapObservable(valueAccessor()) || {};
            var $element = $(element);
            $element.addClass(CONTROLCSS_CLASS);
            var id = value.id || $element.attr("id");
            if (!id) {
                Commerce.ViewModelAdapter.displayMessage("tab control requires a unique Id", Commerce.MessageType.Error);
                return { controlsDescendantBindings: false };
            }
            var item = null;
            if (value.view) {
                item = Commerce.ApplicationContext.Instance.tillLayoutProxy.getLayoutItem(value.view, id);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(item)) {
                    var tabData_1 = {};
                    tabData_1.tabsPosition = Number(item.TabStripPlacement);
                    tabData_1.tabItems = [];
                    item.TabPages.forEach(function (tabPage) {
                        var tabItem = {};
                        tabItem.displayText = tabPage.Title;
                        var imageZones = Commerce.ApplicationContext.Instance.tillLayoutProxy
                            .getImageZones([tabPage.ZoneID]);
                        if (Commerce.ArrayExtensions.hasElements(imageZones)) {
                            tabItem.pictureAsBase64 = imageZones[0].PictureAsBase64;
                        }
                        tabItem.associatedElementId = tabPage.Content.ID;
                        tabData_1.tabItems[tabData_1.tabItems.length] = tabItem;
                    });
                    value.data = tabData_1;
                }
                var orientationChangedHandler_1 = function (args) {
                    if (item) {
                        item.TabPages.forEach(function (tabPage) {
                            var $control = $element.find("#" + tabPage.Content.ID);
                            $control.removeAttr("style");
                            $element.parent().parent().append($control);
                        });
                    }
                    Commerce.ApplicationContext.Instance.tillLayoutProxy.removeOrientationChangedHandler(element, orientationChangedHandler_1);
                    $element.empty();
                    ko.cleanNode(element);
                    ko.applyBindings(viewModel, element);
                };
                Commerce.ApplicationContext.Instance.tillLayoutProxy.addOrientationChangedHandler(element, orientationChangedHandler_1);
            }
            var options = {
                callbackContext: value.callbackContext || bindingContext,
                tabClick: value.tabClick,
                id: id,
                data: value.data,
                $element: $element,
                $tabContent: null,
                $tabsContainer: null
            };
            var $tabContent = $("<div class='tabContent'></div>");
            $tabContent.addClass("col grow");
            options.$tabContent = $tabContent;
            $element.append($tabContent);
            var $tabsContainer = $("<div class='tabsContainer'></div>");
            $tabsContainer.addClass("col");
            options.$tabsContainer = $tabsContainer;
            $element.append($tabsContainer);
            $element.addClass("row");
            if (options.data) {
                switch (options.data.tabsPosition) {
                    case Commerce.Controls.Tab.TabsPosition.Left:
                        $element.addClass("lefttabs");
                        $element.removeClass("righttabs");
                        break;
                    case Commerce.Controls.Tab.TabsPosition.Right:
                    default:
                        $element.addClass("righttabs");
                        $element.removeClass("lefttabs");
                        break;
                }
                $element.data(OPTIONS_KEY, options);
            }
            ko.applyBindingsToDescendants(viewModel, element);
            return { controlsDescendantBindings: true };
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
            var $element = $(element);
            var options = $element.data(OPTIONS_KEY);
            if (Commerce.ObjectExtensions.isNullOrUndefined(options) || Commerce.ObjectExtensions.isNullOrUndefined(options.id)) {
                return;
            }
            updateDOM(options);
        }
    };
})();
var DataList = Commerce.Controls.DataList;
var Commerce;
(function (Commerce) {
    "use strict";
    var TemplateSwitcherViewModel = (function () {
        function TemplateSwitcherViewModel(element, anchorId, options) {
            this.templateSwitcherMenu = ko.observable(null);
            this.templateOptions = [];
            this.templateSwitcherOptions = options;
            this.toggleShowHideMenu = ko.observable(function () { return; });
            this.anchorId = anchorId;
        }
        TemplateSwitcherViewModel.prototype.clickHandler = function (event) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.dataListViewModel)) {
                var $dataListElement = $(document).find(this.templateSwitcherOptions.listId);
                if ($dataListElement.length === 0 || Commerce.ObjectExtensions.isNullOrUndefined($dataListElement[0].dataListViewModel)) {
                    throw "A valid data list id is a required parameter for the templateSwitcher control.";
                }
                this.dataListViewModel = $dataListElement[0].dataListViewModel;
                this.templateOptions = this.dataListViewModel.getTemplates();
                this.templateOptions.forEach(function (template) {
                    var buttonTemplate = document.createElement("div");
                    _this.templateSwitcherMenu().insertBefore(buttonTemplate, null);
                    ko.renderTemplate(TemplateSwitcherViewModel.menuOptionTemplate, template, {
                        afterRender: (function (nodes) {
                            $(nodes).click(function () {
                                _this.switchTemplate(template);
                            });
                        }).bind(_this)
                    }, buttonTemplate, "replaceNode");
                });
            }
            if ($(this.templateSwitcherMenu()).attr("aria-label") === "Menu" &&
                $(this.templateSwitcherMenu()).attr("role") === "menu") {
                $(this.templateSwitcherMenu()).attr("role", "presentation");
            }
            var currentDeviceType = this.dataListViewModel.getCurrentDeviceType();
            this.templateOptions.forEach(function (template) {
                if (template.templateId === _this.dataListViewModel.getCurrentTemplate().templateId ||
                    (template.deviceType !== currentDeviceType && template.deviceType !== DataList.DeviceType.All)) {
                    $(_this.templateSwitcherMenu()).find("#" + template.templateId).hide();
                }
                else {
                    $(_this.templateSwitcherMenu()).find("#" + template.templateId).show();
                }
            });
            this.toggleShowHideMenu()();
        };
        TemplateSwitcherViewModel.prototype.switchTemplate = function (template) {
            $(this.templateSwitcherMenu()).find("#" + template.templateId).hide();
            $(this.templateSwitcherMenu()).find("#" + this.dataListViewModel.getCurrentTemplate().templateId).show();
            this.dataListViewModel.switchTemplate(template);
        };
        TemplateSwitcherViewModel.menuOptionTemplate = "templateSwitcherMenuOptionTemplate";
        return TemplateSwitcherViewModel;
    }());
    Commerce.TemplateSwitcherViewModel = TemplateSwitcherViewModel;
    var TemplateSwitcherControl = (function () {
        function TemplateSwitcherControl() {
        }
        TemplateSwitcherControl.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            if (Commerce.ObjectExtensions.isNullOrUndefined(options.listId)) {
                throw "listId is a required parameter for the templateSwitcher control.";
            }
            var menuElement = document.createElement("div");
            var $menuElement = $(menuElement);
            $menuElement.addClass("templateSwitcher");
            var templateSwitcherViewModel = new TemplateSwitcherViewModel(menuElement, element.id, options);
            ko.applyBindingsToNode(menuElement, {
                template: {
                    name: TemplateSwitcherControl.templateSwitcherTemplateName,
                    data: templateSwitcherViewModel
                }
            }, this);
            document.body.insertBefore(menuElement, null);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                document.body.removeChild(menuElement);
            });
            $(element).click(templateSwitcherViewModel.clickHandler.bind(templateSwitcherViewModel));
            return { controlsDescendantBindings: true };
        };
        TemplateSwitcherControl.templateSwitcherTemplateName = "templateSwitcherMenuTemplate";
        return TemplateSwitcherControl;
    }());
    Commerce.TemplateSwitcherControl = TemplateSwitcherControl;
    ko.bindingHandlers.templateSwitcher = new TemplateSwitcherControl();
})(Commerce || (Commerce = {}));
ko.bindingHandlers.toggleSwitch = new Commerce.Controls.ToggleSwitch.ToggleSwitchBindingHandler();
ko.bindingHandlers.totalsPanel = new Commerce.Controls.TotalsPanel.TotalsPanelBindingHandler();
ko.bindingHandlers.totalsPanelField = new Commerce.Controls.TotalsPanel.TotalsPanelFieldBindingHandler();
var Commerce;
(function (Commerce) {
    "use strict";
    var VariantMatrixViewModel = (function () {
        function VariantMatrixViewModel(matrixElement, matrixOptions, viewContext) {
            var _this = this;
            this.matrixElement = matrixElement;
            this.originalDimensionTypeValues = [];
            this.currentDimensions = matrixOptions.dimensions;
            this.itemsList = ko.observableArray([]);
            this.selectedDimension = ko.observable(null);
            this.dimensionMenuAnchor = ko.observable(null);
            this.isDimensionMenuVisible = ko.observable(false);
            this.areDimensionOptionsVisible = [];
            this.isBusy = ko.observable(false);
            this._skip = 0;
            this._pageSize = matrixOptions.pageSize;
            this._numberOfDimensionCombinations = 0;
            this._isPagingEventListenerAdded = false;
            this._isHorizontalScrollingListenerAdded = false;
            this._isRetrievingMoreData = false;
            this._cellCallerMethod = matrixOptions.cellCallerMethod.bind(viewContext);
            this.currentDimensions.forEach(function (dimension) {
                _this.areDimensionOptionsVisible.push(ko.observable(false));
                _this.originalDimensionTypeValues.push(dimension.ProductDimensions[0].DimensionTypeValue);
            });
            this._dimensionCombinations = this._createDimensionCombinations();
            this.dimensionCombinationsForDisplay = ko.observableArray(this._loadDimensionCombinationsForDisplay());
            this._createItemsList();
        }
        VariantMatrixViewModel.prototype.afterRender = function () {
            var headerWidth;
            if (this.currentDimensions.length > 1) {
                headerWidth = VariantMatrixViewModel.maxColumnWidth * this.currentDimensions[0].ProductDimensions.length;
            }
            else {
                headerWidth = VariantMatrixViewModel.maxColumnWidth + VariantMatrixViewModel.singleDimensionColumnWidth;
            }
            var topDimensionWidthClassId = Commerce.StringExtensions.format(VariantMatrixViewModel.topDimensionWidthClassIdStringTemplate, this.matrixElement.id);
            var topDimensionWidthClassContent = Commerce.StringExtensions.format(VariantMatrixViewModel.topDimensionWidthClassContentStringTemplate, this.matrixElement.id, headerWidth);
            Commerce.CSSHelpers.injectCss(topDimensionWidthClassId, topDimensionWidthClassContent);
            this._addPagingHandlers();
            this._addHorizontalScrollingHandlers();
        };
        VariantMatrixViewModel.prototype.dimensionClickHandler = function (dimension, context, clickEvent) {
            var _this = this;
            this.selectedDimension(dimension);
            this.originalDimensionTypeValues.forEach(function (dimensionTypeValue, index) {
                _this.areDimensionOptionsVisible[index](dimensionTypeValue
                    === _this.selectedDimension().ProductDimensions[0].DimensionTypeValue);
            });
            this.dimensionMenuAnchor(clickEvent.currentTarget);
            this.isDimensionMenuVisible(true);
        };
        VariantMatrixViewModel.prototype.pivotDimension = function (dimensionTarget) {
            var _this = this;
            var sourceIndex;
            var targetIndex;
            this.currentDimensions.forEach(function (dimension, index) {
                if (dimension.ProductDimensions[0].DimensionTypeValue === _this.selectedDimension().ProductDimensions[0].DimensionTypeValue) {
                    sourceIndex = index;
                }
                else if (dimension.ProductDimensions[0].DimensionTypeValue === dimensionTarget.ProductDimensions[0].DimensionTypeValue) {
                    targetIndex = index;
                }
            });
            if (!Commerce.ObjectExtensions.isNullOrUndefined(sourceIndex) && !Commerce.ObjectExtensions.isNullOrUndefined(targetIndex)
                && sourceIndex >= 0 && targetIndex >= 0) {
                var tempDimension = this.currentDimensions[sourceIndex];
                this.currentDimensions[sourceIndex] = this.currentDimensions[targetIndex];
                this.currentDimensions[targetIndex] = tempDimension;
                this._dimensionCombinations = this._createDimensionCombinations();
                this.dimensionCombinationsForDisplay(this._loadDimensionCombinationsForDisplay());
                this._skip = 0;
                this._createItemsList();
                this.afterRender();
            }
        };
        VariantMatrixViewModel.prototype.refreshMatrix = function (newDimensions) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(newDimensions)) {
                this.currentDimensions = newDimensions;
                this._dimensionCombinations = this._createDimensionCombinations();
                this.dimensionCombinationsForDisplay(this._loadDimensionCombinationsForDisplay());
            }
            this.dimensionCombinationsForDisplay(this._loadDimensionCombinationsForDisplay());
            this._skip = 0;
            this._createItemsList();
            this.afterRender();
        };
        VariantMatrixViewModel.prototype.dispose = function () {
            this._removePagingHandlers();
            this._removeHorizontalScrollingHandlers();
            Commerce.ObjectExtensions.disposeAllProperties(this);
        };
        VariantMatrixViewModel.prototype._addPagingHandlers = function () {
            if (!this._isPagingEventListenerAdded && this._numberOfDimensionCombinations > this._pageSize) {
                this._controlScrollYHandler = this._onScrollYHandler.bind(this);
                var $scrollYElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
                if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollYElement)) {
                    $scrollYElement[0].addEventListener("scroll", this._controlScrollYHandler);
                    $scrollYElement[0].addEventListener("resize", this._controlScrollYHandler);
                    this._isPagingEventListenerAdded = true;
                }
            }
        };
        VariantMatrixViewModel.prototype._addHorizontalScrollingHandlers = function () {
            if (!this._isHorizontalScrollingListenerAdded) {
                this._controlScrollXHandler = this._onScrollXHandler.bind(this);
                var $scrollXElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollXClassString);
                if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollXElement)) {
                    $scrollXElement[0].addEventListener("scroll", this._controlScrollXHandler);
                    $scrollXElement[0].addEventListener("resize", this._controlScrollXHandler);
                    this._isHorizontalScrollingListenerAdded = true;
                }
            }
        };
        VariantMatrixViewModel.prototype._removePagingHandlers = function () {
            if (this._isPagingEventListenerAdded) {
                var $scrollYElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
                $scrollYElement[0].removeEventListener("scroll", this._controlScrollYHandler);
                $scrollYElement[0].removeEventListener("resize", this._controlScrollYHandler);
                this._isPagingEventListenerAdded = false;
            }
        };
        VariantMatrixViewModel.prototype._removeHorizontalScrollingHandlers = function () {
            if (this._isHorizontalScrollingListenerAdded) {
                var $scrollXElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollXClassString);
                $scrollXElement[0].removeEventListener("scroll", this._controlScrollXHandler);
                $scrollXElement[0].removeEventListener("resize", this._controlScrollXHandler);
                this._isHorizontalScrollingListenerAdded = false;
            }
        };
        VariantMatrixViewModel.prototype._createItemsList = function () {
            this.itemsList([]);
            this._getMoreData();
        };
        VariantMatrixViewModel.prototype._createDimensionCombinations = function () {
            var dimensionCombinations = [];
            if (this.currentDimensions.length <= 2) {
                this.currentDimensions.forEach(function (dimension) {
                    dimensionCombinations.push(dimension);
                });
                this._numberOfDimensionCombinations = dimensionCombinations[dimensionCombinations.length - 1].ProductDimensions.length;
                return dimensionCombinations;
            }
            dimensionCombinations.push(this.currentDimensions[0]);
            var repeatValue = this.currentDimensions[2].ProductDimensions.length;
            for (var i = 3; i < this.currentDimensions.length; i++) {
                repeatValue *= this.currentDimensions[i].ProductDimensions.length;
            }
            var secondaryRepeatValue = this.currentDimensions[1].ProductDimensions.length;
            var firstDim = { ProductDimensions: [] };
            this.currentDimensions[1].ProductDimensions.forEach(function (value) {
                for (var i = 0; i < repeatValue; i++) {
                    firstDim.ProductDimensions.push(value);
                }
            });
            dimensionCombinations.push(firstDim);
            var _loop_2 = function (i) {
                repeatValue = repeatValue / this_1.currentDimensions[i].ProductDimensions.length;
                var dim = { ProductDimensions: [] };
                for (var j = 0; j < secondaryRepeatValue; j++) {
                    this_1.currentDimensions[i].ProductDimensions.forEach(function (value) {
                        for (var i_2 = 0; i_2 < repeatValue; i_2++) {
                            dim.ProductDimensions.push(value);
                        }
                    });
                }
                dimensionCombinations.push(dim);
                secondaryRepeatValue *= this_1.currentDimensions[i].ProductDimensions.length;
            };
            var this_1 = this;
            for (var i = 2; i < this.currentDimensions.length; i++) {
                _loop_2(i);
            }
            this._numberOfDimensionCombinations = dimensionCombinations[1].ProductDimensions.length;
            return dimensionCombinations;
        };
        VariantMatrixViewModel.prototype._loadDimensionCombinationsForDisplay = function () {
            var _this = this;
            var dimensionCombinations = [];
            this._dimensionCombinations.forEach(function (dimensionCombination, index) {
                if (index === 0 && _this._dimensionCombinations.length > 1) {
                    dimensionCombinations.push({
                        ProductDimensions: dimensionCombination.ProductDimensions
                    });
                }
                else {
                    var dimensionValues = [];
                    if (_this._numberOfDimensionCombinations < _this._pageSize) {
                        dimensionValues = dimensionCombination.ProductDimensions;
                    }
                    else {
                        for (var i = 0; i < _this._pageSize && i < dimensionCombination.ProductDimensions.length; i++) {
                            dimensionValues.push(dimensionCombination.ProductDimensions[i]);
                        }
                    }
                    dimensionCombinations.push({
                        ProductDimensions: dimensionValues
                    });
                }
            });
            return dimensionCombinations;
        };
        VariantMatrixViewModel.prototype._getMoreData = function () {
            var _this = this;
            if (!this._isRetrievingMoreData) {
                this._isRetrievingMoreData = true;
                this.isBusy(true);
                var dimensions_1 = [];
                for (var i = this._skip; i < this._pageSize + this._skip && i < this._numberOfDimensionCombinations; i++) {
                    var dimensionValues = [];
                    var j = (this._dimensionCombinations.length === 1) ? 0 : 1;
                    for (j; j < this._dimensionCombinations.length; j++) {
                        dimensionValues.push(this._dimensionCombinations[j].ProductDimensions[i]);
                    }
                    dimensions_1.push({ ProductDimensions: dimensionValues });
                }
                var topDimensionValues_1;
                if (this.currentDimensions.length > 1) {
                    topDimensionValues_1 = this._dimensionCombinations[0].ProductDimensions;
                }
                else {
                    topDimensionValues_1 = [];
                }
                var productDimensionCombinations_1 = new Array();
                var productDimensionCombination_1;
                if (Commerce.ArrayExtensions.hasElements(topDimensionValues_1)) {
                    dimensions_1.forEach(function (dimensionCombination) {
                        topDimensionValues_1.forEach(function (topDimension) {
                            productDimensionCombination_1 = { ProductDimensions: dimensionCombination.ProductDimensions.concat(topDimension) };
                            productDimensionCombinations_1.push(productDimensionCombination_1);
                        });
                    });
                }
                else {
                    productDimensionCombinations_1 = dimensions_1;
                }
                this._cellCallerMethod(productDimensionCombinations_1).done(function (result) {
                    var matrixColumnCount = Commerce.ArrayExtensions.hasElements(topDimensionValues_1) ? topDimensionValues_1.length : 1;
                    dimensions_1.forEach(function (dimension, index) {
                        _this.itemsList.push(result.slice(index * matrixColumnCount, (index + 1) * matrixColumnCount));
                    });
                    _this._skip += _this._pageSize;
                    var startIndex = (_this._dimensionCombinations.length === 1) ? 0 : 1;
                    if (_this.dimensionCombinationsForDisplay()[startIndex].ProductDimensions.length < _this._skip
                        && _this.dimensionCombinationsForDisplay()[startIndex].ProductDimensions.length < _this._numberOfDimensionCombinations) {
                        _this.dimensionCombinationsForDisplay().forEach(function (dimension, dimensionIndex) {
                            if (dimensionIndex !== 0 || startIndex === 0) {
                                var dimensionValues_1 = _this.dimensionCombinationsForDisplay()[dimensionIndex].ProductDimensions;
                                dimensions_1.forEach(function (dimension, dimensionValueIndex) {
                                    dimensionValues_1.push(dimension.ProductDimensions[dimensionIndex - startIndex]);
                                });
                                _this.dimensionCombinationsForDisplay()[dimensionIndex] =
                                    { ProductDimensions: dimensionValues_1 };
                            }
                        });
                        _this.dimensionCombinationsForDisplay.valueHasMutated();
                    }
                    var numRowsInViewPort = _this._getNumberOfRowsInViewport();
                    if (_this._skip < _this._numberOfDimensionCombinations && (_this._skip <= numRowsInViewPort || _this._isLastRowVisible())) {
                        _this._isRetrievingMoreData = false;
                        _this._getMoreData();
                    }
                    if (_this._skip >= _this._numberOfDimensionCombinations) {
                        _this._removePagingHandlers();
                    }
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }).always(function () {
                    _this._isRetrievingMoreData = false;
                    _this.isBusy(false);
                });
            }
        };
        VariantMatrixViewModel.prototype._onScrollYHandler = function () {
            if (this._isLastRowVisible()) {
                this._getMoreData();
            }
        };
        VariantMatrixViewModel.prototype._onScrollXHandler = function () {
            var $topDimensionValuesRowElement = $(this.matrixElement).find(VariantMatrixViewModel.topDimensionValuesRowClassString);
            var $scrollXElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollXClassString);
            if (Commerce.CSSHelpers.isRightToLeft()) {
                $topDimensionValuesRowElement.css("right", (-1) * $scrollXElement.scrollLeft());
            }
            else {
                $topDimensionValuesRowElement.css("left", (-1) * $scrollXElement.scrollLeft());
            }
        };
        VariantMatrixViewModel.prototype._isLastRowVisible = function () {
            var $scrollElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
            var $lastRowElement = $(this.matrixElement).find(VariantMatrixViewModel.matrixRowClassString + (this.itemsList().length - 1));
            var isLastRowVisible = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollElement[0]) && !Commerce.ObjectExtensions.isNullOrUndefined($lastRowElement[0])) {
                var scrollTopPosition = $scrollElement.scrollTop() + $scrollElement[0].offsetTop;
                var scrollBottomPosition = $scrollElement.scrollTop() + $scrollElement[0].offsetTop + $scrollElement.height();
                var lastRowTopPosition = $lastRowElement[0].offsetTop;
                isLastRowVisible = (lastRowTopPosition >= scrollTopPosition) && (lastRowTopPosition <= scrollBottomPosition);
            }
            return isLastRowVisible;
        };
        VariantMatrixViewModel.prototype._getNumberOfRowsInViewport = function () {
            var numberOfRows = 0;
            var $scrollElement = $(this.matrixElement).find(VariantMatrixViewModel.scrollYClassString);
            if (!Commerce.ObjectExtensions.isNullOrUndefined($scrollElement)) {
                var scrollHeight = $scrollElement.height();
                var rowHeight = VariantMatrixViewModel.rowHeight;
                numberOfRows = scrollHeight / rowHeight;
            }
            return numberOfRows;
        };
        VariantMatrixViewModel.rowHeight = 80;
        VariantMatrixViewModel.maxColumnWidth = 296;
        VariantMatrixViewModel.singleDimensionColumnWidth = 148;
        VariantMatrixViewModel.topDimensionValuesRowClassString = ".topDimensionValuesRow";
        VariantMatrixViewModel.scrollYClassString = ".scrollY";
        VariantMatrixViewModel.scrollXClassString = ".scrollX";
        VariantMatrixViewModel.matrixRowClassString = ".matrixRow";
        VariantMatrixViewModel.topDimensionWidthClassIdStringTemplate = "variantMatrix{0}TopDimensionWidth";
        VariantMatrixViewModel.topDimensionWidthClassContentStringTemplate = "#{0}.variantMatrix .topDimensionWidth { max-width: {1}px; }";
        return VariantMatrixViewModel;
    }());
    Commerce.VariantMatrixViewModel = VariantMatrixViewModel;
    var VariantMatrixControl = (function () {
        function VariantMatrixControl() {
        }
        VariantMatrixControl.createAfterRender = function ($element, options, viewModel) {
            return function (element) {
                viewModel.afterRender();
                $element.keydown(function (event) {
                    var anyKeyPressHandled = false;
                    if ((event.keyCode === 13 || event.keyCode === 108)) {
                        $(event.target)[0].click();
                        anyKeyPressHandled = true;
                    }
                    if (anyKeyPressHandled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        return false;
                    }
                });
            };
        };
        VariantMatrixControl.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            if (Commerce.StringExtensions.isNullOrWhitespace(element.id)) {
                throw "Invalid options passed to the VariantMatrix control: id cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                throw "Invalid options passed to the VariantMatrix control: options cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.dimensions)) {
                throw "Invalid options passed to the VariantMatrix control: dimensions cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cellTemplateId)) {
                throw "Invalid options passed to the VariantMatrix control: cellTemplateId cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cellClickHandler)) {
                throw "Invalid options passed to the VariantMatrix control: cellClickHandler cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.cellCallerMethod)) {
                throw "Invalid options passed to the VariantMatrix control: cellCallerMethod cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.pageSize)) {
                throw "Invalid options passed to the VariantMatrix control: pageSize cannot be null or undefined.";
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(options.isCellSlashStyleVisible)) {
                options.isCellSlashStyleVisible = function (item) {
                    return false;
                };
            }
            var variantMatrixViewModel = new VariantMatrixViewModel(element, options, viewModel);
            var matrixOptions = {
                options: options,
                itemsList: variantMatrixViewModel.itemsList,
                dimensions: variantMatrixViewModel.dimensionCombinationsForDisplay,
                matrixViewModel: variantMatrixViewModel,
                viewContext: viewModel
            };
            var afterRender = VariantMatrixControl.createAfterRender($(element), options, variantMatrixViewModel);
            ko.applyBindingsToNode(element, {
                template: {
                    name: VariantMatrixControl.variantMatrixTemplateName,
                    data: matrixOptions,
                    afterRender: afterRender
                }
            });
            element.variantMatrixViewModel = variantMatrixViewModel;
            $(element).addClass("variantMatrix");
            var menuElement = document.createElement("div");
            ko.applyBindingsToNode(menuElement, {
                template: {
                    name: VariantMatrixControl.dimensionMenuTemplateName,
                    data: matrixOptions
                }
            }, this);
            document.body.insertBefore(menuElement, null);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                document.body.removeChild(menuElement);
                variantMatrixViewModel.dispose();
            });
            return { controlsDescendantBindings: true };
        };
        VariantMatrixControl.variantMatrixTemplateName = "variantMatrixTemplate";
        VariantMatrixControl.dimensionMenuTemplateName = "dimensionMenuTemplate";
        return VariantMatrixControl;
    }());
    Commerce.VariantMatrixControl = VariantMatrixControl;
    ko.bindingHandlers.variantMatrix = new VariantMatrixControl();
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.AddPaymentActivity.prototype.execute = function () {
            var _this = this;
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var onPaymentResultAvailableAsync = function (paymentViewResult) {
                var responseHandlerResult;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentViewResult)) {
                    _this.response = { tenderLine: paymentViewResult.paymentResult };
                    if (Commerce.ObjectExtensions.isFunction(_this.responseHandler)) {
                        responseHandlerResult = _this.responseHandler(_this.response);
                    }
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(responseHandlerResult)) {
                    responseHandlerResult = Commerce.AsyncResult.createResolved({ canceled: Commerce.ObjectExtensions.isNullOrUndefined(_this.response) });
                }
                return responseHandlerResult.done(function (result) {
                    if (result.canceled && Commerce.ViewModelAdapter.isInView("NewPaymentView")) {
                        return;
                    }
                    activityResult.resolve(result);
                });
            };
            var viewOptions = {
                tenderType: this.context.tenderType,
                fullAmountDue: this.context.fullAmountDue,
                onPaymentResultAvailableAsync: onPaymentResultAvailableAsync,
                correlationId: this.context.correlationId || Commerce.StringExtensions.EMPTY,
                cardPaymentOptions: this.context.cardPaymentOptions || null
            };
            Commerce.ViewModelAdapter.navigate("NewPaymentView", viewOptions);
            return activityResult.done(function (result) {
                if (result.canceled) {
                    Commerce.ViewModelAdapter.collapse(originalViewName);
                }
                else {
                    Commerce.ViewModelAdapter.navigateBack();
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ApprovePartialAmountActivity.prototype.execute = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                throw new Error("Invalid options passed: ApprovePartialAmountActivity was passed invalid options.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(this.context.amountAuthorized)) {
                throw new Error("Invalid options passed: ApprovePartialAmountActivity was passed invalid amountAuthorized.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(this.context.amountRequested)) {
                throw new Error("Invalid options passed: ApprovePartialAmountActivity was passed invalid amountRequested.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(this.context.amountAuthorizedCurrencyCode)) {
                throw new Error("Invalid options passed: ApprovePartialAmountActivity was passed invalid amountAuthorizedCurrencyCode.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(this.context.amountRequestedCurrencyCode)) {
                throw new Error("Invalid options passed: ApprovePartialAmountActivity was passed invalid amountRequestedCurrencyCode.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(this.context.correlationId)) {
                throw new Error("Invalid options passed: ApprovePartialAmountActivity was passed invalid correlationId.");
            }
            var approvePartialAmountDialog = new Commerce.Controls.ApprovePartialAmountDialog();
            var approvePartialAmountDialogOptions = {
                amountAuthorized: this.context.amountAuthorized,
                amountAuthorizedCurrencyCode: this.context.amountAuthorizedCurrencyCode,
                amountRequested: this.context.amountRequested,
                amountRequestedCurrencyCode: this.context.amountRequestedCurrencyCode,
                correlationId: this.context.correlationId
            };
            Commerce.RetailLogger.posApprovePartialAmountActivityStarted(this.context.correlationId);
            var asyncResult = new Commerce.VoidAsyncResult();
            approvePartialAmountDialog.show(approvePartialAmountDialogOptions, true)
                .on(Commerce.DialogResult.OK, function () {
                _this.response = {
                    isApproved: true
                };
                Commerce.RetailLogger.posApprovePartialAmountActivitySucceeded(_this.context.correlationId, "Approved");
                asyncResult.resolve();
            }).on(Commerce.DialogResult.Cancel, function () {
                _this.response = {
                    isApproved: false
                };
                Commerce.RetailLogger.posApprovePartialAmountActivitySucceeded(_this.context.correlationId, "Not Approved");
                asyncResult.resolve();
            }).onError(function (errors) {
                Commerce.RetailLogger.posApprovePartialAmountActivityFailed(_this.context.correlationId, Commerce.ErrorHelper.serializeError(errors));
                approvePartialAmountDialog.hide().always(function () { asyncResult.reject(errors); });
            });
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.CashManagementActivity.prototype.execute = function () {
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var selectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                Commerce.ViewModelAdapter.navigateBack();
                activityResult.resolve({ canceled: false, data: selection });
            }, function () {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                activityResult.resolve({ canceled: true, data: null });
            });
            var viewOptions = {
                transactionType: this.context.transactionType,
                shift: this.context.shift,
                selectionHandler: selectionHandler
            };
            Commerce.ViewModelAdapter.navigate("CashManagementView", viewOptions);
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.CheckSuspendedTransactionsActivity.prototype.execute = function () {
            var _this = this;
            var viewVoidSelectionMethodDialog = new Commerce.Controls.CheckSuspendedTransactionsDialog();
            var result = new Commerce.AsyncResult();
            var dialogOptions = {};
            var updateResponse = function (dialogResult) {
                return { viewVoidSelectionMethod: dialogResult.viewVoidSelectionMethod };
            };
            viewVoidSelectionMethodDialog.show(dialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(this, viewVoidSelectionMethodDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
                else if (_this.response.viewVoidSelectionMethod === Activities.ViewVoidSelectionMethod.ViewAll) {
                    Commerce.ViewModelAdapter.navigate("ResumeCartView");
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ConfirmRelatedLinesVoidActivity.prototype.execute = function () {
            var _this = this;
            var voidAllRelatedLines = "VoidAllRelated";
            var voidOnlySelectedLine = "VoidOnlySelected";
            var listInputDialog = new Commerce.Controls.ListInputDialog();
            var items = [
                {
                    label: Commerce.ViewModelAdapter.getResourceString("string_4470"),
                    value: voidAllRelatedLines
                },
                {
                    label: Commerce.ViewModelAdapter.getResourceString("string_4471"),
                    value: voidOnlySelectedLine
                }
            ];
            var listInputDialogOptions = {
                title: Commerce.ViewModelAdapter.getResourceString("string_4468"),
                subTitle: Commerce.ViewModelAdapter.getResourceString("string_4469"),
                items: items,
                getDisplayNameCallback: function (value) {
                    return value.label;
                }
            };
            listInputDialog.show(listInputDialogOptions, false).on(Commerce.DialogResult.OK, function (result) {
                if (result.value === voidAllRelatedLines) {
                    _this.response = { mode: Activities.RelatedLineVoidMode.All };
                }
                else if (result.value === voidOnlySelectedLine) {
                    _this.response = { mode: Activities.RelatedLineVoidMode.Selected };
                }
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(listInputDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ModalDialogHelper = (function () {
            function ModalDialogHelper() {
            }
            ModalDialogHelper.toVoidAsyncResult = function (dialog, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                var asyncResult = new Commerce.AsyncResult(null);
                dialog.dialogResult
                    .on(Commerce.DialogResult.OK, function () {
                    ModalDialogHelper.hideDialogAndResolve(dialog, hideOnResult, asyncResult);
                }).on(Commerce.DialogResult.Cancel, function () {
                    ModalDialogHelper.hideDialogAndResolve(dialog, hideOnResult, asyncResult, true);
                }).on(Commerce.DialogResult.Close, function () {
                    ModalDialogHelper.hideDialogAndResolve(dialog, hideOnResult, asyncResult);
                }).on(Commerce.DialogResult.Yes, function () {
                    ModalDialogHelper.hideDialogAndResolve(dialog, hideOnResult, asyncResult);
                }).on(Commerce.DialogResult.No, function () { asyncResult.resolve({ canceled: false }); })
                    .onError(function (errors) { asyncResult.reject(errors); });
                return asyncResult;
            };
            ModalDialogHelper.callResponseHandler = function (activity, dialog, onDialogResult, asyncResult, updateResponse) {
                var resultHandler = function (result) {
                    if (updateResponse) {
                        activity.response = updateResponse(result);
                    }
                    if (activity.responseHandler) {
                        return activity.responseHandler(activity.response);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                var cancelableDataResult = new Commerce.AsyncResult();
                asyncResult.resolveOrRejectOn(cancelableDataResult);
                ModalDialogHelper._handleDialogResultInternal(dialog, onDialogResult, cancelableDataResult, resultHandler);
            };
            ModalDialogHelper.handleDialogResult = function (dialog, onDialogResult, resultHandler) {
                var asyncResult = new Commerce.AsyncResult();
                ModalDialogHelper._handleDialogResultInternal(dialog, onDialogResult, asyncResult, resultHandler);
                return asyncResult;
            };
            ModalDialogHelper._handleDialogResultInternal = function (dialog, onDialogResult, asyncResult, resultHandler) {
                dialog.dialogResult
                    .on(onDialogResult, function (result) {
                    if (resultHandler) {
                        dialog.indeterminateWaitVisible(true);
                        resultHandler(result)
                            .done(function () {
                            dialog.hide().done(function () { asyncResult.resolve({ data: result, canceled: false }); });
                        }).fail(function (errors) {
                            dialog.indeterminateWaitVisible(false);
                            dialog.clearResult();
                            if (Commerce.Session.instance.isSessionStateValid) {
                                Commerce.NotificationHandler.displayClientErrors(errors)
                                    .done(function () { dialog.focus(); });
                                ModalDialogHelper._handleDialogResultInternal(dialog, onDialogResult, asyncResult, resultHandler);
                            }
                            else {
                                dialog.hide().done(function () { asyncResult.resolve({ data: null, canceled: true }); });
                            }
                        });
                    }
                    else {
                        dialog.hide().done(function () { asyncResult.resolve({ data: result, canceled: false }); });
                    }
                }).on(Commerce.DialogResult.Cancel, function () {
                    dialog.hide().done(function () { asyncResult.resolve({ data: null, canceled: true }); });
                }).onError(function (errors) {
                    dialog.hide().done(function () { asyncResult.reject(errors); });
                });
            };
            ModalDialogHelper.hideDialogAndResolve = function (dialog, hideOnResult, asyncResult, canceled) {
                if (canceled === void 0) { canceled = false; }
                if (hideOnResult) {
                    dialog.hide().done(function () { asyncResult.resolve({ canceled: canceled }); });
                }
                else {
                    asyncResult.resolve({ canceled: canceled });
                }
            };
            return ModalDialogHelper;
        }());
        Activities.ModalDialogHelper = ModalDialogHelper;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.CreateCashManagementTransactionActivity.prototype.execute = function () {
            var _this = this;
            Commerce.RetailLogger.createCashManagementTransactionActivityStarted(this.context.correlationId, this.context.transactionType.Name);
            var dialog = new Commerce.Controls.CreateCashManagementTransactionDialog({
                correlationId: this.context.correlationId,
                title: this.context.title,
                transactionContext: this.context.transactionContext,
                transactionType: this.context.transactionType,
                amount: this.context.amount,
                contextShift: this.context.contextShift,
                contextStoreSafe: this.context.contextStoreSafe,
                createFromAvailableEntry: this.context.createFromAvailableEntry,
                selectedAvailableEntry: this.context.selectedAvailableEntry,
                availableShifts: this.context.availableShifts,
                availableStoreSafes: this.context.availableStoreSafes
            });
            var activityResult = new Commerce.AsyncResult();
            dialog.show(null, true)
                .on(Commerce.DialogResult.OK, function (dialogResponse) {
                Commerce.RetailLogger.createCashManagementTransactionActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Completed");
                _this.response = {
                    transaction: dialogResponse.cashManagementTransaction
                };
                activityResult.resolve({ canceled: false, data: _this.response });
            }).on(Commerce.DialogResult.Cancel, function (dialogResponse) {
                Commerce.RetailLogger.createCashManagementTransactionActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Cancelled");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: null });
            }).on(Commerce.DialogResult.Close, function (dialogResponse) {
                Commerce.RetailLogger.createCashManagementTransactionActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Closed");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: null });
            }).onError(function (errors) {
                Commerce.RetailLogger.createCashManagementTransactionActivityFailed(_this.context.correlationId, _this.context.transactionType.Name, Commerce.ErrorHelper.serializeError(errors));
                activityResult.reject(errors);
            });
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.DepositOverrideActivity.prototype.execute = function () {
            var _this = this;
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var selectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                Commerce.ViewModelAdapter.navigate("CartView");
                activityResult.resolve({ canceled: false, data: selection });
            }, function () {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                activityResult.resolve({ canceled: true, data: null });
            }, function (selection) {
                return _this.responseHandler({ depositOverrideAmount: selection });
            });
            var viewOptions = {
                selectionHandler: selectionHandler
            };
            Commerce.ViewModelAdapter.navigate("DepositOverrideView", viewOptions);
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.DisplayMessageActivity.prototype.execute = function () {
            var self = this;
            var buttons = self.context.buttons;
            var hasButton = Commerce.ArrayExtensions.hasElements(buttons);
            if (!hasButton) {
                buttons = [
                    {
                        id: "DefaultMessageDialogButton",
                        label: Commerce.ViewModelAdapter.getResourceString("string_75"),
                        operationId: Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK,
                        isPrimary: true
                    }
                ];
            }
            var messageDialog = new Commerce.Controls.MessageDialog();
            var dialogState = {
                title: self.context.title,
                subTitle: self.context.subTitle,
                content: self.context.message,
                showCloseX: self.context.showCloseX,
                buttons: buttons,
                hideOnEscape: false
            };
            var result = new Commerce.AsyncResult();
            var hideOnResult = self.context.showCloseX === true || !hasButton;
            messageDialog.show(dialogState, hideOnResult).onAny(function (messageDialogResult) {
                self.response = { operationId: messageDialogResult.toString() };
                if (messageDialogResult === Commerce.DialogResult.No) {
                    messageDialog.hide().done(function () { result.resolve({ canceled: true }); });
                }
            });
            Activities.ModalDialogHelper.callResponseHandler(self, messageDialog, Commerce.DialogResult.Yes, result);
            return result;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PaymentMessageDialog = (function (_super) {
            __extends(PaymentMessageDialog, _super);
            function PaymentMessageDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "PaymentMessageDialog";
                _this.messageText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.buttonText = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            PaymentMessageDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    this.messageText(dialogState.messageText);
                    this.title(dialogState.title);
                    this.buttonText(dialogState.buttonText);
                }
                this.visible(true);
            };
            PaymentMessageDialog.prototype.buttonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return PaymentMessageDialog;
        }(Controls.ModalDialog));
        Controls.PaymentMessageDialog = PaymentMessageDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var paymentMessageDialog;
        Activities.DisplayPaymentMessageDialogActivity.prototype.execute = function () {
            var self = this;
            var dialogState;
            paymentMessageDialog = new Commerce.Controls.PaymentMessageDialog();
            dialogState = {
                title: self.context.title,
                messageText: self.context.messageText,
                buttonText: self.context.buttonText
            };
            paymentMessageDialog.show(dialogState, false);
            return Activities.ModalDialogHelper.toVoidAsyncResult(paymentMessageDialog, true);
        };
        Activities.DisplayPaymentMessageDialogActivity.prototype.cancel = function () {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentMessageDialog)) {
                paymentMessageDialog.hide();
                return Commerce.AsyncResult.createResolved()
                    .always(function () {
                    paymentMessageDialog = null;
                });
            }
            else {
                return Commerce.AsyncResult.createRejected();
            }
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var EditSalesOrderAttributesDialog = (function (_super) {
            __extends(EditSalesOrderAttributesDialog, _super);
            function EditSalesOrderAttributesDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "EditSalesOrderAttributesDialog";
                _this.attributeViewModels = ko.observableArray([]);
                _this.attributeGroupName = ko.observable(null);
                return _this;
            }
            EditSalesOrderAttributesDialog.prototype.onShowing = function (dialogInput) {
                var _this = this;
                this.title(Commerce.ViewModelAdapter.getResourceString("string_4477"));
                this.attributeGroupName(dialogInput.attributeGroupName);
                this.attributeViewModels([]);
                dialogInput.attributesData.forEach(function (attributeData) {
                    var salesOrderAttributeViewModelOptions = {
                        attributeDefinition: attributeData.attributeDefinition
                    };
                    var viewModel = new Commerce.ViewModels.SalesOrderAttributeViewModel(salesOrderAttributeViewModelOptions);
                    viewModel.attributeValue(attributeData.attributeValue);
                    _this.attributeViewModels.push(viewModel);
                });
                this.visible(true);
            };
            EditSalesOrderAttributesDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._getModifiedAttributeValues());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        this.attributeViewModels().forEach(function (vm) {
                            vm.cancelChanges();
                        });
                        break;
                }
            };
            EditSalesOrderAttributesDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            EditSalesOrderAttributesDialog.prototype._getModifiedAttributeValues = function () {
                var modifiedAttributeValues = [];
                this.attributeViewModels().forEach(function (vm) {
                    if (vm.isModified()) {
                        vm.commitChanges();
                        modifiedAttributeValues.push(vm.attributeValue());
                    }
                });
                return modifiedAttributeValues;
            };
            return EditSalesOrderAttributesDialog;
        }(Controls.ModalDialog));
        Controls.EditSalesOrderAttributesDialog = EditSalesOrderAttributesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.EditSalesOrderAttributesActivity.prototype.execute = function () {
            var _this = this;
            var editSalesOrderAttributesDialog = new Commerce.Controls.EditSalesOrderAttributesDialog();
            var editSalesOrderAttributesDialogOptions = {
                attributeGroupName: this.context.attributeGroupName,
                attributesData: this.context.attributesData
            };
            var activityResult = new Commerce.AsyncResult();
            editSalesOrderAttributesDialog.show(editSalesOrderAttributesDialogOptions)
                .on(Commerce.DialogResult.OK, function (attributeValues) {
                activityResult.resolve({ canceled: false, data: attributeValues });
            })
                .on(Commerce.DialogResult.Cancel, function () {
                activityResult.resolve({ canceled: true, data: undefined });
            })
                .onError(function (errors) {
                activityResult.reject(errors);
            });
            var attributeValues = null;
            var asyncQueue = new Commerce.AsyncQueue();
            return asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(activityResult.done(function (result) {
                    attributeValues = result.canceled ? null : result.data;
                }));
            }).enqueue(function () {
                if (!Commerce.ObjectExtensions.isFunction(_this.responseHandler)) {
                    return Commerce.AsyncResult.createResolved();
                }
                return _this.responseHandler(attributeValues);
            }).run().map(function (result) {
                return { canceled: result.canceled, data: attributeValues };
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetAdvancedCustomerSearchActivity.prototype.execute = function () {
            var self = (this);
            var searchRefinerDialog = new Commerce.Controls.SearchRefinerDialog();
            var advancedCustomerSearchFields = Commerce.ApplicationContext.Instance.customerSearchFields.filter(function (value) {
                return value.CanBeRefined;
            });
            var preSelectedValues = Commerce.ArrayExtensions.hasElements(self.context.preSelectedSearchFieldValues) ? self.context.preSelectedSearchFieldValues : [];
            var refiners;
            refiners = advancedCustomerSearchFields.map(function (value) {
                var matchingPreSelectedValues = preSelectedValues.filter(function (preSelectedValue) {
                    return preSelectedValue.SearchField.Name === value.SearchField.Name;
                });
                var selectedValue = null;
                if (Commerce.ArrayExtensions.hasElements(matchingPreSelectedValues)) {
                    selectedValue = matchingPreSelectedValues[0].SearchTerm;
                }
                var refiner = new Commerce.Refiners.TextRefiner(value.SearchField.Name, value.DisplayName, selectedValue, null);
                return refiner;
            });
            var preSelectedSearchLocation = self.context.preSelectedSearchLocation ? self.context.preSelectedSearchLocation : Commerce.Proxy.Entities.SearchLocation.Local;
            var searchRefinerDialogOptions = {
                refiners: refiners,
                preSelectedSearchLocation: preSelectedSearchLocation
            };
            searchRefinerDialog.title(Commerce.ViewModelAdapter.getResourceString("string_1052"));
            searchRefinerDialog.show(searchRefinerDialogOptions, false);
            var asyncResult = new Commerce.AsyncResult(null);
            Activities.ModalDialogHelper.callResponseHandler(self, searchRefinerDialog, Commerce.DialogResult.OK, asyncResult, function (searchRefinerDialogResult) {
                var selectedSearchFieldValues = [];
                if (Commerce.ArrayExtensions.hasElements(searchRefinerDialogResult.selectedRefiners)) {
                    selectedSearchFieldValues = searchRefinerDialogResult.selectedRefiners.map(function (value) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                            return null;
                        }
                        var criterion = {
                            SearchTerm: value.SelectedValue,
                            SearchField: Commerce.ExtensibleEnumerations.CustomerSearchFieldType.getByName(value.ID)
                        };
                        return criterion;
                    });
                }
                var response = {
                    selectedSearchFieldValues: selectedSearchFieldValues,
                    selectedSearchLocation: searchRefinerDialogResult.selectedSearchLocation
                };
                return response;
            });
            return asyncResult.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetBankBagNumberActivity.prototype.execute = function () {
            var self = (this);
            var textInputDialog = new Commerce.Controls.TextInputDialog();
            var activityResult = new Commerce.AsyncResult();
            textInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_4129"));
            textInputDialog.show({ maxLength: self.context.bankBagNumberMaxLength, rowsNumber: 1 })
                .on(Commerce.DialogResult.OK, function (inputValue) {
                self.response = { bagNumber: inputValue };
                activityResult.resolve({ canceled: false });
            }).on(Commerce.DialogResult.Cancel, function (result) {
                self.response = null;
                activityResult.resolve({ canceled: true });
            }).onError(function (errors) {
                activityResult.reject(errors);
            });
            return activityResult.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetCancellationChargeModalDialog = (function (_super) {
            __extends(GetCancellationChargeModalDialog, _super);
            function GetCancellationChargeModalDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetCancellationChargeModalDialog";
                _this.cancellationCharge = ko.observable("0");
                _this.depositPaid = ko.observable("0");
                _this._isOKButtonDisabled = ko.computed(function () {
                    var cancellationCharge = Commerce.NumberExtensions.parseNumber(_this.cancellationCharge());
                    return isNaN(cancellationCharge) || cancellationCharge < 0;
                });
                return _this;
            }
            GetCancellationChargeModalDialog.prototype.onShowing = function (dialogOptions) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogOptions)
                    || Commerce.ObjectExtensions.isNullOrUndefined(dialogOptions.originalCancellationCharge)) {
                    dialogOptions = { originalCancellationCharge: 0, depositPaid: 0 };
                }
                this.cancellationCharge(Commerce.NumberExtensions.formatNumber(dialogOptions.originalCancellationCharge, Commerce.NumberExtensions.getDecimalPrecision()));
                this.depositPaid(Commerce.NumberExtensions.formatCurrency(dialogOptions.depositPaid ? dialogOptions.depositPaid : 0));
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetCancellationChargeModalDialog.prototype.getCancellationChargeButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._getCancellationChargeInvokedHandler();
                        break;
                }
            };
            GetCancellationChargeModalDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.getCancellationChargeButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            GetCancellationChargeModalDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetCancellationChargeModalDialog.prototype._getCancellationChargeInvokedHandler = function () {
                var cancellationCharge = Commerce.NumberExtensions.parseNumber(this.cancellationCharge());
                this.dialogResult.resolve(Commerce.DialogResult.OK, cancellationCharge);
            };
            return GetCancellationChargeModalDialog;
        }(Controls.ModalDialog));
        Controls.GetCancellationChargeModalDialog = GetCancellationChargeModalDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCancellationChargeActivity.prototype.execute = function () {
            var _this = this;
            var getCancellationChargeDialog = new Commerce.Controls.GetCancellationChargeModalDialog();
            getCancellationChargeDialog.show(this.context, false)
                .on(Commerce.DialogResult.OK, function (chargeAmount) {
                _this.response = { cancellationChargeAmount: chargeAmount };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getCancellationChargeDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCartLineCommentsActivity.prototype.execute = function () {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            var comments = [];
            var textInputDialog = new Commerce.Controls.TextInputDialog();
            asyncQueue
                .enqueue(function () {
                var result = createProductCommentQueue(textInputDialog, _this.context.cartLines, comments).run();
                return asyncQueue.cancelOn(result);
            }).enqueue(function () {
                _this.response = { comments: comments };
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(_this, textInputDialog, Commerce.DialogResult.OK, asyncResult);
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
        function createProductCommentQueue(textInputDialog, cartLines, comments) {
            var asyncQueue = new Commerce.AsyncQueue();
            cartLines.forEach(function (cartLine) {
                asyncQueue.enqueue(function () {
                    textInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_186"));
                    textInputDialog.subTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_929"), cartLine.ItemId, cartLine.Description));
                    textInputDialog.subTitleCssClass("primaryFontColor");
                    textInputDialog.show({
                        content: cartLine.Comment,
                        maxLength: 60,
                        rowsNumber: 2,
                        hideScrollbar: true,
                        enterKeyDisabled: true,
                        labelResx: "string_197"
                    }, false)
                        .on(Commerce.DialogResult.OK, function (comment) {
                        comments.push(comment);
                    }).on(Commerce.DialogResult.Cancel, function () {
                        textInputDialog.hide();
                    });
                    return asyncQueue.cancelOn(Activities.ModalDialogHelper.toVoidAsyncResult(textInputDialog, false));
                });
            });
            return asyncQueue;
        }
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AddDiscountDialog = (function (_super) {
            __extends(AddDiscountDialog, _super);
            function AddDiscountDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "AddDiscountDialog";
                _this._discountType = ko.observable(Commerce.Proxy.Entities.ManualDiscountType.None);
                _this._isLineDiscount = false;
                _this._discountValue = ko.observable("0");
                _this._discountInputLabel = ko.observable("");
                _this.isPercentType = ko.computed(function () {
                    var discountType = _this._discountType();
                    return (discountType === Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent)
                        || (discountType === Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent);
                });
                return _this;
            }
            AddDiscountDialog.prototype.onShowing = function (dialogState) {
                this._discountType(dialogState.discountType);
                this._cartLine = dialogState.cartLine;
                this._discountValue("0");
                var errorCode = this.checkSupportedDiscountType();
                if (!Commerce.StringExtensions.isNullOrWhitespace(errorCode)) {
                    this.dialogResult.reject([new Commerce.Proxy.Entities.Error(errorCode)]);
                    return;
                }
                this.subTitle(this._isLineDiscount
                    ? Commerce.CartLineHelper.getProductName(this._cartLine)
                    : Commerce.StringExtensions.EMPTY);
                this.title(this.getTitleString());
                this._discountInputLabel(this.getDiscountInputLabel());
                this.visible(true);
            };
            AddDiscountDialog.prototype.addDiscountButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var discountValue = this._discountValue();
                        var testNum = Commerce.NumberExtensions.parseNumber(discountValue);
                        if (isNaN(testNum) || testNum < 0) {
                            Commerce.NotificationHandler.displayErrorMessage("string_29823");
                        }
                        else {
                            Commerce.RetailLogger.viewsControlsDiscountDialogProcessingDiscount(discountValue);
                            this.addDiscountSuccess();
                        }
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            AddDiscountDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.addDiscountButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            AddDiscountDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            AddDiscountDialog.prototype.getTitleString = function () {
                var title = null;
                switch (this._discountType()) {
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent:
                        title = Commerce.ViewModelAdapter.getResourceString("string_5606");
                        break;
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent:
                        title = Commerce.ViewModelAdapter.getResourceString("string_5607");
                        break;
                    default:
                        break;
                }
                return title;
            };
            AddDiscountDialog.prototype.getDiscountInputLabel = function () {
                var inputLabel = null;
                switch (this._discountType()) {
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount:
                        inputLabel = Commerce.ViewModelAdapter.getResourceString("string_5608");
                        break;
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent:
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent:
                        inputLabel = Commerce.ViewModelAdapter.getResourceString("string_5609");
                        break;
                    default:
                        break;
                }
                return inputLabel;
            };
            AddDiscountDialog.prototype.checkSupportedDiscountType = function () {
                var errorCode = null;
                var isMissingCartLine = Commerce.ObjectExtensions.isNullOrUndefined(this._cartLine);
                switch (this._discountType()) {
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent:
                        if (isMissingCartLine) {
                            errorCode = Commerce.ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_DISCOUNT;
                        }
                        else {
                            this._isLineDiscount = true;
                        }
                        break;
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount:
                    case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent:
                        this._isLineDiscount = false;
                        break;
                    default:
                        errorCode = Commerce.ErrorTypeEnum.UNSUPPORTED_APPLY_DISCOUNT_OPERATION;
                        break;
                }
                return errorCode;
            };
            AddDiscountDialog.prototype.addDiscountSuccess = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    discountValue: Commerce.NumberExtensions.parseNumber(this._discountValue())
                });
            };
            return AddDiscountDialog;
        }(Controls.ModalDialog));
        Controls.AddDiscountDialog = AddDiscountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCartLineDiscountsActivity.prototype.execute = function () {
            var self = (this);
            var asyncQueue = new Commerce.AsyncQueue();
            var discounts = [];
            var addDiscountDialog = new Commerce.Controls.AddDiscountDialog();
            asyncQueue
                .enqueue(function () {
                var result = createProductDiscountQueue(addDiscountDialog, self.context, discounts).run();
                return asyncQueue.cancelOn(result);
            }).enqueue(function () {
                self.response = { discounts: discounts };
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, addDiscountDialog, Commerce.DialogResult.OK, asyncResult, function (result) { return { discounts: [result.discountValue] }; });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
        function createProductDiscountQueue(addDiscountDialog, context, discounts) {
            var asyncQueue = new Commerce.AsyncQueue();
            context.cartLines.forEach(function (cartLine) {
                asyncQueue.enqueue(function () {
                    var dialogState = {
                        cartLine: cartLine,
                        discountType: context.isPercent
                            ? Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent
                            : Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount
                    };
                    addDiscountDialog.show(dialogState, false)
                        .on(Commerce.DialogResult.OK, function (result) {
                        discounts.push(result.discountValue);
                    }).on(Commerce.DialogResult.Cancel, function () {
                        addDiscountDialog.hide().done(function () { asyncQueue.cancel(); });
                    });
                    return Activities.ModalDialogHelper.toVoidAsyncResult(addDiscountDialog, false);
                });
            });
            return asyncQueue;
        }
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SetQuantityDialog = (function (_super) {
            __extends(SetQuantityDialog, _super);
            function SetQuantityDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SetQuantityDialog";
                _this._backButtonVisible = ko.observable(false);
                _this._itemQuantity = ko.observable("0");
                _this._unitOfMeasureDescription = ko.observable("");
                _this._unitOfMeasureDecimalPrecision = ko.observable(0);
                _this._unitOfMeasureVisible = ko.observable(false);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var quantity = Commerce.NumberExtensions.parseNumber(_this._itemQuantity());
                    return isNaN(quantity);
                });
                _this._cartLines = [];
                _this._cartLineIndex = -1;
                _this._quantities = [];
                return _this;
            }
            SetQuantityDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { cartLines: undefined };
                if (!Commerce.ArrayExtensions.hasElements(dialogState.cartLines)) {
                    this.cancelDialog();
                    return;
                }
                this._cartLines = dialogState.cartLines;
                this.showItem(0);
                this.visible(true);
            };
            SetQuantityDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.onOkButtonClick();
                        break;
                }
            };
            SetQuantityDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            SetQuantityDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            SetQuantityDialog.prototype.itemGoBack = function (element) {
                if (this._cartLineIndex > 0) {
                    this.showItem(this._cartLineIndex - 1);
                }
            };
            SetQuantityDialog.prototype.getTitleString = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._cartLines) || (this._cartLines.length <= 1)) {
                    return Commerce.ViewModelAdapter.getResourceString("string_5300");
                }
                var index = this._cartLineIndex + 1;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5301"), index, this._cartLines.length);
            };
            SetQuantityDialog.prototype.showItem = function (itemIndex) {
                this._cartLineIndex = itemIndex;
                var cartLine = this._cartLines[itemIndex];
                this.title(this.getTitleString());
                this.subTitle(Commerce.CartLineHelper.getProductName(cartLine));
                this._unitOfMeasureDescription(Commerce.Formatters.CartLineUnitOfMeasureFormat(cartLine));
                this._unitOfMeasureDecimalPrecision(Commerce.UnitOfMeasureHelper.getDecimalPrecision(cartLine.UnitOfMeasureSymbol));
                this._unitOfMeasureVisible(!Commerce.StringExtensions.isNullOrWhitespace(cartLine.UnitOfMeasureSymbol));
                this._itemQuantity(Commerce.NumberExtensions.formatNumber(Math.abs(cartLine.Quantity), this._unitOfMeasureDecimalPrecision()));
                this._backButtonVisible(itemIndex > 0);
                this.indeterminateWaitVisible(false);
            };
            SetQuantityDialog.prototype.onOkButtonClick = function () {
                this._quantities[this._cartLineIndex] = Commerce.NumberExtensions.parseNumber(this._itemQuantity());
                var nextItemIndex = this._cartLineIndex + 1;
                if (nextItemIndex >= this._cartLines.length) {
                    this.allQuantitiesSet();
                    return;
                }
                this.showItem(nextItemIndex);
            };
            SetQuantityDialog.prototype.allQuantitiesSet = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { quantities: this._quantities });
            };
            SetQuantityDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SetQuantityDialog;
        }(Controls.ModalDialog));
        Controls.SetQuantityDialog = SetQuantityDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCartLineQuantitiesActivity.prototype.execute = function () {
            var self = (this);
            var setQuantityDialog = new Commerce.Controls.SetQuantityDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                setQuantityDialog.show({ cartLines: self.context.cartLines }, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    self.response = { quantities: [].concat(result.quantities) };
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(setQuantityDialog, false);
            }).enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, setQuantityDialog, Commerce.DialogResult.OK, asyncResult, function (result) {
                    return { quantities: [].concat(result.quantities) };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var UnitOfMeasureDialog = (function (_super) {
            __extends(UnitOfMeasureDialog, _super);
            function UnitOfMeasureDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "UnitOfMeasureDialog";
                _this._backButtonVisible = ko.observable(false);
                _this._unitsOfMeasureForProduct = ko.observableArray([]);
                _this._cartLinesWithUnitOfMeasureOptions = [];
                _this._cartLineIndex = -1;
                _this._unitsOfMeasure = [];
                return _this;
            }
            UnitOfMeasureDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { cartLinesWithUnitOfMeasureOptions: undefined };
                if (!Commerce.ArrayExtensions.hasElements(dialogState.cartLinesWithUnitOfMeasureOptions)) {
                    this.cancelDialog();
                    return;
                }
                this._cartLinesWithUnitOfMeasureOptions = dialogState.cartLinesWithUnitOfMeasureOptions;
                this.showItem(0);
                this.visible(true);
            };
            UnitOfMeasureDialog.prototype.setUnitOfMeasureDialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            UnitOfMeasureDialog.prototype.unitOfMeasureInvokedHandler = function (event) {
                this._unitsOfMeasure[this._cartLineIndex] = event.data;
                var nextItemIndex = this._cartLineIndex + 1;
                if (nextItemIndex >= this._cartLinesWithUnitOfMeasureOptions.length) {
                    this.allUnitOfMeasuresSet();
                    return true;
                }
                this.showItem(nextItemIndex);
                return true;
            };
            UnitOfMeasureDialog.prototype.itemGoBack = function (element) {
                if (this._cartLineIndex > 0) {
                    this.showItem(this._cartLineIndex - 1);
                }
            };
            UnitOfMeasureDialog.prototype.getTitleString = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._cartLinesWithUnitOfMeasureOptions) || (this._cartLinesWithUnitOfMeasureOptions.length <= 1)) {
                    return Commerce.ViewModelAdapter.getResourceString("string_3200");
                }
                var index = this._cartLineIndex + 1;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3201"), index, this._cartLinesWithUnitOfMeasureOptions.length);
            };
            UnitOfMeasureDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            UnitOfMeasureDialog.prototype.showItem = function (itemIndex) {
                this._cartLineIndex = itemIndex;
                var cartLineWithUofMOptions = this._cartLinesWithUnitOfMeasureOptions[itemIndex];
                this.title(this.getTitleString());
                this.subTitle(Commerce.CartLineHelper.getProductName(cartLineWithUofMOptions.cartLine));
                var unitsOfMeasure = cartLineWithUofMOptions.unitOfMeasureOptions;
                this._unitsOfMeasureForProduct(unitsOfMeasure);
                this._backButtonVisible(itemIndex > 0);
                this.title(this.getTitleString());
                this.indeterminateWaitVisible(false);
            };
            UnitOfMeasureDialog.prototype.allUnitOfMeasuresSet = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedUnitsOfMeasure: this._unitsOfMeasure });
            };
            return UnitOfMeasureDialog;
        }(Controls.ModalDialog));
        Controls.UnitOfMeasureDialog = UnitOfMeasureDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCartLineUnitOfMeasuresActivity.prototype.execute = function () {
            var self = (this);
            var unitOfMeasureDialog = new Commerce.Controls.UnitOfMeasureDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var dialogOptions = {
                    cartLinesWithUnitOfMeasureOptions: self.context.cartLinesWithUnitOfMeasureOptions
                };
                unitOfMeasureDialog.show(dialogOptions, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    self.response = { selectedUnitsOfMeasure: [].concat(result.selectedUnitsOfMeasure) };
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(unitOfMeasureDialog, true);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var WeighItemDialog = (function (_super) {
            __extends(WeighItemDialog, _super);
            function WeighItemDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "WeighItemDialog";
                _this._backButtonVisible = ko.observable(false);
                _this._itemWeight = ko.observable("0");
                _this._unitOfMeasureDescription = ko.observable("");
                _this._unitOfMeasureDecimalPrecision = ko.observable(0);
                _this._unitOfMeasureVisible = ko.observable(false);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var weight = Commerce.NumberExtensions.parseNumber(_this._itemWeight());
                    return Commerce.NumberExtensions.isNullNaNOrZero(weight);
                });
                _this._cartLines = [];
                _this._cartLineIndex = -1;
                _this._weights = [];
                _this._scaleSectionVisible = ko.observable(false);
                _this._weightSectionVisible = ko.observable(false);
                return _this;
            }
            WeighItemDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { cartLines: undefined };
                if (!Commerce.ArrayExtensions.hasElements(dialogState.cartLines)) {
                    this.cancelDialog();
                    return;
                }
                this._cartLines = dialogState.cartLines;
                this.showItem(0);
                this.visible(true);
                this.checkScale();
            };
            WeighItemDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.onOkButtonClick();
                        break;
                }
            };
            WeighItemDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            WeighItemDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            WeighItemDialog.prototype.itemGoBack = function (element) {
                if (this._cartLineIndex > 0) {
                    this.showItem(this._cartLineIndex - 1);
                }
            };
            WeighItemDialog.prototype.getTitleString = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._cartLines) || (this._cartLines.length <= 1)) {
                    return Commerce.ViewModelAdapter.getResourceString("string_5319");
                }
                var index = this._cartLineIndex + 1;
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5320"), index, this._cartLines.length);
            };
            WeighItemDialog.prototype.showControlError = function (error) {
                this.dialogResult.reject([error]);
                this.hide();
            };
            WeighItemDialog.prototype.showItem = function (itemIndex) {
                this._cartLineIndex = itemIndex;
                var cartLine = this._cartLines[itemIndex];
                this.title(this.getTitleString());
                this.subTitle(Commerce.CartLineHelper.getProductName(cartLine));
                this._unitOfMeasureDescription(cartLine.UnitOfMeasureSymbol);
                this._unitOfMeasureDecimalPrecision(Commerce.UnitOfMeasureHelper.getDecimalPrecision(cartLine.UnitOfMeasureSymbol));
                this._unitOfMeasureVisible(!Commerce.StringExtensions.isNullOrWhitespace(cartLine.UnitOfMeasureSymbol));
                this._itemWeight(Commerce.NumberExtensions.formatNumber(Math.abs(cartLine.Quantity), this._unitOfMeasureDecimalPrecision()));
                this._backButtonVisible(itemIndex > 0);
                this._weightSectionVisible(true);
                this._scaleSectionVisible(false);
                this.indeterminateWaitVisible(false);
            };
            WeighItemDialog.prototype.showScaleDialog = function () {
                this.indeterminateWaitVisible(false);
                this._scaleSectionVisible(true);
                this._weightSectionVisible(false);
                this.visible(true);
            };
            WeighItemDialog.prototype.checkScale = function () {
                var _this = this;
                var hardwareProfile = Commerce.ApplicationContext.Instance.hardwareProfile;
                if (hardwareProfile.ScaleDeviceTypeValue !== Commerce.Proxy.Entities.PeripheralDeviceType.None) {
                    this.showScaleDialog();
                    Commerce.Peripherals.instance.scale.read(this)
                        .done(function (result) {
                        if (result > 0) {
                            _this.focus();
                            _this._itemWeight(Commerce.NumberExtensions.formatNumber(result / 1000, _this._unitOfMeasureDecimalPrecision()));
                            _this.onOkButtonClick();
                        }
                        else if (hardwareProfile.ScaleManualInputAllowed) {
                            _this.showManualInput();
                        }
                        else {
                            _this.showControlError(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SCALE_RETURNED_ZERO_WITHOUT_MANUAL_ENTRY, true));
                        }
                    }).fail(function (errors) {
                        var isCalibrationError = Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_SCALE_CALIBRATIONERROR);
                        if (!isCalibrationError && hardwareProfile.ScaleManualInputAllowed) {
                            _this.showManualInput();
                        }
                        else {
                            _this.dialogResult.reject(errors);
                            _this.hide();
                        }
                    });
                }
                else if (hardwareProfile.ScaleManualInputAllowed) {
                    this.showManualInput();
                }
                else {
                    this.showControlError(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SCALE_UNSPECIFIED_WITHOUT_MANUAL_ENTRY, true));
                }
            };
            WeighItemDialog.prototype.showManualInput = function () {
                this.showItem(0);
                this.focus();
            };
            WeighItemDialog.prototype.onOkButtonClick = function () {
                this._weights[this._cartLineIndex] = Commerce.NumberExtensions.parseNumber(this._itemWeight());
                var nextItemIndex = this._cartLineIndex + 1;
                if (nextItemIndex >= this._cartLines.length) {
                    this.allQuantitiesSet();
                    return;
                }
                this.showItem(nextItemIndex);
            };
            WeighItemDialog.prototype.allQuantitiesSet = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { weights: this._weights });
            };
            WeighItemDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return WeighItemDialog;
        }(Controls.ModalDialog));
        Controls.WeighItemDialog = WeighItemDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCartLineWeightActivity.prototype.execute = function () {
            var self = (this);
            var weighItemDialog = new Commerce.Controls.WeighItemDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                weighItemDialog.show({ cartLines: [self.context.cartLine] }, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    self.response = { weight: result.weights[0] };
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(weighItemDialog, false);
            }).enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, weighItemDialog, Commerce.DialogResult.OK, asyncResult, function (result) {
                    return { weight: result.weights[0] };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCashManagementTransactionAmountActivity.prototype.execute = function () {
            var _this = this;
            Commerce.RetailLogger.getCashManagementTransactionAmountActivityStarted(this.context.correlationId, this.context.transactionType.Name);
            var dialog = new Commerce.Controls.GetCashManagementTransactionAmountDialog({
                title: this.context.title,
                transactionType: this.context.transactionType
            });
            var activityResult = new Commerce.AsyncResult();
            dialog.show(null, true)
                .on(Commerce.DialogResult.OK, function (dialogResponse) {
                Commerce.RetailLogger.getCashManagementTransactionAmountActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Completed");
                _this.response = {
                    amount: dialogResponse.amount,
                    tenderCountingRequired: dialogResponse.tenderCountingRequired
                };
                activityResult.resolve({ canceled: false, data: _this.response });
            }).on(Commerce.DialogResult.Cancel, function (dialogResponse) {
                Commerce.RetailLogger.getCashManagementTransactionAmountActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Cancelled");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: _this.response });
            }).on(Commerce.DialogResult.Close, function (dialogResponse) {
                Commerce.RetailLogger.getCashManagementTransactionAmountActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Closed");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: _this.response });
            }).onError(function (errors) {
                Commerce.RetailLogger.getCashManagementTransactionAmountActivityFailed(_this.context.correlationId, _this.context.transactionType.Name, Commerce.ErrorHelper.serializeError(errors));
                activityResult.reject(errors);
            });
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCashManagementTransactionSourceActivity.prototype.execute = function () {
            var _this = this;
            Commerce.RetailLogger.getCashManagementTransactionSourceActivityStarted(this.context.correlationId, this.context.transactionType.Name);
            var dialog = new Commerce.Controls.GetCashManagementTransactionSourceDialog({
                title: this.context.title,
                transactionType: this.context.transactionType,
                availableEntries: this.context.availableEntries,
                allEmployees: this.context.allEmployees,
                storeSafes: this.context.storeSafes
            });
            var activityResult = new Commerce.AsyncResult();
            dialog.show(null, true)
                .on(Commerce.DialogResult.OK, function (dialogResponse) {
                Commerce.RetailLogger.getCashManagementTransactionSourceActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Completed");
                _this.response = {
                    createFromAvailableEntry: dialogResponse.createFromAvailableEntry,
                    selectedAvailableEntry: dialogResponse.selectedAvailableEntry
                };
                activityResult.resolve({ canceled: false, data: _this.response });
            }).on(Commerce.DialogResult.Cancel, function (dialogResponse) {
                Commerce.RetailLogger.getCashManagementTransactionSourceActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Cancelled");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: _this.response });
            }).on(Commerce.DialogResult.Close, function (dialogResponse) {
                Commerce.RetailLogger.getCashManagementTransactionSourceActivitySucceeded(_this.context.correlationId, _this.context.transactionType.Name, "Closed");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: _this.response });
            }).onError(function (errors) {
                Commerce.RetailLogger.getCashManagementTransactionSourceActivityFailed(_this.context.correlationId, _this.context.transactionType.Name, Commerce.ErrorHelper.serializeError(errors));
                activityResult.reject(errors);
            });
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetChargeAmountDialog = (function (_super) {
            __extends(GetChargeAmountDialog, _super);
            function GetChargeAmountDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetChargeAmountDialog";
                _this.chargeAmount = ko.observable("0");
                _this.chargeCode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.chargeInputLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.product = ko.observable(null);
                return _this;
            }
            GetChargeAmountDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions.product = dialogOptions.product || null;
                dialogOptions.chargeCode = dialogOptions.chargeCode || Commerce.StringExtensions.EMPTY;
                this.chargeCode(dialogOptions.chargeCode);
                this.chargeAmount("0");
                if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.HeaderCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5946"));
                }
                else if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.LineCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5948"));
                }
                this.chargeInputLabel(Commerce.ViewModelAdapter.getResourceString("string_5959"));
                this.indeterminateWaitVisible(false);
                this.product(dialogOptions.product);
                this.visible(true);
            };
            GetChargeAmountDialog.prototype.getChargeAmountButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getChargeAmountInvokedHandler();
                        break;
                }
            };
            GetChargeAmountDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.getChargeAmountButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            GetChargeAmountDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetChargeAmountDialog.prototype.getChargeAmountInvokedHandler = function () {
                var response = {
                    chargeAmount: Commerce.NumberExtensions.parseNumber(this.chargeAmount())
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetChargeAmountDialog;
        }(Controls.ModalDialog));
        Controls.GetChargeAmountDialog = GetChargeAmountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetChargeAmountActivity.prototype.execute = function () {
            var _this = this;
            var getChargeAmountDialog = new Commerce.Controls.GetChargeAmountDialog();
            getChargeAmountDialog.show(this.context, false)
                .on(Commerce.DialogResult.OK, function (activityResponse) {
                _this.response = activityResponse;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getChargeAmountDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetChargeCodesDialog = (function (_super) {
            __extends(GetChargeCodesDialog, _super);
            function GetChargeCodesDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetChargeCodesDialog";
                _this.product = ko.observable(null);
                _this.viewModel = new Commerce.ViewModels.GetChargeViewModel();
                return _this;
            }
            GetChargeCodesDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions.product = dialogOptions.product || null;
                if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.HeaderCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5946"));
                }
                else if (dialogOptions.chargeType === Commerce.Proxy.Entities.ChargeTypeEnum.LineCharge) {
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_5948"));
                }
                this.product(dialogOptions.product);
                this.visible(true);
            };
            GetChargeCodesDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetChargeCodesDialog.prototype.itemInvokedHandler = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { chargeCode: item });
            };
            GetChargeCodesDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return GetChargeCodesDialog;
        }(Controls.ModalDialog));
        Controls.GetChargeCodesDialog = GetChargeCodesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetChargeCodesActivity.prototype.execute = function () {
            var _this = this;
            var getChargeCodesDialog = new Commerce.Controls.GetChargeCodesDialog();
            getChargeCodesDialog.show(this.context, false)
                .on(Commerce.DialogResult.OK, function (activityResponse) {
                _this.response = activityResponse;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getChargeCodesDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCouponCodeActivity.prototype.execute = function () {
            var self = (this);
            var asyncQueue = new Commerce.AsyncQueue();
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Alphanumeric,
                enableMagneticStripReader: true,
                enableBarcodeScanner: true,
                numpadLabel: Commerce.ViewModelAdapter.getResourceString("string_13052")
            };
            numpadDialog.title(Commerce.ViewModelAdapter.getResourceString("string_13051"));
            asyncQueue
                .enqueue(function () {
                numpadDialog.show(numpadDialogOptions, false);
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, asyncResult, function (numpadDialogResult) {
                    return { couponCode: numpadDialogResult.value };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NumpadDialogTypes;
        (function (NumpadDialogTypes) {
            NumpadDialogTypes[NumpadDialogTypes["Numeric"] = 0] = "Numeric";
            NumpadDialogTypes[NumpadDialogTypes["Alphanumeric"] = 1] = "Alphanumeric";
            NumpadDialogTypes[NumpadDialogTypes["Currency"] = 2] = "Currency";
        })(NumpadDialogTypes = Controls.NumpadDialogTypes || (Controls.NumpadDialogTypes = {}));
        var NumpadDialogEntryTypes;
        (function (NumpadDialogEntryTypes) {
            NumpadDialogEntryTypes[NumpadDialogEntryTypes["Keyboard"] = 0] = "Keyboard";
            NumpadDialogEntryTypes[NumpadDialogEntryTypes["Barcode"] = 1] = "Barcode";
            NumpadDialogEntryTypes[NumpadDialogEntryTypes["MagneticStripReader"] = 2] = "MagneticStripReader";
        })(NumpadDialogEntryTypes = Controls.NumpadDialogEntryTypes || (Controls.NumpadDialogEntryTypes = {}));
        var NumpadDialog = (function (_super) {
            __extends(NumpadDialog, _super);
            function NumpadDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "NumpadDialog";
                _this._numpadDialogType = ko.observable(NumpadDialogTypes.Alphanumeric);
                _this._numpadTextValue = ko.observable("");
                _this._numpadLabel = ko.observable("");
                _this._numpadParser = ko.observable(undefined);
                _this._numpadDecimalPrecision = ko.observable(undefined);
                _this._numpadLabel = ko.observable("");
                _this._magneticStripReaderEnabled = false;
                _this._barcodeScannerEnabled = false;
                _this._entryType = NumpadDialogEntryTypes.Keyboard;
                _this._enableAllowDialogSuccessOnEmptyText = false;
                _this._ignoreTaskRecorderEventResults = [Commerce.DialogResult.OK];
                _this._isEnteredValueValid = null;
                return _this;
            }
            NumpadDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                this._magneticStripReaderEnabled = dialogState.enableMagneticStripReader;
                if (this._magneticStripReaderEnabled) {
                    Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this)) {
                            _this.onValueScanned(cardInfo.CardNumber, NumpadDialogEntryTypes.MagneticStripReader);
                        }
                    }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.NUMPADDIALOG);
                }
                this._barcodeScannerEnabled = dialogState.enableBarcodeScanner;
                if (this._barcodeScannerEnabled) {
                    Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                        return _this.onValueScanned(barcode, NumpadDialogEntryTypes.Barcode);
                    });
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.customControlData)) {
                    var placeholder = $(this.element).find(".customContent");
                    ko.cleanNode(placeholder[0]);
                    ko.applyBindingsToNode(placeholder[0], {
                        template: {
                            name: dialogState.customControlData.templateID,
                            data: dialogState.customControlData.data
                        }
                    });
                    this._customControlViewModel = dialogState.customControlData.data;
                }
                var value = "";
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.value)) {
                    if (typeof dialogState.value === "string") {
                        value = dialogState.value;
                    }
                    else {
                        value = dialogState.value();
                    }
                }
                this._numpadTextValue(value);
                this._numpadLabel(dialogState.numpadLabel);
                this._numpadParser(dialogState.parser);
                this._numpadDecimalPrecision(dialogState.decimalPrecision);
                this._numpadDialogType(dialogState.numpadDialogType);
                this._isEnteredValueValid = dialogState.isEnteredValueValid;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.enableAllowDialogSuccessOnEmptyText)) {
                    this._enableAllowDialogSuccessOnEmptyText = dialogState.enableAllowDialogSuccessOnEmptyText;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._customControlViewModel) &&
                    Commerce.ObjectExtensions.isFunction(this._customControlViewModel.onValueChanged)) {
                    this._onValueChangedSubscription = this._numpadTextValue.subscribe(function (newValue) {
                        _this._customControlViewModel.onValueChanged(newValue);
                    });
                }
                this.visible(true);
            };
            NumpadDialog.prototype.hide = function () {
                if (this._magneticStripReaderEnabled) {
                    Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.NUMPADDIALOG);
                }
                if (this._barcodeScannerEnabled) {
                    Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                }
                return _super.prototype.hide.call(this);
            };
            NumpadDialog.prototype.dispose = function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._onValueChangedSubscription)) {
                    this._onValueChangedSubscription.dispose();
                }
                this._onValueChangedSubscription = null;
                _super.prototype.dispose.call(this);
            };
            NumpadDialog.prototype.setTextValue = function (textValue) {
                this._numpadTextValue(textValue);
            };
            NumpadDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!Commerce.StringExtensions.isEmptyOrWhitespace(this._numpadTextValue()) || this._enableAllowDialogSuccessOnEmptyText) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._isEnteredValueValid)) {
                        if (this._isEnteredValueValid(this._numpadTextValue())) {
                            this._resolveDialog();
                        }
                        else {
                            Commerce.NotificationHandler.displayErrorMessage("string_13180");
                        }
                    }
                    else {
                        this._resolveDialog();
                    }
                }
            };
            NumpadDialog.prototype.numpadDialogCloseButtonClick = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._customControlViewModel) &&
                    Commerce.ObjectExtensions.isFunction(this._customControlViewModel.onBeforeClose)) {
                    this._customControlViewModel.onBeforeClose(Commerce.DialogResult.Cancel).done(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    });
                }
                else {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                }
            };
            NumpadDialog.prototype.onValueScanned = function (value, entryType) {
                this._numpadTextValue(value);
                this._entryType = entryType;
                this.onTextBoxEnterEventHandler();
            };
            NumpadDialog.prototype._resolveDialog = function () {
                var _this = this;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._customControlViewModel) &&
                    Commerce.ObjectExtensions.isFunction(this._customControlViewModel.onBeforeClose)) {
                    this._customControlViewModel.onBeforeClose(Commerce.DialogResult.OK).done(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            value: _this._numpadTextValue(),
                            entryType: _this._entryType
                        });
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }
                else {
                    this.dialogResult.resolve(Commerce.DialogResult.OK, {
                        value: this._numpadTextValue(),
                        entryType: this._entryType
                    });
                }
            };
            return NumpadDialog;
        }(Controls.ModalDialog));
        Controls.NumpadDialog = NumpadDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCurrencyAmountActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Currency,
                enableMagneticStripReader: false,
                enableBarcodeScanner: false,
                numpadLabel: Commerce.ViewModelAdapter.getResourceString("string_4195")
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                numpadDialog.title(context.title);
                numpadDialog.subTitle(context.subTitle);
                numpadDialogOptions.value = context.amount;
                numpadDialogOptions.decimalPrecision = context.decimalPrecision;
            }
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { amount: dialogResult.value };
            };
            numpadDialog.show(numpadDialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCustomerAccountDepositAmountActivity.prototype.execute = function () {
            var self = (this);
            var amountInputDialog = new Commerce.Controls.PriceInputDialog();
            var dialogState = {
                defaultPrice: 0,
                minPrice: Number.NaN,
                maxPrice: Number.NaN,
                minPriceInclusive: true,
                maxPriceInclusive: true
            };
            amountInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_1927"));
            amountInputDialog.label(Commerce.ViewModelAdapter.getResourceString("string_1928"));
            amountInputDialog.show(dialogState, false)
                .on(Commerce.DialogResult.OK, function (result) {
                self.response = { amount: result };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(amountInputDialog);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetCustomerAccountDepositLineCommentsActivity.prototype.execute = function () {
            var self = (this);
            var asyncQueue = new Commerce.AsyncQueue();
            var comments = [];
            var textInputDialog = new Commerce.Controls.TextInputDialog();
            asyncQueue
                .enqueue(function () {
                var result = createLineCommentQueue(textInputDialog, self.context.customerAccountDepositLines, comments).run();
                return asyncQueue.cancelOn(result);
            }).enqueue(function () {
                self.response = { comments: comments };
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, textInputDialog, Commerce.DialogResult.OK, asyncResult);
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
        function createLineCommentQueue(textInputDialog, customerAccountDepositLines, comments) {
            var asyncQueue = new Commerce.AsyncQueue();
            customerAccountDepositLines.forEach(function (line) {
                asyncQueue.enqueue(function () {
                    textInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_8100"));
                    textInputDialog.show({ content: line.Comment, maxLength: 60 }, false)
                        .on(Commerce.DialogResult.OK, function (comment) {
                        comments.push(comment);
                    }).on(Commerce.DialogResult.Cancel, function () {
                        textInputDialog.hide();
                    });
                    return asyncQueue.cancelOn(Activities.ModalDialogHelper.toVoidAsyncResult(textInputDialog, false));
                });
            });
            return asyncQueue;
        }
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetDateActivity.prototype.execute = function () {
            var self = (this);
            var dialog = new Commerce.Controls.DateInputDialog();
            dialog.title(self.context.title);
            dialog.subTitle(self.context.subTitle);
            dialog.show({
                minYear: self.context.minYear,
                maxYear: self.context.maxYear
            }, false)
                .on(Commerce.DialogResult.OK, function (result) {
                self.response = { date: result };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(dialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetDenominationAmountActivity.prototype.execute = function () {
            var self = (this);
            var result = new Commerce.AsyncResult();
            var decimalPrecision = Commerce.NumberExtensions.getDecimalPrecision(self.context.currency);
            var denominationLineDetailsViewModelOptions = {
                currency: self.context.currency,
                denomination: self.context.denomination,
                currencyTotal: self.context.currencyTotal,
                value: self.context.amount,
                denominationMode: Commerce.ViewModels.IDenominationLineDetailsMode.Amount
            };
            var denominationLineDetailsViewModel = new Commerce.ViewModels.DenominationLineDetailsViewModel(denominationLineDetailsViewModelOptions);
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions;
            numpadDialog.title(self.context.title);
            numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Currency,
                enableMagneticStripReader: false,
                enableBarcodeScanner: false,
                numpadLabel: Commerce.ViewModelAdapter.getResourceString("string_4011"),
                decimalPrecision: decimalPrecision,
                enableAllowDialogSuccessOnEmptyText: true,
                value: Commerce.NumberExtensions.formatNumber(self.context.amount, decimalPrecision),
                customControlData: {
                    templateID: "denominationDialogTemplate",
                    data: denominationLineDetailsViewModel
                }
            };
            numpadDialog.show(numpadDialogOptions);
            Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, result, function () {
                return {
                    quantity: denominationLineDetailsViewModel.quantity,
                    amount: denominationLineDetailsViewModel.amount,
                    currencyTotal: denominationLineDetailsViewModel.total
                };
            });
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetDenominationQuantityActivity.prototype.execute = function () {
            var self = (this);
            var result = new Commerce.AsyncResult();
            var denominationLineDetailsViewModelOptions = {
                currency: self.context.currency,
                denomination: self.context.denomination,
                currencyTotal: self.context.currencyTotal,
                value: self.context.quantity,
                denominationMode: Commerce.ViewModels.IDenominationLineDetailsMode.Quantity
            };
            var denominationLineDetailsViewModel = new Commerce.ViewModels.DenominationLineDetailsViewModel(denominationLineDetailsViewModelOptions);
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions;
            var numpadInputValue = ko.observable(Commerce.NumberExtensions.formatNumber(self.context.quantity, 0));
            numpadDialog.title(self.context.title);
            numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Numeric,
                enableMagneticStripReader: false,
                enableBarcodeScanner: false,
                numpadLabel: Commerce.ViewModelAdapter.getResourceString("string_3372"),
                decimalPrecision: 0,
                enableAllowDialogSuccessOnEmptyText: true,
                value: numpadInputValue,
                customControlData: {
                    templateID: "denominationDialogTemplate",
                    data: denominationLineDetailsViewModel
                }
            };
            numpadDialog.show(numpadDialogOptions);
            Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, result, function () {
                return {
                    quantity: denominationLineDetailsViewModel.quantity,
                    amount: denominationLineDetailsViewModel.amount,
                    currencyTotal: denominationLineDetailsViewModel.total
                };
            });
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetDenominationTotalsActivity.prototype.execute
            = function () {
                var activityResult = new Commerce.AsyncResult();
                var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
                var denominationsSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                    Commerce.ViewModelAdapter.navigateBack();
                    activityResult.resolve({ canceled: false, data: result });
                }, function () {
                    Commerce.ViewModelAdapter.collapse(originalViewName);
                    activityResult.resolve({ canceled: true, data: null });
                });
                var tenderName;
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(this.context.tenderTypeId);
                if (tenderType.OperationId === Commerce.Operations.RetailOperation.PayCurrency
                    && !Commerce.ObjectExtensions.isNullOrUndefined(this.context.currencyCode)) {
                    tenderName = Commerce.StringExtensions.format("{0} - {1}", tenderType.Name, this.context.currencyCode);
                }
                else {
                    tenderName = tenderType.Name;
                }
                var options = {
                    operationTitle: this.context.pageTitle,
                    tenderName: tenderName,
                    denominationDetails: this.context.denominationDetails,
                    selectionHandler: denominationsSelectionHandler,
                    correlationId: this.context.correlationId
                };
                Commerce.ViewModelAdapter.navigate("DenominationsView", options);
                return activityResult;
            };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var EmailReceiptDialog = (function (_super) {
            __extends(EmailReceiptDialog, _super);
            function EmailReceiptDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "EmailReceiptDialog";
                _this._dialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._dialoDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._emailAddress = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._shouldPromptToSaveEmail = ko.observable(false);
                _this._shouldSaveEmail = ko.observable(false);
                _this.okButtonDisabled = ko.computed(function () { return !Commerce.Core.RegularExpressionValidations.validateEmail(_this._emailAddress()); }, _this);
                return _this;
            }
            EmailReceiptDialog.prototype.onShowing = function (dialogParams) {
                if (dialogParams) {
                    if (Commerce.StringExtensions.isEmptyOrWhitespace(dialogParams.emailAddress)) {
                        this._dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1800"));
                        this._dialoDescription(Commerce.ViewModelAdapter.getResourceString("string_1801"));
                    }
                    else {
                        this._dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_1828"));
                        this._dialoDescription(Commerce.ViewModelAdapter.getResourceString("string_1829"));
                    }
                    this._emailAddress(dialogParams.emailAddress);
                    this._shouldPromptToSaveEmail(dialogParams.shouldPromptToSaveEmail);
                    this._shouldSaveEmail(dialogParams.shouldSaveEmail);
                }
                else {
                    this._emailAddress(Commerce.StringExtensions.EMPTY);
                    this._shouldPromptToSaveEmail(false);
                    this._shouldSaveEmail(false);
                }
                this.visible(true);
            };
            EmailReceiptDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var output = {
                            emailAddress: this._emailAddress(),
                            shouldSaveEmail: this._shouldSaveEmail()
                        };
                        this.dialogResult.resolve(Commerce.DialogResult.OK, output);
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return EmailReceiptDialog;
        }(Controls.ModalDialog));
        Controls.EmailReceiptDialog = EmailReceiptDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetEmailForReceiptActivity.prototype.execute = function () {
            var self = this;
            var dialogState = {
                emailAddress: self.context.emailAddress,
                shouldPromptToSaveEmail: !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CustomerId),
                shouldSaveEmail: false
            };
            var emailReceiptDialog = new Commerce.Controls.EmailReceiptDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                emailReceiptDialog.show(dialogState, false);
                var asyncResult = new Commerce.AsyncResult();
                Activities.ModalDialogHelper.callResponseHandler(self, emailReceiptDialog, Commerce.DialogResult.OK, asyncResult, function (result) {
                    return { emailAddress: result.emailAddress, saveEmailOnCustomer: result.shouldSaveEmail };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetFulfillmentLineSearchCriteriaActivity.prototype.execute = function () {
            var self = this;
            var refinerDialog = new Commerce.Controls.RefinerDialog();
            refinerDialog.title(Commerce.ViewModelAdapter.getResourceString("string_13114"));
            var dialogState = {
                refiners: Commerce.FulfillmentLineSearchCriteriaConverter.getRefiners(self.context.fulfillmentLineSearchCriteria),
                createRefinerControlHandler: Commerce.RefinerHelper.createRefinerControl,
                getSelectedRefinerValuesHandler: Commerce.FulfillmentLineSearchCriteriaConverter.getFulfillmentLineSearchCriteria
            };
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { fulfillmentLineSearchCriteria: dialogResult };
            };
            refinerDialog.show(dialogState, false);
            Activities.ModalDialogHelper.callResponseHandler(self, refinerDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetGiftCardActivity.prototype.execute = function () {
            var self = (this);
            var asyncQueue = new Commerce.AsyncQueue();
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Alphanumeric,
                enableMagneticStripReader: true,
                enableBarcodeScanner: true,
                numpadLabel: Commerce.ViewModelAdapter.getResourceString("string_3270"),
                value: self.context.defaultGiftCardId,
                enableAllowDialogSuccessOnEmptyText: true
            };
            var titleResourceID = Commerce.StringExtensions.isNullOrWhitespace(self.context.descriptionStringResourceId) ?
                "string_5104" :
                self.context.descriptionStringResourceId;
            numpadDialog.title(Commerce.ViewModelAdapter.getResourceString(titleResourceID));
            asyncQueue
                .enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                if (!self.context.tenderTypeAllowManualEntry) {
                    self.response = { giftCardId: "", giftCardEntryType: Commerce.Client.Entities.GiftCardEntryType.Keyboard };
                    if (self.responseHandler) {
                        self.responseHandler(self.response).always(function () { asyncResult.resolve({ canceled: false }); });
                    }
                }
                else {
                    numpadDialog.show(numpadDialogOptions, false);
                    Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, asyncResult, function (numpadDialogResult) {
                        var giftCardEntryType;
                        switch (numpadDialogResult.entryType) {
                            case Commerce.Controls.NumpadDialogEntryTypes.Barcode:
                                giftCardEntryType = Commerce.Client.Entities.GiftCardEntryType.Barcode;
                                break;
                            case Commerce.Controls.NumpadDialogEntryTypes.MagneticStripReader:
                                giftCardEntryType = Commerce.Client.Entities.GiftCardEntryType.MagneticStripReader;
                                break;
                            default:
                                giftCardEntryType = Commerce.Client.Entities.GiftCardEntryType.Keyboard;
                                break;
                        }
                        return { giftCardId: numpadDialogResult.value, giftCardEntryType: giftCardEntryType };
                    });
                }
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetGiftCardDetailsActivity.prototype.execute = function () {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            var dialog = new Commerce.Controls.AddIssueGiftCardDialog();
            var dialogState = {
                onAddToGiftCard: this.context.onAddToGiftCard,
                onCheckGiftCardBalance: this.context.onCheckGiftCardBalance,
                onIssueGiftCard: this.context.onIssueGiftCard,
                onCashOutGiftCard: this.context.onCashOutGiftCard,
                retailOperationId: this.context.retailOperationId,
                tenderTypeId: this.context.tenderTypeId
            };
            asyncQueue.enqueue(function () {
                dialog.show(dialogState);
                return asyncQueue.cancelOn(Activities.ModalDialogHelper.toVoidAsyncResult(dialog));
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetGiftReceiptActivity.prototype.execute = function () {
            var self = this;
            var printGiftReceiptDialog = new Commerce.Controls.GetGiftReceiptDialog();
            var context = self.context;
            var asyncResult = new Commerce.AsyncResult(null);
            printGiftReceiptDialog.show({
                salesOrder: context.salesOrder,
                salesLinesForDisplay: context.salesLinesProducts.map(function (line) {
                    return new Commerce.ViewModels.SalesLineForDisplay(line.salesLine, line.simpleProduct);
                }),
                isPreview: context.isPreview
            }, false);
            Activities.ModalDialogHelper.callResponseHandler(self, printGiftReceiptDialog, Commerce.DialogResult.OK, asyncResult, function (dialogOutput) {
                return { salesLineNumbers: dialogOutput.salesLineNumbers };
            });
            return asyncResult.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetIncomeExpenseLineActivity.prototype.execute = function () {
            var self = this;
            Commerce.ViewModelAdapter.navigate("CostAccountView", self.context);
            return Commerce.VoidAsyncResult.createResolved();
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetInvoiceCommentActivity.prototype.execute = function () {
            var self = (this);
            var asyncQueue = new Commerce.AsyncQueue();
            var textInputDialog = new Commerce.Controls.TextInputDialog();
            asyncQueue
                .enqueue(function () {
                textInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_99"));
                textInputDialog.show({ content: self.context.cart.InvoiceComment, maxLength: 60 }, false)
                    .on(Commerce.DialogResult.OK, function (comment) {
                    self.response = { comment: comment };
                }).on(Commerce.DialogResult.Cancel, function () {
                    textInputDialog.hide().done(function () { asyncQueue.cancel(); });
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(textInputDialog, false);
            }).enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, textInputDialog, Commerce.DialogResult.OK, asyncResult);
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoginDialog = (function (_super) {
            __extends(LoginDialog, _super);
            function LoginDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "LoginDialog";
                _this._storeId = ko.observable("");
                _this._userName = ko.observable("");
                _this._password = ko.observable("");
                _this._isPasswordFocused = ko.observable(false);
                _this._isOKButtonDisabled = ko.computed(function () {
                    return Commerce.StringExtensions.isEmptyOrWhitespace(_this._userName()) ||
                        Commerce.StringExtensions.isEmptyOrWhitespace(_this._password());
                });
                return _this;
            }
            LoginDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { storeId: undefined };
                this._storeId(dialogState.storeId);
                this.visible(true);
            };
            LoginDialog.prototype.enterKeyPressed = function () {
                if (!this._isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            LoginDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { userName: this._userName(), password: this._password() });
                        this._isPasswordFocused(true);
                        break;
                }
            };
            LoginDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoginDialog;
        }(Controls.ModalDialog));
        Controls.LoginDialog = LoginDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetLoginActivity.prototype.execute = function () {
            var self = (this);
            var extendedLogonResultHolder = {
                extendedCredentials: null,
                grantType: null
            };
            var loginDialog = new Commerce.Controls.LoginDialog();
            loginDialog.title(Commerce.ViewModelAdapter.getResourceString("string_510"));
            loginDialog.message(Commerce.ViewModelAdapter.getResourceString("string_524"));
            loginDialog.show({ storeId: null }, false);
            var activityResult = new Commerce.AsyncResult(null);
            Activities.ModalDialogHelper.callResponseHandler(self, loginDialog, Commerce.DialogResult.OK, activityResult, function (loginDialogResult) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(loginDialogResult)) {
                    loginDialogResult = { userName: null, password: null };
                }
                return {
                    regularLogOnParameters: {
                        staffId: loginDialogResult.userName,
                        password: loginDialogResult.password
                    },
                    extendedLogOnParameters: {
                        extendedCredentials: extendedLogonResultHolder.extendedCredentials,
                        grantType: extendedLogonResultHolder.grantType
                    }
                };
            });
            Commerce.Utilities.LogonHelper.enableExtendedLogon(function (credential, grantType) {
                extendedLogonResultHolder.extendedCredentials = credential;
                extendedLogonResultHolder.grantType = grantType;
                loginDialog.dialogResult.resolve(Commerce.DialogResult.OK);
            });
            return activityResult.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            }).always(function () {
                Commerce.Utilities.LogonHelper.disableExtendedLogon();
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetLoyaltyCardActivity.prototype.execute = function () {
            var self = (this);
            var asyncQueue = new Commerce.AsyncQueue();
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Alphanumeric,
                enableMagneticStripReader: true,
                enableBarcodeScanner: true,
                numpadLabel: Commerce.ViewModelAdapter.getResourceString("string_3270"),
                value: self.context.defaultLoyaltyCardId
            };
            var titleResourceID = Commerce.StringExtensions.isNullOrWhitespace(self.context.descriptionStringResourceId) ?
                "string_3250" :
                self.context.descriptionStringResourceId;
            numpadDialog.title(Commerce.ViewModelAdapter.getResourceString(titleResourceID));
            asyncQueue
                .enqueue(function () {
                numpadDialog.show(numpadDialogOptions, false);
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, asyncResult, function (numpadDialogResult) {
                    return { loyaltyCardId: numpadDialogResult.value };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyCardBalanceDialog = (function (_super) {
            __extends(LoyaltyCardBalanceDialog, _super);
            function LoyaltyCardBalanceDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "LoyaltyCardBalanceDialog";
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.loyaltyCard)) {
                    _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return _this;
                }
                _this.correlationId = options.correlationId;
                var viewModelOptions = {
                    correlationId: options.correlationId,
                    loyaltyCard: options.loyaltyCard
                };
                _this.viewModel = new Commerce.ViewModels.LoyaltyCardBalanceDialogViewModel(viewModelOptions);
                _this.isAddToTransactionButtonVisible = ko.observable(options.displayAddToTransactionButton);
                _this.loyaltyCard = options.loyaltyCard;
                _this.expiringAsOfCurrentDateLabel = ko.computed(function () {
                    var currentDate = Commerce.Formatters.DateWithoutTime(new Date());
                    return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_296"), currentDate);
                });
                return _this;
            }
            LoyaltyCardBalanceDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            LoyaltyCardBalanceDialog.prototype.afterShow = function () {
                var _this = this;
                this.viewModel.checkRewardPointDataIsAvailableForDisplayAsync()
                    .done(function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    }
                }).fail(function () {
                    _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                });
            };
            LoyaltyCardBalanceDialog.prototype.getLoyaltyCardPointBalanceButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyCardBalanceDialog", "Cancel");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyCardBalanceDialog", "Close");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyCardBalanceDialog", "Add to transaction");
                        var response = {
                            loyaltyCardId: this.viewModel.loyaltyCardNumberText
                        };
                        this.dialogResult.resolve(Commerce.DialogResult.OK, response);
                        break;
                }
            };
            LoyaltyCardBalanceDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyCardBalanceDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyCardBalanceDialog = LoyaltyCardBalanceDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetLoyaltyCardBalanceActivity.prototype.execute = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                throw new Error("Invalid options passed: GetLoyaltyCardBalanceActivity was passed invalid options");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(this.context.loyaltyCard) || Commerce.ObjectExtensions.isNullOrUndefined(this.context.loyaltyCard.CardNumber)) {
                throw new Error("Invalid options passed: GetLoyaltyCardBalanceActivity was passed invalid cardnumber");
            }
            var loyaltyCardBalanceDialogOptions = {
                correlationId: this.context.correlationId,
                displayAddToTransactionButton: this.context.addToTransaction,
                loyaltyCard: this.context.loyaltyCard
            };
            var loyaltyCardBalanceDialog = new Commerce.Controls.LoyaltyCardBalanceDialog(loyaltyCardBalanceDialogOptions);
            loyaltyCardBalanceDialog.show(null, false)
                .on(Commerce.DialogResult.OK, function (activityResponse) {
                _this.response = activityResponse;
                Commerce.ViewModelAdapter.navigate("CartView");
            }).on(Commerce.DialogResult.Cancel, function (activityResponse) {
                _this.response = null;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(loyaltyCardBalanceDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetOrderTypeDialog = (function (_super) {
            __extends(GetOrderTypeDialog, _super);
            function GetOrderTypeDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetOrderTypeDialog";
                _this._customerOrderTypeButton = {
                    orderMode: Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit,
                    operationName: Commerce.ViewModelAdapter.getResourceString("string_7131")
                };
                _this._quotationOrderTypeButton = {
                    orderMode: Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit,
                    operationName: Commerce.ViewModelAdapter.getResourceString("string_7132")
                };
                _this._orderTypeList = ko.observableArray([]);
                return _this;
            }
            GetOrderTypeDialog.prototype.onShowing = function () {
                this._orderTypeList([this._customerOrderTypeButton, this._quotationOrderTypeButton]);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetOrderTypeDialog.prototype.dialogButtonClick = function (operationId) {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetOrderTypeDialog.prototype.orderTypeListInvokedHandler = function (eventArgs) {
                var buttonControl = eventArgs.data;
                var customerOrderMode = buttonControl.orderMode;
                this.dialogResult.resolve(Commerce.DialogResult.OK, customerOrderMode);
            };
            return GetOrderTypeDialog;
        }(Controls.ModalDialog));
        Controls.GetOrderTypeDialog = GetOrderTypeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetOrderTypeActivity.prototype.execute = function () {
            var _this = this;
            var getOrderTypeDialog = new Commerce.Controls.GetOrderTypeDialog();
            getOrderTypeDialog.show(null, false)
                .on(Commerce.DialogResult.OK, function (orderMode) {
                _this.response = { customerOrderMode: orderMode };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getOrderTypeDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetPasswordActivity.prototype.execute = function () {
            var _this = this;
            var asyncResult = new Commerce.VoidAsyncResult();
            var textInputDialog = new Commerce.Controls.TextInputDialog();
            var textDialogOptions = {
                textInputType: Commerce.Controls.TextInputType.password,
                labelResx: "string_521"
            };
            textInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_520"));
            textInputDialog.show(textDialogOptions, true)
                .on(Commerce.DialogResult.OK, function (password) {
                _this.response = { password: password };
                asyncResult.resolve();
            }).on(Commerce.DialogResult.Cancel, function (password) {
                _this.response = null;
                asyncResult.resolve();
            });
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetPaymentInfoActivity.prototype.execute = function () {
            var self = this;
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var viewOptions = {
                cardPaymentAcceptPageUrl: null,
                cardPaymentAcceptPageSubmitUrl: null,
                cardPaymentAcceptMessageOrigin: null,
                loyaltyCardId: null,
                onPaymentResultAvailableAsync: undefined,
                paymentAmount: self.context.amountDue,
                paymentCardInfo: null,
                paymentCardSource: null,
                tenderType: self.context.tenderType,
                tokenizeCard: false,
                correlationId: Commerce.StringExtensions.EMPTY
            };
            viewOptions.onPaymentResultAvailableAsync = function (paymentViewResult) {
                var responseHandlerResult;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentViewResult)) {
                    self.response = { tenderLine: paymentViewResult.paymentResult, paymentCorrelationId: paymentViewResult.paymentCorrelationId };
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(self.responseHandler)) {
                        responseHandlerResult = self.responseHandler(self.response);
                    }
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(responseHandlerResult)) {
                    responseHandlerResult = Commerce.AsyncResult.createResolved({ canceled: Commerce.ObjectExtensions.isNullOrUndefined(self.response) });
                }
                responseHandlerResult.done(function (result) {
                    if (result.canceled && Commerce.ViewModelAdapter.isInView("PaymentView")) {
                        return;
                    }
                    activityResult.resolve(result);
                });
                return responseHandlerResult;
            };
            Commerce.ViewModelAdapter.navigate("PaymentView", viewOptions);
            return activityResult.done(function (result) {
                if (result.canceled) {
                    Commerce.ViewModelAdapter.collapse(originalViewName);
                }
                else {
                    Commerce.ViewModelAdapter.navigateBack();
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetPaymentOptionActivity.prototype.execute = function () {
            var _this = this;
            var paymentOptionsDialog = new Commerce.Controls.PaymentOptionsDialog();
            var result = new Commerce.AsyncResult();
            var dialogOptions = {
                title: this.context.title,
                description: this.context.description,
                paymentOptions: this.context.paymentOptions,
                isCancelAllowed: this.context.isCancelAllowed
            };
            var updateResponse = function (dialogResult) {
                return { paymentOption: dialogResult.paymentOption };
            };
            paymentOptionsDialog.show(dialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(this, paymentOptionsDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetPriceOverrideActivity.prototype.execute = function () {
            var _this = this;
            var priceInputDialog = new Commerce.Controls.PriceInputDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue
                .enqueue(function () {
                priceInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_5700"));
                priceInputDialog.subTitle(_this.context.cartLine.Description);
                priceInputDialog.show({
                    defaultPrice: _this.context.cartLine.Price,
                    minPrice: Number.NaN,
                    maxPrice: Number.NaN,
                    minPriceInclusive: true,
                    maxPriceInclusive: true
                }, false)
                    .on(Commerce.DialogResult.OK, function (inputValue) {
                    _this.response = { newPrice: inputValue };
                })
                    .on(Commerce.DialogResult.Cancel, function () {
                    priceInputDialog.hide();
                });
                return asyncQueue.cancelOn(Activities.ModalDialogHelper.toVoidAsyncResult(priceInputDialog, false));
            }).enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(_this, priceInputDialog, Commerce.DialogResult.OK, asyncResult, function (result) { return { newPrice: result }; });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetProductKeyInPriceActivity.prototype.execute = function () {
            var self = (this);
            var product = self.context.product;
            var priceInputDialog = new Commerce.Controls.PriceInputDialog();
            priceInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_826"));
            var subTitle;
            if (Commerce.StringExtensions.isNullOrWhitespace(product.ItemId) || Commerce.StringExtensions.isNullOrWhitespace(product.Name)) {
                subTitle = Commerce.ViewModelAdapter.getResourceString("string_825");
            }
            else {
                subTitle = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_929"), product.ItemId, product.Name);
            }
            priceInputDialog.subTitle(subTitle);
            priceInputDialog.show({
                defaultPrice: product.Price,
                maxPrice: self.context.maxPrice,
                minPrice: self.context.minPrice,
                maxPriceInclusive: self.context.maxPriceInclusive,
                minPriceInclusive: self.context.minPriceInclusive
            }, false);
            var asyncResult = new Commerce.AsyncResult(null);
            Activities.ModalDialogHelper.callResponseHandler(self, priceInputDialog, Commerce.DialogResult.OK, asyncResult, function (result) { return { keyInPrice: result }; });
            return asyncResult.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetProductKeyInQuantityActivity.prototype.execute = function () {
            var self = (this);
            var product = self.context.product;
            var numberInputDialog = new Commerce.Controls.NumberInputDialog();
            numberInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_827"));
            numberInputDialog.subTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_929"), product.ItemId, product.Name));
            numberInputDialog.subTitleCssClass("primaryFontColor");
            numberInputDialog.label(Commerce.ViewModelAdapter.getResourceString("string_5306"));
            var numberInputDialogState = {
                content: 0,
                min: 0,
                max: Number.MAX_VALUE,
                decimalPrecision: Commerce.UnitOfMeasureHelper.getDecimalPrecision(product.DefaultUnitOfMeasure)
            };
            numberInputDialog.show(numberInputDialogState, false)
                .on(Commerce.DialogResult.OK, function (keyInQuantity) {
                self.response = { keyInQuantity: keyInQuantity };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(numberInputDialog);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetProductRefinersActivity.prototype.execute = function () {
            var self = this;
            var refinerDialog = new Commerce.Controls.RefinerDialog();
            refinerDialog.title(Commerce.ViewModelAdapter.getResourceString("string_936"));
            var loadRefinerValuesHandler = function (refiner) {
                var result = new Commerce.AsyncResult();
                if (!Commerce.ArrayExtensions.hasElements(refiner.Values)) {
                    self.context.getRefinerValuesHandler(refiner)
                        .done(function (refinerValuesResult) {
                        if (!refinerValuesResult.canceled) {
                            refiner.Values = refinerValuesResult.data;
                        }
                        result.resolve({ canceled: refinerValuesResult.canceled });
                    }).fail(function (error) {
                        result.reject(error);
                    });
                }
                else {
                    result.resolve({ canceled: false });
                }
                return result;
            };
            var dialogState = {
                refiners: self.context.productRefiners,
                loadRefinerValuesHandler: loadRefinerValuesHandler,
                createRefinerControlHandler: createRefinerControl,
                getSelectedRefinerValuesHandler: getSelectedRefinerValues
            };
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { producRefinerValues: dialogResult };
            };
            refinerDialog.show(dialogState, false);
            Commerce.RetailLogger.activitiesGetProductsRefinerRefinerDialogShown(self.context.correlationId);
            Activities.ModalDialogHelper.callResponseHandler(self, refinerDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = {
                        producRefinerValues: []
                    };
                }
            });
        };
        function getSelectedRefinerValues(refiners) {
            var selectedValues = [];
            refiners.forEach(function (refiner) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner.SelectedValues)) {
                    selectedValues = selectedValues.concat(refiner.SelectedValues);
                }
            });
            return selectedValues;
        }
        function createRefinerControl(refiner, container, refinerRemovedHandler) {
            if (refiner.DisplayTemplateValue !== 0 && refiner.DisplayTemplateValue !== 1 && refiner.DisplayTemplateValue !== 3) {
                Commerce.RetailLogger.viewsControlsRefinersDisplayTemplateNotSupported(JSON.stringify(refiner));
                return false;
            }
            var subTitle = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_937"), refiner.KeyName.toLowerCase());
            ko.cleanNode(container);
            switch (refiner.DisplayTemplateValue) {
                case 0:
                    if (refiner.RefinerTypeValue === 0 || refiner.RefinerTypeValue === 1) {
                        if (!Commerce.ArrayExtensions.hasElements(refiner.Values)) {
                            Commerce.ViewModelAdapter.displayMessage(Commerce.ViewModelAdapter.getResourceString("string_4164"), Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default);
                            return false;
                        }
                        var getDisplayNameCallback = function (value) {
                            if (refiner.DataTypeValue === 3) {
                                var decimalUnitSymbol = value.UnitText;
                                if (Commerce.StringExtensions.isNullOrWhitespace(decimalUnitSymbol)) {
                                    value.LeftValueBoundString = Commerce.NumberExtensions.formatNumber(Commerce.NumberExtensions.parseNumber(value.LeftValueBoundString), Commerce.NumberExtensions.getDecimalPrecision());
                                }
                                else {
                                    var decimalPrecision = Commerce.UnitOfMeasureHelper.getDecimalPrecision(value.UnitText);
                                    value.LeftValueBoundString = Commerce.NumberExtensions.formatNumber(Commerce.NumberExtensions.parseNumber(value.LeftValueBoundString), decimalPrecision);
                                }
                            }
                            else if (refiner.DataTypeValue === 1) {
                                value.LeftValueBoundString = Commerce.NumberExtensions.formatCurrency(Commerce.NumberExtensions.parseNumber(value.LeftValueBoundString));
                            }
                            return value.LeftValueBoundString;
                        };
                        ko.applyBindingsToNode(container, {
                            selectRefinerControl: {
                                refiner: refiner,
                                showInputDialogCallback: refiner.RefinerTypeValue === 0 ?
                                    Commerce.RefinerHelper.showSingleSelectListInputDialogCallback.bind(null, subTitle, refiner.Values, getDisplayNameCallback) :
                                    Commerce.RefinerHelper.showMultiSelectListInputDialogCallback.bind(null, subTitle, refiner.Values, getDisplayNameCallback),
                                refinerValueTemplate: "refinerValueTemplate",
                                refinerRemovedHandler: refinerRemovedHandler.bind(null, refiner)
                            }
                        });
                    }
                    else {
                        Commerce.RetailLogger.viewsControlsRefinersDisplayTemplateNotSupported(JSON.stringify(refiner));
                        return false;
                    }
                    break;
                case 1:
                    ko.applyBindingsToNode(container, { sliderRefinerControl: refiner });
                    break;
                case 3:
                    if (!Commerce.ArrayExtensions.hasElements(refiner.Values)) {
                        Commerce.ViewModelAdapter.displayMessage(Commerce.ViewModelAdapter.getResourceString("string_4164"), Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default);
                        return false;
                    }
                    ko.applyBindingsToNode(container, {
                        selectRefinerControl: {
                            refiner: refiner,
                            showInputDialogCallback: showRefinerRangeInputDialogCallback.bind(null, subTitle, refiner.Values),
                            refinerValueTemplate: "refinerRangeValueTemplate"
                        }
                    });
                    break;
            }
            return true;
        }
        function showRefinerRangeInputDialogCallback(subTitle, refinerValues) {
            var dialogResult = new Commerce.AsyncResult();
            var localRefinerValues = refinerValues.slice();
            var customRefinerValue = new Commerce.Proxy.Entities.ProductRefinerValueClass();
            customRefinerValue.RefinerRecordId = refinerValues[0].RefinerRecordId;
            customRefinerValue.LeftValueBoundString = Commerce.StringExtensions.EMPTY;
            customRefinerValue.RightValueBoundString = Commerce.StringExtensions.EMPTY;
            customRefinerValue.DataTypeValue = refinerValues[0].DataTypeValue;
            customRefinerValue.RefinerSourceValue = refinerValues[0].RefinerSourceValue;
            localRefinerValues.push(customRefinerValue);
            var getDisplayNameCallback = function (value) {
                if (Commerce.StringExtensions.isEmpty(value.LeftValueBoundString) && Commerce.StringExtensions.isEmpty(value.RightValueBoundString)) {
                    return Commerce.ViewModelAdapter.getResourceString("string_4192");
                }
                else if (Commerce.StringExtensions.isEmpty(value.LeftValueBoundString)) {
                    return Commerce.StringExtensions.format("<{0}", value.RightValueBoundString);
                }
                else if (Commerce.StringExtensions.isEmpty(value.RightValueBoundString)) {
                    return Commerce.StringExtensions.format(">{0}", value.LeftValueBoundString);
                }
                else {
                    return Commerce.StringExtensions.format("{0}-{1}", value.LeftValueBoundString, value.RightValueBoundString);
                }
            };
            Commerce.RefinerHelper.showSingleSelectListInputDialogCallback(subTitle, localRefinerValues, getDisplayNameCallback)
                .done(function (productRefinerValues) {
                if (Commerce.ArrayExtensions.hasElements(productRefinerValues) &&
                    Commerce.StringExtensions.isEmpty(productRefinerValues[0].LeftValueBoundString) &&
                    Commerce.StringExtensions.isEmpty(productRefinerValues[0].RightValueBoundString)) {
                    var dialog = Commerce.RefinerHelper.configureDialog(new Commerce.Controls.NumberRangeInputDialog(), subTitle, Commerce.StringExtensions.EMPTY);
                    dialog.show({}).onAny(function (result, dlgResult) {
                        if (dlgResult === Commerce.DialogResult.OK) {
                            customRefinerValue.LeftValueBoundString = Commerce.ObjectExtensions.isNullOrUndefined(result.minimum) ?
                                Commerce.StringExtensions.EMPTY : result.minimum.toString();
                            customRefinerValue.RightValueBoundString = Commerce.ObjectExtensions.isNullOrUndefined(result.maximum) ?
                                Commerce.StringExtensions.EMPTY : result.maximum.toString();
                            dialogResult.resolve([customRefinerValue]);
                        }
                        else {
                            dialogResult.resolve(null);
                        }
                    });
                    return;
                }
                dialogResult.resolve(productRefinerValues);
            });
            return dialogResult;
        }
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetProductsActivity.prototype.execute = function () {
            Commerce.ViewModelAdapter.navigate("CategoriesView");
            return Commerce.VoidAsyncResult.createResolved();
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetProductsToReturnActivity.prototype.execute = function () {
            Commerce.ViewModelAdapter.navigate("ReturnTransactionView");
            return Commerce.VoidAsyncResult.createResolved();
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetQuantityActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Numeric,
                enableMagneticStripReader: false,
                enableBarcodeScanner: true,
                numpadLabel: Commerce.StringExtensions.EMPTY
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                numpadDialog.title(context.title);
                numpadDialog.subTitle(context.subTitle);
                numpadDialogOptions.numpadLabel = context.inputLabel;
                numpadDialogOptions.value = context.quantity;
                numpadDialogOptions.decimalPrecision = context.decimalPrecision;
                numpadDialogOptions.parser = context.parser;
            }
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { quantity: dialogResult.value };
            };
            numpadDialog.show(numpadDialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetQuotationExpirationDateDialog = (function (_super) {
            __extends(GetQuotationExpirationDateDialog, _super);
            function GetQuotationExpirationDateDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetQuotationExpirationDateDialog";
                _this.minYear = ko.observable(Commerce.DateExtensions.now.getFullYear());
                _this._requestedExpirationDate = ko.observable(Commerce.DateExtensions.getDate());
                _this._selectQuotationExpirationDateInput = ko.observable(function () { return; });
                _this.isOKButtonDisabled = ko.computed(function () {
                    var shippingDate = _this._requestedExpirationDate();
                    return !Commerce.DateExtensions.isTodayOrFutureDate(shippingDate);
                });
                return _this;
            }
            GetQuotationExpirationDateDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.originalExpirationDate = dialogOptions.originalExpirationDate || Commerce.DateExtensions.getDate();
                this._requestedExpirationDate(dialogOptions.originalExpirationDate);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetQuotationExpirationDateDialog.prototype.afterShow = function () {
                this._selectQuotationExpirationDateInput()();
            };
            GetQuotationExpirationDateDialog.prototype.getQuotationExpirationDateButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getQuotationExpirationDateInvokedHandler();
                        break;
                }
            };
            GetQuotationExpirationDateDialog.prototype.dateChangeHandler = function (event) {
                var datePickerDiv = event.currentTarget;
                var datePickerControl = datePickerDiv.winControl;
                this._requestedExpirationDate(Commerce.DateExtensions.getDate(datePickerControl.current));
            };
            GetQuotationExpirationDateDialog.prototype.getQuotationExpirationDateInvokedHandler = function () {
                var response = {
                    expirationDate: this._requestedExpirationDate()
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetQuotationExpirationDateDialog;
        }(Controls.ModalDialog));
        Controls.GetQuotationExpirationDateDialog = GetQuotationExpirationDateDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetQuotationExpirationDateActivity.prototype.execute = function () {
            var self = (this);
            var dialog = new Commerce.Controls.GetQuotationExpirationDateDialog();
            dialog.show(self.context, false)
                .on(Commerce.DialogResult.OK, function (activityResponse) {
                self.response = activityResponse;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(dialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetReasonCodeLinesActivity.prototype.execute = function () {
            var _this = this;
            var description = null;
            var reasonCodeContainerAsCartLine = this.context.reasonCodesContainer;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(reasonCodeContainerAsCartLine)
                && !Commerce.StringExtensions.isNullOrWhitespace(reasonCodeContainerAsCartLine.Description)) {
                description = reasonCodeContainerAsCartLine.Description;
            }
            var reasonCodeDialog = new Commerce.Controls.ReasonCodeDialog();
            reasonCodeDialog.title(Commerce.ViewModelAdapter.getResourceString("string_186"));
            reasonCodeDialog.subTitle(description);
            reasonCodeDialog.show({ reasonCodes: this.context.reasonCodes, reasonCodesContainer: this.context.reasonCodesContainer }, false)
                .on(Commerce.DialogResult.OK, function (reasonCodeLines) {
                _this.response = { reasonCodeLines: reasonCodeLines };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(reasonCodeDialog)
                .done(function () {
                reasonCodeDialog.invokeOnHidden();
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetReconcileLinesDescriptionActivity.prototype.execute = function () {
            var _this = this;
            var textInputDialog = new Commerce.Controls.TextInputDialog();
            textInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_2152"));
            textInputDialog.subTitle(Commerce.ViewModelAdapter.getResourceString("string_2153"));
            var activityResult = new Commerce.AsyncResult();
            textInputDialog.show({
                maxLength: this.context.contentMaxLength,
                content: this.context.content
            })
                .on(Commerce.DialogResult.OK, function (inputValue) {
                _this.response = { description: inputValue };
                activityResult.resolve({ canceled: false });
            }).on(Commerce.DialogResult.Cancel, function (result) {
                _this.response = null;
                activityResult.resolve({ canceled: true });
            }).onError(function (errors) {
                activityResult.reject(errors);
            });
            return activityResult.done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetRefinerActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            return Commerce.RefinerHelper.showRefinerAsync(context.refiner).done(function (result) {
                if (result) {
                    var getRefinerActivityResponse = { selectedValues: result };
                    self.response = getRefinerActivityResponse;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetReportFilterValuesDialog = (function (_super) {
            __extends(GetReportFilterValuesDialog, _super);
            function GetReportFilterValuesDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetReportFilterValuesDialog";
                _this.parameters = ko.observableArray([]);
                return _this;
            }
            GetReportFilterValuesDialog.prototype.onShowing = function (dialogState) {
                this.parameters(dialogState.parameters);
                this.visible(true);
            };
            GetReportFilterValuesDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { parameters: this.parameters() });
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetReportFilterValuesDialog.prototype.dialogCloseButtonClick = function () {
                this.buttonClickHandler(Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
            };
            return GetReportFilterValuesDialog;
        }(Controls.ModalDialog));
        Controls.GetReportFilterValuesDialog = GetReportFilterValuesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetReportFilterValuesActivity.prototype.execute = function () {
            var _this = this;
            var context = this.context;
            var getReportFilterValuesDialog = new Commerce.Controls.GetReportFilterValuesDialog();
            var getReportFilterValuesDialogState = {
                parameters: context.parameters
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                getReportFilterValuesDialog.title(context.title);
            }
            getReportFilterValuesDialog.show(getReportFilterValuesDialogState, false)
                .on(Commerce.DialogResult.OK, function (result) { _this.response = { parameters: result.parameters }; });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getReportFilterValuesDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetReturnChargeDialog = (function (_super) {
            __extends(GetReturnChargeDialog, _super);
            function GetReturnChargeDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetReturnChargeDialog";
                _this._returnCharges = ko.observable("0");
                _this._dialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._dialogSubtitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._dialogMessage = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var returnCharge = Commerce.NumberExtensions.parseNumber(_this._returnCharges());
                    return isNaN(returnCharge) || returnCharge < 0;
                });
                return _this;
            }
            GetReturnChargeDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.originalReturnCharge = dialogOptions.originalReturnCharge || 0;
                dialogOptions.productName = dialogOptions.productName || Commerce.StringExtensions.EMPTY;
                dialogOptions.deliveryMethodDescription = dialogOptions.deliveryMethodDescription || Commerce.StringExtensions.EMPTY;
                this._returnCharges(Commerce.NumberExtensions.formatNumber(dialogOptions.originalReturnCharge, Commerce.NumberExtensions.getDecimalPrecision()));
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogOptions.productName)) {
                    this._dialogTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2523"), dialogOptions.productName));
                }
                else {
                    this._dialogTitle(Commerce.ViewModelAdapter.getResourceString("string_2520"));
                }
                this._dialogSubtitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2521"), dialogOptions.deliveryMethodDescription));
                this._dialogMessage(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_2522"), Commerce.NumberExtensions.formatCurrency(dialogOptions.originalReturnCharge)));
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetReturnChargeDialog.prototype.getReturnChargeButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getReturnChargeInvokedHandler();
                        break;
                }
            };
            GetReturnChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.getReturnChargeButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            GetReturnChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetReturnChargeDialog.prototype.getReturnChargeInvokedHandler = function () {
                var response = {
                    returnChargeAmount: Commerce.NumberExtensions.parseNumber(this._returnCharges())
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetReturnChargeDialog;
        }(Controls.ModalDialog));
        Controls.GetReturnChargeDialog = GetReturnChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetReturnChargeActivity.prototype.execute = function () {
            var self = (this);
            var getReturnChargeDialog = new Commerce.Controls.GetReturnChargeDialog();
            getReturnChargeDialog.show(self.context, false)
                .on(Commerce.DialogResult.OK, function (activityResponse) {
                self.response = activityResponse;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getReturnChargeDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetSalesPersonDialog = (function (_super) {
            __extends(GetSalesPersonDialog, _super);
            function GetSalesPersonDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetSalesPersonDialog";
                _this._staffId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._employees = ko.observable([]);
                _this.isOKButtonDisabled = ko.computed(function () {
                    return _this._employees().length <= 0;
                });
                return _this;
            }
            GetSalesPersonDialog.prototype.onShowing = function (options) {
                options = options || {};
                options.salesPersons = options.salesPersons || [];
                options.originalSalesPersonId = options.originalSalesPersonId || Commerce.StringExtensions.EMPTY;
                this._employees(options.salesPersons);
                var currentEmployees = this._employees();
                var staff;
                for (var i = 0; i < currentEmployees.length; i++) {
                    staff = currentEmployees[i];
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(staff) && staff.StaffId === options.originalSalesPersonId) {
                        this._staffId(options.originalSalesPersonId);
                        break;
                    }
                }
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetSalesPersonDialog.prototype.dialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._staffId());
                        break;
                    default:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return GetSalesPersonDialog;
        }(Controls.ModalDialog));
        Controls.GetSalesPersonDialog = GetSalesPersonDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetSalesPersonActivity.prototype.execute = function () {
            var _this = this;
            var getSalesPersonDialog = new Commerce.Controls.GetSalesPersonDialog();
            getSalesPersonDialog.show(this.context, false)
                .on(Commerce.DialogResult.OK, function (staffId) {
                _this.response = { salesPersonId: staffId };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getSalesPersonDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetSalesRepresentativeActivity.prototype.execute = function () {
            var _this = this;
            var getSalesRepresentativeDialog;
            var subTitle;
            if (this.context.mode === Activities.GetSalesRepresentativeMode.Transaction) {
                subTitle = Commerce.ViewModelAdapter.getResourceString("string_13003");
            }
            else if (this.context.mode === Activities.GetSalesRepresentativeMode.Line) {
                subTitle = Commerce.ViewModelAdapter.getResourceString("string_13004");
            }
            else if (this.context.mode === Activities.GetSalesRepresentativeMode.Product) {
                subTitle = Commerce.ViewModelAdapter.getResourceString("string_13005");
            }
            else if (!Commerce.ObjectExtensions.isNullOrUndefined(this.context.product)) {
                subTitle = Commerce.ViewModelAdapter.getResourceString(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_13002"), this.context.product.ItemId, this.context.product.Name));
            }
            getSalesRepresentativeDialog = new Commerce.Controls.GetSalesRepresentativeDialog(subTitle);
            getSalesRepresentativeDialog.show(null, false)
                .on(Commerce.DialogResult.OK, function (result) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                    _this.response = { salesRepresentative: result.selectedSalesRepresentative };
                }
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getSalesRepresentativeDialog, true)
                .done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetSearchTextActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            var numpadDialog = new Commerce.Controls.NumpadDialog();
            var numpadDialogOptions = {
                numpadDialogType: Commerce.Controls.NumpadDialogTypes.Alphanumeric,
                enableMagneticStripReader: false,
                enableBarcodeScanner: true,
                numpadLabel: Commerce.StringExtensions.EMPTY
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                numpadDialog.title(context.title);
                numpadDialog.subTitle(context.subTitle);
                numpadDialogOptions.numpadLabel = context.inputLabel;
                numpadDialogOptions.value = context.searchText;
            }
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { searchText: dialogResult.value };
            };
            numpadDialog.show(numpadDialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(self, numpadDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetSerialNumberActivity.prototype.execute = function () {
            var self = (this);
            var serialNumberInputDialog = new Commerce.Controls.SerialNumberInputDialog();
            var dialogState = { product: this.context.product };
            var result = new Commerce.AsyncResult();
            var updateResponse = function (serialNumber) {
                return { serialNumber: serialNumber };
            };
            serialNumberInputDialog.show(dialogState, false);
            Activities.ModalDialogHelper.callResponseHandler(self, serialNumberInputDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetShiftActionActivity.prototype.execute = function () {
            var self = this;
            var shiftActionDialog = new Commerce.Controls.ShiftActionDialog();
            shiftActionDialog.show(self.context.shiftActions, false)
                .on(Commerce.DialogResult.OK, function (result) {
                self.response = { shiftActionType: result };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(shiftActionDialog);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetShippingChargeDialog = (function (_super) {
            __extends(GetShippingChargeDialog, _super);
            function GetShippingChargeDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetShippingChargeDialog";
                _this._shippingCharge = ko.observable("0");
                _this._deliveryMethodDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._isOKButtonDisabled = ko.computed(function () {
                    var shippingCharge = Commerce.NumberExtensions.parseNumber(_this._shippingCharge());
                    return isNaN(shippingCharge) || shippingCharge < 0;
                });
                return _this;
            }
            GetShippingChargeDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.originalShippingCharge = dialogOptions.originalShippingCharge || 0;
                dialogOptions.deliveryMethodDescription = dialogOptions.deliveryMethodDescription || Commerce.StringExtensions.EMPTY;
                this._shippingCharge(Commerce.NumberExtensions.formatNumber(dialogOptions.originalShippingCharge, Commerce.NumberExtensions.getDecimalPrecision()));
                this._deliveryMethodDescription(dialogOptions.deliveryMethodDescription);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetShippingChargeDialog.prototype.getShippingChargeButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getShippingChargeInvokedHandler();
                        break;
                }
            };
            GetShippingChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.getShippingChargeButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            GetShippingChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetShippingChargeDialog.prototype.getShippingChargeInvokedHandler = function () {
                var response = {
                    shippingChargeAmount: Commerce.NumberExtensions.parseNumber(this._shippingCharge())
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetShippingChargeDialog;
        }(Controls.ModalDialog));
        Controls.GetShippingChargeDialog = GetShippingChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetShippingChargeActivity.prototype.execute = function () {
            var self = (this);
            var getShippingChargeDialog = new Commerce.Controls.GetShippingChargeDialog();
            getShippingChargeDialog.show(self.context, false)
                .on(Commerce.DialogResult.OK, function (activityResponse) {
                self.response = activityResponse;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(getShippingChargeDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetShippingDateDialog = (function (_super) {
            __extends(GetShippingDateDialog, _super);
            function GetShippingDateDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetShippingDateDialog";
                _this.dialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.dialogSubTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.dateInputLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.minYear = ko.observable(Commerce.DateExtensions.now.getFullYear());
                _this._requestedShipDate = ko.observable(Commerce.DateExtensions.getDate());
                _this._deliveryMethodDescription = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.isOKButtonDisabled = ko.computed(function () {
                    var shippingDate = _this._requestedShipDate();
                    return !Commerce.DateExtensions.isTodayOrFutureDate(shippingDate);
                });
                return _this;
            }
            GetShippingDateDialog.prototype.onShowing = function (dialogOptions) {
                dialogOptions = dialogOptions || {};
                dialogOptions.title = dialogOptions.title || Commerce.ViewModelAdapter.getResourceString("string_2519");
                dialogOptions.originalShippingDate = dialogOptions.originalShippingDate || Commerce.DateExtensions.getDate();
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogOptions.deliveryMethodDescription)) {
                    dialogOptions.subTitle = Commerce.ViewModelAdapter.getResourceString("string_2516");
                    dialogOptions.deliveryMethodDescription = dialogOptions.deliveryMethodDescription || Commerce.StringExtensions.EMPTY;
                }
                else {
                    dialogOptions.subTitle = dialogOptions.subTitle;
                }
                dialogOptions.dateInputLabel = dialogOptions.dateInputLabel || Commerce.ViewModelAdapter.getResourceString("string_1873");
                this.dialogTitle(dialogOptions.title);
                this.dialogSubTitle(dialogOptions.subTitle);
                this.dateInputLabel(dialogOptions.dateInputLabel);
                this._requestedShipDate(dialogOptions.originalShippingDate);
                this._deliveryMethodDescription(dialogOptions.deliveryMethodDescription);
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetShippingDateDialog.prototype.getShippingDateButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.getShippingDateInvokedHandler();
                        break;
                }
            };
            GetShippingDateDialog.prototype.dateChangeHandler = function (event) {
                var datePickerDiv = event.currentTarget;
                var datePickerControl = datePickerDiv.winControl;
                this._requestedShipDate(Commerce.DateExtensions.getDate(datePickerControl.current));
            };
            GetShippingDateDialog.prototype.getShippingDateInvokedHandler = function () {
                var response = {
                    requestedShippingDate: this._requestedShipDate()
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            return GetShippingDateDialog;
        }(Controls.ModalDialog));
        Controls.GetShippingDateDialog = GetShippingDateDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetShippingDateActivity.prototype.execute = function () {
            var self = (this);
            var dialog = new Commerce.Controls.GetShippingDateDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue
                .enqueue(function () {
                dialog.show(self.context, false)
                    .on(Commerce.DialogResult.OK, function (activityResponse) {
                    self.response = activityResponse;
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(dialog, false);
            })
                .enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, dialog, Commerce.DialogResult.OK, asyncResult);
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SignatureCaptureDialog = (function (_super) {
            __extends(SignatureCaptureDialog, _super);
            function SignatureCaptureDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SignatureCaptureDialog";
                _this.paint = false;
                _this.startX = 0;
                _this.startY = 0;
                _this.canvasX = 0;
                _this.canvasY = 0;
                _this._points = [];
                _this._endPoint = new Commerce.Proxy.Entities.Point(0xFFFFFFFF, 0xFFFFFFFF);
                _this._bmp = Commerce.StringExtensions.EMPTY;
                _this.SIGNATURE_CANVAS_ID = "signaturecanvas";
                _this.PADDING = 20;
                _this.allowSkip = ko.observable(false);
                _this.allowCancel = ko.observable(false);
                _this.allowReject = ko.observable(false);
                _this.allowClear = ko.observable(false);
                _this.hasNoSignatureData = ko.observable(true);
                _this.allowSignatureEntry = ko.observable(false);
                _this.focusOnOk = ko.observable(false);
                _this.paymentAmount = ko.observable(0);
                return _this;
            }
            SignatureCaptureDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                if (!dialogState) {
                    dialogState = {
                        verifyOnly: false,
                        allowSkip: false,
                        signatureData: null,
                        paymentAmount: 0
                    };
                }
                this.paymentAmount(dialogState.paymentAmount);
                this.allowCancel(!dialogState.verifyOnly);
                this.allowReject(dialogState.verifyOnly);
                this.allowSkip(dialogState.allowSkip);
                this.allowClear(!dialogState.verifyOnly);
                this.allowSignatureEntry(!dialogState.verifyOnly);
                this.initializeCanvas();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.signatureData) && (dialogState.signatureData.length > 0)) {
                    var imageDataByteArray = Commerce.SerializationHelpers.fromBase64String(dialogState.signatureData);
                    if (imageDataByteArray.byteLength > 2 && imageDataByteArray[0] === 0x42 && imageDataByteArray[1] === 0x4d) {
                        this._bmp = "data:image/bmp;base64," + dialogState.signatureData;
                    }
                    else {
                        var retVal = this.getByteArrayAsPoints(imageDataByteArray);
                        if (retVal.error) {
                            Commerce.NotificationHandler.displayClientErrors([retVal.error])
                                .done(function () {
                                _this.signatureCaptureDialogButtonClickHandler(Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
                            }).fail(function () {
                                _this.signatureCaptureDialogButtonClickHandler(Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
                            });
                            return;
                        }
                        else {
                            this._points = retVal.points;
                        }
                    }
                }
                this.visible(true);
            };
            SignatureCaptureDialog.prototype.afterShow = function () {
                var canvasWidth = this.signatureCanvas.width;
                var canvasHeight = this.signatureCanvas.height;
                this.signatureCanvas.getContext("2d").clearRect(0, 0, this.signatureCanvas.width, this.signatureCanvas.height);
                if (Commerce.ArrayExtensions.hasElements(this._points)) {
                    this.drawPoints(this._points, this.PADDING);
                    this.focusOnOk(true);
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(this._bmp)) {
                    var drawingContext_1 = this.signatureCanvas.getContext("2d");
                    var myImage_1 = new Image();
                    myImage_1.onload = function () {
                        drawingContext_1.drawImage(myImage_1, 0, 0, myImage_1.width, myImage_1.height, 0, 0, canvasWidth, canvasHeight);
                    };
                    myImage_1.src = this._bmp;
                    drawingContext_1.closePath();
                    this.hasNoSignatureData(false);
                    this.focusOnOk(true);
                }
            };
            SignatureCaptureDialog.prototype.initializeCanvas = function () {
                this.signatureCanvas = document.getElementById(this.SIGNATURE_CANVAS_ID);
                if (this.allowSignatureEntry()) {
                    this.mousedown = this.mousedown.bind(this);
                    this.mousemove = this.mousemove.bind(this);
                    this.mouseup = this.mouseup.bind(this);
                    this.mouseout = this.mouseout.bind(this);
                    this.clearCanvas = this.clearCanvas.bind(this);
                    this.signatureCanvas.addEventListener("mousedown", this.mousedown, false);
                    this.signatureCanvas.addEventListener("mousemove", this.mousemove, false);
                    this.signatureCanvas.addEventListener("mouseup", this.mouseup, false);
                    this.signatureCanvas.addEventListener("mouseout", this.mouseout, false);
                    this.signatureCanvas.addEventListener("touchstart", this.mousedown, true);
                    this.signatureCanvas.addEventListener("touchmove", this.mousemove, true);
                    this.signatureCanvas.addEventListener("touchend", this.mouseup, true);
                    this.signatureCanvas.addEventListener("touchcancel", this.mouseout, true);
                }
                this._points = [];
                this._bmp = Commerce.StringExtensions.EMPTY;
            };
            SignatureCaptureDialog.prototype.clearCanvas = function () {
                this.signatureCanvas.getContext("2d").clearRect(0, 0, this.signatureCanvas.width, this.signatureCanvas.height);
                this._points = [];
                this._bmp = Commerce.StringExtensions.EMPTY;
                this.hasNoSignatureData(true);
            };
            SignatureCaptureDialog.prototype.drawPoints = function (points, padding) {
                var _this = this;
                if (padding === void 0) { padding = 0; }
                if (!Commerce.ArrayExtensions.hasElements(points)) {
                    this.clearCanvas();
                    return;
                }
                var imageBounds = this.getImageBounds(points);
                var imageScaleAndOffset = this.getScaleAndOffset(imageBounds, padding);
                var drawingContext = this.signatureCanvas.getContext("2d");
                var startPoint = null;
                var pointNotDrawn = false;
                drawingContext.beginPath();
                drawingContext.strokeStyle = this.getLineColor();
                drawingContext.globalAlpha = 0.7;
                points.forEach(function (point) {
                    if (_this.isEndpoint(point)) {
                        if (pointNotDrawn) {
                            drawingContext.moveTo(startPoint.x, startPoint.y);
                            drawingContext.lineTo(startPoint.x, startPoint.y);
                            drawingContext.stroke();
                        }
                        startPoint = null;
                        pointNotDrawn = false;
                    }
                    else if (startPoint == null) {
                        startPoint = {
                            x: Math.floor(((point.x - imageBounds.leftX) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetX),
                            y: Math.floor(((point.y - imageBounds.topY) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetY)
                        };
                        pointNotDrawn = true;
                    }
                    else {
                        var endPoint = {
                            x: Math.floor(((point.x - imageBounds.leftX) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetX),
                            y: Math.floor(((point.y - imageBounds.topY) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetY)
                        };
                        drawingContext.moveTo(startPoint.x, startPoint.y);
                        drawingContext.lineTo(endPoint.x, endPoint.y);
                        drawingContext.stroke();
                        startPoint = endPoint;
                        pointNotDrawn = false;
                    }
                });
                if (pointNotDrawn) {
                    drawingContext.moveTo(startPoint.x, startPoint.y);
                    drawingContext.lineTo(startPoint.x, startPoint.y);
                    drawingContext.stroke();
                }
                drawingContext.closePath();
                this.hasNoSignatureData(false);
            };
            SignatureCaptureDialog.prototype.getPointsAsByteArray = function () {
                if (!Commerce.SerializationHelpers.isSystemLittleEndian()) {
                    throw new Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM);
                }
                var points = this._points;
                var imageDataByteArray = new Uint8Array(points.length * 4 * 2);
                var imageDataByteArrayIndex = 0;
                points.forEach(function (point) {
                    imageDataByteArray[imageDataByteArrayIndex] = point.x & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 1] = (point.x >>> 8) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 2] = (point.x >>> 16) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 3] = (point.x >>> 24) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 4] = point.y & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 5] = (point.y >>> 8) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 6] = (point.y >>> 16) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 7] = (point.y >>> 24) & 0x000000FF;
                    imageDataByteArrayIndex += 8;
                });
                return imageDataByteArray;
            };
            SignatureCaptureDialog.prototype.signatureCaptureDialogButtonClickHandler = function (operationId) {
                switch (operationId) {
                    case "skip":
                        this.dialogResult.resolve(Commerce.DialogResult.No);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var signatureData = Commerce.StringExtensions.EMPTY;
                        try {
                            if (Commerce.StringExtensions.isEmptyOrWhitespace(this._bmp)) {
                                var imageDataByteArray = this.getPointsAsByteArray();
                                signatureData = Commerce.SerializationHelpers.toBase64String(imageDataByteArray);
                            }
                            else {
                                signatureData = this._bmp.substr(22);
                            }
                        }
                        catch (error) {
                            if (error && error.message && error.message === Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM) {
                                this.dialogResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM)]);
                                return;
                            }
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, signatureData);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                    case "clear":
                        this.clearCanvas();
                        break;
                }
            };
            SignatureCaptureDialog.getEvent = function (ev) {
                if (Commerce.ArrayExtensions.hasElements(ev.touches)) {
                    ev.preventDefault();
                    return ev.touches[0];
                }
                else if (Commerce.ArrayExtensions.hasElements(ev.changedTouches)) {
                    ev.preventDefault();
                    return ev.changedTouches[0];
                }
                return ev;
            };
            SignatureCaptureDialog.prototype.getOffsetPosition = function (element) {
                var currentLeft = 0;
                var currentTop = 0;
                if (element.offsetLeft) {
                    currentLeft += element.offsetLeft;
                }
                if (element.offsetTop) {
                    currentTop += element.offsetTop;
                }
                if (element.scrollTop && element.scrollTop > 0) {
                    currentTop -= element.scrollTop;
                }
                if (element.offsetParent) {
                    var position = this.getOffsetPosition(element.offsetParent);
                    currentLeft += position[0];
                    currentTop += position[1];
                }
                return [currentLeft, currentTop];
            };
            SignatureCaptureDialog.prototype.mousedown = function (ev) {
                if (this.signatureCanvas.width !== this.signatureCanvas.offsetWidth) {
                    this.signatureCanvas.width = this.signatureCanvas.offsetWidth;
                }
                if (this.signatureCanvas.height !== this.signatureCanvas.offsetHeight) {
                    this.signatureCanvas.height = this.signatureCanvas.offsetHeight;
                }
                var position = this.getOffsetPosition(this.signatureCanvas);
                this.canvasX = position[0];
                this.canvasY = position[1];
                ev = SignatureCaptureDialog.getEvent(ev);
                this.paint = true;
                this.startX = ev.pageX - this.canvasX;
                this.startY = ev.pageY - this.canvasY;
                this._points.push(new Commerce.Proxy.Entities.Point(this.startX, this.startY));
                this.hasNoSignatureData(false);
            };
            SignatureCaptureDialog.prototype.getLineColor = function () {
                var lineColor = "#000";
                if (matchMedia("screen and (-ms-high-contrast)").matches) {
                    lineColor = "WindowText";
                }
                return lineColor;
            };
            SignatureCaptureDialog.prototype.mousemove = function (ev) {
                ev = SignatureCaptureDialog.getEvent(ev);
                if (this.paint) {
                    var context = this.signatureCanvas.getContext("2d");
                    context.beginPath();
                    context.strokeStyle = this.getLineColor();
                    context.moveTo(this.startX, this.startY);
                    context.lineTo(ev.pageX - this.canvasX, ev.pageY - this.canvasY);
                    context.closePath();
                    context.stroke();
                    this.startX = ev.pageX - this.canvasX;
                    this.startY = ev.pageY - this.canvasY;
                    this._points.push(new Commerce.Proxy.Entities.Point(this.startX, this.startY));
                    this.hasNoSignatureData(false);
                }
            };
            SignatureCaptureDialog.prototype.mouseup = function (ev) {
                if (this.paint) {
                    this.paint = false;
                    this._points.push(new Commerce.Proxy.Entities.Point(this.startX, this.startY));
                    this._points.push(this._endPoint);
                    this.hasNoSignatureData(false);
                }
            };
            SignatureCaptureDialog.prototype.mouseout = function (ev) {
                if (this.paint) {
                    this.paint = false;
                    this._points.push(new Commerce.Proxy.Entities.Point(this.startX, this.startY));
                    this._points.push(this._endPoint);
                    this.hasNoSignatureData(false);
                }
            };
            SignatureCaptureDialog.prototype.isEndpoint = function (point) {
                var isEndpoint = false;
                if (point) {
                    isEndpoint = (point.x === this._endPoint.x) || (point.y === this._endPoint.y);
                }
                return isEndpoint;
            };
            SignatureCaptureDialog.prototype.getByteArrayAsPoints = function (byteArray) {
                var retVal = {
                    error: null,
                    points: []
                };
                if (!Commerce.SerializationHelpers.isSystemLittleEndian()) {
                    retVal.error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM);
                    return retVal;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(byteArray) || (byteArray.length === 0) || ((byteArray.length % 8) !== 0)) {
                    retVal.error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SIGNATURE_INVALID_FORMAT);
                    return retVal;
                }
                for (var imageDataByteArrayIndex = 0; imageDataByteArrayIndex < byteArray.length; imageDataByteArrayIndex += 8) {
                    var x = 0;
                    x = byteArray[imageDataByteArrayIndex] & 0x000000FF;
                    x = x | ((byteArray[imageDataByteArrayIndex + 1] << 8) & 0x0000FF00);
                    x = x | ((byteArray[imageDataByteArrayIndex + 2] << 16) & 0x00FF0000);
                    x = x | ((byteArray[imageDataByteArrayIndex + 3] << 24) & 0xFF000000);
                    x = x >>> 0;
                    var y = 0;
                    y = byteArray[imageDataByteArrayIndex + 4];
                    y = y | (byteArray[imageDataByteArrayIndex + 5] << 8);
                    y = y | (byteArray[imageDataByteArrayIndex + 6] << 16);
                    y = y | (byteArray[imageDataByteArrayIndex + 7] << 24);
                    y = y >>> 0;
                    retVal.points.push(new Commerce.Proxy.Entities.Point(x, y));
                }
                return retVal;
            };
            SignatureCaptureDialog.prototype.getScaleAndOffset = function (imageBounds, padding) {
                var scaleX = (this.signatureCanvas.width - (padding * 2)) / imageBounds.width;
                var scaleY = (this.signatureCanvas.height - (padding * 2)) / imageBounds.height;
                if (scaleX > scaleY) {
                    return {
                        scale: scaleY,
                        offsetX: Math.floor((this.signatureCanvas.width - imageBounds.width * scaleY) / 2),
                        offsetY: padding
                    };
                }
                else {
                    return {
                        scale: scaleX,
                        offsetX: padding,
                        offsetY: Math.floor((this.signatureCanvas.height - imageBounds.height * scaleX) / 2)
                    };
                }
            };
            SignatureCaptureDialog.prototype.getImageBounds = function (points) {
                var _this = this;
                var imageBounds = {
                    leftX: Number.MAX_VALUE,
                    topY: Number.MAX_VALUE,
                    rightX: Number.MIN_VALUE,
                    bottomY: Number.MIN_VALUE,
                    height: 0,
                    width: 0
                };
                var allEndpoints = true;
                if (Commerce.ArrayExtensions.hasElements(points)) {
                    points.forEach(function (point) {
                        if (!_this.isEndpoint(point)) {
                            allEndpoints = false;
                            imageBounds.leftX = point.x < imageBounds.leftX ? point.x : imageBounds.leftX;
                            imageBounds.topY = point.y < imageBounds.topY ? point.y : imageBounds.topY;
                            imageBounds.rightX = point.x > imageBounds.rightX ? point.x : imageBounds.rightX;
                            imageBounds.bottomY = point.y > imageBounds.bottomY ? point.y : imageBounds.bottomY;
                        }
                    });
                    if (!allEndpoints) {
                        imageBounds.height = imageBounds.bottomY - imageBounds.topY;
                        imageBounds.width = imageBounds.rightX - imageBounds.leftX;
                    }
                }
                return imageBounds;
            };
            SignatureCaptureDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SignatureCaptureDialog;
        }(Controls.ModalDialog));
        Controls.SignatureCaptureDialog = SignatureCaptureDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetSignatureActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            var signatureCaptureDialog = new Commerce.Controls.SignatureCaptureDialog();
            var signatureCaptureDialogState = {
                verifyOnly: false,
                allowSkip: false,
                signatureData: null,
                paymentAmount: 0
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                signatureCaptureDialogState.allowSkip = context.allowSkip;
                signatureCaptureDialogState.paymentAmount = context.paymentAmount;
            }
            var asyncResult = new Commerce.VoidAsyncResult();
            signatureCaptureDialog.show(signatureCaptureDialogState, true)
                .on(Commerce.DialogResult.OK, function (signature) {
                self.response = {
                    signature: signature,
                    result: Activities.SignatureActivityResultEnum.OK
                };
                asyncResult.resolve();
            }).on(Commerce.DialogResult.No, function () {
                self.response = {
                    signature: null,
                    result: Activities.SignatureActivityResultEnum.Skipped
                };
                asyncResult.resolve();
            }).on(Commerce.DialogResult.Cancel, function () {
                self.response = {
                    signature: null,
                    result: Activities.SignatureActivityResultEnum.Cancelled
                };
                asyncResult.resolve();
            }).onError(function (errors) {
                asyncResult.reject(errors);
            });
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetSignatureFromDeviceActivity.prototype.execute = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                throw new Error("Invalid options passed: GetSignatureFromDeviceActivity was passed invalid options.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(this.context.correlationId)) {
                throw new Error("Invalid options passed: GetSignatureFromDeviceActivity was passed invalid correlationId.");
            }
            Commerce.RetailLogger.posGetSignatureFromDeviceActivityStarted(this.context.correlationId);
            var getSignatureFromDeviceDialog = new Commerce.Controls.GetSignatureFromDeviceDialog(this.context.correlationId);
            var asyncResult = new Commerce.VoidAsyncResult();
            getSignatureFromDeviceDialog.show(null, true)
                .on(Commerce.DialogResult.OK, function (result) {
                _this.response = {
                    signatureData: result.signatureData,
                    status: result.status
                };
                Commerce.RetailLogger.posGetSignatureFromDeviceActivitySucceeded(_this.context.correlationId, "OK");
                asyncResult.resolve();
            }).on(Commerce.DialogResult.Cancel, function (result) {
                _this.response = {
                    signatureData: result.signatureData,
                    status: result.status
                };
                Commerce.RetailLogger.posGetSignatureFromDeviceActivitySucceeded(_this.context.correlationId, "Skip");
                asyncResult.resolve();
            }).onError(function (errors) {
                Commerce.RetailLogger.posGetSignatureFromDeviceActivityFailed(_this.context.correlationId, Commerce.ErrorHelper.serializeError(errors));
                getSignatureFromDeviceDialog.hide().always(function () { asyncResult.reject(errors); });
            });
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetSignatureFromPOSActivity.prototype.execute = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                throw new Error("Invalid options passed: GetSignatureFromPOSActivity was passed invalid options.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(this.context.correlationId)) {
                throw new Error("Invalid options passed: GetSignatureFromPOSActivity was passed invalid correlationId.");
            }
            var signatureDialog = new Commerce.Controls.SignatureDialog();
            var signatureDialogState = {
                allowRecapture: false,
                correlationId: this.context.correlationId,
                signatureData: null,
                verifyOnly: false
            };
            Commerce.RetailLogger.posGetSignatureInPOSActivityStarted(signatureDialogState.correlationId);
            var asyncResult = new Commerce.VoidAsyncResult();
            signatureDialog.show(signatureDialogState, true)
                .on(Commerce.DialogResult.OK, function (result) {
                _this.response = {
                    status: Activities.SignatureActivityResult.OK,
                    signature: result.signatureData
                };
                Commerce.RetailLogger.posGetSignatureInPOSActivitySucceeded(signatureDialogState.correlationId, "OK");
                asyncResult.resolve();
            }).on(Commerce.DialogResult.Cancel, function (result) {
                _this.response = {
                    status: Activities.SignatureActivityResult.Cancelled,
                    signature: result.signatureData
                };
                Commerce.RetailLogger.posGetSignatureInPOSActivitySucceeded(signatureDialogState.correlationId, "Skip");
                asyncResult.resolve();
            }).onError(function (errors) {
                Commerce.RetailLogger.posGetSignatureInPOSActivityFailed(signatureDialogState.correlationId, Commerce.ErrorHelper.serializeError(errors));
                signatureDialog.hide().always(function () { asyncResult.reject(errors); });
            });
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetTransactionActivity.prototype.execute = function () {
            var self = (this);
            self.response = { cart: Commerce.Session.instance.cart };
            if (self.responseHandler) {
                return self.responseHandler(self.response);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetTransactionCommentActivity.prototype.execute = function () {
            var self = (this);
            var asyncQueue = new Commerce.AsyncQueue();
            var textInputDialog = new Commerce.Controls.TextInputDialog();
            asyncQueue
                .enqueue(function () {
                textInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_185"));
                textInputDialog.show({ content: self.context.cart.Comment, maxLength: 60 }, false)
                    .on(Commerce.DialogResult.OK, function (comment) {
                    self.response = { comment: comment };
                }).on(Commerce.DialogResult.Cancel, function () {
                    textInputDialog.hide().done(function () { asyncQueue.cancel(); });
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(textInputDialog, false);
            }).enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, textInputDialog, Commerce.DialogResult.OK, asyncResult);
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetTransactionDiscountActivity.prototype.execute = function () {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            var addDiscountDialog = new Commerce.Controls.AddDiscountDialog();
            asyncQueue
                .enqueue(function () {
                var dialogState = {
                    cartLine: null,
                    discountType: _this.context.isPercent ?
                        Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent : Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount
                };
                addDiscountDialog.show(dialogState, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    _this.response = { discount: result.discountValue };
                }).on(Commerce.DialogResult.Cancel, function () {
                    addDiscountDialog.hide().done(function () { asyncQueue.cancel(); });
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(addDiscountDialog, false);
            }).enqueue(function () {
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(_this, addDiscountDialog, Commerce.DialogResult.OK, asyncResult, function (result) { return { discount: result.discountValue }; });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetTransactionReturnLinesActivity.prototype.execute = function () {
            var self = (this);
            var onReturnSalesOrderSalesLines = new Commerce.AsyncResult(null);
            var getTransactionReturnLinesActivityContext = self.context;
            var processing = ko.observable(false);
            var viewOptions = {
                salesOrderToReturn: getTransactionReturnLinesActivityContext.salesOrder,
                onReturnSalesOrderSalesLines: onReturnSalesOrderSalesLines,
                processing: processing
            };
            var asyncResult = callResponseHandler(self, viewOptions);
            Commerce.ViewModelAdapter.navigate("ReturnTransactionView", viewOptions);
            return asyncResult;
        };
        function callResponseHandler(activity, viewOptions) {
            var asyncResult = new Commerce.VoidAsyncResult();
            viewOptions.onReturnSalesOrderSalesLines.done(function (result) {
                if (result) {
                    activity.response = { salesOrder: result.salesOrder, salesLines: result.salesLines };
                    if (activity.responseHandler) {
                        viewOptions.processing(true);
                        activity.responseHandler(activity.response)
                            .done(function () {
                            viewOptions.onReturnSalesOrderSalesLines = null;
                            asyncResult.resolve();
                        }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                            viewOptions.onReturnSalesOrderSalesLines.clear();
                            viewOptions.onReturnSalesOrderSalesLines.done(function (result) {
                                asyncResult.resolveOrRejectOn(callResponseHandler(activity, viewOptions));
                            });
                        }).always(function () {
                            viewOptions.processing(false);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                }
                else {
                    activity.response = null;
                    asyncResult.resolve();
                }
            });
            return asyncResult;
        }
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GetVariantSelectionMethodActivity.prototype.execute = function () {
            var self = (this);
            var variantSelectionMethodDialog = new Commerce.Controls.GetVariantSelectionMethodDialog();
            var result = new Commerce.AsyncResult();
            if (Commerce.Config.isPhone) {
                self.response = { variantSelectionMethod: Activities.VariantSelectionMethod.SelectVariant };
                return Commerce.VoidAsyncResult.createResolved();
            }
            else {
                var dialogOptions = {
                    product: self.context.product
                };
                var updateResponse = function (dialogResult) {
                    return { variantSelectionMethod: dialogResult.variantSelectionMethod };
                };
                variantSelectionMethodDialog.show(dialogOptions, false);
                Activities.ModalDialogHelper.callResponseHandler(self, variantSelectionMethodDialog, Commerce.DialogResult.OK, result, updateResponse);
            }
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ChangeDialog = (function (_super) {
            __extends(ChangeDialog, _super);
            function ChangeDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "ChangeDialog";
                _this.amountDue = ko.observable(0);
                _this.changeAmount = ko.observable(0);
                _this.changeAmountLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.printGiftReceiptVisible = ko.observable(false);
                _this.printGiftReceipt = ko.observable(false);
                _this.salesPaymentDifference = ko.observable(0);
                _this.salesPaymentDifferenceVisible = ko.observable(false);
                _this.totalAmountPaid = ko.observable(0);
                return _this;
            }
            ChangeDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    this.amountDue(dialogState.amountDue);
                    this.changeAmount(dialogState.changeAmount);
                    var changeAmountLabel = null;
                    if (Commerce.StringExtensions.isNullOrWhitespace(dialogState.tenderTypeName)) {
                        changeAmountLabel = Commerce.ViewModelAdapter.getResourceString("string_1816");
                    }
                    else {
                        changeAmountLabel = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1824"), dialogState.tenderTypeName);
                    }
                    this.changeAmountLabel(changeAmountLabel);
                    if (dialogState.salesPaymentDifference !== 0) {
                        this.salesPaymentDifference(dialogState.salesPaymentDifference);
                        this.salesPaymentDifferenceVisible(true);
                    }
                    this.totalAmountPaid(dialogState.totalAmountPaid);
                }
                this.visible(true);
                Commerce.RetailLogger.viewsControlsChangeDialogVisible(Commerce.LoggerHelper.getFormattedCorrelationId(dialogState));
            };
            ChangeDialog.prototype.onPrintGiftReceiptToggle = function (checked) {
                this.printGiftReceipt(checked);
            };
            ChangeDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Close);
                        break;
                }
            };
            return ChangeDialog;
        }(Controls.ModalDialog));
        Controls.ChangeDialog = ChangeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.GiveChangeBackActivity.prototype.execute = function () {
            var self = this;
            var context = self.context;
            var dialogState = {
                amountDue: context.amountDue,
                changeAmount: context.changeAmount,
                salesPaymentDifference: context.salesPaymentDifference,
                totalAmountPaid: context.totalAmountPaid,
                tenderTypeName: context.tenderTypeName,
                correlationId: context.correlationId
            };
            var changeDialog = new Commerce.Controls.ChangeDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                changeDialog.printGiftReceiptVisible(context.offerToPrintGiftReceipts);
                changeDialog.show(dialogState, false);
                Activities.ModalDialogHelper.callResponseHandler(self, changeDialog, Commerce.DialogResult.Close, asyncResult, function () {
                    return { printGiftReceipts: changeDialog.printGiftReceipt() };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CommentDialog = (function (_super) {
            __extends(CommentDialog, _super);
            function CommentDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "CommentDialog";
                _this.inputLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.textContent = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.textMaxLength = ko.observable(null);
                _this.rowsNumber = ko.observable(CommentDialog.DEFAULT_ROWS_NUMBER);
                _this.listTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.comments = ko.observable([]);
                _this.hideScrollbar = ko.observable(false);
                _this._enterKeyDisabled = false;
                _this.hasComments = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.comments()) &&
                        Commerce.ArrayExtensions.hasElements(_this.comments());
                }, _this);
                _this.commentHasNoContent = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this.textContent());
                }, _this);
                return _this;
            }
            CommentDialog.prototype.onKeyDown = function (caller, event) {
                if (event.keyCode === 13 && this._enterKeyDisabled) {
                    event.preventDefault();
                    return false;
                }
                return true;
            };
            CommentDialog.prototype.onShowing = function (dialogState) {
                if (dialogState) {
                    this.title(dialogState.title);
                    this.subTitle(dialogState.subTitle);
                    this.inputLabel(dialogState.inputLabel);
                    this.textMaxLength(dialogState.maxLength);
                    this.textContent(dialogState.content);
                    this.listTitle(dialogState.listTitle);
                    this.comments(dialogState.comments);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.rowsNumber)) {
                        this.rowsNumber(dialogState.rowsNumber);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.hideScrollbar)) {
                        this.hideScrollbar(dialogState.hideScrollbar);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.enterKeyDisabled)) {
                        this._enterKeyDisabled = dialogState.enterKeyDisabled;
                    }
                }
                this.visible(true);
            };
            CommentDialog.prototype.setTextContent = function (updatedText) {
                this.textContent(updatedText);
            };
            CommentDialog.prototype.dialogCloseButtonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            CommentDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { newCommentText: this.textContent() });
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel, { newCommentText: Commerce.StringExtensions.EMPTY });
                        break;
                }
            };
            CommentDialog.DEFAULT_ROWS_NUMBER = 5;
            return CommentDialog;
        }(Controls.ModalDialog));
        Controls.CommentDialog = CommentDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.HandleCommentsActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            var commentDialog = new Commerce.Controls.CommentDialog();
            var commentDialogOptions;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                commentDialogOptions = {
                    comments: context.comments,
                    title: context.title,
                    subTitle: context.subTitle,
                    inputLabel: context.inputLabel,
                    listTitle: context.listTitle
                };
            }
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { newCommentText: dialogResult.newCommentText };
            };
            commentDialog.show(commentDialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(self, commentDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var HardwareStationErrorDialog = (function (_super) {
            __extends(HardwareStationErrorDialog, _super);
            function HardwareStationErrorDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "HardwareStationErrorDialog";
                _this._hardwareStationDescription = ko.observable(null);
                _this.subTitleValue = ko.computed(function () { return _this.getSubTitleValue(); });
                _this.messageValue = ko.observable(null);
                _this.hardwareStationErrorDialogActionLines = ko.observableArray([]);
                return _this;
            }
            HardwareStationErrorDialog.prototype.onShowing = function (dialogState) {
                this._hardwareStationDescription(dialogState.hardwareStation.description);
                this.messageValue(Commerce.ErrorHelper.getErrorMessages(dialogState.errors));
                this.hardwareStationErrorDialogActionLines(this.getDialogActionLines(dialogState.errors));
                this.visible(true);
            };
            HardwareStationErrorDialog.prototype.hardwareStationErrorDialogClickHandler = function (eventArgs) {
                var response = {
                    action: Commerce.Peripherals.HardwareStation.HardwareStationErrorActionType = eventArgs.data.Action
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            HardwareStationErrorDialog.prototype.getSubTitleValue = function () {
                return Commerce.StringExtensions.format("{0}", this._hardwareStationDescription() || "");
            };
            HardwareStationErrorDialog.prototype.getDialogActionLines = function (errors) {
                var tileFields = [];
                var tileField;
                if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PRINTER_ERROR)) {
                    tileField = {
                        Action: 2,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_81")
                    };
                    tileFields.push(tileField);
                }
                if (Commerce.Session.instance.isLoggedOn) {
                    if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR) ||
                        Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_GENERALEXCEPTION) ||
                        Commerce.ErrorHelper.hasError(errors, "Microsoft_Dynamics_Server_Internal_Error")) {
                        tileField = {
                            Action: 2,
                            Label: Commerce.ViewModelAdapter.getResourceString("string_81")
                        };
                        tileFields.push(tileField);
                    }
                    tileField = {
                        Action: 1,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_12002")
                    };
                    tileFields.push(tileField);
                }
                tileField = {
                    Action: 0,
                    Label: Commerce.ViewModelAdapter.getResourceString("string_12001")
                };
                tileFields.push(tileField);
                return tileFields;
            };
            return HardwareStationErrorDialog;
        }(Controls.ModalDialog));
        Controls.HardwareStationErrorDialog = HardwareStationErrorDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.HandleHardwareStationErrorActivity.prototype.execute = function () {
            var self = (this);
            var hardwareStationErrorDialog = new Commerce.Controls.HardwareStationErrorDialog();
            hardwareStationErrorDialog.show(self.context, false)
                .onAny(function (activityResponse) {
                self.response = activityResponse;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(hardwareStationErrorDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.LoyaltyCardDetailsActivity.prototype.execute = function () {
            var _this = this;
            var loyaltyCardDetailsDialog = new Commerce.Controls.LoyaltyCardDetailsDialog();
            var loyaltyCardDetailsDialogState;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                loyaltyCardDetailsDialogState = {
                    cardIssued: this.context.cardIssued
                };
            }
            loyaltyCardDetailsDialog.show(loyaltyCardDetailsDialogState, false);
            var result = new Commerce.AsyncResult();
            Activities.ModalDialogHelper.callResponseHandler(this, loyaltyCardDetailsDialog, Commerce.DialogResult.Close, result);
            return result.done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        Activities.ManageChargesDetailsActivity.prototype.execute = function () {
            var _this = this;
            var chargesInfoDialog = new Commerce.Controls.ManageChargesLineDetailDialog();
            var result = new Commerce.AsyncResult();
            var dialogOptions = {
                currencyCode: this.context.currencyCode,
                deliveryMode: this.context.deliveryMode,
                overrideReason: this.context.overrideReason,
            };
            chargesInfoDialog.show(dialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(this, chargesInfoDialog, Commerce.DialogResult.OK, result);
            return result.done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            }).map(function () { return void 0; });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ManageSafeActivity.prototype.execute = function () {
            var activityResult = new Commerce.AsyncResult();
            var onResultAvailableAsync = function () {
                var responseHandlerResult;
                responseHandlerResult = Commerce.AsyncResult.createResolved({ canceled: true });
                return responseHandlerResult.done(function (result) {
                    activityResult.resolve(result);
                });
            };
            var viewOptions = {
                storeSafes: this.context.storeSafes,
                onResultAvailableAsync: onResultAvailableAsync
            };
            Commerce.ViewModelAdapter.navigate("ManageSafesView", viewOptions);
            return activityResult.done(function (result) {
                Commerce.ViewModelAdapter.navigateBack();
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var MessageDialog = (function (_super) {
            __extends(MessageDialog, _super);
            function MessageDialog() {
                var _this = _super.call(this) || this;
                _this.closeClickHandler = null;
                _this.controlName = "MessageDialog";
                _this.content = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.additionalInfo = ko.observable(null);
                _this.messageCheckboxVisible = ko.observable(false);
                _this.messageCheckboxChecked = ko.observable(false);
                _this.messageCheckboxLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.hideOnEscape = ko.observable(true);
                return _this;
            }
            Object.defineProperty(MessageDialog.prototype, "MessageCheckboxChecked", {
                get: function () {
                    return this.messageCheckboxChecked();
                },
                enumerable: true,
                configurable: true
            });
            MessageDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._setDialogState(dialogState);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            MessageDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            MessageDialog.prototype.buttonClickHandler = function (result) {
                switch (result) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, Commerce.DialogResult.Yes);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
                        break;
                    default:
                        this.dialogResult.resolve(Commerce.DialogResult.Yes, result);
                }
            };
            MessageDialog.prototype.onCloseHandlerCallback = function () {
                this.dialogResult.resolve(Commerce.DialogResult.No, Commerce.DialogResult.No);
            };
            MessageDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                this.buttons = dialogState.buttons;
                this.content(dialogState.content);
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogState.title)) {
                    this.title(dialogState.title);
                }
                else {
                    this.title(Commerce.StringExtensions.EMPTY);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogState.subTitle)) {
                    this.subTitle(dialogState.subTitle);
                }
                else {
                    this.subTitle(Commerce.StringExtensions.EMPTY);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(dialogState.additionalInfo)) {
                    this.additionalInfo(dialogState.additionalInfo);
                }
                else {
                    this.additionalInfo(Commerce.StringExtensions.EMPTY);
                }
                this.hideOnEscape(dialogState.hideOnEscape);
                var checkedDialogState = dialogState;
                if (checkedDialogState.messageCheckboxVisible) {
                    this.messageCheckboxVisible(true);
                }
                if (checkedDialogState.messageCheckboxChecked) {
                    this.messageCheckboxChecked(true);
                }
                var labelToDisplay = Commerce.ViewModelAdapter.getResourceString("string_7550");
                if (!Commerce.ObjectExtensions.isNullOrUndefined(checkedDialogState.messageCheckboxLabelResourceID)) {
                    var label = Commerce.ViewModelAdapter.getResourceString(checkedDialogState.messageCheckboxLabelResourceID);
                    if (label !== checkedDialogState.messageCheckboxLabelResourceID) {
                        labelToDisplay = label;
                    }
                }
                this.messageCheckboxLabel(labelToDisplay);
                if (dialogState.showCloseX === true) {
                    this.closeClickHandler = this.onCloseHandlerCallback.bind(this);
                }
            };
            return MessageDialog;
        }(Controls.ModalDialog));
        Controls.MessageDialog = MessageDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.NotifyPasswordExpiredActivity.prototype.execute = function () {
            var self = (this);
            var formatString = Commerce.Session.instance.CurrentEmployee.NumberOfDaysToPasswordExpiry === 1 ? "string_519" : "string_515";
            var daysToExpiryMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(formatString), Commerce.Session.instance.CurrentEmployee.NumberOfDaysToPasswordExpiry);
            var passwordExpiryDialogOptions = {
                title: Commerce.ViewModelAdapter.getResourceString("string_518"),
                content: daysToExpiryMessage,
                buttons: [
                    {
                        label: Commerce.ViewModelAdapter.getResourceString("string_516"),
                        operationId: Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK,
                        isPrimary: true
                    },
                    {
                        label: Commerce.ViewModelAdapter.getResourceString("string_517"),
                        operationId: Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK,
                        isPrimary: false
                    }
                ],
                hideOnEscape: true
            };
            var dialogResult = new Commerce.AsyncResult();
            new Commerce.Controls.MessageDialog()
                .show(passwordExpiryDialogOptions, true)
                .onAny(function (result) { return dialogResult.resolve(result); });
            return dialogResult.map(function (dialogResult) {
                if (dialogResult === Commerce.DialogResult.Yes) {
                    var options = {
                        staffId: self.context.staffId
                    };
                    Commerce.ViewModelAdapter.navigate("ChangePasswordView", options);
                    self.response = {
                        continueProcessing: false
                    };
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    self.response = {
                        continueProcessing: true
                    };
                    return Commerce.VoidAsyncResult.createResolved();
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var OverrideHeaderChargeDialog = (function (_super) {
            __extends(OverrideHeaderChargeDialog, _super);
            function OverrideHeaderChargeDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "OverrideHeaderChargeDialog";
                _this.selectedChargeCode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.chargeAmount = ko.observable("0");
                _this.isOKButtonDisabled = ko.computed(function () {
                    var overriddenChargeAmount = Commerce.NumberExtensions.parseNumber(_this.chargeAmount());
                    return isNaN(overriddenChargeAmount);
                });
                return _this;
            }
            OverrideHeaderChargeDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { chargeLine: undefined };
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.chargeLine)) {
                    this.cancelDialog();
                    return;
                }
                this._chargeLine = dialogState.chargeLine;
                this.selectedChargeCode(this._chargeLine.ChargeCode);
                this.chargeAmount(Commerce.NumberExtensions.formatNumber(this._chargeLine.CalculatedAmount, Commerce.NumberExtensions.getDecimalPrecision()));
                this.visible(true);
            };
            OverrideHeaderChargeDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { overriddenChargeAmount: Commerce.NumberExtensions.parseNumber(this.chargeAmount()) });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            OverrideHeaderChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this.isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            OverrideHeaderChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            OverrideHeaderChargeDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return OverrideHeaderChargeDialog;
        }(Controls.ModalDialog));
        Controls.OverrideHeaderChargeDialog = OverrideHeaderChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.OverrideHeaderChargeActivity.prototype.execute = function () {
            var _this = this;
            var overrideHeaderChargeDialog = new Commerce.Controls.OverrideHeaderChargeDialog();
            overrideHeaderChargeDialog.show(this.context, false)
                .on(Commerce.DialogResult.OK, function (result) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                    _this.response = {
                        chargeLineId: _this.context.chargeLine.ChargeLineId,
                        newAmount: result.overriddenChargeAmount
                    };
                }
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(overrideHeaderChargeDialog, true)
                .done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var OverrideLineChargeDialog = (function (_super) {
            __extends(OverrideLineChargeDialog, _super);
            function OverrideLineChargeDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "OverrideLineChargeDialog";
                _this.selectedChargeCode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.chargeAmount = ko.observable("0");
                _this.selectedProduct = ko.observable(null);
                _this.isOKButtonDisabled = ko.computed(function () {
                    var overriddenChargeAmount = Commerce.NumberExtensions.parseNumber(_this.chargeAmount());
                    return isNaN(overriddenChargeAmount);
                });
                return _this;
            }
            OverrideLineChargeDialog.prototype.onShowing = function (dialogState) {
                dialogState = dialogState || { chargeLine: undefined, cartLine: undefined };
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState.cartLine) || Commerce.ObjectExtensions.isNullOrUndefined(dialogState.chargeLine)) {
                    this.cancelDialog();
                    return;
                }
                this._chargeLine = dialogState.chargeLine;
                this.selectedChargeCode(this._chargeLine.ChargeCode);
                this.chargeAmount(Commerce.NumberExtensions.formatNumber(this._chargeLine.CalculatedAmount, Commerce.NumberExtensions.getDecimalPrecision()));
                this.selectedProduct(Commerce.Session.instance.getFromProductsInCartCache(dialogState.cartLine.ProductId));
                this.visible(true);
            };
            OverrideLineChargeDialog.prototype.onButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { overriddenChargeAmount: Commerce.NumberExtensions.parseNumber(this.chargeAmount()) });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            OverrideLineChargeDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this.isOKButtonDisabled()) {
                    this.onButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            OverrideLineChargeDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            OverrideLineChargeDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return OverrideLineChargeDialog;
        }(Controls.ModalDialog));
        Controls.OverrideLineChargeDialog = OverrideLineChargeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.OverrideLineChargeActivity.prototype.execute = function () {
            var _this = this;
            var overrideLineChargeDialog = new Commerce.Controls.OverrideLineChargeDialog();
            overrideLineChargeDialog.show(this.context, false)
                .on(Commerce.DialogResult.OK, function (result) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                    _this.response = {
                        cartLineId: _this.context.cartLine.LineId,
                        chargeLineId: _this.context.chargeLine.ChargeLineId,
                        newAmount: result.overriddenChargeAmount
                    };
                }
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(overrideLineChargeDialog, true)
                .done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.PaymentTerminalAuthorizeRefundActivity.prototype.execute = function () {
            var self = this;
            var requestContext = self.context;
            var paymentTerminalAuthorizeRefundQueue = new Commerce.AsyncQueue();
            var paymentInfoResponse = null;
            var paymentTerminalMessageDialog;
            paymentTerminalAuthorizeRefundQueue.enqueue(function () {
                var dialogState;
                paymentTerminalMessageDialog = new Commerce.Controls.PaymentMessageDialog();
                dialogState = {
                    title: Commerce.ViewModelAdapter.getResourceString("string_6908"),
                    messageText: Commerce.ViewModelAdapter.getResourceString("string_1174"),
                    buttonText: Commerce.ViewModelAdapter.getResourceString("string_76")
                };
                paymentTerminalMessageDialog.show(dialogState, false)
                    .on(Commerce.DialogResult.Cancel, function () {
                    var request = new Commerce.PaymentTerminalCancelOperationRequest();
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                });
                if (requestContext.amount >= 0) {
                    Commerce.RetailLogger.viewsOrderPaymentViewPaymentAuthorizationStarted();
                    var paymentTerminalAuthorizationRequest = new Commerce.PaymentTerminalAuthorizePaymentRequest(requestContext.paymentConnectorId, requestContext.amount, requestContext.tenderInfo, requestContext.voiceAuthorization, requestContext.isManualEntry, null, null, requestContext.paymentTransactionReferenceData);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(paymentTerminalAuthorizationRequest))
                        .done(function (result) {
                        if (!result.canceled) {
                            paymentInfoResponse = result.data.result;
                        }
                    }).map(function (result) {
                        return { canceled: result.canceled, data: result.data.result };
                    }).always(function () {
                        paymentTerminalMessageDialog.hide();
                    });
                }
                else {
                    Commerce.RetailLogger.viewsOrderPaymentViewRefundPaymentStarted();
                    var paymentTerminalRefundRequest = new Commerce.PaymentTerminalRefundPaymentRequest(requestContext.paymentConnectorId, requestContext.amount * -1, requestContext.tenderInfo, requestContext.isManualEntry, null);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(paymentTerminalRefundRequest))
                        .done(function (result) {
                        if (!result.canceled) {
                            paymentInfoResponse = result.data.result;
                        }
                    }).map(function (result) {
                        return { canceled: result.canceled, data: result.data.result };
                    }).always(function () {
                        paymentTerminalMessageDialog.hide();
                    });
                }
            });
            return paymentTerminalAuthorizeRefundQueue.run().done(function (result) {
                if (!result.canceled) {
                    self.response = { paymentInfo: paymentInfoResponse };
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.PrintReceiptActivity.prototype.execute = function () {
            var self = this;
            var printReceiptDialog = new Commerce.Controls.PrintReceiptDialog();
            var context = self.context;
            var asyncResult = new Commerce.AsyncResult();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(Commerce.Operations.HardwareStationHelper.selectActiveHardwareStationAsync());
            }).enqueue(function () {
                printReceiptDialog.show({
                    receipts: context.receipts,
                    rejectOnHardwareStationErrors: true,
                    notifyOnNoPrintableReceipts: context.notifyOnNoPrintableReceipts,
                    isCopyOfReceipt: context.isCopyOfReceipt,
                    associatedOrder: context.associatedOrder,
                    ignoreShouldPrompt: context.ignoreShouldPrompt
                }, false);
                Activities.ModalDialogHelper.callResponseHandler(self, printReceiptDialog, Commerce.DialogResult.OK, asyncResult, function () {
                    return { printGiftReceipts: printReceiptDialog.printGiftReceipt };
                });
                return asyncResult.done(function (result) {
                    if (result.canceled) {
                        self.response = null;
                    }
                });
            });
            return asyncQueue.run().map(function () {
                return Commerce.VoidAsyncResult.createResolved();
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.RegisterTimeActivity.prototype.execute = function () {
            var self = (this);
            var timeRegistrationDialog = new Commerce.Controls.TimeRegistrationDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            var dialogOutput;
            asyncQueue
                .enqueue(function () {
                timeRegistrationDialog.show({ employeeActivity: self.context.employeeActivity }, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    dialogOutput = result;
                }).on(Commerce.DialogResult.Cancel, function (result) {
                    timeRegistrationDialog.hide();
                    asyncQueue.cancel();
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(timeRegistrationDialog, false);
            }).enqueue(function () {
                if (dialogOutput.employeeActivityType === Commerce.Proxy.Entities.EmployeeActivityType.Logbook) {
                    Commerce.ViewModelAdapter.navigate("TimeClockView");
                }
                else if ((dialogOutput.employeeActivityType === Commerce.Proxy.Entities.EmployeeActivityType.ClockIn && !timeRegistrationDialog.clockedIn())
                    || (dialogOutput.employeeActivityType !== Commerce.Proxy.Entities.EmployeeActivityType.ClockIn && timeRegistrationDialog.clockedIn())) {
                    self.response = { employeeActivityType: dialogOutput.employeeActivityType };
                    return self.responseHandler(self.response)
                        .done(function (registrationDateTime) {
                        timeRegistrationDialog.updateTimeClockStatus(dialogOutput.employeeActivityType, registrationDateTime);
                    }).fail(function (errors) {
                        timeRegistrationDialog.hide();
                    });
                }
                timeRegistrationDialog.hide();
                return Commerce.VoidAsyncResult.createResolved();
            });
            return asyncQueue.run();
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ResumeShiftActivity.prototype.execute = function () {
            var self = (this);
            var asyncResult = new Commerce.VoidAsyncResult(null);
            var viewOptions;
            var resolveResult = function () {
                viewOptions.onShiftSelected = null;
                asyncResult.resolve();
                if (Commerce.ViewModelAdapter.isInView("ResumeShiftView")) {
                    Commerce.ViewModelAdapter.navigateBack();
                }
            };
            viewOptions = {
                availableShiftActions: self.context.availableShiftActions,
                onShiftSelected: function (shift) {
                    self.response = { shift: shift };
                    if (self.responseHandler) {
                        return self.responseHandler(self.response)
                            .done(function () {
                            resolveResult();
                        }).fail(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                    }
                    else {
                        resolveResult();
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                }
            };
            Commerce.ViewModelAdapter.navigate("ResumeShiftView", viewOptions);
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectCardTypeActivity.prototype.execute = function () {
            var self = this;
            var cardTypeDialog = new Commerce.Controls.CardTypeDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                cardTypeDialog.show(self.context.cardTypes, false);
                Activities.ModalDialogHelper.callResponseHandler(self, cardTypeDialog, Commerce.DialogResult.OK, asyncResult, function (result) {
                    return { cardType: result };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectCashDrawerActivity.prototype.execute = function () {
            var self = this;
            var cashDrawerInputDialog = new Commerce.Controls.CashDrawerInputDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                cashDrawerInputDialog.show(self.context.cashDrawers, false);
                Activities.ModalDialogHelper.callResponseHandler(self, cashDrawerInputDialog, Commerce.DialogResult.OK, asyncResult, function (result) {
                    return { cashDrawer: result };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectCashManagementTransactionEndpointActivity.prototype.execute = function () {
            var _this = this;
            Commerce.RetailLogger.selectStoreSafeActivityStarted(this.context.correlationId);
            var selectStoreSafeDialog = new Commerce.Controls.SelectCashManagementTransactionEndpointDialog({
                title: this.context.title,
                subTitle: this.context.subTitle,
                storeSafes: this.context.storeSafes,
                shifts: this.context.shifts,
                preSelectedStoreSafe: this.context.preSelectedStoreSafe,
                preSelectedShift: this.context.preSelectedShift,
            });
            var activityResult = new Commerce.AsyncResult();
            selectStoreSafeDialog.show(null, true)
                .on(Commerce.DialogResult.OK, function (dialogResponse) {
                Commerce.RetailLogger.selectStoreSafeActivitySucceeded(_this.context.correlationId, "Completed");
                _this.response = {
                    selectedStoreSafe: dialogResponse.selectedStoreSafe,
                    selectedShift: dialogResponse.selectedShift
                };
                activityResult.resolve({ canceled: false, data: _this.response });
            }).on(Commerce.DialogResult.Cancel, function (dialogResponse) {
                Commerce.RetailLogger.selectStoreSafeActivitySucceeded(_this.context.correlationId, "Cancelled");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: null });
            }).on(Commerce.DialogResult.Close, function (dialogResponse) {
                Commerce.RetailLogger.selectStoreSafeActivitySucceeded(_this.context.correlationId, "Closed");
                _this.response = null;
                activityResult.resolve({ canceled: true, data: null });
            }).onError(function (errors) {
                Commerce.RetailLogger.selectStoreSafeActivityFailed(_this.context.correlationId, Commerce.ErrorHelper.serializeError(errors));
                activityResult.reject(errors);
            });
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectCouponCodesActivity.prototype.execute = function () {
            var self = this;
            var asyncQueue = new Commerce.AsyncQueue();
            var listInputDialog = new Commerce.Controls.CheckedListInputDialog();
            var listItems = [];
            var selectCouponsOptions;
            listInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_13053"));
            var couponsOnCart = self.context.cart.Coupons;
            couponsOnCart.forEach(function (coupon) {
                listItems.push(coupon.Code);
            });
            selectCouponsOptions = {
                items: listItems
            };
            if (Commerce.ArrayExtensions.hasElements(listItems)) {
                listInputDialog.subTitle(Commerce.ViewModelAdapter.getResourceString("string_13054"));
            }
            else {
                listInputDialog.subTitle(Commerce.ViewModelAdapter.getResourceString("string_13055"));
            }
            asyncQueue
                .enqueue(function () {
                listInputDialog.show(selectCouponsOptions, false);
                var asyncResult = new Commerce.AsyncResult(null);
                Activities.ModalDialogHelper.callResponseHandler(self, listInputDialog, Commerce.DialogResult.OK, asyncResult, function (selectedItems) {
                    return { couponCodes: selectedItems };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectCustomerActivity.prototype.execute = function () {
            var _this = this;
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var customerSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                Commerce.ViewModelAdapter.navigateBack(_this.context.correlationId);
                activityResult.resolve({ canceled: false, data: result });
            }, function () {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                activityResult.resolve({ canceled: true, data: null });
            }, function (selection) {
                return Commerce.CustomerHelper.crossCompanyCustomerTransferAsync(_this.context.correlationId, selection)
                    .map(function (result) {
                    return { canceled: false, data: result };
                });
            });
            var parameters = {
                searchText: this.context.searchText,
                searchEntity: Commerce.Client.Entities.SearchViewSearchEntity.Customer,
                selectionMode: Commerce.ViewModels.SearchViewSelectionMode.Customer,
                customerSelectionOptions: {
                    customerSelectionHandler: customerSelectionHandler,
                    isOnlySelectionAllowed: false
                },
                correlationId: this.context.correlationId
            };
            Commerce.ViewModelAdapter.navigate("SearchView", parameters);
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectCustomerAffiliationActivity.prototype.execute = function () {
            var self = this;
            var listInputDialog = new Commerce.Controls.ListInputDialog();
            var listItems = [];
            var selectAffiliationOptions;
            listInputDialog.title(Commerce.ViewModelAdapter.getResourceString("string_6306"));
            var affiliationOptions = self.context.affiliations;
            var affiliationsByRecId = new Commerce.Dictionary();
            affiliationOptions.forEach(function (affiliation) {
                var dataItem = {
                    key: affiliation.RecordId,
                    value: affiliation.Name
                };
                listItems.push(dataItem.value);
                affiliationsByRecId.setItem(affiliation.Name, affiliation);
            });
            selectAffiliationOptions = {
                items: listItems
            };
            if (Commerce.ArrayExtensions.hasElements(listItems) === true) {
                listInputDialog.subTitle(Commerce.ViewModelAdapter.getResourceString("string_6305"));
            }
            else {
                listInputDialog.subTitle(Commerce.ViewModelAdapter.getResourceString("string_6309"));
            }
            listInputDialog.show(selectAffiliationOptions, false)
                .on(Commerce.DialogResult.OK, function (selectedItem) {
                listInputDialog.hide().done(function () {
                    self.response = {
                        selectedAffiliation: affiliationsByRecId.getItem(selectedItem)
                    };
                });
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(listInputDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectCustomerLoyaltyCardActivity.prototype.execute = function () {
            var self = this;
            var customerLoyaltyCardDialog = new Commerce.Controls.SelectCustomerLoyaltyCardDialog({
                loyaltyCards: ko.observableArray(self.context.loyaltyCards),
                enableSelect: true
            });
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                customerLoyaltyCardDialog.show({ currentLoyaltyCardId: self.context.currentLoyaltyCardId }, false);
                Activities.ModalDialogHelper.callResponseHandler(self, customerLoyaltyCardDialog, Commerce.DialogResult.OK, asyncResult, function (results) {
                    return {
                        loyaltyCard: self.context.loyaltyCards.filter(function (card) {
                            return card.CardNumber === results.selectedLoyaltyCardId;
                        })[0]
                    };
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var FiscalRegistrationErrorDialog = (function (_super) {
            __extends(FiscalRegistrationErrorDialog, _super);
            function FiscalRegistrationErrorDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "FiscalRegistrationErrorDialog";
                _this.titleValue = ko.observable(null);
                _this.messageValue = ko.observable(null);
                _this.actionLines = ko.observableArray([]);
                _this.allowCancel = false;
                return _this;
            }
            FiscalRegistrationErrorDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this._setDialogState(dialogState);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            FiscalRegistrationErrorDialog.prototype.onShowing = function (dialogState) {
                this.visible(true);
            };
            FiscalRegistrationErrorDialog.prototype.itemClickHandler = function (eventArgs) {
                var response = {
                    action: eventArgs.data.Action
                };
                this.dialogResult.resolve(Commerce.DialogResult.OK, response);
            };
            FiscalRegistrationErrorDialog.prototype.cancelButtonClickHandler = function (result) {
                var response = {
                    action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Cancel
                };
                this.dialogResult.resolve(Commerce.DialogResult.Cancel, response);
            };
            FiscalRegistrationErrorDialog.prototype._setDialogState = function (dialogState) {
                this.titleValue(dialogState.title);
                this.messageValue(dialogState.message);
                this.actionLines(this.getActionLines(dialogState.options));
                this.allowCancel = dialogState.options.allowCancel;
            };
            FiscalRegistrationErrorDialog.prototype.getActionLines = function (errorHandlingOptions) {
                var tileFields = [];
                if (errorHandlingOptions.allowRetry) {
                    tileFields.push({
                        Action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Retry,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_81")
                    });
                }
                if (errorHandlingOptions.allowSkip) {
                    tileFields.push({
                        Action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Skip,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_4952")
                    });
                }
                if (errorHandlingOptions.allowMarkRegistered) {
                    tileFields.push({
                        Action: Commerce.FiscalIntegration.Entities.FiscalRegistrationErrorActionType.MarkAsRegistered,
                        Label: Commerce.ViewModelAdapter.getResourceString("string_4953")
                    });
                }
                return tileFields;
            };
            return FiscalRegistrationErrorDialog;
        }(Controls.ModalDialog));
        Controls.FiscalRegistrationErrorDialog = FiscalRegistrationErrorDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var SelectFiscalRegistrationErrorActionTypeActivity = Commerce.FiscalIntegration.Activities.SelectFiscalRegistrationErrorActionTypeActivity;
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        SelectFiscalRegistrationErrorActionTypeActivity.prototype.execute = function () {
            var self = (this);
            var dialog = new Commerce.Controls.FiscalRegistrationErrorDialog();
            dialog.show(self.context, false)
                .onAny(function (activityResponse) {
                self.response = activityResponse;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(dialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectHardwareStationActivity.prototype.execute = function () {
            var self = this;
            var hardwareStationDialog = new Commerce.Controls.HardwareStationDialog();
            var hardwareStationDialogState;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(self.context)) {
                hardwareStationDialogState = {
                    title: self.context.title,
                    subTitle: self.context.subTitle,
                    isPairedHardwareStationView: self.context.isPairedHardwareStationView
                };
            }
            hardwareStationDialog.show(hardwareStationDialogState, false);
            var result = new Commerce.AsyncResult();
            Activities.ModalDialogHelper.callResponseHandler(self, hardwareStationDialog, Commerce.DialogResult.OK, result);
            return result;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectKitComponentSubstituteActivity.prototype.execute = function () {
            var self = this;
            var activityResult = new Commerce.VoidAsyncResult();
            var substituteSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                self.response = { componentSubstitute: selection };
                activityResult.resolve();
            }, function () {
                self.response = undefined;
                activityResult.resolve();
            });
            var viewOptions = {
                kitMaster: self.context.kitMaster,
                currentComponentId: self.context.currentComponentId,
                slotId: self.context.slotId,
                selectedComponents: self.context.selectedComponents,
                kitComponentSubstitutesSelectionHandler: substituteSelectionHandler
            };
            Commerce.ViewModelAdapter.navigate("KitComponentSubstitutesView", viewOptions);
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectLinkedRefundActivity.prototype.execute = function () {
            var _this = this;
            var dialogState = {
                amountDue: this.context.amountDue,
                tenderType: this.context.tenderType,
                tenderLines: this.context.tenderLines
            };
            var linkedRefundDialog = new Commerce.Controls.LinkedRefundDialog();
            var asyncResult = new Commerce.AsyncResult();
            linkedRefundDialog.show(dialogState, false);
            Activities.ModalDialogHelper.callResponseHandler(this, linkedRefundDialog, Commerce.DialogResult.OK, asyncResult, function (result) {
                return { selectedTenderLine: result };
            });
            return asyncResult.done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            }).map(function () { return void 0; });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectPackingSlipActivity.prototype.execute = function () {
            var self = (this);
            var transferJournalSelectorDialog = new Commerce.Controls.ListInputDialog();
            transferJournalSelectorDialog.title(Commerce.ViewModelAdapter.getResourceString("string_3431"));
            if (Commerce.ArrayExtensions.hasElements(self.context.journalOptions)) {
                transferJournalSelectorDialog.subTitle(Commerce.ViewModelAdapter.getResourceString("string_3430"));
            }
            else {
                transferJournalSelectorDialog.subTitle(Commerce.ViewModelAdapter.getResourceString("string_3440"));
            }
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var dialogOptions = {
                    items: self.context.journalOptions,
                    getDisplayNameCallback: function (journal) { return journal.VoucherId; }
                };
                transferJournalSelectorDialog.show(dialogOptions, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        self.response = { selectedTransferOrderJournal: result };
                    }
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(transferJournalSelectorDialog, true);
            });
            return asyncQueue.run()
                .done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectPackingSlipIdActivity.prototype.execute = function () {
            var self = (this);
            var selectPackingSlipIdDialog = new Commerce.Controls.SelectPackingSlipIdDialog();
            var dialogOptions = {
                salesId: self.context.salesId,
                packingSlipsData: self.context.packingSlipsData
            };
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { selectedPackingSlipData: dialogResult.selectedPackingSlipData };
            };
            selectPackingSlipIdDialog.show(dialogOptions, false);
            Activities.ModalDialogHelper.callResponseHandler(self, selectPackingSlipIdDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectPaymentOptionActivity.prototype.execute = function () {
            var self = this;
            var listInputDialog = new Commerce.Controls.ListInputDialog();
            var listItems = [];
            var selectPaymentOptions;
            var paymentOptions = self.context.paymentOptions;
            listInputDialog.title(self.context.title);
            listInputDialog.subTitle(self.context.message);
            paymentOptions.forEach(function (paymentOption) {
                var dataItem = {
                    key: paymentOption.Action,
                    value: paymentOption.DisplayText
                };
                listItems.push(dataItem.value);
            });
            selectPaymentOptions = {
                items: listItems
            };
            listInputDialog.show(selectPaymentOptions, false)
                .on(Commerce.DialogResult.OK, function (selectedItem) {
                listInputDialog.hide().done(function () {
                    self.response = {
                        selectedAction: paymentOptions.filter(function (paymentOption) {
                            return paymentOption.DisplayText === selectedItem;
                        })[0].Action
                    };
                });
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(listInputDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectProductActivity.prototype.execute = function () {
            var _this = this;
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var productSelectionHandler = new Commerce.CancelableSelectionHandler(function (result) {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                Commerce.ViewModelAdapter.navigateBack(_this.context.correlationId);
                activityResult.resolve({ canceled: false, data: result.simpleProduct });
            }, function () {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                activityResult.resolve({ canceled: true, data: null });
            });
            var parameters = {
                searchText: this.context.searchText,
                searchEntity: Commerce.Client.Entities.SearchViewSearchEntity.Product,
                selectionMode: Commerce.ViewModels.SearchViewSelectionMode.Product,
                productSelectionOptions: {
                    productSelectionHandler: productSelectionHandler,
                    allowKitMasterSelection: false
                },
                correlationId: this.context.correlationId
            };
            Commerce.ViewModelAdapter.navigate("SearchView", parameters);
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectSalesLinesActivity.prototype.execute = function () {
            var _this = this;
            var dialogOptions = {
                selectionMode: this.context.allowMultipleLineSelection ? Commerce.Controls.DataList.SelectionMode.MultiSelect : Commerce.Controls.DataList.SelectionMode.SingleSelect
            };
            var selectSalesLinesDialog = new Commerce.Controls.SelectSalesLinesDialog(dialogOptions);
            var salesLinesForDisplay = this.context.salesLineProductPairs
                .map(function (pair) {
                return new Commerce.ViewModels.SalesLineForDisplay(pair.salesLine, pair.product);
            });
            var dialogState = {
                salesLines: salesLinesForDisplay,
                title: this.context.title,
                subtitle: this.context.subtitle
            };
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { selectedSalesLines: dialogResult.selectedSalesLines };
            };
            selectSalesLinesDialog.show(dialogState, false);
            Activities.ModalDialogHelper.callResponseHandler(this, selectSalesLinesDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectSalesLinesForPickUpActivity.prototype.execute = function () {
            var asyncResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var salesLinesSelectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                Commerce.ViewModelAdapter.navigateBack();
                asyncResult.resolve({ canceled: false, data: selection });
            }, function () {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                asyncResult.resolve({ canceled: true, data: null });
            });
            var pickUpOptions = {
                salesId: this.context.salesId,
                salesLinesSelectionHandler: salesLinesSelectionHandler
            };
            Commerce.ViewModelAdapter.navigate("PickUpView", pickUpOptions);
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectStoreActivity.prototype.execute = function () {
            var self = (this);
            var storeSelectorDialog = new Commerce.Controls.SelectStoreDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var dialogOptions = {
                    stores: self.context.storeOptions
                };
                storeSelectorDialog.show(dialogOptions, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        self.response = { selectedStore: result.selectedOrgUnit };
                    }
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(storeSelectorDialog, true);
            });
            return asyncQueue.run()
                .done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectTaxOverrideActivity.prototype.execute = function () {
            var _this = this;
            var taxOverrideDialog = new Commerce.Controls.TaxOverrideDialog();
            var dialogState = {
                overrideType: this.context.overrideType, taxOverrides: this.context.taxOverrides
            };
            taxOverrideDialog.show(dialogState, false)
                .on(Commerce.DialogResult.OK, function (result) {
                _this.response = { taxOverride: result };
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(taxOverrideDialog);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectTenderTypeActivity.prototype.execute = function () {
            var _this = this;
            var listInputDialog = new Commerce.Controls.ListInputDialog();
            var listItems = [];
            var selectTenderTypeOptions;
            listInputDialog.title(this.context.title);
            listInputDialog.subTitle(this.context.message);
            var tenderTypeOptions = this.context.tenderTypes;
            var tenderByTypeId = new Commerce.Dictionary();
            tenderTypeOptions = tenderTypeOptions.slice().sort(function (first, second) {
                var firstNum = parseInt(first.TenderTypeId, 10);
                var secondNum = parseInt(second.TenderTypeId, 10);
                return firstNum - secondNum;
            });
            tenderTypeOptions.forEach(function (tenderType) {
                var dataItem = {
                    key: tenderType.TenderTypeId,
                    value: tenderType.Name
                };
                listItems.push(dataItem.value);
                tenderByTypeId.setItem(tenderType.Name, tenderType);
            });
            selectTenderTypeOptions = {
                items: listItems
            };
            listInputDialog.show(selectTenderTypeOptions, false)
                .on(Commerce.DialogResult.OK, function (selectedItem) {
                listInputDialog.hide().done(function () {
                    _this.response = {
                        tenderType: tenderByTypeId.getItem(selectedItem)
                    };
                });
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(listInputDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectVariantActivity.prototype.execute = function () {
            var self = this;
            var variantDialog = new Commerce.Controls.SelectVariantDialog();
            var dialogState = {
                product: self.context.product,
                preLoadedDimensionDetails: self.context.preLoadedDimensionDetails
            };
            var result = new Commerce.AsyncResult();
            var updateResponse = function (dialogResult) {
                return { selectedDimensions: dialogResult.selectedDimensions };
            };
            variantDialog.show(dialogState, false);
            Activities.ModalDialogHelper.callResponseHandler(self, variantDialog, Commerce.DialogResult.OK, result, updateResponse);
            return result.done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectWarehouseActivity.prototype.execute = function () {
            var _this = this;
            var selectWarehouseDialog = new Commerce.Controls.SelectWarehouseDialog();
            selectWarehouseDialog.show(null, false)
                .on(Commerce.DialogResult.OK, function (result) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                    _this.response = { selectedWarehouse: result.selectedWarehouse };
                }
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(selectWarehouseDialog, true)
                .done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SelectWarehouseLocationActivity.prototype.execute = function () {
            var _this = this;
            var selectWarehouseLocationDialog = new Commerce.Controls.SelectWarehouseLocationDialog();
            selectWarehouseLocationDialog.show(null, false)
                .on(Commerce.DialogResult.OK, function (result) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                    _this.response = { selectedWarehouseLocation: result.selectedWarehouseLocation };
                }
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(selectWarehouseLocationDialog, true)
                .done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TransferOrderInputDialogOperationMode;
        (function (TransferOrderInputDialogOperationMode) {
            TransferOrderInputDialogOperationMode[TransferOrderInputDialogOperationMode["Create"] = 1] = "Create";
            TransferOrderInputDialogOperationMode[TransferOrderInputDialogOperationMode["Update"] = 2] = "Update";
            TransferOrderInputDialogOperationMode[TransferOrderInputDialogOperationMode["View"] = 3] = "View";
        })(TransferOrderInputDialogOperationMode = Controls.TransferOrderInputDialogOperationMode || (Controls.TransferOrderInputDialogOperationMode = {}));
        var TransferOrderInputDialog = (function (_super) {
            __extends(TransferOrderInputDialog, _super);
            function TransferOrderInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "TransferOrderInputDialog";
                var dateNow = new Date();
                _this.shipDate = ko.observable(dateNow);
                _this.receiveDate = ko.observable(dateNow);
                _this.fromLocation = ko.observable({ inventLocationId: Commerce.StringExtensions.EMPTY, warehouseName: Commerce.StringExtensions.EMPTY });
                _this.toLocation = ko.observable({ inventLocationId: Commerce.StringExtensions.EMPTY, warehouseName: Commerce.StringExtensions.EMPTY });
                _this.deliveryModes = ko.observableArray([
                    { Code: Commerce.StringExtensions.EMPTY, Description: Commerce.StringExtensions.EMPTY, RecordId: 0 }
                ]);
                _this.selectedDeliveryModeId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.enableDateControls = ko.observable(true);
                _this.okButtonAllowed = ko.observable(false);
                _this.enableDateControls = ko.observable(false);
                _this.canEditDeliveryMode = ko.observable(false);
                _this.okButtonLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_3398"));
                _this.cancelButtonLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_76"));
                _this._dialogOperationMode = ko.observable(null);
                _this._orderType = ko.observable(null);
                _this._transferOrderInputDialogOption = null;
                _this.disableOKButton = ko.computed(function () {
                    return Commerce.ObjectExtensions.isNullOrUndefined(_this.fromLocation()) ||
                        Commerce.StringExtensions.isNullOrWhitespace(_this.fromLocation().inventLocationId) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(_this.toLocation()) ||
                        Commerce.StringExtensions.isNullOrWhitespace(_this.toLocation().inventLocationId);
                }, _this);
                _this.canEditToLocation = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this._dialogOperationMode()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this._orderType()) &&
                        _this._dialogOperationMode() === TransferOrderInputDialogOperationMode.Create &&
                        _this._orderType() !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn);
                }, _this);
                _this.canEditFromLocation = ko.computed(function () {
                    return (!Commerce.ObjectExtensions.isNullOrUndefined(_this._dialogOperationMode()) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(_this._orderType()) &&
                        _this._dialogOperationMode() === TransferOrderInputDialogOperationMode.Create &&
                        _this._orderType() !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut);
                }, _this);
                _this.isFromLocationSelected = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.fromLocation()) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.fromLocation().inventLocationId);
                }, _this);
                _this.isToLocationSelected = ko.computed(function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(_this.toLocation()) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.toLocation().inventLocationId);
                }, _this);
                return _this;
            }
            TransferOrderInputDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    this.fromLocation(dialogState.fromLocation);
                    this.toLocation(dialogState.toLocation);
                    this.shipDate(dialogState.shipDate);
                    this.receiveDate(dialogState.receiveDate);
                    this._dialogOperationMode(dialogState.mode);
                    this._orderType(dialogState.orderType);
                    if (dialogState.mode === TransferOrderInputDialogOperationMode.Create) {
                        this.okButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_3398"));
                        this.cancelButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_76"));
                        this._populateDeliveryOptions(dialogState);
                        this.enableDateControls(true);
                        this.okButtonAllowed(true);
                        this.canEditDeliveryMode(true);
                    }
                    else if (dialogState.mode === TransferOrderInputDialogOperationMode.Update) {
                        this.okButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_3424"));
                        this.cancelButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_76"));
                        this._populateDeliveryOptions(dialogState);
                        this.selectedDeliveryModeId(dialogState.deliveryModeId);
                        this.enableDateControls(true);
                        this.okButtonAllowed(true);
                        this.canEditDeliveryMode(true);
                    }
                    else if (dialogState.mode === TransferOrderInputDialogOperationMode.View) {
                        this.okButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_75"));
                        this.cancelButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_3425"));
                        this.deliveryModes(dialogState.deliveryModes.filter(function (deliveryMode) {
                            return deliveryMode.Code === dialogState.deliveryModeId;
                        }));
                        this.enableDateControls(false);
                        this.okButtonAllowed(false);
                        this.canEditDeliveryMode(false);
                    }
                    this._transferOrderInputDialogOption = dialogState;
                    this.title(this._getTitleString());
                }
                this.visible(true);
            };
            TransferOrderInputDialog.prototype.fromLocationClickHandler = function () {
                var _this = this;
                if ((this._transferOrderInputDialogOption.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferOut) &&
                    this._transferOrderInputDialogOption.mode === TransferOrderInputDialogOperationMode.Create) {
                    var activity_1 = new Commerce.Activities.SelectWarehouseActivity();
                    activity_1.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity_1.response)) {
                            var selectedWarehouse = activity_1.response.selectedWarehouse;
                            _this.fromLocation({
                                inventLocationId: selectedWarehouse.InventLocation,
                                inventLocationName: selectedWarehouse.Name
                            });
                        }
                    });
                }
            };
            TransferOrderInputDialog.prototype.toLocationClickHandler = function () {
                var _this = this;
                if ((this._transferOrderInputDialogOption.orderType !== Commerce.Proxy.Entities.PurchaseTransferOrderType.TransferIn) &&
                    this._transferOrderInputDialogOption.mode === TransferOrderInputDialogOperationMode.Create) {
                    var activity_2 = new Commerce.Activities.SelectWarehouseActivity();
                    activity_2.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity_2.response)) {
                            var selectedWarehouse = activity_2.response.selectedWarehouse;
                            _this.toLocation({
                                inventLocationId: selectedWarehouse.InventLocation,
                                inventLocationName: selectedWarehouse.Name
                            });
                        }
                    });
                }
            };
            TransferOrderInputDialog.prototype.buttonClickHandler = function (buttonId) {
                var _this = this;
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        if (this._transferOrderInputDialogOption.mode !== TransferOrderInputDialogOperationMode.View) {
                            this.indeterminateWaitVisible(true);
                            this._validateInputs()
                                .done(function () {
                                _this.dialogResult.resolve(Commerce.DialogResult.OK, {
                                    fromLocation: _this.fromLocation(),
                                    toLocation: _this.toLocation(),
                                    shipDate: _this._getSelectedDate(TransferOrderInputDialog.SHIP_DATE_ELEMENT_ID),
                                    receiveDate: _this._getSelectedDate(TransferOrderInputDialog.RECEIVE_DATE_ELEMENT_ID),
                                    deliveryModeId: _this.selectedDeliveryModeId()
                                });
                            })
                                .fail(function (errors) {
                                Commerce.NotificationHandler.displayClientErrors(errors, "string_3416");
                            }).always(function () {
                                _this.indeterminateWaitVisible(false);
                            });
                        }
                        else {
                            this.dialogResult.resolve(Commerce.DialogResult.OK);
                        }
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            TransferOrderInputDialog.prototype._validateInputs = function () {
                var shipDate = this._getSelectedDate(TransferOrderInputDialog.SHIP_DATE_ELEMENT_ID);
                var receiveDate = this._getSelectedDate(TransferOrderInputDialog.RECEIVE_DATE_ELEMENT_ID);
                var errors = [];
                if (Commerce.StringExtensions.isNullOrWhitespace(this.fromLocation().inventLocationId)) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3415"));
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(this.toLocation().inventLocationId)) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3411"));
                }
                if (this._transferOrderInputDialogOption.mode === TransferOrderInputDialogOperationMode.Create) {
                    if (!Commerce.DateExtensions.isTodayOrFutureDate(shipDate)) {
                        errors.push(new Commerce.Proxy.Entities.Error("string_3412"));
                    }
                    if (!Commerce.DateExtensions.isTodayOrFutureDate(receiveDate)) {
                        errors.push(new Commerce.Proxy.Entities.Error("string_3413"));
                    }
                }
                if ((receiveDate.getTime() - shipDate.getTime()) < 0) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_3414"));
                }
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            TransferOrderInputDialog.prototype._getSelectedDate = function (elementId) {
                return Commerce.DateExtensions.getDate(document.getElementById(elementId).winControl.current);
            };
            TransferOrderInputDialog.prototype._getTitleString = function () {
                var titleString;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._transferOrderInputDialogOption) &&
                    !Commerce.StringExtensions.isNullOrWhitespace(this._transferOrderInputDialogOption.dialogTitle)) {
                    titleString = this._transferOrderInputDialogOption.dialogTitle;
                }
                else {
                    titleString = "string_3888";
                }
                return Commerce.ViewModelAdapter.getResourceString(titleString);
            };
            TransferOrderInputDialog.prototype._populateDeliveryOptions = function (dialogState) {
                var _this = this;
                dialogState.deliveryModes.forEach(function (deliveryMode) {
                    _this.deliveryModes.push(deliveryMode);
                });
            };
            TransferOrderInputDialog.SHIP_DATE_ELEMENT_ID = "shipDate";
            TransferOrderInputDialog.RECEIVE_DATE_ELEMENT_ID = "receiveDate";
            return TransferOrderInputDialog;
        }(Controls.ModalDialog));
        Controls.TransferOrderInputDialog = TransferOrderInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.SetTransferOrderHeaderActivity.prototype.execute = function () {
            var self = (this);
            var transferOrderInputDialog = new Commerce.Controls.TransferOrderInputDialog();
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var order = self.context.transferOrderHeader;
                var dialogTitle = Commerce.StringExtensions.EMPTY;
                switch (self.context.mode) {
                    case 1:
                        dialogTitle = "string_3890";
                        break;
                    case 2:
                    case 3:
                        dialogTitle = order.OrderId;
                        break;
                    default:
                        break;
                }
                var dialogOptions = {
                    orderType: order.OrderTypeValue,
                    fromLocation: {
                        inventLocationId: order.InventLocationIdFrom,
                        inventLocationName: self.context.inventLocationFrom.Name
                    },
                    toLocation: {
                        inventLocationId: order.InventLocationIdTo,
                        inventLocationName: self.context.inventLocationTo.Name
                    },
                    receiveDate: order.ReceiveDate,
                    shipDate: order.ShipDate,
                    dialogTitle: dialogTitle,
                    mode: self.context.mode,
                    deliveryModeId: order.DeliveryModeId,
                    deliveryModes: Commerce.ApplicationContext.Instance.deliveryOptions
                };
                transferOrderInputDialog.show(dialogOptions, false)
                    .on(Commerce.DialogResult.OK, function (result) {
                    self.response = {
                        transferOrderHeader: {
                            OrderId: order.OrderId,
                            InventLocationIdFrom: result.fromLocation.inventLocationId,
                            InventLocationIdTo: result.toLocation.inventLocationId,
                            ShipDate: result.shipDate,
                            ReceiveDate: result.receiveDate,
                            OrderTypeValue: order.OrderTypeValue,
                            DeliveryModeId: result.deliveryModeId
                        }
                    };
                });
                return Activities.ModalDialogHelper.toVoidAsyncResult(transferOrderInputDialog, true);
            });
            return asyncQueue.run().done(function (result) {
                if (result.canceled) {
                    self.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyExpiringPointsDialog = (function (_super) {
            __extends(LoyaltyExpiringPointsDialog, _super);
            function LoyaltyExpiringPointsDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "LoyaltyExpiringPointsDialog";
                _this.title(options.rewardPointId);
                _this.subTitle(Commerce.StringExtensions.EMPTY);
                var viewModelOptions = {
                    correlationId: options.correlationId,
                    loyaltyCardId: options.loyaltyCardId,
                    rewardPointId: options.rewardPointId
                };
                _this.viewModel = new Commerce.ViewModels.LoyaltyExpiringPointsDialogViewModel(viewModelOptions);
                _this.expiringPoints = options.expiringPoints;
                _this.loyaltyBalanceLabel = Commerce.ViewModelAdapter.getResourceString(Commerce.PaymentHelper.loyaltyBalanceLabel);
                _this.currentDate = new Date();
                return _this;
            }
            LoyaltyExpiringPointsDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this.visible(true);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            LoyaltyExpiringPointsDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Cancel");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Close");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            LoyaltyExpiringPointsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyExpiringPointsDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyExpiringPointsDialog = LoyaltyExpiringPointsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ShowLoyaltyExpiringPointsActivity.prototype.execute = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                throw new Error("Invalid options passed: GetLoyaltyCardBalanceActivity was passed invalid options");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(this.context.loyaltyCardId)) {
                throw new Error("Invalid options passed: ShowLoyaltyExpiringPointsActivity was passed invalid loyalty card id");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(this.context.rewardPointId)) {
                throw new Error("Invalid options passed: ShowLoyaltyExpiringPointsActivity was passed invalid reward point id");
            }
            var dialogState = {
                correlationId: this.context.correlationId,
                loyaltyCardId: this.context.loyaltyCardId,
                rewardPointId: this.context.rewardPointId,
                expiringPoints: this.context.expiringPoints
            };
            var loyaltyExpiringPointsDialog = new Commerce.Controls.LoyaltyExpiringPointsDialog(dialogState);
            loyaltyExpiringPointsDialog.show(null, true)
                .onAny(function () {
                _this.response = null;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(loyaltyExpiringPointsDialog, true)
                .done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyTransactionsDialog = (function (_super) {
            __extends(LoyaltyTransactionsDialog, _super);
            function LoyaltyTransactionsDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "LoyaltyTransactionsDialog";
                _this.title(options.rewardPointId);
                _this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_286"));
                var viewModelOptions = {
                    correlationId: options.correlationId,
                    loyaltyCardId: options.loyaltyCardId,
                    rewardPointId: options.rewardPointId
                };
                _this.viewModel = new Commerce.ViewModels.LoyaltyTransactionsDialogViewModel(viewModelOptions);
                _this.totalAvailableBalance = options.totalAvailableBalance;
                _this.loyaltyBalanceLabel = Commerce.ViewModelAdapter.getResourceString(Commerce.PaymentHelper.loyaltyBalanceLabel);
                return _this;
            }
            LoyaltyTransactionsDialog.prototype.show = function (dialogState, hideOnResult) {
                if (hideOnResult === void 0) { hideOnResult = true; }
                this.visible(true);
                return _super.prototype.show.call(this, dialogState, hideOnResult);
            };
            LoyaltyTransactionsDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Cancel");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "LoyaltyExpiringPointsDialog", "Close");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            LoyaltyTransactionsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyTransactionsDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyTransactionsDialog = LoyaltyTransactionsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ShowLoyaltyTransactionsActivity.prototype.execute = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                throw new Error("Invalid options passed: GetLoyaltyCardBalanceActivity was passed invalid options");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(this.context.loyaltyCardId)) {
                throw new Error("Invalid options passed: ShowLoyaltyExpiringPointsActivity was passed invalid loyalty card id");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(this.context.rewardPointId)) {
                throw new Error("Invalid options passed: ShowLoyaltyExpiringPointsActivity was passed invalid reward point id");
            }
            var dialogState = {
                correlationId: this.context.correlationId,
                loyaltyCardId: this.context.loyaltyCardId,
                rewardPointId: this.context.rewardPointId,
                totalAvailableBalance: this.context.totalAvailableBalance,
            };
            var loyaltyTransactionsDialog = new Commerce.Controls.LoyaltyTransactionsDialog(dialogState);
            loyaltyTransactionsDialog.show(null, false)
                .onAny(function () {
                _this.response = null;
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(loyaltyTransactionsDialog, true)
                .done(function (result) {
                if (result.canceled) {
                    _this.response = null;
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ShowNoDiscountOnPriceOverriddenWarningActivity.prototype.execute = function () {
            var _this = this;
            var confirmAddDiscounts = "AddDiscounts";
            var cancelAddDiscounts = "Cancel";
            var buttons = [
                {
                    id: "YesButton",
                    label: Commerce.ViewModelAdapter.getResourceString("string_77"),
                    operationId: confirmAddDiscounts
                },
                {
                    id: "NoButton",
                    label: Commerce.ViewModelAdapter.getResourceString("string_78"),
                    operationId: cancelAddDiscounts
                }
            ];
            var messageDialog = new Commerce.Controls.MessageDialog();
            var dialogState = {
                content: Commerce.ViewModelAdapter.getResourceString("string_5626"),
                buttons: buttons,
                showCloseX: true,
                hideOnEscape: false
            };
            messageDialog.show(dialogState).onAny(function (result, dialogResult) {
                if (result === confirmAddDiscounts) {
                    _this.response = {};
                }
            });
            return Activities.ModalDialogHelper.toVoidAsyncResult(messageDialog, true);
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.TenderCountingActivity.prototype.execute = function () {
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var selectionHandler = new Commerce.CancelableSelectionHandler(function (selection) {
                Commerce.ViewModelAdapter.navigateBack();
                activityResult.resolve({ canceled: false, data: selection });
            }, function () {
                Commerce.ViewModelAdapter.collapse(originalViewName);
                activityResult.resolve({ canceled: true, data: null });
            });
            var viewOptions = {
                transactionType: this.context.tenderDropAndDeclareType,
                shift: this.context.shift,
                reasonCodeLines: this.context.reasonCodeLines,
                selectionHandler: selectionHandler
            };
            Commerce.ViewModelAdapter.navigate("TenderCountingView", viewOptions);
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.TokenizePaymentCardActivity.prototype.execute = function () {
            var activityResult = new Commerce.AsyncResult();
            var originalViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var onPaymentResultAvailableAsync = function (paymentViewResult) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentViewResult)) {
                    Commerce.ViewModelAdapter.navigateBack();
                    activityResult.resolve({ canceled: false, data: paymentViewResult.paymentResult });
                }
                else {
                    Commerce.ViewModelAdapter.collapse(originalViewName);
                    activityResult.resolve({ canceled: true, data: null });
                }
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            var cardPaymentAcceptPoint = this.context.cardPaymentAcceptPoint;
            var viewOptions = {
                correlationId: this.context.correlationId,
                tokenizeCard: true,
                onPaymentResultAvailableAsync: onPaymentResultAvailableAsync,
                tenderType: this.context.tenderType,
                loyaltyCardId: Commerce.Session.instance.cart.LoyaltyCardId,
                paymentAmount: Commerce.CartHelper.getEstimatedRemainingBalance,
                cardPaymentAcceptPageUrl: cardPaymentAcceptPoint ? cardPaymentAcceptPoint.AcceptPageUrl : undefined,
                cardPaymentAcceptPageSubmitUrl: cardPaymentAcceptPoint ? cardPaymentAcceptPoint.AcceptPageSubmitUrl : undefined,
                cardPaymentAcceptMessageOrigin: cardPaymentAcceptPoint ? cardPaymentAcceptPoint.MessageOrigin : undefined,
                paymentCardInfo: undefined,
                paymentCardSource: undefined
            };
            Commerce.ViewModelAdapter.navigate("PaymentView", viewOptions);
            return activityResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.UserInfoActivity.prototype.execute = function () {
            var self = (this);
            var userInfoDialog = new Commerce.Controls.UserInfoDialog();
            var userInfoDialogState;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(self.context)) {
                userInfoDialogState = {
                    title: self.context.title, subTitle: self.context.subTitle
                };
            }
            userInfoDialog.show(userInfoDialogState, false);
            var result = new Commerce.AsyncResult();
            Activities.ModalDialogHelper.callResponseHandler(self, userInfoDialog, Commerce.DialogResult.OK, result);
            return result;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ValidateSignatureActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            var signatureCaptureDialog = new Commerce.Controls.SignatureCaptureDialog();
            var signatureCaptureDialogState = {
                verifyOnly: true,
                allowSkip: false,
                signatureData: null,
                paymentAmount: 0
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                signatureCaptureDialogState.signatureData = context.signature;
                signatureCaptureDialogState.paymentAmount = context.paymentAmount;
            }
            var asyncResult = new Commerce.VoidAsyncResult();
            signatureCaptureDialog.show(signatureCaptureDialogState, true)
                .on(Commerce.DialogResult.OK, function (signature) {
                self.response = {
                    result: Activities.SignatureActivityResultEnum.OK
                };
                asyncResult.resolve();
            }).on(Commerce.DialogResult.No, function () {
                self.response = {
                    result: Activities.SignatureActivityResultEnum.Cancelled
                };
                asyncResult.resolve();
            }).on(Commerce.DialogResult.Cancel, function () {
                self.response = {
                    result: Activities.SignatureActivityResultEnum.Cancelled
                };
                asyncResult.resolve();
            }).onError(function (errors) {
                asyncResult.reject(errors);
            });
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.ValidateSignatureInPOSActivity.prototype.execute = function () {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this.context)) {
                throw new Error("Invalid options passed: ValidateSignatureInPOSActivity was passed invalid options.");
            }
            else if (!Commerce.ObjectExtensions.isBoolean(this.context.allowRecapture)) {
                throw new Error("Invalid options passed: ValidateSignatureInPOSActivity was passed invalid data for allowRecapture.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(this.context.correlationId)) {
                throw new Error("Invalid options passed: ValidateSignatureInPOSActivity was passed invalid correlationId.");
            }
            var signatureDialog = new Commerce.Controls.SignatureDialog();
            var signatureDialogState = {
                allowRecapture: this.context.allowRecapture,
                correlationId: this.context.correlationId,
                signatureData: this.context.signature,
                verifyOnly: true
            };
            Commerce.RetailLogger.posValidateSignatureInPOSActivityStarted(signatureDialogState.correlationId);
            var asyncResult = new Commerce.VoidAsyncResult();
            signatureDialog.show(signatureDialogState, true)
                .on(Commerce.DialogResult.OK, function (result) {
                _this.response = {
                    status: Activities.SignatureActivityResult.OK
                };
                Commerce.RetailLogger.posValidateSignatureInPOSActivitySucceeded(signatureDialogState.correlationId, "OK");
                asyncResult.resolve();
            }).on(Commerce.DialogResult.No, function () {
                _this.response = {
                    status: Activities.SignatureActivityResult.Recapture
                };
                Commerce.RetailLogger.posValidateSignatureInPOSActivitySucceeded(signatureDialogState.correlationId, "Recapture");
                asyncResult.resolve();
            }).on(Commerce.DialogResult.Cancel, function () {
                _this.response = {
                    status: Activities.SignatureActivityResult.Cancelled
                };
                Commerce.RetailLogger.posValidateSignatureInPOSActivitySucceeded(signatureDialogState.correlationId, "Skip");
                asyncResult.resolve();
            }).onError(function (errors) {
                Commerce.RetailLogger.posValidateSignatureInPOSActivitySucceeded(signatureDialogState.correlationId, Commerce.ErrorHelper.serializeError(errors));
                signatureDialog.hide().always(function () { asyncResult.reject(errors); });
            });
            return asyncResult;
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SignatureDeviceDialog = (function (_super) {
            __extends(SignatureDeviceDialog, _super);
            function SignatureDeviceDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SignatureDeviceDialog";
                _this._afterShowEventName = "AfterShowEvent";
                _this.allowSkip = ko.observable(false);
                _this.allowGetSignature = ko.observable(false);
                _this._afterShowEventName = _this._afterShowEventName + "_" + performance.now().toString();
                return _this;
            }
            SignatureDeviceDialog.prototype.onShowing = function (dialogState) {
                if (!dialogState) {
                    dialogState = {
                        allowSkip: false,
                        allowGetSignature: false,
                        afterShow: null
                    };
                }
                this.allowSkip(dialogState.allowSkip);
                this.allowGetSignature(dialogState.allowGetSignature);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.afterShow)) {
                    Commerce.EventProxy.Instance.addCustomEventHandler(this.element, this._afterShowEventName, dialogState.afterShow);
                }
                this.dialogCloseAction = null;
                this.visible(true);
            };
            SignatureDeviceDialog.prototype.afterShow = function () {
                Commerce.EventProxy.Instance.raiseCustomEvent(this._afterShowEventName, undefined);
            };
            SignatureDeviceDialog.prototype.destroy = function () {
                if (document.body === this.element.parentNode) {
                    document.body.removeChild(this.element);
                }
            };
            SignatureDeviceDialog.prototype.signatureDeviceDialogButtonClickHandler = function (operationId) {
                switch (operationId) {
                    case Commerce.Controls.Dialog.OperationIds.NO_BUTTON_CLICK:
                        this.dialogCloseAction = Commerce.DialogResult.No;
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogCloseAction = Commerce.DialogResult.OK;
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogCloseAction = Commerce.DialogResult.Cancel;
                        break;
                }
                if (this.dialogCloseAction) {
                    this.dialogResult.resolve(this.dialogCloseAction);
                }
            };
            return SignatureDeviceDialog;
        }(Controls.ModalDialog));
        Controls.SignatureDeviceDialog = SignatureDeviceDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        Activities.WaitForSignatureActivity.prototype.execute = function () {
            var self = (this);
            var context = self.context;
            self.response = null;
            var signatureDeviceDialog = new Commerce.Controls.SignatureDeviceDialog();
            var signatureDeviceDialogState = {
                allowSkip: false,
                allowGetSignature: true,
                afterShow: null
            };
            var asyncResult = new Commerce.VoidAsyncResult();
            self.cancel = self.cancel.bind(self, asyncResult, signatureDeviceDialog);
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                signatureDeviceDialogState.allowSkip = context.allowSkip;
                signatureDeviceDialogState.afterShow = context.onReady;
            }
            var resolveResponse = function (asyncResult, signatureActivityResult) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(asyncResult)) {
                    self.response = {
                        result: signatureActivityResult
                    };
                    asyncResult.resolve();
                    self.cancel = self.cancel.bind(self, null, null);
                }
            };
            signatureDeviceDialog.show(signatureDeviceDialogState, true)
                .on(Commerce.DialogResult.OK, function (signature) {
                resolveResponse(asyncResult, Activities.SignatureActivityResultEnum.OK);
            }).on(Commerce.DialogResult.No, function () {
                resolveResponse(asyncResult, Activities.SignatureActivityResultEnum.Skipped);
            }).on(Commerce.DialogResult.Cancel, function () {
                resolveResponse(asyncResult, Activities.SignatureActivityResultEnum.Cancelled);
            }).onError(function (errors) {
                asyncResult.reject(errors);
            });
            return asyncResult;
        };
        Activities.WaitForSignatureActivity.prototype.cancel = function (asyncResult, signatureDeviceDialog) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.ObjectExtensions.isNullOrUndefined(signatureDeviceDialog)) {
                asyncQueue.enqueue(function () {
                    signatureDeviceDialog.destroy();
                    return Commerce.VoidAsyncResult.createResolved();
                });
            }
            var self = (this);
            return asyncQueue.run().always(function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(asyncResult)) {
                    self.response = {
                        result: Activities.SignatureActivityResultEnum.ActivityCancelled
                    };
                    asyncResult.resolve();
                }
            });
        };
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DialogClientRequestHandlerBase = (function () {
        function DialogClientRequestHandlerBase() {
        }
        DialogClientRequestHandlerBase.prototype.handleDialogResult = function (modalDialog, onBeforeCloseCallback) {
            var _this = this;
            var asyncResult = new Commerce.AsyncResult();
            modalDialog.dialogResult.onAny(function (output, dialogResult) {
                var result = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(output) && Commerce.ObjectExtensions.isFunction(_this.convertToDialogResult)) {
                    result = _this.convertToDialogResult(output);
                }
                asyncResult.resolveOrRejectOn(_this._handleDialogResultInternal(modalDialog, onBeforeCloseCallback, result));
            }).onError(function (errors) {
                modalDialog.hide().always(function () { asyncResult.reject(errors); });
            });
            return asyncResult;
        };
        DialogClientRequestHandlerBase.prototype._handleDialogResultInternal = function (modalDialog, onBeforeCloseCallback, result) {
            var _this = this;
            var asyncResult = new Commerce.AsyncResult();
            var isCancelled = Commerce.ObjectExtensions.isNullOrUndefined(result) ? true : false;
            if (Commerce.ObjectExtensions.isFunction(onBeforeCloseCallback)) {
                modalDialog.indeterminateWaitVisible(true);
                Commerce.AsyncResult.fromPromise(onBeforeCloseCallback({ canceled: isCancelled, data: result }))
                    .done(function () {
                    onBeforeCloseCallback = null;
                    modalDialog.hide().done(function () {
                        asyncResult.resolve({ canceled: isCancelled, data: result });
                    });
                }).fail(function (reason) {
                    modalDialog.indeterminateWaitVisible(false);
                    modalDialog.clearResult();
                    if (reason instanceof Commerce.Client.Entities.ExtensionError) {
                        if (Commerce.Session.instance.isSessionStateValid) {
                            if (!Commerce.StringExtensions.isNullOrWhitespace(reason.localizedMessage)) {
                                Commerce.NotificationHandler.displayClientErrors([new Commerce.Client.Entities.PosExtensionError(reason)])
                                    .done(function () {
                                    if (Commerce.ObjectExtensions.isFunction(_this.updateDialogOnError)) {
                                        _this.updateDialogOnError(reason, modalDialog);
                                    }
                                    modalDialog.focus();
                                });
                            }
                            asyncResult.resolveOrRejectOn(_this.handleDialogResult(modalDialog, onBeforeCloseCallback));
                        }
                        else {
                            onBeforeCloseCallback = null;
                            modalDialog.hide().done(function () {
                                asyncResult.resolve({ canceled: true, data: null });
                            });
                        }
                    }
                    else {
                        asyncResult.resolveOrRejectOn(_this.handleDialogResult(modalDialog, onBeforeCloseCallback));
                    }
                });
            }
            else {
                modalDialog.hide().done(function () {
                    asyncResult.resolve({ canceled: isCancelled, data: result });
                });
            }
            return asyncResult;
        };
        return DialogClientRequestHandlerBase;
    }());
    Commerce.DialogClientRequestHandlerBase = DialogClientRequestHandlerBase;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowAlphanumericInputDialogClientRequestHandler = (function (_super) {
        __extends(ShowAlphanumericInputDialogClientRequestHandler, _super);
        function ShowAlphanumericInputDialogClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShowAlphanumericInputDialogClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ShowAlphanumericInputDialogClientRequest;
        };
        ShowAlphanumericInputDialogClientRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                var numpadDialog = new Commerce.Controls.NumpadDialog();
                var numpadDialogOptions;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(request.options)) {
                    numpadDialogOptions = {
                        numpadDialogType: Commerce.Controls.NumpadDialogTypes.Alphanumeric,
                        enableMagneticStripReader: request.options.enableMagneticStripReader,
                        enableBarcodeScanner: request.options.enableBarcodeScanner,
                        numpadLabel: request.options.numPadLabel
                    };
                    numpadDialog.title(request.options.title);
                    numpadDialog.subTitle(request.options.subTitle);
                    numpadDialogOptions.value = request.options.defaultValue;
                }
                numpadDialog.show(numpadDialogOptions, false);
                _this.handleDialogResult(numpadDialog, request.options.onBeforeClose)
                    .done(function (result) {
                    var response = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        response = new Commerce.ShowAlphanumericInputDialogClientResponse({
                            value: result.data.value
                        });
                    }
                    resolve({ canceled: result.canceled, data: response });
                }).fail(function (errors) { reject(errors); });
            });
            return promise;
        };
        ShowAlphanumericInputDialogClientRequestHandler.prototype.convertToDialogResult = function (result) {
            var dialogResult = {
                value: result.value
            };
            return dialogResult;
        };
        ShowAlphanumericInputDialogClientRequestHandler.prototype.updateDialogOnError = function (error, numpadDialog) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(error.newDialogValue)) {
                numpadDialog.setTextValue(error.newDialogValue);
            }
        };
        return ShowAlphanumericInputDialogClientRequestHandler;
    }(Commerce.DialogClientRequestHandlerBase));
    Commerce.ShowAlphanumericInputDialogClientRequestHandler = ShowAlphanumericInputDialogClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowListInputDialogClientRequestHandler = (function (_super) {
        __extends(ShowListInputDialogClientRequestHandler, _super);
        function ShowListInputDialogClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShowListInputDialogClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ShowListInputDialogClientRequest;
        };
        ShowListInputDialogClientRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                var listInputDialog = new Commerce.Controls.ListInputDialog();
                var listInputDialogOptions = {
                    title: request.options.title,
                    subTitle: request.options.subTitle,
                    items: request.options.items,
                    getDisplayNameCallback: _this._getDisplayNameCallback.bind(_this)
                };
                listInputDialog.show(listInputDialogOptions, false);
                _this.handleDialogResult(listInputDialog, request.options.onBeforeClose)
                    .done(function (result) {
                    var response = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        response = new Commerce.ShowListInputDialogClientResponse({
                            value: result.data.value
                        });
                    }
                    resolve({ canceled: result.canceled, data: response });
                }).fail(function (errors) { reject(errors); });
            });
            return promise;
        };
        ShowListInputDialogClientRequestHandler.prototype.convertToDialogResult = function (result) {
            var dialogResult = {
                value: result
            };
            return dialogResult;
        };
        ShowListInputDialogClientRequestHandler.prototype.updateDialogOnError = function (error, listInputDialog) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(error.newDialogValue)) {
                listInputDialog.setItems(error.newDialogValue, this._getDisplayNameCallback.bind(this));
            }
        };
        ShowListInputDialogClientRequestHandler.prototype._getDisplayNameCallback = function (value) {
            return value.label;
        };
        return ShowListInputDialogClientRequestHandler;
    }(Commerce.DialogClientRequestHandlerBase));
    Commerce.ShowListInputDialogClientRequestHandler = ShowListInputDialogClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowNumericInputDialogClientRequestHandler = (function (_super) {
        __extends(ShowNumericInputDialogClientRequestHandler, _super);
        function ShowNumericInputDialogClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShowNumericInputDialogClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ShowNumericInputDialogClientRequest;
        };
        ShowNumericInputDialogClientRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                var numpadDialog = new Commerce.Controls.NumpadDialog();
                var numpadDialogOptions;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(request.options)) {
                    numpadDialogOptions = {
                        numpadDialogType: Commerce.Controls.NumpadDialogTypes.Numeric,
                        enableMagneticStripReader: false,
                        enableBarcodeScanner: false,
                        numpadLabel: request.options.numPadLabel
                    };
                    numpadDialog.title(request.options.title);
                    numpadDialog.subTitle(request.options.subTitle);
                    numpadDialogOptions.value = request.options.defaultNumber;
                    numpadDialogOptions.decimalPrecision = request.options.decimalPrecision;
                }
                numpadDialog.show(numpadDialogOptions, false);
                _this.handleDialogResult(numpadDialog, request.options.onBeforeClose)
                    .done(function (result) {
                    var response = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        response = new Commerce.ShowNumericInputDialogClientResponse({
                            value: result.data.value
                        });
                    }
                    resolve({ canceled: result.canceled, data: response });
                }).fail(function (errors) { reject(errors); });
            });
            return promise;
        };
        ShowNumericInputDialogClientRequestHandler.prototype.convertToDialogResult = function (result) {
            var dialogResult = {
                value: result.value
            };
            return dialogResult;
        };
        ShowNumericInputDialogClientRequestHandler.prototype.updateDialogOnError = function (error, numpadDialog) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(error.newDialogValue)) {
                numpadDialog.setTextValue(error.newDialogValue);
            }
        };
        return ShowNumericInputDialogClientRequestHandler;
    }(Commerce.DialogClientRequestHandlerBase));
    Commerce.ShowNumericInputDialogClientRequestHandler = ShowNumericInputDialogClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowTextInputDialogClientRequestHandler = (function (_super) {
        __extends(ShowTextInputDialogClientRequestHandler, _super);
        function ShowTextInputDialogClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShowTextInputDialogClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ShowTextInputDialogClientRequest;
        };
        ShowTextInputDialogClientRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                var textDialog = new Commerce.Controls.TextInputDialog();
                var textDialogOptions = {
                    labelResx: request.options.label,
                    content: Commerce.ObjectExtensions.isNullOrUndefined(request.options.defaultText) ? Commerce.StringExtensions.EMPTY : request.options.defaultText
                };
                textDialog.title(request.options.title);
                textDialog.subTitle(request.options.subTitle);
                textDialog.show(textDialogOptions, false);
                _this.handleDialogResult(textDialog, request.options.onBeforeClose)
                    .done(function (result) {
                    var response = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        response = new Commerce.ShowTextInputDialogClientResponse({
                            value: result.data.value
                        });
                    }
                    resolve({ canceled: result.canceled, data: response });
                }).fail(function (errors) { reject(errors); });
            });
            return promise;
        };
        ShowTextInputDialogClientRequestHandler.prototype.convertToDialogResult = function (result) {
            var dialogResult = {
                value: result
            };
            return dialogResult;
        };
        ShowTextInputDialogClientRequestHandler.prototype.updateDialogOnError = function (error, textDialog) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(error.newDialogValue)) {
                textDialog.setTextContent(error.newDialogValue);
            }
        };
        return ShowTextInputDialogClientRequestHandler;
    }(Commerce.DialogClientRequestHandlerBase));
    Commerce.ShowTextInputDialogClientRequestHandler = ShowTextInputDialogClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Facade;
        (function (Facade) {
            "use strict";
            var Printer = (function () {
                function Printer() {
                    this._printers = new Commerce.Dictionary();
                }
                Printer.prototype.registerPrinter = function (type, printer) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(printer)) {
                        throw new Error("Printer instance is null or undefined.");
                    }
                    this._printers.setItem(type, printer);
                };
                Printer.prototype.printAsync = function (printableReceipts, callerContext) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    var errors = new Array();
                    printableReceipts.forEach(function (printableReceipt) {
                        printableReceipt.receiptHeader = Commerce.ReceiptHelper.translateReceiptContent(printableReceipt.receiptHeader);
                        printableReceipt.receiptBody = Commerce.ReceiptHelper.translateReceiptContent(printableReceipt.receiptBody);
                        printableReceipt.receiptFooter = Commerce.ReceiptHelper.translateReceiptContent(printableReceipt.receiptFooter);
                    });
                    var receiptsGroupedByPrinterType = Commerce.ObjectExtensions.groupBy(printableReceipts, function (element) { return element.printerType; });
                    Commerce.Utilities.AsyncExecutionHelper.forEachAsync(receiptsGroupedByPrinterType, function (groupedPrintableReceipts, next, printerType) {
                        if (!groupedPrintableReceipts) {
                            next();
                        }
                        else {
                            if (_this._printers.hasItem(printerType)) {
                                _this._printers.getItem(printerType).printAsync(groupedPrintableReceipts)
                                    .done(function () { return next(); })
                                    .fail(function (error) {
                                    errors = errors.concat(error);
                                    next();
                                });
                            }
                            else {
                                var printerTypeNotFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERAL_UNSUPPORTED_PRINTERTYPE_ERROR);
                                errors = errors.concat(printerTypeNotFoundError);
                                Commerce.RetailLogger.peripheralsUnsupportedPrinterType(printerType);
                                next();
                            }
                        }
                    }, function () {
                        if (errors.length === 0) {
                            asyncResult.resolve();
                        }
                        else {
                            asyncResult.reject(errors);
                        }
                    });
                    return asyncResult;
                };
                return Printer;
            }());
            Facade.Printer = Printer;
        })(Facade = Peripherals.Facade || (Peripherals.Facade = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ActivationErrorControl = (function (_super) {
            __extends(ActivationErrorControl, _super);
            function ActivationErrorControl(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "ActivationErrorControl";
                _this.errorHeaderMessage = options.errorHeaderMessage;
                _this.clientErrorMessage = options.clientErrorMessage;
                _this.errorMessage = options.errorMessage;
                _this.errorDetails = options.errorDetails;
                _this.footerMessage = options.footerMessage;
                _this.continueLabel = options.continueLabel;
                _this.retryFunction = options.retryFunction;
                _this.switchActivationModeFunction = options.switchActivationModeFunction;
                _this.headerDeviceId = Commerce.ObjectExtensions.isNullOrUndefined(options.headerDeviceId)
                    ? ko.observable(Commerce.StringExtensions.EMPTY) : options.headerDeviceId;
                _this.headerRegisterNumber = Commerce.ObjectExtensions.isNullOrUndefined(options.headerRegisterNumber)
                    ? ko.observable(Commerce.StringExtensions.EMPTY) : options.headerRegisterNumber;
                _this.previousLabel = Commerce.ObjectExtensions.isNullOrUndefined(options.previousLabel)
                    ? ko.observable(Commerce.ViewModelAdapter.getResourceString("string_8073")) : options.previousLabel;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.previousFunction)) {
                    _this.previousButtonVisible = ko.observable(true);
                    _this.previousFunction = options.previousFunction;
                }
                else {
                    _this.previousButtonVisible = ko.observable(false);
                    _this.previousFunction = null;
                }
                _this.headerMessageVisible = ko.computed(function () {
                    return !Commerce.StringExtensions.isNullOrWhitespace(_this.headerDeviceId()) &&
                        !Commerce.StringExtensions.isNullOrWhitespace(_this.headerRegisterNumber());
                }, _this);
                _this.massActivationSwitchVisible = ko.computed(function () {
                    return Commerce.Helpers.DeviceActivationHelper.isMassActivationAllowed();
                }, _this);
                _this.appSessionId = TsLogging.LoggerBase.getAppSessionId();
                return _this;
            }
            return ActivationErrorControl;
        }(Controls.UserControl));
        Controls.ActivationErrorControl = ActivationErrorControl;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var AddIssueGiftCardDialog = (function (_super) {
            __extends(AddIssueGiftCardDialog, _super);
            function AddIssueGiftCardDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "AddIssueGiftCardDialog";
                _this._hasPaymentTerminal = ko.observable(false);
                _this._paymentTerminalWaitCount = 0;
                _this._processingCancellation = false;
                _this.giftCardNumber = ko.observable("");
                _this.giftCardAmount = ko.observable("");
                _this.giftCardAmountBalance = ko.computed(function () { return Commerce.Formatters.PriceFormatter(_this.giftCardAmount()); });
                _this.buttonLabel = ko.observable("");
                _this.isScanning = ko.observable(false);
                _this.isGiftCardBalanceOperation = ko.observable(false);
                _this.isDisplayBalance = ko.computed(function () { return !Commerce.StringExtensions.isNullOrWhitespace(_this.giftCardAmountBalance()) &&
                    (!Commerce.ObjectExtensions.isNullOrUndefined(_this._state) &&
                        (_this._state.retailOperationId === RetailOperation.GiftCardBalance || _this._state.retailOperationId === RetailOperation.CashOutGiftCard)); });
                _this.isManualCardNumberInputAllowed = ko.observable(true);
                _this.isButtonVisible = ko.computed(function () { return _this.isScanning() || _this.isDisplayBalance()
                    || (!_this._hasPaymentTerminal() && !_this.isManualCardNumberInputAllowed()); });
                _this._giftCardEntryType = Commerce.Client.Entities.GiftCardEntryType.Keyboard;
                _this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.IssueNew;
                return _this;
            }
            AddIssueGiftCardDialog.prototype.onShowing = function (state) {
                var _this = this;
                this._state = state;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._state) &&
                    (this._state.retailOperationId === RetailOperation.GiftCardBalance || this._state.retailOperationId === RetailOperation.CashOutGiftCard)) {
                    this.isGiftCardBalanceOperation(true);
                }
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    return _this.onCardNumberScanned(cardInfo.CardNumber, Commerce.Client.Entities.GiftCardEntryType.MagneticStripReader);
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.GIFT);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    return _this.onCardNumberScanned(barcode, Commerce.Client.Entities.GiftCardEntryType.Barcode);
                });
                var paymentAsyncResult;
                if (this.canUsePaymentTerminal()) {
                    paymentAsyncResult = Commerce.PaymentHelper.beginTransactionAsync().done(function () {
                        _this._hasPaymentTerminal(true);
                    });
                }
                else {
                    paymentAsyncResult = Commerce.VoidAsyncResult.createResolved();
                }
                var cardTypesAsyncResult = Commerce.ApplicationContext.Instance.cardTypesAsync.value.done(function (cardTypes) {
                    var cardType = cardTypes.filter(function (cardType) {
                        var isGiftCardType = cardType.CardTypeValue === Commerce.Proxy.Entities.CardType.GiftCard;
                        var isSameTenderType = Commerce.StringExtensions.compare(cardType.PaymentMethodId, _this._state.tenderTypeId, true) === 0;
                        return isGiftCardType && isSameTenderType;
                    })[0];
                    _this.isManualCardNumberInputAllowed(Commerce.ObjectExtensions.isNullOrUndefined(cardType) || cardType.AllowManualInput === true);
                });
                Commerce.VoidAsyncResult.join([paymentAsyncResult, cardTypesAsyncResult])
                    .done(function () {
                    if (!_this.isManualCardNumberInputAllowed()) {
                        _this.listenToPaymentTerminal();
                    }
                }).always(function () {
                    _this.updateLabels();
                    _this.visible(true);
                }).fail(function (errors) {
                    _this.handleErrors(errors);
                });
            };
            AddIssueGiftCardDialog.prototype.onButtonClick = function (operationId) {
                if (operationId === Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                }
                else if (operationId === Controls.Dialog.OperationIds.OK_BUTTON_CLICK) {
                    this.dialogResult.resolve(Commerce.DialogResult.OK);
                }
            };
            AddIssueGiftCardDialog.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.GIFT);
                this.cancelPaymentTerminalDialog();
                _super.prototype.onHidden.call(this);
            };
            AddIssueGiftCardDialog.prototype.onNumPadCardNumberEnterEventHandler = function (result) {
                this._giftCardEntryType = Commerce.Client.Entities.GiftCardEntryType.Keyboard;
                this.updateCardNumber(result.value);
            };
            AddIssueGiftCardDialog.prototype.onNumPadAmountEnterEventHandler = function (result) {
                this.updateCardAmount(result.value);
            };
            AddIssueGiftCardDialog.prototype.onCloseDialogButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK);
            };
            AddIssueGiftCardDialog.prototype.hide = function () {
                this.giftCardNumber(Commerce.StringExtensions.EMPTY);
                this.giftCardAmount(Commerce.StringExtensions.EMPTY);
                return _super.prototype.hide.call(this);
            };
            AddIssueGiftCardDialog.prototype.onCardNumberScanned = function (value, giftCardEntryType) {
                this._giftCardEntryType = giftCardEntryType;
                this.updateCardNumber(value);
            };
            AddIssueGiftCardDialog.prototype.updateCardNumber = function (cardNumber) {
                var _this = this;
                var hasCardNumber = !Commerce.StringExtensions.isNullOrWhitespace(cardNumber);
                if (!hasCardNumber) {
                    if (this._hasPaymentTerminal() && this.isManualCardNumberInputAllowed()) {
                        this.listenToPaymentTerminal();
                    }
                    else {
                        this.handleErrors([
                            new Commerce.Proxy.Entities.Error("string_1171", undefined, Commerce.ViewModelAdapter.getResourceString("string_1171"))
                        ]);
                    }
                    return;
                }
                else {
                    var triggerOptions = {
                        giftCardOperation: this._giftCardOperation,
                        giftCardNumber: cardNumber,
                        giftCardEntryType: this._giftCardEntryType,
                        cart: Commerce.Session.instance.cart
                    };
                    Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PostGetGiftCardNumber, triggerOptions)
                        .done(function (result) {
                        if (result && !result.canceled) {
                            _this.giftCardNumber(cardNumber);
                            if (_this._state.retailOperationId === RetailOperation.GiftCardBalance ||
                                _this._state.retailOperationId === RetailOperation.CashOutGiftCard) {
                                _this.handleGiftCardOperation();
                                return;
                            }
                            _this.updateLabels();
                        }
                        else {
                            _this.onCloseDialogButtonClick();
                        }
                    }).fail(function () {
                        _this.onCloseDialogButtonClick();
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.updateCardAmount = function (cardAmount) {
                if (!this.isValidAmount(Commerce.NumberExtensions.parseNumber(cardAmount))) {
                    this.handleErrors([
                        new Commerce.Proxy.Entities.Error("string_5115", undefined, Commerce.ViewModelAdapter.getResourceString("string_5115"))
                    ]);
                    return;
                }
                this.giftCardAmount(cardAmount);
                this.handleGiftCardOperation();
            };
            AddIssueGiftCardDialog.prototype.isValidAmount = function (amount) {
                var maxDigits = 11;
                return (amount.toString().length <= maxDigits) && !Commerce.NumberExtensions.isNullNaNOrZero(amount);
            };
            AddIssueGiftCardDialog.prototype.handleGiftCardOperation = function () {
                this.updateLabels();
                switch (this._state.retailOperationId) {
                    case RetailOperation.AddToGiftCard:
                        this.addToGiftCard();
                        break;
                    case RetailOperation.IssueGiftCertificate:
                        this.issueGiftCard();
                        break;
                    case RetailOperation.GiftCardBalance:
                        this.checkGiftCardBalance();
                        break;
                    case RetailOperation.CashOutGiftCard:
                        this.cashOutGiftCard();
                        break;
                }
            };
            AddIssueGiftCardDialog.prototype.addToGiftCard = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isFunction(this._state.onAddToGiftCard)) {
                    var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                    var asyncResult = this._state.onAddToGiftCard(this.giftCardNumber(), Commerce.NumberExtensions.parseNumber(this.giftCardAmount()), currency, this.title());
                    this.handleGiftCardOperationAsyncResult(asyncResult).done(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.OK);
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.issueGiftCard = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isFunction(this._state.onIssueGiftCard)) {
                    var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                    var asyncResult = this._state.onIssueGiftCard(this.giftCardNumber(), Commerce.NumberExtensions.parseNumber(this.giftCardAmount()), currency, this.title());
                    this.handleGiftCardOperationAsyncResult(asyncResult).done(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.OK);
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.checkGiftCardBalance = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isFunction(this._state.onCheckGiftCardBalance)) {
                    if (this._hasPaymentTerminal && Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber())) {
                        this.isScanning(true);
                        this.updateLabels();
                    }
                    var asyncResult = this._state.onCheckGiftCardBalance(this.giftCardNumber())
                        .done(function (card) {
                        _this.giftCardNumber(card.Id);
                        _this.giftCardAmount(Commerce.NumberExtensions.formatNumber(card.Balance, Commerce.NumberExtensions.getDecimalPrecision()));
                    }).always(function () {
                        _this.isScanning(false);
                        _this.updateLabels();
                    });
                    this.handleGiftCardOperationAsyncResult(asyncResult);
                }
            };
            AddIssueGiftCardDialog.prototype.cashOutGiftCard = function () {
                var _this = this;
                if (Commerce.ObjectExtensions.isFunction(this._state.onCashOutGiftCard)) {
                    if (this._hasPaymentTerminal && Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber())) {
                        this.isScanning(true);
                        this.updateLabels();
                    }
                    var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                    var asyncResult = this._state.onCashOutGiftCard(this.giftCardNumber(), currency, this.title())
                        .always(function () {
                        _this.isScanning(false);
                        _this.updateLabels();
                    });
                    this.handleGiftCardOperationAsyncResult(asyncResult).done(function () {
                        _this.dialogResult.resolve(Commerce.DialogResult.OK);
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.handleGiftCardOperationAsyncResult = function (asyncResult) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(asyncResult)) {
                    asyncResult = Commerce.VoidAsyncResult.createResolved();
                }
                if (this._hasPaymentTerminal) {
                    ++this._paymentTerminalWaitCount;
                }
                var showProgressRing = (this._paymentTerminalWaitCount === 0)
                    || (!Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber()) && !Commerce.StringExtensions.isNullOrWhitespace(this.giftCardAmount()));
                this.indeterminateWaitVisible(showProgressRing);
                return asyncResult.always(function () {
                    if (_this._hasPaymentTerminal) {
                        _this._paymentTerminalWaitCount = Math.max(0, --_this._paymentTerminalWaitCount);
                    }
                    if (_this._paymentTerminalWaitCount === 0) {
                        _this.indeterminateWaitVisible(false);
                    }
                }).fail(function (errors) {
                    _this.handleErrors(errors);
                });
            };
            AddIssueGiftCardDialog.prototype.handleErrors = function (errors) {
                var _this = this;
                this.giftCardAmount(Commerce.StringExtensions.EMPTY);
                this.giftCardNumber(Commerce.StringExtensions.EMPTY);
                if (this.visible()) {
                    this.updateLabels();
                    Commerce.NotificationHandler.displayClientErrors(errors).always(function () {
                        var cancelDialog = false;
                        if (!_this.isManualCardNumberInputAllowed()) {
                            if (_this._hasPaymentTerminal) {
                                if (Commerce.PaymentHelper.canUseTerminalAfterErrors(errors)) {
                                    _this.listenToPaymentTerminal();
                                }
                                else {
                                    cancelDialog = true;
                                }
                            }
                            else {
                                cancelDialog = true;
                            }
                        }
                        if (cancelDialog) {
                            _this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        }
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.canUsePaymentTerminal = function () {
                var isPaymentTerminalConfigured = Commerce.ApplicationContext.Instance.hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.Windows
                    || Commerce.ApplicationContext.Instance.hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.Network;
                var isHardwareStationActive = Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
                return isHardwareStationActive && isPaymentTerminalConfigured;
            };
            AddIssueGiftCardDialog.prototype.listenToPaymentTerminal = function () {
                var _this = this;
                if (!this._hasPaymentTerminal()) {
                    return;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(this.giftCardNumber()) && this._paymentTerminalWaitCount === 0) {
                    ++this._paymentTerminalWaitCount;
                    this.isScanning(true);
                    this.updateLabels();
                    Commerce.Peripherals.instance.paymentTerminal.retrievePrivateTender(0, true)
                        .always(function () {
                        _this.isScanning(false);
                        _this._paymentTerminalWaitCount = Math.max(0, --_this._paymentTerminalWaitCount);
                        if (_this._paymentTerminalWaitCount === 0) {
                            _this.indeterminateWaitVisible(false);
                        }
                    }).done(function (cardInfo) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(cardInfo) || Commerce.StringExtensions.isNullOrWhitespace(cardInfo.CardNumber)) {
                            _this.handleErrors([
                                new Commerce.Proxy.Entities.Error("string_1166", undefined, "Unable to read card data. Please try again or use a different card.")
                            ]);
                        }
                        else {
                            _this.updateCardNumber(cardInfo.CardNumber);
                        }
                    }).fail(function (errors) {
                        _this.handleErrors(errors);
                    });
                }
            };
            AddIssueGiftCardDialog.prototype.updateLabels = function () {
                var message;
                switch (this._state.retailOperationId) {
                    case RetailOperation.IssueGiftCertificate:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5100"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5110");
                        this.buttonLabel(Commerce.ViewModelAdapter.getResourceString("string_107"));
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.IssueNew;
                        break;
                    case RetailOperation.AddToGiftCard:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5101"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5111");
                        this.buttonLabel(Commerce.ViewModelAdapter.getResourceString("string_107"));
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.AddExisting;
                        break;
                    case RetailOperation.GiftCardBalance:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5103"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5112");
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.CheckBalance;
                        this.buttonLabel(this.isScanning() ? Commerce.ViewModelAdapter.getResourceString("string_107") : Commerce.ViewModelAdapter.getResourceString("string_80"));
                        break;
                    case RetailOperation.CashOutGiftCard:
                        this.title(Commerce.ViewModelAdapter.getResourceString("string_5105"));
                        message = Commerce.ViewModelAdapter.getResourceString("string_5122");
                        this._giftCardOperation = Commerce.Client.Entities.GiftCardOperation.CashOut;
                        this.buttonLabel(this.isScanning() ? Commerce.ViewModelAdapter.getResourceString("string_107") : Commerce.ViewModelAdapter.getResourceString("string_80"));
                        break;
                    default:
                        break;
                }
                if (this.isScanning() || this.isDisplayBalance()) {
                    message = "";
                }
                this.message(message);
            };
            AddIssueGiftCardDialog.prototype.cancelPaymentTerminalDialog = function () {
                var _this = this;
                if (this._processingCancellation) {
                    return;
                }
                if (this._paymentTerminalWaitCount !== 0) {
                    this._processingCancellation = true;
                    var request = new Commerce.PaymentTerminalCancelOperationRequest();
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).always(function () {
                        _this._processingCancellation = false;
                    });
                }
            };
            return AddIssueGiftCardDialog;
        }(Controls.ModalDialog));
        Controls.AddIssueGiftCardDialog = AddIssueGiftCardDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ApprovePartialAmountDialog = (function (_super) {
            __extends(ApprovePartialAmountDialog, _super);
            function ApprovePartialAmountDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "ApprovePartialAmountDialog";
                _this._correlationId = Commerce.StringExtensions.EMPTY;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_7500"));
                _this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_7501"));
                _this.amountAuthorizedText = ko.observable("");
                _this.amountRequestedText = ko.observable("");
                return _this;
            }
            ApprovePartialAmountDialog.prototype.onShowing = function (dialogOptions) {
                this.amountAuthorizedText(Commerce.NumberExtensions.formatCurrency(dialogOptions.amountAuthorized, dialogOptions.amountAuthorizedCurrencyCode));
                this.amountRequestedText(Commerce.NumberExtensions.formatCurrency(dialogOptions.amountRequested, dialogOptions.amountRequestedCurrencyCode));
                this._correlationId = dialogOptions.correlationId;
                this.visible(true);
            };
            ApprovePartialAmountDialog.prototype.approvePartialAmountClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "ApprovePartialAmountDialog", "Yes");
                        this.dialogResult.resolve(Commerce.DialogResult.OK);
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "ApprovePartialAmountDialog", "No");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return ApprovePartialAmountDialog;
        }(Controls.ModalDialog));
        Controls.ApprovePartialAmountDialog = ApprovePartialAmountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CardTypeDialog = (function (_super) {
            __extends(CardTypeDialog, _super);
            function CardTypeDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "CardTypeDialog";
                _this.cardTypes = ko.observableArray([]);
                _this.hideOnEscape = ko.observable(false);
                return _this;
            }
            CardTypeDialog.prototype.onShowing = function (cardTypes) {
                if (!Commerce.ArrayExtensions.hasElements(cardTypes)) {
                    this._cancelDialog();
                    return;
                }
                this.cardTypes(cardTypes);
                this.visible(true);
            };
            CardTypeDialog.prototype.cardTypeListButtonClickHandler = function (eventArgs) {
                var cardType = eventArgs.data;
                this.dialogResult.resolve(Commerce.DialogResult.OK, cardType);
            };
            CardTypeDialog.prototype.cardTypeDialogButtonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            CardTypeDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return CardTypeDialog;
        }(Controls.ModalDialog));
        Controls.CardTypeDialog = CardTypeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CashbackDialog = (function (_super) {
            __extends(CashbackDialog, _super);
            function CashbackDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "CashbackDialog";
                _this._maximumCashbackAmount = 0;
                _this._cashbackAmountText = ko.observable(Commerce.NumberExtensions.formatNumber(0, Commerce.NumberExtensions.getDecimalPrecision()));
                _this.denominations = ko.observableArray([]);
                _this._isOKButtonDisabled = ko.computed(function () {
                    return !_this.isCashbackAmountTextValid(_this._cashbackAmountText());
                });
                _this.showCashbackDenominations = ko.observable(false);
                return _this;
            }
            CashbackDialog.prototype.onShowing = function (options) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    Commerce.RetailLogger.viewsControlsCashbackDialogOnShowingParametersUndefined();
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                this._cashbackAmountText(Commerce.NumberExtensions.formatCurrency(options.cashbackAmount ? options.cashbackAmount : 0));
                this._maximumCashbackAmount = options.maximumCashbackAmount ? options.maximumCashbackAmount : 0;
                var formattedDenominations = [];
                if (options.denominations) {
                    options.denominations.forEach(function (denomination) {
                        if ((_this._maximumCashbackAmount <= 0) || (_this._maximumCashbackAmount >= denomination.Amount)) {
                            var formattedDenomination = {
                                amount: denomination.Amount,
                                amountText: Commerce.NumberExtensions.formatCurrency(denomination.Amount, denomination.Currency)
                            };
                            formattedDenominations.push(formattedDenomination);
                        }
                    });
                }
                this.denominations(formattedDenominations);
                this.showCashbackDenominations(formattedDenominations.length > 0);
                this.visible(true);
            };
            CashbackDialog.prototype.denominationInvokedHandler = function (itemClicked) {
                this.cashbackAmountSubmitted(itemClicked.data.amountText);
            };
            CashbackDialog.prototype.cashbackButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var cashbackAmountText = this._cashbackAmountText();
                        this.cashbackAmountSubmitted(cashbackAmountText);
                        break;
                    case Commerce.Controls.Dialog.OperationIds.NO_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.No);
                        break;
                }
            };
            CashbackDialog.prototype.onTextBoxEnterEventHandler = function () {
                if (!this._isOKButtonDisabled()) {
                    this.cashbackButtonClick(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
                }
            };
            CashbackDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            CashbackDialog.prototype.isCashbackAmountTextValid = function (cashbackAmountText) {
                var cashbackAmount = Commerce.NumberExtensions.parseNumber(cashbackAmountText);
                var isCashbackAmountValid = !isNaN(cashbackAmount)
                    && Commerce.Helpers.CurrencyHelper.isValidAmount(cashbackAmount)
                    && ((this._maximumCashbackAmount <= 0) || (this._maximumCashbackAmount >= cashbackAmount));
                return isCashbackAmountValid;
            };
            CashbackDialog.prototype.cashbackAmountSubmitted = function (cashbackAmountText) {
                if (this.isCashbackAmountTextValid(cashbackAmountText)) {
                    var cashbackAmount = Commerce.NumberExtensions.parseNumber(cashbackAmountText);
                    this.dialogResult.resolve(Commerce.DialogResult.OK, cashbackAmount);
                }
                else {
                    var errors = [];
                    errors.push(new Commerce.Proxy.Entities.Error("string_7004"));
                    Commerce.NotificationHandler.displayClientErrors(errors);
                }
            };
            return CashbackDialog;
        }(Controls.ModalDialog));
        Controls.CashbackDialog = CashbackDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CashDrawerInputDialog = (function (_super) {
            __extends(CashDrawerInputDialog, _super);
            function CashDrawerInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "CashDrawerInputDialog";
                _this._cashDrawers = ko.observableArray([]);
                _this._ignoreTaskRecorderEventResults = [Commerce.DialogResult.OK];
                return _this;
            }
            CashDrawerInputDialog.prototype.onShowing = function (availableCashDrawers) {
                if (!Commerce.ArrayExtensions.hasElements(availableCashDrawers)) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                if (availableCashDrawers.length === 1) {
                    this.dialogResult.resolve(Commerce.DialogResult.OK, availableCashDrawers[0]);
                    return;
                }
                this._cashDrawers(availableCashDrawers);
                this.visible(true);
            };
            CashDrawerInputDialog.prototype.buttonClickHandler = function (buttonId) {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            CashDrawerInputDialog.prototype.selectedCashDrawerHandler = function (eventArgs) {
                var drawer = eventArgs.data;
                this.dialogResult.resolve(Commerce.DialogResult.OK, drawer);
            };
            return CashDrawerInputDialog;
        }(Controls.ModalDialog));
        Controls.CashDrawerInputDialog = CashDrawerInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CheckedListInputDialog = (function (_super) {
            __extends(CheckedListInputDialog, _super);
            function CheckedListInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "CheckedListInputDialog";
                _this.items = ko.observableArray([]);
                _this._result = [];
                return _this;
            }
            CheckedListInputDialog.prototype.onShowing = function (state) {
                var _this = this;
                var defaultGetDisplayNameCallback = function (item) {
                    return item.toString();
                };
                this._getNameDisplayCallback = Commerce.ObjectExtensions.isNullOrUndefined(state.getDisplayNameCallback) ?
                    defaultGetDisplayNameCallback : state.getDisplayNameCallback;
                this.items(state.items.map(function (item) {
                    return { key: _this._getNameDisplayCallback(item), value: item };
                }));
                this.visible(true);
            };
            CheckedListInputDialog.prototype.checkboxClickHandler = function (keyValuePair) {
                var _this = this;
                var index = Commerce.ArrayExtensions.findIndex(this._result, function (item) {
                    return _this._getNameDisplayCallback(item) === keyValuePair.key;
                });
                if (index > -1) {
                    this._result.splice(index, 1);
                }
                else {
                    this._result.push(keyValuePair.value);
                }
                return true;
            };
            CheckedListInputDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._result);
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            return CheckedListInputDialog;
        }(Controls.ModalDialog));
        Controls.CheckedListInputDialog = CheckedListInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CheckSuspendedTransactionsDialog = (function (_super) {
            __extends(CheckSuspendedTransactionsDialog, _super);
            function CheckSuspendedTransactionsDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "CheckSuspendedTransactionsDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_946"));
                return _this;
            }
            CheckSuspendedTransactionsDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            CheckSuspendedTransactionsDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            CheckSuspendedTransactionsDialog.prototype.selectViewAllOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { viewVoidSelectionMethod: Commerce.Activities.ViewVoidSelectionMethod.ViewAll });
            };
            CheckSuspendedTransactionsDialog.prototype.selectVoidAllOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { viewVoidSelectionMethod: Commerce.Activities.ViewVoidSelectionMethod.VoidAll });
            };
            return CheckSuspendedTransactionsDialog;
        }(Controls.ModalDialog));
        Controls.CheckSuspendedTransactionsDialog = CheckSuspendedTransactionsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var CreateCashManagementTransactionDialog = (function (_super) {
            __extends(CreateCashManagementTransactionDialog, _super);
            function CreateCashManagementTransactionDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "CreateCashManagementTransactionDialog";
                _this.title(options.title);
                _this._correlationId = options.correlationId;
                _this.okButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_75");
                _this.cancelButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_76");
                var viewModelOptions = {
                    transactionContext: options.transactionContext,
                    transactionType: options.transactionType,
                    amount: options.amount,
                    contextShift: options.contextShift,
                    contextStoreSafe: options.contextStoreSafe,
                    createFromAvailableEntry: options.createFromAvailableEntry,
                    selectedAvailableEntry: options.selectedAvailableEntry,
                    availableStoreSafes: options.availableStoreSafes,
                    availableShifts: options.availableShifts
                };
                _this.viewModel = new Commerce.ViewModels.CreateAdvancedCashManagementTransactionViewModel(viewModelOptions);
                _this.sourceIconCssClass = ko.computed(function () {
                    if (_this.viewModel.sourceType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                        return "iconSafe icon-20x20 accentColor";
                    }
                    else if (_this.viewModel.sourceType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                        return "iconCashDrawer icon-20x20 accentColor";
                    }
                    return Commerce.StringExtensions.EMPTY;
                }, _this);
                _this.destinationIconCssClass = ko.computed(function () {
                    if (_this.viewModel.destinationType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                        return "iconSafe icon-20x20 accentColor";
                    }
                    else if (_this.viewModel.destinationType() === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                        return "iconCashDrawer icon-20x20 accentColor";
                    }
                    return Commerce.StringExtensions.EMPTY;
                }, _this);
                return _this;
            }
            CreateCashManagementTransactionDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            CreateCashManagementTransactionDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._handleDialogOkButtonClick();
                        break;
                }
            };
            CreateCashManagementTransactionDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            CreateCashManagementTransactionDialog.prototype.sourceClickHandler = function () {
                if (!this.viewModel.isSourceLocked()) {
                    this.viewModel.selectSourceAsync(this._correlationId);
                }
            };
            CreateCashManagementTransactionDialog.prototype.destinationClickHandler = function () {
                if (!this.viewModel.isDestinationLocked()) {
                    this.viewModel.selectDestinationAsync(this._correlationId);
                }
            };
            CreateCashManagementTransactionDialog.prototype._handleDialogOkButtonClick = function () {
                var _this = this;
                this.viewModel.createCashManagementTransactionAsync(this._correlationId)
                    .done(function (response) {
                    _this.dialogResult.resolve(Commerce.DialogResult.OK, { cashManagementTransaction: response.data });
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            return CreateCashManagementTransactionDialog;
        }(Controls.ModalDialog));
        Controls.CreateCashManagementTransactionDialog = CreateCashManagementTransactionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var DateRangeInputDialog = (function (_super) {
            __extends(DateRangeInputDialog, _super);
            function DateRangeInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "DateRangeInputDialog";
                var dateNow = new Date();
                _this.startDate = ko.observable(dateNow);
                _this.endDate = ko.observable(dateNow);
                _this.isStartDateDisabled = ko.observable(true);
                _this.isEndDateDisabled = ko.observable(true);
                _this.minYear = ko.observable(dateNow.getFullYear() - DateRangeInputDialog.INTERVAL_YEAR);
                return _this;
            }
            DateRangeInputDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.minYear)) {
                    this.minYear(dialogState.minYear);
                }
                this.visible(true);
            };
            DateRangeInputDialog.prototype.toggleStartDateMode = function (checked) {
                this.isStartDateDisabled(!checked);
            };
            DateRangeInputDialog.prototype.toggleEndDateMode = function (checked) {
                this.isEndDateDisabled(!checked);
            };
            DateRangeInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            startDate: this.isStartDateDisabled() ? null : this.getSelectedDate(DateRangeInputDialog.START_DATE_ELEMENT_ID),
                            endDate: this.isEndDateDisabled() ? null : this.getSelectedDate(DateRangeInputDialog.END_DATE_ELEMENT_ID)
                        });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            DateRangeInputDialog.prototype.getSelectedDate = function (elementId) {
                return Commerce.DateExtensions.getDate(document.getElementById(elementId).winControl.current);
            };
            DateRangeInputDialog.INTERVAL_YEAR = 50;
            DateRangeInputDialog.START_DATE_ELEMENT_ID = "startDate";
            DateRangeInputDialog.END_DATE_ELEMENT_ID = "endDate";
            return DateRangeInputDialog;
        }(Controls.ModalDialog));
        Controls.DateRangeInputDialog = DateRangeInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetCashManagementTransactionAmountDialog = (function (_super) {
            __extends(GetCashManagementTransactionAmountDialog, _super);
            function GetCashManagementTransactionAmountDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "GetCashManagementTransactionAmountDialog";
                _this.title(options.title);
                _this.primaryText = Commerce.ViewModelAdapter.getResourceString("string_4028");
                _this.secondaryText = Commerce.ViewModelAdapter.getResourceString("string_30106"),
                    _this.amountContent = ko.observable("");
                return _this;
            }
            GetCashManagementTransactionAmountDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            GetCashManagementTransactionAmountDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            GetCashManagementTransactionAmountDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            GetCashManagementTransactionAmountDialog.prototype.countTenderButtonClickHandler = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { tenderCountingRequired: true });
            };
            GetCashManagementTransactionAmountDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var amount = Commerce.NumberExtensions.parseNumber(this.amountContent());
                        if (!Commerce.Helpers.CurrencyHelper.isValidAmount(amount)) {
                            Commerce.NotificationHandler.displayErrorMessage("string_5725");
                            return;
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { amount: amount, tenderCountingRequired: false });
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return GetCashManagementTransactionAmountDialog;
        }(Controls.ModalDialog));
        Controls.GetCashManagementTransactionAmountDialog = GetCashManagementTransactionAmountDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetCashManagementTransactionSourceDialog = (function (_super) {
            __extends(GetCashManagementTransactionSourceDialog, _super);
            function GetCashManagementTransactionSourceDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "GetCashManagementTransactionSourceDialog";
                _this.title(options.title);
                _this.cancelButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_76");
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(options.transactionType)
                    || Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(options.transactionType)) {
                    _this.newTranscationIconCssClass = "iconAddTo icon-20x20 accentColor";
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(options.transactionType)) {
                    _this.newTranscationIconCssClass = "iconRemoveFrom icon-20x20 accentColor";
                }
                var viewModelOptions = {
                    transactionType: options.transactionType,
                    availableEntries: options.availableEntries,
                    allEmployees: options.allEmployees,
                    storeSafes: options.storeSafes
                };
                _this.viewModel = new Commerce.ViewModels.GetCashManagementTransactionSourceViewModel(viewModelOptions);
                return _this;
            }
            GetCashManagementTransactionSourceDialog.prototype.onShowing = function () {
                this.viewModel.getAvailableEntriesForDisplay();
                this.visible(true);
            };
            GetCashManagementTransactionSourceDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetCashManagementTransactionSourceDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            GetCashManagementTransactionSourceDialog.prototype.newCashManagementOperationButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    createFromAvailableEntry: false
                });
            };
            GetCashManagementTransactionSourceDialog.prototype.availableEntryClickHandler = function (transaction) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    createFromAvailableEntry: true,
                    selectedAvailableEntry: transaction
                });
            };
            return GetCashManagementTransactionSourceDialog;
        }(Controls.ModalDialog));
        Controls.GetCashManagementTransactionSourceDialog = GetCashManagementTransactionSourceDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetGiftReceiptDialog = (function (_super) {
            __extends(GetGiftReceiptDialog, _super);
            function GetGiftReceiptDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetGiftReceiptDialog";
                _this.printAllLinesOptions = ko.observableArray([{
                        text: Commerce.ViewModelAdapter.getResourceString("string_1833"),
                        iconClass: "iconCheckList"
                    }]);
                _this.salesLinesForDisplay = ko.observableArray([]);
                _this.isNoItemSelected = ko.observable(true);
                _this._selectedSalesLines = [];
                _this.noSalesLineMessageText = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.noSalesLineMessageTextVisible = ko.observable(false);
                _this.printOrPreviewButtonLabel = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            GetGiftReceiptDialog.prototype.onShowing = function (dialogInput) {
                this.indeterminateWaitVisible(true);
                this._dialogState = dialogInput;
                if (this._dialogState.isPreview) {
                    this.printOrPreviewButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_1834"));
                }
                else {
                    this.printOrPreviewButtonLabel(Commerce.ViewModelAdapter.getResourceString("string_1808"));
                }
                if (Commerce.ArrayExtensions.hasElements(this._dialogState.salesLinesForDisplay)) {
                    this._loadSalesLineForDisplaySuccess(this._dialogState.salesLinesForDisplay);
                }
                else {
                    this._loadSalesLineForDisplayError();
                }
                Commerce.RetailLogger.viewsControlsPrintReceiptShown();
                this.indeterminateWaitVisible(false);
                this.visible(true);
            };
            GetGiftReceiptDialog.prototype.afterShow = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.visible) || !this.visible()) {
                    return;
                }
                var dataListViewModel;
                var listElement = document.getElementById(GetGiftReceiptDialog.SALES_LINES_DATA_LIST_ELEMENT_ID);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(listElement) && !Commerce.ObjectExtensions.isNullOrUndefined(listElement.dataListViewModel)) {
                    dataListViewModel = listElement.dataListViewModel;
                }
                if (dataListViewModel instanceof Controls.DataList.DataListViewModel) {
                    dataListViewModel.refreshList();
                }
            };
            GetGiftReceiptDialog.prototype.printAllLinesClickHandler = function (eventArgs) {
                this._selectedSalesLines = this.salesLinesForDisplay();
                this._getGiftReceiptsAsync();
            };
            GetGiftReceiptDialog.prototype.printGiftReceiptButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this._getGiftReceiptsAsync();
                        break;
                }
            };
            GetGiftReceiptDialog.prototype.salesOrderLineListSelectionChangedEventHandler = function (selectedItems) {
                this._selectedSalesLines = selectedItems;
                this.isNoItemSelected(!Commerce.ArrayExtensions.hasElements(selectedItems));
            };
            GetGiftReceiptDialog.prototype._loadSalesLineForDisplayError = function () {
                this.noSalesLineMessageText(Commerce.ViewModelAdapter.getResourceString("string_1220"));
                this.salesLinesForDisplay([]);
                this._selectedSalesLines = [];
                this.noSalesLineMessageTextVisible(true);
            };
            GetGiftReceiptDialog.prototype._loadSalesLineForDisplaySuccess = function (salesLinesForDisplay) {
                this.salesLinesForDisplay(Commerce.ArrayExtensions.hasElements(salesLinesForDisplay) ? salesLinesForDisplay : []);
                if (!Commerce.ArrayExtensions.hasElements(salesLinesForDisplay)) {
                    this.noSalesLineMessageTextVisible(true);
                    this.noSalesLineMessageText(Commerce.ViewModelAdapter.getResourceString("string_1220"));
                    return;
                }
                this.noSalesLineMessageTextVisible(false);
                this._selectedSalesLines = [];
                this.isNoItemSelected(true);
            };
            GetGiftReceiptDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetGiftReceiptDialog.prototype._resolveDialog = function (salesLineNumbers) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { salesLineNumbers: salesLineNumbers });
            };
            GetGiftReceiptDialog.prototype._getGiftReceiptsAsync = function () {
                this.indeterminateWaitVisible(true);
                var salesLineNums = this._selectedSalesLines.map(function (line) { return line.LineNumber; });
                this._resolveDialog(salesLineNums);
                this.indeterminateWaitVisible(false);
            };
            GetGiftReceiptDialog.SALES_LINES_DATA_LIST_ELEMENT_ID = "salesLinesList";
            return GetGiftReceiptDialog;
        }(Controls.ModalDialog));
        Controls.GetGiftReceiptDialog = GetGiftReceiptDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetSalesRepresentativeDialog = (function (_super) {
            __extends(GetSalesRepresentativeDialog, _super);
            function GetSalesRepresentativeDialog(subTitle) {
                var _this = _super.call(this) || this;
                _this.controlName = "GetSalesRepresentativeDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_13007"));
                _this.subTitle(subTitle);
                _this.viewModel = new Commerce.ViewModels.GetSalesRepresentativeViewModel();
                return _this;
            }
            GetSalesRepresentativeDialog.prototype.onShowing = function () {
                this.visible(true);
                this._enableBarcodeScanner();
                this._subscribeToCommissionSalesGroupAndResolveDialogIfNotNull();
            };
            GetSalesRepresentativeDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetSalesRepresentativeDialog.prototype.itemInvokedHandler = function (item) {
                this._closeDialogAndResolveOkResult(item);
            };
            GetSalesRepresentativeDialog.prototype.dialogCloseButtonClick = function () {
                this._disableBarcodeScanner();
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            GetSalesRepresentativeDialog.prototype._onBarcodeScanned = function (value) {
                this._updateSearchText(value);
                this.viewModel.performSalesRepresentativeSearch();
            };
            GetSalesRepresentativeDialog.prototype._enableBarcodeScanner = function () {
                var _this = this;
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    return _this._onBarcodeScanned(barcode);
                });
            };
            GetSalesRepresentativeDialog.prototype._disableBarcodeScanner = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
            };
            GetSalesRepresentativeDialog.prototype._updateSearchText = function (searchText) {
                this.viewModel.searchText(searchText);
            };
            GetSalesRepresentativeDialog.prototype._closeDialogAndResolveOkResult = function (item) {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedSalesRepresentative: item });
            };
            GetSalesRepresentativeDialog.prototype._subscribeToCommissionSalesGroupAndResolveDialogIfNotNull = function () {
                var _this = this;
                this.viewModel.commissionSalesGroup.subscribe(function (newCommissionSalesGroup) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(newCommissionSalesGroup)) {
                        _this._closeDialogAndResolveOkResult(newCommissionSalesGroup);
                    }
                });
            };
            return GetSalesRepresentativeDialog;
        }(Controls.ModalDialog));
        Controls.GetSalesRepresentativeDialog = GetSalesRepresentativeDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetSignatureFromDeviceDialog = (function (_super) {
            __extends(GetSignatureFromDeviceDialog, _super);
            function GetSignatureFromDeviceDialog(correlationId) {
                var _this = _super.call(this) || this;
                _this.controlName = "GetSignatureFromDeviceDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_6908"));
                _this.viewModel = new Commerce.ViewModels.GetSignatureFromDeviceViewModel(correlationId);
                return _this;
            }
            GetSignatureFromDeviceDialog.prototype.afterShow = function () {
                var _this = this;
                this.viewModel.getSignatureFromDeviceAsync()
                    .done(function (result) {
                    if (!_this.viewModel.isOperationSkipSignature) {
                        if (!result.canceled) {
                            _this.dialogResult.resolve(Commerce.DialogResult.OK, {
                                signatureData: result.data,
                                status: Commerce.Activities.SignatureActivityResult.OK
                            });
                        }
                        else {
                            _this.dialogResult.resolve(Commerce.DialogResult.Cancel, {
                                signatureData: Commerce.StringExtensions.EMPTY,
                                status: Commerce.Activities.SignatureActivityResult.Cancelled
                            });
                        }
                    }
                }).fail(function (errors) {
                    if (!_this.viewModel.isOperationSkipSignature) {
                        Commerce.NotificationHandler.displayClientErrors(errors)
                            .always(function () {
                            _this.dialogResult.reject(errors);
                        });
                    }
                });
            };
            GetSignatureFromDeviceDialog.prototype.buttonClickHandler = function (operationId) {
                var _this = this;
                switch (operationId) {
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "GetSignatureFromDeviceDialog", "Skip");
                        this.viewModel.endGetSignatureFromDevice(true)
                            .always(function () {
                            _this.dialogResult.resolve(Commerce.DialogResult.Cancel, {
                                signatureData: Commerce.StringExtensions.EMPTY,
                                status: Commerce.Activities.SignatureActivityResult.Cancelled
                            });
                        });
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this.viewModel.correlationId, "GetSignatureFromDeviceDialog", "Get Signature");
                        this.viewModel.endGetSignatureFromDevice(false);
                        break;
                    default:
                        throw new Error("Unknown operation Id: " + operationId);
                }
            };
            return GetSignatureFromDeviceDialog;
        }(Controls.ModalDialog));
        Controls.GetSignatureFromDeviceDialog = GetSignatureFromDeviceDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var GetVariantSelectionMethodDialog = (function (_super) {
            __extends(GetVariantSelectionMethodDialog, _super);
            function GetVariantSelectionMethodDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "GetVariantSelectionMethodDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_923"));
                _this.product = ko.observable(null);
                return _this;
            }
            GetVariantSelectionMethodDialog.prototype.onShowing = function (state) {
                this.product(state.product);
                this.visible(true);
            };
            GetVariantSelectionMethodDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            GetVariantSelectionMethodDialog.prototype.viewAllVariantsOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { variantSelectionMethod: Commerce.Activities.VariantSelectionMethod.ViewAllVariants });
            };
            GetVariantSelectionMethodDialog.prototype.selectVariantOption = function () {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { variantSelectionMethod: Commerce.Activities.VariantSelectionMethod.SelectVariant });
            };
            return GetVariantSelectionMethodDialog;
        }(Controls.ModalDialog));
        Controls.GetVariantSelectionMethodDialog = GetVariantSelectionMethodDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var HardwareStationDialog = (function (_super) {
            __extends(HardwareStationDialog, _super);
            function HardwareStationDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "HardwareStationDialog";
                _this.viewModel = new Commerce.ViewModels.HardwareStationViewModel();
                _this.shiftViewModel = new Commerce.ViewModels.ShiftViewModel();
                _this.manageStations = ko.observable(false);
                _this.labelResxString = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_6029"));
                _this.closeButtonVisibility = ko.observable(true);
                return _this;
            }
            HardwareStationDialog.prototype.onShowing = function (dialogParams) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogParams)) {
                    this.title(dialogParams.title);
                    this.subTitle(dialogParams.subTitle);
                    this.manageStations(dialogParams.isPairedHardwareStationView);
                }
                this.closeButtonVisibility(true);
                this.loadViewModel();
                this.visible(true);
            };
            HardwareStationDialog.prototype.onButtonClick = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.onOkButtonClick();
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.cancelDialog();
                        break;
                }
            };
            HardwareStationDialog.prototype.toggleSwitchChanged = function (checked, toggleSwitch, station) {
                var _this = this;
                if (toggleSwitch.checked && station && !station.isPaired) {
                    this.indeterminateWaitVisible(true);
                    this.viewModel.pairStation(station).fail(function () {
                        toggleSwitch.checked = false;
                    }).always(function () { _this.indeterminateWaitVisible(false); });
                }
                else if (!toggleSwitch.checked && station && station.isPaired) {
                    this.indeterminateWaitVisible(true);
                    this.viewModel.unpairStation(station).fail(function () {
                        toggleSwitch.checked = true;
                    }).always(function () { _this.indeterminateWaitVisible(false); });
                }
            };
            HardwareStationDialog.prototype.pairedStationsItemClicked = function (newItem) {
                var _this = this;
                return this.handleAsyncResult(this.viewModel.setActive(newItem))
                    .done(function (result) {
                    if (!result.canceled) {
                        if (!Commerce.Session.instance.Shift.ShiftId) {
                            _this.startShift();
                        }
                    }
                    _this.cancelDialog();
                });
            };
            HardwareStationDialog.prototype.activeStationsItemClicked = function (newItem) {
                return this.handleAsyncResult(this.viewModel.setInactive(newItem));
            };
            HardwareStationDialog.prototype.loadViewModel = function () {
                var _this = this;
                this.indeterminateWaitVisible(true);
                return this.viewModel.load()
                    .always(function () {
                    _this.indeterminateWaitVisible(false);
                }).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            HardwareStationDialog.prototype.onOkButtonClick = function () {
                if (!this.manageStations()) {
                    this.manageStations(true);
                    this.closeButtonVisibility(false);
                    this.labelResxString(Commerce.ViewModelAdapter.getResourceString("string_75"));
                    this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_6030"));
                }
                else {
                    this.manageStations(false);
                    this.closeButtonVisibility(true);
                    this.labelResxString(Commerce.ViewModelAdapter.getResourceString("string_6029"));
                    this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_6001"));
                }
            };
            HardwareStationDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            HardwareStationDialog.prototype.startShift = function () {
                this.handleAsyncResult(this.shiftViewModel.openOrResumeShift(Commerce.Session.instance.CurrentEmployee.StaffId))
                    .fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                });
            };
            HardwareStationDialog.prototype.handleAsyncResult = function (asyncResult) {
                var _this = this;
                this.indeterminateWaitVisible(true);
                return asyncResult.always(function () {
                    _this.indeterminateWaitVisible(false);
                });
            };
            return HardwareStationDialog;
        }(Controls.ModalDialog));
        Controls.HardwareStationDialog = HardwareStationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LinkedRefundDialog = (function (_super) {
            __extends(LinkedRefundDialog, _super);
            function LinkedRefundDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "LinkedRefundDialog";
                _this.amountDue = ko.observable(0);
                _this.linkedTenderLines = ko.observableArray([]);
                _this.tenderType = ko.observable(null);
                _this.isTenderTypeSelected = ko.computed(function () { return !Commerce.ObjectExtensions.isNullOrUndefined(_this.tenderType()); }, _this);
                return _this;
            }
            LinkedRefundDialog.prototype.onShowing = function (dialogState) {
                this._setDialogState(dialogState);
                this.visible(true);
            };
            LinkedRefundDialog.prototype.optionClickHandler = function (selectedTenderLine) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, selectedTenderLine);
            };
            LinkedRefundDialog.prototype.linkedRefundDialogButtonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            LinkedRefundDialog.prototype.dialogCloseButtonClick = function () {
                this._cancelDialog();
            };
            LinkedRefundDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            LinkedRefundDialog.prototype._setDialogState = function (dialogState) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(dialogState)) {
                    return;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.tenderType)) {
                    this.tenderType(dialogState.tenderType);
                }
                else {
                    this.tenderType(null);
                }
                this.amountDue(dialogState.amountDue);
                this.linkedTenderLines(dialogState.tenderLines);
            };
            return LinkedRefundDialog;
        }(Controls.ModalDialog));
        Controls.LinkedRefundDialog = LinkedRefundDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var LoyaltyCardDetailsDialog = (function (_super) {
            __extends(LoyaltyCardDetailsDialog, _super);
            function LoyaltyCardDetailsDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "LoyaltyCardDetailsDialog";
                _this.cardIssued = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            LoyaltyCardDetailsDialog.prototype.onShowing = function (dialogParams) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogParams)) {
                    this.cardIssued(dialogParams.cardIssued);
                }
                this.visible(true);
            };
            LoyaltyCardDetailsDialog.prototype.onButtonClick = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Close);
                        break;
                }
            };
            LoyaltyCardDetailsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return LoyaltyCardDetailsDialog;
        }(Controls.ModalDialog));
        Controls.LoyaltyCardDetailsDialog = LoyaltyCardDetailsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        var ManageChargesLineDetailDialog = (function (_super) {
            __extends(ManageChargesLineDetailDialog, _super);
            function ManageChargesLineDetailDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "ManageChargesLineDetailDialog";
                _this.deliveryMode = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.overrideReason = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.currencyCode = ko.observable(Commerce.StringExtensions.EMPTY);
                return _this;
            }
            ManageChargesLineDetailDialog.prototype.onShowing = function (dialogState) {
                this.deliveryMode(dialogState.deliveryMode);
                this.currencyCode(dialogState.currencyCode);
                this.overrideReason(dialogState.overrideReason);
                this.visible(true);
            };
            ManageChargesLineDetailDialog.prototype.closeDetails = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return ManageChargesLineDetailDialog;
        }(Controls.ModalDialog));
        Controls.ManageChargesLineDetailDialog = ManageChargesLineDetailDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var NumberRangeInputDialog = (function (_super) {
            __extends(NumberRangeInputDialog, _super);
            function NumberRangeInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "NumberRangeInputDialog";
                _this.minimum = ko.observable(null);
                _this.maximum = ko.observable(null);
                return _this;
            }
            NumberRangeInputDialog.prototype.onShowing = function (dialogState) {
                this.visible(true);
            };
            NumberRangeInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, {
                            minimum: NumberRangeInputDialog.getNumber(this.minimum()),
                            maximum: NumberRangeInputDialog.getNumber(this.maximum())
                        });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            NumberRangeInputDialog.getNumber = function (numberAsText) {
                var numberAsDecimal = Commerce.NumberExtensions.parseNumber(numberAsText);
                if (Commerce.StringExtensions.isNullOrWhitespace(numberAsText) || !Commerce.ObjectExtensions.isNumber(numberAsDecimal)) {
                    return null;
                }
                else {
                    return numberAsDecimal;
                }
            };
            return NumberRangeInputDialog;
        }(Controls.ModalDialog));
        Controls.NumberRangeInputDialog = NumberRangeInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PaymentOptionsDialog = (function (_super) {
            __extends(PaymentOptionsDialog, _super);
            function PaymentOptionsDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "PaymentOptionsDialog";
                _this.description = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.paymentOptions = ko.observableArray([]);
                _this.isCancelAllowed = ko.observable(true);
                return _this;
            }
            PaymentOptionsDialog.prototype.onShowing = function (dialogState) {
                dialogState.isCancelAllowed = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.isCancelAllowed) ? true : dialogState.isCancelAllowed;
                dialogState.paymentOptions.forEach(function (paymentOption) {
                    paymentOption.secondaryText = Commerce.ObjectExtensions.isNullOrUndefined(paymentOption.secondaryText)
                        ? null : paymentOption.secondaryText;
                    paymentOption.iconClass = Commerce.ObjectExtensions.isNullOrUndefined(paymentOption.iconClass)
                        ? null : paymentOption.iconClass;
                });
                this.title(dialogState.title);
                this.description(dialogState.description);
                this.paymentOptions(dialogState.paymentOptions);
                this.isCancelAllowed(dialogState.isCancelAllowed);
                this.visible(true);
            };
            PaymentOptionsDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            PaymentOptionsDialog.prototype.optionClickHandler = function (selectedPaymentOption) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { paymentOption: selectedPaymentOption });
            };
            return PaymentOptionsDialog;
        }(Controls.ModalDialog));
        Controls.PaymentOptionsDialog = PaymentOptionsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var PriceInputDialog = (function (_super) {
            __extends(PriceInputDialog, _super);
            function PriceInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "PriceInputDialog";
                _this._priceContent = ko.observable("");
                _this.subTitleCssClass("primaryFontColor");
                _this._minValue = Number.NaN;
                _this._maxValue = Number.NaN;
                _this._label = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_5724"));
                return _this;
            }
            Object.defineProperty(PriceInputDialog.prototype, "label", {
                get: function () {
                    return this._label;
                },
                enumerable: true,
                configurable: true
            });
            PriceInputDialog.prototype.onShowing = function (dialogState) {
                if (dialogState) {
                    this._priceContent(Commerce.NumberExtensions.formatNumber(dialogState.defaultPrice, Commerce.NumberExtensions.getDecimalPrecision()));
                    this._minValue = dialogState.minPrice;
                    this._maxValue = dialogState.maxPrice;
                    this._minPriceInclusive = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.minPriceInclusive) ? true : dialogState.minPriceInclusive;
                    this._maxPriceInclusive = Commerce.ObjectExtensions.isNullOrUndefined(dialogState.maxPriceInclusive) ? true : dialogState.maxPriceInclusive;
                }
                else {
                    this._minValue = Number.NaN;
                    this._maxValue = Number.NaN;
                    this._minPriceInclusive = true;
                    this._maxPriceInclusive = true;
                }
                this._shouldMinAmountBeChecked = !isNaN(this._minValue) && ((this._minValue > Number.MIN_VALUE) || !this._minPriceInclusive);
                this._shouldMaxAmountBeChecked = !isNaN(this._maxValue) && ((this._maxValue < Number.MAX_VALUE) || !this._maxPriceInclusive);
                this._minValueDisplayString = Commerce.NumberExtensions.formatNumber(this._minValue, Commerce.NumberExtensions.getDecimalPrecision());
                this._maxValueDisplayString = Commerce.NumberExtensions.formatNumber(this._maxValue, Commerce.NumberExtensions.getDecimalPrecision());
                this.visible(true);
            };
            PriceInputDialog.prototype.onTextBoxEnterEventHandler = function () {
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            PriceInputDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            PriceInputDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var price = Commerce.NumberExtensions.parseNumber(this._priceContent());
                        if (!Commerce.Helpers.CurrencyHelper.isValidAmount(price)) {
                            Commerce.NotificationHandler.displayErrorMessage("string_5725");
                            return;
                        }
                        var errorResourceId = void 0;
                        var firstParam = Commerce.StringExtensions.EMPTY;
                        var secondParam = Commerce.StringExtensions.EMPTY;
                        if (this._shouldMinAmountBeChecked && this._shouldMaxAmountBeChecked) {
                            firstParam = this._minValueDisplayString;
                            secondParam = this._maxValueDisplayString;
                            if (this._minPriceInclusive && this._maxPriceInclusive) {
                                errorResourceId = ((this._minValue <= price) && (this._maxValue >= price)) ? Commerce.StringExtensions.EMPTY : "string_5707";
                            }
                            else if (this._minPriceInclusive && !this._maxPriceInclusive) {
                                errorResourceId = ((this._minValue <= price) && (this._maxValue > price)) ? Commerce.StringExtensions.EMPTY : "string_5708";
                            }
                            else if (!this._minPriceInclusive && this._maxPriceInclusive) {
                                errorResourceId = ((this._minValue < price) && (this._maxValue >= price)) ? Commerce.StringExtensions.EMPTY : "string_5709";
                            }
                            else {
                                errorResourceId = ((this._minValue < price) && (this._maxValue > price)) ? Commerce.StringExtensions.EMPTY : "string_5706";
                            }
                        }
                        else if (this._shouldMinAmountBeChecked) {
                            firstParam = this._minValueDisplayString;
                            if (this._minPriceInclusive) {
                                errorResourceId = (this._minValue <= price) ? Commerce.StringExtensions.EMPTY : "string_5710";
                            }
                            else {
                                errorResourceId = (this._minValue < price) ? Commerce.StringExtensions.EMPTY : "string_5711";
                            }
                        }
                        else if (this._shouldMaxAmountBeChecked) {
                            firstParam = this._maxValueDisplayString;
                            if (this._maxPriceInclusive) {
                                errorResourceId = (this._maxValue >= price) ? Commerce.StringExtensions.EMPTY : "string_5712";
                            }
                            else {
                                errorResourceId = (this._maxValue > price) ? Commerce.StringExtensions.EMPTY : "string_5713";
                            }
                        }
                        if (!Commerce.StringExtensions.isNullOrWhitespace(errorResourceId)) {
                            Commerce.NotificationHandler.displayErrorMessage(errorResourceId, firstParam, secondParam);
                            return;
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, price);
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            return PriceInputDialog;
        }(Controls.ModalDialog));
        Controls.PriceInputDialog = PriceInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var RefinerDialog = (function (_super) {
            __extends(RefinerDialog, _super);
            function RefinerDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "RefinerDialog";
                _this.viewModel = new Commerce.ViewModels.RefinersViewModel();
                return _this;
            }
            RefinerDialog.prototype.onShowing = function (state) {
                var _this = this;
                this._refinerListElement = $(this.element).find(".refinerList");
                this._createRefinerControlHandler = state.createRefinerControlHandler;
                this._validationErrorsTitle = state.validationErrorsTitle;
                this.viewModel.load(state);
                state.refiners.forEach(function (refiner) {
                    if (Commerce.ArrayExtensions.hasElements(refiner.SelectedValues)) {
                        _this.addRefinerUI(refiner, false);
                    }
                });
                this.visible(true);
            };
            RefinerDialog.prototype.afterShow = function () {
                if (Commerce.ArrayExtensions.hasElements(this.viewModel.availableRefiners()) &&
                    this.viewModel.getOriginalRefiners().length === this.viewModel.availableRefiners().length) {
                    this.viewModel.toggleRefinerListFlyout()();
                }
            };
            RefinerDialog.prototype.clear = function () {
                this.viewModel.clear();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._refinerListElement)) {
                    this._refinerListElement.html("");
                }
            };
            RefinerDialog.prototype.addRefinerUI = function (selectedRefiner, hideRefinerListFlyout) {
                var _this = this;
                if (hideRefinerListFlyout === void 0) { hideRefinerListFlyout = true; }
                if (Commerce.ObjectExtensions.isNullOrUndefined(selectedRefiner)) {
                    return;
                }
                if (hideRefinerListFlyout) {
                    this.viewModel.toggleRefinerListFlyout()();
                }
                this.indeterminateWaitVisible(true);
                this.viewModel.loadRefinerValues(selectedRefiner)
                    .always(function () { _this.indeterminateWaitVisible(false); })
                    .done(function (result) {
                    if (!result.canceled) {
                        _this.createRefinerUI(selectedRefiner);
                        _this.viewModel.availableRefiners.remove(selectedRefiner);
                    }
                });
            };
            RefinerDialog.prototype.applyRefinerButtonClick = function (operationId) {
                Commerce.RetailLogger.dialogsRefinerDialogButtonClicked(operationId);
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var validationErrors = this.viewModel.validateRefiners();
                        if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                            Commerce.NotificationHandler.displayClientErrors(validationErrors, this._validationErrorsTitle);
                        }
                        else {
                            this.dialogResult.resolve(Commerce.DialogResult.OK, this.viewModel.getSelectedRefinerValues());
                        }
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            RefinerDialog.prototype.createRefinerUI = function (refiner) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner)) {
                    var container = document.createElement("div");
                    container.className = "borderBottom marginTop08 padBottom08 width100Percent";
                    if (this._createRefinerControlHandler(refiner, container, this.refinerRemovedHandler.bind(this))) {
                        this._refinerListElement.append(container);
                    }
                }
                else {
                    Commerce.RetailLogger.viewsControlsRefinersWrongInputParameters(JSON.stringify(refiner));
                    return false;
                }
                return true;
            };
            RefinerDialog.prototype.refinerRemovedHandler = function (refiner) {
                this.viewModel.availableRefiners.push(refiner);
            };
            return RefinerDialog;
        }(Controls.ModalDialog));
        Controls.RefinerDialog = RefinerDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SearchRefinerDialog = (function (_super) {
            __extends(SearchRefinerDialog, _super);
            function SearchRefinerDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SearchRefinerDialog";
                var searchRefinersViewModelOptions = {
                    isRemoteSearchEnabled: Commerce.ApplicationContext.Instance.deviceConfiguration.EnableAxCustomerSearch
                };
                _this.viewModel = new Commerce.ViewModels.SearchRefinersViewModel(searchRefinersViewModelOptions);
                return _this;
            }
            SearchRefinerDialog.prototype.onShowing = function (state) {
                this.viewModel.initializeRefinerValues(state.refiners);
                this.viewModel.selectedSearchLocation(state.preSelectedSearchLocation);
                this.visible(true);
            };
            SearchRefinerDialog.prototype.afterShow = function () {
                if (this.viewModel.isSelectedSearchLocationLocal() &&
                    this.viewModel.localStoreRefinerViewModel.hasRefiners() &&
                    !this.viewModel.localStoreRefinerViewModel.hasSelectedRefiners()) {
                    this.viewModel.localStoreRefinerViewModel.toggleRefinerListFlyout()();
                }
            };
            SearchRefinerDialog.prototype.applyRefinerButtonClick = function (operationId) {
                Commerce.RetailLogger.dialogsRefinerDialogButtonClicked(operationId);
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                    case Controls.Dialog.OperationIds.CLOSE_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        var validationErrors = this.viewModel.localStoreRefinerViewModel.validateRefiners();
                        if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                            Commerce.NotificationHandler.displayClientErrors(validationErrors);
                        }
                        else {
                            var result = {
                                selectedRefiners: this.viewModel.getSelectedRefinerValues(),
                                selectedSearchLocation: this.viewModel.selectedSearchLocation()
                            };
                            this.dialogResult.resolve(Commerce.DialogResult.OK, result);
                        }
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            SearchRefinerDialog.prototype.dialogCloseButtonClick = function () {
                this.applyRefinerButtonClick(Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
            };
            return SearchRefinerDialog;
        }(Controls.ModalDialog));
        Controls.SearchRefinerDialog = SearchRefinerDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectCashManagementTransactionEndpointDialog = (function (_super) {
            __extends(SelectCashManagementTransactionEndpointDialog, _super);
            function SelectCashManagementTransactionEndpointDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectCashManagementTransactionEndpointDialog";
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedShift) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedStoreSafe)) {
                    throw new Error("Invalid options passed to constructor of ISelectCashManagementTransactionEndpointDialogState: "
                        + "Both 'preSelectedShift' and 'preSelectedStoreSafe' can't be supplied");
                }
                _this.title(options.title);
                _this.subTitle(options.subTitle);
                _this.cancelButtonLabel = Commerce.ViewModelAdapter.getResourceString("string_76");
                _this.storeSafesForDisplay = [];
                if (Commerce.ArrayExtensions.hasElements(options.storeSafes)) {
                    _this.storeSafesForDisplay = options.storeSafes.map(function (storeSafe) {
                        return {
                            storeSafe: storeSafe,
                            safeNumberForDisplay: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30111"), storeSafe.SafeNumber),
                            isPreSelected: !Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedStoreSafe)
                                && options.preSelectedStoreSafe.SafeNumber === storeSafe.SafeNumber
                        };
                    });
                }
                _this.shiftsForDisplay = [];
                if (Commerce.ArrayExtensions.hasElements(options.shifts)) {
                    _this.shiftsForDisplay = options.shifts.map(function (shift) {
                        return {
                            shift: shift,
                            shiftIdForDisplay: Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_30110"), shift.ShiftId),
                            isPreSelected: !Commerce.ObjectExtensions.isNullOrUndefined(options.preSelectedShift)
                                && options.preSelectedShift.ShiftId === shift.ShiftId
                                && options.preSelectedShift.ShiftTerminalId === shift.TerminalId
                        };
                    });
                }
                return _this;
            }
            SelectCashManagementTransactionEndpointDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            SelectCashManagementTransactionEndpointDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectCashManagementTransactionEndpointDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Close);
            };
            SelectCashManagementTransactionEndpointDialog.prototype.selectStoreSafeHandler = function (storeSafe) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedStoreSafe: storeSafe });
            };
            SelectCashManagementTransactionEndpointDialog.prototype.selectShiftHandler = function (shift) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, {
                    selectedShift: {
                        ShiftTerminalId: shift.TerminalId,
                        ShiftId: shift.ShiftId,
                        Store: shift.StoreId
                    }
                });
            };
            return SelectCashManagementTransactionEndpointDialog;
        }(Controls.ModalDialog));
        Controls.SelectCashManagementTransactionEndpointDialog = SelectCashManagementTransactionEndpointDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectCustomerLoyaltyCardDialog = (function (_super) {
            __extends(SelectCustomerLoyaltyCardDialog, _super);
            function SelectCustomerLoyaltyCardDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectCustomerLoyaltyCardDialog";
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    _this.loyaltyCards = options.loyaltyCards;
                    _this.enableSelect = (Commerce.ObjectExtensions.isNullOrUndefined(options.enableSelect))
                        ? ko.observable(false) : ko.observable(options.enableSelect);
                }
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3265"));
                _this._ignoreTaskRecorderEventResults = [Commerce.DialogResult.OK];
                return _this;
            }
            SelectCustomerLoyaltyCardDialog.prototype.selectCustomerLoyaltyCardButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this._cancelDialog();
                        break;
                }
            };
            SelectCustomerLoyaltyCardDialog.prototype.onShowing = function (selectCustomerLoyaltyCardDialogState) {
                this.subTitle(this.enableSelect() ? Commerce.ViewModelAdapter.getResourceString("string_3266") : "");
                this.visible(true);
            };
            SelectCustomerLoyaltyCardDialog.prototype.loyaltyCardInvokedHandler = function (selectedLoyaltyCard) {
                if (this.enableSelect() && !Commerce.ObjectExtensions.isNullOrUndefined(selectedLoyaltyCard)) {
                    this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedLoyaltyCardId: selectedLoyaltyCard.CardNumber });
                }
            };
            SelectCustomerLoyaltyCardDialog.prototype._cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SelectCustomerLoyaltyCardDialog;
        }(Controls.ModalDialog));
        Controls.SelectCustomerLoyaltyCardDialog = SelectCustomerLoyaltyCardDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectPackingSlipIdDialog = (function (_super) {
            __extends(SelectPackingSlipIdDialog, _super);
            function SelectPackingSlipIdDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectPackingSlipIdDialog";
                _this.salesId = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.packingSlipsData = ko.observableArray([]);
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_13176"));
                return _this;
            }
            SelectPackingSlipIdDialog.prototype.onShowing = function (state) {
                this.salesId(state.salesId);
                this.packingSlipsData(state.packingSlipsData);
                this.visible(true);
            };
            SelectPackingSlipIdDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectPackingSlipIdDialog.prototype.itemClickHandler = function (event) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedPackingSlipData: event.data });
                return true;
            };
            return SelectPackingSlipIdDialog;
        }(Controls.ModalDialog));
        Controls.SelectPackingSlipIdDialog = SelectPackingSlipIdDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectSalesLinesDialog = (function (_super) {
            __extends(SelectSalesLinesDialog, _super);
            function SelectSalesLinesDialog(options) {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectSalesLinesDialog";
                _this.salesLinesForDisplay = ko.observableArray([]);
                _this.selectedSalesLines = ko.observableArray([]);
                _this.noSalesLinesSelected = ko.computed(function () {
                    return !Commerce.ArrayExtensions.hasElements(_this.selectedSalesLines());
                }, _this);
                _this._selectionMode = options.selectionMode;
                return _this;
            }
            Object.defineProperty(SelectSalesLinesDialog.prototype, "selectionMode", {
                get: function () {
                    return this._selectionMode;
                },
                enumerable: true,
                configurable: true
            });
            SelectSalesLinesDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedSalesLines: this.selectedSalesLines() });
                        break;
                }
            };
            SelectSalesLinesDialog.prototype.onShowing = function (dialogState) {
                var title = dialogState.title || Commerce.StringExtensions.EMPTY;
                this.title(title);
                var subtitle = dialogState.subtitle || Commerce.StringExtensions.EMPTY;
                this.subTitle(subtitle);
                this.salesLinesForDisplay(dialogState.salesLines);
                this.visible(true);
            };
            SelectSalesLinesDialog.prototype.afterShow = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.visible) || !this.visible()) {
                    return;
                }
                var dataListViewModel;
                var listElement = document.getElementById(SelectSalesLinesDialog.SALES_LINES_DATA_LIST_ELEMENT_ID);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(listElement) && !Commerce.ObjectExtensions.isNullOrUndefined(listElement.dataListViewModel)) {
                    dataListViewModel = listElement.dataListViewModel;
                }
                if (dataListViewModel instanceof Controls.DataList.DataListViewModel) {
                    dataListViewModel.refreshList();
                }
            };
            SelectSalesLinesDialog.SALES_LINES_DATA_LIST_ELEMENT_ID = "salesLinesDataList";
            return SelectSalesLinesDialog;
        }(Controls.ModalDialog));
        Controls.SelectSalesLinesDialog = SelectSalesLinesDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectStoreDialog = (function (_super) {
            __extends(SelectStoreDialog, _super);
            function SelectStoreDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectStoreDialog";
                _this.stores = ko.observableArray([]);
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3887"));
                _this.subTitle(Commerce.ViewModelAdapter.getResourceString("string_3420"));
                return _this;
            }
            SelectStoreDialog.prototype.onShowing = function (state) {
                this.stores(state.stores);
                this.visible(true);
            };
            SelectStoreDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectStoreDialog.prototype.itemClickHandler = function (event) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedOrgUnit: event.data });
                return true;
            };
            return SelectStoreDialog;
        }(Controls.ModalDialog));
        Controls.SelectStoreDialog = SelectStoreDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectVariantDialog = (function (_super) {
            __extends(SelectVariantDialog, _super);
            function SelectVariantDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectVariantDialog";
                _this._viewModel = new Commerce.ViewModels.SelectVariantViewModel();
                _this._isLoadingData = false;
                _this._ignoreTaskRecorderEventResults = [Commerce.DialogResult.OK];
                _this.focusOnFirstElementCallback = ko.observable(function () { return; });
                return _this;
            }
            Object.defineProperty(SelectVariantDialog.prototype, "viewModel", {
                get: function () {
                    return this._viewModel;
                },
                enumerable: true,
                configurable: true
            });
            SelectVariantDialog.prototype.onShowing = function (dialogState) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(dialogState.product)) {
                    var product = dialogState.product;
                    this.title(Commerce.ViewModelAdapter.getResourceString("string_923"));
                    this.subTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_929"), product.ItemId, product.Name));
                    this._viewModel.load({ product: product, preLoadedDimensionDetails: dialogState.preLoadedDimensionDetails });
                    this.visible(true);
                }
            };
            SelectVariantDialog.prototype.clearResult = function () {
                _super.prototype.clearResult.call(this);
                this._isLoadingData = false;
                this.undoPreviousSelection();
            };
            SelectVariantDialog.prototype.undoPreviousSelection = function () {
                this._viewModel.undoPreviousSelection();
                this._setFocusOnFirstDimensionValue();
            };
            SelectVariantDialog.prototype.selectionInvokedHandler = function (event) {
                var _this = this;
                if (!this._isLoadingData) {
                    this.indeterminateWaitVisible(true);
                    this._isLoadingData = true;
                    this._viewModel.makeSelection(event.data).done(function (selectionCompleted) {
                        if (selectionCompleted) {
                            _this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedDimensions: _this._viewModel.SelectedDimensions });
                        }
                        else {
                            _this.indeterminateWaitVisible(false);
                            _this._isLoadingData = false;
                            _this._setFocusOnFirstDimensionValue();
                        }
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        _this.indeterminateWaitVisible(false);
                        _this._isLoadingData = false;
                    });
                }
                return true;
            };
            SelectVariantDialog.prototype.dialogButtonClick = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    default:
                        throw "Unknown operation Id: " + operationId;
                }
            };
            SelectVariantDialog.prototype._setFocusOnFirstDimensionValue = function () {
                var _this = this;
                Commerce.Host.instance.timers.setImmediate(function () {
                    _this.focusOnFirstElementCallback()();
                });
            };
            return SelectVariantDialog;
        }(Controls.ModalDialog));
        Controls.SelectVariantDialog = SelectVariantDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectWarehouseDialog = (function (_super) {
            __extends(SelectWarehouseDialog, _super);
            function SelectWarehouseDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectWarehouseDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3891"));
                _this.viewModel = new Commerce.ViewModels.SelectWarehouseViewModel();
                return _this;
            }
            SelectWarehouseDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            SelectWarehouseDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectWarehouseDialog.prototype.itemInvokedHandler = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedWarehouse: item });
            };
            SelectWarehouseDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SelectWarehouseDialog;
        }(Controls.ModalDialog));
        Controls.SelectWarehouseDialog = SelectWarehouseDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SelectWarehouseLocationDialog = (function (_super) {
            __extends(SelectWarehouseLocationDialog, _super);
            function SelectWarehouseLocationDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SelectWarehouseLocationDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_3892"));
                _this.viewModel = new Commerce.ViewModels.SelectWarehouseLocationViewModel();
                return _this;
            }
            SelectWarehouseLocationDialog.prototype.onShowing = function () {
                this.visible(true);
            };
            SelectWarehouseLocationDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            SelectWarehouseLocationDialog.prototype.itemInvokedHandler = function (item) {
                this.dialogResult.resolve(Commerce.DialogResult.OK, { selectedWarehouseLocation: item });
            };
            SelectWarehouseLocationDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return SelectWarehouseLocationDialog;
        }(Controls.ModalDialog));
        Controls.SelectWarehouseLocationDialog = SelectWarehouseLocationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SerialNumberInputDialog = (function (_super) {
            __extends(SerialNumberInputDialog, _super);
            function SerialNumberInputDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SerialNumberInputDialog";
                _this._serialNumber = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.subTitleCssClass("primaryFontColor");
                _this.okButtonDisabled = ko.computed(function () {
                    return Commerce.StringExtensions.isNullOrWhitespace(_this._serialNumber());
                });
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_820"));
                return _this;
            }
            SerialNumberInputDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                if (dialogState) {
                    var product = dialogState.product;
                    this.subTitle(Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_929"), product.ItemId, product.Name));
                }
                this._correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.RetailLogger.dialogsSerialNumberInputDialogShown(this._correlationId);
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) { return _this._onValueScanned(barcode); });
                this.visible(true);
            };
            SerialNumberInputDialog.prototype.onHidden = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                _super.prototype.onHidden.call(this);
            };
            SerialNumberInputDialog.prototype.buttonClickHandler = function (buttonId) {
                Commerce.RetailLogger.dialogsSerialNumberInputDialogButtonClicked(buttonId, this._correlationId);
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, this._serialNumber());
                        break;
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                    case Commerce.Controls.SerialNumberInputDialog.ADD_LATER_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.OK, null);
                        break;
                }
            };
            SerialNumberInputDialog.prototype.dialogCloseButtonClick = function () {
                this.buttonClickHandler(Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
            };
            SerialNumberInputDialog.prototype._onValueScanned = function (value) {
                Commerce.RetailLogger.dialogsSerialNumberInputDialogValueScanned(this._correlationId);
                this._serialNumber(value);
                this.buttonClickHandler(Controls.Dialog.OperationIds.OK_BUTTON_CLICK);
            };
            SerialNumberInputDialog.ADD_LATER_BUTTON_CLICK = "addLaterButtonClick";
            return SerialNumberInputDialog;
        }(Controls.ModalDialog));
        Controls.SerialNumberInputDialog = SerialNumberInputDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ShiftActionDialog = (function (_super) {
            __extends(ShiftActionDialog, _super);
            function ShiftActionDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "ShiftActionDialog";
                _this.shiftDialogMethods = ko.observableArray([]);
                _this.shiftDialogTitle = ko.observable(Commerce.StringExtensions.EMPTY);
                _this._ignoreTaskRecorderEventResults = [Commerce.DialogResult.OK];
                return _this;
            }
            ShiftActionDialog.prototype.onShowing = function (shiftActions) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(shiftActions)) {
                    this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                    return;
                }
                this.shiftDialogTitle(shiftActions.dialogTitle);
                this.shiftDialogMethods(this.getShiftDialogMethodsForDisplay(shiftActions));
                this.visible(true);
            };
            ShiftActionDialog.prototype.buttonClickHandler = function (buttonId) {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            ShiftActionDialog.prototype.shiftDialogClickHandler = function (eventArgs) {
                var action = eventArgs.data.Action;
                this.dialogResult.resolve(Commerce.DialogResult.OK, action);
            };
            ShiftActionDialog.prototype.getShiftDialogMethodsForDisplay = function (shiftActions) {
                var tileFields = [];
                var tileField;
                if (this.getCanOpenShift(shiftActions)) {
                    tileField = {
                        Action: Commerce.Activities.ShiftActionType.NewShift,
                        value: Commerce.ViewModelAdapter.getResourceString("string_4002")
                    };
                    tileFields.push(tileField);
                }
                if (Commerce.ArrayExtensions.hasElements(shiftActions.reusableShifts)
                    || Commerce.ArrayExtensions.hasElements(shiftActions.suspendedShifts)) {
                    tileField = {
                        Action: Commerce.Activities.ShiftActionType.ExistingShift,
                        value: Commerce.ViewModelAdapter.getResourceString("string_4035")
                    };
                    tileFields.push(tileField);
                }
                tileField = {
                    Action: Commerce.Activities.ShiftActionType.NonDrawer,
                    value: Commerce.ViewModelAdapter.getResourceString("string_4004")
                };
                tileFields.push(tileField);
                return tileFields;
            };
            ShiftActionDialog.prototype.getCanOpenShift = function (shiftActions) {
                var result = false;
                var drawer = Commerce.ArrayExtensions.firstOrUndefined(shiftActions.availableCashDrawers);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(drawer)
                    && (!drawer.IsSharedShiftDrawer || !shiftActions.reusableShifts.some(function (shift) { return shift.IsShared; }))) {
                    result = true;
                }
                return result;
            };
            return ShiftActionDialog;
        }(Controls.ModalDialog));
        Controls.ShiftActionDialog = ShiftActionDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var ShowSalesOrderAttributeGroupsDialog = (function (_super) {
            __extends(ShowSalesOrderAttributeGroupsDialog, _super);
            function ShowSalesOrderAttributeGroupsDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "ShowSalesOrderAttributeGroupsDialog";
                _this.attributeGroupViewModels = ko.observableArray([]);
                return _this;
            }
            ShowSalesOrderAttributeGroupsDialog.prototype.onShowing = function (dialogInput) {
                var _this = this;
                this.title(dialogInput.title);
                var onEditAsync = function (attributeValues) {
                    _this.indeterminateWaitVisible(true);
                    return dialogInput.onEditAsync(attributeValues).always(function () {
                        _this.indeterminateWaitVisible(false);
                    });
                };
                this.attributeGroupViewModels(Commerce.ArrayExtensions.hasElements(dialogInput.attributeGroups)
                    ? dialogInput.attributeGroups.map(function (attributeGroup) { return new Commerce.ViewModels.SalesOrderAttributeGroupViewModel({
                        attributeGroup: attributeGroup,
                        onEditAsync: onEditAsync
                    }); })
                    : []);
                this.attributeGroupViewModels().forEach(function (attributeGroup) {
                    attributeGroup.updateAttributeViewModels(dialogInput.attributeValues);
                });
                this.visible(true);
            };
            ShowSalesOrderAttributeGroupsDialog.prototype.dialogCloseButtonClick = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return ShowSalesOrderAttributeGroupsDialog;
        }(Controls.ModalDialog));
        Controls.ShowSalesOrderAttributeGroupsDialog = ShowSalesOrderAttributeGroupsDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var SignatureDialog = (function (_super) {
            __extends(SignatureDialog, _super);
            function SignatureDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "SignatureDialog";
                _this._paint = false;
                _this._startX = 0;
                _this._startY = 0;
                _this._canvasX = 0;
                _this._canvasY = 0;
                _this._points = [];
                _this._endPoint = new Commerce.Proxy.Entities.Point(0xFFFFFFFF, 0xFFFFFFFF);
                _this._bmp = Commerce.StringExtensions.EMPTY;
                _this._correlationId = Commerce.StringExtensions.EMPTY;
                _this._signatureCanvasId = "signaturecanvas";
                _this._padding = 20;
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_6900"));
                _this.allowClear = ko.observable(false);
                _this.hasNoSignatureData = ko.observable(true);
                _this.allowSignatureEntry = ko.observable(false);
                _this.allowRecapture = ko.observable(false);
                _this.focusOnOk = ko.observable(false);
                return _this;
            }
            SignatureDialog.prototype.onShowing = function (dialogState) {
                var _this = this;
                dialogState = dialogState || {
                    allowRecapture: false,
                    correlationId: Commerce.StringExtensions.EMPTY,
                    signatureData: null,
                    verifyOnly: false
                };
                this._correlationId = dialogState.correlationId;
                this.allowClear(!dialogState.verifyOnly);
                this.allowSignatureEntry(!dialogState.verifyOnly);
                this.allowRecapture(dialogState.verifyOnly && dialogState.allowRecapture);
                this.initializeCanvas();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.signatureData) && (dialogState.signatureData.length > 0)) {
                    var imageDataByteArray = Commerce.SerializationHelpers.fromBase64String(dialogState.signatureData);
                    if (imageDataByteArray.byteLength > 2 && imageDataByteArray[0] === 0x42 && imageDataByteArray[1] === 0x4d) {
                        this._bmp = "data:image/bmp;base64," + dialogState.signatureData;
                    }
                    else {
                        var retVal = this._getByteArrayAsPoints(imageDataByteArray);
                        if (retVal.error) {
                            Commerce.NotificationHandler.displayClientErrors([retVal.error])
                                .done(function () {
                                _this.buttonClickHandler(Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
                            }).fail(function () {
                                _this.buttonClickHandler(Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK);
                            });
                            return;
                        }
                        else {
                            this._points = retVal.points;
                        }
                    }
                }
                this.visible(true);
            };
            SignatureDialog.prototype.afterShow = function () {
                var canvasWidth = this._signatureCanvas.width;
                var canvasHeight = this._signatureCanvas.height;
                this._signatureCanvas.getContext("2d").clearRect(0, 0, this._signatureCanvas.width, this._signatureCanvas.height);
                if (Commerce.ArrayExtensions.hasElements(this._points)) {
                    this.drawPoints(this._points, this._padding);
                    this.focusOnOk(true);
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(this._bmp)) {
                    var drawingContext_2 = this._signatureCanvas.getContext("2d");
                    var myImage_2 = new Image();
                    myImage_2.onload = function () {
                        drawingContext_2.drawImage(myImage_2, 0, 0, myImage_2.width, myImage_2.height, 0, 0, canvasWidth, canvasHeight);
                    };
                    myImage_2.src = this._bmp;
                    drawingContext_2.closePath();
                    this.hasNoSignatureData(false);
                    this.focusOnOk(true);
                }
            };
            SignatureDialog.prototype.initializeCanvas = function () {
                this._signatureCanvas = document.getElementById(this._signatureCanvasId);
                if (this.allowSignatureEntry()) {
                    this._mousedown = this._mousedown.bind(this);
                    this._mousemove = this._mousemove.bind(this);
                    this._mouseup = this._mouseup.bind(this);
                    this._mouseout = this._mouseout.bind(this);
                    this.clearCanvas = this.clearCanvas.bind(this);
                    this._signatureCanvas.addEventListener("mousedown", this._mousedown, false);
                    this._signatureCanvas.addEventListener("mousemove", this._mousemove, false);
                    this._signatureCanvas.addEventListener("mouseup", this._mouseup, false);
                    this._signatureCanvas.addEventListener("mouseout", this._mouseout, false);
                    this._signatureCanvas.addEventListener("touchstart", this._mousedown, true);
                    this._signatureCanvas.addEventListener("touchmove", this._mousemove, true);
                    this._signatureCanvas.addEventListener("touchend", this._mouseup, true);
                    this._signatureCanvas.addEventListener("touchcancel", this._mouseout, true);
                }
                this._points = [];
                this._bmp = Commerce.StringExtensions.EMPTY;
            };
            SignatureDialog.prototype.clearCanvas = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Clear");
                this._signatureCanvas.getContext("2d").clearRect(0, 0, this._signatureCanvas.width, this._signatureCanvas.height);
                this._points = [];
                this._bmp = Commerce.StringExtensions.EMPTY;
                this.hasNoSignatureData(true);
            };
            SignatureDialog.prototype.drawPoints = function (points, paddingAmount) {
                var _this = this;
                if (paddingAmount === void 0) { paddingAmount = 0; }
                if (!Commerce.ArrayExtensions.hasElements(points)) {
                    this.clearCanvas();
                    return;
                }
                var imageBounds = this._getImageBounds(points);
                var imageScaleAndOffset = this._getScaleAndOffset(imageBounds, paddingAmount);
                var drawingContext = this._signatureCanvas.getContext("2d");
                var startPoint = null;
                var pointNotDrawn = false;
                drawingContext.beginPath();
                drawingContext.strokeStyle = this._getLineColor();
                drawingContext.globalAlpha = 0.7;
                points.forEach(function (point) {
                    if (_this._isEndpoint(point)) {
                        if (pointNotDrawn) {
                            drawingContext.moveTo(startPoint.x, startPoint.y);
                            drawingContext.lineTo(startPoint.x, startPoint.y);
                            drawingContext.stroke();
                        }
                        startPoint = null;
                        pointNotDrawn = false;
                    }
                    else if (startPoint == null) {
                        startPoint = {
                            x: Math.floor(((point.x - imageBounds.leftX) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetX),
                            y: Math.floor(((point.y - imageBounds.topY) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetY)
                        };
                        pointNotDrawn = true;
                    }
                    else {
                        var endPoint = {
                            x: Math.floor(((point.x - imageBounds.leftX) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetX),
                            y: Math.floor(((point.y - imageBounds.topY) * imageScaleAndOffset.scale) + imageScaleAndOffset.offsetY)
                        };
                        drawingContext.moveTo(startPoint.x, startPoint.y);
                        drawingContext.lineTo(endPoint.x, endPoint.y);
                        drawingContext.stroke();
                        startPoint = endPoint;
                        pointNotDrawn = false;
                    }
                });
                if (pointNotDrawn) {
                    drawingContext.moveTo(startPoint.x, startPoint.y);
                    drawingContext.lineTo(startPoint.x, startPoint.y);
                    drawingContext.stroke();
                }
                drawingContext.closePath();
                this.hasNoSignatureData(false);
            };
            SignatureDialog.prototype.buttonClickHandler = function (operationId) {
                switch (operationId) {
                    case Controls.Dialog.OperationIds.OK_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Accept");
                        var capturedSignatureData = Commerce.StringExtensions.EMPTY;
                        try {
                            if (Commerce.StringExtensions.isEmptyOrWhitespace(this._bmp)) {
                                var imageDataByteArray = this._getPointsAsByteArray();
                                capturedSignatureData = Commerce.SerializationHelpers.toBase64String(imageDataByteArray);
                            }
                            else {
                                capturedSignatureData = this._bmp.substr(22);
                            }
                        }
                        catch (error) {
                            if (error && error.message && error.message === Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM) {
                                this.dialogResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM)]);
                                return;
                            }
                        }
                        this.dialogResult.resolve(Commerce.DialogResult.OK, { signatureData: capturedSignatureData });
                        break;
                    case Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Skip");
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel, { signatureData: Commerce.StringExtensions.EMPTY });
                        break;
                }
            };
            SignatureDialog.prototype.recaptureSignature = function () {
                Commerce.RetailLogger.posPaymentUIButtonClicked(this._correlationId, "SignatureDialog", "Recapture");
                this.dialogResult.resolve(Commerce.DialogResult.No, { signatureData: Commerce.StringExtensions.EMPTY });
            };
            SignatureDialog._getEvent = function (ev) {
                if (Commerce.ArrayExtensions.hasElements(ev.touches)) {
                    ev.preventDefault();
                    return ev.touches[0];
                }
                else if (Commerce.ArrayExtensions.hasElements(ev.changedTouches)) {
                    ev.preventDefault();
                    return ev.changedTouches[0];
                }
                return ev;
            };
            SignatureDialog.prototype._getPointsAsByteArray = function () {
                if (!Commerce.SerializationHelpers.isSystemLittleEndian()) {
                    throw new Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM);
                }
                var points = this._points;
                var imageDataByteArray = new Uint8Array(points.length * 4 * 2);
                var imageDataByteArrayIndex = 0;
                points.forEach(function (point) {
                    imageDataByteArray[imageDataByteArrayIndex] = point.x & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 1] = (point.x >>> 8) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 2] = (point.x >>> 16) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 3] = (point.x >>> 24) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 4] = point.y & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 5] = (point.y >>> 8) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 6] = (point.y >>> 16) & 0x000000FF;
                    imageDataByteArray[imageDataByteArrayIndex + 7] = (point.y >>> 24) & 0x000000FF;
                    imageDataByteArrayIndex += 8;
                });
                return imageDataByteArray;
            };
            SignatureDialog.prototype._getOffsetPosition = function (element) {
                var currentLeft = 0;
                var currentTop = 0;
                if (element.offsetLeft) {
                    currentLeft += element.offsetLeft;
                }
                if (element.offsetTop) {
                    currentTop += element.offsetTop;
                }
                if (element.scrollTop && element.scrollTop > 0) {
                    currentTop -= element.scrollTop;
                }
                if (element.offsetParent) {
                    var position = this._getOffsetPosition(element.offsetParent);
                    currentLeft += position[0];
                    currentTop += position[1];
                }
                return [currentLeft, currentTop];
            };
            SignatureDialog.prototype._mousedown = function (ev) {
                if (this._signatureCanvas.width !== this._signatureCanvas.offsetWidth) {
                    this._signatureCanvas.width = this._signatureCanvas.offsetWidth;
                }
                if (this._signatureCanvas.height !== this._signatureCanvas.offsetHeight) {
                    this._signatureCanvas.height = this._signatureCanvas.offsetHeight;
                }
                var position = this._getOffsetPosition(this._signatureCanvas);
                this._canvasX = position[0];
                this._canvasY = position[1];
                ev = SignatureDialog._getEvent(ev);
                this._paint = true;
                this._startX = ev.pageX - this._canvasX;
                this._startY = ev.pageY - this._canvasY;
                this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                this.hasNoSignatureData(false);
            };
            SignatureDialog.prototype._getLineColor = function () {
                var lineColor = "#000";
                if (matchMedia("screen and (-ms-high-contrast)").matches) {
                    lineColor = "WindowText";
                }
                return lineColor;
            };
            SignatureDialog.prototype._mousemove = function (ev) {
                ev = SignatureDialog._getEvent(ev);
                if (this._paint) {
                    var context = this._signatureCanvas.getContext("2d");
                    context.beginPath();
                    context.strokeStyle = this._getLineColor();
                    context.moveTo(this._startX, this._startY);
                    context.lineTo(ev.pageX - this._canvasX, ev.pageY - this._canvasY);
                    context.closePath();
                    context.stroke();
                    this._startX = ev.pageX - this._canvasX;
                    this._startY = ev.pageY - this._canvasY;
                    this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                    this.hasNoSignatureData(false);
                }
            };
            SignatureDialog.prototype._mouseup = function (ev) {
                if (this._paint) {
                    this._paint = false;
                    this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                    this._points.push(this._endPoint);
                    this.hasNoSignatureData(false);
                }
            };
            SignatureDialog.prototype._mouseout = function (ev) {
                if (this._paint) {
                    this._paint = false;
                    this._points.push(new Commerce.Proxy.Entities.Point(this._startX, this._startY));
                    this._points.push(this._endPoint);
                    this.hasNoSignatureData(false);
                }
            };
            SignatureDialog.prototype._isEndpoint = function (point) {
                var isEndpoint = false;
                if (point) {
                    isEndpoint = (point.x === this._endPoint.x) || (point.y === this._endPoint.y);
                }
                return isEndpoint;
            };
            SignatureDialog.prototype._getByteArrayAsPoints = function (byteArray) {
                var retVal = {
                    error: null,
                    points: []
                };
                if (!Commerce.SerializationHelpers.isSystemLittleEndian()) {
                    retVal.error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM);
                    return retVal;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(byteArray) || (byteArray.length === 0) || ((byteArray.length % 8) !== 0)) {
                    retVal.error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SIGNATURE_INVALID_FORMAT);
                    return retVal;
                }
                for (var imageDataByteArrayIndex = 0; imageDataByteArrayIndex < byteArray.length; imageDataByteArrayIndex += 8) {
                    var x = 0;
                    x = byteArray[imageDataByteArrayIndex] & 0x000000FF;
                    x = x | ((byteArray[imageDataByteArrayIndex + 1] << 8) & 0x0000FF00);
                    x = x | ((byteArray[imageDataByteArrayIndex + 2] << 16) & 0x00FF0000);
                    x = x | ((byteArray[imageDataByteArrayIndex + 3] << 24) & 0xFF000000);
                    x = x >>> 0;
                    var y = 0;
                    y = byteArray[imageDataByteArrayIndex + 4];
                    y = y | (byteArray[imageDataByteArrayIndex + 5] << 8);
                    y = y | (byteArray[imageDataByteArrayIndex + 6] << 16);
                    y = y | (byteArray[imageDataByteArrayIndex + 7] << 24);
                    y = y >>> 0;
                    retVal.points.push(new Commerce.Proxy.Entities.Point(x, y));
                }
                return retVal;
            };
            SignatureDialog.prototype._getScaleAndOffset = function (imageBounds, paddingAmount) {
                var scaleX = (this._signatureCanvas.width - (paddingAmount * 2)) / imageBounds.width;
                var scaleY = (this._signatureCanvas.height - (paddingAmount * 2)) / imageBounds.height;
                if (scaleX > scaleY) {
                    return {
                        scale: scaleY,
                        offsetX: Math.floor((this._signatureCanvas.width - imageBounds.width * scaleY) / 2),
                        offsetY: paddingAmount
                    };
                }
                else {
                    return {
                        scale: scaleX,
                        offsetX: paddingAmount,
                        offsetY: Math.floor((this._signatureCanvas.height - imageBounds.height * scaleX) / 2)
                    };
                }
            };
            SignatureDialog.prototype._getImageBounds = function (points) {
                var _this = this;
                var imageBounds = {
                    leftX: Number.MAX_VALUE,
                    topY: Number.MAX_VALUE,
                    rightX: Number.MIN_VALUE,
                    bottomY: Number.MIN_VALUE,
                    height: 0,
                    width: 0
                };
                var allEndpoints = true;
                if (Commerce.ArrayExtensions.hasElements(points)) {
                    points.forEach(function (point) {
                        if (!_this._isEndpoint(point)) {
                            allEndpoints = false;
                            imageBounds.leftX = point.x < imageBounds.leftX ? point.x : imageBounds.leftX;
                            imageBounds.topY = point.y < imageBounds.topY ? point.y : imageBounds.topY;
                            imageBounds.rightX = point.x > imageBounds.rightX ? point.x : imageBounds.rightX;
                            imageBounds.bottomY = point.y > imageBounds.bottomY ? point.y : imageBounds.bottomY;
                        }
                    });
                    if (!allEndpoints) {
                        imageBounds.height = imageBounds.bottomY - imageBounds.topY;
                        imageBounds.width = imageBounds.rightX - imageBounds.leftX;
                    }
                }
                return imageBounds;
            };
            return SignatureDialog;
        }(Controls.ModalDialog));
        Controls.SignatureDialog = SignatureDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TaxOverrideDialog = (function (_super) {
            __extends(TaxOverrideDialog, _super);
            function TaxOverrideDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "TaxOverrideDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_4130"));
                _this.taxOverrides = ko.observableArray([]);
                return _this;
            }
            TaxOverrideDialog.prototype.onShowing = function (dialogState) {
                this.overrideType = dialogState.overrideType;
                this.taxOverrides(dialogState.taxOverrides);
                this.visible(true);
            };
            TaxOverrideDialog.prototype.itemInvokedHandler = function (eventArgs) {
                var override = eventArgs.data;
                this.dialogResult.resolve(Commerce.DialogResult.OK, override);
            };
            TaxOverrideDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            return TaxOverrideDialog;
        }(Controls.ModalDialog));
        Controls.TaxOverrideDialog = TaxOverrideDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TimeClockDialogViewMode;
        (function (TimeClockDialogViewMode) {
            TimeClockDialogViewMode[TimeClockDialogViewMode["Options"] = 0] = "Options";
            TimeClockDialogViewMode[TimeClockDialogViewMode["RegistrationDetails"] = 1] = "RegistrationDetails";
        })(TimeClockDialogViewMode = Controls.TimeClockDialogViewMode || (Controls.TimeClockDialogViewMode = {}));
        var TimeRegistrationDialog = (function (_super) {
            __extends(TimeRegistrationDialog, _super);
            function TimeRegistrationDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "TimeRegistrationDialog";
                _this.title(Commerce.ViewModelAdapter.getResourceString("string_4082"));
                _this.viewMode = ko.observable(TimeClockDialogViewMode.Options);
                _this.lastActivityStatus = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.lastActivityDate = ko.observable(Commerce.StringExtensions.EMPTY);
                _this.lastActivityDateLabel = ko.observable(Commerce.ViewModelAdapter.getResourceString("string_4090"));
                _this.statusLabelsVisible = ko.observable(false);
                _this.clockedIn = ko.observable(false);
                _this.optionButtons = ko.observableArray([]);
                return _this;
            }
            TimeRegistrationDialog.prototype.onShowing = function (dialogState) {
                this.indeterminateWaitVisible(true);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(dialogState.employeeActivity)) {
                    var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
                    this.lastActivityDate(formatter.format(dialogState.employeeActivity.ActivityDateTimeOffset));
                    this.setActivityStatus(dialogState.employeeActivity.EmployeeActivityTypeValue, dialogState.employeeActivity.BreakCategory);
                    this.statusLabelsVisible(true);
                }
                else {
                    this.setActivityStatus(Commerce.Proxy.Entities.EmployeeActivityType.None, Commerce.StringExtensions.EMPTY);
                }
                this.visible(true);
            };
            TimeRegistrationDialog.prototype.hide = function () {
                return _super.prototype.hide.call(this);
            };
            TimeRegistrationDialog.prototype.updateTimeClockStatus = function (activityType, registrationDateTime) {
                var actionName;
                switch (activityType) {
                    case Commerce.Proxy.Entities.EmployeeActivityType.ClockIn:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4148");
                        break;
                    case Commerce.Proxy.Entities.EmployeeActivityType.ClockOut:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4149");
                        break;
                    case Commerce.Proxy.Entities.EmployeeActivityType.BreakFromWork:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4152");
                        break;
                    case Commerce.Proxy.Entities.EmployeeActivityType.BreakForLunch:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4153");
                        break;
                    default:
                        actionName = Commerce.ViewModelAdapter.getResourceString("string_4184");
                        break;
                }
                this.lastActivityStatus(actionName);
                var formatter = Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.DATE_TIME);
                this.lastActivityDate(formatter.format(registrationDateTime));
                this.viewMode(TimeClockDialogViewMode.RegistrationDetails);
                this.statusLabelsVisible(true);
                this.lastActivityDateLabel(Commerce.ViewModelAdapter.getResourceString("string_4123"));
                this.indeterminateWaitVisible(false);
            };
            TimeRegistrationDialog.prototype.handleTimeClockAction = function (eventArgs) {
                this.indeterminateWaitVisible(true);
                var action = eventArgs.data.action;
                var actionName = eventArgs.data.actionName;
                this.dialogResult.resolve(Commerce.DialogResult.OK, { employeeActivityType: action, actionName: actionName });
            };
            TimeRegistrationDialog.prototype.buttonClickHandler = function (buttonId) {
                switch (buttonId) {
                    case Commerce.Controls.Dialog.OperationIds.CANCEL_BUTTON_CLICK:
                        this.dialogResult.resolve(Commerce.DialogResult.Cancel);
                        break;
                }
            };
            TimeRegistrationDialog.prototype.setActivityStatus = function (activityType, breakCategory) {
                if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.ClockIn) {
                    this.clockedIn(true);
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4148"));
                }
                else if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.ClockOut) {
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4149"));
                }
                else if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.BreakFlowStart
                    && Commerce.StringExtensions.compare(TimeRegistrationDialog.WORK_BREAK_CATEGORY_NAME, breakCategory, true) === 0) {
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4152"));
                }
                else if (activityType === Commerce.Proxy.Entities.EmployeeActivityType.BreakFlowStart
                    && Commerce.StringExtensions.compare(TimeRegistrationDialog.LUNCH_BREAK_CATEGORY_NAME, breakCategory, true) === 0) {
                    this.lastActivityStatus(Commerce.ViewModelAdapter.getResourceString("string_4153"));
                }
                var optionButtons = [
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.ClockIn,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4084"),
                        disabled: this.clockedIn(),
                        cssClass: "iconRevert icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.ClockOut,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4085"),
                        disabled: !this.clockedIn(),
                        cssClass: "iconRelease icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.BreakFromWork,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4086"),
                        disabled: !this.clockedIn(),
                        cssClass: "iconCafe icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.BreakForLunch,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4087"),
                        disabled: !this.clockedIn(),
                        cssClass: "iconFood icon-20x20"
                    },
                    {
                        action: Commerce.Proxy.Entities.EmployeeActivityType.Logbook,
                        actionName: Commerce.ViewModelAdapter.getResourceString("string_4088"),
                        disabled: false,
                        cssClass: "iconBulletedList icon-20x20"
                    }
                ];
                this.optionButtons(optionButtons);
                this.indeterminateWaitVisible(false);
            };
            TimeRegistrationDialog.WORK_BREAK_CATEGORY_NAME = "DailyBrks";
            TimeRegistrationDialog.LUNCH_BREAK_CATEGORY_NAME = "LunchBrk";
            return TimeRegistrationDialog;
        }(Controls.ModalDialog));
        Controls.TimeRegistrationDialog = TimeRegistrationDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var TutorialVideo = (function () {
            function TutorialVideo(url, duration, description, name, caption) {
                this.url = url;
                this.description = description;
                this.duration = duration;
                this.durationString = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_7621"), this.duration);
                this.name = name;
                this.caption = caption;
                this.active = ko.observable(false);
            }
            return TutorialVideo;
        }());
        var TutorialVideoDialog = (function (_super) {
            __extends(TutorialVideoDialog, _super);
            function TutorialVideoDialog() {
                var _this = _super.call(this) || this;
                _this.controlName = "TutorialVideoDialog";
                _this.init();
                _this.tutorialVideoDisabled = ko.observable(Commerce.UI.Tutorial.tutorialVideoDisabled());
                _this.bubbleTourDisabled = ko.observable(Commerce.UI.Tutorial.bubbleTourDisabled());
                _this.tutorialVideoDisabled.subscribe(function (value) {
                    Commerce.UI.Tutorial.tutorialVideoDisabled(value);
                });
                _this.bubbleTourDisabled.subscribe(function (value) {
                    Commerce.UI.Tutorial.bubbleTourDisabled(value);
                });
                return _this;
            }
            TutorialVideoDialog.prototype.afterShow = function (dialogState) {
                this.visible(true);
                this._video = document.getElementById("videoPlayer");
                this._videoCaption = this._video.getElementsByTagName("track")[0];
                this.playVideo(this._videoList()[0]);
                this.tutorialVideoDisabled(Commerce.UI.Tutorial.tutorialVideoDisabled());
                this.bubbleTourDisabled(Commerce.UI.Tutorial.bubbleTourDisabled());
            };
            TutorialVideoDialog.prototype.onHidden = function () {
                if (document.body === this.element.parentNode) {
                    document.body.removeChild(this.element);
                }
            };
            TutorialVideoDialog.prototype.hideDialog = function () {
                try {
                    this._video.pause();
                }
                catch (e) {
                    Commerce.RetailLogger.viewsTutorialVideoDialogVideoElementThrowsError(String(e));
                }
                this.dialogResult.resolve(Commerce.DialogResult.OK, null);
            };
            TutorialVideoDialog.prototype.playVideo = function (data) {
                if (this._activeVideo) {
                    this._activeVideo.active(false);
                }
                var videoUrl = Commerce.ViewModelAdapter.getResourceString(data.url);
                var captionUrl = Commerce.ViewModelAdapter.getResourceString(data.caption);
                var videoAriaLabel = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_7645"), Commerce.ViewModelAdapter.getResourceString(data.name));
                this._video.setAttribute("aria-label", videoAriaLabel);
                try {
                    this._video.src = videoUrl;
                    this._videoCaption.src = captionUrl;
                    data.active(true);
                    this._activeVideo = data;
                    this._video.load();
                    this._video.play();
                }
                catch (e) {
                    Commerce.RetailLogger.viewsTutorialVideoDialogVideoElementThrowsError(String(e));
                    Commerce.NotificationHandler.displayClientErrors([new Commerce.Proxy.Entities.Error("string_7644")], "string_7643");
                }
            };
            TutorialVideoDialog.prototype.init = function () {
                var _this = this;
                this._videoList = ko.observableArray([]);
                $.getJSON(TutorialVideoDialog._path)
                    .done(function (data) {
                    data.video.forEach(function (video) { return _this._videoList.push(new TutorialVideo(video.url, video.duration, video.description, video.name, video.caption)); });
                });
            };
            TutorialVideoDialog._path = "Views/Controls/tutorialVideo.config.json";
            return TutorialVideoDialog;
        }(Controls.ModalDialog));
        Controls.TutorialVideoDialog = TutorialVideoDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Controls;
    (function (Controls) {
        "use strict";
        var UserInfoDialog = (function (_super) {
            __extends(UserInfoDialog, _super);
            function UserInfoDialog() {
                var _this = _super.call(this) || this;
                _this.useAad = ko.observable(false);
                _this.controlName = "UserInfoDialog";
                _this.isBusy = ko.observable(false);
                var useAadRaw = Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode();
                _this.useAad(useAadRaw);
                return _this;
            }
            UserInfoDialog.prototype.cancelDialog = function () {
                this.dialogResult.resolve(Commerce.DialogResult.Cancel);
            };
            UserInfoDialog.prototype.logOff = function () {
                var _this = this;
                this.isBusy(true);
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId))).fail(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors, Commerce.ViewModelAdapter.getResourceString("string_509"));
                }).always(function () {
                    _this.isBusy(false);
                });
            };
            UserInfoDialog.prototype.lockRegister = function () {
                var _this = this;
                this.isBusy(true);
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.LockTerminal, { correlationId: correlationId }).always(function () {
                    _this.isBusy(false);
                });
            };
            return UserInfoDialog;
        }(Controls.ModalDialog));
        Controls.UserInfoDialog = UserInfoDialog;
    })(Controls = Commerce.Controls || (Commerce.Controls = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var GetExtensionPackagesLoadInfoClientRequestHandler = (function (_super) {
                __extends(GetExtensionPackagesLoadInfoClientRequestHandler, _super);
                function GetExtensionPackagesLoadInfoClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetExtensionPackagesLoadInfoClientRequestHandler.prototype.supportedRequestType = function () {
                    return Extensibility.GetExtensionPackagesLoadInfoClientRequest;
                };
                GetExtensionPackagesLoadInfoClientRequestHandler.prototype.executeAsync = function (request) {
                    if (!Commerce.ApplicationContext.Instance.isDeviceActivated) {
                        return Promise.resolve({ canceled: true, data: null });
                    }
                    return this._getExtensionPackagesLoadInfoAsync()
                        .then(function (extensionPackagesLoadInfo) {
                        return {
                            canceled: false,
                            data: new Extensibility.GetExtensionPackagesLoadInfoClientResponse(extensionPackagesLoadInfo)
                        };
                    });
                };
                GetExtensionPackagesLoadInfoClientRequestHandler.prototype._getExtensionPackagesLoadInfoAsync = function () {
                    return SystemJS.import("./ExtensibilityFramework/ExtensionsLoaderFactory")
                        .then(function (extensionsLoaderFactory) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(extensionsLoaderFactory)
                            || Commerce.ObjectExtensions.isNullOrUndefined(extensionsLoaderFactory.default)) {
                            throw new Error("Unable to import ExtensionsLoaderFactory.");
                        }
                        return Promise.resolve(extensionsLoaderFactory);
                    }).then(function (extensionsLoaderFactoryModule) {
                        var loader = extensionsLoaderFactoryModule.default.extensionsLoader;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(loader)) {
                            return Promise.resolve(loader.getExtensionPackagesLoadInfo());
                        }
                        else {
                            return Promise.resolve({
                                loadError: new Extensibility.ExtensionLoadError(Extensibility.ExtensionPackagesFailureReason.Unknown),
                                extensionPackageLoadInfos: []
                            });
                        }
                    }, function (extensionLoaderFactoryLoadError) {
                        Commerce.RetailLogger.extensibilityFrameworkFailedToLoadExtensionLoader(JSON.stringify(extensionLoaderFactoryLoadError));
                        return Promise.reject(extensionLoaderFactoryLoadError);
                    });
                };
                return GetExtensionPackagesLoadInfoClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetExtensionPackagesLoadInfoClientRequestHandler = GetExtensionPackagesLoadInfoClientRequestHandler;
        })(Handlers = Extensibility.Handlers || (Extensibility.Handlers = {}));
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            function getExtensionsDownloadUrls(serviceUrl, extensionIds, posVersion, deviceToken, requestId, appSessionId, userSessionId, connectionTimeoutMs) {
                return new Promise(function (resolve, reject) {
                    var xhr = new XMLHttpRequest();
                    var timeoutHandle = 0;
                    xhr.onreadystatechange = function () {
                        if (xhr === null || xhr.readyState !== 4) {
                            return;
                        }
                        clearTimeout(timeoutHandle);
                        var response = parseResponse(xhr);
                        xhr = null;
                        if (response.statusCode === 200) {
                            resolve(JSON.parse(response.body));
                        }
                        else {
                            var errorResult = {
                                code: "InvalidStatusCodeFromService",
                                message: response.statusText,
                                httpStatusText: response.statusText,
                                httpStatusCode: response.statusCode,
                                body: response.body
                            };
                            reject(errorResult);
                        }
                    };
                    try {
                        xhr.open("POST", serviceUrl + "/GetExtensionsDownloadUrlsRequest", true);
                    }
                    catch (exception) {
                        var response = parseResponse(xhr);
                        var errorResult = {
                            message: formatErrorMessage(exception),
                            httpStatusCode: response.statusCode,
                            httpStatusText: response.statusText,
                            code: "FailedCommunicatingWithService"
                        };
                        reject(errorResult);
                    }
                    xhr.withCredentials = false;
                    if (deviceToken) {
                        xhr.setRequestHeader("X-MS-DeviceToken", deviceToken);
                    }
                    if (requestId) {
                        xhr.setRequestHeader("X-MS-RequestId", requestId);
                    }
                    if (appSessionId) {
                        xhr.setRequestHeader("X-MS-AppSessionId", appSessionId);
                    }
                    if (userSessionId) {
                        xhr.setRequestHeader("X-MS-UserSessionId", userSessionId);
                    }
                    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                    if (connectionTimeoutMs && connectionTimeoutMs > 0) {
                        timeoutHandle = setTimeout(xhrTimeout.bind(null, xhr, reject), connectionTimeoutMs);
                    }
                    var body = JSON.stringify({
                        extensionIds: extensionIds,
                        posVersion: posVersion
                    });
                    try {
                        xhr.send(body);
                    }
                    catch (error) {
                        var errorResult = {
                            code: "FailedSendingRequestToServer",
                            message: "Failed sending request to server"
                        };
                        reject(errorResult);
                    }
                });
            }
            Handlers.getExtensionsDownloadUrls = getExtensionsDownloadUrls;
            function xhrTimeout(xhr, reject) {
                if (xhr != null) {
                    xhr.abort();
                    xhr = null;
                    var statusText = "Request Timeout";
                    var errorResult = {
                        code: "ClientTimeOut",
                        message: statusText,
                        httpStatusCode: 408,
                        httpStatusText: statusText
                    };
                    reject(errorResult);
                }
            }
            function formatErrorMessage(error) {
                var errorMessage = "Failed to send http request.";
                if (error && error.message) {
                    errorMessage = error.message;
                }
                return errorMessage;
            }
            function parseResponse(xhr) {
                var statusText = xhr.statusText;
                var statusCode = xhr.status;
                if (statusCode === 1223) {
                    statusCode = 204;
                    statusText = "No Content";
                }
                return {
                    statusCode: statusCode,
                    statusText: statusText,
                    headers: Commerce.Proxy.Common.XmlHttpRequestHelper.parseXmlHttpResponseHeaders(xhr.getAllResponseHeaders()),
                    body: xhr.responseText
                };
            }
        })(Handlers = Extensibility.Handlers || (Extensibility.Handlers = {}));
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var ExtensionLoadError = Commerce.Extensibility.ExtensionLoadError;
var ExtensionPackagesFailureReason = Commerce.Extensibility.ExtensionPackagesFailureReason;
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var LoadExtensionsRequestHandler = (function (_super) {
                __extends(LoadExtensionsRequestHandler, _super);
                function LoadExtensionsRequestHandler() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this._isIndependentPackagingEnabled = false;
                    return _this;
                }
                LoadExtensionsRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.LoadExtensionsRequest;
                };
                LoadExtensionsRequestHandler.prototype.executeAsync = function (request) {
                    if (!LoadExtensionsRequestHandler._firstTimeLoad || !Commerce.ApplicationContext.Instance.isDeviceActivated) {
                        return Promise.resolve({ canceled: true, data: null });
                    }
                    LoadExtensionsRequestHandler._firstTimeLoad = false;
                    var asyncResult = this._loadExtensionsAsync(request);
                    return asyncResult.map(function () {
                        return {
                            canceled: false,
                            data: new Commerce.LoadExtensionsResponse()
                        };
                    }).getPromise();
                };
                LoadExtensionsRequestHandler.prototype._getAttachedServiceConfigsAsync = function (request) {
                    var _this = this;
                    var asyncResult = new Commerce.AsyncResult();
                    var extensionConfigs = [];
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.GetExtensionProfileClientRequest(request.correlationId)))
                        .fail(function (errors) {
                        Commerce.RetailLogger.extensibilityFrameworkGetExtensionProfileFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        _this._notifyExtensionsLoadFailure();
                        asyncResult.resolve(extensionConfigs);
                    }).done(function (result) {
                        var extensionProfile = result.data.result;
                        Commerce.RetailLogger.extensibilityFrameworkGetExtensionProfileSucceeded(JSON.stringify(extensionProfile));
                        if (Commerce.StringExtensions.isNullOrWhitespace(extensionProfile.ExtensionServiceUrl)) {
                            asyncResult.resolve(extensionConfigs);
                            return;
                        }
                        if (!Commerce.UrlHelper.isHttpsProtocol(extensionProfile.ExtensionServiceUrl)) {
                            Commerce.RetailLogger.extensibilityFrameworkExtensionServiceUrlNotHttps(extensionProfile.ExtensionServiceUrl);
                            asyncResult.resolve(extensionConfigs);
                            return;
                        }
                        var serviceIds = [];
                        if (Commerce.ArrayExtensions.hasElements(extensionProfile.AttachedServices)) {
                            var attachedService = void 0;
                            for (var _i = 0, _a = extensionProfile.AttachedServices; _i < _a.length; _i++) {
                                attachedService = _a[_i];
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(attachedService)
                                    && attachedService.StatusValue === Commerce.Proxy.Entities.AttachedServiceStatus.Enabled) {
                                    serviceIds.push(attachedService.ServiceId);
                                }
                            }
                        }
                        if (!Commerce.ArrayExtensions.hasElements(serviceIds)) {
                            asyncResult.resolve(extensionConfigs);
                            return;
                        }
                        var appVersion = Commerce.Config.appBaseVersion;
                        var deviceToken = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY);
                        var appSessionId = TsLogging.LoggerBase.getAppSessionId();
                        var userSessionId = TsLogging.LoggerBase.getUserSessionId();
                        Handlers.getExtensionsDownloadUrls(extensionProfile.ExtensionServiceUrl, serviceIds, appVersion, deviceToken, request.requestId, appSessionId, userSessionId, Commerce.Config.connectionTimeout * 1000).then(function (response) {
                            Commerce.RetailLogger.extensibilityFrameworkGetExtensionsDownloadUrlsSucceeded(JSON.stringify(response));
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(response) &&
                                !Commerce.ObjectExtensions.isNullOrUndefined(response.extensionIdToUrlMap)) {
                                var serviceId = void 0;
                                for (var _i = 0, serviceIds_1 = serviceIds; _i < serviceIds_1.length; _i++) {
                                    serviceId = serviceIds_1[_i];
                                    var extensionUrl = _this._lookupIgnoreCase(response.extensionIdToUrlMap, serviceId);
                                    if (!Commerce.StringExtensions.isNullOrWhitespace(extensionUrl)) {
                                        if (!Commerce.UrlHelper.isHttpsProtocol(extensionUrl)) {
                                            Commerce.RetailLogger.extensibilityFrameworkExtensionDownloadUrlNotHttps(extensionProfile.ExtensionServiceUrl, serviceId);
                                            continue;
                                        }
                                        extensionConfigs.push({ baseUrl: extensionUrl });
                                    }
                                }
                            }
                            asyncResult.resolve(extensionConfigs);
                        }).catch(function (error) {
                            Commerce.RetailLogger.extensibilityFrameworkGetExtensionsDownloadUrlsFailed(JSON.stringify(error));
                            _this._notifyExtensionsLoadFailure();
                            asyncResult.resolve(extensionConfigs);
                        });
                    });
                    return asyncResult;
                };
                LoadExtensionsRequestHandler.prototype._getExtensionsJsonConfigsAsync = function () {
                    var _this = this;
                    var asyncResult = new Commerce.AsyncResult();
                    var extensionConfigs = [];
                    var EXTENSIONS_ROOT = "Extensions";
                    $.getJSON(EXTENSIONS_ROOT + "/extensions.json")
                        .fail(function (xhr, message, exception) {
                        var status;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(xhr) &&
                            !Commerce.ObjectExtensions.isNullOrUndefined(xhr.status) &&
                            Commerce.ObjectExtensions.isNumber(xhr.status)) {
                            status = xhr.status;
                        }
                        Commerce.RetailLogger.extensibilityFrameworkGetExtensionsJsonFailed(Commerce.ErrorHelper.serializeError(exception), status);
                        _this._isIndependentPackagingEnabled = true;
                        asyncResult.resolve(extensionConfigs);
                    }).done(function (data) {
                        Commerce.RetailLogger.extensibilityFrameworkGetExtensionsJsonSucceeded(JSON.stringify(data));
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(data) &&
                            Commerce.ArrayExtensions.hasElements(data.extensionPackages)) {
                            data.extensionPackages.forEach(function (extensionConfig) {
                                var extensionIsConfiguredForCurrentBuildType = !extensionConfig.debugBuildsOnly || Commerce.Config.isDebugMode;
                                if (!Commerce.StringExtensions.isNullOrWhitespace(extensionConfig.baseUrl) && extensionIsConfiguredForCurrentBuildType) {
                                    extensionConfig.baseUrl = EXTENSIONS_ROOT + "/" + extensionConfig.baseUrl;
                                    extensionConfigs.push(extensionConfig);
                                }
                            });
                        }
                        asyncResult.resolve(extensionConfigs);
                    });
                    return asyncResult;
                };
                LoadExtensionsRequestHandler.prototype._loadExtensionsAsync = function (request) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult();
                    var attachedServicesConfigs = [];
                    var getAttachedServiceConfigsResult = this._getAttachedServiceConfigsAsync(request)
                        .done(function (configs) {
                        attachedServicesConfigs = configs;
                    });
                    var extensionsJsonConfigs = [];
                    var getExtensionsJsonConfigsResult = this._getExtensionsJsonConfigsAsync()
                        .done(function (configs) {
                        extensionsJsonConfigs = configs;
                    });
                    Commerce.VoidAsyncResult.join([getAttachedServiceConfigsResult, getExtensionsJsonConfigsResult]).always(function () {
                        var extensionConfigs = attachedServicesConfigs.concat(extensionsJsonConfigs);
                        var SYSTEM_JS_FORMAT = "register";
                        var posPackages = {
                            "./Api": {
                                format: SYSTEM_JS_FORMAT,
                                defaultExtension: "js"
                            },
                            "./UISdk": {
                                format: SYSTEM_JS_FORMAT,
                                defaultExtension: "js"
                            },
                            "./ExtensibilityFramework": {
                                format: SYSTEM_JS_FORMAT,
                                defaultExtension: "js"
                            },
                            "./UI.Sdk.Framework": {
                                format: SYSTEM_JS_FORMAT,
                                defaultExtension: "js"
                            }
                        };
                        extensionConfigs.map(function (config) { return config.baseUrl; }).forEach(function (extDir) {
                            posPackages[extDir] = {
                                format: SYSTEM_JS_FORMAT,
                                defaultExtension: "js"
                            };
                        });
                        var isRemoteScriptLoadAllowed = Commerce.Host.instance.isRemoteScriptLoadAllowed();
                        SystemJS.config({
                            packages: posPackages,
                            meta: {
                                "*.js": {
                                    scriptLoad: isRemoteScriptLoadAllowed
                                }
                            }
                        });
                        var currentCountryRegion = Commerce.StringExtensions.EMPTY;
                        SystemJS.import("./Api/Pos.Api")
                            .catch(function (error) {
                            Commerce.RetailLogger.extensibilityFrameworkFailedToLoadPosApi(JSON.stringify(error));
                            return Promise.reject(error);
                        }).then(function (apiModule) {
                            return SystemJS.import("./UISdk/Pos.UI.Sdk")
                                .catch(function (loadSdkError) {
                                Commerce.RetailLogger.extensibilityFrameworkFailedToLoadPosUISdk(JSON.stringify(loadSdkError));
                                return Promise.reject(loadSdkError);
                            });
                        }).then(function (sdkModule) {
                            return SystemJS.import("./UI.Sdk.Framework/UISdkLoader").then(function (sdkLoaderModule) {
                                if (Commerce.ObjectExtensions.isNullOrUndefined(sdkLoaderModule) || Commerce.ObjectExtensions.isNullOrUndefined(sdkLoaderModule.default)) {
                                    throw new Error("Unable to import sdkLoaderModule.");
                                }
                                else if (!Commerce.ObjectExtensions.isFunction(sdkLoaderModule.default.initialize)) {
                                    throw new Error("SDK Loader Initialize method not found.");
                                }
                                sdkLoaderModule.default.initialize();
                            }).catch(function (sdkLoaderError) {
                                Commerce.RetailLogger.extensibilityFrameworkFailedToLoadPosUISdkLoader(Commerce.ErrorHelper.serializeError(sdkLoaderError));
                                return Promise.reject(sdkLoaderError);
                            });
                        }).then(function () {
                            var getChannelConfigurationClientRequest = new Commerce.GetChannelConfigurationClientRequest();
                            return Commerce.Runtime.executeAsync(getChannelConfigurationClientRequest)
                                .then(function (result) {
                                currentCountryRegion = result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)
                                    ? Commerce.StringExtensions.EMPTY
                                    : result.data.result.ChannelCountryRegionISOCode;
                                return Promise.resolve(currentCountryRegion);
                            }).catch(function (countryRegionLoadError) {
                                Commerce.RetailLogger.extensibilityFrameworkFailedToGetChannelConfiguration(Commerce.ErrorHelper.serializeError(countryRegionLoadError));
                                return Promise.resolve(Commerce.StringExtensions.EMPTY);
                            });
                        }).then(function () {
                            return _this._getExtensionsLoader();
                        }).then(function (extensionsLoader) {
                            return extensionsLoader.load(extensionConfigs, currentCountryRegion).catch(function (extensionLoadError) {
                                Commerce.RetailLogger.extensibilityFrameworkErrorOccurredWhileLoadingExtensions(Commerce.ErrorHelper.serializeError(extensionLoadError));
                                return Promise.reject(extensionLoadError);
                            });
                        }).then(function () {
                            asyncResult.resolve();
                        }).catch(function (finalError) {
                            _this._notifyExtensionsLoadFailure();
                            _this._getExtensionsLoader()
                                .then(function (extensionsLoader) {
                                var loadError = Commerce.ErrorHelper.toJavascriptError(finalError, request.correlationId);
                                extensionsLoader.setExtensionPackagesLoadError(loadError);
                                asyncResult.resolve();
                            }, function (reason) {
                                asyncResult.resolve();
                            });
                        });
                    });
                    return asyncResult;
                };
                LoadExtensionsRequestHandler.prototype._notifyExtensionsLoadFailure = function () {
                    Commerce.NotificationHandler.displayClientErrors([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.EXTENSIONS_CANNOT_BE_LOADED)
                    ]);
                };
                LoadExtensionsRequestHandler.prototype._lookupIgnoreCase = function (map, key) {
                    var lowerCaseKey = key.toLowerCase();
                    var props = Object.keys(map);
                    var prop;
                    for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
                        prop = props_1[_i];
                        if (map.hasOwnProperty(prop) && prop.toLowerCase() === lowerCaseKey) {
                            return map[prop];
                        }
                    }
                    return null;
                };
                LoadExtensionsRequestHandler.prototype._getExtensionsLoader = function () {
                    var _this = this;
                    return Promise.resolve()
                        .then(function () {
                        return SystemJS.import("./ExtensibilityFramework/ExtensionsLoaderFactory").then(function (extensionsLoaderFactory) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(extensionsLoaderFactory)
                                || Commerce.ObjectExtensions.isNullOrUndefined(extensionsLoaderFactory.default)) {
                                throw new Error("Unable to import ExtensionsLoaderFactory.");
                            }
                            return Promise.resolve(extensionsLoaderFactory);
                        }).catch(function (extensionLoaderFactoryLoadError) {
                            Commerce.RetailLogger.extensibilityFrameworkFailedToLoadExtensionLoader(JSON.stringify(extensionLoaderFactoryLoadError));
                            return Promise.reject(extensionLoaderFactoryLoadError);
                        });
                    }).then(function (extensionsLoaderFactoryModule) {
                        var loadModuleAsync = function (modulePath) {
                            return System.import(modulePath);
                        };
                        var loadJsonAsync = function (fullFilePath) {
                            return _this._loadJson(fullFilePath);
                        };
                        var createAndInsertHtmlImpl = function (elementId) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(LoadExtensionsRequestHandler._createdAndInsertedHtmlPlaceholder)) {
                                LoadExtensionsRequestHandler._createdAndInsertedHtmlPlaceholder
                                    = document.getElementById(LoadExtensionsRequestHandler.CREATED_AND_INSERTED_HTML_PLACEHOLDER_ID);
                            }
                            if (Commerce.ObjectExtensions.isNullOrUndefined(LoadExtensionsRequestHandler._createdAndInsertedHtmlPlaceholder)) {
                                var errorMessage = "Unable to find required created and inserted html placeholder element '"
                                    + LoadExtensionsRequestHandler.CREATED_AND_INSERTED_HTML_PLACEHOLDER_ID + "'.";
                                Commerce.RetailLogger.extensibilityFrameworkUnableToFindRequiredCreatedAndInsertedHtmlPlaceholder(errorMessage);
                                return null;
                            }
                            var newElement = document.createElement("div");
                            newElement.id = elementId;
                            LoadExtensionsRequestHandler._createdAndInsertedHtmlPlaceholder.appendChild(newElement);
                            return newElement;
                        };
                        var renderHtmlAsyncImpl = function (htmlFragmentPath, element) {
                            var promise = new Promise(function (resolve, reject) {
                                WinJS.UI.Fragments.render(htmlFragmentPath, element).done(function () {
                                    resolve();
                                }, function (error) {
                                    reject(error);
                                });
                            });
                            return promise;
                        };
                        var cacheHtmlFragmentAsyncImpl = function (htmlFragmentPath) {
                            var promise = new Promise(function (resolve, reject) {
                                WinJS.UI.Fragments.cache(htmlFragmentPath).done(function () {
                                    resolve();
                                }, function (error) {
                                    reject(error);
                                });
                            });
                            return promise;
                        };
                        var createTemplatedDialogProxy = function (htmlTemplatePath, dialog) {
                            return new Commerce.Controls.ExtensionTemplatedDialogProxy(htmlTemplatePath, dialog);
                        };
                        var addCultureInfoImpl = function (cultureName, baseCultureName, info) {
                            Globalize.addCultureInfo(cultureName, baseCultureName, info);
                        };
                        var loaderFactoryOptions = {
                            loadModuleAsync: loadModuleAsync,
                            loadJsonAsync: loadJsonAsync,
                            cacheHtmlFragmentAsync: cacheHtmlFragmentAsyncImpl,
                            createAndInsertHtml: createAndInsertHtmlImpl,
                            renderHtmlAsync: renderHtmlAsyncImpl,
                            createTemplatedDialogProxy: createTemplatedDialogProxy,
                            addCultureInfo: addCultureInfoImpl,
                            isIndependentPackagingEnabled: _this._isIndependentPackagingEnabled
                        };
                        var loader;
                        if (Commerce.Config.isDualDisplay) {
                            loader = extensionsLoaderFactoryModule.default.createDualDisplayExtensionsLoader(loaderFactoryOptions);
                        }
                        else {
                            loader = extensionsLoaderFactoryModule.default.createPOSExtensionsLoader(loaderFactoryOptions);
                        }
                        return Promise.resolve(loader);
                    });
                };
                LoadExtensionsRequestHandler.prototype._loadJson = function (filePath) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(filePath)) {
                        return new Promise(function (resolve, reject) {
                            if (Commerce.Config.isDebugMode) {
                                filePath = filePath + "?" + Date.now();
                            }
                            $.getJSON(filePath, function (data, textStatus, jqXHR) {
                                resolve(data);
                            }).fail(function (xhr, message, exception) {
                                var errorMessage = "Loading json with path " + filePath + " failed";
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(xhr)) {
                                    errorMessage += " with HTTP status code " + xhr.status + " and text " + xhr.statusText + ".";
                                }
                                else if (Commerce.ObjectExtensions.isString(message) && !Commerce.StringExtensions.isNullOrWhitespace(message)) {
                                    errorMessage += " with message '" + message + "'";
                                }
                                else if (Commerce.ObjectExtensions.isString(exception) && !Commerce.StringExtensions.isNullOrWhitespace(exception)) {
                                    errorMessage += " with exception message '" + exception + "'";
                                }
                                var rejectError = new Error(errorMessage);
                                reject(rejectError);
                            });
                        });
                    }
                    return Promise.resolve(null);
                };
                LoadExtensionsRequestHandler.CREATED_AND_INSERTED_HTML_PLACEHOLDER_ID = "CustomControlsFragmentsPlaceholder";
                LoadExtensionsRequestHandler._firstTimeLoad = true;
                return LoadExtensionsRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.LoadExtensionsRequestHandler = LoadExtensionsRequestHandler;
        })(Handlers = Extensibility.Handlers || (Extensibility.Handlers = {}));
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var FulfillmentLineDetailsViewModel = (function () {
        function FulfillmentLineDetailsViewModel(dialogOptions) {
            this.productDetails = dialogOptions.productDetails;
            this.showSecondaryInfo = dialogOptions.showSecondaryInfo || false;
            this.secondaryTitle = dialogOptions.secondaryTitle || Commerce.StringExtensions.EMPTY;
            this.secondaryQuantity = dialogOptions.secondaryQuantity || NaN;
        }
        return FulfillmentLineDetailsViewModel;
    }());
    var GetFulfillmentLineQuantityDialogClientRequestHandler = (function (_super) {
        __extends(GetFulfillmentLineQuantityDialogClientRequestHandler, _super);
        function GetFulfillmentLineQuantityDialogClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetFulfillmentLineQuantityDialogClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetFulfillmentLineQuantityDialogClientRequest;
        };
        GetFulfillmentLineQuantityDialogClientRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                var numpadDialog = new Commerce.Controls.NumpadDialog();
                var numpadDialogOptions;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(request.options)) {
                    numpadDialogOptions = {
                        numpadDialogType: Commerce.Controls.NumpadDialogTypes.Numeric,
                        enableMagneticStripReader: false,
                        enableBarcodeScanner: true,
                        numpadLabel: Commerce.StringExtensions.EMPTY
                    };
                    request.options.showSecondaryInfo = !Commerce.StringExtensions.isNullOrWhitespace(request.options.secondaryTitle);
                    request.options.secondaryTitle = request.options.secondaryTitle || Commerce.StringExtensions.EMPTY;
                    request.options.secondaryQuantity = request.options.secondaryQuantity || 0;
                    numpadDialog.title(request.options.title);
                    numpadDialog.subTitle(Commerce.StringExtensions.EMPTY);
                    numpadDialogOptions.numpadLabel = Commerce.ViewModelAdapter.getResourceString("string_3372");
                    numpadDialogOptions.value = request.options.defaultQuantity.toString();
                    numpadDialogOptions.decimalPrecision = request.options.decimalPrecision;
                    numpadDialogOptions.customControlData = {
                        templateID: "FulfillmentQuantityDialogTemplate",
                        data: new FulfillmentLineDetailsViewModel(request.options)
                    };
                    numpadDialogOptions.isEnteredValueValid = function (enteredValueText) {
                        var enteredValue = Commerce.NumberExtensions.parseNumber(enteredValueText);
                        var maxValueAllowed = request.options.productDetails.remainingQuantity;
                        return enteredValue >= 0 && enteredValue <= maxValueAllowed;
                    };
                }
                numpadDialog.show(numpadDialogOptions, false);
                _this.handleDialogResult(numpadDialog, request.options.onBeforeClose)
                    .done(function (result) {
                    var response = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                        response = new Commerce.GetFulfillmentLineQuantityDialogClientResponse({
                            value: result.data.value
                        });
                    }
                    resolve({ canceled: result.canceled, data: response });
                }).fail(function (errors) { reject(errors); });
            });
            return promise;
        };
        GetFulfillmentLineQuantityDialogClientRequestHandler.prototype.convertToDialogResult = function (result) {
            var dialogResult = {
                value: result.value
            };
            return dialogResult;
        };
        GetFulfillmentLineQuantityDialogClientRequestHandler.prototype.updateDialogOnError = function (error, numpadDialog) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(error.newDialogValue)) {
                numpadDialog.setTextValue(error.newDialogValue);
            }
        };
        return GetFulfillmentLineQuantityDialogClientRequestHandler;
    }(Commerce.DialogClientRequestHandlerBase));
    Commerce.GetFulfillmentLineQuantityDialogClientRequestHandler = GetFulfillmentLineQuantityDialogClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SelectPackingSlipIdClientRequestHandler = (function (_super) {
        __extends(SelectPackingSlipIdClientRequestHandler, _super);
        function SelectPackingSlipIdClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectPackingSlipIdClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SelectPackingSlipIdClientRequest;
        };
        SelectPackingSlipIdClientRequestHandler.prototype.executeAsync = function (request) {
            var salesId = request.salesId;
            var packingSlipsData = request.packingSlipsData;
            var activity = new Commerce.Activities.SelectPackingSlipIdActivity({
                salesId: salesId,
                packingSlipsData: packingSlipsData
            });
            return activity.execute()
                .map(function () {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(activity.response.selectedPackingSlipData)) {
                    return {
                        canceled: false,
                        data: new Commerce.SelectPackingSlipIdClientResponse(activity.response.selectedPackingSlipData)
                    };
                }
                else {
                    return {
                        canceled: true,
                        data: new Commerce.SelectPackingSlipIdClientResponse(null)
                    };
                }
            }).getPromise();
        };
        return SelectPackingSlipIdClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SelectPackingSlipIdClientRequestHandler = SelectPackingSlipIdClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var GetRefinerValuesClientRequestHandler = (function (_super) {
            __extends(GetRefinerValuesClientRequestHandler, _super);
            function GetRefinerValuesClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetRefinerValuesClientRequestHandler.prototype.supportedRequestType = function () {
                return Refiners.GetRefinerValuesClientRequest;
            };
            GetRefinerValuesClientRequestHandler.prototype.executeAsync = function (request) {
                var refinerDialog = new Commerce.Controls.RefinerDialog();
                refinerDialog.title(Commerce.ViewModelAdapter.getResourceString(request.titleResourceId));
                var dialogState = {
                    refiners: request.refiners,
                    refinerValuesRequired: request.refinerValuesRequired,
                    createRefinerControlHandler: Commerce.RefinerHelper.createRefinerControl,
                    getSelectedRefinerValuesHandler: function (refiners) {
                        return refiners;
                    }
                };
                if (Commerce.ObjectExtensions.isString(request.validationErrorsTitleResourceId)
                    && !Commerce.StringExtensions.isNullOrWhitespace(request.validationErrorsTitleResourceId)) {
                    dialogState.validationErrorsTitle = Commerce.ViewModelAdapter.getResourceString(request.validationErrorsTitleResourceId);
                }
                var updatedRefiners;
                refinerDialog.show(dialogState, false).on(Commerce.DialogResult.OK, function (refiners) {
                    updatedRefiners = refiners;
                });
                return Commerce.Activities.ModalDialogHelper.toVoidAsyncResult(refinerDialog)
                    .map(function (result) {
                    return { canceled: result.canceled, data: result.canceled ? undefined : new Refiners.GetRefinerValuesClientResponse(updatedRefiners) };
                }).getPromise();
            };
            return GetRefinerValuesClientRequestHandler;
        }(Commerce.RequestHandler));
        Refiners.GetRefinerValuesClientRequestHandler = GetRefinerValuesClientRequestHandler;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Pos;
(function (Pos) {
    "use strict";
    var VoidAsyncResult = Commerce.VoidAsyncResult;
    var DualDisplayInitializer = (function (_super) {
        __extends(DualDisplayInitializer, _super);
        function DualDisplayInitializer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DualDisplayInitializer.prototype._onFirstReady = function (args, userAgent) {
            return _super.prototype._onFirstReady.call(this, args, userAgent).done(function () {
                var getCurrentCartDataRequest = new Commerce.DualDisplay.GetCurrentCartDataRequest();
                var getCurrentCartDataAsync = DualDisplay.DualDisplayMessaging.sendRequest(getCurrentCartDataRequest)
                    .done(function (responseData) {
                    DualDisplay.Model.DualDisplaySession.instance.cart = responseData.cart;
                });
                var getCurrentCustomerDataRequest = new Commerce.DualDisplay.GetCurrentCustomerDataRequest();
                var getCurrentCustomerDataAsync = DualDisplay.DualDisplayMessaging.sendRequest(getCurrentCustomerDataRequest)
                    .done(function (responseData) {
                    DualDisplay.Model.DualDisplaySession.instance.customer = responseData.customer;
                });
                var getCurrentLogonStateDataRequest = new Commerce.DualDisplay.GetCurrentLogonStateDataRequest();
                var getCurrentLogonStateDataAsync = DualDisplay.DualDisplayMessaging.sendRequest(getCurrentLogonStateDataRequest)
                    .done(function (responseData) {
                    DualDisplay.Model.DualDisplaySession.instance.isLoggedOnState = responseData;
                });
                VoidAsyncResult.join([getCurrentCartDataAsync, getCurrentCustomerDataAsync, getCurrentLogonStateDataAsync]).done(function () {
                    WinJS.UI.processAll().then(function () {
                        var splashScreen = document.getElementById("splashScreen");
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(splashScreen)) {
                            $(splashScreen).remove();
                        }
                        Commerce.ViewModelAdapter.navigate("DualDisplayView");
                        DualDisplay.DualDisplayMessaging.sendReadyMessage();
                    });
                });
            });
        };
        DualDisplayInitializer.prototype._attachLoggingSinks = function (configurationProvider) {
            Commerce.attachLoggingSink(new DualDisplay.DualDisplayToPosSink());
            DualDisplay.DualDisplayMessaging.init();
        };
        DualDisplayInitializer.prototype._initializePeripheralsAsync = function () {
            return VoidAsyncResult.createResolved();
        };
        DualDisplayInitializer.prototype._loadConfigurationsAsync = function () {
            var getChannelConfigurationDataRequest = new Commerce.DualDisplay.GetChannelConfigurationDataRequest();
            var getChannelConfigurationDataAsync = DualDisplay.DualDisplayMessaging.sendRequest(getChannelConfigurationDataRequest)
                .done(function (responseData) {
                Commerce.ApplicationContext.Instance.channelConfiguration = responseData.channelConfiguration;
            });
            var getDeviceConfigurationDataRequest = new Commerce.DualDisplay.GetDeviceConfigurationDataRequest();
            var getDeviceConfigurationDataAsync = DualDisplay.DualDisplayMessaging.sendRequest(getDeviceConfigurationDataRequest)
                .done(function (responseData) {
                Commerce.CSSHelpers.cssFileRootPath = "/";
                Commerce.CSSHelpers.applyThemeAsync(responseData.deviceConfiguration);
            });
            return VoidAsyncResult.join([getChannelConfigurationDataAsync, getDeviceConfigurationDataAsync]);
        };
        return DualDisplayInitializer;
    }(Pos.InitializerBase));
    Pos.DualDisplayInitializer = DualDisplayInitializer;
})(Pos || (Pos = {}));
var Pos;
(function (Pos) {
    "use strict";
    var PosAppRuntimeInitializer = (function () {
        function PosAppRuntimeInitializer() {
        }
        PosAppRuntimeInitializer.prototype.populateCompositionLoader = function (compositionLoader) {
            compositionLoader.addRequestHandler(Commerce.Peripherals.DedicatedHardwareStationRequestHandler);
        };
        return PosAppRuntimeInitializer;
    }());
    Pos.PosAppRuntimeInitializer = PosAppRuntimeInitializer;
})(Pos || (Pos = {}));
var Pos;
(function (Pos) {
    "use strict";
    Pos.runtimeInitializer.addRuntimeInitializer(new Pos.PosAppRuntimeInitializer());
    var initializer = Commerce.Config.isDualDisplay ? new Pos.DualDisplayInitializer() : new Pos.PosInitializer();
    initializer.initialize(navigator.userAgent);
})(Pos || (Pos = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var TaskRecorderDialogHelper = (function () {
            function TaskRecorderDialogHelper() {
            }
            TaskRecorderDialogHelper.showSaveDialog = function (suggestedFileName) {
                var result = new Commerce.AsyncResult();
                var fileExtension = TaskRecorderDialogHelper.extractFileExtension(suggestedFileName);
                var fileTypeChoice = TaskRecorderDialogHelper.getFileTypeChoice(fileExtension);
                if (Commerce.ObjectExtensions.isNullOrUndefined(fileTypeChoice)) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_UNEXPECTED_FILE_EXTENSION, false, Commerce.StringExtensions.EMPTY, null, fileExtension)]);
                }
                Commerce.RetailLogger.taskRecorderShowSaveDialog(suggestedFileName, fileTypeChoice.name);
                var savePicker = new Windows.Storage.Pickers.FileSavePicker();
                savePicker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.documentsLibrary;
                savePicker.fileTypeChoices.insert(Commerce.ViewModelAdapter.getResourceString(fileTypeChoice.name), fileTypeChoice.fileExtensions);
                savePicker.suggestedFileName = suggestedFileName;
                savePicker.pickSaveFileAsync().then(function (file) {
                    result.resolve(file);
                }, function (error) {
                    result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_ERROR_OCCURRED_DURING_DISPLAYING_SAVE_DIALOG, false, Commerce.StringExtensions.EMPTY, null, JSON.stringify(error))]);
                });
                return result;
            };
            TaskRecorderDialogHelper.getFileTypeChoice = function (fileExtension) {
                fileExtension = fileExtension.toLowerCase();
                for (var i = 0; i < this.fileTypeChoices.length; i++) {
                    if (this.fileTypeChoices[i].fileExtensions.indexOf(fileExtension) !== -1) {
                        return this.fileTypeChoices[i];
                    }
                }
                return null;
            };
            TaskRecorderDialogHelper.extractFileExtension = function (fileName) {
                var lastDotPos = fileName.lastIndexOf(".");
                if (lastDotPos === -1) {
                    return Commerce.StringExtensions.EMPTY;
                }
                return fileName.slice(lastDotPos);
            };
            TaskRecorderDialogHelper.fileTypeChoices = [
                {
                    name: "string_10102",
                    fileExtensions: [".xml"]
                },
                {
                    name: "string_10103",
                    fileExtensions: [".doc", ".docx"]
                },
                {
                    name: "string_10105",
                    fileExtensions: [".ax7bpm"]
                },
                {
                    name: "string_10121",
                    fileExtensions: [".axtr"]
                }
            ];
            return TaskRecorderDialogHelper;
        }());
        TaskRecorder.TaskRecorderDialogHelper = TaskRecorderDialogHelper;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        TaskRecorder.TaskRecorderDownloader.downloadFile = function (url) {
            var result = new Commerce.AsyncResult();
            var fileName = Commerce.UrlHelper.extractFileName(url);
            TaskRecorder.TaskRecorderDialogHelper.showSaveDialog(fileName)
                .done(function (file) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(file)) {
                    result.resolve(true);
                    return;
                }
                TaskRecorder.TaskRecorderDownloadHelper.downloadFile(url, file)
                    .done(function () {
                    result.resolve(false);
                })
                    .fail(function (errors) {
                    result.reject(errors);
                });
            })
                .fail(function (errors) {
                result.reject(errors);
            });
            return result;
        };
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var TaskRecorderDownloadHelper = (function () {
            function TaskRecorderDownloadHelper() {
            }
            TaskRecorderDownloadHelper.downloadFile = function (url, file) {
                var result = new Commerce.VoidAsyncResult();
                Commerce.RetailLogger.taskRecorderDownloadFile(url, file.path);
                try {
                    Windows.Storage.CachedFileManager.deferUpdates(file);
                    var uri = new Windows.Foundation.Uri(url);
                    var downloader = new Windows.Networking.BackgroundTransfer.BackgroundDownloader();
                    var download = downloader.createDownload(uri, file);
                    download.startAsync().then(function () {
                        Windows.Storage.CachedFileManager.completeUpdatesAsync(file).then(function (updateStatus) {
                            if (updateStatus === Windows.Storage.Provider.FileUpdateStatus.complete) {
                                Commerce.RetailLogger.taskRecorderFileWasSaved(file.name);
                                result.resolve();
                            }
                            else {
                                result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_COULDNT_SAVE_FILE, false, Commerce.StringExtensions.EMPTY, null, file.name, updateStatus)]);
                            }
                        }, function (errors) {
                            result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_COULDNT_COMPLETE_UPDATES_FOR_FILE, false, Commerce.StringExtensions.EMPTY, null, file.name, JSON.stringify(errors))]);
                        });
                    }, function (errors) {
                        result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_COULDNT_DOWNLOAD_FILE, false, Commerce.StringExtensions.EMPTY, null, url, JSON.stringify(errors))]);
                    });
                }
                catch (exception) {
                    result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_COULDNT_DOWNLOAD_FILE, false, Commerce.StringExtensions.EMPTY, null, url, JSON.stringify(exception))]);
                }
                return result;
            };
            return TaskRecorderDownloadHelper;
        }());
        TaskRecorder.TaskRecorderDownloadHelper = TaskRecorderDownloadHelper;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
        var WebAuthenticationBroker = Windows.Security.Authentication.Web.WebAuthenticationBroker;
        var WebAuthenticationCoreManager = Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager;
        var AccountsSettingsPane = Windows.UI.ApplicationSettings.AccountsSettingsPane;
        var WebAccountProviderCommand = Windows.UI.ApplicationSettings.WebAccountProviderCommand;
        var WebTokenRequest = Windows.Security.Authentication.Web.Core.WebTokenRequest;
        var WebTokenRequestStatus = Windows.Security.Authentication.Web.Core.WebTokenRequestStatus;
        var WwaAADAuthenticationAdapter = (function () {
            function WwaAADAuthenticationAdapter() {
                this._aadAuthority = null;
                this._tokenResponse = null;
                this._isAADContextInitialized = false;
                this._currentUserId = null;
                this._settingsPaneCommandStartedProcessing = false;
                this._settingsPaneCompletion = null;
                this.setAadContext();
                var callbackUri = Commerce.StringExtensions.format("ms-appx-web://Microsoft.AAD.BrokerPlugIn/{0}", WebAuthenticationBroker.getCurrentApplicationCallbackUri().host.toUpperCase());
                Commerce.RetailLogger.librariesAuthenticationAadCallbackUrl(callbackUri);
                var pane = AccountsSettingsPane.getForCurrentView();
                pane.addEventListener("accountcommandsrequested", this.setupAccountSettingsPane.bind(this));
            }
            WwaAADAuthenticationAdapter.prototype.initialize = function () {
                this.setAadContext();
            };
            WwaAADAuthenticationAdapter.prototype.setTenantId = function (tenantId) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(tenantId)) {
                    this.setAadContext(tenantId);
                }
            };
            WwaAADAuthenticationAdapter.prototype.login = function () {
                return this._acquireToken(Commerce.Config.aadRetailServerResourceId)
                    .map(function (result) {
                    if (!result.canceled) {
                        var userName = WwaAADAuthenticationAdapter.getValueIfExists(result.data.properties, "DisplayName");
                        var tenantId = WwaAADAuthenticationAdapter.getValueIfExists(result.data.properties, "TenantId");
                        var objectId = WwaAADAuthenticationAdapter.getValueIfExists(result.data.properties, "UID");
                        var fullName = Commerce.StringExtensions.format("{0} {1}", WwaAADAuthenticationAdapter.getValueIfExists(result.data.properties, "FirstName"), WwaAADAuthenticationAdapter.getValueIfExists(result.data.properties, "LastName"));
                        var userDetails = {
                            userName: userName,
                            tenantId: tenantId,
                            objectId: objectId,
                            fullName: fullName
                        };
                        return userDetails;
                    }
                    else {
                        return null;
                    }
                });
            };
            WwaAADAuthenticationAdapter.prototype.acquireToken = function (resourceId) {
                return this._acquireToken(resourceId)
                    .map(function (result) {
                    return result.data.token;
                });
            };
            WwaAADAuthenticationAdapter.prototype.logout = function () {
                var _this = this;
                var asyncResult = new Commerce.VoidAsyncResult();
                if (!this._isAADContextInitialized) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AADCONFIGURATION_ERROR.serverErrorCode);
                    Commerce.RetailLogger.librariesAuthenticationProviderAuthenticationFailed(Commerce.ErrorHelper.formatErrorMessage(error));
                    asyncResult.reject([error]);
                    return asyncResult;
                }
                var correlationId = TsLogging.Utils.generateGuid();
                Commerce.RetailLogger.librariesAuthenticationAADLogOutInitiated(correlationId);
                this.clearCache();
                WebAuthenticationCoreManager.findAccountProviderAsync(WwaAADAuthenticationAdapter.AAD_PROVIDER_ID, this._aadAuthority).done(function (provider) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this._currentUserId)) {
                        Commerce.RetailLogger.librariesAuthenticationAADLogoutSkipped(provider.authority, provider.displayName);
                        asyncResult.resolve();
                        return;
                    }
                    Commerce.RetailLogger.librariesAuthenticationAADLogoutLookingForAccount(provider.authority, correlationId);
                    WebAuthenticationCoreManager.findAccountAsync(provider, _this._currentUserId).done(function (foundAccount) {
                        Commerce.RetailLogger.librariesAuthenticationAADLogoutFoundAccount(provider.authority, correlationId);
                        _this._currentUserId = null;
                        var asyncAction = foundAccount.signOutAsync();
                        asyncAction.done(function () {
                            Commerce.RetailLogger.librariesAuthenticationAADLogOutCompleted(provider.authority, correlationId);
                            asyncResult.resolve();
                        }, function (error) {
                            _this._currentUserId = null;
                            var signoutError = Commerce.StringExtensions.format("WWA: an error '{0}' was returned when logging out from AAD: ", error || "Unknown");
                            Commerce.RetailLogger.librariesAuthenticationProviderLogOutFailed(signoutError);
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AAD_AUTHENTICATION_FAILED)]);
                        });
                    });
                });
                return asyncResult;
            };
            WwaAADAuthenticationAdapter.prototype.clearCache = function () {
                this._tokenResponse = null;
            };
            WwaAADAuthenticationAdapter.prototype.retrieveAvailableToken = function (resourceId) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._tokenResponse)) {
                    return null;
                }
                else {
                    return this._tokenResponse.token;
                }
            };
            WwaAADAuthenticationAdapter.mapAsyncResult = function (r) {
                var asyncResult = new Commerce.AsyncResult();
                r.done(function (result) { asyncResult.resolve(result); }, function (error) { asyncResult.reject(null); });
                return asyncResult;
            };
            WwaAADAuthenticationAdapter.getValueIfExists = function (map, key) {
                if (map.hasKey(key)) {
                    return map.lookup(key);
                }
                else {
                    Commerce.RetailLogger.librariesAuthenticationAadUserPropertyNotFound(key);
                    return Commerce.StringExtensions.EMPTY;
                }
            };
            WwaAADAuthenticationAdapter.prototype.setAadContext = function (tenantId) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.aadLoginUrl)) {
                    this._aadAuthority = Commerce.Config.aadLoginUrl;
                    this._isAADContextInitialized = true;
                }
            };
            WwaAADAuthenticationAdapter.prototype._acquireToken = function (resourceId) {
                var _this = this;
                var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AADCONFIGURATION_ERROR.serverErrorCode);
                var self = this;
                if (!this._isAADContextInitialized
                    || Commerce.StringExtensions.isNullOrWhitespace(resourceId)
                    || Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.aadClientId)) {
                    Commerce.RetailLogger.librariesAuthenticationProviderAuthenticationFailed(Commerce.ErrorHelper.formatErrorMessage(error));
                    var result = new Commerce.AsyncResult({ canceled: false, data: null });
                    result.reject([error]);
                    return result;
                }
                var requestTokenCompletion;
                var foundProvider;
                var queue = new Commerce.AsyncQueue();
                queue.enqueue(function () { return WwaAADAuthenticationAdapter.mapAsyncResult(WebAuthenticationCoreManager.findAccountProviderAsync(WwaAADAuthenticationAdapter.AAD_PROVIDER_ID, self._aadAuthority)); })
                    .enqueue(function (provider) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(provider)) {
                        Commerce.RetailLogger.librariesAuthenticationProviderNotFound(WwaAADAuthenticationAdapter.AAD_PROVIDER_ID, self._aadAuthority);
                        var error_2 = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AADCONFIGURATION_ERROR.serverErrorCode);
                        Commerce.RetailLogger.librariesAuthenticationProviderAuthenticationFailed(Commerce.ErrorHelper.formatErrorMessage(error_2));
                        return Commerce.AsyncResult.createRejected([error_2]);
                    }
                    else {
                        return Commerce.AsyncResult.createResolved({ provider: provider, currentUserId: _this._currentUserId });
                    }
                }).enqueue(function (provider) {
                    foundProvider = provider.provider;
                    return WwaAADAuthenticationAdapter.mapAsyncResult(WebAuthenticationCoreManager.findAccountAsync(provider.provider, provider.currentUserId));
                }).enqueue(function (foundAccount) {
                    var request = new WebTokenRequest(foundProvider, Commerce.StringExtensions.EMPTY, Commerce.Config.aadClientId);
                    request.properties.insert(WwaAADAuthenticationAdapter.REQUEST_PROPERTY_RESOURCE, Commerce.Config.aadRetailServerResourceId);
                    return Commerce.AsyncResult.createResolved({ request: request, account: foundAccount });
                }).enqueue(function (foundAccount) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(foundAccount.account)) {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                    else {
                        return WwaAADAuthenticationAdapter.mapAsyncResult(WebAuthenticationCoreManager.getTokenSilentlyAsync(foundAccount.request, foundAccount.account));
                    }
                }).enqueue(function (silentTokenRequestResult) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(silentTokenRequestResult) &&
                        silentTokenRequestResult.responseStatus === WebTokenRequestStatus.success) {
                        var silentTokenResponse = silentTokenRequestResult.responseData[0];
                        self._tokenResponse = silentTokenResponse;
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        _this._settingsPaneCompletion = new Commerce.VoidAsyncResult();
                        if (Commerce.ObjectExtensions.isFunction(AccountsSettingsPane.showManageAccountsAsync)) {
                            AccountsSettingsPane.showManageAccountsAsync().done(function () {
                                if (!_this._settingsPaneCommandStartedProcessing) {
                                    _this.handleSettingsPaneClosed();
                                }
                            }, function (error) {
                                _this.handleSettingsPaneError(error);
                            });
                            return _this._settingsPaneCompletion;
                        }
                        else {
                            Commerce.RetailLogger.librariesAuthenticationAADDowngradingToOlderFlow();
                            AccountsSettingsPane.show();
                            return _this._settingsPaneCompletion;
                        }
                    }
                }).enqueue(function () {
                    _this._settingsPaneCompletion = null;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(self._tokenResponse)) {
                        return Commerce.AsyncResult.createRejected([error]);
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(self._tokenResponse);
                    }
                });
                requestTokenCompletion = queue.run().
                    done(function (queueResult) {
                    if (queueResult.canceled) {
                        requestTokenCompletion.reject([error]);
                    }
                    else {
                        requestTokenCompletion.resolve(queueResult);
                    }
                });
                return requestTokenCompletion;
            };
            WwaAADAuthenticationAdapter.prototype.handleSettingsPaneError = function (error) {
                var settingsError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AAD_ACCOUNTSETTINGSPANE_ERROR.serverErrorCode);
                Commerce.RetailLogger.librariesAuthenticationProviderAuthenticationFailed(Commerce.ErrorHelper.formatErrorMessage(error));
                Commerce.RetailLogger.librariesAuthenticationFailedToDisplayPane(error);
                this._settingsPaneCompletion.reject([settingsError]);
            };
            WwaAADAuthenticationAdapter.prototype.handleSettingsPaneClosed = function () {
                if (!this._settingsPaneCommandStartedProcessing) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AAD_USERCANCELLEDAUTHENTICATION.serverErrorCode);
                    Commerce.RetailLogger.librariesAuthenticationProviderAuthenticationFailed(Commerce.ErrorHelper.formatErrorMessage(error));
                    this._settingsPaneCompletion.reject([error]);
                }
            };
            WwaAADAuthenticationAdapter.prototype.setupAccountSettingsPane = function (eventArgs, pane) {
                var _this = this;
                var settingsPaneDeferral = eventArgs.getDeferral();
                eventArgs.headerText = Commerce.ViewModelAdapter.getResourceString("string_3902");
                var self = this;
                var correlationId = TsLogging.Utils.generateGuid();
                Commerce.RetailLogger.librariesAuthenticationAADSettingUpAccountSettingsPane(this._aadAuthority, correlationId);
                WebAuthenticationCoreManager.findAccountProviderAsync(WwaAADAuthenticationAdapter.AAD_PROVIDER_ID, this._aadAuthority).done(function (provider) {
                    var request = new WebTokenRequest(provider, Commerce.StringExtensions.EMPTY, Commerce.Config.aadClientId);
                    request.properties.insert(WwaAADAuthenticationAdapter.REQUEST_PROPERTY_RESOURCE, Commerce.Config.aadRetailServerResourceId);
                    var commandField = new WebAccountProviderCommand(provider, function (commandParameter) {
                        self._settingsPaneCommandStartedProcessing = true;
                        WebAuthenticationCoreManager.requestTokenAsync(request).done(function (tokenResult) {
                            Commerce.RetailLogger.librariesAuthenticationAADAcquiredToken(_this._aadAuthority, correlationId);
                            self._settingsPaneCommandStartedProcessing = false;
                            if (tokenResult.responseStatus === WebTokenRequestStatus.success) {
                                var interactiveResponse = tokenResult.responseData[0];
                                self._tokenResponse = interactiveResponse;
                                self._currentUserId = interactiveResponse.webAccount.id;
                                self._settingsPaneCompletion.resolve();
                            }
                            else {
                                self._tokenResponse = null;
                                self._currentUserId = null;
                                var proxyError = void 0;
                                switch (tokenResult.responseStatus) {
                                    case WebTokenRequestStatus.accountSwitch:
                                    case WebTokenRequestStatus.userCancel:
                                        proxyError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AAD_USERCANCELLEDAUTHENTICATION.serverErrorCode);
                                        break;
                                    default:
                                        var errorCode = -1;
                                        var errorDescription = "Not Specified";
                                        if (!Commerce.ObjectExtensions.isNullOrUndefined(tokenResult.responseError)) {
                                            errorCode = tokenResult.responseError.errorCode;
                                            errorDescription = tokenResult.responseError.errorMessage;
                                        }
                                        Commerce.RetailLogger.librariesAuthenticationFailedToRequestToken(self._aadAuthority, errorCode, errorDescription);
                                        proxyError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AAD_AUTHENTICATION_FAILED);
                                }
                                self._settingsPaneCompletion.reject([proxyError]);
                            }
                        });
                    });
                    eventArgs.webAccountProviderCommands.append(commandField);
                    settingsPaneDeferral.complete();
                });
            };
            WwaAADAuthenticationAdapter.REQUEST_PROPERTY_RESOURCE = "resource";
            WwaAADAuthenticationAdapter.AAD_PROVIDER_ID = "https://login.windows.net";
            return WwaAADAuthenticationAdapter;
        }());
        Host.WwaAADAuthenticationAdapter = WwaAADAuthenticationAdapter;
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
        var WwaApplication = (function () {
            function WwaApplication() {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Windows.System.Profile.AnalyticsInfo)
                    && Windows.System.Profile.AnalyticsInfo.versionInfo.deviceFamily === "Windows.Mobile") {
                    this._applicationType = Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindowsPhone;
                }
                else {
                    this._applicationType = Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindows;
                }
                Commerce.RetailLogger.applicationType(Commerce.StringExtensions.EMPTY, this._applicationType, Commerce.Proxy.Entities.ApplicationTypeEnum[this._applicationType]);
            }
            WwaApplication.prototype.getApplicationIdentity = function () {
                return {
                    version: Windows.ApplicationModel.Package.current.id.version,
                    publisher: Windows.ApplicationModel.Package.current.publisherDisplayName
                };
            };
            WwaApplication.prototype.getArchitectureType = function () {
                var architecture = Commerce.Proxy.Entities.ArchitectureType.Unknown;
                var packageId = Windows.ApplicationModel.Package.current.id;
                if (packageId) {
                    switch (packageId.architecture) {
                        case Windows.System.ProcessorArchitecture.x86:
                            architecture = Commerce.Proxy.Entities.ArchitectureType.X86;
                            break;
                        case Windows.System.ProcessorArchitecture.x64:
                            architecture = Commerce.Proxy.Entities.ArchitectureType.X64;
                            break;
                        case Windows.System.ProcessorArchitecture.arm:
                            architecture = Commerce.Proxy.Entities.ArchitectureType.ARM;
                            break;
                    }
                }
                return architecture;
            };
            WwaApplication.prototype.getApplicationType = function (correlationId) {
                return this._applicationType;
            };
            WwaApplication.prototype.registerSwipeBinding = function (element) {
            };
            WwaApplication.prototype.getAppSpecificHardwareId = function () {
                var ashwidBuffer = Windows.System.Profile.HardwareIdentification.getPackageSpecificToken(null).id;
                var ashwidBytes = new Array(ashwidBuffer.length);
                var dataReader;
                try {
                    dataReader = Windows.Storage.Streams.DataReader.fromBuffer(ashwidBuffer);
                    dataReader.readBytes(ashwidBytes);
                }
                finally {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(dataReader)) {
                        dataReader.close();
                    }
                }
                return ashwidBytes.toString();
            };
            WwaApplication.prototype.getBrowserType = function () {
                return Commerce.Host.BrowserType.IE11;
            };
            WwaApplication.prototype.getCurrentMemoryUsageInMB = function () {
                return Windows.System.MemoryManager.appMemoryUsage / WwaApplication.MB_TO_BYTE_RATIO;
            };
            WwaApplication.prototype.getAppMemoryUsageLimitInMB = function () {
                var memoryInMB = Windows.System.MemoryManager.appMemoryUsageLimit / WwaApplication.MB_TO_BYTE_RATIO;
                if (this.getApplicationType() === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindows
                    && this.getArchitectureType() === Commerce.Proxy.Entities.ArchitectureType.X86
                    && memoryInMB > 2048) {
                    return 2048;
                }
                else {
                    return memoryInMB;
                }
            };
            WwaApplication.prototype.isScreenCaptureAvailable = function () {
                try {
                    if (Commerce.ObjectExtensions.isFunction(Microsoft.Dynamics.Commerce.ClientBroker.ScreenCapture.takeScreenshotAsync)) {
                        return true;
                    }
                }
                catch (error) {
                    return false;
                }
                return false;
            };
            WwaApplication.prototype.openNewWindowAsync = function (uriToLaunch, correlationId) {
                var asyncResult = new Commerce.VoidAsyncResult();
                var uri = new Windows.Foundation.Uri(uriToLaunch);
                var launcherOptions = new Windows.System.LauncherOptions();
                launcherOptions.treatAsUntrusted = true;
                Windows.System.Launcher.launchUriAsync(uri, launcherOptions).then(function (launchStatus) {
                    if (launchStatus) {
                        asyncResult.resolve();
                    }
                    else {
                        asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.URI_LAUNCH_FAILED)]);
                    }
                }, function (error) {
                    Commerce.RetailLogger.applicationFailedToLaunchUri(correlationId, error.message);
                    asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.URI_LAUNCH_FAILED)]);
                });
                return asyncResult;
            };
            WwaApplication.MB_TO_BYTE_RATIO = 1048576;
            return WwaApplication;
        }());
        Host.WwaApplication = WwaApplication;
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
        var WwaConfigurationProvider = (function () {
            function WwaConfigurationProvider() {
            }
            WwaConfigurationProvider.prototype.initialize = function () {
                return Commerce.VoidAsyncResult.createResolved();
            };
            WwaConfigurationProvider.prototype.getValue = function (key) {
                var value;
                try {
                    value = Microsoft.Dynamics.Commerce.ClientBroker.AppConfiguration.read(key);
                }
                catch (error) {
                    Commerce.RetailLogger.wwaConfigurationProviderFailedToGetConfigurationValue(error);
                }
                return value;
            };
            WwaConfigurationProvider.prototype.getArgumentValue = function (key) {
                return this.getValue(key);
            };
            return WwaConfigurationProvider;
        }());
        Host.WwaConfigurationProvider = WwaConfigurationProvider;
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
        var WwaGlobalization = (function (_super) {
            __extends(WwaGlobalization, _super);
            function WwaGlobalization() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            WwaGlobalization.prototype.getApplicationLanguage = function () {
                return Windows.Globalization.ApplicationLanguages.primaryLanguageOverride || this.getDefaultLanguageTag();
            };
            WwaGlobalization.prototype.setApplicationLanguageAsync = function (languageTag) {
                Windows.Globalization.ApplicationLanguages.primaryLanguageOverride = languageTag;
                return Commerce.VoidAsyncResult.createResolved();
            };
            WwaGlobalization.prototype.getDefaultLanguageTag = function () {
                return this.getSupportedLanguageTags()[0] || "en-US";
            };
            WwaGlobalization.prototype.getSupportedLanguageTags = function () {
                var manifestLanguages = Windows.Globalization.ApplicationLanguages.manifestLanguages;
                return manifestLanguages.slice(0);
            };
            return WwaGlobalization;
        }(Host.Globalization.GlobalizationBase));
        Host.WwaGlobalization = WwaGlobalization;
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
        var WwaHost = (function () {
            function WwaHost() {
                this._application = new Host.WwaApplication();
                this._globalization = new Host.WwaGlobalization();
            }
            Object.defineProperty(WwaHost.prototype, "application", {
                get: function () {
                    return this._application;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WwaHost.prototype, "globalization", {
                get: function () {
                    return this._globalization;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WwaHost.prototype, "timers", {
                get: function () {
                    return window;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WwaHost.prototype, "configurationProvider", {
                get: function () {
                    return this._configurationProvider;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WwaHost.prototype, "azureActiveDirectoryAdapter", {
                get: function () {
                    return this._azureActiveDirectoryAdapter;
                },
                enumerable: true,
                configurable: true
            });
            WwaHost.prototype.initializeAsync = function (configurationSetupCallback) {
                var _this = this;
                var initializationQueue = new Commerce.AsyncQueue();
                if (Host.instance.application.getApplicationType() === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindows) {
                    this._configurationProvider = new Host.WwaConfigurationProvider();
                }
                else {
                    this._configurationProvider = new Host.WwaPhoneConfigurationProvider();
                }
                initializationQueue.enqueue(function () {
                    return _this._configurationProvider.initialize();
                }).enqueue(function () {
                    if (configurationSetupCallback) {
                        configurationSetupCallback(_this.configurationProvider);
                    }
                    _this.initializeCharms();
                    _this.subscribeEnableHardwareOnResume();
                    _this._azureActiveDirectoryAdapter = new Host.WwaAADAuthenticationAdapter();
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return initializationQueue.run();
            };
            WwaHost.prototype.isApplicationUpdateRequired = function () {
                var version = this.application.getApplicationIdentity().version;
                var currentVersionString = Commerce.StringExtensions.format("{0}.{1}.{2}.{3}", version.major, version.minor, version.build, version.revision);
                var expectedVersionString = this.configurationProvider.getValue("InstalledAppVersion");
                return !Commerce.StringExtensions.isNullOrWhitespace(expectedVersionString) && (currentVersionString !== expectedVersionString);
            };
            WwaHost.prototype.isRemoteScriptLoadAllowed = function () {
                return false;
            };
            WwaHost.prototype.subscribeEnableHardwareOnResume = function () {
                Windows.UI.WebUI.WebUIApplication.onresuming = function () {
                    Commerce.Peripherals.instance.barcodeScanner.enableAsync(null);
                    Commerce.Peripherals.instance.magneticStripeReader.enableAsync(null);
                };
            };
            WwaHost.prototype.initializeCharms = function () {
                var _this = this;
                WinJS.Application.onsettings = function (args) {
                    var flyoutCommands = {};
                    var applicationCommands = args.detail.e.request.applicationCommands;
                    applicationCommands.append(new Windows.UI.ApplicationSettings.SettingsCommand("settings", Commerce.ViewModelAdapter.getResourceString("string_7401"), function () { return Commerce.ViewModelAdapter.navigate("SettingsView"); }));
                    args.detail.applicationcommands = flyoutCommands;
                    WinJS.UI.SettingsFlyout.populateSettings(args);
                    applicationCommands.append(_this.createHelpSettingCommand());
                };
            };
            WwaHost.prototype.createHelpSettingCommand = function () {
                return new Windows.UI.ApplicationSettings.SettingsCommand("help", Commerce.ViewModelAdapter.getResourceString("string_7"), function () {
                    Windows.System.Launcher.launchUriAsync(new Windows.Foundation.Uri("http://go.microsoft.com/fwlink/?LinkId=327785"));
                });
            };
            return WwaHost;
        }());
        Host.WwaHost = WwaHost;
        Commerce.Host.instance = new WwaHost();
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
        var StorageFile = Windows.Storage.StorageFile;
        var KnownFolders = Windows.Storage.KnownFolders;
        var WwaPhoneConfigurationProvider = (function () {
            function WwaPhoneConfigurationProvider() {
                this.configuration = [];
            }
            WwaPhoneConfigurationProvider.prototype.initialize = function () {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var documentsFolder = KnownFolders.documentsLibrary;
                var storageFile;
                var hasConfigFile;
                var fileFound = false;
                var posDocument;
                var documentFiles;
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    documentsFolder.getFileAsync(WwaPhoneConfigurationProvider.CONFIG_FILE).then(function (file) {
                        storageFile = file;
                        asyncResult.resolve();
                    }, function (error) {
                        Commerce.RetailLogger.applicationFailedToLoadConfiguration(error.message);
                        asyncResult.resolve();
                    });
                    return asyncResult;
                }).enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (!storageFile) {
                        StorageFile.getFileFromApplicationUriAsync(new Windows.Foundation.Uri(WwaPhoneConfigurationProvider.DEFAULT_CONFIG_FILE))
                            .then(function (file) {
                            file.copyAsync(documentsFolder).then(function (file) {
                                storageFile = file;
                                hasConfigFile = false;
                                asyncResult.resolve();
                            }, function (error) {
                                Commerce.RetailLogger.applicationFailedToLoadConfiguration("Failed to create default configuration file in documents folder: " + error.message);
                                asyncResult.resolve();
                            });
                        }, function (error) {
                            Commerce.RetailLogger.applicationFailedToLoadConfiguration("Failed to open default configuration file: " + error.message);
                            asyncResult.resolve();
                        });
                    }
                    else {
                        hasConfigFile = true;
                        asyncResult.resolve();
                    }
                    return asyncResult;
                }).enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (!hasConfigFile) {
                        documentsFolder.getFilesAsync().then(function (files) {
                            documentFiles = files;
                            asyncResult.resolve();
                        }, function (error) {
                            Commerce.RetailLogger.applicationFailedToLoadConfiguration("Failed to read configuration file; " + error);
                            asyncResult.resolve();
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                }).enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (!hasConfigFile && documentFiles) {
                        var filePrefix_1 = "RetailModernPOS_";
                        documentFiles.forEach(function (file, index) {
                            var fileName = file.name;
                            var havePrefix = fileName.substr(0, filePrefix_1.length) === filePrefix_1;
                            if ((file.fileType === ".xml") && havePrefix && !fileFound) {
                                var axConfigFile = file;
                                fileFound = true;
                                Windows.Storage.FileIO.readTextAsync(axConfigFile).then(function (fileContent) {
                                    var storageDocument = $.parseXML(fileContent);
                                    var storageAppSettings = $(storageDocument).find("appSettings");
                                    Windows.Storage.FileIO.readTextAsync(storageFile).then(function (posFileContent) {
                                        posDocument = $.parseXML(posFileContent);
                                        var posAppSettings = $(posDocument).find("appSettings");
                                        storageAppSettings.find("add").each(function (i, element) {
                                            var keyAttribute = element.attributes.getNamedItem("key");
                                            var valueAttribute = element.attributes.getNamedItem("value");
                                            var domElement;
                                            var splitDelimiter = "ModernPos";
                                            var splitKey = keyAttribute.value.split(splitDelimiter);
                                            var currentDom = $(posAppSettings).find("add[key='" + splitKey[1] + "']");
                                            if (currentDom) {
                                                $(currentDom).remove();
                                            }
                                            domElement = posDocument.createElement("add");
                                            domElement.setAttribute("key", splitKey[1]);
                                            domElement.setAttribute("value", valueAttribute.value);
                                            posAppSettings.append(domElement);
                                        });
                                        asyncResult.resolve();
                                    }, function (error) {
                                        Commerce.RetailLogger.applicationFailedToLoadConfiguration("Failed to read Pos configuration file; " + error);
                                        asyncResult.resolve();
                                    });
                                }, function (error) {
                                    Commerce.RetailLogger.applicationFailedToLoadConfiguration("Failed to read AX configuration file; " + error);
                                    asyncResult.resolve();
                                });
                            }
                            else {
                                if (documentFiles.length - 1 === index && !fileFound) {
                                    asyncResult.resolve();
                                }
                            }
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                }).enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (!hasConfigFile && posDocument) {
                        var xmlSerializer = new XMLSerializer();
                        var xmlString = xmlSerializer.serializeToString(posDocument);
                        Windows.Storage.FileIO.writeTextAsync(storageFile, xmlString)
                            .done(function () {
                            asyncResult.resolve();
                        }, function (error) {
                            Commerce.RetailLogger.applicationFailedToLoadConfiguration("Failed to write the configuration file; " + error);
                            asyncResult.resolve();
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                }).enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    Windows.Storage.FileIO.readTextAsync(storageFile).then(function (fileContent) {
                        var document = $.parseXML(fileContent);
                        var appSettings = $(document).find("appSettings");
                        appSettings.find("add").each(function (i, element) {
                            var keyAttribute = element.attributes.getNamedItem("key");
                            var valueAttribute = element.attributes.getNamedItem("value");
                            if (keyAttribute && valueAttribute) {
                                _this.configuration[keyAttribute.value] = valueAttribute.value;
                            }
                        });
                        asyncResult.resolve();
                    }, function (error) {
                        Commerce.RetailLogger.applicationFailedToLoadConfiguration("Failed to read configuration file; " + error);
                        asyncResult.resolve();
                    });
                    return asyncResult;
                });
                return asyncQueue.run();
            };
            WwaPhoneConfigurationProvider.prototype.getValue = function (key) {
                return this.configuration[key];
            };
            WwaPhoneConfigurationProvider.prototype.getArgumentValue = function (key) {
                return this.getValue(key);
            };
            WwaPhoneConfigurationProvider.CONFIG_FILE = "Pos.Config.xml";
            WwaPhoneConfigurationProvider.DEFAULT_CONFIG_FILE = "ms-appx:///" + WwaPhoneConfigurationProvider.CONFIG_FILE;
            return WwaPhoneConfigurationProvider;
        }());
        Host.WwaPhoneConfigurationProvider = WwaPhoneConfigurationProvider;
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Native;
        (function (Native) {
            "use strict";
            var BarcodeScanner = (function () {
                function BarcodeScanner(deviceId) {
                    this._deviceId = deviceId;
                }
                BarcodeScanner.prototype.initializeAsync = function () {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult();
                    var success = function (scanner) {
                        if (scanner != null) {
                            _this._barcodeScanner = scanner;
                        }
                        asyncResult.resolve();
                    };
                    var failure = function (error) {
                        Commerce.RetailLogger.peripheralsBarcodeScannerEnableFailed(error.message);
                        asyncResult.reject(null);
                    };
                    try {
                        if (Commerce.StringExtensions.isNullOrWhitespace(this._deviceId)) {
                            Windows.Devices.PointOfService.BarcodeScanner.getDefaultAsync().then(success, failure);
                        }
                        else {
                            Windows.Devices.PointOfService.BarcodeScanner.fromIdAsync(this._deviceId).then(success, failure);
                        }
                    }
                    catch (error) {
                        failure(error);
                    }
                    return asyncResult;
                };
                BarcodeScanner.prototype.enableAsync = function (scannerMsgEventHandler) {
                    var _this = this;
                    return Commerce.VoidAsyncResult.retryOnFailure(function () { return _this._enableAsyncInternal(scannerMsgEventHandler); }, function () { return _this.initializeAsync(); });
                };
                BarcodeScanner.prototype.disableAsync = function () {
                    if (this._barcodeScanner && this._claimedBarcodeScanner) {
                        this._claimedBarcodeScanner.close();
                        this._claimedBarcodeScanner = null;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                BarcodeScanner.prototype._enableAsyncInternal = function (scannerMsgEventHandler) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (this._barcodeScanner != null) {
                        this.disableAsync();
                        this._barcodeScanner.claimScannerAsync()
                            .done(function (claimedScanner) {
                            if (claimedScanner) {
                                _this._claimedBarcodeScanner = claimedScanner;
                                claimedScanner.isDecodeDataEnabled = true;
                                claimedScanner.ondatareceived = (function (args) {
                                    if (scannerMsgEventHandler) {
                                        scannerMsgEventHandler(Windows.Storage.Streams.DataReader.fromBuffer(args.report.scanDataLabel).
                                            readString(args.report.scanDataLabel.length).replace(/(\r\n|\n|\r)/gm, ""));
                                    }
                                });
                                claimedScanner.enableAsync().done(function () {
                                    asyncResult.resolve();
                                }, function (e) {
                                    Commerce.RetailLogger.peripheralsBarcodeScannerEnableFailed(e.message);
                                    asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED)]);
                                });
                            }
                            else {
                                asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED)]);
                            }
                        }, function (e) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED)]);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                return BarcodeScanner;
            }());
            Native.BarcodeScanner = BarcodeScanner;
        })(Native = Peripherals.Native || (Peripherals.Native = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Facade;
        (function (Facade) {
            "use strict";
            var MagneticStripeReaderType;
            (function (MagneticStripeReaderType) {
                MagneticStripeReaderType[MagneticStripeReaderType["windowsNative"] = 0] = "windowsNative";
                MagneticStripeReaderType[MagneticStripeReaderType["veriFoneE255Compatible"] = 1] = "veriFoneE255Compatible";
            })(MagneticStripeReaderType = Facade.MagneticStripeReaderType || (Facade.MagneticStripeReaderType = {}));
            var MagneticStripeReader = (function () {
                function MagneticStripeReader() {
                    this._magneticStripeReaders = [];
                }
                MagneticStripeReader.prototype.initializeAsync = function () {
                    var _this = this;
                    var VERIFONE_E255_COMPATIBLE_DEVICE_IDENTIFIER = "_VID&00010039_PID&5035";
                    var asyncResult = new Commerce.VoidAsyncResult();
                    var errors = new Array();
                    var msrSelector = null;
                    var bluetoothSerialPortDeviceSelector = null;
                    try {
                        msrSelector = Windows.Devices.PointOfService.MagneticStripeReader.getDeviceSelector();
                    }
                    catch (error) {
                        Commerce.RetailLogger.peripheralsMagneticStripeReaderGetDeviceSelectorFailed(error.message);
                    }
                    try {
                        bluetoothSerialPortDeviceSelector = Windows
                            .Devices
                            .Bluetooth
                            .Rfcomm
                            .RfcommDeviceService
                            .getDeviceSelector(Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId.serialPort);
                    }
                    catch (error) {
                        Commerce.RetailLogger.peripheralsMagneticStripeReaderGetBluetoothDeviceSelectorFailed(error.message);
                    }
                    if (!msrSelector && !bluetoothSerialPortDeviceSelector) {
                        asyncResult.resolve();
                    }
                    else {
                        WinJS.Promise.join([
                            msrSelector === null
                                ? null
                                : Windows.Devices.Enumeration.DeviceInformation.findAllAsync(msrSelector, null),
                            bluetoothSerialPortDeviceSelector === null
                                ? null
                                : Windows.Devices.Enumeration.DeviceInformation.findAllAsync(bluetoothSerialPortDeviceSelector, null)
                        ]).done(function (args) {
                            var numToProcess = args.length;
                            var _loop_3 = function (index) {
                                var msrType = (index === 0
                                    ? Commerce.Peripherals.Facade.MagneticStripeReaderType.windowsNative
                                    : Commerce.Peripherals.Facade.MagneticStripeReaderType.veriFoneE255Compatible);
                                var deviceInformationCollection = args[index];
                                var deviceInfomationArray = new Array();
                                if (deviceInformationCollection && deviceInformationCollection.size > 0) {
                                    deviceInformationCollection.forEach(function (deviceInformation) {
                                        deviceInfomationArray.push(deviceInformation);
                                    });
                                }
                                Commerce.Utilities.AsyncExecutionHelper.forEachAsync(deviceInfomationArray, function (deviceInformation, next) {
                                    if (deviceInformation.isEnabled) {
                                        if (msrType === Commerce.Peripherals.Facade.MagneticStripeReaderType.windowsNative) {
                                            var msr_1 = new Peripherals.Native.MagneticStripeReader(deviceInformation.id);
                                            msr_1.initializeAsync()
                                                .done(function () {
                                                _this._magneticStripeReaders.push(msr_1);
                                                next();
                                            })
                                                .fail(function (error) {
                                                Array.prototype.push.apply(errors, error);
                                                next();
                                            });
                                        }
                                        else if (msrType === Commerce.Peripherals.Facade.MagneticStripeReaderType.veriFoneE255Compatible) {
                                            var deviceInfoId_1 = deviceInformation.id;
                                            if (deviceInfoId_1.indexOf(VERIFONE_E255_COMPATIBLE_DEVICE_IDENTIFIER) >= 0) {
                                                Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService.fromIdAsync(deviceInfoId_1)
                                                    .done(function (rfcommService) {
                                                    if (rfcommService) {
                                                        var msr_2 = new Peripherals.Native.VfE255MagneticStripeReader(deviceInfoId_1);
                                                        msr_2.initializeAsync()
                                                            .done(function () {
                                                            _this._magneticStripeReaders.push(msr_2);
                                                            next();
                                                        })
                                                            .fail(function (error) {
                                                            Array.prototype.push.apply(errors, error);
                                                            next();
                                                        });
                                                    }
                                                    else {
                                                        next();
                                                    }
                                                }, function (error) {
                                                    Commerce.RetailLogger.peripheralsMagneticStripeReaderRfCommDeviceServiceNotFound();
                                                    next();
                                                });
                                            }
                                            else {
                                                next();
                                            }
                                        }
                                    }
                                    else {
                                        next();
                                    }
                                }, function () {
                                    if (--numToProcess <= 0) {
                                        if (errors.length === 0) {
                                            asyncResult.resolve();
                                        }
                                        else {
                                            asyncResult.reject(errors);
                                        }
                                    }
                                });
                            };
                            for (var index = 0; index < args.length; index++) {
                                _loop_3(index);
                            }
                        }, function (error) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_MSR_NOTFOUND)]);
                        });
                    }
                    return asyncResult;
                };
                MagneticStripeReader.prototype.enableAsync = function (readerMsgEventHandler) {
                    return Commerce.VoidAsyncResult.join(this._magneticStripeReaders.map(function (reader) {
                        return reader.enableAsync(readerMsgEventHandler);
                    }));
                };
                MagneticStripeReader.prototype.disableAsync = function () {
                    return Commerce.VoidAsyncResult.join(this._magneticStripeReaders.map(function (reader) {
                        return reader.disableAsync();
                    }));
                };
                return MagneticStripeReader;
            }());
            Facade.MagneticStripeReader = MagneticStripeReader;
        })(Facade = Peripherals.Facade || (Peripherals.Facade = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Native;
        (function (Native) {
            "use strict";
            var DualDisplayState;
            (function (DualDisplayState) {
                DualDisplayState[DualDisplayState["Closed"] = 0] = "Closed";
                DualDisplayState[DualDisplayState["Open"] = 1] = "Open";
                DualDisplayState[DualDisplayState["Ready"] = 2] = "Ready";
            })(DualDisplayState || (DualDisplayState = {}));
            var DualDisplay = (function () {
                function DualDisplay() {
                    this._dualDisplayState = DualDisplayState.Closed;
                    this._messageQueue = [];
                    window.onmessage = this._handleMessage.bind(this);
                }
                DualDisplay.prototype.initialize = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this._deviceConfiguration)) {
                        this._deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                    }
                    this._openWindow();
                };
                DualDisplay.prototype.sendCartChangedMessage = function () {
                    this._sendMessage({
                        type: "cartChanged",
                        args: { cart: Commerce.Session.instance.cart }
                    });
                };
                DualDisplay.prototype.sendCustomerChangedMessage = function () {
                    this._sendMessage({
                        type: "customerChanged",
                        args: { customer: Commerce.Session.instance.Customer }
                    });
                };
                DualDisplay.prototype.sendIsLoggedOnStateChangedMessage = function () {
                    this._sendMessage({
                        type: "isLoggedOnStateChanged",
                        args: {
                            isLoggedOn: Commerce.Session.instance.isLoggedOn,
                            currentEmployee: Commerce.Session.instance.CurrentEmployee
                        }
                    });
                };
                DualDisplay.prototype._sendGetChannelConfigurationDataResponseMessage = function () {
                    this._sendMessage({
                        type: "getChannelConfigurationDataResponse",
                        args: {
                            channelConfiguration: Commerce.ApplicationContext.Instance.channelConfiguration
                        }
                    });
                };
                DualDisplay.prototype._sendGetDeviceConfigurationDataResponseMessage = function () {
                    this._sendMessage({
                        type: "getDeviceConfigurationDataResponse",
                        args: {
                            deviceConfiguration: this._deviceConfiguration
                        }
                    });
                };
                DualDisplay.prototype._sendGetCurrentCartDataResponseMessage = function () {
                    this._sendMessage({
                        type: "getCurrentCartDataResponse",
                        args: {
                            cart: Commerce.Session.instance.cart
                        }
                    });
                };
                DualDisplay.prototype._sendGetCurrentCustomerDataResponseMessage = function () {
                    this._sendMessage({
                        type: "getCurrentCustomerDataResponse",
                        args: {
                            customer: Commerce.Session.instance.Customer
                        }
                    });
                };
                DualDisplay.prototype._sendGetCurrentLogonStateDataResponseMessage = function () {
                    this._sendMessage({
                        type: "getCurrentLogonStateDataResponse",
                        args: {
                            isLoggedOn: Commerce.Session.instance.isLoggedOn,
                            currentEmployee: Commerce.Session.instance.CurrentEmployee
                        }
                    });
                };
                DualDisplay.prototype._sendMessage = function (message) {
                    if (message.type === "getChannelConfigurationDataResponse" ||
                        message.type === "getDeviceConfigurationDataResponse" ||
                        message.type === "getCurrentCartDataResponse" ||
                        message.type === "getCurrentCustomerDataResponse" ||
                        message.type === "getCurrentLogonStateDataResponse") {
                        this._sendMessageWithoutStatusCheck(message);
                        return;
                    }
                    switch (this._dualDisplayState) {
                        case DualDisplayState.Closed:
                            this.initialize();
                            if (this._dualDisplayState !== DualDisplayState.Closed) {
                                this._sendMessage(message);
                            }
                            break;
                        case DualDisplayState.Open:
                            this._messageQueue.push(message);
                            break;
                        case DualDisplayState.Ready:
                            this._sendMessageWithoutStatusCheck(message);
                            break;
                    }
                };
                DualDisplay.prototype._sendMessageWithoutStatusCheck = function (message) {
                    this._dualDisplayView.postMessage(JSON.stringify(message), document.location.protocol + "//" + document.location.host);
                };
                DualDisplay.prototype._openWindow = function () {
                    var _this = this;
                    if (this._isDualDisplayAvailable() && this._dualDisplayState === DualDisplayState.Closed) {
                        var dualDisplayWindow = window.open(DualDisplay.VIEW_PATH, null, "msHideView=yes");
                        this._dualDisplayView = {
                            window: dualDisplayWindow,
                            viewId: MSApp.getViewId(dualDisplayWindow),
                            postMessage: function (message, targetOrigin, ports) {
                                _this._dualDisplayView.window.postMessage(message, targetOrigin, ports);
                            }
                        };
                        Windows.UI.ViewManagement.ProjectionManager.startProjectingAsync(this._dualDisplayView.viewId, Windows.UI.ViewManagement.ApplicationView.getForCurrentView().id).done(function () {
                            Commerce.RetailLogger.dualDisplayStartProjectionSucceeded();
                        }, function (error) {
                            _this._dualDisplayView.window.close();
                            _this._dualDisplayView = null;
                            _this._dualDisplayState = DualDisplayState.Closed;
                            _this._messageQueue = _this._messageQueue.splice(0, _this._messageQueue.length);
                            Commerce.RetailLogger.dualDisplayStartProjectionFailed(JSON.stringify(error));
                            Commerce.NotificationHandler.displayClientErrors([
                                new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_DUALDISPLAY_ERROR)
                            ]);
                        });
                        this._dualDisplayState = DualDisplayState.Open;
                    }
                };
                DualDisplay.prototype._handleMessage = function (message) {
                    var data = JSON.parse(message.data);
                    switch (data.type) {
                        case "close":
                            this._handleMessageClose();
                            break;
                        case "ready":
                            this._handleMessageReady();
                            break;
                        case "writeEvent":
                            var writeEventData = data;
                            this._handleMessageWriteEvent(writeEventData.args);
                            break;
                        case "getChannelConfigurationDataRequest":
                            this._handleMessageGetChannelConfigurationDataDataRequest();
                            break;
                        case "getDeviceConfigurationDataRequest":
                            this._handleMessageGetDeviceConfigurationDataDataRequest();
                            break;
                        case "getCurrentCartDataRequest":
                            this._handleMessageGetCurrentCartDataRequest();
                            break;
                        case "getCurrentCustomerDataRequest":
                            this._handleMessageGetCurrentCustomerDataRequest();
                            break;
                        case "getCurrentLogonStateDataRequest":
                            this._handleMessageGetCurrentLogonStateDataRequest();
                            break;
                        default:
                            break;
                    }
                };
                DualDisplay.prototype._handleMessageClose = function () {
                    this._dualDisplayView = null;
                    this._dualDisplayState = DualDisplayState.Closed;
                    this._messageQueue.splice(0, this._messageQueue.length);
                };
                DualDisplay.prototype._handleMessageReady = function () {
                    var _this = this;
                    this._dualDisplayState = DualDisplayState.Ready;
                    this._messageQueue.forEach(function (currentMessage) {
                        _this._sendMessage(currentMessage);
                    });
                    this._messageQueue.splice(0, this._messageQueue.length);
                };
                DualDisplay.prototype._handleMessageWriteEvent = function (writeEventData) {
                    TsLogging.LoggerBase.writeDualDisplayEvent(writeEventData.event);
                };
                DualDisplay.prototype._handleMessageGetChannelConfigurationDataDataRequest = function () {
                    this._sendGetChannelConfigurationDataResponseMessage();
                };
                DualDisplay.prototype._handleMessageGetDeviceConfigurationDataDataRequest = function () {
                    this._sendGetDeviceConfigurationDataResponseMessage();
                };
                DualDisplay.prototype._handleMessageGetCurrentCartDataRequest = function () {
                    this._sendGetCurrentCartDataResponseMessage();
                };
                DualDisplay.prototype._handleMessageGetCurrentCustomerDataRequest = function () {
                    this._sendGetCurrentCustomerDataResponseMessage();
                };
                DualDisplay.prototype._handleMessageGetCurrentLogonStateDataRequest = function () {
                    this._sendGetCurrentLogonStateDataResponseMessage();
                };
                DualDisplay.prototype._isDualDisplayAvailable = function () {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance)
                        && Commerce.ApplicationContext.Instance.hardwareProfile.DualDisplayActive
                        && Windows.UI.ViewManagement.ProjectionManager.projectionDisplayAvailable;
                };
                DualDisplay.VIEW_PATH = "ms-appx:///DualDisplay.html";
                return DualDisplay;
            }());
            Native.DualDisplay = DualDisplay;
        })(Native = Peripherals.Native || (Peripherals.Native = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Native;
        (function (Native) {
            "use strict";
            var MagneticStripeReader = (function () {
                function MagneticStripeReader(deviceId) {
                    this._deviceId = deviceId;
                }
                MagneticStripeReader.prototype.initializeAsync = function () {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult();
                    try {
                        Windows.Devices.PointOfService.MagneticStripeReader.fromIdAsync(this._deviceId)
                            .then(function (reader) {
                            if (reader != null) {
                                _this._magneticStripeReader = reader;
                            }
                            asyncResult.resolve();
                        }, function (e) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_MSR_NOTFOUND)]);
                        });
                    }
                    catch (error) {
                        Commerce.RetailLogger.peripheralsMagneticStripeReaderInitializeFailed(error.message);
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                MagneticStripeReader.prototype.enableAsync = function (readerMsgEventHandler) {
                    var _this = this;
                    return Commerce.VoidAsyncResult.retryOnFailure(function () { return _this.enableAsyncInternal(readerMsgEventHandler); }, function () { return _this.initializeAsync(); });
                };
                MagneticStripeReader.prototype.disableAsync = function () {
                    if (this._magneticStripeReader && this._claimedMagneticStripeReader) {
                        this._claimedMagneticStripeReader.onbankcarddatareceived = null;
                        this._claimedMagneticStripeReader.close();
                        this._claimedMagneticStripeReader = null;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                MagneticStripeReader.prototype.enableAsyncInternal = function (readerMsgEventHandler) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (this._magneticStripeReader != null) {
                        this.disableAsync();
                        this._magneticStripeReader.claimReaderAsync()
                            .done(function (claimedReader) {
                            if (claimedReader) {
                                _this._claimedMagneticStripeReader = claimedReader;
                                claimedReader.isDecodeDataEnabled = true;
                                claimedReader.tracksToRead = Windows.Devices.PointOfService.MagneticStripeReaderTrackIds.track1
                                    | Windows.Devices.PointOfService.MagneticStripeReaderTrackIds.track2;
                                claimedReader.onbankcarddatareceived = (function (args) {
                                    if (readerMsgEventHandler) {
                                        readerMsgEventHandler({
                                            CardNumber: args.accountNumber,
                                            FirstName: args.firstName,
                                            LastName: args.surname,
                                            ExpirationMonth: parseInt(args.expirationDate.substring(2), 10),
                                            ExpirationYear: parseInt(args.expirationDate.substring(0, 2), 10),
                                            Track1: args.report.track1.data
                                                ? Windows.Storage.Streams.DataReader.fromBuffer(args.report.track1.data)
                                                    .readString(args.report.track1.data.length)
                                                : Commerce.StringExtensions.EMPTY,
                                            Track2: args.report.track2.data
                                                ? Windows.Storage.Streams.DataReader.fromBuffer(args.report.track2.data)
                                                    .readString(args.report.track2.data.length)
                                                : Commerce.StringExtensions.EMPTY,
                                            Track3: args.report.track3.data
                                                ? Windows.Storage.Streams.DataReader.fromBuffer(args.report.track3.data)
                                                    .readString(args.report.track3.data.length)
                                                : Commerce.StringExtensions.EMPTY
                                        });
                                    }
                                });
                                claimedReader.enableAsync().done(function () {
                                    asyncResult.resolve();
                                }, function (e) {
                                    Commerce.RetailLogger.peripheralsMagneticStripeReaderEnableFailed(e.message);
                                    asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_MSR_ENABLE_FAILED)]);
                                });
                            }
                            else {
                                asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED)]);
                            }
                        }, function (e) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED)]);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                return MagneticStripeReader;
            }());
            Native.MagneticStripeReader = MagneticStripeReader;
        })(Native = Peripherals.Native || (Peripherals.Native = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Native;
        (function (Native) {
            "use strict";
            var Printer = (function () {
                function Printer() {
                    var _this = this;
                    this._printManager = Windows.Graphics.Printing.PrintManager.getForCurrentView();
                    this._barcodeMap = new Commerce.Lazy(function () { return _this.initializeBarcodeMap(); });
                }
                Printer.prototype.printAsync = function (printableReceipts, callerContext) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    var htmlPrintDocSource;
                    var onPrintTaskRequested = function (printEvent) {
                        var printTask = printEvent.request.createPrintTask(Commerce.ViewModelAdapter.getResourceString("string_3"), function (args) {
                            args.setSource(htmlPrintDocSource);
                            printTask.oncompleted = function (printTaskCompletionEvent) {
                                _this._printManager.onprinttaskrequested = null;
                            };
                        });
                    };
                    this._printManager.onprinttaskrequested = onPrintTaskRequested;
                    MSApp.getHtmlPrintDocumentSourceAsync(this.prepareContentUnsafe(printableReceipts))
                        .then(function (htmlPrintDocumentSource) {
                        htmlPrintDocSource = htmlPrintDocumentSource;
                        Windows.Graphics.Printing.PrintManager.showPrintUIAsync()
                            .done(function (result) {
                            if (result) {
                                asyncResult.resolve();
                            }
                            else {
                                asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_PRINTER_FAILED)]);
                            }
                        });
                    }, function (error) {
                        asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_PRINTER_FAILED)]);
                    });
                    return asyncResult;
                };
                Printer.prototype.prepareContentUnsafe = function (printableReceipts) {
                    var _this = this;
                    var textEscapeMarker = "&#x1B;";
                    var textBoldMarker = textEscapeMarker + "|2C";
                    var textDoubleSizeBoldMarker = textEscapeMarker + "|4C";
                    var textNewLineMarker = "\r\n";
                    var htmlBoldTagStart = "<b>";
                    var htmlBoldTagEnd = "</b>";
                    var htmlSpaceTag = "&nbsp;";
                    var htmlNewLineTag = "<br/>";
                    var htmlNewLineTagName = "br";
                    var htmlDivTag = "div";
                    var htmlCanvasTag = "canvas";
                    var htmlImageTag = "img";
                    var htmlFontTagStart = "<font face='Courier New' size=1>";
                    var htmlFontTagEnd = "</font>";
                    var barCodeRegEx = "<B: (.+?)>";
                    var localizationStringRegEx = "<T:(.+?)>";
                    var logoRegEx = "<L:(.+?)>";
                    var documentFragment = document.createDocumentFragment();
                    printableReceipts.forEach(function (receipt) {
                        var printBuffer = ((receipt.receiptHeader || Commerce.StringExtensions.EMPTY)
                            + (receipt.receiptBody || Commerce.StringExtensions.EMPTY)
                            + (receipt.receiptFooter || Commerce.StringExtensions.EMPTY))
                            .trim();
                        while (true) {
                            var boldMarkerIndex = printBuffer.indexOf(textBoldMarker);
                            if (boldMarkerIndex < 0) {
                                break;
                            }
                            var endOfLineMarkerIndex = printBuffer.indexOf(textNewLineMarker, boldMarkerIndex);
                            var nextStyleMarkerIndex = printBuffer.indexOf(textEscapeMarker, boldMarkerIndex + 1);
                            var endOfBoldMarkerIndex = Math.min(endOfLineMarkerIndex, nextStyleMarkerIndex);
                            var entireBoldItem = printBuffer.substring(boldMarkerIndex + textBoldMarker.length, endOfBoldMarkerIndex);
                            var emptySpaces = Array(entireBoldItem.length + 1).join(" ");
                            printBuffer = (printBuffer.substring(0, endOfBoldMarkerIndex) + htmlBoldTagEnd + emptySpaces + printBuffer.substring(endOfBoldMarkerIndex))
                                .replace(textBoldMarker, htmlBoldTagStart);
                        }
                        while (true) {
                            var boldMarkerIndex = printBuffer.indexOf(textDoubleSizeBoldMarker);
                            if (boldMarkerIndex < 0) {
                                break;
                            }
                            var endOfLineMarkerIndex = printBuffer.indexOf(textNewLineMarker, boldMarkerIndex);
                            var nextStyleMarkerIndex = printBuffer.indexOf(textEscapeMarker, boldMarkerIndex + 1);
                            var endOfBoldMarkerIndex = Math.min(endOfLineMarkerIndex, nextStyleMarkerIndex);
                            var entireBoldItem = printBuffer.substring(boldMarkerIndex + textDoubleSizeBoldMarker.length, endOfBoldMarkerIndex);
                            var emptySpaces = Array(entireBoldItem.length + 1).join(" ");
                            printBuffer = (printBuffer.substring(0, endOfBoldMarkerIndex) + htmlBoldTagEnd + emptySpaces + printBuffer.substring(endOfBoldMarkerIndex))
                                .replace(textDoubleSizeBoldMarker, htmlBoldTagStart);
                        }
                        var regExp = new RegExp(barCodeRegEx);
                        var match = regExp.exec(printBuffer);
                        var barcodes = [];
                        var textAfterBarcodes = [];
                        var i = 0;
                        while (match) {
                            barcodes[i] = match[1];
                            var indexOfTextAfterBarcode = printBuffer.indexOf(match[0]);
                            printBuffer = printBuffer.replace(match[0], Commerce.StringExtensions.EMPTY);
                            match = regExp.exec(printBuffer);
                            if (match) {
                                var indexOfNextBarcode = printBuffer.indexOf(match[0]);
                                textAfterBarcodes[i] = printBuffer.substring(indexOfTextAfterBarcode, indexOfNextBarcode);
                                printBuffer = printBuffer.substring(0, indexOfTextAfterBarcode) + printBuffer.substring(indexOfNextBarcode, printBuffer.length);
                            }
                            else {
                                textAfterBarcodes[i] = printBuffer.substring(indexOfTextAfterBarcode);
                                printBuffer = printBuffer.substring(0, indexOfTextAfterBarcode);
                            }
                            i++;
                        }
                        regExp = new RegExp(logoRegEx);
                        match = regExp.exec(printBuffer);
                        var logos = [];
                        i = 0;
                        while (match) {
                            logos[i++] = match[1];
                            printBuffer = printBuffer.replace(match[0], Commerce.StringExtensions.EMPTY);
                            match = regExp.exec(printBuffer);
                        }
                        if (logos) {
                            logos.forEach(function (logo) {
                                var imageElement = document.createElement(htmlImageTag);
                                var outerDivElement = document.createElement(htmlDivTag);
                                outerDivElement.appendChild(imageElement);
                                documentFragment.appendChild(outerDivElement);
                                documentFragment.appendChild(document.createElement(htmlNewLineTagName));
                                _this.renderLogo(imageElement, outerDivElement, receipt, logo);
                            });
                        }
                        match = (new RegExp(localizationStringRegEx)).exec(printBuffer);
                        while (match) {
                            printBuffer = printBuffer.replace(match[0], Commerce.ViewModelAdapter.getResourceString(match[1]));
                            match = (new RegExp(localizationStringRegEx)).exec(printBuffer);
                        }
                        printBuffer = _this._replaceTags(htmlFontTagStart, printBuffer, htmlNewLineTag, htmlSpaceTag, htmlFontTagEnd);
                        var divElement = document.createElement(htmlDivTag);
                        divElement.innerHTML = printBuffer;
                        documentFragment.appendChild(divElement);
                        if (barcodes) {
                            barcodes.forEach(function (barcode, index) {
                                var canvasElement = document.createElement(htmlCanvasTag);
                                documentFragment.appendChild(canvasElement);
                                documentFragment.appendChild(document.createElement(htmlNewLineTagName));
                                _this.renderBarcode(canvasElement, barcode);
                                textAfterBarcodes[index] = _this._replaceTags(htmlFontTagStart, textAfterBarcodes[index], htmlNewLineTag, htmlSpaceTag, htmlFontTagEnd);
                                divElement = document.createElement(htmlDivTag);
                                divElement.innerHTML = textAfterBarcodes[index];
                                documentFragment.appendChild(divElement);
                            });
                        }
                        divElement = document.createElement(htmlDivTag);
                        documentFragment.appendChild(divElement);
                        divElement.style.pageBreakAfter = "always";
                    });
                    return documentFragment;
                };
                Printer.prototype._replaceTags = function (htmlFontTagStart, printBuffer, htmlNewLineTag, htmlSpaceTag, htmlFontTagEnd) {
                    return htmlFontTagStart
                        + printBuffer.replace(/&#x1B;\|1C|&#x1B;\|2C|&#x1B;\|3C|&#x1B;\|4C/g, Commerce.StringExtensions.EMPTY)
                            .replace(/\r\n/g, htmlNewLineTag).replace(/\s/g, htmlSpaceTag)
                        + htmlFontTagEnd;
                };
                Printer.prototype.renderLogo = function (imageElement, outerDivElement, receipt, logo) {
                    imageElement.src = "data:image/png;base64," + logo;
                    if (receipt.receiptWidth > 0) {
                        var characterToPixelRatio = 6.3;
                        imageElement.style.display = "block";
                        imageElement.style.margin = "auto";
                        outerDivElement.style.width = (receipt.receiptWidth * characterToPixelRatio) + "px";
                    }
                };
                Printer.prototype.renderBarcode = function (canvasElement, text) {
                    var barcodeText = this.formatBarcodeText(text);
                    var encodedBarcode = this.encodeBarcode(barcodeText);
                    var startX = 0;
                    var strokeWidth = 1.5;
                    var barcodeHeight = 40;
                    var strokeCount = 0;
                    var fontSize = 12;
                    var canvasContext = canvasElement.getContext("2d");
                    var currentStroke = encodedBarcode[0];
                    canvasElement.style.backgroundColor = "#000000";
                    canvasContext.canvas.width = encodedBarcode.length * strokeWidth;
                    canvasContext.canvas.height = barcodeHeight + fontSize;
                    for (var x = 0; x < encodedBarcode.length; x++) {
                        if (currentStroke === encodedBarcode[x]) {
                            strokeCount++;
                            continue;
                        }
                        if (currentStroke === "1") {
                            canvasContext.fillRect(startX + (x - strokeCount) * strokeWidth, 0, strokeWidth * strokeCount, barcodeHeight);
                        }
                        currentStroke = encodedBarcode[x];
                        strokeCount = 1;
                    }
                    canvasContext.font = fontSize + "pt Courier New";
                    canvasContext.fillText(barcodeText, startX + Math.floor((encodedBarcode.length * strokeWidth - canvasContext.measureText(barcodeText).width) / 2), barcodeHeight + fontSize);
                };
                Printer.prototype.initializeBarcodeMap = function () {
                    var barcodeMap = Object.create(null);
                    barcodeMap["0"] = "101001101101";
                    barcodeMap["1"] = "110100101011";
                    barcodeMap["2"] = "101100101011";
                    barcodeMap["3"] = "110110010101";
                    barcodeMap["4"] = "101001101011";
                    barcodeMap["5"] = "110100110101";
                    barcodeMap["6"] = "101100110101";
                    barcodeMap["7"] = "101001011011";
                    barcodeMap["8"] = "110100101101";
                    barcodeMap["9"] = "101100101101";
                    barcodeMap["A"] = "110101001011";
                    barcodeMap["B"] = "101101001011";
                    barcodeMap["C"] = "110110100101";
                    barcodeMap["D"] = "101011001011";
                    barcodeMap["E"] = "110101100101";
                    barcodeMap["F"] = "101101100101";
                    barcodeMap["G"] = "101010011011";
                    barcodeMap["H"] = "110101001101";
                    barcodeMap["I"] = "101101001101";
                    barcodeMap["J"] = "101011001101";
                    barcodeMap["K"] = "110101010011";
                    barcodeMap["L"] = "101101010011";
                    barcodeMap["M"] = "110110101001";
                    barcodeMap["N"] = "101011010011";
                    barcodeMap["O"] = "110101101001";
                    barcodeMap["P"] = "101101101001";
                    barcodeMap["Q"] = "101010110011";
                    barcodeMap["R"] = "110101011001";
                    barcodeMap["S"] = "101101011001";
                    barcodeMap["T"] = "101011011001";
                    barcodeMap["U"] = "110010101011";
                    barcodeMap["V"] = "100110101011";
                    barcodeMap["W"] = "110011010101";
                    barcodeMap["X"] = "100101101011";
                    barcodeMap["Y"] = "110010110101";
                    barcodeMap["Z"] = "100110110101";
                    barcodeMap["-"] = "100101011011";
                    barcodeMap["."] = "110010101101";
                    barcodeMap[" "] = "100110101101";
                    barcodeMap["$"] = "100100100101";
                    barcodeMap["/"] = "100100101001";
                    barcodeMap["+"] = "100101001001";
                    barcodeMap["%"] = "101001001001";
                    barcodeMap["*"] = "100101101101";
                    return barcodeMap;
                };
                Printer.prototype.encodeBarcode = function (barcodeText) {
                    var result = Commerce.StringExtensions.EMPTY;
                    for (var x = 0; x < barcodeText.length; x++) {
                        result += this._barcodeMap.value[barcodeText.substr(x, 1).toUpperCase()];
                        result += "0";
                    }
                    return result;
                };
                Printer.prototype.formatBarcodeText = function (text) {
                    var result = Commerce.StringExtensions.EMPTY;
                    for (var x = 0; x < text.length; x++) {
                        var character = text.substr(x, 1).toUpperCase();
                        var value = this._barcodeMap.value[character];
                        if (value) {
                            result += character;
                        }
                    }
                    return "*" + result + "*";
                };
                return Printer;
            }());
            Native.Printer = Printer;
        })(Native = Peripherals.Native || (Peripherals.Native = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Native;
        (function (Native) {
            "use strict";
            var Proximity = (function () {
                function Proximity() {
                    try {
                        this._proximityDevice = Windows.Networking.Proximity.ProximityDevice.getDefault();
                    }
                    catch (error) {
                        Commerce.RetailLogger.peripheralsProximityOpenDeviceFailed(error.message);
                    }
                    if (this._proximityDevice == null) {
                        Commerce.RetailLogger.peripheralsProximityNotAvailable();
                    }
                }
                Proximity.prototype.subscribeForMessage = function (messageType, messageReceivedHandler) {
                    var subscriptionId = -1;
                    if (this._proximityDevice != null) {
                        subscriptionId = this._proximityDevice.subscribeForMessage(messageType, messageReceivedHandler);
                    }
                    return subscriptionId;
                };
                Proximity.prototype.unsubscribeForMessage = function (subscriptionId) {
                    if (this._proximityDevice != null) {
                        this._proximityDevice.stopSubscribingForMessage(subscriptionId);
                    }
                };
                return Proximity;
            }());
            Native.Proximity = Proximity;
        })(Native = Peripherals.Native || (Peripherals.Native = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var WindowsPeripherals = (function (_super) {
            __extends(WindowsPeripherals, _super);
            function WindowsPeripherals() {
                var _this = _super.call(this) || this;
                _this._initializablePeripherals = [];
                var nativeBarcodeScanner = new Peripherals.Native.BarcodeScanner(Commerce.StringExtensions.EMPTY);
                var nativeMagneticStripeReaderFacade = new Peripherals.Facade.MagneticStripeReader();
                _this.barcodeScanner = new Peripherals.CompositeBarcodeScanner([
                    nativeBarcodeScanner,
                    new Peripherals.HardwareStation.CompositeBarcodeScanner(),
                    new Peripherals.KeyboardBarcodeScanParser()
                ]);
                _this.cashDrawer = new Peripherals.HardwareStation.CashDrawer();
                _this.dualDisplay = new Peripherals.Native.DualDisplay();
                _this.lineDisplay = new Peripherals.HardwareStation.LineDisplay();
                _this.magneticStripeReader = new Peripherals.CompositeMagneticStripeReader([
                    nativeMagneticStripeReaderFacade,
                    new Peripherals.HardwareStation.MagneticStripeReader(),
                    new Peripherals.MSRKeyboardSwipeParser()
                ]);
                _this.paymentTerminal = new Peripherals.HardwareStation.PaymentTerminal();
                _this.pinPad = new Peripherals.HardwareStation.PinPad();
                _this.proximity = new Peripherals.Native.Proximity();
                _this.printer = _this._createPrinter();
                _this.scale = new Peripherals.HardwareStation.Scale();
                _this.signatureCapture = new Peripherals.HardwareStation.SignatureCapture();
                _this.signaturePad = new Peripherals.HardwareStation.SignaturePad();
                _this.cardPayment = new Peripherals.HardwareStation.CardPayment();
                _this.fiscalPeripheral = new Peripherals.HardwareStation.FiscalPeripheral();
                _this._initializablePeripherals.push(nativeBarcodeScanner);
                _this._initializablePeripherals.push(nativeMagneticStripeReaderFacade);
                return _this;
            }
            Object.defineProperty(WindowsPeripherals, "instance", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(WindowsPeripherals._instance)) {
                        WindowsPeripherals._instance = new WindowsPeripherals();
                    }
                    return WindowsPeripherals._instance;
                },
                enumerable: true,
                configurable: true
            });
            WindowsPeripherals.prototype.initializeAsync = function () {
                var _this = this;
                var asyncResult = new Commerce.VoidAsyncResult();
                var errors = [];
                if (Windows.Devices.PointOfService) {
                    setTimeout(function () {
                        Commerce.Utilities.AsyncExecutionHelper.forEachAsync(_this._initializablePeripherals, function (peripheral, next) {
                            peripheral.initializeAsync()
                                .done(function () { return next(); })
                                .fail(function (error) {
                                Array.prototype.push.apply(errors, error);
                                next();
                            });
                        }, function () {
                            if (!Commerce.ArrayExtensions.hasElements(errors)) {
                                asyncResult.resolve();
                            }
                            else {
                                asyncResult.reject(errors);
                            }
                        });
                    }, 500);
                }
                else {
                    asyncResult.resolve();
                }
                return Commerce.VoidAsyncResult.join([_super.prototype.initializeAsync.call(this), asyncResult]);
            };
            WindowsPeripherals.prototype._createPrinter = function () {
                var printerFacade = new Peripherals.Facade.Printer();
                var hardwareStationPrinter = new Peripherals.HardwareStation.Printer();
                printerFacade.registerPrinter(Commerce.Proxy.Entities.PeripheralType.OPOS, hardwareStationPrinter);
                printerFacade.registerPrinter(Commerce.Proxy.Entities.PeripheralType.Windows, hardwareStationPrinter);
                printerFacade.registerPrinter(Commerce.Proxy.Entities.PeripheralType.Device, new Peripherals.Native.Printer());
                printerFacade.registerPrinter(Commerce.Proxy.Entities.PeripheralType.Network, hardwareStationPrinter);
                return printerFacade;
            };
            WindowsPeripherals._instance = null;
            return WindowsPeripherals;
        }(Peripherals.PeripheralsBase));
        Peripherals.WindowsPeripherals = WindowsPeripherals;
        Commerce.Peripherals.instance = WindowsPeripherals.instance;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var DedicatedHardwareStationRequest = Commerce.DedicatedHardwareStationRequest;
        var DedicatedHardwareStationResponse = Commerce.DedicatedHardwareStationResponse;
        var DedicatedHardwareStationRequestHandler = (function (_super) {
            __extends(DedicatedHardwareStationRequestHandler, _super);
            function DedicatedHardwareStationRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DedicatedHardwareStationRequestHandler.prototype.supportedRequestType = function () {
                return DedicatedHardwareStationRequest;
            };
            DedicatedHardwareStationRequestHandler.prototype.executeAsync = function (request) {
                var _this = this;
                var promise = new Promise(function (resolve, reject) {
                    Commerce.RetailLogger.dedicatedHardwareStationClientBrokerStarted(request.correlationId, request.targetHardwareStationRequestUri);
                    var hardwareStationRequestMessage = _this._generateLocalHardwareStationRequestMessage(request.correlationId, request.targetHardwareStationRequestUri, request.requestBody, request.requestLocale);
                    Microsoft.Dynamics.Commerce.ClientBroker.HardwareStationRequest.executeAsync(hardwareStationRequestMessage)
                        .done(function (result) {
                        var hardwareStationResponse = {
                            status: result.status,
                            statusText: result.statusText,
                            responseText: result.responseText
                        };
                        var response = new DedicatedHardwareStationResponse(hardwareStationResponse);
                        resolve({ canceled: false, data: response });
                    }, function (errors) {
                        reject(errors);
                    });
                });
                return promise;
            };
            DedicatedHardwareStationRequestHandler.prototype._generateLocalHardwareStationRequestMessage = function (activityId, targetHardwareStationRequestUri, requestBody, requestLocale) {
                var result = new Microsoft.Dynamics.Commerce.ClientBroker.HardwareStationRequestMessage();
                result.requestUri = targetHardwareStationRequestUri;
                result.method = DedicatedHardwareStationRequestHandler.POST_HTTP_REQUEST_METHOD;
                var acceptLanguageHeader = new Microsoft.Dynamics.Commerce.ClientBroker.HardwareStationHeader();
                acceptLanguageHeader.name = DedicatedHardwareStationRequestHandler.ACCEPT_LANGUAGE_HEADER_NAME;
                acceptLanguageHeader.value = requestLocale;
                var activityIdHeader = new Microsoft.Dynamics.Commerce.ClientBroker.HardwareStationHeader();
                activityIdHeader.name = DedicatedHardwareStationRequestHandler.ACTIVITYID_HEADER_NAME;
                activityIdHeader.value = activityId;
                result.headers = Commerce.StringExtensions.isNullOrWhitespace(requestLocale)
                    ? [activityIdHeader]
                    : [acceptLanguageHeader, activityIdHeader];
                result.body = requestBody;
                return result;
            };
            DedicatedHardwareStationRequestHandler.POST_HTTP_REQUEST_METHOD = "POST";
            DedicatedHardwareStationRequestHandler.ACCEPT_LANGUAGE_HEADER_NAME = "Accept-Language";
            DedicatedHardwareStationRequestHandler.ACTIVITYID_HEADER_NAME = "ActivityId";
            return DedicatedHardwareStationRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.DedicatedHardwareStationRequestHandler = DedicatedHardwareStationRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Native;
        (function (Native) {
            "use strict";
            var VfE255BarcodeScanner = (function () {
                function VfE255BarcodeScanner(deviceId) {
                    this._deviceId = deviceId;
                }
                VfE255BarcodeScanner.prototype.initializeAsync = function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    this._barcodeScanner =
                        Microsoft.Dynamics.Commerce.NetworkPeripherals.Peripherals.
                            MultifunctionDevice.VeriFoneE255Compatible.VfE255Device.getVfE255Device(this._deviceId);
                    asyncResult.resolve();
                    return Commerce.VoidAsyncResult.createResolved();
                };
                VfE255BarcodeScanner.prototype.enableAsync = function (scannerMsgEventHandler) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (this._barcodeScanner != null) {
                        this._barcodeScanner.onbarcodereceived = function (args) {
                            if (scannerMsgEventHandler) {
                                scannerMsgEventHandler(args.barcodeData.replace(/(\r\n|\n|\r)/gm, ""));
                            }
                        };
                        this._barcodeScanner.enableBarcodeScannerAsync()
                            .done(function (result) {
                            if (result) {
                                asyncResult.resolve();
                            }
                            else {
                                _this._barcodeScanner.onbarcodereceived = null;
                                asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED)]);
                            }
                        }, function (e) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED)]);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                VfE255BarcodeScanner.prototype.disableAsync = function () {
                    if (this._barcodeScanner) {
                        this._barcodeScanner.disableBarcodeScannerAsync();
                        this._barcodeScanner.onbarcodereceived = null;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                return VfE255BarcodeScanner;
            }());
            Native.VfE255BarcodeScanner = VfE255BarcodeScanner;
        })(Native = Peripherals.Native || (Peripherals.Native = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var Native;
        (function (Native) {
            "use strict";
            var VfE255MagneticStripeReader = (function () {
                function VfE255MagneticStripeReader(deviceId) {
                    this._deviceId = deviceId;
                }
                VfE255MagneticStripeReader.prototype.initializeAsync = function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    this._msr = Microsoft.Dynamics.Commerce.NetworkPeripherals.Peripherals.MultifunctionDevice.VeriFoneE255Compatible.VfE255Device.getVfE255Device(this._deviceId);
                    asyncResult.resolve();
                    return asyncResult;
                };
                VfE255MagneticStripeReader.prototype.enableAsync = function (readerMsgEventHandler) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (this._msr != null) {
                        this._msr.onmsrdatareceived = function (args) {
                            if (readerMsgEventHandler) {
                                readerMsgEventHandler({
                                    CardNumber: args.cardInfo.accountNumber,
                                    FirstName: args.cardInfo.firstName,
                                    LastName: args.cardInfo.lastName,
                                    ExpirationMonth: args.cardInfo.expirationMonth,
                                    ExpirationYear: args.cardInfo.expirationYear,
                                    Track1: args.cardInfo.track1Data,
                                    Track2: args.cardInfo.track2Data,
                                    Track3: Commerce.StringExtensions.EMPTY
                                });
                            }
                        };
                        this._msr.enableMsrAsync()
                            .done(function (result) {
                            if (result) {
                                asyncResult.resolve();
                            }
                            else {
                                _this._msr.onmsrdatareceived = null;
                                asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_MSR_ENABLE_FAILED)]);
                            }
                        }, function (e) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_MSR_ENABLE_FAILED)]);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                VfE255MagneticStripeReader.prototype.disableAsync = function () {
                    if (this._msr) {
                        this._msr.disableMsrAsync();
                        this._msr.onmsrdatareceived = null;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                return VfE255MagneticStripeReader;
            }());
            Native.VfE255MagneticStripeReader = VfE255MagneticStripeReader;
        })(Native = Peripherals.Native || (Peripherals.Native = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
//# sourceMappingURL=Pos.js.map
// SIG // Begin signature block
// SIG // MIIkkAYJKoZIhvcNAQcCoIIkgTCCJH0CAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 2MBiMolIZPKg35FTLqcLKv4eJJ+xpAzSwOU00sJTIBig
// SIG // gg2BMIIF/zCCA+egAwIBAgITMwAAAQNeJRyZH6MeuAAA
// SIG // AAABAzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTE4MDcxMjIwMDg0OFoX
// SIG // DTE5MDcyNjIwMDg0OFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // 0ZR2NuaGqzb+aflGfIuIUMuQcH+wVakkHX455wWfD6x7
// SIG // l7LOcwr71JskXBa1Od0bfjNsEfw7JvOYql1Ta6rD7BO4
// SIG // 0u/PV3/MZcuvTS4ysVYrTjQHif5pIb0+RPveEp2Fv3x2
// SIG // hn1ysXabYeaKZExGzrbVOox3k3dnIZy2WgZeR4b1PNEJ
// SIG // yg09zbLpoVB40YSI4gE8IvyvlgjMXZnA7eulWpiS9chA
// SIG // Tmpzr97jdHrTX0aXvOJnKHeZrMEOMRaPAA8B/kteVA/K
// SIG // xGU/CuOjRtv2LAM6Gb5oBRac5n80v6eHjWU5Jslj1O/F
// SIG // 3b0l/v0o9DSGeawq1V8wkTvkFGrrscoEIwIDAQABo4IB
// SIG // fjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFEe+wMvhpj/9ZdY48gNdt693
// SIG // 90D/MFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNy
// SIG // b3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQG
// SIG // A1UEBRMNMjMwMDEyKzQzNzk2NTAfBgNVHSMEGDAWgBRI
// SIG // bmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmg
// SIG // R6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // b3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcw
// SIG // AoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9w
// SIG // cy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggIBAJ/1yVMNPw0m7KJE2A3Rn2OWBks/HlzFM6Ok
// SIG // w2yvH8ABuutl7J4zEA+nrFvUvZBhF+cx58MmtKz1J9NI
// SIG // k4aI/hI1kWQi0WstO6gsFZQp0jeW5jX/DM7IBhYWniSx
// SIG // 4jn5bg542AwbtilgJ3Y0JJvduZd1ywE7rYISFiKAiRWE
// SIG // u5hQILAXJoZJr859RRVDNJbPgVwYLNST8mer4nPIPaPN
// SIG // /DIeYBzpsBsw+yy7By6WhJNFKFRczZb9oNuB2LYwykOx
// SIG // 80jAskYcXV52Klif1O7y9PpITLVhi7CMQemquJ2Q9P9q
// SIG // Qg+5PukO7JT8jYC7eOMjp3hbsm0f+VnBfbbROcl54IMc
// SIG // YAraPbDR7Ta/RQfpGzZu5T07BQOn1KclEo/mdqMTs0Va
// SIG // QzGC2tiErrmwH3X19h19URE3J+i1NYRx91eqrvqJccmY
// SIG // 0p5aZHa+jMN9FWqR8RT08tk1Mbjbcvq0dciIm2q/mEXH
// SIG // ZrLX/86SkHXk6+aG0sgb2yfAW5VvSW9YXWkq3lNL+OjK
// SIG // e/ZsFfkDGQ8RhapPmr+qV91gxvVxIPRRqJrK6dHrNEc9
// SIG // dfoi7FU/ahk5axDpWj+O9CN4MLLypjjLNY2qmFkkQLg6
// SIG // Z6QHX6D+2DtJE/sM4e0LbYNQzvB/PuDZCOiMIUpBwt7r
// SIG // jlvuA8Mdbm7mVDVmZ3J8GupS9iLEcj+uMIIHejCCBWKg
// SIG // AwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCB
// SIG // iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
// SIG // OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQD
// SIG // Ex9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDEx
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // q/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4Bjga
// SIG // BEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSH
// SIG // fpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpg
// SIG // GgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpc
// SIG // oRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnn
// SIG // Db6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD
// SIG // 2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLT
// SIG // swM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOE
// SIG // y/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2
// SIG // z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
// SIG // A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
// SIG // 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uD
// SIG // jexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyim
// SIG // p31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8Hh
// SIG // hUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX
// SIG // 3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAG
// SIG // CSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXT
// SIG // gqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMA
// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
// SIG // AwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx
// SIG // 0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3Js
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N
// SIG // aWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4G
// SIG // CCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNS
// SIG // b29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
// SIG // HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
// SIG // BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUF
// SIG // BwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5
// SIG // AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOS
// SIG // mUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np
// SIG // 22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r
// SIG // 4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION
// SIG // 9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWlu
// SIG // WpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiX
// SIG // mE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ
// SIG // 2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNA
// SIG // BQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPD
// SIG // XVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yH
// SIG // PgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
// SIG // XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
// SIG // oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5
// SIG // GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E9
// SIG // 0Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZO
// SIG // SEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCFmcw
// SIG // ghZjAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAm
// SIG // BgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENB
// SIG // IDIwMTECEzMAAAEDXiUcmR+jHrgAAAAAAQMwDQYJYIZI
// SIG // AWUDBAIBBQCggdAwGQYJKoZIhvcNAQkDMQwGCisGAQQB
// SIG // gjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcC
// SIG // ARUwLwYJKoZIhvcNAQkEMSIEII/AyTrYK7mzzeyQ5aeh
// SIG // KoUdj3wrkalfEuDnCdjRWWKzMGQGCisGAQQBgjcCAQwx
// SIG // VjBUoDaANABnAGwAbwBiAGEAbABpAHoAZQAuAGMAdQBs
// SIG // AHQAdQByAGUALgBsAHYALQBMAFYALgBqAHOhGoAYaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tMA0GCSqGSIb3DQEB
// SIG // AQUABIIBAEUbax8LXhA3eUF0YOlxdwMxLrCgK0gPXqKE
// SIG // 8L/JaKJsLGMDeGQPVYp8PMLC+B6hPY72YQDFGtkot7+w
// SIG // tSXnbHzQJ/F+amTsb0Gqdi/THHPStJlIr6Xrx56ix7np
// SIG // CbwihPPAaQjOELEQxX353y9ZeYN1KNLAf/v+0p6WxaYi
// SIG // cZHG+YK0km0Q6X6unBeCCkCGs/Z4iKZ7hAhywtbo2kpH
// SIG // 7ca4dB1xGFuuwP28XqBHwySMu6fF4qIHgfqXZwjGSrYs
// SIG // um0S3vndYKAEcUVPg6m4WUmHQwFxPVnSyqRtt/46mD50
// SIG // vjBp7h3klpke3JkE0HsuFqTePa7++vzCtVOt06M5x56h
// SIG // ghPPMIITywYKKwYBBAGCNwMDATGCE7swghO3BgkqhkiG
// SIG // 9w0BBwKgghOoMIITpAIBAzEPMA0GCWCGSAFlAwQCAQUA
// SIG // MIIBWAYLKoZIhvcNAQkQAQSgggFHBIIBQzCCAT8CAQEG
// SIG // CisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQglfDu
// SIG // c65dwlnLlfy8FxAiBqnFS45IZEY8OWNDzYLYSeACBlx2
// SIG // ohN7fxgTMjAxOTAzMTIwOTU0NTQuMzI5WjAHAgEBgAIB
// SIG // 9KCB1KSB0TCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcG
// SIG // A1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRv
// SIG // IFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjk4
// SIG // RkQtQzYxRS1FNjQxMSUwIwYDVQQDExxNaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBTZXJ2aWNloIIPHzCCBPUwggPdoAMC
// SIG // AQICEzMAAADLX3jLIw6Ul8MAAAAAAMswDQYJKoZIhvcN
// SIG // AQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // HhcNMTgwODIzMjAyNjI0WhcNMTkxMTIzMjAyNjI0WjCB
// SIG // zjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWlj
// SIG // cm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAk
// SIG // BgNVBAsTHVRoYWxlcyBUU1MgRVNOOjk4RkQtQzYxRS1F
// SIG // NjQxMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
// SIG // MIIBCgKCAQEAxXjIHe/wHUFwHG00Sj9UAsoaeLMDVYIQ
// SIG // hTbYMKnLLzfw7RWVbsPcpSiZk8hTeezHczFpBelqLQ6J
// SIG // Wz4M+4ep2gq2y5gJozF4MeGh0KA9Z09P003SGeCcLTtH
// SIG // acMHY2G+1EGmvhXfrv3U+qLcKywoN0uMGs5BSGoSfxLR
// SIG // U/nGV0NA98wimpEVB0/pS3h29oj8y9rl7zodtrAnF0Yq
// SIG // tN0enss5p7dgdfbmSFuG41q2qnd0O7cOjrEMTUEhrYa5
// SIG // QZlrigdU3BYhaTdJnjFmVqtPd4CLvXbJbJ5OuMa/npHK
// SIG // N7zIOIG137VQKfru3RPBClNr5rZk8/a/wfJDFB6Bz71O
// SIG // FQIDAQABo4IBGzCCARcwHQYDVR0OBBYEFCjk8ub2ydFN
// SIG // rm7I2yqWvzHD+9l2MB8GA1UdIwQYMBaAFNVjOlyKMZDz
// SIG // Q3t8RhvFM2hahW1VMFYGA1UdHwRPME0wS6BJoEeGRWh0
// SIG // dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3By
// SIG // b2R1Y3RzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNy
// SIG // bDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljVGltU3RhUENBXzIwMTAtMDctMDEuY3J0MAwGA1Ud
// SIG // EwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJ
// SIG // KoZIhvcNAQELBQADggEBAIv0YYWDBWJsyxSUl8PpJQNs
// SIG // crEv2k3plgyD5o5MTwDIKH2gPody6KdSOSPpp9BTrdO+
// SIG // BVFYTFgkvOtAHKwCHYaBsaQog+11XrJBAyUnFyVelHjy
// SIG // 3WNLVW8FfQqSxHkGr/j/R7nz6Ne9RpTYlxRBXDeUef0j
// SIG // 9i1Al64C+c18sQ3EkoTcDsU6M4DD58Qfj04YrUgFH3KF
// SIG // dL6voeyUW4Ut+MrsNTz34K7XMCD0lMIKuqVZLJ1YCkBi
// SIG // H8AIic40scen05l2KULjbMaMHxGj/TtiowCM+Ertl7Xa
// SIG // VZOGJkgWpzl9lPEKLcvZPylAj3X83G7gKekjMtdTBJdT
// SIG // GQil9I2wrs4wggZxMIIEWaADAgECAgphCYEqAAAAAAAC
// SIG // MA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzET
// SIG // MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0
// SIG // aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3MDEy
// SIG // MTM2NTVaFw0yNTA3MDEyMTQ2NTVaMHwxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1l
// SIG // LVN0YW1wIFBDQSAyMDEwMIIBIjANBgkqhkiG9w0BAQEF
// SIG // AAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwTl/X6f2mU
// SIG // a3RUENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AVUycE
// SIG // MR9BGxqVHc4JE458YTBZsTBED/FgiIRUQwzXTbg4CLNC
// SIG // 3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJYR4YyhB50
// SIG // YWeRX4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxGwScd
// SIG // JGcSchohiq9LZIlQYrFd/XcfPfBXday9ikJNQFHRD5wG
// SIG // Pmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaRtogI
// SIG // Neh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJRF1e
// SIG // FpwBBU8iTQIDAQABo4IB5jCCAeIwEAYJKwYBBAGCNxUB
// SIG // BAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8RhvFM2ha
// SIG // hW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsG
// SIG // A1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1Ud
// SIG // IwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1Ud
// SIG // HwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0
// SIG // LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1
// SIG // dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEww
// SIG // SgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3J0MIGgBgNVHSABAf8EgZUwgZIwgY8GCSsG
// SIG // AQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9kZWZh
// SIG // dWx0Lmh0bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBh
// SIG // AGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQAZQBtAGUA
// SIG // bgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aIUQ3i
// SIG // xuCYP4FxAz2do6Ehb7Prpsz1Mb7PBeKp/vpXbRkws8LF
// SIG // Zslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7uVOMzPRg
// SIG // Eop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/Gf/I3
// SIG // fVo/HPKZeUqRUgCvOA8X9S95gWXZqbVr5MfO9sp6AG9L
// SIG // MEQkIjzP7QOllo9ZKby2/QThcJ8ySif9Va8v/rbljjO7
// SIG // Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFjnXsh
// SIG // bcOco6I8+n99lmqQeKZt0uGc+R38ONiU9MalCpaGpL2e
// SIG // Gq4EQoO4tYCbIjggtSXlZOz39L9+Y1klD3ouOVd2onGq
// SIG // BooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7cQnfXXSY
// SIG // Ighh2rBQHm+98eEA3+cxB6STOvdlR3jo+KhIq/fecn5h
// SIG // a293qYHLpwmsObvsxsvYgrRyzR30uIUBHoD7G4kqVDmy
// SIG // W9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch98isTtoo
// SIG // uLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99je/WZ
// SIG // ii8bxyGvWbWu3EQ8l1Bx16HSxVXjad5XwdHeMMD9zOZN
// SIG // +w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzVs341Hgi6
// SIG // 2jbb01+P3nSISRKhggOtMIIClQIBATCB/qGB1KSB0TCB
// SIG // zjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWlj
// SIG // cm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAk
// SIG // BgNVBAsTHVRoYWxlcyBUU1MgRVNOOjk4RkQtQzYxRS1F
// SIG // NjQxMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNloiUKAQEwCQYFKw4DAhoFAAMVALmjk9JA
// SIG // dtG3HxWjBFGXrjgr25ohoIHeMIHbpIHYMIHVMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQg
// SIG // T3BlcmF0aW9ucyBQdWVydG8gUmljbzEnMCUGA1UECxMe
// SIG // bkNpcGhlciBOVFMgRVNOOjRERTktMEM1RS0zRTA5MSsw
// SIG // KQYDVQQDEyJNaWNyb3NvZnQgVGltZSBTb3VyY2UgTWFz
// SIG // dGVyIENsb2NrMA0GCSqGSIb3DQEBBQUAAgUA4DERujAi
// SIG // GA8yMDE5MDMxMjAwNTYyNloYDzIwMTkwMzEzMDA1NjI2
// SIG // WjB0MDoGCisGAQQBhFkKBAExLDAqMAoCBQDgMRG6AgEA
// SIG // MAcCAQACAgMCMAcCAQACAhcVMAoCBQDgMmM6AgEAMDYG
// SIG // CisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwGgCjAI
// SIG // AgEAAgMW42ChCjAIAgEAAgMHoSAwDQYJKoZIhvcNAQEF
// SIG // BQADggEBAKY4UjCTk3/AiP7Kc2O99oyrZW4vI4rZzyQw
// SIG // pRyronM83drsLezOfzkX87S6VGA+QW1Olx/hhkYUnauG
// SIG // GDEm1+WHjgK0X1f3b3gAnA+fCjCkU5K6Et1D6Wq9mWgj
// SIG // 5dURvG16tArqxmnxm2Ux0bNqs9HaoXKQ0AlAOqVHcUr8
// SIG // j3zn7dYyifXbWETk8ms82wmSA+m9W3b96C6VcxzPqnGS
// SIG // SS6rj2RTBVcb6pLVUD9sgrGQ2NOoCWrJmI+XP3yiiiLz
// SIG // +0eQ8QGhlBUZL91IKIw6zyq8mg2TS2LPWVeJhQy3x7ZC
// SIG // NhxneIm2GSrnSCfTgC0Hsdf6wkjxNhwtBMbgx4XkUZYx
// SIG // ggMNMIIDCQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQ
// SIG // Q0EgMjAxMAITMwAAAMtfeMsjDpSXwwAAAAAAyzANBglg
// SIG // hkgBZQMEAgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqG
// SIG // SIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCAWvKKsIL6N
// SIG // ia5QD/ZM79RLV8SK4RiSnsYFsVADZ7wAeTCB+gYLKoZI
// SIG // hvcNAQkQAi8xgeowgecwgeQwgb0EIDYnIaqpYKde63PQ
// SIG // pL1LfC4X9p9L0y7uFEdeqmDdwR1kMIGYMIGApH4wfDEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAADLX3jL
// SIG // Iw6Ul8MAAAAAAMswIgQgpSD7lAa3kW06sKZ1GopqPgLb
// SIG // g/FVbGq1bA3BqhQVEfYwDQYJKoZIhvcNAQELBQAEggEA
// SIG // CEX4us7XB3XQiSJ2IsEEMuz1Ri80tIw21i37iOvm5dgz
// SIG // C2vrMzD89pF5bNnqYLQC3JLvYKXXeFmPc2Gv3YuYMlDU
// SIG // lIhFPi7uqff02J85jPZLbEHdey4CqUOWzoqfyVjafGCj
// SIG // rTJwBLYyNCcAb9+V0ltakydnSRXh102BgmFuNdSvwNog
// SIG // OKLMm9D7kjfABA0x1MG1gnK6O59OL7F47nJ4kyCaFljJ
// SIG // sC/DggXgzpOnaq8pmjrtx7te5emJ/N87kKphaiVuFuxF
// SIG // DSd+MmpCrSzH03N2Cn8L0ELMaH5Nc+M5euYXAF9Mn+36
// SIG // UU/zxQ3lFwLV5eVotTAHYegc9IEn/w3esQ==
// SIG // End signature block
