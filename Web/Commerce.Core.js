"use strict";
var Commerce;
(function (Commerce) {
    "use strict";
    var ApplicationArgumentId = (function () {
        function ApplicationArgumentId() {
        }
        ApplicationArgumentId.TERMINAL_NUMBER = "TerminalId";
        ApplicationArgumentId.DEVICE_NUMBER = "DeviceId";
        return ApplicationArgumentId;
    }());
    Commerce.ApplicationArgumentId = ApplicationArgumentId;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
            var DataServiceQuery = (function () {
                function DataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                    this._dataServiceRequestFactory = dataServiceRequestFactory;
                    this._disablePagination = false;
                    this._query = {
                        entitySet: entitySet,
                        entityType: entityType,
                        key: key,
                        returnType: returnType,
                        locale: Commerce.StringExtensions.EMPTY,
                        headers: {}
                    };
                    this._query.resultSettings = { Paging: {}, Sorting: {} };
                }
                DataServiceQuery.prototype.locale = function (locale) {
                    this._query.locale = locale;
                    return this;
                };
                DataServiceQuery.prototype.top = function (value) {
                    this._query.resultSettings.Paging.Top = value;
                    return this;
                };
                DataServiceQuery.prototype.skip = function (value) {
                    this._query.resultSettings.Paging.Skip = value;
                    return this;
                };
                DataServiceQuery.prototype.expand = function (propertyName) {
                    if (this._query.expands == null) {
                        this._query.expands = [];
                    }
                    this._query.expands.push(propertyName);
                    return this;
                };
                DataServiceQuery.prototype.inlineCount = function () {
                    this._query.inlineCount = true;
                    return this;
                };
                DataServiceQuery.prototype.offline = function () {
                    this._query.isForOffline = true;
                    return this;
                };
                DataServiceQuery.prototype.orderBy = function (value) {
                    if (!this._query.resultSettings.Sorting.Columns) {
                        this._query.resultSettings.Sorting.Columns = [];
                    }
                    this._query.resultSettings.Sorting.Columns.push({ ColumnName: value });
                    return this;
                };
                DataServiceQuery.prototype.orderByColumn = function (value) {
                    if (!this._query.resultSettings.Sorting.Columns) {
                        this._query.resultSettings.Sorting.Columns = [];
                    }
                    this._query.resultSettings.Sorting.Columns.push(value);
                    return this;
                };
                DataServiceQuery.prototype.create = function (object) {
                    this._query.action = "Create";
                    this._query.data = object;
                    return this._createRequest();
                };
                DataServiceQuery.prototype.read = function () {
                    if (this._query.key) {
                        this._query.action = "Read";
                    }
                    else {
                        this._query.action = "ReadAll";
                        this._query.isReturnTypeACollection = !this._disablePagination;
                    }
                    return this._createRequest();
                };
                DataServiceQuery.prototype.update = function (object) {
                    this._query.action = "Update";
                    this._query.data = object;
                    return this._createRequest();
                };
                DataServiceQuery.prototype.delete = function (object) {
                    this._query.action = "Delete";
                    this._query.data = object;
                    return this._createRequest();
                };
                DataServiceQuery.prototype.createDataServiceRequestForOperation = function (operationName, isAction, returnType, isReturnTypeACollection, data) {
                    this._query.returnType = returnType;
                    this._query.isAction = isAction;
                    this._query.isReturnTypeACollection = isReturnTypeACollection === "true";
                    this._query.action = operationName;
                    this._query.data = data;
                    return this._createRequest();
                };
                DataServiceQuery.prototype._createRequest = function () {
                    return this._dataServiceRequestFactory.create(this._query);
                };
                return DataServiceQuery;
            }());
            Common.DataServiceQuery = DataServiceQuery;
            var ODataOperationParameters = (function () {
                function ODataOperationParameters() {
                }
                return ODataOperationParameters;
            }());
            Common.ODataOperationParameters = ODataOperationParameters;
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ErrorClass = Error;
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var Error = (function (_super) {
                __extends(Error, _super);
                function Error(errorCode, canRetry, externalLocalizedErrorMessage, extraData) {
                    if (canRetry === void 0) { canRetry = false; }
                    if (externalLocalizedErrorMessage === void 0) { externalLocalizedErrorMessage = Commerce.StringExtensions.EMPTY; }
                    if (extraData === void 0) { extraData = null; }
                    var formatData = [];
                    for (var _i = 4; _i < arguments.length; _i++) {
                        formatData[_i - 4] = arguments[_i];
                    }
                    var _this = _super.call(this) || this;
                    _this.name = "CommerceError";
                    _this._canRetry = false;
                    _this.__proto__ = Error.prototype;
                    _this._errorCode = errorCode;
                    _this._externalLocalizedErrorMessage = externalLocalizedErrorMessage;
                    _this._canRetry = canRetry;
                    _this._handled = false;
                    _this._commerceException = null;
                    _this._formatData = formatData;
                    _this._extraData = extraData;
                    _this._errorTitleResourceId = Commerce.StringExtensions.EMPTY;
                    _this._isUserError = false;
                    return _this;
                }
                Object.defineProperty(Error.prototype, "message", {
                    get: function () {
                        return this._externalLocalizedErrorMessage;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "commerceException", {
                    get: function () {
                        return this._commerceException;
                    },
                    set: function (exception) {
                        this._commerceException = exception;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "commerceExceptionType", {
                    get: function () {
                        return this._exceptionType;
                    },
                    set: function (exceptionType) {
                        this._exceptionType = exceptionType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "ErrorCode", {
                    get: function () {
                        return this._errorCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "ExternalLocalizedErrorMessage", {
                    get: function () {
                        return this._externalLocalizedErrorMessage;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "formatData", {
                    get: function () {
                        return this._formatData;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "extraData", {
                    get: function () {
                        return this._extraData;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "errorTitleResourceId", {
                    get: function () {
                        return this._errorTitleResourceId;
                    },
                    set: function (value) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(value)) {
                            this._errorTitleResourceId = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "canRetry", {
                    get: function () {
                        return this._canRetry;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "handled", {
                    get: function () {
                        return this._handled;
                    },
                    set: function (handled) {
                        this._handled = handled;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Error.prototype, "isUserError", {
                    get: function () {
                        return this._isUserError;
                    },
                    set: function (value) {
                        this._isUserError = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Error;
            }(ErrorClass));
            Entities.Error = Error;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var FunctionQueueHelper = (function () {
        function FunctionQueueHelper() {
        }
        FunctionQueueHelper.callFunctions = function (functions, callerContext) {
            var data = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                data[_i - 2] = arguments[_i];
            }
            if (!Commerce.ArrayExtensions.hasElements(functions)) {
                return;
            }
            while (functions.length > 0) {
                var callback = functions.shift();
                callback.apply(callerContext, data);
            }
        };
        FunctionQueueHelper.callFunctionsAsync = function (functionQueue, callerContext) {
            var data = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                data[_i - 2] = arguments[_i];
            }
            var _a;
            if (!Commerce.ArrayExtensions.hasElements(functionQueue)) {
                return;
            }
            (_a = Commerce.Host.instance.timers).setImmediate.apply(_a, [FunctionQueueHelper.callFunctions, functionQueue, callerContext].concat(data));
        };
        return FunctionQueueHelper;
    }());
    Commerce.FunctionQueueHelper = FunctionQueueHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AsyncResultStateEnum;
    (function (AsyncResultStateEnum) {
        AsyncResultStateEnum[AsyncResultStateEnum["Pending"] = 0] = "Pending";
        AsyncResultStateEnum[AsyncResultStateEnum["Resolved"] = 1] = "Resolved";
        AsyncResultStateEnum[AsyncResultStateEnum["Rejected"] = 2] = "Rejected";
    })(AsyncResultStateEnum = Commerce.AsyncResultStateEnum || (Commerce.AsyncResultStateEnum = {}));
    var AsyncResult = (function () {
        function AsyncResult(callerContext) {
            this.clear();
        }
        AsyncResult.createResolved = function (result) {
            var asyncResult = new AsyncResult();
            asyncResult.resolve(result);
            return asyncResult;
        };
        AsyncResult.createRejected = function (errors) {
            var asyncResult = new AsyncResult();
            asyncResult.reject(errors || []);
            return asyncResult;
        };
        AsyncResult.fromPromise = function (promise) {
            return new AsyncResult().resolveOrRejectOn(promise);
        };
        AsyncResult.prototype.getPromise = function () {
            return this._promise;
        };
        AsyncResult.prototype.state = function () {
            return this._state;
        };
        AsyncResult.prototype.clear = function () {
            var _this = this;
            this._promise = new Promise(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
            });
            this._state = AsyncResultStateEnum.Pending;
        };
        AsyncResult.prototype.resolve = function (result) {
            this._state = AsyncResultStateEnum.Resolved;
            this._resolve(result);
        };
        AsyncResult.prototype.reject = function (errors) {
            this._state = AsyncResultStateEnum.Rejected;
            this._reject(errors);
        };
        AsyncResult.prototype.resolveOrRejectOn = function (asyncResult) {
            var _this = this;
            var doneCallback = function (result) { _this.resolve(result); };
            var failCallback = function (errors) { _this.reject(errors); };
            if (asyncResult instanceof Promise) {
                asyncResult.then(doneCallback).catch(failCallback);
            }
            else {
                asyncResult.done(doneCallback).fail(failCallback);
            }
            return this;
        };
        AsyncResult.prototype.done = function (callback) {
            var wrapper = function (result) {
                try {
                    callback(result);
                }
                catch (ex) {
                    Commerce.Host.instance.timers.setImmediate(function () {
                        throw ex;
                    });
                }
            };
            this._promise.then(wrapper, null);
            return this;
        };
        AsyncResult.prototype.fail = function (callback) {
            var wrapper = function (errors) {
                try {
                    callback(errors);
                }
                catch (ex) {
                    Commerce.Host.instance.timers.setImmediate(function () {
                        throw ex;
                    });
                }
            };
            this._promise.then(null, wrapper);
            return this;
        };
        AsyncResult.prototype.always = function (callback) {
            var wrapper = function () {
                try {
                    callback();
                }
                catch (ex) {
                    Commerce.Host.instance.timers.setImmediate(function () {
                        throw ex;
                    });
                }
            };
            this._promise.then(wrapper, wrapper);
            return this;
        };
        AsyncResult.prototype.map = function (mapFunction) {
            if (!mapFunction) {
                throw "The map function is invalid.";
            }
            var asyncResult = new AsyncResult();
            this.done(function (result) { asyncResult.resolve(mapFunction(result)); })
                .fail(function (errors) { asyncResult.reject(errors); });
            return asyncResult;
        };
        AsyncResult.prototype.recoverOnFailure = function (recoveryFunction) {
            if (!recoveryFunction) {
                throw "The map function is invalid.";
            }
            var asyncResult = new AsyncResult();
            this.done(function (result) { asyncResult.resolve(result); })
                .fail(function (errors) {
                var recoverAsyncResult = recoveryFunction(errors);
                if (recoverAsyncResult) {
                    asyncResult.resolveOrRejectOn(recoverAsyncResult);
                }
                else {
                    asyncResult.reject(errors);
                }
            });
            return asyncResult;
        };
        return AsyncResult;
    }());
    Commerce.AsyncResult = AsyncResult;
    var VoidAsyncResult = (function (_super) {
        __extends(VoidAsyncResult, _super);
        function VoidAsyncResult(callerContext) {
            return _super.call(this) || this;
        }
        VoidAsyncResult.createResolved = function () {
            if (VoidAsyncResult._resolvedAsyncResult) {
                return VoidAsyncResult._resolvedAsyncResult;
            }
            VoidAsyncResult._resolvedAsyncResult = AsyncResult.createResolved();
            return VoidAsyncResult._resolvedAsyncResult;
        };
        VoidAsyncResult.join = function (asyncResults) {
            if (!Commerce.ArrayExtensions.hasElements(asyncResults)) {
                return AsyncResult.createResolved();
            }
            asyncResults = asyncResults.filter(function (a) { return !Commerce.ObjectExtensions.isNullOrUndefined(a); });
            return new CompoundAsyncResult(asyncResults);
        };
        VoidAsyncResult.retryOnFailure = function (asyncCall, asyncRecoveryCall) {
            return asyncCall()
                .recoverOnFailure(function (errors) {
                var asyncResult = new VoidAsyncResult();
                var recoveryAsyncResult = asyncRecoveryCall ? asyncRecoveryCall(errors) : VoidAsyncResult.createRejected(errors);
                recoveryAsyncResult.done(function () { asyncResult.resolveOrRejectOn(asyncCall()); })
                    .fail(function (errors) { asyncResult.reject(errors); });
                return asyncResult;
            });
        };
        VoidAsyncResult.prototype.resolve = function (result) {
            if (result === void 0) { result = void 0; }
            _super.prototype.resolve.call(this, null);
        };
        return VoidAsyncResult;
    }(AsyncResult));
    Commerce.VoidAsyncResult = VoidAsyncResult;
    var CompoundAsyncResult = (function (_super) {
        __extends(CompoundAsyncResult, _super);
        function CompoundAsyncResult(asyncResults) {
            var _this = _super.call(this) || this;
            _this._asyncResultsCount = asyncResults.length;
            _this._succeedCount = 0;
            _this._failedCount = 0;
            _this._allErrors = [];
            _this.attachToCallbacks(asyncResults);
            return _this;
        }
        CompoundAsyncResult.prototype.attachToCallbacks = function (asyncResults) {
            var _this = this;
            asyncResults.forEach(function (asyncResult) {
                asyncResult.done(function (result) {
                    _this._succeedCount++;
                    _this.resolveOrReject();
                });
                asyncResult.fail(function (errors) {
                    _this._failedCount++;
                    _this._allErrors = _this._allErrors.concat(errors);
                    _this.resolveOrReject();
                });
            });
        };
        CompoundAsyncResult.prototype.resolveOrReject = function () {
            if ((this._succeedCount + this._failedCount) === this._asyncResultsCount) {
                if (this._failedCount > 0) {
                    this.reject(this._allErrors);
                }
                else {
                    this.resolve(void 0);
                }
            }
        };
        return CompoundAsyncResult;
    }(VoidAsyncResult));
    var AsyncQueue = (function () {
        function AsyncQueue() {
            this._asyncFunctions = [];
            this._runResult = null;
            this._isCanceled = false;
            this._isRunning = false;
        }
        AsyncQueue.prototype.enqueue = function (asyncFunction) {
            if (Commerce.ObjectExtensions.isFunction(asyncFunction) && !this._isCanceled) {
                this._asyncFunctions.push(asyncFunction);
            }
            return this;
        };
        AsyncQueue.prototype.cancelOn = function (result) {
            var _this = this;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                result.done(function (cancelResult) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cancelResult) && cancelResult.canceled) {
                        _this.cancel();
                    }
                });
            }
            return result;
        };
        AsyncQueue.prototype.cancel = function (predicate) {
            var _this = this;
            if (!Commerce.ObjectExtensions.isFunction(predicate)) {
                this._isCanceled = true;
            }
            else {
                this.enqueue(function (args) {
                    _this._isCanceled = predicate(args);
                    return AsyncResult.createResolved(args);
                });
            }
            return this;
        };
        AsyncQueue.prototype.run = function () {
            var _this = this;
            if (this._isRunning) {
                return this._runResult;
            }
            this._isRunning = true;
            this._runResult = new AsyncResult();
            var previousResult;
            var failed = false;
            var errorsToRejectWith;
            Commerce.Utilities.AsyncExecutionHelper.forEachAsync(this._asyncFunctions, function (nextInQueue, moveNext) {
                if (_this._isCanceled || failed) {
                    moveNext();
                    return;
                }
                var asyncResult;
                try {
                    asyncResult = nextInQueue(previousResult);
                }
                catch (exception) {
                    var errors = Commerce.ErrorHelper.toProxyErrors(exception);
                    var errorsToLog = Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors);
                    Commerce.RetailLogger.coreAsyncQueueRunThrewAnException(errorsToLog);
                    asyncResult = VoidAsyncResult.createRejected(errors);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(asyncResult)) {
                    asyncResult
                        .done(function (result) { return previousResult = result; })
                        .fail(function (errors) {
                        previousResult = null;
                        failed = true;
                        errorsToRejectWith = errors;
                    }).always(function () { return moveNext(); });
                }
                else {
                    previousResult = null;
                    moveNext();
                }
            }, function () {
                _this._asyncFunctions = [];
                if (failed) {
                    _this._runResult.reject(errorsToRejectWith);
                }
                else {
                    _this._runResult.resolve({
                        canceled: _this._isCanceled,
                        data: _this._isCanceled ? null : previousResult
                    });
                }
            });
            return this._runResult;
        };
        return AsyncQueue;
    }());
    Commerce.AsyncQueue = AsyncQueue;
    var AsyncWorkerQueue = (function () {
        function AsyncWorkerQueue(statusCallback) {
            this._isProcessing = false;
            this._workerQueue = [];
            this._statusCallback = statusCallback;
        }
        Object.defineProperty(AsyncWorkerQueue.prototype, "_processing", {
            get: function () {
                return this._isProcessing;
            },
            set: function (val) {
                if (val !== this._isProcessing) {
                    this._isProcessing = val;
                    if (Commerce.ObjectExtensions.isFunction(this._statusCallback)) {
                        this._statusCallback(this._isProcessing);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        AsyncWorkerQueue.prototype.enqueue = function (asyncCall) {
            var asyncResult = new AsyncResult();
            this._workerQueue.push({ asyncCall: asyncCall, asyncResult: asyncResult });
            if (!this._processing) {
                this.processQueue();
            }
            return asyncResult;
        };
        AsyncWorkerQueue.prototype.dispose = function () {
            this._statusCallback = null;
        };
        AsyncWorkerQueue.prototype.processQueue = function () {
            var _this = this;
            var queueItem = this._workerQueue.shift();
            if (queueItem) {
                this._processing = true;
                var asyncResult = void 0;
                try {
                    asyncResult = queueItem.asyncCall();
                    asyncResult
                        .done(function (result) {
                        queueItem.asyncResult.resolve(result);
                    }).fail(function (errors) {
                        queueItem.asyncResult.reject(errors);
                    }).always(function () {
                        queueItem.asyncResult.always(function () {
                            _this.continueProcessingQueue();
                        });
                    });
                }
                catch (e) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(asyncResult) || asyncResult.state() === AsyncResultStateEnum.Pending) {
                        var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR);
                        queueItem.asyncResult.reject([error]);
                    }
                    this.continueProcessingQueue();
                    Commerce.RetailLogger.coreAsyncWorkerQueueAsyncCallThrewAnException(e.toString());
                }
            }
        };
        AsyncWorkerQueue.prototype.continueProcessingQueue = function () {
            var _this = this;
            this._processing = Commerce.ArrayExtensions.hasElements(this._workerQueue);
            if (this._processing) {
                Commerce.Host.instance.timers.setImmediate(function () {
                    _this.processQueue();
                });
            }
        };
        return AsyncWorkerQueue;
    }());
    Commerce.AsyncWorkerQueue = AsyncWorkerQueue;
    var CancellableAsyncWorkerQueue = (function (_super) {
        __extends(CancellableAsyncWorkerQueue, _super);
        function CancellableAsyncWorkerQueue(statusCallback, cancelOnQueueItemFail, cancelOnQueueItemCancel) {
            if (cancelOnQueueItemFail === void 0) { cancelOnQueueItemFail = false; }
            if (cancelOnQueueItemCancel === void 0) { cancelOnQueueItemCancel = false; }
            var _this = _super.call(this, statusCallback) || this;
            _this._cancelOnQueueItemFail = false;
            _this._cancelOnQueueItemCancel = false;
            _this._cancelOnQueueItemFail = cancelOnQueueItemFail;
            _this._cancelOnQueueItemCancel = cancelOnQueueItemCancel;
            return _this;
        }
        CancellableAsyncWorkerQueue.prototype.enqueue = function (asyncCall) {
            var _this = this;
            var handleAsyncResult = function () {
                return asyncCall().done(function (result) {
                    if (_this._cancelOnQueueItemCancel && result.canceled) {
                        _this._drainTheQueue();
                    }
                }).fail(function (errors) {
                    if (_this._cancelOnQueueItemFail) {
                        _this._drainTheQueue();
                    }
                });
            };
            return _super.prototype.enqueue.call(this, handleAsyncResult);
        };
        CancellableAsyncWorkerQueue.prototype.cancel = function () {
            this._drainTheQueue();
        };
        CancellableAsyncWorkerQueue.prototype._drainTheQueue = function () {
            while (this._workerQueue.length > 0) {
                var queueItem = this._workerQueue.shift();
                var canceledDataResult = {
                    canceled: true,
                    data: null
                };
                queueItem.asyncResult.resolve(canceledDataResult);
            }
        };
        return CancellableAsyncWorkerQueue;
    }(AsyncWorkerQueue));
    Commerce.CancellableAsyncWorkerQueue = CancellableAsyncWorkerQueue;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var ArchitectureType;
            (function (ArchitectureType) {
                ArchitectureType[ArchitectureType["Unknown"] = 0] = "Unknown";
                ArchitectureType[ArchitectureType["X86"] = 1] = "X86";
                ArchitectureType[ArchitectureType["X64"] = 2] = "X64";
                ArchitectureType[ArchitectureType["ARM"] = 3] = "ARM";
            })(ArchitectureType = Entities.ArchitectureType || (Entities.ArchitectureType = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IChannelManagerName = "IChannelManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.ICustomerManagerName = "ICustomerManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IOperatorManagerName = "IOperatorManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var Dictionary = (function () {
        function Dictionary() {
            this._items = Object.create(null);
            this._length = 0;
        }
        Dictionary.prototype.removeItem = function (key) {
            var value;
            if (typeof (this._items[key]) !== "undefined") {
                value = this._items[key];
                this._items[key] = undefined;
                delete this._items[key];
                this._length--;
            }
            return value;
        };
        Dictionary.prototype.getItem = function (key) {
            return this._items[key];
        };
        Dictionary.prototype.setItem = function (key, value) {
            if (typeof (value) !== "undefined") {
                if (!this.hasItem(key)) {
                    this._length++;
                }
                this._items[key] = value;
            }
            else {
                throw "Could not set item as value is not defined";
            }
            return value;
        };
        Dictionary.prototype.setItems = function (array, keySelector) {
            var _this = this;
            if (!Commerce.ObjectExtensions.isFunction(keySelector)) {
                throw "keySelector is incorrect";
            }
            if (Commerce.ArrayExtensions.hasElements(array)) {
                array.forEach(function (element) {
                    _this.setItem(keySelector(element), element);
                });
            }
            return array;
        };
        Dictionary.prototype.hasItem = function (key) {
            return typeof (this._items[key]) !== "undefined";
        };
        Dictionary.prototype.length = function () {
            return this._length;
        };
        Dictionary.prototype.forEach = function (callback) {
            var _this = this;
            this.getKeys().forEach(function (key) {
                callback(key, _this._items[key]);
            });
        };
        Dictionary.prototype.clear = function () {
            this._items = Object.create(null);
            this._length = 0;
        };
        Dictionary.prototype.filter = function (callback) {
            var _this = this;
            var result = new Dictionary();
            this.getKeys().forEach(function (key) {
                if (callback(key, _this._items[key]) === true) {
                    result.setItem(key, _this._items[key]);
                }
            });
            return result;
        };
        Dictionary.prototype.getItems = function () {
            var _this = this;
            var result = [];
            this.getKeys().forEach(function (key) {
                result.push(_this._items[key]);
            });
            return result;
        };
        Dictionary.prototype.getKeys = function () {
            return Object.keys(this._items);
        };
        return Dictionary;
    }());
    Commerce.Dictionary = Dictionary;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        Operations.RetailOperation = Commerce.Proxy.Entities.RetailOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var TenderTypeMap = (function (_super) {
        __extends(TenderTypeMap, _super);
        function TenderTypeMap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TenderTypeMap.prototype.getTenderTypeByOperationId = function (operationId) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(operationId)) {
                return null;
            }
            var tenderType = null;
            if (operationId === Commerce.Operations.RetailOperation.PayCashQuick) {
                operationId = Commerce.Operations.RetailOperation.PayCash;
            }
            if (this.hasItem(operationId)) {
                tenderType = this.getItem(operationId)[0];
            }
            else {
                Commerce.RetailLogger.coreTenderTypeMapOperationHasNoTenderType(operationId);
            }
            return tenderType;
        };
        TenderTypeMap.prototype.getTenderByTypeId = function (typeId) {
            if (Commerce.StringExtensions.isNullOrWhitespace(typeId)) {
                return null;
            }
            var tenderTypes = [];
            this.getItems().forEach(function (value) {
                value.forEach(function (tenderType) {
                    if (tenderType.TenderTypeId === typeId) {
                        tenderTypes.push(tenderType);
                    }
                });
            });
            if (tenderTypes.length < 1) {
                Commerce.RetailLogger.coreTenderTypeMapTenderTypeNotFound(typeId);
                return null;
            }
            if (tenderTypes.length > 1) {
                Commerce.RetailLogger.coreTenderTypeMapMultipleTendersOfSameType();
            }
            return tenderTypes[0];
        };
        TenderTypeMap.prototype.getTenderByItemId = function (itemId) {
            if (Commerce.StringExtensions.isNullOrWhitespace(itemId)) {
                return null;
            }
            var tenderTypes = [];
            this.getItems().forEach(function (value) {
                value.forEach(function (tenderType) {
                    if (tenderType.GiftCardItem === itemId) {
                        tenderTypes.push(tenderType);
                    }
                });
            });
            if (!Commerce.ArrayExtensions.hasElements(tenderTypes)) {
                return null;
            }
            if (tenderTypes.length > 1) {
                Commerce.RetailLogger.coreTenderTypeMapMultipleTendersOfSameType();
            }
            return tenderTypes[0];
        };
        TenderTypeMap.prototype.getTenderTypesForSalesTransactions = function () {
            var tenderTypesForSalesTransactions = [];
            this.getItems().forEach(function (operationsTenderTypes) {
                operationsTenderTypes.forEach(function (tenderType) {
                    if (Commerce.TenderTypeHelper.isTenderTypeForSalesTransaction(tenderType)) {
                        tenderTypesForSalesTransactions.push(tenderType);
                    }
                });
            });
            return tenderTypesForSalesTransactions;
        };
        return TenderTypeMap;
    }(Commerce.Dictionary));
    Commerce.TenderTypeMap = TenderTypeMap;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ChannelProfileProperties;
    (function (ChannelProfileProperties) {
        ChannelProfileProperties[ChannelProfileProperties["None"] = 0] = "None";
        ChannelProfileProperties[ChannelProfileProperties["RetailServerURL"] = 1] = "RetailServerURL";
        ChannelProfileProperties[ChannelProfileProperties["RichMediaBaseURL"] = 2] = "RichMediaBaseURL";
        ChannelProfileProperties[ChannelProfileProperties["PrinterURL"] = 3] = "PrinterURL";
        ChannelProfileProperties[ChannelProfileProperties["DrawerURL"] = 4] = "DrawerURL";
        ChannelProfileProperties[ChannelProfileProperties["PaymentTerminalURL"] = 5] = "PaymentTerminalURL";
        ChannelProfileProperties[ChannelProfileProperties["HardwareStationURL"] = 6] = "HardwareStationURL";
    })(ChannelProfileProperties = Commerce.ChannelProfileProperties || (Commerce.ChannelProfileProperties = {}));
    var COMPONENTNAME_TENDERTYPES = "TenderTypes";
    var ApplicationContext = (function () {
        function ApplicationContext() {
            this.availableStores = new Commerce.Dictionary();
            this.countriesIndexMap = new Commerce.Dictionary();
            this.currenciesMap = new Commerce.Dictionary();
            this.deliveryOptionsMap = new Commerce.Dictionary();
            this.tenderTypesMap = new Commerce.TenderTypeMap();
            this.unitsOfMeasureMap = new Commerce.Dictionary();
            this._storeDistancesMap = new Commerce.Dictionary();
            this.channelRichMediaBaseURL = Commerce.StringExtensions.EMPTY;
        }
        Object.defineProperty(ApplicationContext.prototype, "Countries", {
            get: function () {
                return this._countries;
            },
            set: function (newValue) {
                this._countries = newValue.sort(function (firstCountry, secondCountry) {
                    return Commerce.StringExtensions.compare(firstCountry.ShortName, secondCountry.ShortName, true);
                });
                this.countriesIndexMap.clear();
                for (var i = 0; i < this._countries.length; i++) {
                    this.countriesIndexMap.setItem(this._countries[i].CountryRegionId, i);
                    this._countries[i].AddressFormatLines = this._countries[i].AddressFormatLines.sort(function (a, b) {
                        return a.LineNumber - b.LineNumber;
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "isDeviceActivated", {
            get: function () {
                return !Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "Currencies", {
            get: function () {
                return this._currencies;
            },
            set: function (newValue) {
                var _this = this;
                this._currencies = newValue;
                this._currencies.forEach(function (value) {
                    _this.currenciesMap.setItem(value.CurrencyCode, value);
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "deliveryOptions", {
            get: function () {
                return this._deliveryOptions;
            },
            set: function (newValue) {
                this._deliveryOptions = newValue;
                this.deliveryOptionsMap.clear();
                this.deliveryOptionsMap.setItems(newValue, function (deliveryOption) { return deliveryOption.Code; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "tenderTypes", {
            get: function () {
                return this._tenderTypes;
            },
            set: function (newValue) {
                var _this = this;
                this._tenderTypes = newValue;
                this.tenderTypesMap.clear();
                this._tenderTypes.forEach(function (tenderType) {
                    if (!_this.tenderTypesMap.hasItem(tenderType.OperationId)) {
                        _this.tenderTypesMap.setItem(tenderType.OperationId, []);
                    }
                    _this.tenderTypesMap.getItem(tenderType.OperationId).push(tenderType);
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "unitsOfMeasure", {
            get: function () {
                return this._unitsOfMeasure;
            },
            set: function (newValue) {
                var _this = this;
                this._unitsOfMeasure = newValue;
                this.unitsOfMeasureMap.clear();
                if (Commerce.ArrayExtensions.hasElements(this._unitsOfMeasure)) {
                    this._unitsOfMeasure.forEach(function (value) {
                        _this.unitsOfMeasureMap.setItem(value.Symbol.toLowerCase(), value);
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "warehouseLocations", {
            get: function () {
                return this._warehouseLocations;
            },
            set: function (newValue) {
                this._warehouseLocations = newValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "retailTrialPlanOffer", {
            get: function () {
                return this._retailTrialPlanOffer;
            },
            set: function (newValue) {
                this._retailTrialPlanOffer = newValue;
                this.retailTrialPlanOfferFlag = this._retailTrialPlanOffer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "storeDistancesMap", {
            get: function () {
                return this._storeDistancesMap;
            },
            set: function (newValue) {
                this._storeDistancesMap = newValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "activeEftTerminalId", {
            get: function () {
                var activeHardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                var activeEftTerminalId = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(activeHardwareStation)) {
                    activeEftTerminalId = activeHardwareStation.eftTerminalId;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(activeEftTerminalId)) {
                    activeEftTerminalId = this.deviceConfiguration.EFTTerminalId;
                }
                return activeEftTerminalId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "tillLayoutProxy", {
            get: function () {
                return this._tillLayoutProxy;
            },
            set: function (newValue) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this._tillLayoutProxy)) {
                    this._tillLayoutProxy.dispose();
                }
                this._tillLayoutProxy = newValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "deviceConfiguration", {
            get: function () {
                if (this._deviceConfiguration == null) {
                    var storedData = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_CONFIGURATION_KEY);
                    this._deviceConfiguration = new Commerce.Proxy.Entities.DeviceConfigurationClass(JSON.parse(storedData));
                }
                return this._deviceConfiguration;
            },
            set: function (deviceConfiguration) {
                this._deviceConfiguration = deviceConfiguration;
                Commerce.ApplicationStorage.updateStorageConfiguration(deviceConfiguration);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext.prototype, "hardwareProfile", {
            get: function () {
                if (this._hardwareProfile == null) {
                    var storedData = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_PROFILE_KEY);
                    this._hardwareProfile = new Commerce.Proxy.Entities.HardwareProfileClass(JSON.parse(storedData));
                }
                return this._hardwareProfile;
            },
            set: function (hardwareProfile) {
                this._hardwareProfile = hardwareProfile;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationContext, "Instance", {
            get: function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(ApplicationContext._instance)) {
                    ApplicationContext._instance = new ApplicationContext();
                }
                return ApplicationContext._instance;
            },
            set: function (newContext) {
                ApplicationContext._instance = newContext;
            },
            enumerable: true,
            configurable: true
        });
        ApplicationContext.updateServerUrl = function (newUrl) {
            if (Commerce.StringExtensions.compare(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL), newUrl) !== 0) {
                var managerFactory = Commerce.Model.Managers.Factory;
                var serverUri = newUrl;
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.RETAIL_SERVER_URL, serverUri);
                Commerce.Config.retailServerUrl = serverUri;
                managerFactory.updateServerUriInCommerceContext(serverUri);
            }
        };
        ApplicationContext._instance = null;
        return ApplicationContext;
    }());
    Commerce.ApplicationContext = ApplicationContext;
    var ApplicationContextLoader = (function () {
        function ApplicationContextLoader() {
        }
        ApplicationContextLoader.loadCategories = function (isRefresh) {
            var _this = this;
            if (isRefresh) {
                Commerce.ApplicationContextLoader._categories = [];
            }
            var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
            var pageSize = Commerce.Config.defaultPageSize;
            productManager.getCategoriesAsync(Commerce.Session.instance.productCatalogStore.Context.ChannelId, ApplicationContextLoader._categories.length, pageSize)
                .done(function (result) {
                result.forEach(function (value) {
                    ApplicationContextLoader._categories.push(value);
                });
                if (!Commerce.ArrayExtensions.hasElements(result) || result.length < pageSize) {
                    Commerce.Session.instance.CurrentCategoryList = Commerce.ApplicationContextLoader._categories;
                }
                else {
                    _this.loadCategories(false);
                }
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationContextLoadCategoriesFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.loadChannelConfigurationComponents = function () {
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            var asyncResults = [];
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            var tillLayoutManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ITillLayoutManagerName);
            if (!Commerce.ApplicationHelper.isWebApplicationType(Commerce.Host.instance.application.getApplicationType())) {
                var envConfigResult = channelManager.getEnvironmentConfiguration().done(function (config) {
                    Commerce.InstrumentationHelper.setEnvironmentInfo(config);
                }).recoverOnFailure(function (errors) {
                    Commerce.RetailLogger.applicationLoadEnvironmentConfigurationServerLoadFailed(Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncResults.push(envConfigResult);
            }
            var deviceConfigResult = channelManager.getDeviceConfigurationAsync()
                .done(function (deviceConfiguration) { ApplicationContext.Instance.deviceConfiguration = deviceConfiguration; })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "DeviceConfiguration", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(deviceConfigResult);
            var appStorageResult = new Commerce.AsyncQueue()
                .enqueue(function () { return deviceConfigResult; })
                .enqueue(function () {
                try {
                    var deviceConfigurationStr = JSON.stringify(ApplicationContext.Instance.deviceConfiguration);
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_CONFIGURATION_KEY, deviceConfigurationStr);
                    if (Commerce.StringExtensions.isNullOrWhitespace(ApplicationContext.Instance.deviceConfiguration.CultureName)) {
                        ApplicationContext.Instance.deviceConfiguration.CultureName = Commerce.ViewModelAdapter.getDefaultUILanguage();
                    }
                    Commerce.CSSHelpers.applyThemeAsync(ApplicationContext.Instance.deviceConfiguration);
                    Commerce.CSSHelpers.setDeveloperModeThemeDefault();
                    ApplicationContext.Instance.storeNumber = ApplicationContext.Instance.deviceConfiguration.StoreNumber;
                }
                catch (exception) {
                    var storageErrors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_STORE_FAILED_TO_SAVE_DEVICE_CONFIGURATION)];
                    Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "DeviceConfiguration", storageErrors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(storageErrors[0]));
                    return Commerce.VoidAsyncResult.createRejected(storageErrors);
                }
                return Commerce.VoidAsyncResult.createResolved();
            }).run();
            asyncResults.push(appStorageResult);
            var employeeListResult = new Commerce.AsyncQueue()
                .enqueue(function () { return deviceConfigResult; })
                .enqueue(function () { return ApplicationContextLoader.loadStoreEmployeeList(correlationId, ApplicationContext.Instance.deviceConfiguration); }).run();
            asyncResults.push(employeeListResult);
            var getCountryRegionsResult = new Commerce.AsyncQueue()
                .enqueue(function () { return deviceConfigResult; })
                .enqueue(function () {
                return channelManager.getCountryRegionsAsync(ApplicationContext.Instance.deviceConfiguration.CultureName)
                    .done(function (countries) { ApplicationContext.Instance.Countries = countries; })
                    .fail(function (errors) {
                    Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "CountryRegions", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                });
            }).run();
            asyncResults.push(getCountryRegionsResult);
            ApplicationContext.Instance.hardwareStationProfileAsync = channelManager.getHardwareStationProfileAsync().fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupHardwareStationProfileFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(ApplicationContextLoader.loadActiveHardwareStationProfileAsync(correlationId, channelManager));
            var tillLayoutResult = tillLayoutManager.getTillLayoutAsync()
                .done(function (tillLayout) {
                ApplicationContext.Instance.tillLayoutProxy = tillLayout;
                Commerce.Config.isPhone = (ApplicationContext.Instance.tillLayoutProxy.getLayoutType() === Commerce.Proxy.Entities.LayoutType.ModernPosCompact);
                var $body = $("body");
                if (Commerce.Config.isPhone) {
                    $body.addClass("phone");
                }
                else {
                    $body.removeClass("phone");
                }
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "TillLayout", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(tillLayoutResult);
            var storesResult = channelManager.getAvailableStoresAsync()
                .done(function (stores) {
                ApplicationContext.Instance.availableStores.setItems(stores, function (store) { return store.OrgUnitNumber; });
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "AvailableStores", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(storesResult);
            var deliveryOptionsResult = channelManager.getDeliveryOptionsAsync()
                .done(function (deliveryOptions) { ApplicationContext.Instance.deliveryOptions = deliveryOptions; })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "DeliveryOptions", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(deliveryOptionsResult);
            var getCurrenciesServiceRequest = new Commerce.GetCurrenciesServiceRequest(correlationId);
            var currenciesResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCurrenciesServiceRequest))
                .fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "Currencies", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(currenciesResult);
            var operationsResult = channelManager.getOperationsAsync()
                .done(function (availableOperations) {
                ApplicationContext.Instance.operationPermissions = availableOperations;
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "Operations", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(operationsResult);
            var tenderTypesResult = channelManager.getTenderTypesAsync()
                .done(function (tenderTypes) {
                var serializedTenderTypes = JSON.stringify(tenderTypes);
                Commerce.RetailLogger.applicationLoadChannelConfigurationSucceeded(COMPONENTNAME_TENDERTYPES, serializedTenderTypes);
                ApplicationContext.Instance.tenderTypes = tenderTypes;
            })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, COMPONENTNAME_TENDERTYPES, errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(tenderTypesResult);
            var unitsOfMeasureResult = channelManager.getUnitsOfMeasureAsync()
                .done(function (unitsOfMeasure) { ApplicationContext.Instance.unitsOfMeasure = unitsOfMeasure; })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "UnitsOfMeasure", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(unitsOfMeasureResult);
            var retailTrialPlanOfferResult = channelManager.getRetailTrialPlanOfferAsync()
                .done(function (retailtrialPlanOfferFlag) { ApplicationContext.Instance.retailTrialPlanOffer = retailtrialPlanOfferFlag; })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "RetailTrialPlanOffer", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
            asyncResults.push(retailTrialPlanOfferResult);
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            ApplicationContext.Instance.customerSearchFields = [];
            var customerSearchFieldResult = customerManager.getCustomerSearchFieldsAsync()
                .done(function (customerSearchFields) {
                ApplicationContext.Instance.customerSearchFields = customerSearchFields;
            }).recoverOnFailure(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationWarning("CustomerSearchFields", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                return Commerce.AsyncResult.createResolved([]);
            });
            asyncResults.push(customerSearchFieldResult);
            if (Commerce.ObjectExtensions.isNullOrUndefined(ApplicationContext.Instance.channelConfiguration)) {
                var getChannelConfigurationClientRequest = new Commerce.GetChannelConfigurationClientRequest(Commerce.LoggerHelper.getNewCorrelationId());
                var channelConfigurationResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getChannelConfigurationClientRequest))
                    .fail(function (errors) {
                    Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "ChannelConfiguration", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                });
                asyncResults.push(channelConfigurationResult);
            }
            return Commerce.VoidAsyncResult.join(asyncResults).done(function () {
                var channelRichMediaBaseURLOption = Commerce.ArrayExtensions.firstOrUndefined(ApplicationContext.Instance.channelConfiguration.ProfileProperties, function (value) { return value.Key === ChannelProfileProperties.RichMediaBaseURL; });
                if (!Commerce.StringExtensions.isEmptyOrWhitespace(ApplicationContext.Instance.channelConfiguration.CatalogDefaultImageTemplate)) {
                    try {
                        Commerce.Session.instance.defaultCatalogImageFormat = ApplicationContext.Instance.channelConfiguration.CatalogDefaultImageTemplate;
                    }
                    catch (err) {
                        Commerce.RetailLogger.applicationContextInvalidCatalogImageFormat();
                    }
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(channelRichMediaBaseURLOption)) {
                    ApplicationContext.Instance.channelRichMediaBaseURL = (Commerce.Config.isDemoMode) ?
                        "ms-appx:///DemoMode/" : Commerce.UrlHelper.formatBaseUrl(channelRichMediaBaseURLOption.Value);
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        if (!Commerce.Core.RegularExpressionValidations.validateUrl(Commerce.Session.instance.picture())) {
                            Commerce.Session.instance.picture(ApplicationContext.Instance.channelRichMediaBaseURL +
                                Commerce.Session.instance.picture());
                        }
                    }
                }
                ApplicationContext.Instance.storeInformation =
                    ApplicationContext.Instance.availableStores.getItem(ApplicationContext.Instance.deviceConfiguration.StoreNumber);
                Commerce.Session.instance.productCatalogStore.Store = Commerce.ObjectExtensions.clone(ApplicationContext.Instance.storeInformation);
                Commerce.Session.instance.productCatalogStore.Context =
                    new Commerce.Proxy.Entities.ProjectionDomainClass({ ChannelId: ApplicationContext.Instance.storeInformation.RecordId, CatalogId: 0 });
                Commerce.Session.instance.productCatalogStore.StoreType = Commerce.Proxy.Entities.StoreButtonControlType.CurrentStore;
                ApplicationContextLoader.loadCategories(true);
                ApplicationContextLoader.setupAsyncEntities();
            }).recoverOnFailure(function (errors) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_STORE_INITIALIZATION_DATA_FAILED_TO_LOAD)]);
            });
        };
        ApplicationContextLoader.loadActiveHardwareStationProfileAsync = function (correlationId, channelManager, hardwareProfile) {
            return new Commerce.AsyncQueue().enqueue(function () {
                return ApplicationContext.Instance.hardwareStationProfileAsync;
            }).enqueue(function (profiles) {
                var hardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                var applicationType = Commerce.Host.instance.application.getApplicationType();
                if (hardwareStation) {
                    var foundHardwareStations = null;
                    foundHardwareStations = profiles.filter(function (profile) {
                        return profile.RecordId === hardwareStation.recordId;
                    });
                    if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(hardwareStation)) {
                        if (!Commerce.ArrayExtensions.hasElements(foundHardwareStations) ||
                            Commerce.StringExtensions.compare(hardwareStation.url, Commerce.Peripherals.HardwareStation.HardwareStationContext.getHardwareStationUrlFromProfile(foundHardwareStations[0]), true) !== 0) {
                            Commerce.HardwareStationEndpointStorage.clearActiveHardwareStation(correlationId);
                            hardwareStation = null;
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation)) {
                            hardwareStation.profileId = foundHardwareStations[0].HardwareProfileId;
                            hardwareStation.eftTerminalId = foundHardwareStations[0].HardwareStationEftTerminalId;
                            hardwareStation.hardwareConfigurations = foundHardwareStations[0].HardwareConfigurations;
                            Commerce.HardwareStationEndpointStorage.setActiveHardwareStation(correlationId, hardwareStation);
                        }
                    }
                    else {
                        if (Commerce.ArrayExtensions.hasElements(foundHardwareStations)) {
                            hardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                            hardwareStation.eftTerminalId = foundHardwareStations[0].HardwareStationEftTerminalId;
                            Commerce.HardwareStationEndpointStorage.setActiveHardwareStation(correlationId, hardwareStation);
                        }
                    }
                }
                else {
                    if (applicationType !== Commerce.Proxy.Entities.ApplicationTypeEnum.CloudPos) {
                        var hardwareStationProfile = Commerce.ArrayExtensions.firstOrUndefined(profiles, function (profile) {
                            return profile.HardwareStationTypeValue === Commerce.Proxy.Entities.HardwareStationType.Dedicated;
                        });
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStationProfile)) {
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Payments.ActivateHardwareStationClientRequest(correlationId, hardwareStationProfile))).map(function (response) {
                                return hardwareStation;
                            });
                        }
                    }
                }
                return Commerce.AsyncResult.createResolved(hardwareStation);
            })
                .enqueue(function (hardwareStation) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(hardwareProfile)) {
                    return ApplicationContextLoader.getActiveHardwareProfileAsync(hardwareStation, channelManager);
                }
                else {
                    return Commerce.AsyncResult.createResolved(hardwareProfile);
                }
            }).enqueue(function (profile) {
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.HARDWARE_PROFILE_KEY, JSON.stringify(profile));
                ApplicationContext.Instance.hardwareProfile = profile;
                var getSaveMerchantInformationRequest = new Commerce.Payments.SaveMerchantInformationClientRequest(correlationId, profile);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getSaveMerchantInformationRequest))
                    .fail(function (errors) {
                    Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "PaymentMerchantInformation", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                });
            }).run();
        };
        ApplicationContextLoader.getActiveHardwareProfileAsync = function (hardwareStation, channelManager) {
            var hardwareProfileId = ApplicationContextLoader.getHardwareProfileId(hardwareStation);
            var currentHardwareProfile = null;
            return channelManager.getHardwareProfileAsync(hardwareProfileId)
                .done(function (hardwareProfile) {
                currentHardwareProfile = hardwareProfile;
            }).recoverOnFailure(function (errors) {
                currentHardwareProfile = JSON.parse(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_PROFILE_KEY));
                if (currentHardwareProfile == null) {
                    return Commerce.AsyncResult.createRejected(errors);
                }
                return Commerce.AsyncResult.createResolved(currentHardwareProfile);
            });
        };
        ApplicationContextLoader.getCardTypesByTenderTypeId = function (tenderTypeId) {
            var asyncResult = new Commerce.AsyncResult();
            var filteredCardTypes = [];
            ApplicationContext.Instance.cardTypesAsync.value.done(function (cardTypes) {
                filteredCardTypes = cardTypes.filter(function (cardType) {
                    return cardType.PaymentMethodId === tenderTypeId;
                });
                asyncResult.resolve(filteredCardTypes);
            }).fail(function (errors) {
                asyncResult.reject(errors);
            });
            return asyncResult;
        };
        ApplicationContextLoader.setupAsyncEntities = function () {
            var context = ApplicationContext.Instance;
            context.cardTypesAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupCardTypesAsync);
            context.debitCashbackLimitAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupDebitCashbackLimitAsync);
            context.customerGroupsAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupCustomerGroupsAsync);
            context.customerTypesAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupCustomerTypesAsync);
            context.customerAttributeDefinitionsAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupCustomerAttributeDefinitionsAsync);
            context.salesOrderHeaderAttributeGroupDetailsAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupSalesOrderHeaderAttributeGroupDetails);
            context.salesOrderLinesAttributeGroupDetailsAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupSalesOrderLinesAttributeGroupDetails);
            context.returnOrderReasonCodesAsCompositeSubcodesAsync
                = new Commerce.AsyncLazy(ApplicationContextLoader.setupReturnOrderReasonCodesAsCompositeSubcodesAsync);
            context.languagesAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupLanguagesAsync);
            context.receiptMasksAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupReceiptMasksAsync);
            context.cashDeclarationsMapAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupCashDeclarationsMapAsync);
            context.commissionSalesGroupsForDisplay = new Commerce.AsyncLazy(ApplicationContextLoader.setupCommissionSalesGroupsAsync);
            context.warehouseAsync = new Commerce.AsyncLazy(ApplicationContextLoader.setupWarehouseAsync);
        };
        ApplicationContextLoader.setupWarehouseAsync = function () {
            var warehouseManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IWarehouseManagerName);
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            return warehouseManager.getWarehouseByIdAsync(ApplicationContext.Instance.deviceConfiguration.InventLocationId)
                .fail(function (errors) {
                Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "Warehouse", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.setupDebitCashbackLimitAsync = function () {
            var debitCashbackLimitAsync = new Commerce.AsyncResult();
            ApplicationContext.Instance.cardTypesAsync.value
                .done(function (cardTypes) {
                var debitCashBackLimit = Infinity;
                for (var i = 0; i < cardTypes.length; i++) {
                    if ((cardTypes[i].CardTypeValue === Commerce.Proxy.Entities.CardType.InternationalDebitCard)
                        && (cardTypes[i].CashBackLimit < debitCashBackLimit)) {
                        debitCashBackLimit = cardTypes[i].CashBackLimit;
                    }
                }
                debitCashbackLimitAsync.resolve(debitCashBackLimit === Infinity ? 0 : debitCashBackLimit);
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupDebitCashbackLimitFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                debitCashbackLimitAsync.reject(errors);
            });
            return debitCashbackLimitAsync;
        };
        ApplicationContextLoader.setupCardTypesAsync = function () {
            var cardTypesAsync = new Commerce.AsyncResult();
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            channelManager.getCardTypesAsync()
                .done(function (cardTypes) {
                var cardEndIndex = 5;
                var info = Commerce.StringExtensions.EMPTY;
                cardTypes.forEach(function (cardType) {
                    info += Commerce.StringExtensions.format("Name:'{0}'; NumberFromLength:'{1}'; NumberFrom:'{2}'; NumberTo:'{3}'; PaymentMethodId:'{4}; TypeId:'{5}'; CardType:'{6}'; " +
                        "CashBackLimit:'{7}'; AllowManualInput:'{8}'{9}", cardType.Name, cardType.NumberFrom.length, cardType.NumberFrom.substring(0, cardEndIndex), cardType.NumberTo.substring(0, cardEndIndex), cardType.PaymentMethodId, cardType.TypeId, cardType.CardTypeValue, cardType.CashBackLimit, cardType.AllowManualInput, Commerce.StringExtensions.NEW_LINE);
                });
                Commerce.RetailLogger.applicationContextSetupCardTypesSucceeded(info);
                cardTypesAsync.resolve(cardTypes || []);
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupCardTypesFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                cardTypesAsync.reject(errors);
            });
            return cardTypesAsync;
        };
        ApplicationContextLoader.setupReturnOrderReasonCodesAsCompositeSubcodesAsync = function () {
            var returnOrderReasonCodesAsCompositeSubcodesAsync = new Commerce.AsyncResult();
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            channelManager.getReturnOrderReasonCodesAsync()
                .done(function (availableReasonCodes) {
                var compositeCode = null;
                if (Commerce.ArrayExtensions.hasElements(availableReasonCodes)) {
                    compositeCode = new Commerce.Proxy.Entities.ReasonCodeClass();
                    compositeCode.ReasonCodeId = availableReasonCodes[0].ReasonCodeId;
                    compositeCode.Description = availableReasonCodes[0].Description;
                    compositeCode.InputTypeValue = Commerce.Proxy.Entities.ReasonCodeInputTypeEnum.CompositeSubCodes;
                    compositeCode.Prompt = Commerce.ViewModelAdapter.getResourceString("string_1203");
                    compositeCode.ReasonSubCodes = [];
                    availableReasonCodes.forEach(function (reasonCode) {
                        var subCode = new Commerce.Proxy.Entities.ReasonSubCodeClass();
                        subCode.SubCodeId = reasonCode.ReasonCodeId;
                        subCode.Description = reasonCode.Description;
                        compositeCode.ReasonSubCodes.push(subCode);
                    });
                }
                returnOrderReasonCodesAsCompositeSubcodesAsync.resolve(compositeCode);
            })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupReturnOrderReasonCodesFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                returnOrderReasonCodesAsCompositeSubcodesAsync.reject(errors);
            });
            return returnOrderReasonCodesAsCompositeSubcodesAsync;
        };
        ApplicationContextLoader.setupCommissionSalesGroupsAsync = function () {
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            var getCommissionSalesGroupsServiceRequest = new Commerce.GetCommissionSalesGroupsServiceRequest(correlationId);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCommissionSalesGroupsServiceRequest))
                .map(function (commissionSalesGroups) {
                if (commissionSalesGroups.canceled) {
                    return { canceled: true, data: [] };
                }
                else {
                    var commissionSalesGroupsForDisplay_1 = [];
                    if (Commerce.ArrayExtensions.hasElements(commissionSalesGroups.data.commissionSalesGroups)) {
                        commissionSalesGroups.data.commissionSalesGroups.forEach(function (commissionSaleGroup) {
                            commissionSalesGroupsForDisplay_1.push(new Commerce.Proxy.Entities.CommissionSalesGroupForDisplay(commissionSaleGroup));
                        });
                    }
                    return { canceled: false, data: commissionSalesGroupsForDisplay_1 };
                }
            })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupCommissionSalesGroupsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.loadStoreEmployeeList = function (correlationId, deviceConfiguration) {
            ApplicationContext.Instance.storeEmployeeListAsync = new Commerce.AsyncLazy(function () {
                var operatorManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IOperatorManagerName);
                return operatorManager.getEmployeesAsync();
            });
            if (deviceConfiguration.ShowStaffListAtLogOn) {
                return ApplicationContext.Instance.storeEmployeeListAsync.value
                    .done(function (employeeList) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.EMPLOYEE_LIST_KEY, JSON.stringify(employeeList));
                }).fail(function (errors) {
                    Commerce.RetailLogger.applicationLoadChannelConfigurationFailed(correlationId, "Employees", errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                });
            }
            else {
                return Commerce.VoidAsyncResult.createResolved();
            }
        };
        ApplicationContextLoader.setupCustomerTypesAsync = function () {
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            return customerManager.getCustomerTypesAsync()
                .fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupCustomerTypesFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.setupCustomerGroupsAsync = function () {
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            return customerManager.getCustomerGroupsAsync()
                .fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupCustomerGroupsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.setupCustomerAttributeDefinitionsAsync = function () {
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            return customerManager.getCustomerAttributeDefinitionsAsync()
                .fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupCustomerAttributeDefinitionsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.setupSalesOrderHeaderAttributeGroupDetails = function () {
            var request = new Commerce.SalesOrders.GetAttributeGroupDetailsClientRequest(Commerce.LoggerHelper.getNewCorrelationId(), ApplicationContext.Instance.channelConfiguration.SalesOrderHeaderAttributeGroups);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                .map(function (result) {
                return result.canceled ? [] : result.data.result;
            })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupSalesOrderHeaderAttributeGroupDetailsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.setupSalesOrderLinesAttributeGroupDetails = function () {
            var request = new Commerce.SalesOrders.GetAttributeGroupDetailsClientRequest(Commerce.LoggerHelper.getNewCorrelationId(), ApplicationContext.Instance.channelConfiguration.SalesOrderLinesAttributeGroups);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                .map(function (result) {
                return result.canceled ? [] : result.data.result;
            })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupSalesOrderLinesAttributeGroupDetailsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
            });
        };
        ApplicationContextLoader.setupLanguagesAsync = function () {
            var languagesAsync = new Commerce.AsyncResult();
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            channelManager.getLanguagesAsync()
                .done(function (availableLanguages) {
                var languages = [];
                availableLanguages.forEach(function (value) {
                    var isLanguageFound;
                    var language;
                    try {
                        language = Commerce.Host.instance.globalization.getLanguageByTag(value.LanguageId);
                        isLanguageFound = !Commerce.StringExtensions.isNullOrWhitespace(language.displayName);
                    }
                    catch (err) {
                        isLanguageFound = false;
                    }
                    if (isLanguageFound) {
                        var languageInfo = new Commerce.Proxy.Entities.LanguagesInfo(language.displayName, value.LanguageId);
                        languages.push(languageInfo);
                    }
                    else {
                        Commerce.RetailLogger.applicationContextSetupLanguagesInvalidLanguage(value.LanguageId);
                    }
                });
                languagesAsync.resolve(languages.sort(function (left, right) {
                    return Commerce.StringExtensions.compare(left.LanguageName, right.LanguageName);
                }));
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupLanguagesFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                languagesAsync.reject(errors);
            });
            return languagesAsync;
        };
        ApplicationContextLoader.setupReceiptMasksAsync = function () {
            var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
            return salesOrderManager.getReceiptMasks();
        };
        ApplicationContextLoader.setupCashDeclarationsMapAsync = function () {
            var result = new Commerce.AsyncResult();
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            channelManager.getCashDeclarationAsync()
                .done(function (cashDeclarations) {
                var cashDeclarationsMap = new Commerce.Dictionary();
                cashDeclarations.forEach(function (value) {
                    if (!cashDeclarationsMap.hasItem(value.Currency)) {
                        cashDeclarationsMap.setItem(value.Currency, []);
                    }
                    cashDeclarationsMap.getItem(value.Currency).push(value);
                });
                result.resolve(cashDeclarationsMap);
            }).fail(function (errors) {
                Commerce.RetailLogger.applicationContextSetupCashDeclarationsFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                result.reject(errors);
            });
            return result;
        };
        ApplicationContextLoader.getHardwareProfileId = function (hardwareStation) {
            var profileId = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation)
                && !Commerce.StringExtensions.isNullOrWhitespace(hardwareStation.profileId)) {
                profileId = hardwareStation.profileId;
            }
            return profileId || ApplicationContext.Instance.deviceConfiguration.HardwareProfile;
        };
        ApplicationContextLoader._categories = [];
        return ApplicationContextLoader;
    }());
    Commerce.ApplicationContextLoader = ApplicationContextLoader;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ApplicationStorageIDs;
    (function (ApplicationStorageIDs) {
        ApplicationStorageIDs[ApplicationStorageIDs["CART_KEY"] = 0] = "CART_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["CASH_DRAWER_NAME"] = 1] = "CASH_DRAWER_NAME";
        ApplicationStorageIDs[ApplicationStorageIDs["CASH_DRAWER_TYPE"] = 2] = "CASH_DRAWER_TYPE";
        ApplicationStorageIDs[ApplicationStorageIDs["CUSTOM_UI_STRINGS_KEY"] = 3] = "CUSTOM_UI_STRINGS_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["CONNECTION_STATUS"] = 4] = "CONNECTION_STATUS";
        ApplicationStorageIDs[ApplicationStorageIDs["ENVIRONMENT_CONFIGURATION_KEY"] = 5] = "ENVIRONMENT_CONFIGURATION_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["DEVICE_CONFIGURATION_KEY"] = 6] = "DEVICE_CONFIGURATION_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["DEVICE_ID_KEY"] = 7] = "DEVICE_ID_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["DEVICE_TOKEN_KEY"] = 8] = "DEVICE_TOKEN_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["EMPLOYEE_LIST_KEY"] = 9] = "EMPLOYEE_LIST_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["HARDWARE_PROFILE_KEY"] = 10] = "HARDWARE_PROFILE_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["ACTIVE_HARDWARE_STATION"] = 11] = "ACTIVE_HARDWARE_STATION";
        ApplicationStorageIDs[ApplicationStorageIDs["HARDWARE_STATION_ENPOINT_STORAGE"] = 12] = "HARDWARE_STATION_ENPOINT_STORAGE";
        ApplicationStorageIDs[ApplicationStorageIDs["INITIAL_SYNC_COMPLETED_KEY"] = 13] = "INITIAL_SYNC_COMPLETED_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["NUMBER_SEQUENCES_KEY"] = 14] = "NUMBER_SEQUENCES_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["CART_RECEIPT_NUMBER_SEQUENCE_KEY"] = 15] = "CART_RECEIPT_NUMBER_SEQUENCE_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["REGISTER_ID_KEY"] = 16] = "REGISTER_ID_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["RETAIL_SERVER_URL"] = 17] = "RETAIL_SERVER_URL";
        ApplicationStorageIDs[ApplicationStorageIDs["SHIFT_KEY"] = 18] = "SHIFT_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["OPENED_SHIFTS_KEY"] = 19] = "OPENED_SHIFTS_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["STORE_ID_KEY"] = 20] = "STORE_ID_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["FIRST_TIME_USE"] = 21] = "FIRST_TIME_USE";
        ApplicationStorageIDs[ApplicationStorageIDs["BUBBLE_TOUR_DISABLED"] = 22] = "BUBBLE_TOUR_DISABLED";
        ApplicationStorageIDs[ApplicationStorageIDs["VIDEO_TUTORIAL_DISABLED"] = 23] = "VIDEO_TUTORIAL_DISABLED";
        ApplicationStorageIDs[ApplicationStorageIDs["AAD_LOGON_IN_PROCESS_KEY"] = 24] = "AAD_LOGON_IN_PROCESS_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["ACTIVATION_PAGE_PARAMETERS_KEY"] = 25] = "ACTIVATION_PAGE_PARAMETERS_KEY";
        ApplicationStorageIDs[ApplicationStorageIDs["CLOUD_SESSION_ID"] = 26] = "CLOUD_SESSION_ID";
        ApplicationStorageIDs[ApplicationStorageIDs["NAVIGATION_LOGGING_ENABLED"] = 27] = "NAVIGATION_LOGGING_ENABLED";
        ApplicationStorageIDs[ApplicationStorageIDs["NAVIGATION_LOG_VISIBLE"] = 28] = "NAVIGATION_LOG_VISIBLE";
        ApplicationStorageIDs[ApplicationStorageIDs["CSS_DEVMODE"] = 29] = "CSS_DEVMODE";
        ApplicationStorageIDs[ApplicationStorageIDs["CSS_THEME_COLOR"] = 30] = "CSS_THEME_COLOR";
        ApplicationStorageIDs[ApplicationStorageIDs["CSS_BODY_DIRECTION"] = 31] = "CSS_BODY_DIRECTION";
        ApplicationStorageIDs[ApplicationStorageIDs["CSS_DEV_GRID"] = 32] = "CSS_DEV_GRID";
        ApplicationStorageIDs[ApplicationStorageIDs["CSS_DEV_COLORS"] = 33] = "CSS_DEV_COLORS";
        ApplicationStorageIDs[ApplicationStorageIDs["APP_BAR_ALWAYS_VISIBLE"] = 34] = "APP_BAR_ALWAYS_VISIBLE";
        ApplicationStorageIDs[ApplicationStorageIDs["APPLICATION_VERSION"] = 35] = "APPLICATION_VERSION";
        ApplicationStorageIDs[ApplicationStorageIDs["TENANT_ID"] = 36] = "TENANT_ID";
        ApplicationStorageIDs[ApplicationStorageIDs["DEVICE_ACTIVATION_COMPLETED"] = 37] = "DEVICE_ACTIVATION_COMPLETED";
        ApplicationStorageIDs[ApplicationStorageIDs["RETAILSERVER_TENANT_ID"] = 38] = "RETAILSERVER_TENANT_ID";
        ApplicationStorageIDs[ApplicationStorageIDs["CURRENT_ACTIVATION_PROCESS"] = 39] = "CURRENT_ACTIVATION_PROCESS";
        ApplicationStorageIDs[ApplicationStorageIDs["PERFORMANCE_LOGGER_SETTINGS"] = 40] = "PERFORMANCE_LOGGER_SETTINGS";
        ApplicationStorageIDs[ApplicationStorageIDs["DEVELOPER_MODE_SHOW_STRING_IDS"] = 41] = "DEVELOPER_MODE_SHOW_STRING_IDS";
        ApplicationStorageIDs[ApplicationStorageIDs["ENABLE_PSEUDO_LOCALIZATION"] = 42] = "ENABLE_PSEUDO_LOCALIZATION";
        ApplicationStorageIDs[ApplicationStorageIDs["HARDWARE_STATION_FEATURE_ENABLE"] = 43] = "HARDWARE_STATION_FEATURE_ENABLE";
        ApplicationStorageIDs[ApplicationStorageIDs["CASH_DRAWER_OPEN_STATUS"] = 44] = "CASH_DRAWER_OPEN_STATUS";
        ApplicationStorageIDs[ApplicationStorageIDs["PAYMENT_MERCHANT_PROPERTIES_HASH_VALUE"] = 45] = "PAYMENT_MERCHANT_PROPERTIES_HASH_VALUE";
        ApplicationStorageIDs[ApplicationStorageIDs["AAD_OPERATOR_LOGIN_INITIATED"] = 46] = "AAD_OPERATOR_LOGIN_INITIATED";
        ApplicationStorageIDs[ApplicationStorageIDs["AAD_LOGOFF_INITIATED"] = 47] = "AAD_LOGOFF_INITIATED";
        ApplicationStorageIDs[ApplicationStorageIDs["PAYMENT_TRANSACTION_REFERENCE_DATA"] = 48] = "PAYMENT_TRANSACTION_REFERENCE_DATA";
        ApplicationStorageIDs[ApplicationStorageIDs["CURRENT_FISCAL_REGISTRATION_PROCESS"] = 49] = "CURRENT_FISCAL_REGISTRATION_PROCESS";
    })(ApplicationStorageIDs = Commerce.ApplicationStorageIDs || (Commerce.ApplicationStorageIDs = {}));
    var ApplicationStorage = (function () {
        function ApplicationStorage() {
        }
        ApplicationStorage.registerNonEssentialDataFilter = function (key, dataFilter) {
            if (!Commerce.ObjectExtensions.isFunction(dataFilter)) {
                throw "ApplicationStorage::StorageQuotaReachedRecoveryHandler must be a function.";
            }
            var applicationStorageId = ApplicationStorage.getStorageKeyFromId(key);
            ApplicationStorage.nonEssentialDataFilterMap.setItem(applicationStorageId, dataFilter);
        };
        ApplicationStorage.getItem = function (itemKey) {
            var storageKey = ApplicationStorage.getStorageKeyFromId(itemKey);
            return ApplicationStorage.getStorage(itemKey).getItem(storageKey);
        };
        ApplicationStorage.setItem = function (itemKey, itemValue) {
            var storageKey = ApplicationStorage.getStorageKeyFromId(itemKey);
            var storage = ApplicationStorage.getStorage(itemKey);
            ApplicationStorage.setItemOnStorage(storage, storageKey, itemValue);
        };
        ApplicationStorage.removeItem = function (itemKey) {
            var storageKey = ApplicationStorage.getStorageKeyFromId(itemKey);
            var storage = ApplicationStorage.getStorage(itemKey);
            storage.removeItem(storageKey);
        };
        ApplicationStorage.clear = function () {
            window.localStorage.clear();
            window.sessionStorage.clear();
            ApplicationStorage.updateStorageConfiguration(null);
        };
        ApplicationStorage.updateStorageConfiguration = function (newDeviceConfiguration) {
            var newUseInMemoryStorage = (newDeviceConfiguration === null) || newDeviceConfiguration.UseInMemoryDeviceDataStorage;
            var currentUseInMemoryStorage = ApplicationStorage.useInMemoryStorage;
            var currentStorage;
            var newStorage;
            if (currentUseInMemoryStorage === newUseInMemoryStorage) {
                return;
            }
            if (newUseInMemoryStorage) {
                currentStorage = window.localStorage;
                newStorage = window.sessionStorage;
            }
            else {
                currentStorage = window.sessionStorage;
                newStorage = window.localStorage;
            }
            for (var keyEntry in ApplicationStorageIDs) {
                if (ApplicationStorageIDs[keyEntry] && typeof ApplicationStorageIDs[keyEntry] === "number") {
                    var keyId = Number(ApplicationStorageIDs[keyEntry]);
                    var storageKey = ApplicationStorage.getStorageKeyFromId(keyId);
                    var currentStoredValue = currentStorage.getItem(storageKey);
                    if (!ApplicationStorage.isKeyBoundToLocalStorage(keyId) && !ApplicationStorage.isKeyBoundToSessionStorage(keyId)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(currentStoredValue)) {
                        currentStorage.removeItem(storageKey);
                        ApplicationStorage.setItemOnStorage(newStorage, storageKey, currentStoredValue);
                    }
                }
            }
            ApplicationStorage.useInMemoryStorage = newUseInMemoryStorage;
        };
        ApplicationStorage.isLocalStorageSupported = function () {
            var TEST_MARKER = "_test_value_0cacf36c-d73a-48bb-8d4d-0d611d83b1ef";
            try {
                window.localStorage.setItem(TEST_MARKER, TEST_MARKER);
            }
            catch (error) {
                return false;
            }
            try {
                window.localStorage.removeItem(TEST_MARKER);
            }
            catch (error) {
                return false;
            }
            return true;
        };
        ApplicationStorage.getStorage = function (itemKey) {
            ApplicationStorage.loadConfiguration();
            var mustUseSessionStorage = Commerce.ObjectExtensions.isNullOrUndefined(ApplicationStorage.useInMemoryStorage)
                ? true
                : ApplicationStorage.useInMemoryStorage;
            if (mustUseSessionStorage && ApplicationStorage.isKeyBoundToLocalStorage(itemKey)) {
                mustUseSessionStorage = false;
            }
            if (!mustUseSessionStorage && ApplicationStorage.isKeyBoundToSessionStorage(itemKey)) {
                mustUseSessionStorage = true;
            }
            return mustUseSessionStorage
                ? window.sessionStorage
                : window.localStorage;
        };
        ApplicationStorage.isKeyBoundToLocalStorage = function (itemKey) {
            return Commerce.ArrayExtensions.hasElement(ApplicationStorage.LOCALSTORAGE_BOUNDKEYS, itemKey);
        };
        ApplicationStorage.isKeyBoundToSessionStorage = function (itemKey) {
            return Commerce.ArrayExtensions.hasElement(ApplicationStorage.SESSIONSTORAGE_BOUNDKEYS, itemKey);
        };
        ApplicationStorage.getStorageKeyFromId = function (storageKeyId) {
            return ApplicationStorageIDs[storageKeyId];
        };
        ApplicationStorage.loadConfiguration = function () {
            if (ApplicationStorage.useInMemoryStorage == null) {
                var deviceConfigurationStorageKey = ApplicationStorage.getStorageKeyFromId(ApplicationStorageIDs.DEVICE_CONFIGURATION_KEY);
                var deviceConfiguration = JSON.parse(window.localStorage.getItem(deviceConfigurationStorageKey));
                if (deviceConfiguration != null && deviceConfiguration.UseInMemoryDeviceDataStorage != null) {
                    ApplicationStorage.useInMemoryStorage = deviceConfiguration.UseInMemoryDeviceDataStorage;
                }
            }
        };
        ApplicationStorage.setItemOnStorage = function (storage, storageKey, itemValue) {
            try {
                storage.setItem(storageKey, itemValue);
            }
            catch (exception) {
                var itemSavedSuccessfully_1 = false;
                if (exception.name === "QuotaExceededError" ||
                    exception.name === "NS_ERROR_DOM_QUOTA_REACHED") {
                    Commerce.RetailLogger.coreApplicationStorageSetItemFailure(storageKey, exception.message);
                    try {
                        ApplicationStorage.nonEssentialDataFilterMap.forEach(function (key, dataFilter) {
                            var originalData;
                            var isKeyOfItemToSet = storageKey === key;
                            if (isKeyOfItemToSet) {
                                originalData = itemValue;
                            }
                            else {
                                originalData = storage.getItem(key);
                            }
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(originalData)) {
                                var essentialData = dataFilter(originalData);
                                storage.setItem(key, essentialData);
                                itemSavedSuccessfully_1 = itemSavedSuccessfully_1 || isKeyOfItemToSet;
                            }
                        });
                        if (!itemSavedSuccessfully_1) {
                            storage.setItem(storageKey, itemValue);
                            itemSavedSuccessfully_1 = true;
                        }
                    }
                    catch (recoveryException) {
                        Commerce.RetailLogger.coreApplicationStorageSetItemFailureRecoveryUnsuccessful(storageKey, recoveryException.message);
                    }
                }
                if (!itemSavedSuccessfully_1) {
                    throw exception;
                }
            }
        };
        ApplicationStorage.nonEssentialDataFilterMap = new Commerce.Dictionary();
        ApplicationStorage.useInMemoryStorage = null;
        ApplicationStorage.LOCALSTORAGE_BOUNDKEYS = [
            ApplicationStorageIDs.RETAIL_SERVER_URL,
            ApplicationStorageIDs.CART_KEY,
            ApplicationStorageIDs.FIRST_TIME_USE,
            ApplicationStorageIDs.BUBBLE_TOUR_DISABLED,
            ApplicationStorageIDs.VIDEO_TUTORIAL_DISABLED,
            ApplicationStorageIDs.CLOUD_SESSION_ID,
            ApplicationStorageIDs.DEVICE_ID_KEY,
            ApplicationStorageIDs.REGISTER_ID_KEY,
            ApplicationStorageIDs.TENANT_ID,
            ApplicationStorageIDs.ENVIRONMENT_CONFIGURATION_KEY,
            ApplicationStorageIDs.DEVICE_ACTIVATION_COMPLETED,
            ApplicationStorageIDs.AAD_LOGON_IN_PROCESS_KEY,
            ApplicationStorageIDs.RETAILSERVER_TENANT_ID,
            ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS,
            ApplicationStorageIDs.HARDWARE_STATION_FEATURE_ENABLE,
            ApplicationStorageIDs.CASH_DRAWER_OPEN_STATUS,
            ApplicationStorageIDs.PAYMENT_TRANSACTION_REFERENCE_DATA
        ];
        ApplicationStorage.SESSIONSTORAGE_BOUNDKEYS = [
            ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED,
            ApplicationStorageIDs.AAD_LOGOFF_INITIATED
        ];
        return ApplicationStorage;
    }());
    Commerce.ApplicationStorage = ApplicationStorage;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AsyncLazy = (function () {
        function AsyncLazy(asyncValueFactory) {
            Commerce.ThrowIf.argumentIsNotFunction(asyncValueFactory, "asyncValueFactory");
            this._asyncValueFactory = asyncValueFactory;
        }
        Object.defineProperty(AsyncLazy.prototype, "value", {
            get: function () {
                var _this = this;
                if (!this._asyncValue) {
                    this._asyncValue = this._executeFactoryAsync()
                        .done(function (result) {
                        _this._asyncValueFactory = null;
                    }).fail(function () {
                        _this._asyncValue = null;
                    });
                }
                return this._asyncValue;
            },
            enumerable: true,
            configurable: true
        });
        AsyncLazy.prototype._executeFactoryAsync = function () {
            var _this = this;
            var asyncResult = new Commerce.AsyncResult();
            Commerce.Host.instance.timers.setImmediate(function () {
                asyncResult.resolveOrRejectOn(_this._asyncValueFactory());
            });
            return asyncResult;
        };
        return AsyncLazy;
    }());
    Commerce.AsyncLazy = AsyncLazy;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var Context = Commerce.Proxy.Context;
    var AsyncService = (function () {
        function AsyncService() {
            this.sqlCommandTimeout = 3600;
            this.intervalMultiplier = 60000;
            this.hasUploadData = false;
            this.uploadIntervalWithPendingData = 1000;
            this._asyncServiceManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAsyncServiceManagerName);
            AsyncService.downloadIntervalInMillisecond = Commerce.Config.defaultOfflineDownloadIntervalInMilliseconds;
            AsyncService.uploadIntervalInMillisecond = Commerce.Config.defaultOfflineUploadIntervalInMilliseconds;
            this.offlineDatabaseConnectionString = Commerce.Config.offlineDatabase;
            this.sqlCommandTimeout = Commerce.Config.sqlCommandTimeout;
        }
        Object.defineProperty(AsyncService, "instance", {
            get: function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(AsyncService._instance)) {
                    AsyncService._instance = new AsyncService();
                }
                return AsyncService._instance;
            },
            enumerable: true,
            configurable: true
        });
        AsyncService.prototype.execute = function () {
            function CDXDownload() {
                var asyncService = Commerce.AsyncService.instance;
                asyncService.executeDownload();
            }
            Commerce.Session.instance.offlineParameters.syncDownloadOfflineData = setTimeout(CDXDownload, AsyncService.initialIntervalInMillisecond);
            function CDXUpload() {
                var asyncService = Commerce.AsyncService.instance;
                asyncService.executeUpload();
            }
            Commerce.Session.instance.offlineParameters.syncUploadOfflineData = setTimeout(CDXUpload, AsyncService.initialIntervalInMillisecond);
        };
        AsyncService.prototype.executeDownload = function () {
            var _this = this;
            var downloadSessions;
            var dataStoreName;
            var terminalId = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY);
            var hasInitialized = true;
            var fullPackageRequested = false;
            if (AsyncService.syncingDownloadData === true) {
                return Commerce.VoidAsyncResult.createResolved();
            }
            if (terminalId === null) {
                Commerce.RetailLogger.viewModelGetTerminalIdFailed();
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
            }
            AsyncService.syncingDownloadData = true;
            Commerce.Session.instance.offlineSyncing(true);
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                return _this._asyncServiceManager.getTerminalDataStoreNameAsync(terminalId)
                    .done(function (result) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        dataStoreName = result;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(result.value)) {
                        dataStoreName = result.value;
                    }
                    else {
                        dataStoreName = result;
                    }
                })
                    .fail(function () {
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        Commerce.RetailLogger.viewModelGetTerminalDataStoreNameFailed(terminalId);
                    }
                });
            });
            asyncQueue.enqueue(function () {
                if (!dataStoreName || dataStoreName.length === 0) {
                    Commerce.Session.instance.offlineParameters.offlineModeDisabled = true;
                    return Commerce.VoidAsyncResult.
                        createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_OFFLINE_NOT_ENABLED_ON_TERMINAL)]);
                }
                else {
                    if (Commerce.Session.instance.offlineParameters.offlineModeDisabled) {
                        Commerce.Session.instance.offlineParameters.offlineModeDisabled = false;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }
            });
            asyncQueue.enqueue(function () {
                return _this._asyncServiceManager.getDownloadIntervalAsync(dataStoreName)
                    .done(function (result) {
                    if (parseInt(result, 10) !== 0) {
                        AsyncService.downloadIntervalInMillisecond = parseInt(result, 10) * _this.intervalMultiplier;
                    }
                })
                    .fail(function () {
                    Commerce.RetailLogger.viewModelGetDownloadIntervalFailed(dataStoreName);
                });
            });
            asyncQueue.enqueue(function () {
                if (!Commerce.Session.instance.offlineParameters.offlineDatabaseUpgradeChecked) {
                    var asyncResult_1 = new Commerce.AsyncResult();
                    try {
                        Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest.
                            checkInitialFullPackageRequiredAsync(_this.offlineDatabaseConnectionString)
                            .done(function (result) {
                            hasInitialized = result.hasInitialized;
                            if (!result.requestSuccess) {
                                Commerce.RetailLogger.viewModelCheckIfInitialFullPackageRequiredFailed(result.statusText);
                                asyncResult_1.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAILED_TO_CHECK_IF_INITIAL_PACKAGE_REQUIRED)]);
                            }
                            else {
                                Commerce.Session.instance.offlineParameters.offlineDatabaseUpgradeChecked = true;
                                asyncResult_1.resolve(result.statusText);
                            }
                        }, function (error) {
                            Commerce.RetailLogger.viewModelCheckInitialFullPackageRequiredFailed(error.message);
                            asyncResult_1.reject(Context.ErrorParser.parseErrorMessage(error));
                        });
                    }
                    catch (error) {
                        Commerce.RetailLogger.viewModelCheckInitialFullPackageRequiredFailed(error.message);
                        asyncResult_1.reject(Context.ErrorParser.parseErrorMessage(error));
                    }
                    return asyncResult_1;
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            });
            asyncQueue.enqueue(function () {
                if (!hasInitialized) {
                    return _this._asyncServiceManager.getInitialDownloadSessionsAsync(dataStoreName)
                        .done(function (result) {
                        downloadSessions = result;
                        fullPackageRequested = true;
                    })
                        .fail(function (errors) {
                        Commerce.RetailLogger.viewModelGetInitialDownloadSessionsFailed(dataStoreName, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    });
                }
                else {
                    return _this._asyncServiceManager.getDownloadSessionsAsync(dataStoreName)
                        .done(function (result) {
                        downloadSessions = result;
                    })
                        .fail(function (errors) {
                        Commerce.RetailLogger.viewModelGetDownloadSessionsFailed(dataStoreName, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                    });
                }
            });
            asyncQueue.enqueue(function () {
                if (fullPackageRequested) {
                    var asyncResult_2 = new Commerce.AsyncResult();
                    try {
                        Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest.updateFullPackageIsRequestedAsync(_this.offlineDatabaseConnectionString)
                            .done(function (result) {
                            if (!result.requestSuccess) {
                                Commerce.RetailLogger.viewModelUpdateFullPackageIsRequestedFailed(result.statusText);
                                asyncResult_2.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAILED_TO_UPDATE_FULL_PACKAGE_IS_REQUESTED_INDICATOR)]);
                            }
                            else {
                                fullPackageRequested = false;
                                asyncResult_2.resolve(result.statusText);
                            }
                        }, function (error) {
                            Commerce.RetailLogger.viewModelUpdateFullPackageIsRequestedFailed(error.message);
                            asyncResult_2.reject(Context.ErrorParser.parseErrorMessage(error));
                        });
                    }
                    catch (error) {
                        Commerce.RetailLogger.viewModelUpdateFullPackageIsRequestedFailed(error.message);
                        asyncResult_2.reject(Context.ErrorParser.parseErrorMessage(error));
                    }
                    return asyncResult_2;
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            });
            asyncQueue.enqueue(function () {
                if (Commerce.ArrayExtensions.hasElements(downloadSessions)) {
                    Commerce.Session.instance.pendingDownloadSessionCount(downloadSessions.length);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    if (Commerce.Session.instance.pendingDownloadSessionCount() !== 0) {
                        Commerce.Session.instance.pendingDownloadSessionCount(0);
                    }
                }
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_ZERO_DOWNLOAD_SESSION)]);
            });
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest
                    .deleteExpiredSessionsAsync(_this.offlineDatabaseConnectionString)
                    .done(function (result) {
                    if (!result.requestSuccess) {
                        Commerce.RetailLogger.viewModelDeleteExpiredSessionFailed(result.statusText);
                    }
                    asyncResult.resolve(result.statusText);
                });
                return asyncResult;
            });
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.VoidAsyncResult();
                var current = _this;
                Commerce.Utilities.AsyncExecutionHelper.forEachAsync(downloadSessions, function (downloadSession, next) {
                    var workingFolder;
                    var fileName;
                    var uri;
                    downloadSession.DataStoreName = dataStoreName;
                    downloadSession.StatusValue = Commerce.Proxy.Entities.DownloadSessionStatus.Requested;
                    var requestDate = new Date();
                    var requestTime = requestDate.getUTCFullYear() + "-" + (requestDate.getUTCMonth() + 1) + "-" + requestDate.getUTCDate();
                    requestTime += " " + requestDate.getUTCHours() + ":" + requestDate.getUTCMinutes() + ":" + requestDate.getUTCSeconds();
                    downloadSession.DateRequested = requestTime;
                    var innerQueue = new Commerce.AsyncQueue();
                    innerQueue.enqueue(function () {
                        return current._asyncServiceManager.getDownloadLinkAsync(dataStoreName, downloadSession.Id)
                            .done(function (result) {
                            uri = result;
                        })
                            .fail(function () {
                            Commerce.RetailLogger.viewModelGetDownloadLinkFailed(dataStoreName, downloadSession.Id);
                        });
                    });
                    innerQueue.enqueue(function () {
                        if (uri === "") {
                            downloadSession.StatusValue = Commerce.Proxy.Entities.DownloadSessionStatus.DownloadFailed;
                            downloadSession.Message = Commerce.ViewModelAdapter.getResourceString("string_29051");
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                    innerQueue.enqueue(function () {
                        if (downloadSession.StatusValue !== Commerce.Proxy.Entities.DownloadSessionStatus.DownloadFailed) {
                            var asyncResult_3 = new Commerce.AsyncResult();
                            try {
                                Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest.downloadFileAsync(uri, downloadSession.Checksum)
                                    .done(function (result) {
                                    if (result.requestSuccess === false) {
                                        Commerce.RetailLogger.viewModelDownloadFileFailed(result.statusText);
                                        downloadSession.StatusValue = Commerce.Proxy.Entities.DownloadSessionStatus.DownloadFailed;
                                        downloadSession.Message = result.statusText;
                                        asyncResult_3.resolve(result.statusText);
                                    }
                                    else {
                                        workingFolder = result.workingFolder;
                                        fileName = result.fileName;
                                        downloadSession.StatusValue = Commerce.Proxy.Entities.DownloadSessionStatus.Downloaded;
                                        var downloadDate = new Date();
                                        var utcSeconds = (downloadDate.getUTCSeconds() < 10) ?
                                            ("0" + downloadDate.getUTCSeconds()) : downloadDate.getUTCSeconds().toString();
                                        var downloadTime = downloadDate.getUTCFullYear() +
                                            "-" + (downloadDate.getUTCMonth() + 1) + "-" + downloadDate.getUTCDate();
                                        downloadTime += " " + downloadDate.getUTCHours() + ":" +
                                            downloadDate.getUTCMinutes() + ":" + utcSeconds;
                                        downloadSession.DateDownloaded = downloadTime;
                                        asyncResult_3.resolve(result.statusText);
                                    }
                                });
                            }
                            catch (error) {
                                Commerce.RetailLogger.viewModelDownloadFileBrokerRequestFailed(error.message);
                                asyncResult_3.reject(Context.ErrorParser.parseErrorMessage(error));
                            }
                            return asyncResult_3;
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    innerQueue.enqueue(function () {
                        if (downloadSession.StatusValue !== Commerce.Proxy.Entities.DownloadSessionStatus.DownloadFailed) {
                            var asyncResult_4 = new Commerce.AsyncResult();
                            try {
                                Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest.
                                    applyFileToOfflineDbAsync(current.offlineDatabaseConnectionString, workingFolder, fileName, terminalId, current.sqlCommandTimeout)
                                    .done(function (result) {
                                    if (!result.requestSuccess) {
                                        Commerce.RetailLogger.viewModelApplyToOfflineDbFailed(result.statusText);
                                        downloadSession.StatusValue = Commerce.Proxy.Entities.DownloadSessionStatus.ApplyFailed;
                                        downloadSession.Message = result.statusText;
                                        asyncResult_4.resolve(result.statusText);
                                    }
                                    else {
                                        downloadSession.StatusValue = Commerce.Proxy.Entities.DownloadSessionStatus.Applied;
                                        downloadSession.RowsAffected = result.rowsAffected;
                                        asyncResult_4.resolve(result.statusText);
                                    }
                                });
                            }
                            catch (error) {
                                Commerce.RetailLogger.viewModelApplyToOfflineDbBrokerRequestFailed(error.message);
                                asyncResult_4.reject(Context.ErrorParser.parseErrorMessage(error));
                            }
                            return asyncResult_4;
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    innerQueue.enqueue(function () {
                        var asyncResult = new Commerce.AsyncResult();
                        try {
                            return current.updateDownloadSessionStatus(downloadSession, terminalId)
                                .done(function (result) {
                                if (!result.requestSuccess) {
                                    Commerce.RetailLogger.viewModelUpdateDownloadSessionStatusBrokerRequestFailed(result.statusText);
                                    asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAIL_UPDATE_DOWNLOAD_SESSION_STATUS)]);
                                }
                                else {
                                    asyncResult.resolve(result.statusText);
                                }
                            });
                        }
                        catch (error) {
                            asyncResult.reject(Context.ErrorParser.parseErrorMessage(error));
                        }
                        return asyncResult;
                    });
                    innerQueue.enqueue(function () {
                        if (uri !== "") {
                            return current._asyncServiceManager.updateDownloadSessionAsync(downloadSession)
                                .fail(function (error) {
                                Commerce.RetailLogger.viewModelUpdateDownloadSessionStatusFailed();
                            });
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    innerQueue.run()
                        .always(function () {
                        var pendingDownloadSessions = function (downloadSession) {
                            return downloadSession.StatusValue !== 4;
                        };
                        Commerce.Session.instance.pendingDownloadSessionCount(downloadSessions.filter(pendingDownloadSessions).length);
                        next();
                    });
                }, function () { return asyncResult.resolve(); });
                return asyncResult;
            });
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                try {
                    Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest.stripMasterData(_this.offlineDatabaseConnectionString, dataStoreName, _this.sqlCommandTimeout)
                        .done(function (result) {
                        if (!result.requestSuccess) {
                            Commerce.RetailLogger.stripMasterDataFailed(dataStoreName, result.statusText);
                        }
                        asyncResult.resolve(result.statusText);
                    });
                }
                catch (error) {
                    Commerce.RetailLogger.stripMasterDataBrokerRequestFailed(dataStoreName);
                    asyncResult.reject(Context.ErrorParser.parseErrorMessage(error));
                }
                return asyncResult;
            });
            return asyncQueue.run()
                .always(function () {
                AsyncService.syncingDownloadData = false;
                if (AsyncService.syncingUploadData !== true) {
                    Commerce.Session.instance.offlineSyncing(false);
                }
                if (!Commerce.Session.instance.offlineParameters.offlineModeDisabled) {
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncDownloadOfflineData);
                    Commerce.Session.instance.offlineParameters.syncDownloadOfflineData =
                        setTimeout(CDXDownload, AsyncService.downloadIntervalInMillisecond);
                }
                else {
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncDownloadOfflineData);
                }
            }).map(function (result) { return void 0; });
            function CDXDownload() {
                var asyncServiceViewModel = new Commerce.AsyncService();
                asyncServiceViewModel.executeDownload();
            }
        };
        AsyncService.prototype.updateDownloadSessionStatus = function (downloadSession, terminalId) {
            var asyncClientDownloadSession = new Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientDownloadSession();
            asyncClientDownloadSession.id = downloadSession.Id;
            asyncClientDownloadSession.checksum = downloadSession.Checksum;
            asyncClientDownloadSession.fileSize = downloadSession.FileSize;
            asyncClientDownloadSession.status = downloadSession.StatusValue;
            asyncClientDownloadSession.jobId = downloadSession.JobId;
            asyncClientDownloadSession.jobDescription = downloadSession.JobDescription;
            asyncClientDownloadSession.dateRequested = downloadSession.DateRequested;
            asyncClientDownloadSession.dateDownloaded = downloadSession.DateDownloaded;
            asyncClientDownloadSession.message = downloadSession.Message;
            return Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest
                .updateDownloadSessionStatusAsync(this.offlineDatabaseConnectionString, terminalId, asyncClientDownloadSession);
        };
        AsyncService.prototype.startProcessDataPackage = function (serializedCDXDataPackage) {
            if (Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest
                    .processDataPackageAsync(serializedCDXDataPackage, this.offlineDatabaseConnectionString, this.sqlCommandTimeout)
                    .done(function (result) {
                    if (!result.requestSuccess) {
                        Commerce.RetailLogger.viewModelProcessCDXDataPackageFailed(result.statusText);
                    }
                });
            }
        };
        AsyncService.prototype.executeUpload = function () {
            return this.executeUploadImpl(false);
        };
        AsyncService.prototype.executeUploadWithManualExecuted = function () {
            return this.executeUploadImpl(true);
        };
        AsyncService.prototype.getOfflineSyncStatsAsync = function (offlineDatabaseConnectionString, terminalId) {
            var asyncResult = new Commerce.AsyncResult();
            Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest.getOfflineSyncStatsAsync(offlineDatabaseConnectionString, terminalId)
                .done(function (result) {
                if (result.requestSuccess) {
                    var downloadSessions = [];
                    var uploadSessions = [];
                    var lastSyncDateTime = Commerce.DateExtensions.getMinDate();
                    var offlineSyncStats = result.offlineSyncStats;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(offlineSyncStats) && !Commerce.NumberExtensions.isNullNaNOrZero(offlineSyncStats.length)) {
                        for (var i = 0; i < offlineSyncStats.length; i++) {
                            var line = offlineSyncStats[i];
                            var asyncClientOfflineSyncStatsLine = new Commerce.Proxy.Entities.OfflineSyncStatsLineClass();
                            asyncClientOfflineSyncStatsLine.JobDescription = line.jobDescription;
                            asyncClientOfflineSyncStatsLine.Status = line.status;
                            var utcDate = line.lastSyncDateTime;
                            asyncClientOfflineSyncStatsLine.LastSyncDateTime
                                = new Date(utcDate.getTime() - utcDate.getTimezoneOffset() * 60 * 1000);
                            asyncClientOfflineSyncStatsLine.FileSize = line.fileSize;
                            asyncClientOfflineSyncStatsLine.IsUploadJob = Boolean(line.isUploadJob);
                            if (!asyncClientOfflineSyncStatsLine.IsUploadJob) {
                                downloadSessions.push(asyncClientOfflineSyncStatsLine);
                            }
                            else {
                                uploadSessions.push(asyncClientOfflineSyncStatsLine);
                            }
                            if (asyncClientOfflineSyncStatsLine.LastSyncDateTime > lastSyncDateTime) {
                                lastSyncDateTime = asyncClientOfflineSyncStatsLine.LastSyncDateTime;
                            }
                        }
                    }
                    var status_1 = {
                        lastSyncDateTime: lastSyncDateTime,
                        uploadSessions: uploadSessions,
                        downloadSessions: downloadSessions
                    };
                    asyncResult.resolve(status_1);
                }
                else {
                    asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAILED_TO_GET_OFFLINE_SYNC_STATS)]);
                }
            }, function (error) {
                asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAILED_TO_GET_OFFLINE_SYNC_STATS)]);
            });
            return asyncResult;
        };
        AsyncService.prototype.executeUploadImpl = function (isManualExecuted) {
            var _this = this;
            var dataStoreName;
            var asyncResult = new Commerce.AsyncResult(null);
            var uploadJobDefinitions;
            var uploadTransactionData;
            var uploadSuccess;
            var current = this;
            var terminalId = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY);
            if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online && !isManualExecuted) {
                return Commerce.VoidAsyncResult.createResolved();
            }
            if (AsyncService.syncingUploadData === true) {
                return Commerce.VoidAsyncResult.createResolved();
            }
            if (terminalId === null) {
                Commerce.RetailLogger.viewModelGetTerminalIdFailed();
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
            }
            AsyncService.syncingUploadData = true;
            Commerce.Session.instance.offlineSyncing(true);
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                return _this._asyncServiceManager.getTerminalDataStoreNameAsync(terminalId)
                    .done(function (result) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                        dataStoreName = result;
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(result.value)) {
                        dataStoreName = result.value;
                    }
                    else {
                        dataStoreName = result;
                    }
                })
                    .fail(function () {
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        Commerce.RetailLogger.viewModelGetTerminalDataStoreNameFailed(terminalId);
                    }
                });
            });
            asyncQueue.enqueue(function () {
                if (!dataStoreName || dataStoreName.length === 0) {
                    Commerce.Session.instance.offlineParameters.offlineModeDisabled = true;
                    return Commerce.VoidAsyncResult.
                        createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_OFFLINE_NOT_ENABLED_ON_TERMINAL)]);
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            });
            asyncQueue.enqueue(function () {
                return _this._asyncServiceManager.getUploadIntervalAsync(dataStoreName)
                    .done(function (result) {
                    if (parseInt(result, 10) !== 0) {
                        AsyncService.uploadIntervalInMillisecond = parseInt(result, 10) * _this.intervalMultiplier;
                    }
                })
                    .fail(function (error) {
                    Commerce.RetailLogger.viewModelGetUploadIntervalFailed(dataStoreName);
                    asyncResult.reject(error);
                });
            });
            asyncQueue.enqueue(function () {
                return _this._asyncServiceManager.getUploadJobDefinitionsAsync(dataStoreName)
                    .done(function (result) {
                    uploadJobDefinitions = result;
                })
                    .fail(function () {
                    Commerce.RetailLogger.viewModelGetUploadJobDefinitionsFailed(dataStoreName);
                });
            });
            asyncQueue.enqueue(function () {
                if (Commerce.ArrayExtensions.hasElements(uploadJobDefinitions)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return Commerce.VoidAsyncResult.
                    createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_EMPTY_UPLOAD_JOB_DEFINITION)]);
            });
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest.
                    loadTransactionDataAsync(_this.offlineDatabaseConnectionString, uploadJobDefinitions, terminalId)
                    .done(function (result) {
                    uploadTransactionData = result.offlineTransactionDataList;
                    if (uploadTransactionData.length === 0) {
                        current.hasUploadData = false;
                        asyncResult.reject([new Commerce.Proxy.Entities.
                                Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_NO_TRANSACTION_DATA)]);
                    }
                    else if (!result.requestSuccess) {
                        current.hasUploadData = false;
                        Commerce.RetailLogger.viewModelLoadUploadTransactionsFailed(result.statusText);
                        asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_CANNOT_LOAD_OFFLINE_TRANSACTION_DATA)]);
                    }
                    else {
                        current.hasUploadData = true;
                        asyncResult.resolve(result.statusText);
                    }
                });
                return asyncResult;
            });
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.VoidAsyncResult();
                _this._asyncServiceManager.syncOfflineTransactionAsync(uploadTransactionData)
                    .done(function (result) {
                    uploadSuccess = result;
                    asyncResult.resolve();
                })
                    .fail(function () {
                    Commerce.RetailLogger.viewModelSyncOfflineTransactionsFailed();
                    uploadSuccess = false;
                    asyncResult.resolve();
                });
                return asyncResult;
            });
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                if (uploadSuccess === true) {
                    Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest
                        .purgeOfflineTransactionsAsync(_this.offlineDatabaseConnectionString, uploadJobDefinitions)
                        .done(function (result) {
                        if (!result.requestSuccess) {
                            Commerce.RetailLogger.viewModelPurgeOfflineTransactionsFailed(result.statusText);
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAIL_PURGE_OFFLINE_TRANSACTION_DATA)]);
                        }
                        else {
                            asyncResult.resolve(result.statusText);
                        }
                    });
                }
                else {
                    Microsoft.Dynamics.Commerce.ClientBroker.AsyncClientRequest
                        .updateUploadFailedStatusAsync(_this.offlineDatabaseConnectionString)
                        .done(function (result) {
                        if (!result.requestSuccess) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAIL_UPDATE_UPLOAD_FAILED_STATUS)]);
                        }
                        else {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ASYNC_CLIENT_FAIL_UPLOAD_DATA)]);
                        }
                    });
                }
                return asyncResult;
            });
            asyncQueue.run().done(function () {
                AsyncService.syncingUploadData = false;
                if (AsyncService.syncingDownloadData !== true) {
                    Commerce.Session.instance.offlineSyncing(false);
                }
                if (!Commerce.Session.instance.offlineParameters.offlineModeDisabled) {
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncUploadOfflineData);
                    if (current.hasUploadData) {
                        Commerce.Session.instance.offlineParameters.syncUploadOfflineData =
                            setTimeout(CDXUpload, _this.uploadIntervalWithPendingData);
                    }
                    else {
                        Commerce.Session.instance.offlineParameters.syncUploadOfflineData =
                            setTimeout(CDXUpload, AsyncService.uploadIntervalInMillisecond);
                    }
                }
                else {
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncUploadOfflineData);
                }
            }).fail(function () {
                AsyncService.syncingUploadData = false;
                if (AsyncService.syncingDownloadData !== true) {
                    Commerce.Session.instance.offlineSyncing(false);
                }
                if (!Commerce.Session.instance.offlineParameters.offlineModeDisabled) {
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncUploadOfflineData);
                    Commerce.Session.instance.offlineParameters.syncUploadOfflineData =
                        setTimeout(CDXUpload, AsyncService.uploadIntervalInMillisecond);
                }
                else {
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncUploadOfflineData);
                }
            });
            function CDXUpload() {
                var asyncServiceViewModel = new Commerce.AsyncService();
                asyncServiceViewModel.executeUpload();
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        AsyncService.downloadIntervalInMillisecond = 60000;
        AsyncService.uploadIntervalInMillisecond = 60000;
        AsyncService.initialIntervalInMillisecond = 60000;
        AsyncService._instance = null;
        AsyncService.syncingDownloadData = false;
        AsyncService.syncingUploadData = false;
        return AsyncService;
    }());
    Commerce.AsyncService = AsyncService;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var BubbleHelper = (function () {
        function BubbleHelper() {
        }
        BubbleHelper.addAttribute = function ($element, value) {
            $element.attr(BubbleHelper.DATA_AX_BUBBLE_ATTRIBUTE, Commerce.EscapingHelper.escapeHtmlAttribute(value));
        };
        BubbleHelper.formatAttribute = function ($element, object) {
            var params = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                params[_i - 2] = arguments[_i];
            }
            BubbleHelper.addAttribute($element, Commerce.StringExtensions.format.apply(Commerce.StringExtensions, [object].concat(params)));
        };
        BubbleHelper.DATA_AX_BUBBLE_ATTRIBUTE = "data-ax-bubble";
        return BubbleHelper;
    }());
    Commerce.BubbleHelper = BubbleHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CancelableSelectionHandler = (function () {
        function CancelableSelectionHandler(onSelectionModeCompletedCallback, onSelectionModeCanceledCallback, onSelectionAttemptAsyncCallback) {
            Commerce.ThrowIf.argumentIsNotFunction(onSelectionModeCompletedCallback, "onSelectionModeCompleted");
            Commerce.ThrowIf.argumentIsNotFunction(onSelectionModeCanceledCallback, "onSelectionModeCanceledCallback");
            this._onSelectionModeCompletedCallback = onSelectionModeCompletedCallback;
            this._onSelectionMadeAsyncCallback = onSelectionAttemptAsyncCallback;
            this._onSelectionModeCanceled = onSelectionModeCanceledCallback;
            this._isAsyncSelectionInProgress = false;
            this._wasSelectionModeExited = false;
        }
        CancelableSelectionHandler.prototype.select = function (selection, onSelectionAttemptAsyncCallbackCanceled, onSelectionAttemptAsyncCallbackFailed) {
            var _this = this;
            if (this._isAsyncSelectionInProgress || this._wasSelectionModeExited) {
                return;
            }
            try {
                if (Commerce.ObjectExtensions.isFunction(this._onSelectionMadeAsyncCallback)) {
                    this._isAsyncSelectionInProgress = true;
                    var executeSelectionMadeCallback = function () {
                        return _this._onSelectionMadeAsyncCallback(selection);
                    };
                    Commerce.ViewModelAdapter.disableNavigationDuringAsyncExecution(executeSelectionMadeCallback)
                        .done(function (selectionResult) {
                        if (!selectionResult.canceled) {
                            _this._onSelectionModeCompletedCallback(selection);
                            _this._clearCallbacksAndExitSelectionMode();
                        }
                        else if (selectionResult.canceled && Commerce.ObjectExtensions.isFunction(onSelectionAttemptAsyncCallbackCanceled)) {
                            onSelectionAttemptAsyncCallbackCanceled();
                        }
                    }).fail(function (errors) {
                        if (Commerce.ObjectExtensions.isFunction(onSelectionAttemptAsyncCallbackFailed)) {
                            onSelectionAttemptAsyncCallbackFailed(errors);
                        }
                    }).always(function () {
                        _this._isAsyncSelectionInProgress = false;
                    });
                }
                else {
                    this._onSelectionModeCompletedCallback(selection);
                    this._clearCallbacksAndExitSelectionMode();
                }
            }
            catch (ex) {
                Commerce.RetailLogger.coreCancelableSelectionHandlerExceptionDuringSelectionAttempt(ex.toString());
                this._isAsyncSelectionInProgress = false;
                if (Commerce.ObjectExtensions.isFunction(onSelectionAttemptAsyncCallbackFailed)) {
                    var applicationError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR);
                    onSelectionAttemptAsyncCallbackFailed([applicationError]);
                }
            }
        };
        CancelableSelectionHandler.prototype.cancel = function () {
            if (this._isAsyncSelectionInProgress || this._wasSelectionModeExited) {
                return;
            }
            if (Commerce.ObjectExtensions.isFunction(this._onSelectionModeCanceled)) {
                this._onSelectionModeCanceled();
                this._clearCallbacksAndExitSelectionMode();
            }
        };
        CancelableSelectionHandler.prototype._clearCallbacksAndExitSelectionMode = function () {
            this._wasSelectionModeExited = true;
            this._onSelectionModeCompletedCallback = null;
            this._onSelectionMadeAsyncCallback = null;
            this._onSelectionModeCanceled = null;
        };
        return CancelableSelectionHandler;
    }());
    Commerce.CancelableSelectionHandler = CancelableSelectionHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var StoreButtonControlType;
            (function (StoreButtonControlType) {
                StoreButtonControlType[StoreButtonControlType["Unknown"] = 0] = "Unknown";
                StoreButtonControlType[StoreButtonControlType["CurrentStore"] = 1] = "CurrentStore";
                StoreButtonControlType[StoreButtonControlType["FindStore"] = 2] = "FindStore";
                StoreButtonControlType[StoreButtonControlType["AllStores"] = 3] = "AllStores";
                StoreButtonControlType[StoreButtonControlType["Warehouse"] = 4] = "Warehouse";
            })(StoreButtonControlType = Entities.StoreButtonControlType || (Entities.StoreButtonControlType = {}));
            var StoreLocationWrapper = (function () {
                function StoreLocationWrapper(storeLocation) {
                    this.store = storeLocation;
                    this.storeIdentifier = "1";
                    this.distanceUnit = StoreLocationWrapper.constructDistanceUnit(this.store);
                    this.distanceString = StoreLocationWrapper.constructDistanceString(this.store);
                    this.orgUnit = StoreLocationWrapper.convertToOrgUnit(this.store);
                }
                StoreLocationWrapper.constructDistanceString = function (storeLocation) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(storeLocation.Distance)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return Commerce.NumberExtensions.roundToNDigits(storeLocation.Distance, 1) + Commerce.StringExtensions.EMPTY;
                };
                StoreLocationWrapper.constructDistanceUnit = function (storeLocation) {
                    return Commerce.ViewModelAdapter.getResourceString("string_2527");
                };
                StoreLocationWrapper.convertToOrgUnitLocation = function (orgUnit) {
                    var storeUnitLocation = new Proxy.Entities.OrgUnitLocationClass();
                    storeUnitLocation.OrgUnitName = orgUnit.OrgUnitName;
                    storeUnitLocation.OrgUnitNumber = orgUnit.OrgUnitNumber;
                    storeUnitLocation.ChannelId = orgUnit.RecordId;
                    storeUnitLocation.InventoryLocationId = orgUnit.InventoryLocationId;
                    storeUnitLocation.Address = orgUnit.OrgUnitFullAddress;
                    storeUnitLocation.BuildingCompliment = orgUnit.OrgUnitAddress.BuildingCompliment;
                    storeUnitLocation.City = orgUnit.OrgUnitAddress.City;
                    storeUnitLocation.Country = orgUnit.OrgUnitAddress.ThreeLetterISORegionName;
                    storeUnitLocation.County = orgUnit.OrgUnitAddress.County;
                    storeUnitLocation.CountyName = orgUnit.OrgUnitAddress.CountyName;
                    storeUnitLocation.DistrictName = orgUnit.OrgUnitAddress.DistrictName;
                    storeUnitLocation.Postbox = orgUnit.OrgUnitAddress.Postbox;
                    storeUnitLocation.State = orgUnit.OrgUnitAddress.State;
                    storeUnitLocation.StateName = orgUnit.OrgUnitAddress.StateName;
                    storeUnitLocation.Street = orgUnit.OrgUnitAddress.Street;
                    storeUnitLocation.StreetNumber = orgUnit.OrgUnitAddress.StreetNumber;
                    storeUnitLocation.Zip = orgUnit.OrgUnitAddress.ZipCode;
                    return storeUnitLocation;
                };
                StoreLocationWrapper.convertToOrgUnit = function (orgUnitLocation) {
                    var orgUnit = new Proxy.Entities.OrgUnitClass();
                    orgUnit.OrgUnitName = orgUnitLocation.OrgUnitName;
                    orgUnit.OrgUnitNumber = orgUnitLocation.OrgUnitNumber;
                    orgUnit.RecordId = orgUnitLocation.ChannelId;
                    orgUnit.InventoryLocationId = orgUnitLocation.InventoryLocationId;
                    orgUnit.OrgUnitAddress = new Proxy.Entities.AddressClass();
                    orgUnit.OrgUnitFullAddress = orgUnitLocation.Address;
                    orgUnit.OrgUnitAddress.BuildingCompliment = orgUnitLocation.BuildingCompliment;
                    orgUnit.OrgUnitAddress.City = orgUnitLocation.City;
                    orgUnit.OrgUnitAddress.ThreeLetterISORegionName = orgUnitLocation.Country;
                    orgUnit.OrgUnitAddress.County = orgUnitLocation.County;
                    orgUnit.OrgUnitAddress.CountyName = orgUnitLocation.CountyName;
                    orgUnit.OrgUnitAddress.DistrictName = orgUnitLocation.DistrictName;
                    orgUnit.OrgUnitAddress.Postbox = orgUnitLocation.Postbox;
                    orgUnit.OrgUnitAddress.State = orgUnitLocation.State;
                    orgUnit.OrgUnitAddress.StateName = orgUnitLocation.StateName;
                    orgUnit.OrgUnitAddress.Street = orgUnitLocation.Street;
                    orgUnit.OrgUnitAddress.StreetNumber = orgUnitLocation.StreetNumber;
                    orgUnit.OrgUnitAddress.ZipCode = orgUnitLocation.Zip;
                    return orgUnit;
                };
                return StoreLocationWrapper;
            }());
            Entities.StoreLocationWrapper = StoreLocationWrapper;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var AvailableShiftActions = (function () {
                function AvailableShiftActions() {
                    this.shouldSkipDialog = false;
                    this.dialogTitle = "";
                    this.reusableShifts = [];
                    this.suspendedShifts = [];
                    this.availableCashDrawers = [];
                }
                return AvailableShiftActions;
            }());
            Entities.AvailableShiftActions = AvailableShiftActions;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ConnectionAvailabilityStatus;
    (function (ConnectionAvailabilityStatus) {
        ConnectionAvailabilityStatus[ConnectionAvailabilityStatus["Unknown"] = 0] = "Unknown";
        ConnectionAvailabilityStatus[ConnectionAvailabilityStatus["NotEnabled"] = 1] = "NotEnabled";
        ConnectionAvailabilityStatus[ConnectionAvailabilityStatus["EnabledNotAvailable"] = 2] = "EnabledNotAvailable";
        ConnectionAvailabilityStatus[ConnectionAvailabilityStatus["Available"] = 3] = "Available";
    })(ConnectionAvailabilityStatus = Commerce.ConnectionAvailabilityStatus || (Commerce.ConnectionAvailabilityStatus = {}));
    var CartStateType;
    (function (CartStateType) {
        CartStateType[CartStateType["None"] = 0] = "None";
        CartStateType[CartStateType["Started"] = 1] = "Started";
        CartStateType[CartStateType["Updated"] = 2] = "Updated";
        CartStateType[CartStateType["Completed"] = 3] = "Completed";
        CartStateType[CartStateType["Reloaded"] = 4] = "Reloaded";
    })(CartStateType = Commerce.CartStateType || (Commerce.CartStateType = {}));
    var OfflineParameters = (function () {
        function OfflineParameters(syncDownloadOfflineData, syncUploadOfflineData, offlineModeDisabled, offlineDatabaseUpgradeChecked) {
            this.syncDownloadOfflineData = syncDownloadOfflineData;
            this.syncUploadOfflineData = syncUploadOfflineData;
            this.offlineModeDisabled = offlineModeDisabled;
            this.offlineDatabaseUpgradeChecked = offlineDatabaseUpgradeChecked;
        }
        return OfflineParameters;
    }());
    Commerce.OfflineParameters = OfflineParameters;
    var ErrorsDisplayedPerSession;
    (function (ErrorsDisplayedPerSession) {
        ErrorsDisplayedPerSession[ErrorsDisplayedPerSession["PaymentTerminalBeginTransaction"] = 0] = "PaymentTerminalBeginTransaction";
        ErrorsDisplayedPerSession[ErrorsDisplayedPerSession["CardPaymentBeginTransaction"] = 1] = "CardPaymentBeginTransaction";
        ErrorsDisplayedPerSession[ErrorsDisplayedPerSession["HardwareStationGeneralError"] = 2] = "HardwareStationGeneralError";
        ErrorsDisplayedPerSession[ErrorsDisplayedPerSession["NoActiveHardwareStationError"] = 3] = "NoActiveHardwareStationError";
    })(ErrorsDisplayedPerSession = Commerce.ErrorsDisplayedPerSession || (Commerce.ErrorsDisplayedPerSession = {}));
    var Session = (function () {
        function Session() {
            this.defaultCatalogImageFormat = "";
            this.showPaymentDeviceBeginTransactionError = true;
            this._connectionAvailabilityStatus = ConnectionAvailabilityStatus.Unknown;
            this._isOfflineAvailable = false;
            this._customer = { AccountNumber: "" };
            this._customerPrimaryAddress = {};
            this._productCatalogStore = {};
            this._errorDisplayStatesPerSession = new Commerce.Dictionary();
            this._taskRecorderState = Commerce.TaskRecorder.TaskRecorderState.None;
            this.createSession();
            this.resetSession();
        }
        Object.defineProperty(Session, "instance", {
            get: function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(Session._instance)) {
                    Session._instance = new Session();
                }
                return Session._instance;
            },
            enumerable: true,
            configurable: true
        });
        Session.prototype.resetSession = function () {
            var _this = this;
            this.userName("");
            this.picture("");
            this.shiftId(0);
            this.shiftTerminalId("");
            this.terminalId("");
            var oldIsLoggedOn = this.isLoggedOn;
            var oldCurrentEmployee = this._employee;
            this._employee = null;
            Commerce.EventProxy.Instance.raiseCustomEvent("IsLoggedOnStateUpdateEvent", {
                oldIsLoggedOn: oldIsLoggedOn,
                oldCurrentEmployee: oldCurrentEmployee
            });
            this.isSessionStateValid = false;
            this._productsInCart.clear();
            this._offlineParameters = new OfflineParameters(0, 0, false, false);
            this.catalogName = Commerce.StringExtensions.EMPTY;
            this._currentCategories = [];
            this.categoryTree([]);
            this.connectionStatus = Number(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CONNECTION_STATUS));
            this.offlineSyncing(false);
            this.pendingDownloadSessionCount(0);
            this._newNotifications = false;
            this._recentlyPulledNotifications = false;
            this.isGetNotificationsSuccessful = true;
            this.lastPullDateTime = Commerce.DateExtensions.now;
            this._notificationsByActionId.clear();
            Object.keys(ErrorsDisplayedPerSession).forEach(function (errorDisplayKey) {
                _this._errorDisplayStatesPerSession.setItem(errorDisplayKey, true);
            });
            var serializedShift = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.SHIFT_KEY);
            this.Shift = serializedShift ? new Commerce.Proxy.Entities.ShiftClass(JSON.parse(serializedShift)) : null;
            var serializedCart = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CART_KEY);
            this.cart = serializedCart ? new Commerce.Proxy.Entities.CartClass(JSON.parse(serializedCart)) : null;
            this.cartReloadedNotificationPending = !Commerce.StringExtensions.isNullOrWhitespace(this.cart.Id);
            this.refreshConnectionAvailabilityStatus();
        };
        Session.prototype.addCartStateUpdateHandler = function (element, updateCartStateHandler) {
            Commerce.EventProxy.Instance.addCustomEventHandler(element, "CartStateUpdateEvent", updateCartStateHandler);
        };
        Session.prototype.removeCartStateUpdateHandler = function (element, updateCartStateHandler) {
            Commerce.EventProxy.Instance.removeCustomEventHandler(element, "CartStateUpdateEvent", updateCartStateHandler);
        };
        Session.prototype.addTaskRecorderStateUpdateHandler = function (element, taskRecorderStateHandler) {
            Commerce.EventProxy.Instance.addCustomEventHandler(element, "TaskRecorderStateUpdateEvent", taskRecorderStateHandler);
        };
        Session.prototype.removeTaskRecorderStateUpdateHandler = function (element, taskRecorderStateHandler) {
            Commerce.EventProxy.Instance.removeCustomEventHandler(element, "TaskRecorderStateUpdateEvent", taskRecorderStateHandler);
        };
        Session.prototype.addNewNotificationsStatusUpdateHandler = function (element, newNotificationsStatusStateHandler) {
            Commerce.EventProxy.Instance.addCustomEventHandler(element, "NewNotificationsStatusUpdateEvent", newNotificationsStatusStateHandler);
        };
        Session.prototype.removeNewNotificationsStatusUpdateHandler = function (element, newNotificationsStatusStateHandler) {
            Commerce.EventProxy.Instance.removeCustomEventHandler(element, "NewNotificationsStatusUpdateEvent", newNotificationsStatusStateHandler);
        };
        Session.prototype.addRecentlyPulledNotificationsUpdateHandler = function (element, recentlyPulledNotificationsStateHandler) {
            Commerce.EventProxy.Instance.addCustomEventHandler(element, "RecentlyPulledNotificationsUpdateEvent", recentlyPulledNotificationsStateHandler);
        };
        Session.prototype.removeRecentlyPulledNotificationsUpdateHandler = function (element, recentlyPulledNotificationsStateHandler) {
            Commerce.EventProxy.Instance.removeCustomEventHandler(element, "RecentlyPulledNotificationsUpdateEvent", recentlyPulledNotificationsStateHandler);
        };
        Session.prototype.addUserLogOnHandler = function (element, userLogOnEventHandler) {
            Commerce.EventProxy.Instance.addCustomEventHandler(element, "UserLogOnEvent", userLogOnEventHandler);
        };
        Session.prototype.removeUserLogOnHandler = function (element, userLogOnEventHandler) {
            Commerce.EventProxy.Instance.removeCustomEventHandler(element, "UserLogOnEvent", userLogOnEventHandler);
        };
        Session.prototype.newUserLogOn = function () {
            Commerce.EventProxy.Instance.raiseCustomEvent("UserLogOnEvent");
        };
        Object.defineProperty(Session.prototype, "isLoggedOn", {
            get: function () {
                return !Commerce.ObjectExtensions.isNullOrUndefined(this._employee);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "isCartInProgress", {
            get: function () {
                return Commerce.CartHelper.isInProgress(this.cart);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "CurrentEmployee", {
            get: function () {
                return this._employee;
            },
            set: function (newEmployee) {
                var oldEmployee = this._employee;
                var oldIsLoggedOn = this.isLoggedOn;
                var isCurrentEmployee = !Commerce.ObjectExtensions.isNullOrUndefined(oldEmployee)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(newEmployee)
                    && (oldEmployee.StaffId === newEmployee.StaffId);
                this._employee = newEmployee;
                Commerce.EventProxy.Instance.raiseCustomEvent("IsLoggedOnStateUpdateEvent", {
                    oldIsLoggedOn: oldIsLoggedOn,
                    oldCurrentEmployee: oldEmployee
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(newEmployee)) {
                    this.userName(newEmployee.Name);
                    if (Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        if (Commerce.ArrayExtensions.hasElements(newEmployee.Images) &&
                            !Commerce.StringExtensions.isNullOrWhitespace(newEmployee.Images[0].Uri)) {
                            this.picture(newEmployee.Images[0].Uri);
                        }
                    }
                    else {
                        this.picture(newEmployee.DefaultImage);
                    }
                }
                else {
                    this.userName("");
                    this.picture("");
                }
                if (!isCurrentEmployee) {
                    this.setDefaultEmployeeSessionState();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "CurrentCategoryList", {
            get: function () {
                return Session.instance._currentCategories;
            },
            set: function (categories) {
                Session.instance._currentCategories = categories;
                this.arrangeCategories(Session.instance._currentCategories);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "Shift", {
            get: function () {
                return Session.instance._shift;
            },
            set: function (newShift) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(newShift)) {
                    newShift = new Commerce.Proxy.Entities.ShiftClass({ ShiftId: 0, TerminalId: Commerce.ViewModelAdapter.getResourceString("string_4038") });
                }
                this._shift = newShift;
                this.shiftId(this._shift.ShiftId);
                this.shiftTerminalId(this._shift.TerminalId);
                this.terminalId(this._shift.CurrentTerminalId || this._shift.TerminalId);
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.SHIFT_KEY, JSON.stringify(newShift));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "OpenedShifts", {
            get: function () {
                var serializedOpenedShifts = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.OPENED_SHIFTS_KEY);
                var openedShifts = JSON.parse(serializedOpenedShifts);
                return openedShifts;
            },
            set: function (shifts) {
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.OPENED_SHIFTS_KEY, JSON.stringify(shifts));
            },
            enumerable: true,
            configurable: true
        });
        Session.prototype.AddToOrUpdateOpenedShifts = function (shiftToAddOrUpdate) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(shiftToAddOrUpdate) || shiftToAddOrUpdate.StatusValue !== Commerce.Proxy.Entities.ShiftStatus.Open.valueOf()) {
                return;
            }
            var shifts = this.OpenedShifts;
            var shiftUpdated = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(shifts)) {
                for (var i = 0; i < shifts.length; i++) {
                    if (shifts[i].ShiftId === shiftToAddOrUpdate.ShiftId && shifts[i].TerminalId === shiftToAddOrUpdate.TerminalId) {
                        shifts.splice(i, 1, shiftToAddOrUpdate);
                        shiftUpdated = true;
                        break;
                    }
                }
                if (!shiftUpdated) {
                    shifts.push(shiftToAddOrUpdate);
                }
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.OPENED_SHIFTS_KEY, JSON.stringify(shifts));
            }
        };
        Session.prototype.RemoveFromOpenedShifts = function (shiftToRemove) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(shiftToRemove)) {
                return;
            }
            var shifts = this.OpenedShifts;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(shifts)) {
                for (var i = 0; i < shifts.length; i++) {
                    if (shifts[i].ShiftId === shiftToRemove.ShiftId && shifts[i].TerminalId === shiftToRemove.TerminalId) {
                        shifts.splice(i, 1);
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.OPENED_SHIFTS_KEY, JSON.stringify(shifts));
                        break;
                    }
                }
            }
        };
        Object.defineProperty(Session.prototype, "Customer", {
            get: function () {
                return Session.instance._customer;
            },
            set: function (newCustomer) {
                Session.instance._customer = newCustomer;
                Commerce.EventProxy.Instance.raiseCustomEvent("CustomerStateUpdateEvent", newCustomer);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "CustomerPrimaryAddress", {
            get: function () {
                return Session.instance._customerPrimaryAddress;
            },
            set: function (newAddress) {
                Session.instance._customerPrimaryAddress = newAddress;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "cart", {
            get: function () {
                return this._cart;
            },
            set: function (newCart) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(newCart) || Commerce.StringExtensions.isNullOrWhitespace(newCart.Id)) {
                    newCart = new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY, CartLines: [] });
                }
                var currentCart = this._cart;
                this._cart = newCart;
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CART_KEY, JSON.stringify(newCart));
                var cartStateType = CartStateType.None;
                if ((Commerce.ObjectExtensions.isNullOrUndefined(currentCart) || Commerce.StringExtensions.isNullOrWhitespace(currentCart.Id))
                    && !Commerce.StringExtensions.isNullOrWhitespace(newCart.Id)) {
                    cartStateType = CartStateType.Started;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(currentCart)
                    && !Commerce.StringExtensions.isNullOrWhitespace(currentCart.Id)
                    && Commerce.StringExtensions.isNullOrWhitespace(newCart.Id)) {
                    cartStateType = CartStateType.Completed;
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(newCart.Id)) {
                    cartStateType = CartStateType.Updated;
                }
                Commerce.EventProxy.Instance.raiseCustomEvent("CartStateUpdateEvent", { cartStateType: cartStateType, oldCart: currentCart });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "offlineParameters", {
            get: function () {
                return Session.instance._offlineParameters;
            },
            enumerable: true,
            configurable: true
        });
        Session.prototype.addToProductsInCartCache = function (product) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                this._productsInCart.setItem(product.RecordId, product);
            }
        };
        Session.prototype.getFromProductsInCartCache = function (productId) {
            return this._productsInCart.getItem(productId);
        };
        Session.prototype.clearCart = function () {
            this._productsInCart.clear();
            Session.instance.Customer = null;
            Session.instance.cart = null;
        };
        Session.prototype.cartReloaded = function () {
            Session.instance.cartReloadedNotificationPending = false;
            Commerce.EventProxy.Instance.raiseCustomEvent("CartStateUpdateEvent", { cartStateType: CartStateType.Reloaded, oldCart: null });
        };
        Object.defineProperty(Session.prototype, "productCatalogStore", {
            get: function () {
                return Session.instance._productCatalogStore;
            },
            set: function (newProductCatalogStore) {
                Session.instance._productCatalogStore = newProductCatalogStore;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "isStoreCatalogVirtual", {
            get: function () {
                var storeType = Session.instance._productCatalogStore.StoreType;
                return storeType === Commerce.Proxy.Entities.StoreButtonControlType.AllStores ||
                    storeType === Commerce.Proxy.Entities.StoreButtonControlType.Warehouse;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "connectionAvailabilityStatus", {
            get: function () {
                return this._connectionAvailabilityStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "connectionStatus", {
            get: function () {
                return this._connectionStatus;
            },
            set: function (value) {
                var oldStatus = this._connectionStatus;
                this._connectionStatus = value;
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CONNECTION_STATUS, value.toString());
                TsLogging.LoggerBase.setDeviceOfflineInfo(ConnectionAvailabilityStatus[this.connectionAvailabilityStatus], Commerce.Client.Entities.ConnectionStatusType[this.connectionStatus]);
                if (value === Commerce.Client.Entities.ConnectionStatusType.Online) {
                    this.connectionStatusAsString(Commerce.ViewModelAdapter.getResourceString("string_6610"));
                }
                else {
                    this.connectionStatusAsString(Commerce.ViewModelAdapter.getResourceString("string_6611"));
                }
                if (value !== oldStatus) {
                    Commerce.EventProxy.Instance.raiseCustomEvent("ConnectionStatusUpdateEvent", { newStatus: value, oldStatus: oldStatus });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "newNotificationStatus", {
            get: function () {
                return this._newNotifications;
            },
            set: function (value) {
                this._newNotifications = value;
                Commerce.EventProxy.Instance.raiseCustomEvent("NewNotificationsStatusUpdateEvent", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "recentlyPulledNotificationsStatus", {
            get: function () {
                return this._recentlyPulledNotifications;
            },
            set: function (value) {
                this._recentlyPulledNotifications = value;
                if (value) {
                    Commerce.EventProxy.Instance.raiseCustomEvent("RecentlyPulledNotificationsUpdateEvent", value);
                }
            },
            enumerable: true,
            configurable: true
        });
        Session.prototype.addToNotifications = function (notification) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(notification)) {
                this._notificationsByActionId.setItem(notification.Action, notification);
            }
        };
        Session.prototype.getFromNotifications = function (action) {
            return this._notificationsByActionId.getItem(action);
        };
        Session.prototype.getAllFromNotifications = function () {
            return this._notificationsByActionId.getItems();
        };
        Session.prototype.clearNotifications = function () {
            this._notificationsByActionId.clear();
        };
        Object.defineProperty(Session.prototype, "notifications", {
            get: function () {
                return this._notificationsByActionId;
            },
            set: function (value) {
                this._notificationsByActionId = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "isOfflineAvailable", {
            get: function () {
                return this._isOfflineAvailable;
            },
            set: function (value) {
                this._isOfflineAvailable = value;
                this.refreshConnectionAvailabilityStatus();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Session.prototype, "taskRecorderState", {
            get: function () {
                return this._taskRecorderState;
            },
            set: function (newState) {
                this._taskRecorderState = newState;
                Commerce.EventProxy.Instance.raiseCustomEvent("TaskRecorderStateUpdateEvent", this._taskRecorderState);
            },
            enumerable: true,
            configurable: true
        });
        Session.prototype.getErrorDisplayState = function (errorKey) {
            if (!this._errorDisplayStatesPerSession.hasItem(errorKey)) {
                return true;
            }
            return this._errorDisplayStatesPerSession.getItem(errorKey);
        };
        Session.prototype.setErrorDisplayState = function (errorKey, shouldDisplay) {
            if (shouldDisplay === void 0) { shouldDisplay = false; }
            this._errorDisplayStatesPerSession.setItem(errorKey, shouldDisplay);
        };
        Session.prototype.refreshConnectionAvailabilityStatus = function () {
            if (!Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                this._connectionAvailabilityStatus = ConnectionAvailabilityStatus.NotEnabled;
            }
            else if (this.isOfflineAvailable) {
                this._connectionAvailabilityStatus = ConnectionAvailabilityStatus.Available;
            }
            else {
                this._connectionAvailabilityStatus = ConnectionAvailabilityStatus.EnabledNotAvailable;
            }
            TsLogging.LoggerBase.setDeviceOfflineInfo(ConnectionAvailabilityStatus[this.connectionAvailabilityStatus], Commerce.Client.Entities.ConnectionStatusType[this.connectionStatus]);
        };
        Session.prototype.isNonDrawerMode = function () {
            return this.Shift.ShiftId === 0;
        };
        Session.prototype.isCartUpToDate = function (cart) {
            return Commerce.CartHelper.cartVersionsMatch(Session.instance.cart, cart);
        };
        Session.prototype.createSession = function () {
            this.userName = ko.observable("");
            this.picture = ko.observable("");
            this.shiftId = ko.observable(0);
            this.shiftTerminalId = ko.observable("");
            this.terminalId = ko.observable("");
            this.connectionStatusAsString = ko.observable("");
            this._employee = null;
            this._productsInCart = new Commerce.Dictionary();
            this._offlineParameters = new OfflineParameters(0, 0, false, false);
            this.categoryTree = ko.observableArray([]);
            this.offlineSyncing = ko.observable(false);
            this.pendingDownloadSessionCount = ko.observable(0);
            this._newNotifications = false;
            this._recentlyPulledNotifications = false;
            this.isGetNotificationsSuccessful = true;
            this.lastPullDateTime = Commerce.DateExtensions.now;
            this._notificationsByActionId = new Commerce.Dictionary();
        };
        Session.prototype.setDefaultEmployeeSessionState = function () {
            this.setErrorDisplayState(ErrorsDisplayedPerSession.HardwareStationGeneralError, true);
            this.setErrorDisplayState(ErrorsDisplayedPerSession.NoActiveHardwareStationError, true);
        };
        Session.prototype.arrangeCategories = function (categories) {
            var rootNodes = [];
            var childNodesByParentId = Object.create(null);
            for (var i = 0, len = categories.length; i < len; ++i) {
                var currentCategory = categories[i];
                var parentId = currentCategory.ParentCategory;
                var target = !parentId ? rootNodes : (childNodesByParentId[parentId] || (childNodesByParentId[parentId] = []));
                target.push({ value: currentCategory });
            }
            var findChildren = function (parentCategory) {
                if (childNodesByParentId[parentCategory.value.RecordId]) {
                    parentCategory.children = childNodesByParentId[parentCategory.value.RecordId];
                    for (var i = 0, len = parentCategory.children.length; i < len; ++i) {
                        findChildren(parentCategory.children[i]);
                    }
                }
                else {
                    parentCategory.children = [];
                }
            };
            for (var i = 0, ltd = rootNodes.length; i < ltd; ++i) {
                findChildren(rootNodes[i]);
            }
            this.categoryTree(rootNodes);
        };
        Session._instance = null;
        return Session;
    }());
    Commerce.Session = Session;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ErrorHandler = (function () {
        function ErrorHandler() {
        }
        ErrorHandler.authenticationErrorHandler = function (correlationId, errors) {
            var error = (errors || [])[0];
            if (Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                return;
            }
            var errorMessage = Commerce.ErrorHelper.getErrorMessages(errors);
            switch (error.commerceExceptionType) {
                case Commerce.Proxy.ErrorHandling.CommerceExceptionTypes.USER_AUTHENTICATION_EXCEPTION_TYPE:
                    Commerce.RetailLogger.coreLogUserAuthenticationRetailServerResponse(correlationId, error.ErrorCode, errorMessage);
                    ErrorHandler.handleUserAuthenticationException(correlationId);
                    break;
                case Commerce.Proxy.ErrorHandling.CommerceExceptionTypes.DEVICE_AUTHENTICATION_EXCEPTION_TYPE:
                    if (Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ATTEMPTTOACTIVATEFROMDIFFERENTPHYSICALDEVICE.serverErrorCode
                        === error.ErrorCode.toUpperCase()) {
                        Commerce.RetailLogger.errorHandlerSkippedClearingDeviceToken();
                        return;
                    }
                    Commerce.Authentication.AuthenticationProviderManager.instance.logoff(Commerce.Authentication.AuthenticationProviderResourceType.DEVICE);
                    var messageToLog = Commerce.StringExtensions.format("authenticationErrorHandler. Errors:{0}", errorMessage);
                    Commerce.RetailLogger.coreStorageClearInitiated(correlationId, messageToLog);
                    Commerce.ApplicationStorage.clear();
                    Commerce.Utilities.OfflineHelper.stopOffline(correlationId);
                    var activationParameters = { errors: errors };
                    ErrorHandler.navigateToView(Commerce.Helpers.DeviceActivationHelper.GUIDED_ACTIVATION_VIEW_NAME, activationParameters);
                    break;
            }
        };
        ErrorHandler.cartVersionErrorHandler = function (errors, navigateToCartView) {
            if (!ErrorHandler.hasInvalidCartVersionError(errors)) {
                return Commerce.VoidAsyncResult.createResolved();
            }
            Commerce.RetailLogger.coreLogInvalidCartVersionRetailServerResponse();
            var asyncResult = new Commerce.VoidAsyncResult();
            var activity = new Commerce.Activities.DisplayMessageActivity({
                title: Commerce.ViewModelAdapter.getResourceString(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSIONERROR_MESSAGETITLE),
                message: Commerce.ViewModelAdapter.getResourceString(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSIONERROR_MESSAGEBODY)
            });
            activity.responseHandler = function (response) {
                var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                var errorHandlingQueue = new Commerce.AsyncQueue();
                errorHandlingQueue.enqueue(function () {
                    return cartManager.getCartByCartIdAsync(Commerce.Session.instance.cart.Id);
                }).enqueue(function () {
                    if (navigateToCartView) {
                        ErrorHandler.navigateToView("CartView");
                    }
                    return Commerce.AsyncResult.createResolved();
                });
                var errorHandlingResult = errorHandlingQueue.run().map(function (cancelableValue) {
                    return;
                }).fail(function (errors) {
                    Commerce.RetailLogger.coreLogFailureToHandleCartVersionError(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    Commerce.NotificationHandler.displayErrorMessage("string_29857");
                });
                asyncResult.resolveOrRejectOn(errorHandlingResult);
                return asyncResult.recoverOnFailure(function (errors) {
                    Commerce.NotificationHandler.displayClientErrors(errors);
                    return Commerce.AsyncResult.createResolved();
                });
            };
            activity.execute();
            return asyncResult;
        };
        ErrorHandler.isCartVersionValid = function () {
            var clientCart = Commerce.Session.instance.cart;
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var asyncResult = new Commerce.VoidAsyncResult();
            cartManager.getCartByCartIdWithNoSessionUpdateAsync(clientCart.Id).done(function (serverCart) {
                if (Commerce.CartHelper.cartVersionsMatch(clientCart, serverCart)) {
                    return asyncResult.resolve();
                }
                else {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSION.serverErrorCode)];
                    errors[0].handled = true;
                    return asyncResult.reject(errors);
                }
            }).fail(function (errors) {
                Commerce.RetailLogger.coreLogFailureToValidateCartVersion(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                asyncResult.reject(errors);
            });
            return asyncResult;
        };
        ErrorHandler.shouldNotHandleCartVersionErrorUntilResult = function (asyncResult) {
            ErrorHandler._shouldHandleCartVersionError = false;
            asyncResult.always(function () {
                ErrorHandler._shouldHandleCartVersionError = true;
            });
        };
        ErrorHandler.shouldHandleCartVersionError = function () {
            return ErrorHandler._shouldHandleCartVersionError;
        };
        ErrorHandler.hasInvalidCartVersionError = function (errors) {
            return Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSION.serverErrorCode);
        };
        ErrorHandler.handleUserAuthenticationException = function (correlationId) {
            if (!Commerce.ViewModelAdapter.isInView("LockRegister")
                && !Commerce.ViewModelAdapter.isInLogin()
                && !Commerce.ViewModelAdapter.isInView("ChangePasswordView")
                && !Commerce.Helpers.DeviceActivationHelper.isInDeviceActivationProcess()) {
                Commerce.Session.instance.isSessionStateValid = false;
                Commerce.RetailLogger.posAuthentication_LogOffForUserAuthenticationException(correlationId);
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId)));
            }
        };
        ErrorHandler.navigateToView = function (viewName, viewParameters) {
            if (!Commerce.Helpers.DeviceActivationHelper.isInDeviceActivationProcess()) {
                Commerce.ViewModelAdapter.navigate(viewName, viewParameters);
            }
        };
        ErrorHandler._shouldHandleCartVersionError = true;
        return ErrorHandler;
    }());
    Commerce.ErrorHandler = ErrorHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var EventProxy = (function () {
        function EventProxy() {
            var _this = this;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(EventProxy._instance)) {
                throw new Commerce.Proxy.Entities.Error("EventProxy may not be instantiated more than once.");
            }
            this._cachedEventHandlersByEventName = Object.create(null);
            this._windowResizeHandler = function (event) {
                _this._raiseViewEvent(EventProxy._windowResizeEventName, event);
            };
            window.addEventListener("resize", this._windowResizeHandler);
        }
        Object.defineProperty(EventProxy, "Instance", {
            get: function () {
                return EventProxy._instance;
            },
            enumerable: true,
            configurable: true
        });
        EventProxy.prototype.addWindowResizeHandler = function (element, eventHandler) {
            this._addViewEvent(element, EventProxy._windowResizeEventName, eventHandler);
        };
        EventProxy.prototype.removeWindowResizeHandler = function (element, eventHandler) {
            this._removeViewEvent(element, EventProxy._windowResizeEventName, eventHandler);
        };
        EventProxy.prototype.addCustomEventHandler = function (element, eventName, eventHandler) {
            this._addViewEvent(element, eventName, eventHandler);
        };
        EventProxy.prototype.removeCustomEventHandler = function (element, eventName, eventHandler) {
            this._removeViewEvent(element, eventName, eventHandler);
        };
        EventProxy.prototype.raiseCustomEvent = function (eventName, args) {
            this._raiseViewEvent(eventName, args);
        };
        EventProxy.prototype._addViewEvent = function (element, eventName, eventHandler) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                throw new Error("EventProxy.Instance._addViewEvent: element is a required parameter.");
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(eventName)) {
                throw new Error("EventProxy.Instance._addViewEvent: eventName is a required parameter.");
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(eventHandler)) {
                throw new Error("EventProxy.Instance._addViewEvent: eventHandler is a required parameter.");
            }
            if (!Commerce.ObjectExtensions.isFunction(eventHandler)) {
                throw new Error("EventProxy.Instance._addViewEvent: eventHandler must be a function.");
            }
            this._cachedEventHandlersByEventName[eventName] = null;
            var $element = $(element);
            var globalEventHandlers = $element.data(EventProxy._GLOBAL_EVENTS_ATTRIBUTE_NAME);
            if (!globalEventHandlers) {
                globalEventHandlers = {};
            }
            if (!globalEventHandlers[eventName]) {
                globalEventHandlers[eventName] = [];
            }
            globalEventHandlers[eventName].push(eventHandler);
            $element.data(EventProxy._GLOBAL_EVENTS_ATTRIBUTE_NAME, globalEventHandlers);
            var removeHandler = function () {
                _this._removeViewEvent(element, eventName, eventHandler);
            };
            $element.on("remove", removeHandler.bind(this));
        };
        EventProxy.prototype._removeViewEvent = function (element, eventName, eventHandler) {
            if (Commerce.ObjectExtensions.isFunction(eventHandler)) {
                this._cachedEventHandlersByEventName[eventName] = null;
                var $element = $(element);
                var globalEventHandlers = $element.data(EventProxy._GLOBAL_EVENTS_ATTRIBUTE_NAME);
                if (globalEventHandlers) {
                    var eventHandlers = globalEventHandlers[eventName];
                    if (eventHandlers && eventHandlers.length > 0) {
                        var index = eventHandlers.indexOf(eventHandler);
                        if (index >= 0) {
                            eventHandlers.splice(index, 1);
                        }
                    }
                }
            }
        };
        EventProxy.prototype._raiseViewEvent = function (eventName) {
            var argArray = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                argArray[_i - 1] = arguments[_i];
            }
            var eventHandlers = this._getHandlers(eventName);
            if (eventHandlers.length > 0) {
                var collectionCopy = eventHandlers.slice(0);
                while (collectionCopy.length > 0) {
                    var eventHandler = collectionCopy.pop();
                    eventHandler.apply(undefined, argArray);
                }
            }
        };
        EventProxy.prototype._getHandlers = function (eventName) {
            var handlers = this._cachedEventHandlersByEventName[eventName];
            if (!Commerce.ArrayExtensions.hasElements(handlers)) {
                handlers = [];
                $(document.body).find(":data(" + EventProxy._GLOBAL_EVENTS_ATTRIBUTE_NAME + ")").each(function (index, element) {
                    var globalEventHandlers = $(element).data(EventProxy._GLOBAL_EVENTS_ATTRIBUTE_NAME);
                    if (globalEventHandlers) {
                        var eventHandlers = globalEventHandlers[eventName];
                        if (eventHandlers && eventHandlers.length > 0) {
                            handlers = handlers.concat(eventHandlers);
                        }
                    }
                });
                this._cachedEventHandlersByEventName[eventName] = handlers;
            }
            return handlers;
        };
        EventProxy._instance = new EventProxy();
        EventProxy._windowResizeEventName = "WindowResizeEvent";
        EventProxy._GLOBAL_EVENTS_ATTRIBUTE_NAME = "GlobalEvents";
        return EventProxy;
    }());
    Commerce.EventProxy = EventProxy;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ErrorTypeEnum = (function () {
        function ErrorTypeEnum() {
        }
        ErrorTypeEnum.APPLICATION_ERROR = "string_29000";
        ErrorTypeEnum.APPLICATION_STORE_FAILED_TO_SAVE_DEVICE_CONFIGURATION = "string_1475";
        ErrorTypeEnum.APPLICATION_STORE_INITIALIZATION_DATA_FAILED_TO_LOAD = "string_29007";
        ErrorTypeEnum.PRICE_CHECK_INITIALIZATION_DATA_FAILED_TO_LOAD = "string_29022";
        ErrorTypeEnum.ORDERS_CANNOT_INCLUDE_GIFTCARDS = "string_29023";
        ErrorTypeEnum.ORDERS_CANNOT_INCLUDE_RETURNS = "string_29024";
        ErrorTypeEnum.CART_LINE_MISSING_PRODUCT_NAME_ERROR = "string_1242";
        ErrorTypeEnum.OPERATOR_ID_PASSWORD_NOT_SPECIFIED = "string_29001";
        ErrorTypeEnum.OPERATOR_PASSWORD_NOT_SPECIFIED = "string_29019";
        ErrorTypeEnum.INVALID_URL = "string_1330";
        ErrorTypeEnum.INVALID_EMAIL = "string_1331";
        ErrorTypeEnum.INVALID_PHONE = "string_1332";
        ErrorTypeEnum.INVALID_NAME = "string_1360";
        ErrorTypeEnum.INVALID_NAME_FORMAT = "string_1361";
        ErrorTypeEnum.EMPTY_STREET = "string_1333";
        ErrorTypeEnum.EMPTY_CITY = "string_1334";
        ErrorTypeEnum.EMPTY_STATE = "string_1335";
        ErrorTypeEnum.EMPTY_COUNTRY = "string_1336";
        ErrorTypeEnum.EMPTY_ZIPCODE = "string_1337";
        ErrorTypeEnum.EMPTY_NAME = "string_1338";
        ErrorTypeEnum.LINE_ITEM_MISSING_PRODUCT_NAME_ERROR = "string_3204";
        ErrorTypeEnum.LOGOFF_ERROR = "string_1353";
        ErrorTypeEnum.AAD_AUTHENTICATION_FAILED = "string_29046";
        ErrorTypeEnum.AAD_USER_ACCOUNT_IDENTIFIER_NOT_PROVIDED = "string_29053";
        ErrorTypeEnum.RETAILSERVER_URL_DISCOVERY_FAILED = "string_29047";
        ErrorTypeEnum.DEVICE_ACTIVATION_DETAILS_NOT_SPECIFIED = "string_1407";
        ErrorTypeEnum.CHANGE_PASSWORD_DETAILS_NOT_SPECIFIED = "string_6805";
        ErrorTypeEnum.NEW_PASSWORD_AND_CONFIRMATION_NOT_MATCHING_ERROR = "string_6806";
        ErrorTypeEnum.RESET_PASSWORD_DETAILS_NOT_SPECIFIED = "string_6810";
        ErrorTypeEnum.RESET_PASSWORD_CURRENT_EMPLOYEE = "string_6811";
        ErrorTypeEnum.OLD_AND_NEW_PASSWORD_MATCHING_ERROR = "string_6607";
        ErrorTypeEnum.OPERATION_ISSUE_CREDIT_MEMO_NOT_AVAILABLE = "string_29801";
        ErrorTypeEnum.OPERATION_ISSUE_CREDIT_MEMO_CALCULATE_TRANSACTION = "string_4376";
        ErrorTypeEnum.PAYMENT_CREDIT_MEMO_NEGATIVE_BALANCE = "string_29827";
        ErrorTypeEnum.PAYMENT_INFORMATION_INCOMPLETE = "string_1137";
        ErrorTypeEnum.PAYMENT_INVALID_NUMBER = "string_1138";
        ErrorTypeEnum.PAYMENT_CARD_NOT_SUPPORTED = "string_1139";
        ErrorTypeEnum.PAYMENT_CASH_PAYMENT_NOT_AVAILABLE = "string_1142";
        ErrorTypeEnum.PAYMENT_CARD_PAYMENT_NOT_AVAILABLE = "string_1158";
        ErrorTypeEnum.PAYMENT_UNABLE_TO_LOAD_CURRENCY_AMOUNTS = "string_1143";
        ErrorTypeEnum.PAYMENT_CUSTOMER_ACCOUNT_NOT_SET = "string_1154";
        ErrorTypeEnum.PAYMENT_AMOUNT_CANNOT_BE_ZERO = "string_1159";
        ErrorTypeEnum.PAYMENT_CARD_TRACK_DATA_EMPTY = "string_1166";
        ErrorTypeEnum.PAYMENT_CARD_NUMBER_EMPTY = "string_1167";
        ErrorTypeEnum.PAYMENT_ONLY_ONE_CUSTOMER_ACCOUNT_PAYMENT_ALLOWED = "string_1188";
        ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED = "string_1189";
        ErrorTypeEnum.PAYMENT_CAPTURED_VOID_FAILED = "string_1190";
        ErrorTypeEnum.PAYMENT_PARTIAL_VOID_FAILED = "string_7205";
        ErrorTypeEnum.PAYMENT_UNABLE_AUTHORIZE_OR_REFUND = "string_4931";
        ErrorTypeEnum.PAYMENT_CARD_SECURITY_CODE_EMPTY = "string_1168";
        ErrorTypeEnum.PAYMENT_CREDIT_MEMO_NUMBER_EMPTY = "string_1169";
        ErrorTypeEnum.PAYMENT_LOYALTY_CARD_NUMBER_EMPTY = "string_1170";
        ErrorTypeEnum.PAYMENT_GIFT_CARD_NUMBER_EMPTY = "string_1171";
        ErrorTypeEnum.PAYMENT_CUSTOMER_ACCOUNT_EMPTY = "string_1172";
        ErrorTypeEnum.PAYMENT_INVALID_CARD_NUMBER = "string_1175";
        ErrorTypeEnum.PAYMENT_INVALID_SECURITY_CODE = "string_1176";
        ErrorTypeEnum.PAYMENT_INVALID_ZIP_CODE = "string_1177";
        ErrorTypeEnum.PAYMENT_CAPTURED_PAYMENT_COULD_NOT_BE_UPDATED_ON_SERVER = "string_29703";
        ErrorTypeEnum.PAYMENT_AMOUNT_MUST_LESS_THAN_ZERO = "string_1178";
        ErrorTypeEnum.PAYMENT_AMOUNT_MUST_GREATER_THAN_ZERO = "string_1179";
        ErrorTypeEnum.PAYMENT_PREVIOUS_PAYMENT_CAPTURE_FAILED = "string_29070";
        ErrorTypeEnum.QUANTITY_MUST_BE_NUMBER = "string_168";
        ErrorTypeEnum.CART_IS_EMPTY = "string_29008";
        ErrorTypeEnum.RETAIL_SERVER_REDIRECT_ERROR = "RETAIL_SERVER_REDIRECT_ERROR";
        ErrorTypeEnum.OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM = "string_29824";
        ErrorTypeEnum.INVALID_INCOME_EXPENSE_LINE_COLLECTION = "string_4122";
        ErrorTypeEnum.RECEIPT_PREVIEW = "string_4127";
        ErrorTypeEnum.CUSTOMER_ORDER_CANNOT_PERFORM_OPERATION = "string_4451";
        ErrorTypeEnum.CARTLINE_DISCOUNTINUED = "string_4452";
        ErrorTypeEnum.CANNOT_REMOVE_CUSTOMER_PARTIAL_ORDER = "string_4453";
        ErrorTypeEnum.SCALE_UNSPECIFIED_WITHOUT_MANUAL_ENTRY = "string_5316";
        ErrorTypeEnum.SCALE_RETURNED_ZERO_WITHOUT_MANUAL_ENTRY = "string_5317";
        ErrorTypeEnum.APPLICATION_CONFIGURATION_LOADING_ERROR = "string_29951";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEMOMODEOPERATIONNOTSUPPORTED = "string_29952";
        ErrorTypeEnum.MANAGER_OVERRIDE_CANCELED_ERROR = "string_29029";
        ErrorTypeEnum.SELECTED_CARTLINES_CONTAINS_VOIDED_PRODUCTS = "string_29832";
        ErrorTypeEnum.CUSTOMERORDER_MANUAL_DEPOSIT_REQUIRED = "string_29833";
        ErrorTypeEnum.CANNOT_CHANGE_QUANTITY_LESS_ONE = "string_29835";
        ErrorTypeEnum.CANNOT_CHANGE_QUANTITY_WHEN_SERIALIZED = "string_4363";
        ErrorTypeEnum.LOCAL_STORAGE_IS_NOT_AVAILABLE = "string_29836";
        ErrorTypeEnum.APPLICATION_UPDATE_REQUIRED = "string_29052";
        ErrorTypeEnum.ORDER_CANNOT_BE_EDITED = "string_29030";
        ErrorTypeEnum.INVOICE_COMMENTS_NOT_AVAILABLE = "string_29301";
        ErrorTypeEnum.REASONCODE_LENGTH_EXCEEDED = "string_29038";
        ErrorTypeEnum.REASONCODE_LENGTH_SHORT = "string_29039";
        ErrorTypeEnum.NUMBER_INPUT_VALUE_GREATER_THAN_MAXIMUM_ALLOWED = "string_29040";
        ErrorTypeEnum.NUMBER_INPUT_VALUE_LESS_THAN_MINIMUM_ALLOWED = "string_29041";
        ErrorTypeEnum.DEVICE_NOT_AUTHENTICATED = "string_29393";
        ErrorTypeEnum.FINISH_TRANSACTION_BEFORE_STARTING_ANOTHER = "string_4322";
        ErrorTypeEnum.NOT_SUPPORTED_IN_OFFLINE_MODE_WHEN_HARDWARE_STATION_NOT_ACTIVE = "string_29839";
        ErrorTypeEnum.PAYMENT_INVALID_CALCULATE_TRANSACTION_REQUIRED = "string_4383";
        ErrorTypeEnum.INVALID_CUSTOMER_ACCOUNT_DEPOSIT_LINE_COLLECTION = "string_4180";
        ErrorTypeEnum.ITEM_ADD_INVALID_NON_UPDATABLE_PRICE = "string_5726";
        ErrorTypeEnum.ACCESS_WRONG_DEVICE_TERMINAL = "string_29055";
        ErrorTypeEnum.NO_SALES_REPRESENTATIVES_AVAILABLE = "string_13006";
        ErrorTypeEnum.INVOICE_ADD_INVALID_ALREADY_ADDED_TO_CART = "string_29852";
        ErrorTypeEnum.SALES_INVOICES_CUSTOMER_ACCOUNT_NUMBER_NOTSET = "string_29413";
        ErrorTypeEnum.SALES_INVOICE_CANNOT_BE_IN_CUSTOMER_ORDER = "string_29851";
        ErrorTypeEnum.EXTENSIONS_CANNOT_BE_LOADED = "string_29980";
        ErrorTypeEnum.SALES_ORDER_ID_CANNOT_BE_EMPTY = "string_29059";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERIALNUMBERMISSING = "string_4395";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERIALNUMBERMISSINGINCUSTOMERORDER = "string_4396";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTCONTAINSPRODUCTSFORRETURN = "string_29064";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTCONTAINSPRODUCTSFORRETURNONLY = "string_29060";
        ErrorTypeEnum.SELECTED_LINES_CONTAINS_POSITIVE_QUANTITY = "string_29061";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCUSTOMERORDERMODEFORVOIDPRODUCTS = "string_29335";
        ErrorTypeEnum.NOT_ALLOWED_IN_CUSTOMERORDER_OR_QUOTATION = "string_29062";
        ErrorTypeEnum.GIFT_CARD_NOT_ALLOWED_IN_CUSTOMERORDER_OR_QUOTATION = "string_29811";
        ErrorTypeEnum.CANNOT_CONVERT_TO_QUOTATION_FROM_CUSTOMER_ORDER = "string_29063";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTCONTAINSPRODUCTSFORPICKUP = "string_29074";
        ErrorTypeEnum.TASK_RECORDER_SESSION_INVALID_STATE = "string_10200";
        ErrorTypeEnum.TASK_RECORDER_SESSION_NO_ACTIVE_TASK = "string_10201";
        ErrorTypeEnum.TASK_RECORDER_CONFIGURATION_ERROR = "string_10202";
        ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY = "string_10203";
        ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION = "string_10204";
        ErrorTypeEnum.TASK_RECORDER_VIEWMANAGER_VIEW_NOT_FOUND = "string_10205";
        ErrorTypeEnum.TASK_RECORDER_VIEWMANAGER_LOAD_FAILED = "string_10206";
        ErrorTypeEnum.TASK_RECORDER_INVALID_DOM = "string_10207";
        ErrorTypeEnum.TASK_RECORDER_CONTROLLER_NOT_SUPPORTED_STATE = "string_10208";
        ErrorTypeEnum.TASK_RECORDER_STEP_VIEW_MODEL_NOT_FOUND = "string_10209";
        ErrorTypeEnum.TASK_RECORDER_COULDNT_TAKE_SCREENSHOT = "string_10210";
        ErrorTypeEnum.TASK_RECORDER_COULDNT_UPLOAD_SCREENSHOT = "string_10211";
        ErrorTypeEnum.TASK_RECORDER_TASK_VIEW_MODEL_NOT_FOUND = "string_10212";
        ErrorTypeEnum.TASK_RECORDER_ODATA_TYPE_NOT_FOUND = "string_10213";
        ErrorTypeEnum.TASK_RECORDER_ERROR_OCCURED_DURING_UPLOADING_FILE = "string_10214";
        ErrorTypeEnum.TASK_RECORDER_ERROR_OCCURRED_DURING_DISPLAYING_SAVE_DIALOG = "string_10215";
        ErrorTypeEnum.TASK_RECORDER_COULDNT_SAVE_FILE = "string_10216";
        ErrorTypeEnum.TASK_RECORDER_COULDNT_COMPLETE_UPDATES_FOR_FILE = "string_10217";
        ErrorTypeEnum.TASK_RECORDER_COULDNT_DOWNLOAD_FILE = "string_10218";
        ErrorTypeEnum.TASK_RECORDER_UNEXPECTED_FILE_EXTENSION = "string_10219";
        ErrorTypeEnum.TASK_RECORDER_XML_EXPORT_ERROR = "string_10220";
        ErrorTypeEnum.TASK_RECORDER_WORD_EXPORT_ERROR = "string_10221";
        ErrorTypeEnum.TASK_RECORDER_SAVE_FILE_ERROR = "string_10222";
        ErrorTypeEnum.TASK_RECORDER_BPM_PACKAGE_EXPORT_ERROR = "string_10223";
        ErrorTypeEnum.TASK_RECORDER_COULDNT_DOWNLOAD_RECORDING = "string_10224";
        ErrorTypeEnum.TASK_RECORDER_SAVE_SESSION_AS_RECORDING_BUNDLE_ERROR = "string_10225";
        ErrorTypeEnum.CANNOT_CHANGE_HARDWARE_STATION_WHEN_PAYMENT_DONE = "string_6009";
        ErrorTypeEnum.HARDWARESTATION_CHANGE_ERROR_LINE_DISPLAY_ACTIVE = "string_6014";
        ErrorTypeEnum.HARDWARESTATION_BALANCE_TOKEN_ERROR = "string_7204";
        ErrorTypeEnum.HARDWARESTATION_MUST_BE_PAIRED_BEFORE_ACTIVATE = "string_6010";
        ErrorTypeEnum.HARDWARESTATION_SWITCH_NOT_ALLOWED_TO_NONSHARED = "string_6017";
        ErrorTypeEnum.SHIFT_NOT_ALLOWED_ON_ACTIVE_HARDWARE_PROFILE = "string_6018";
        ErrorTypeEnum.SHIFT_USING_ACTIVE_HARDWARESTATION_DRAWER = "string_6034";
        ErrorTypeEnum.STORE_NOT_FOUND = "string_29016";
        ErrorTypeEnum.CUSTOMER_NOT_FOUND = "string_29048";
        ErrorTypeEnum.DIMENSION_SELECTION_NOT_COMPLETED = "string_821";
        ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_TITLE = "string_834";
        ErrorTypeEnum.PRODUCT_DETAILS_NOT_FOUND_ERROR_MESSAGE = "string_835";
        ErrorTypeEnum.RETURN_MULTIPLE_REASON_CODE_SETS_ARE_DEFINED = "RETURN_MULTIPLE_REASON_CODE_SETS_ARE_DEFINED";
        ErrorTypeEnum.RETURN_NO_ORDERS_FOUND = "string_1218";
        ErrorTypeEnum.RETURN_NO_SALES_LINES_IN_ORDER = "string_1220";
        ErrorTypeEnum.RETURN_ALL_SALES_LINES_IN_ORDER_RETURN = "string_1237";
        ErrorTypeEnum.RETURN_NO_REASON_CODES_ARE_DEFINED = "string_1244";
        ErrorTypeEnum.RETURN_NO_ITEM_SELECTED = "string_1246";
        ErrorTypeEnum.RETURN_MAX_RETURN_LINE_AMOUNT_EXCEEDED = "string_29370";
        ErrorTypeEnum.RETURN_MAX_RETURN_TOTAL_AMOUNT_EXCEEDED = "string_29371";
        ErrorTypeEnum.RETURN_CANNOT_CHANGE_PRODUCT_QUANTITY = "string_4421";
        ErrorTypeEnum.RETURN_ALL_SALES_LINES_IN_SALES_INVOICE_RETURN = "string_5015";
        ErrorTypeEnum.CREDIT_MEMO_INVALID_AMOUNT = "string_29800";
        ErrorTypeEnum.CANNOT_PAYMENT_TRANSACTION_COMPLETED = "string_4356";
        ErrorTypeEnum.CALCULATE_TOTAL_BEFORE_PAYMENT = "string_4373";
        ErrorTypeEnum.NO_PRICECHECK_ON_PRODUCTS = "string_3523";
        ErrorTypeEnum.NO_PRODUCT_INFORMATION = "string_3873";
        ErrorTypeEnum.CART_UNAVAILABLE_FOR_PICK_UP = "string_4539";
        ErrorTypeEnum.CART_LINES_UNAVAILABLE_FOR_PICK_UP = "string_4540";
        ErrorTypeEnum.PICK_LIST_CAN_NOT_BE_CREATED = "string_4544";
        ErrorTypeEnum.PACK_SLIP_CAN_NOT_BE_CREATED = "string_4546";
        ErrorTypeEnum.CUSTOMER_ORDER_OPERATION_PICKUP_CANCEL_RETURN_NOT_SUPPORTED = "string_29028";
        ErrorTypeEnum.CREATE_OR_EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY = "string_29032";
        ErrorTypeEnum.CREATE_OR_EDIT_CUSTOMER_ORDER_ONLY = "string_29058";
        ErrorTypeEnum.EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY = "string_29033";
        ErrorTypeEnum.NO_STORE_SELECTED_FOR_PICKUP = "string_29034";
        ErrorTypeEnum.ALL_PRODUCTS_SELECTED_PICKUP_OR_SHIP_SELECTED = "string_29035";
        ErrorTypeEnum.INVALID_SHIPPING_CHARGES = "string_2543";
        ErrorTypeEnum.NO_ADDRESSES_SELECTED_FOR_SHIP = "string_29036";
        ErrorTypeEnum.NO_SHIPPING_METHODS_SELECTED_FOR_SHIP = "string_29037";
        ErrorTypeEnum.CREATE_OR_EDIT_QUOTATION_ONLY = "string_29042";
        ErrorTypeEnum.EDIT_CUSTOMER_ORDER_ONLY = "string_29043";
        ErrorTypeEnum.EDIT_OR_PICKUP_CUSTOMER_ORDER_ONLY = "string_29050";
        ErrorTypeEnum.MISSING_CARTLINE_LINE_CHARGES = "string_5601";
        ErrorTypeEnum.MISSING_CARTLINE_CHARGE_CODES = "string_4482";
        ErrorTypeEnum.INVALID_SEARCH_CRITERIA = "string_4584";
        ErrorTypeEnum.START_DATE_NOT_IN_FUTURE = "string_4585";
        ErrorTypeEnum.START_DATE_NOT_MORE_RECENT_THAN_END_DATE = "string_4586";
        ErrorTypeEnum.EMPTY_SEARCH_CRITERIA = "string_4598";
        ErrorTypeEnum.CANCELLATION_CHARGE_IS_NOT_VALID = "string_4542";
        ErrorTypeEnum.CANCELLATION_CHARGE_INVALID_NEGATIVE_AMOUNT = "string_29026";
        ErrorTypeEnum.CANCELLATION_CHARGE_INVALID_OPERATION = "string_29027";
        ErrorTypeEnum.ORDER_CANNOT_BE_CANCELED = "string_4541";
        ErrorTypeEnum.CUSTOMERACCOUNTDEPOSIT_MULTIPLECARTLINESNOTALLOWED = "string_29340";
        ErrorTypeEnum.UNSUPPORTED_APPLY_DISCOUNT_OPERATION = "string_5600";
        ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_DISCOUNT = "string_5601";
        ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED = "string_5602";
        ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_PERCENT_EXCEEDED = "string_5603";
        ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED = "string_5604";
        ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_PERCENT_EXCEEDED = "string_5605";
        ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED_PRICE = "string_5617";
        ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED_SUBTOTAL = "string_5618";
        ErrorTypeEnum.DISCOUNT_NOT_ALLOWED_ON_PRODUCT = "string_5624";
        ErrorTypeEnum.UNSUPPORTED_APPLY_DISCOUNT_OPERATION_SALESINVOICE = "string_29854";
        ErrorTypeEnum.PERMISSION_DENIED_LINE_AMOUNT_DISCOUNT = "string_5619";
        ErrorTypeEnum.PERMISSION_DENIED_LINE_PERCENT_DISCOUNT = "string_5620";
        ErrorTypeEnum.PERMISSION_DENIED_TOTAL_AMOUNT_DISCOUNT = "string_5621";
        ErrorTypeEnum.PERMISSION_DENIED_TOTAL_PERCENT_DISCOUNT = "string_5622";
        ErrorTypeEnum.PERMISSION_DENIED_CANNOT_APPLY_DISCOUNT_TO_LINE_WITH_OVERRIDDEN_PRICE = "string_5623";
        ErrorTypeEnum.PERMISSION_DENIED_CANNOT_APPLY_DISCOUNT_TO_LINE_WITH_PRICE_KEYED_IN = "string_5625";
        ErrorTypeEnum.PRICE_OVERRIDE_NOT_VALID_ONE_OR_MORE_ITEMS = "string_5705";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_EXCEEDS_MAXIMUM_DEVICE_PRICE = "string_5715";
        ErrorTypeEnum.PRICE_OVERRIDE_PRODUCT_IS_VOIDED = "string_29803";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_CANNOT_BE_NEGATIVE = "string_29009";
        ErrorTypeEnum.PRICE_OVERRIDE_INVALID_PRICE = "string_29010";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_NOT_A_NUMBER = "string_29011";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_CANNOT_BE_ZERO = "string_5717";
        ErrorTypeEnum.PRICE_OVERRIDE_PRICE_MUST_BE_POSITIVE = "string_29020";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_LOWER_AMOUNTS_ALLOWED = "string_5718";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_HIGHER_AMOUNTS_ALLOWED = "string_5719";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_LOWER_OR_EQUAL_AMOUNTS_ALLOWED = "string_5720";
        ErrorTypeEnum.PRICE_OVERRIDE_ONLY_HIGHER_OR_EQUAL_AMOUNTS_ALLOWED = "string_5721";
        ErrorTypeEnum.PRICE_OVERRIDE_NOT_ALLOWED_FOR_PRODUCT = "string_5722";
        ErrorTypeEnum.PRICE_OVERRIDE_NONE_ALLOWED = "string_5723";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ENTERINGPRICENOTALLOWED = "string_4379";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MUSTKEYINEQUALHIGHERPRICE = "string_4380";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MUSTKEYINEQUALLOWERPRICE = "string_4381";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MUSTKEYINNEWPRICE = "string_4382";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MUSTKEYIN_PRICE_EXCEEDS_MAXIMUM_DEVICE_PRICE = "string_4399";
        ErrorTypeEnum.MANUAL_QUANTITY_NOT_ALLOWED_ON_PRICE_EMBEDDED_BARCODE = "string_4458";
        ErrorTypeEnum.BARCODE_TYPE_NOT_SUPPORTED = "string_4459";
        ErrorTypeEnum.PRODUCT_ASSOCIATED_WITH_BARCODE_NOT_FOUND = "string_4460";
        ErrorTypeEnum.CUSTOMER_ASSOCIATED_WITH_BARCODE_NOT_FOUND = "string_4461";
        ErrorTypeEnum.CHANGE_SALES_PERSON_INVALID_CART_MODE = "string_5733";
        ErrorTypeEnum.REFINER_VALUE_MUST_BE_SET = "string_14205";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_ONE_OR_MORE_ITEMS = "string_5305";
        ErrorTypeEnum.SET_QUANTITY_NOT_GREATER_THAN_ZERO = "string_5308";
        ErrorTypeEnum.SET_QUANTITY_NOT_IN_RANGE = "string_5309";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_NO_ITEM_SELECTED = "string_5310";
        ErrorTypeEnum.SET_QUANTITY_NOT_A_NUMBER = "string_5311";
        ErrorTypeEnum.SET_QUANTITY_NOT_ZERO = "string_5312";
        ErrorTypeEnum.SET_QUANTITY_QUANTITY_EXCEEDS_MAXIMUM_DEVICE_QUANTITY = "string_5313";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_UNIT_OF_MEASURE = "string_5314";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_SERIALIZED_ITEM = "string_5315";
        ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_CANCELING_ORDER = "string_5322";
        ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_ONE_OR_MORE_ITEMS = "string_3205";
        ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_NO_ITEM_SELECTED = "string_3206";
        ErrorTypeEnum.UNIT_OF_MEASURE_CANNOT_BE_CHANGED = "string_3207";
        ErrorTypeEnum.UNIT_OF_MEASURE_CONVERSION_NOT_DEFINED = "string_3208";
        ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_ITEM_NOT_ALLOW_QUANTITY_UPDATE = "string_3209";
        ErrorTypeEnum.NOT_IMPLEMENTED = "string_29003";
        ErrorTypeEnum.KIT_BLOCKED_FOR_DISASSEMBLY_AT_REGISTER = "string_420";
        ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED = "string_4908";
        ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED = "string_4914";
        ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_NOTFOUND = "string_4900";
        ErrorTypeEnum.PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED = "string_4901";
        ErrorTypeEnum.PERIPHERALS_CASHDRAWER_ALREADY_OPENED = "string_4936";
        ErrorTypeEnum.PERIPHERALS_MSR_NOTFOUND = "string_4902";
        ErrorTypeEnum.PERIPHERALS_MSR_ENABLE_FAILED = "string_4903";
        ErrorTypeEnum.PERIPHERALS_PRINTER_FAILED = "string_4904";
        ErrorTypeEnum.PERIPHERAL_PAYMENT_UNKNOWN_ERROR = "string_4919";
        ErrorTypeEnum.PERIPHERAL_UNSUPPORTED_PRINTERTYPE_ERROR = "string_4937";
        ErrorTypeEnum.PERIPHERAL_DUALDISPLAY_RESPONSE_NOT_RECEIVED = "string_4940";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PRINTER_ERROR = "string_4904";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_CASHDRAWER_ERROR = "string_4905";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR = "string_4907";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_DUALDISPLAY_ERROR = "string_4918";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAIRINGERROR = "string_6011";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PINPAD_ERROR = "string_4923";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_LINEDISPLAY_ERROR = "string_4925";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PERIPHERALISLOCKED = "string_4927";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_BARCODESCANNER_ERROR = "string_4933";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_MAGNETICSWIPEREADER_ERROR = "string_4934";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_SCALE_CALIBRATIONERROR = "string_4938";
        ErrorTypeEnum.AMOUNT_IS_NOT_VALID = "string_4102";
        ErrorTypeEnum.AMOUNT_CANNOT_BE_NEGATIVE = "string_29412";
        ErrorTypeEnum.MANAGE_SAFES_NOT_ENABLED_IN_HQ = "string_30112";
        ErrorTypeEnum.SHIFT_IS_NOT_VALID = "string_4103";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_VOIDED = "string_29803";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_RECEIPT = "string_29804";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_GIFT_CARD = "string_29805";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_LINKED_PRODUCT = "string_29806";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_CART_LINES = "string_29807";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_INCOME_EXPENSE_TRANSACTION = "string_29808";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_TIME_CLOCK_DISABLED = "string_29809";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_FINISH_CURRENT_TRANSACTION = "string_4125";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_CURRENT_TRANSACTION = "string_4175";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_ADD_COUPON_TO_NO_CURRENT_TRANSACTION = "string_29708";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_CART_LINE_SELECTED = "string_29822";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_NONDRAWER_MODE = "string_4141";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_PAYMENT_LINE_SELECTED = "string_29828";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_PAYMENT_LINES = "string_29829";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE = "string_29831";
        ErrorTypeEnum.EMAIL_RECEIPT_NOT_ALLOWED_IN_OFFLINE_STATE = "string_29865";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRICE_IS_OVERRIDDEN = "string_29837";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_CUSTOMER_ACCOUNT_DEPOSIT = "string_29844";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PERMISSION_DENIED_MANAGER_OVERRIDE_NOT_ALLOWED = "string_522";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_SERIALIZED_ITEM = "string_29848";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_KEY_IN_QUANTITY_NOT_ALLOWED_FOR_ITEM = "string_29849";
        ErrorTypeEnum.RECEIPT_NOT_AVAILABLE_FOR_ORDER = "string_4173";
        ErrorTypeEnum.RECEIPT_EMAIL_IS_EMPTY = "string_4126";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PERMISSION_DENIED = "string_511";
        ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS = "string_29018";
        ErrorTypeEnum.INVALID_BLANK_OPERATION = "string_29838";
        ErrorTypeEnum.TRANSACTION_NOT_SELECTED = "string_4147";
        ErrorTypeEnum.TOO_MANY_TRANSACTIONS_SELECTED = "string_4199";
        ErrorTypeEnum.CHANGE_PASSWORD_NOT_ALLOWED_PERMISSION_DENIED_MANAGER_OVERRIDE_NOT_ALLOWED = "string_523";
        ErrorTypeEnum.MATCHING_VARIANT_NOT_FOUND = "string_29846";
        ErrorTypeEnum.REQUIRED_DIMENSION_VALUES_MISSING = "string_29847";
        ErrorTypeEnum.OPERATION_NOT_SUPPORTED = "string_29802";
        ErrorTypeEnum.DENOMINATIONS_QUANTITY_HAS_REMAINDER_FOR_TOTAL_AMOUNT = "string_4105";
        ErrorTypeEnum.DENOMINATIONS_QUANTITY_HAS_TO_BE_INTEGER_NUMBER = "string_4106";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_SALES_INVOICE = "string_29850";
        ErrorTypeEnum.OPERATION_UNVOID_NOT_ALLOWED_FOR_A_VOIDED_SALES_INVOICE = "string_29853";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_AS_ACTIVE_THIRD_PARTY_GIFT_CARDS = "string_29862";
        ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED = "string_29859";
        ErrorTypeEnum.CARD_PAYMENT_NOT_CONFIGURED = "string_29864";
        ErrorTypeEnum.GIFT_CARD_NOT_APPROVED = "string_29860";
        ErrorTypeEnum.DENOMINATION_LINE_NOT_SELECTED = "string_29863";
        ErrorTypeEnum.INVALID_AFFILIATION_COLLECTION = "string_5205";
        ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_TAX_OVERRDE = "string_4423";
        ErrorTypeEnum.NO_TAX_OVERRIDE_GROUP_CONFIGURED = "string_4422";
        ErrorTypeEnum.CANNOT_SWITCH_ONLINE_CART_IN_PROGRESS = "string_6607";
        ErrorTypeEnum.CANNOT_SWITCH_OFFLINE_NOT_AVAILABLE = "string_6608";
        ErrorTypeEnum.CANNOT_SWITCH_TRANSFER_FAILED = "string_6609";
        ErrorTypeEnum.CANNOT_SWITCH_OFFLINE_REQUIRE_RELOGIN = "string_6622";
        ErrorTypeEnum.CANNOT_SYNC_DATA_IN_OFFLINE = "string_6629";
        ErrorTypeEnum.OFFLINE_DATA_IS_SYNCING = "string_6625";
        ErrorTypeEnum.OFFLINE_MODE_NOT_SUPPORTED = "string_6628";
        ErrorTypeEnum.CANNOT_TRANSFER_SHIFT_TO_ONLINE = "string_6637";
        ErrorTypeEnum.SIGNATURE_INVALID_FORMAT = "string_6906";
        ErrorTypeEnum.ASYNC_CLIENT_ZERO_DOWNLOAD_SESSION = "string_29375";
        ErrorTypeEnum.ASYNC_CLIENT_EMPTY_UPLOAD_JOB_DEFINITION = "string_29376";
        ErrorTypeEnum.ASYNC_CLIENT_NO_TRANSACTION_DATA = "string_29377";
        ErrorTypeEnum.ASYNC_CLIENT_CANNOT_LOAD_OFFLINE_TRANSACTION_DATA = "string_29378";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_PURGE_OFFLINE_TRANSACTION_DATA = "string_29379";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_DOWNLOAD_FILE = "string_29380";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_APPLY_FILE_TO_OFFLINE_DATABASE = "string_29381";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_UPDATE_DOWNLOAD_SESSION_STATUS = "string_29382";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_RETRIEVE_INITIAL_DATA_SYNC_INDICATOR = "string_29383";
        ErrorTypeEnum.ASYNC_CLIENT_OFFLINE_NOT_ENABLED_ON_TERMINAL = "string_29384";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_UPDATE_UPLOAD_FAILED_STATUS = "string_29396";
        ErrorTypeEnum.ASYNC_CLIENT_FAIL_UPLOAD_DATA = "string_29397";
        ErrorTypeEnum.ASYNC_CLIENT_RETAIL_SERVER_UNAVAILABLE = "string_29406";
        ErrorTypeEnum.ASYNC_CLIENT_FAILED_TO_GET_OFFLINE_SYNC_STATS = "string_29409";
        ErrorTypeEnum.ASYNC_CLIENT_FAILED_TO_CHECK_IF_INITIAL_PACKAGE_REQUIRED = "string_29410";
        ErrorTypeEnum.ASYNC_CLIENT_FAILED_TO_UPDATE_FULL_PACKAGE_IS_REQUESTED_INDICATOR = "string_29411";
        ErrorTypeEnum.EMPLOYEE_NOT_FOUND = "string_29320";
        ErrorTypeEnum.GENERICCOMMERCEERROR = "string_29200";
        ErrorTypeEnum.GENERICERRORMESSAGE = "string_29201";
        ErrorTypeEnum.GENERICVALIDATIONERROR = "string_29202";
        ErrorTypeEnum.ISASSOCIATEDVALIDATIONERROR = "string_29203";
        ErrorTypeEnum.ISNOTASSOCIATEDVALIDATIONERROR = "string_29204";
        ErrorTypeEnum.ISNOTAUTHENTICATEDVALIDATIONERROR = "string_29205";
        ErrorTypeEnum.ITEMSVALIDATIONERROR = "string_29206";
        ErrorTypeEnum.LINEIDSVALIDATIONERROR = "string_29207";
        ErrorTypeEnum.LISTINGSVALIDATIONERROR = "string_29208";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INSUFFICIENTQUANTITYONHAND = "string_29210";
        ErrorTypeEnum.INVALID_CURRENCY_AMOUNT = "string_29012";
        ErrorTypeEnum.NAMEVALIDATIONERROR = "string_29219";
        ErrorTypeEnum.PAYMENTSVALIDATIONERROR = "string_29220";
        ErrorTypeEnum.PROMOTIONCODEVALIDATIONERROR = "string_29221";
        ErrorTypeEnum.SAVEDSHOPPINGCARTIDVALIDATIONERROR = "string_29222";
        ErrorTypeEnum.SHIPPINGOPTIONSLINEITEMSELECTION = "string_29223";
        ErrorTypeEnum.SHIPPINGOPTIONSPICKUP = "string_29224";
        ErrorTypeEnum.SHIPPINGOPTIONSSHIPTONEWADDRESS = "string_29225";
        ErrorTypeEnum.SHIPPINGOPTIONSVALIDATIONERROR = "string_29226";
        ErrorTypeEnum.SHOPPINGCARTIDSVALIDATIONERROR = "string_29227";
        ErrorTypeEnum.SHOPPINGCARTIDVALIDATIONERROR = "string_29228";
        ErrorTypeEnum.STORELOCATORBINGMAPSTOKENEMPTY = "string_29229";
        ErrorTypeEnum.STORELOCATORINVALIDDISTANCE = "string_29230";
        ErrorTypeEnum.STORELOCATORINVALIDLOCATION = "string_29231";
        ErrorTypeEnum.STORELOCATORUNABLETOGETCOORDINATES = "string_29232";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AGGREGATECOMMUNICATIONERROR = "string_29234";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERRESPONSEPARSINGERROR = "string_29241";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AGGREGATEVALIDATIONERROR = "string_29255";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DISCOUNTISALLOWEDONLYFORCREATIONANDEDITION = "string_5613";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ITEMDISCONTINUEDFROMCHANNEL = "string_29268";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_QUOTEMUSTHAVEVALIDQUOTATIONEXPIRYDATE = "string_4321";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOPICKUPMORETHANQTYREMAINING = "string_29821";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTCHANGECUSTOMERIDWHENEDITINGCUSTOMERORDER = "string_4420";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGETENDERTYPENOTSUPPORTED = "string_29369";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ZEROPRICEISNOTALLOWED = "string_29399";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DISCONTINUEDPRODUCTSREMOVEDFROMCART = "string_4457";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTALLLINESSAVED = "string_3878";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SALESINVOICELINEVOIDREVERSALNOTSUPPORTED = "string_29414";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALID_ORDERINVOICE_DATA = "string_29415";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOSALESINVOICERETURNED = "string_29416";
        ErrorTypeEnum.SERIAL_NUMBER_CANNOT_BE_CHANGED = "string_29418";
        ErrorTypeEnum.SERIAL_NUMBER_CANNOT_BE_ADDED = "string_29421";
        ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_NON_SERIALIZED_ITEM = "string_29419";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSIONERROR_MESSAGEBODY = "string_29855";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSIONERROR_MESSAGETITLE = "string_29856";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_GIFTCARDOPERATIONNOTSUPPORTED = "string_5120";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_GIFTCARDLINEVOIDREVERSALNOTSUPPORTED = "string_5121";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSHIPPINGDATE = "string_2545";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MISSING_RECEIVEDATE = "string_3408";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MISSING_SHIPDATE = "string_3407";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MISSING_LOCATIONID = "string_3406";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CREATETRANSFERORDERNOTALLOWED = "string_3410";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDORDERTYPE = "string_3409";
        ErrorTypeEnum.INVALID_RECEIVEDATE = "string_3413";
        ErrorTypeEnum.INVALID_SHIPDATE = "string_3412";
        ErrorTypeEnum.RECEIVEDATE_LESSTHAN_SHIPDATE = "string_3414";
        ErrorTypeEnum.INVALID_TRANSFER_FROM_LOCATION = "string_3415";
        ErrorTypeEnum.INVALID_TRANSFER_TO_LOCATION = "string_3411";
        ErrorTypeEnum.TRANSFER_ORDER_DELETE_ERROR = "string_3419";
        ErrorTypeEnum.BAD_REQUEST = "string_29274";
        ErrorTypeEnum.NOT_AUTHORIZED = "string_29275";
        ErrorTypeEnum.FORBIDDEN = "string_29276";
        ErrorTypeEnum.PRECONDITION_FAILED = "string_29277";
        ErrorTypeEnum.SERVICE_UNAVAILABLE = "string_29278";
        ErrorTypeEnum.SERVER_TIMEOUT = "string_29279";
        ErrorTypeEnum.POSSIBLE_LOOPBACK_BLOCKED = "string_29329";
        ErrorTypeEnum.SERVER_INTERNAL_ERROR = "string_29395";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NONDRAWEROPERATIONSONLY = "string_2123";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_INTERNAL_SERVER_ERROR = ErrorTypeEnum.GENERICERRORMESSAGE;
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTNOTACTIVE = "string_29834";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDUSERTOKEN = "string_29275";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OBJECTNOTFOUND = "string_29214";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTREQUIRESMERCHANTPROPERTIES = "string_29400";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_BALANCEAMOUNTEXCEEDSMAXIMUMALLOWEDVALUE = "string_29355";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGEBACKISNOTALLOWED = "string_29356";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCORRECTPAYMENTAMOUNTSIGN = "string_29357";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OVERTENDERAMOUNTEXCEEDSMAXIMUMALLOWEDVALUE = "string_29358";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMAXIMUMAMOUNTPERLINE = "string_29359";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMAXIMUMAMOUNTPERTRANSACTION = "string_29360";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMINIMUMAMOUNTPERLINE = "string_29361";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMINIMUMAMOUNTPERTRANSACTION = "string_29362";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTMUSTBEUSEDTOFINALIZETRANSACTION = "string_29363";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TENDERLINECANNOTBEVOIDED = "string_29826";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETORETRIEVECARDPAYMENTACCEPTRESULT = "string_7206";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOGETCARDPAYMENTACCEPTPOINT = "string_4377";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTALREADYVOIDED = "string_29293";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDLOYALTYCARDNUMBER = "string_29286";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERSESSIONNOTOPENED = "string_29054";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTPAYMENTEXCEEDSTOTALAMOUNTFORCARRYOUTITEMS = "string_29417";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_GIFTCARDPAYMENTNOTSUPPORTED = "string_5117";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDOPERATION = "string_29601";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_APPLICATIONERROR = "string_29602";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_GENERICCHECKDETAILSFORERROR = "string_29603";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_DONOTAUTHORIZED = "string_29604";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_USERABORTED = "string_29605";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_LOCALENOTSUPPORTED = "string_29606";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDMERCHANTPROPERTY = "string_29607";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_COMMUNICATIONERROR = "string_29608";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDARGUMENTCARDTYPENOTSUPPORTED = "string_29609";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_VOICEAUTHORIZATIONNOTSUPPORTED = "string_29610";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_REAUTHORIZATIONNOTSUPPORTED = "string_29611";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_MULTIPLECAPTURENOTSUPPORTED = "string_29612";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_BATCHCAPTURENOTSUPPORTED = "string_29613";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_UNSUPPORTEDCURRENCY = "string_29614";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_UNSUPPORTEDCOUNTRY = "string_29615";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CANNOTREAUTHORIZEPOSTCAPTURE = "string_29616";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CANNOTREAUTHORIZEPOSTVOID = "string_29617";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_IMMEDIATECAPTURENOTSUPPORTED = "string_29618";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CARDEXPIRED = "string_29619";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_REFERTOISSUER = "string_29620";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_NOREPLY = "string_29621";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_HOLDCALLORPICKUPCARD = "string_29622";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDAMOUNT = "string_29623";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_ACCOUNTLENGTHERROR = "string_29624";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_ALREADYREVERSED = "string_29625";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CANNOTVERIFYPIN = "string_29626";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDCARDNUMBER = "string_29627";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDCVV2 = "string_29628";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CASHBACKNOTAVAILABLE = "string_29629";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CARDTYPEVERIFICATIONERROR = "string_29630";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_DECLINE = "string_29631";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_ENCRYPTIONERROR = "string_29632";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_NOACTIONTAKEN = "string_29633";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_NOSUCHISSUER = "string_29634";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_PINTRIESEXCEEDED = "string_29635";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_SECURITYVIOLATION = "string_29636";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_SERVICENOTALLOWED = "string_29637";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_STOPRECURRING = "string_29638";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_WRONGPIN = "string_29639";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CVV2MISMATCH = "string_29640";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_DUPLICATETRANSACTION = "string_29641";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_REENTER = "string_29642";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_AMOUNTEXCEEDLIMIT = "string_29643";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_AUTHORIZATIONEXPIRED = "string_29644";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_AUTHORIZATIONALREADYCOMPLETED = "string_29645";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_AUTHORIZATIONISVOIDED = "string_29646";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_PROCESSORDUPLICATEBATCH = "string_29647";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_AUTHORIZATIONFAILURE = "string_29648";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDMERCHANTCONFIGURATION = "string_29649";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDEXPIRATIONDATE = "string_29650";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDCARDHOLDERNAMEFIRSTNAMEREQUIRED = "string_29651";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDCARDHOLDERNAMELASTNAMEREQUIRED = "string_29652";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_FILTERDECLINE = "string_29653";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDADDRESS = "string_29654";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CVV2REQUIRED = "string_29655";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CARDTYPENOTSUPPORTED = "string_29656";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_UNIQUEINVOICENUMBERREQUIRED = "string_29657";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_POSSIBLEDUPLICATE = "string_29658";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_PROCESSORREQUIRESLINKEDREFUND = "string_29659";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CRYPTOBOXUNAVAILABLE = "string_29660";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CVV2DECLINED = "string_29661";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_MERCHANTIDINVALID = "string_29662";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_TRANNOTALLOWED = "string_29663";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_TERMINALNOTFOUND = "string_29664";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDEFFECTIVEDATE = "string_29665";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INSUFFICIENTFUNDS = "string_29666";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_REAUTHORIZATIONMAXREACHED = "string_29667";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_REAUTHORIZATIONNOTALLOWED = "string_29668";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_DATEOFBIRTHERROR = "string_29669";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_ENTERLESSERAMOUNT = "string_29670";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_HOSTKEYERROR = "string_29671";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDCASHBACKAMOUNT = "string_29672";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDTRANSACTION = "string_29673";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_IMMEDIATECAPTUREREQUIRED = "string_29674";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_IMMEDIATECAPTUREREQUIREDMAC = "string_29675";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_MACREQUIRED = "string_29676";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_BANKCARDNOTSET = "string_29677";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDREQUEST = "string_29678";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDTRANSACTIONFEE = "string_29679";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_NOCHECKINGACCOUNT = "string_29680";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_NOSAVINGSACCOUNT = "string_29681";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_RESTRICTEDCARDTEMPORARILYDISALLOWEDFROMINTERCHANGE = "string_29682";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_MACSECURITYFAILURE = "string_29683";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_EXCEEDSWITHDRAWALFREQUENCYLIMIT = "string_29684";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDCAPTUREDATE = "string_29685";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_NOKEYSAVAILABLE = "string_29686";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_KMESYNCERROR = "string_29687";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_KPESYNCERROR = "string_29688";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_KMACSYNCERROR = "string_29689";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_RESUBMITEXCEEDSLIMIT = "string_29690";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_SYSTEMPROBLEMERROR = "string_29691";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_ACCOUNTNUMBERNOTFOUNDFORROW = "string_29692";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDTOKENINFOPARAMETERFORROW = "string_29693";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_EXCEPTIONTHROWNFORROW = "string_29694";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_TRANSACTIONAMOUNTEXCEEDSREMAINING = "string_29695";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDARGUMENTTENDERACCOUNTNUMBER = "string_29696";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDCARDTRACKDATA = "string_29697";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDRESULTACCESSCODE = "string_29698";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_GENERALEXCEPTION = "string_29699";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDVOICEAUTHORIZATIONCODE = "string_29700";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CASHBACKAMOUNTEXCEEDSTOTALAMOUNT = "string_29701";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_EXECUTETASKNOTSUPPORTED = "string_29704";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CARDNOTACTIVATED = "string_29705";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_CARDALREADYACTIVATED = "string_29706";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_UNASSIGNEDTENDERTYPEOPERATION = "string_29707";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_RETURNWITHOUTRECEIPTPAYMENT = "string_29709";
        ErrorTypeEnum.URI_LAUNCH_FAILED = "string_30001";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_NO_PRINTABLE_RECEIPTS = "string_1827";
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_INVALIDSHIFT = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_INVALIDSHIFT",
            clientErrorCode: "",
            messageResource: ""
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCORRECTLOGONTYPEUSERACCOUNTORPASSWORD = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCORRECTLOGONTYPEUSERACCOUNTORPASSWORD",
            clientErrorCode: "DA1015",
            messageResource: "string_27210"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANNELDATABASECONNECTIONFAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANNELDATABASECONNECTIONFAILED",
            clientErrorCode: "DA1001",
            messageResource: "string_27000",
            messageDetailsResource: ["string_27002", "string_27003"],
            helperUrl: "http://go.microsoft.com/fwlink/?LinkId=403590"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICECONFIGURATIONNOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICECONFIGURATIONNOTFOUND",
            clientErrorCode: "DA1003",
            messageResource: "string_27020"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICETOKENVALIDATIONFAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICETOKENVALIDATIONFAILED",
            clientErrorCode: "DA1008",
            messageResource: "string_27070"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LOCALDEVICEAUTHENTICATIONFAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LOCALDEVICEAUTHENTICATIONFAILED",
            clientErrorCode: "DA1013",
            messageResource: "string_27200"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HARDWAREPROFILENOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HARDWAREPROFILENOTFOUND",
            clientErrorCode: "DA1004",
            messageResource: "string_27030"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LOCALLOGONFAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LOCALLOGONFAILED",
            clientErrorCode: "DA1006",
            messageResource: "string_27050",
            messageDetailsResource: ["string_27051", "string_27052", "string_27053", "string_27054", "string_27055"]
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NODEVICEMANAGEMENTPERMISSION = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NODEVICEMANAGEMENTPERMISSION",
            clientErrorCode: "DA1010",
            messageResource: "string_27090"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CONFIGURATIONSETTINGNOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CONFIGURATIONSETTINGNOTFOUND",
            clientErrorCode: "DA1011",
            messageResource: "string_27110"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNKNOWNREQUESTRESPONSEPAIR = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNKNOWNREQUESTRESPONSEPAIR",
            clientErrorCode: "DA1013",
            messageResource: "string_27230"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICEENDPOINTNOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICEENDPOINTNOTFOUND",
            clientErrorCode: "DA2002",
            messageResource: "string_27120"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICEEXCEPTION = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICEEXCEPTION",
            clientErrorCode: "DA2003",
            messageResource: "string_27130",
            messageDetailsResource: ["string_27131", "string_27132", "string_27133", "string_27134", "string_27135"]
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICEMETHODNOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICEMETHODNOTFOUND",
            clientErrorCode: "DA2007",
            messageResource: "string_27170"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICETIMEOUT = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICETIMEOUT",
            clientErrorCode: "DA2006",
            messageResource: "string_27160"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERLOGINANOTHERTERMINAL = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERLOGONANOTHERTERMINAL",
            clientErrorCode: "DA1005",
            messageResource: "string_27040"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ATTEMPTTOACTIVATEFROMDIFFERENTPHYSICALDEVICE = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ATTEMPTTOACTIVATEFROMDIFFERENTPHYSICALDEVICE",
            clientErrorCode: "DA1016",
            messageResource: "string_27270"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAUDIENCE = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAUDIENCE",
            clientErrorCode: "DA1017",
            messageResource: "string_29385"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDISSUER = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDISSUER",
            clientErrorCode: "DA1018",
            messageResource: "string_29386"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TENANTIDNOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TENANTIDNOTFOUND",
            clientErrorCode: "DA1019",
            messageResource: "string_29387"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AADTOKENISSUEDFORDIFFERENTENVIRONMENT = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AADTOKENISSUEDFORDIFFERENTENVIRONMENT",
            clientErrorCode: "DA1020",
            messageResource: "string_29388"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAADTENANTID = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAADTENANTID",
            clientErrorCode: "DA1021",
            messageResource: "string_29389"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RETAILSERVERCONFIGURATIONNOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RETAILSERVERCONFIGURATIONNOTFOUND",
            clientErrorCode: "DA1022",
            messageResource: "string_29390"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_COMMERCEIDENTITYNOTFOUND = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_COMMERCEIDENTITYNOTFOUND",
            clientErrorCode: "DA1023",
            messageResource: "string_29391"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERTRANSACTIONSERVICEMETHODCALLFAILURE = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERTRANSACTIONSERVICEMETHODCALLFAILURE",
            clientErrorCode: "DA2001"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_DATAENCRYPTIONERROR = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_DATAENCRYPTIONERROR",
            clientErrorCode: "DA3122",
            messageResource: "string_4930"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_DNS_LOOKUP_FAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_DNS_LOOKUP_FAILED",
            clientErrorCode: "DA3005",
            messageResource: "string_27193"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_ERROR = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_ERROR",
            clientErrorCode: "DA3001",
            messageResource: "string_27190",
            messageDetailsResource: ["string_27197", "string_27191", "string_27192", "string_27193", "string_27194", "string_27195", "string_27196"]
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_RETAILSERVERAPI_FAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_RETAILSERVERAPI_FAILED",
            clientErrorCode: "DA3003",
            messageResource: "string_27220"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_FIREWALL_BLOCKED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_FIREWALL_BLOCKED",
            clientErrorCode: "DA3007",
            messageResource: "string_27196"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_SERVER_TIMED_OUT = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_SERVER_TIMED_OUT",
            clientErrorCode: "DA3006",
            messageResource: "string_27190",
            messageDetailsResource: ["string_27191", "string_27192", "string_27194", "string_27195"]
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_HEALTH_CHECK_FAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_HEALTH_CHECK_FAILED",
            clientErrorCode: "DA3011",
            messageResource: "string_27240"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_HEALTH_CHECK_METADATA_FAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_HEALTH_CHECK_METADATA_FAILED",
            clientErrorCode: "DA3012",
            messageResource: "string_27250"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_CLIENTBROKER_COMMUNICATION_ERROR = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_CLIENTBROKER_COMMUNICATION_ERROR",
            clientErrorCode: "DA3014",
            messageResource: "string_29841",
            messageDetailsResource: ["string_29842", "string_29843"]
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHENTICATIONFAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHENTICATIONFAILED",
            clientErrorCode: "DA1002",
            messageResource: "string_27010"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHORIZATIONFAILED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHORIZATIONFAILED",
            clientErrorCode: "DA1010",
            messageResource: "string_29257"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERCOMMUNICATIONFAILURE = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERCOMMUNICATIONFAILURE",
            clientErrorCode: "DA2009",
            messageResource: "string_29240"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCHANNELCONFIGURATION = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCHANNELCONFIGURATION",
            clientErrorCode: "DA2010",
            messageResource: "string_29242",
            messageDetailsResource: ["string_29403", "string_29404", "string_29405"]
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSION = {
            serverErrorCode: "Microsoft_Dynamics_Commerce_Runtime_InvalidCartVersion",
            messageResource: ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSIONERROR_MESSAGEBODY
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERPASSWORDEXPIRED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERPASSWORDEXPIRED",
            messageResource: "string_512"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICENOTSUPPORTED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICENOTSUPPORTED",
            messageResource: "string_29831"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAUTHENTICATIONCREDENTIALS = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAUTHENTICATIONCREDENTIALS"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AADCONFIGURATION_ERROR = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_AADCONFIGURATION_ERROR",
            messageResource: "string_27282",
            messageDetailsResource: ["string_27283", "string_27284", "string_27285"]
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AAD_USERCANCELLEDAUTHENTICATION = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_AAD_USERCANCELLEDAUTHENTICATION",
            messageResource: "string_27286"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AAD_ACCOUNTSETTINGSPANE_ERROR = {
            serverErrorCode: "MICROSOFT_DYNAMICS_POS_AAD_ACCOUNTSETTINGSPANE_ERROR",
            messageResource: "string_27287"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CASHDRAWERLIMITEXCEEDED = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CASHDRAWERLIMITEXCEEDED",
            messageResource: "string_29861"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REQUIREDREASONCODESMISSING = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REQUIREDREASONCODESMISSING",
            messageResource: "string_29422"
        };
        ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTVALIDPROFILESCONFIGURATION = {
            serverErrorCode: "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTVALIDPROFILESCONFIGURATION",
            messageResource: "string_27288"
        };
        return ErrorTypeEnum;
    }());
    Commerce.ErrorTypeEnum = ErrorTypeEnum;
    var ErrorHelper = (function () {
        function ErrorHelper() {
        }
        ErrorHelper.isAggregatedErrorResourceId = function (errorResourceId) {
            return ErrorHelper.AGGREGATED_ERROR_RESOUCEIDS.indexOf(errorResourceId) !== -1;
        };
        ErrorHelper.MapResponseStatusCodeToError = function (errorMessage, statusCode) {
            var errorCode = "";
            var canRetry = false;
            switch (statusCode) {
                case 400:
                    errorCode = ErrorTypeEnum.BAD_REQUEST;
                    break;
                case 401:
                    errorCode = ErrorTypeEnum.NOT_AUTHORIZED;
                    break;
                case 403:
                    errorCode = ErrorTypeEnum.FORBIDDEN;
                    break;
                case 412:
                    errorCode = ErrorTypeEnum.PRECONDITION_FAILED;
                    break;
                case 503:
                    errorCode = ErrorTypeEnum.SERVICE_UNAVAILABLE;
                    canRetry = true;
                    break;
                case 500:
                default:
                    errorCode = ErrorTypeEnum.SERVER_INTERNAL_ERROR;
                    break;
            }
            if (errorMessage && errorMessage.toUpperCase() === "TIMEOUT") {
                errorCode = ErrorTypeEnum.SERVER_TIMEOUT;
            }
            return new Commerce.Proxy.Entities.Error(errorCode, canRetry);
        };
        ErrorHelper.hasError = function (errors, errorType) {
            return Commerce.ArrayExtensions.hasElements(ErrorHelper.filterErrorsByType(errors, errorType));
        };
        ErrorHelper.filterErrorsByType = function (errors, errorType) {
            var matchingErrors = [];
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                matchingErrors = errors.filter(function (error) { return ErrorHelper._errorIsOfType(error, errorType); });
            }
            return matchingErrors;
        };
        ErrorHelper.isRetryable = function (errors) {
            var numErrors = Commerce.ObjectExtensions.isNullOrUndefined(errors) ? 0 : errors.length;
            var isRetryable = numErrors > 0;
            for (var i = 0; i < numErrors; i++) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(errors[i])) {
                    isRetryable = isRetryable && errors[i].canRetry;
                }
                else {
                    isRetryable = false;
                }
            }
            return isRetryable;
        };
        ErrorHelper.areAllHandled = function (errors) {
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                return errors.every(function (error) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                        return Commerce.ObjectExtensions.isBoolean(error.handled) && error.handled;
                    }
                    return true;
                });
            }
            return true;
        };
        ErrorHelper.markHandled = function (errors) {
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                errors.forEach(function (error) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                        error.handled = true;
                    }
                });
            }
        };
        ErrorHelper.getErrorResourceIds = function (errors) {
            var result = "";
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                var errorResourceIds = [];
                for (var i = 0; i < errors.length; i++) {
                    errorResourceIds.push(errors[i].ErrorCode);
                }
                result = errorResourceIds.join(", ");
            }
            return result;
        };
        ErrorHelper.getActiveResourceID = function (formattedErrorMessage) {
            var errorMessageResourceID = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(formattedErrorMessage)) {
                errorMessageResourceID =
                    !Commerce.StringExtensions.isNullOrWhitespace(formattedErrorMessage.clientResourceID) ?
                        formattedErrorMessage.clientResourceID :
                        formattedErrorMessage.serverResourceID;
            }
            return errorMessageResourceID;
        };
        ErrorHelper.getErrorMessages = function (errors) {
            var result = "";
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                var errorResourceIds = [];
                for (var i = 0; i < errors.length; i++) {
                    errorResourceIds.push(ErrorHelper.formatErrorMessage(errors[i]));
                }
                result = errorResourceIds.join(", ");
            }
            return result;
        };
        ErrorHelper.formatErrorMessage = function (error) {
            return ErrorHelper.getFormattedErrorMessage(error).errorMessage;
        };
        ErrorHelper.getFormattedErrorMessage = function (error) {
            var formattedErrorMessage = new Commerce.FormattedErrorMessage();
            if (error && error.ErrorCode) {
                if (error instanceof Commerce.Client.Entities.PosExtensionError) {
                    formattedErrorMessage.errorMessage = error.localizedMessage;
                    formattedErrorMessage.clientResourceID = Commerce.StringExtensions.EMPTY;
                    formattedErrorMessage.serverResourceID = Commerce.StringExtensions.EMPTY;
                    return formattedErrorMessage;
                }
                if (error instanceof Commerce.Client.Entities.HardwareStationLocalizedError) {
                    formattedErrorMessage.errorMessage = error.ExternalLocalizedErrorMessage;
                    formattedErrorMessage.serverResourceID = error.ErrorCode;
                    formattedErrorMessage.clientResourceID = Commerce.StringExtensions.EMPTY;
                    return formattedErrorMessage;
                }
                var transactionServiceErrorCode = ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERTRANSACTIONSERVICEMETHODCALLFAILURE.serverErrorCode;
                if (error.ErrorCode.toUpperCase() !== transactionServiceErrorCode) {
                    var errorDetails = ErrorHelper.resolveError(error.ErrorCode, false);
                    if (!Commerce.StringExtensions.isNullOrWhitespace(errorDetails.messageResource)) {
                        formattedErrorMessage.errorMessage = Commerce.ViewModelAdapter.getResourceString(errorDetails.messageResource);
                        formattedErrorMessage.clientResourceID = errorDetails.messageResource;
                        if (Commerce.ArrayExtensions.hasElements(error.formatData)) {
                            formattedErrorMessage.errorMessage = Commerce.StringExtensions.format.apply(Commerce.StringExtensions, [formattedErrorMessage.errorMessage].concat(error.formatData));
                        }
                    }
                }
                if (error.ErrorCode === formattedErrorMessage.errorMessage || Commerce.StringExtensions.isNullOrWhitespace(formattedErrorMessage.errorMessage)) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(error.ExternalLocalizedErrorMessage)) {
                        formattedErrorMessage.errorMessage = error.ExternalLocalizedErrorMessage;
                    }
                    formattedErrorMessage.serverResourceID = error.ErrorCode;
                    formattedErrorMessage.clientResourceID = Commerce.StringExtensions.EMPTY;
                }
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(formattedErrorMessage.errorMessage)) {
                Commerce.RetailLogger.coreCannotMapErrorCode(error.ErrorCode);
            }
            return formattedErrorMessage;
        };
        ErrorHelper.resolveError = function (errorCode, logNotFoundError) {
            if (logNotFoundError === void 0) { logNotFoundError = true; }
            if (Commerce.StringExtensions.isNullOrWhitespace(errorCode)) {
                return null;
            }
            var errorDetails = null;
            var result = ErrorTypeEnum[errorCode.toUpperCase()];
            if (Commerce.ObjectExtensions.isObject(result)) {
                errorDetails = result;
            }
            else if (Commerce.ObjectExtensions.isString(result)) {
                errorDetails = {
                    messageResource: result
                };
            }
            else {
                if (logNotFoundError && errorCode === Commerce.ViewModelAdapter.getResourceString(errorCode)) {
                    Commerce.RetailLogger.coreCannotMapErrorCode(errorCode);
                }
                var matches = ErrorHelper.COMMERCE_ERROR_CODE_FORMAT.exec(errorCode);
                if (!Commerce.StringExtensions.beginsWith(errorCode, ErrorHelper.MICROSOFT_DYNAMICS_PREFIX, false)
                    && (Commerce.ObjectExtensions.isNullOrUndefined(matches) || matches.length === 0)) {
                    errorDetails = {
                        messageResource: ErrorTypeEnum.APPLICATION_ERROR
                    };
                }
                else {
                    errorDetails = {
                        messageResource: errorCode
                    };
                }
            }
            return errorDetails;
        };
        ErrorHelper.serializeErrorsForRetailLogger = function (errors) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(errors)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else {
                var serializedErrorDetails = void 0;
                try {
                    serializedErrorDetails = JSON.stringify(errors, ["ErrorCode", "ExternalLocalizedErrorMessage"]);
                }
                catch (exception) {
                    var details = void 0;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(exception)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(exception.message)) {
                            details = exception.message;
                        }
                        else {
                            details = String(exception);
                        }
                    }
                    else {
                        details = Commerce.StringExtensions.EMPTY;
                    }
                    serializedErrorDetails = "Failed to serialize errors (" + details + ").";
                }
                return serializedErrorDetails;
            }
        };
        ErrorHelper.serializeError = function (error) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                return Commerce.StringExtensions.EMPTY;
            }
            else if (error instanceof Array) {
                var serializedErrorMessages = error.map(function (err) {
                    return ErrorHelper.serializeError(err);
                });
                return JSON.stringify(serializedErrorMessages);
            }
            else if (error instanceof Error) {
                var copy_1 = Object.create(null);
                var currentObject = error;
                while (!Commerce.ObjectExtensions.isNullOrUndefined(currentObject)) {
                    Object.getOwnPropertyNames(currentObject).forEach(function (key) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(error[key])) {
                            copy_1[key] = error[key];
                        }
                    });
                    currentObject = Object.getPrototypeOf(currentObject);
                }
                return JSON.stringify(copy_1);
            }
            else if (Commerce.ObjectExtensions.isString(error)) {
                return error;
            }
            else {
                return JSON.stringify(error);
            }
        };
        ErrorHelper.toJavascriptError = function (errorObj, correlationId) {
            if (errorObj instanceof Error) {
                return errorObj;
            }
            else if (Commerce.ObjectExtensions.isString(errorObj)) {
                return new Error(errorObj);
            }
            else {
                Commerce.RetailLogger.coreUnableToConvertUnrecognizedErrorObjectIntoProxyError(JSON.stringify(errorObj), correlationId);
                var applicationErrorMessage = Commerce.StringResourceManager.getString(ErrorTypeEnum.APPLICATION_ERROR);
                return new Error(applicationErrorMessage);
            }
        };
        ErrorHelper.toProxyErrors = function (errorObj, correlationId) {
            var _this = this;
            correlationId = Commerce.ObjectExtensions.isNullOrUndefined(correlationId) ? Commerce.StringExtensions.EMPTY : correlationId;
            var errors = [];
            if (errorObj instanceof Array) {
                var errorArray = errorObj.filter(function (e) { return e !== null || typeof e !== "undefined"; });
                errorArray.forEach(function (e) {
                    errors = errors.concat(_this.toProxyErrors(e, correlationId));
                });
            }
            else if (errorObj instanceof Commerce.Client.Entities.ExtensionError) {
                var posExtensionError = new Commerce.Client.Entities.PosExtensionError(errorObj);
                errors.push(posExtensionError);
            }
            else if (errorObj instanceof Commerce.Proxy.Entities.Error) {
                errors.push(errorObj);
            }
            else if (errorObj instanceof Error) {
                errors.push(new Commerce.Proxy.Entities.Error(errorObj.message));
            }
            else {
                Commerce.RetailLogger.coreUnableToConvertUnrecognizedErrorObjectIntoProxyError(JSON.stringify(errorObj), correlationId);
                errors.push(new Commerce.Proxy.Entities.Error(ErrorTypeEnum.APPLICATION_ERROR));
            }
            return errors;
        };
        ErrorHelper.getErrorsBySeverity = function (errors) {
            var informationalLevelErrors = [];
            var errorLevelErrors = [];
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                errors.forEach(function (error) {
                    if (ErrorHelper._isInformational(error)) {
                        informationalLevelErrors.push(error);
                    }
                    else {
                        errorLevelErrors.push(error);
                    }
                });
            }
            var errorsBySeverity = {
                errorsOfSeverityError: errorLevelErrors,
                errorsOfSeverityInformational: informationalLevelErrors
            };
            return errorsBySeverity;
        };
        ErrorHelper.containsNonUserError = function (errors) {
            if (!Commerce.ArrayExtensions.hasElements(errors)) {
                return false;
            }
            return errors.some(function (error) {
                return !Commerce.ObjectExtensions.isNullOrUndefined(error) && !error.isUserError;
            });
        };
        ErrorHelper._errorIsOfType = function (error, errorType) {
            var errorResourceMetadata = !Commerce.ObjectExtensions.isNullOrUndefined(error.ErrorCode)
                ? ErrorTypeEnum[error.ErrorCode.toUpperCase()]
                : null;
            var errorTypeValue = null;
            if (Commerce.ObjectExtensions.isString(errorResourceMetadata)) {
                errorTypeValue = errorResourceMetadata;
            }
            else if (!Commerce.ObjectExtensions.isNullOrUndefined(errorResourceMetadata)
                && !Commerce.ObjectExtensions.isNullOrUndefined(errorResourceMetadata.messageResource)) {
                errorTypeValue = errorResourceMetadata.messageResource;
            }
            return !Commerce.StringExtensions.compare(errorType, error.ErrorCode, true) || !Commerce.StringExtensions.compare(errorType, errorTypeValue, true);
        };
        ErrorHelper._isInformational = function (error) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                return false;
            }
            return (ErrorHelper._errorIsOfType(error, ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REQUIREDREASONCODESMISSING.serverErrorCode) ||
                (!Commerce.ObjectExtensions.isNullOrUndefined(error.commerceException) &&
                    (error.commerceException instanceof Commerce.Proxy.Entities.MissingRequiredReasonCodeExceptionClass)));
        };
        ErrorHelper.HTTPRESPONSE_DNS = "DNS";
        ErrorHelper.HTTPRESPONSE_TIMED = "TIMED";
        ErrorHelper.HTTPRESPONSE_FAILED = "FAILED";
        ErrorHelper.HTTPRESPONSE_OUT = "OUT";
        ErrorHelper.HTTPRESPONSE_FIREWALL = "FIREWALL";
        ErrorHelper.MICROSOFT_DYNAMICS_PREFIX = "Microsoft_Dynamics";
        ErrorHelper.AGGREGATED_ERROR_RESOUCEIDS = [
            "Microsoft_Dynamics_Commerce_Runtime_AggregateValidationError",
            "Microsoft_Dynamics_Commerce_Runtime_AggregateCommunicationError",
            "Microsoft_Dynamics_Commerce_Runtime_InvalidCartLinesAggregateError"
        ];
        ErrorHelper.COMMERCE_ERROR_CODE_FORMAT = new RegExp("string_\\d+", "i");
        return ErrorHelper;
    }());
    Commerce.ErrorHelper = ErrorHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MessageType;
    (function (MessageType) {
        MessageType[MessageType["Info"] = 0] = "Info";
        MessageType[MessageType["Error"] = 1] = "Error";
    })(MessageType = Commerce.MessageType || (Commerce.MessageType = {}));
    var MessageBoxButtons;
    (function (MessageBoxButtons) {
        MessageBoxButtons[MessageBoxButtons["Default"] = 0] = "Default";
        MessageBoxButtons[MessageBoxButtons["OKCancel"] = 1] = "OKCancel";
        MessageBoxButtons[MessageBoxButtons["YesNo"] = 2] = "YesNo";
        MessageBoxButtons[MessageBoxButtons["RetryNo"] = 3] = "RetryNo";
    })(MessageBoxButtons = Commerce.MessageBoxButtons || (Commerce.MessageBoxButtons = {}));
    var DialogResult;
    (function (DialogResult) {
        DialogResult[DialogResult["Close"] = 0] = "Close";
        DialogResult[DialogResult["OK"] = 1] = "OK";
        DialogResult[DialogResult["Cancel"] = 2] = "Cancel";
        DialogResult[DialogResult["Yes"] = 3] = "Yes";
        DialogResult[DialogResult["No"] = 4] = "No";
    })(DialogResult = Commerce.DialogResult || (Commerce.DialogResult = {}));
    var FormattedErrorMessage = (function () {
        function FormattedErrorMessage() {
            this._appendedMessages = [];
            this._isEmpty = true;
        }
        Object.defineProperty(FormattedErrorMessage.prototype, "errorMessage", {
            get: function () {
                return this._errorMessage;
            },
            set: function (errorMessage) {
                this._errorMessage = errorMessage;
                this._isEmpty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattedErrorMessage.prototype, "aggregateErrorMessage", {
            get: function () {
                return this._aggregateErrorMessage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattedErrorMessage.prototype, "additionalInfo", {
            get: function () {
                return this._additionalInfo;
            },
            set: function (additionalInfo) {
                this._additionalInfo = additionalInfo;
                this._isEmpty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattedErrorMessage.prototype, "aggregateAdditionalInfo", {
            get: function () {
                return this._aggregateAdditionalInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattedErrorMessage.prototype, "appendedMessages", {
            get: function () {
                return this._appendedMessages;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattedErrorMessage.prototype, "clientResourceID", {
            get: function () {
                return this._clientResourceID;
            },
            set: function (clientResourceID) {
                this._clientResourceID = clientResourceID;
                this._isEmpty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattedErrorMessage.prototype, "serverResourceID", {
            get: function () {
                return this._serverResourceID;
            },
            set: function (serverResourceID) {
                this._serverResourceID = serverResourceID;
                this._isEmpty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattedErrorMessage.prototype, "additionalInfoResourceID", {
            get: function () {
                return this._additionalInfoResourceID;
            },
            set: function (additionalInfoResourceID) {
                this._additionalInfoResourceID = additionalInfoResourceID;
                this._isEmpty = false;
            },
            enumerable: true,
            configurable: true
        });
        FormattedErrorMessage.prototype.append = function (appendMessage) {
            if (this._isEmpty) {
                this.errorMessage = appendMessage.errorMessage;
                this.additionalInfo = appendMessage.additionalInfo;
                this.serverResourceID = appendMessage.serverResourceID;
                this.clientResourceID = appendMessage.clientResourceID;
                this.additionalInfoResourceID = appendMessage.additionalInfoResourceID;
            }
            else {
                this.appendedMessages.push(appendMessage);
            }
            this._aggregateErrorMessage =
                FormattedErrorMessage.appendString(this._aggregateErrorMessage, appendMessage.errorMessage);
            this._aggregateAdditionalInfo =
                FormattedErrorMessage.appendString(this._aggregateAdditionalInfo, appendMessage.additionalInfo);
        };
        FormattedErrorMessage.appendString = function (originalStr, appendStr) {
            return appendStr ? originalStr ? originalStr + "\n" + appendStr : appendStr : originalStr;
        };
        return FormattedErrorMessage;
    }());
    Commerce.FormattedErrorMessage = FormattedErrorMessage;
    var NotificationHandler = (function () {
        function NotificationHandler() {
        }
        NotificationHandler.displayClientErrorsWithShowAgain = function (errors, titleResourceID) {
            errors = NotificationHandler.getUnhandledErrors(errors);
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                var message = NotificationHandler.getFormattedErrorMessage(errors);
                var correlationID = NotificationHandler.logFormattedErrorMessage(message, titleResourceID);
                var messageOptions = {
                    titleResx: titleResourceID,
                    additionalInfoResx: message.aggregateAdditionalInfo,
                    messageType: MessageType.Error,
                    displayMessageCheckbox: true,
                    messageCheckboxChecked: false,
                    messageCheckboxLabelResourceID: null
                };
                return Commerce.ViewModelAdapter.displayMessageWithOptions(message.aggregateErrorMessage, messageOptions, correlationID);
            }
            var asyncResult = new Commerce.AsyncResult(null);
            var dialogResult = DialogResult.Close;
            asyncResult.resolve({ dialogResult: dialogResult, messageCheckboxChecked: false });
            return asyncResult;
        };
        NotificationHandler.displayClientErrors = function (errors, titleResourceID) {
            errors = NotificationHandler.getUnhandledErrors(errors);
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                var message = NotificationHandler.getFormattedErrorMessage(errors);
                if (!Commerce.ObjectExtensions.isString(titleResourceID) || Commerce.StringExtensions.isNullOrWhitespace(titleResourceID)) {
                    for (var i = 0; i < errors.length; ++i) {
                        var currentError = errors[i];
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(currentError)
                            && Commerce.ObjectExtensions.isString(currentError.errorTitleResourceId)
                            && !Commerce.StringExtensions.isNullOrWhitespace(currentError.errorTitleResourceId)) {
                            titleResourceID = currentError.errorTitleResourceId;
                            break;
                        }
                    }
                }
                var correlationID = NotificationHandler.logFormattedErrorMessage(message, titleResourceID);
                var messageOptions = {
                    titleResx: titleResourceID,
                    additionalInfoResx: message.aggregateAdditionalInfo,
                    messageType: MessageType.Error
                };
                return Commerce.ViewModelAdapter.displayMessageWithOptions(message.aggregateErrorMessage, messageOptions, correlationID);
            }
            var asyncResult = new Commerce.AsyncResult();
            asyncResult.resolve({ dialogResult: DialogResult.Close });
            return asyncResult;
        };
        NotificationHandler.displayErrorMessage = function (resourceID) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            var _a;
            return (_a = Commerce.ViewModelAdapter).displayMessage.apply(_a, [resourceID, MessageType.Error, null, null, 0].concat(params));
        };
        NotificationHandler.getErrorMessage = function (errors) {
            return NotificationHandler.clientError(errors).errorMessage;
        };
        NotificationHandler.getResourceIDAndCultureString = function (titleResourceID, messageResourceID, additionalInfoResourceID, serverResourceID) {
            var defaultResourceId = "unknown";
            var titleResID = Commerce.ObjectExtensions.isNullOrUndefined(titleResourceID) ? defaultResourceId : titleResourceID;
            var clientResID = Commerce.ObjectExtensions.isNullOrUndefined(messageResourceID) ? defaultResourceId : messageResourceID;
            var addInfoResID = Commerce.ObjectExtensions.isNullOrUndefined(additionalInfoResourceID) ? defaultResourceId : additionalInfoResourceID;
            var serverResID = Commerce.ObjectExtensions.isNullOrUndefined(serverResourceID) ? defaultResourceId : serverResourceID;
            var resourceIDAndCulture = [titleResID, clientResID, addInfoResID, serverResID, Commerce.ViewModelAdapter.getCurrentAppLanguage()].join(";");
            return resourceIDAndCulture;
        };
        NotificationHandler.getFormattedErrorMessage = function (errors) {
            var message = new FormattedErrorMessage();
            var limitOfErrorLines = 5;
            var previousMessageCodes = [];
            if (Commerce.ArrayExtensions.hasElements(errors)) {
                for (var i = 0; i < errors.length && i < limitOfErrorLines; i++) {
                    var error = errors[i];
                    var currentMessage = void 0;
                    currentMessage = NotificationHandler.clientError(error);
                    if (errors.length > 1 && Commerce.ErrorHelper.isAggregatedErrorResourceId(error.ErrorCode)) {
                        continue;
                    }
                    if (previousMessageCodes.indexOf(error.ErrorCode) !== -1) {
                        continue;
                    }
                    previousMessageCodes.push(error.ErrorCode);
                    message.append(currentMessage);
                }
            }
            return message;
        };
        NotificationHandler.clientError = function (clientError) {
            var message = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(clientError)) {
                message = Commerce.ErrorHelper.getFormattedErrorMessage(clientError);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(message)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(clientError.extraData)
                    && !Commerce.StringExtensions.isNullOrWhitespace(clientError.extraData.additionalInfo)) {
                    message.additionalInfoResourceID = clientError.extraData.additionalInfo;
                    message.additionalInfo = Commerce.ViewModelAdapter.getResourceString(message.additionalInfoResourceID);
                }
            }
            else {
                message = new FormattedErrorMessage();
            }
            return message;
        };
        NotificationHandler.logFormattedErrorMessage = function (formattedErrorMessage, titleResourceID) {
            var correlationID = TsLogging.Utils.generateGuid();
            var allFormattedErrorMessages = [formattedErrorMessage].concat(formattedErrorMessage.appendedMessages);
            var title = Commerce.ViewModelAdapter.getResourceString(titleResourceID);
            allFormattedErrorMessages.forEach(function (currentMessage, index, array) {
                var resourceIDsAndCulture = NotificationHandler.getResourceIDAndCultureString(titleResourceID, currentMessage.clientResourceID, currentMessage.additionalInfo, currentMessage.serverResourceID);
                Commerce.RetailLogger.individualMessageDisplayed(MessageType[MessageType.Error], resourceIDsAndCulture, title, currentMessage.errorMessage, currentMessage.additionalInfo, correlationID);
            });
            return correlationID;
        };
        NotificationHandler.getUnhandledErrors = function (errors) {
            errors = Commerce.ObjectExtensions.isNullOrUndefined(errors) ? [] : errors;
            return errors.filter(function (value, index, array) {
                return !value.handled;
            });
        };
        return NotificationHandler;
    }());
    Commerce.NotificationHandler = NotificationHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AsyncDialogResult = (function () {
        function AsyncDialogResult(callerContext) {
            this._callerContext = callerContext;
            this.clear();
        }
        AsyncDialogResult.prototype.clear = function () {
            this._failed = false;
            this._succeded = {};
            this._onDialogResultCallbacks = {};
            this._onErrorCallbacks = [];
            this._result = undefined;
        };
        AsyncDialogResult.prototype.resolve = function (dialogResult, result) {
            if (result === void 0) { result = null; }
            var key = Commerce.DialogResult[dialogResult];
            this._succeded[key] = true;
            this._result = result;
            this._onErrorCallbacks = [];
            Commerce.FunctionQueueHelper.callFunctionsAsync(this.getDialogResultCallbackQueue(key), this._callerContext, this._result, dialogResult);
        };
        AsyncDialogResult.prototype.reject = function (errors) {
            this._failed = true;
            this._errors = errors;
            this._onDialogResultCallbacks = {};
            Commerce.FunctionQueueHelper.callFunctionsAsync(this._onErrorCallbacks, this._callerContext, this._errors);
        };
        AsyncDialogResult.prototype.on = function (dialogResult, callback) {
            var _this = this;
            var key = Commerce.DialogResult[dialogResult];
            if (this._succeded[key] && callback) {
                Commerce.Host.instance.timers.setImmediate(function () {
                    callback.call(_this._callerContext, _this._result, dialogResult);
                });
            }
            else {
                this.getDialogResultCallbackQueue(key).push(callback);
            }
            return this;
        };
        AsyncDialogResult.prototype.onAny = function (callback) {
            var _this = this;
            var dialogResultKeys = Object.keys(Commerce.DialogResult);
            var key = Commerce.ArrayExtensions.firstOrUndefined(dialogResultKeys, function (resultKey) {
                return !Commerce.ObjectExtensions.isNullOrUndefined(_this._succeded[resultKey]);
            });
            if (!Commerce.ObjectExtensions.isNullOrUndefined(key) && callback) {
                var dialogResultValue_1 = Commerce.DialogResult[key];
                Commerce.Host.instance.timers.setImmediate(function () {
                    callback.call(_this._callerContext, _this._result, dialogResultValue_1);
                });
            }
            else {
                dialogResultKeys.forEach(function (dialogResultKey) {
                    _this.getDialogResultCallbackQueue(Commerce.DialogResult[dialogResultKey]).push(callback);
                });
            }
            return this;
        };
        AsyncDialogResult.prototype.onError = function (callback) {
            var _this = this;
            if (this._failed && callback) {
                Commerce.Host.instance.timers.setImmediate(function () {
                    callback.call(_this._callerContext, _this._errors);
                });
            }
            else {
                if (!this._onErrorCallbacks) {
                    this._onErrorCallbacks = [];
                }
                this._onErrorCallbacks.push(callback);
            }
            return this;
        };
        AsyncDialogResult.prototype.getDialogResultCallbackQueue = function (key) {
            if (!this._onDialogResultCallbacks[key]) {
                this._onDialogResultCallbacks[key] = [];
            }
            return this._onDialogResultCallbacks[key];
        };
        return AsyncDialogResult;
    }());
    Commerce.AsyncDialogResult = AsyncDialogResult;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MessageOptions = (function () {
        function MessageOptions() {
            this.messageType = Commerce.MessageType.Info;
            this.messageButtons = Commerce.MessageBoxButtons.Default;
            this.displayMessageCheckbox = false;
            this.messageCheckboxChecked = false;
        }
        return MessageOptions;
    }());
    Commerce.MessageOptions = MessageOptions;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var Lazy = (function () {
        function Lazy(valueFactory) {
            this._valueFactory = valueFactory;
        }
        Object.defineProperty(Lazy.prototype, "value", {
            get: function () {
                if (this._value === undefined) {
                    this._value = this._valueFactory();
                }
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        return Lazy;
    }());
    Commerce.Lazy = Lazy;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var NullMapController = (function () {
        function NullMapController() {
        }
        NullMapController.prototype.addMessageEventListener = function (listener) {
            return;
        };
        NullMapController.prototype.processMessage = function (msg) {
            return;
        };
        NullMapController.prototype.hasApiKey = function () {
            return false;
        };
        NullMapController.prototype.addMapPin = function (latitude, longitude, pinText) {
            return;
        };
        NullMapController.prototype.setMapView = function (location) {
            return;
        };
        NullMapController.prototype.searchByAddress = function (address) {
            return;
        };
        NullMapController.prototype.removePushpins = function () {
            return;
        };
        NullMapController.prototype.addInfoBox = function (latitude, longitude, title, text, hyperlinkId) {
            return;
        };
        NullMapController.prototype.removeInfobox = function () {
            return;
        };
        NullMapController.prototype.addStoreInfobox = function (storeWrapper, showDetailsUrl) {
            return;
        };
        NullMapController.prototype.dispose = function () {
            return;
        };
        return NullMapController;
    }());
    Commerce.NullMapController = NullMapController;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var NumberSequence = (function () {
        function NumberSequence() {
        }
        NumberSequence.GetNextValue = function (numberSequenceType) {
            if (!NumberSequence.isEnabled) {
                return null;
            }
            var numberSequences = NumberSequence.load();
            var value = numberSequences[numberSequenceType];
            if (!value) {
                value = 1;
            }
            numberSequences[numberSequenceType] = value + 1;
            NumberSequence.save(numberSequences);
            return value;
        };
        NumberSequence.GetNextTransactionId = function () {
            if (!NumberSequence.isEnabled) {
                return Commerce.StringExtensions.EMPTY;
            }
            var value = NumberSequence.GetNextValue(Commerce.Proxy.Entities.NumberSequenceSeedType.TransactionId);
            return Commerce.StringExtensions.format(NumberSequence.TRANSACTION_ID_FORMAT, Commerce.ApplicationContext.Instance.deviceConfiguration.StoreNumber, Commerce.ApplicationContext.Instance.deviceConfiguration.TerminalId, value);
        };
        NumberSequence.GetNextReceiptId = function (cart, receiptMasks) {
            var _this = this;
            if (receiptMasks === void 0) { receiptMasks = null; }
            if (!NumberSequence.isEnabled
                || Commerce.ObjectExtensions.isNullOrUndefined(cart)
                || Commerce.StringExtensions.isNullOrWhitespace(cart.Id)) {
                return null;
            }
            var cachedReceiptId = NumberSequence.loadReceiptNumberSequence(cart);
            if (!Commerce.StringExtensions.isNullOrWhitespace(cachedReceiptId)) {
                return cachedReceiptId;
            }
            var receiptMask = Commerce.ArrayExtensions.firstOrUndefined(receiptMasks, function (r) { return r.ReceiptTransactionTypeValue === cart.ReceiptTransactionTypeValue; });
            var numberSequenceSeedTypesToUpdate = [];
            if (!Commerce.ObjectExtensions.isNullOrUndefined(receiptMask) && !receiptMask.IsIndependent) {
                numberSequenceSeedTypesToUpdate = receiptMasks.filter(function (r) { return !r.IsIndependent && r !== receiptMask; })
                    .map(function (r) { return _this.toNumberSequenceSeedType(r.ReceiptTransactionTypeValue); });
            }
            var numberSequenceType = this.toNumberSequenceSeedType(cart.ReceiptTransactionTypeValue);
            numberSequenceSeedTypesToUpdate.push(numberSequenceType);
            var maxReceiptId = numberSequenceSeedTypesToUpdate.reduce(function (maxReceiptId, n) { return maxReceiptId = Math.max(maxReceiptId, NumberSequence.GetNextValue(n)); }, Number.MIN_VALUE);
            var numberSequences = NumberSequence.load();
            numberSequenceSeedTypesToUpdate.forEach(function (n) { return numberSequences[n] = maxReceiptId + 1; });
            NumberSequence.save(numberSequences);
            cachedReceiptId = maxReceiptId.toString();
            NumberSequence.saveReceiptNumberSequence(cart, cachedReceiptId);
            return cachedReceiptId;
        };
        NumberSequence.update = function (numberSequenceSets, correlationId) {
            Commerce.RetailLogger.coreNumberSequenceReceivedSequence(JSON.stringify(numberSequenceSets), correlationId);
            var combinedNumberSequences = [];
            NumberSequence.pickHighestNumberSequenceValues(combinedNumberSequences, numberSequenceSets.Channel);
            NumberSequence.pickHighestNumberSequenceValues(combinedNumberSequences, numberSequenceSets.Offline);
            Commerce.RetailLogger.coreNumberSequenceCombinedSequence(JSON.stringify(combinedNumberSequences), correlationId);
            NumberSequence.save(combinedNumberSequences);
        };
        NumberSequence.pickHighestNumberSequenceValues = function (sequenceSeedDataToUpdate, sequenceSeedDataToRead) {
            sequenceSeedDataToRead.forEach(function (numberSequenceValue) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(sequenceSeedDataToUpdate[numberSequenceValue.DataTypeValue])) {
                    if (numberSequenceValue.DataValue > sequenceSeedDataToUpdate[numberSequenceValue.DataTypeValue]) {
                        sequenceSeedDataToUpdate[numberSequenceValue.DataTypeValue] = numberSequenceValue.DataValue;
                    }
                }
                else {
                    sequenceSeedDataToUpdate[numberSequenceValue.DataTypeValue] = numberSequenceValue.DataValue;
                }
            });
        };
        NumberSequence.load = function () {
            var numberSequencesData = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.NUMBER_SEQUENCES_KEY);
            return numberSequencesData ? JSON.parse(numberSequencesData) : [];
        };
        NumberSequence.save = function (numberSequences) {
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.NUMBER_SEQUENCES_KEY, JSON.stringify(numberSequences));
        };
        NumberSequence.loadReceiptNumberSequence = function (cart) {
            var cartId = cart.Id;
            var receiptTransactionTypeValue = cart.ReceiptTransactionTypeValue;
            var mruReceiptNumberData = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CART_RECEIPT_NUMBER_SEQUENCE_KEY);
            var mruReceiptNumber = mruReceiptNumberData ? JSON.parse(mruReceiptNumberData) : {};
            return mruReceiptNumber[cartId + "-" + receiptTransactionTypeValue];
        };
        NumberSequence.saveReceiptNumberSequence = function (cart, numberSequence) {
            var cartId = cart.Id;
            var receiptTransactionTypeValue = cart.ReceiptTransactionTypeValue;
            var mruReceiptNumber = {};
            mruReceiptNumber[cartId + "-" + receiptTransactionTypeValue] = numberSequence;
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CART_RECEIPT_NUMBER_SEQUENCE_KEY, JSON.stringify(mruReceiptNumber));
        };
        NumberSequence.toNumberSequenceSeedType = function (receiptTransactionType) {
            var numberSequenceType;
            switch (receiptTransactionType) {
                case Commerce.Proxy.Entities.ReceiptTransactionType.Sale:
                    numberSequenceType = Commerce.Proxy.Entities.NumberSequenceSeedType.ReceiptSale;
                    break;
                case Commerce.Proxy.Entities.ReceiptTransactionType.Return:
                    numberSequenceType = Commerce.Proxy.Entities.NumberSequenceSeedType.ReceiptReturn;
                    break;
                case Commerce.Proxy.Entities.ReceiptTransactionType.SalesOrder:
                    numberSequenceType = Commerce.Proxy.Entities.NumberSequenceSeedType.ReceiptSalesOrder;
                    break;
                case Commerce.Proxy.Entities.ReceiptTransactionType.Quote:
                    numberSequenceType = Commerce.Proxy.Entities.NumberSequenceSeedType.ReceiptCustomerQuote;
                    break;
                case Commerce.Proxy.Entities.ReceiptTransactionType.Payment:
                    numberSequenceType = Commerce.Proxy.Entities.NumberSequenceSeedType.ReceiptPayment;
                    break;
                default:
                    numberSequenceType = Commerce.Proxy.Entities.NumberSequenceSeedType.ReceiptDefault;
            }
            return numberSequenceType;
        };
        NumberSequence.isEnabled = false;
        NumberSequence.TRANSACTION_ID_FORMAT = "{0}-{1}-{2}";
        return NumberSequence;
    }());
    Commerce.NumberSequence = NumberSequence;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OperationsManager = (function () {
            function OperationsManager() {
                this.isManagerLoggedOn = false;
            }
            Object.defineProperty(OperationsManager, "instance", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(OperationsManager._instance)) {
                        OperationsManager._instance = new OperationsManager();
                    }
                    return OperationsManager._instance;
                },
                enumerable: true,
                configurable: true
            });
            OperationsManager.prototype.registerOperationHandler = function (operation, correlationId) {
                var request = new Commerce.RegisterLegacyOperationRequest(correlationId, operation);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            OperationsManager.prototype.runOperationWithoutPermissionsCheck = function (id, options) {
                return this.runOperationInternal(id, options, true);
            };
            OperationsManager.prototype.runOperation = function (id, options) {
                return this.runOperationInternal(id, options, false);
            };
            OperationsManager.prototype.revertToSelf = function (correlationId) {
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.RestoreStaffTokenRequest(correlationId)));
            };
            OperationsManager.prototype.canExecuteInOfflineMode = function (operationId) {
                switch (operationId) {
                    case Operations.RetailOperation.ActivateDevice:
                    case Operations.RetailOperation.AddToGiftCard:
                    case Operations.RetailOperation.BlindCloseShift:
                    case Operations.RetailOperation.ChangePassword:
                    case Operations.RetailOperation.CloseShift:
                    case Operations.RetailOperation.DeactivateDevice:
                    case Operations.RetailOperation.GiftCardBalance:
                    case Operations.RetailOperation.LoyaltyCardPointsBalance:
                    case Operations.RetailOperation.InventoryLookup:
                    case Operations.RetailOperation.IssueCreditMemo:
                    case Operations.RetailOperation.IssueGiftCertificate:
                    case Operations.RetailOperation.LoyaltyIssueCard:
                    case Operations.RetailOperation.PayCreditMemo:
                    case Operations.RetailOperation.PayCustomerAccount:
                    case Operations.RetailOperation.PayGiftCertificate:
                    case Operations.RetailOperation.PickingAndReceiving:
                    case Operations.RetailOperation.PrintX:
                    case Operations.RetailOperation.PrintZ:
                    case Operations.RetailOperation.RecallSalesOrder:
                    case Operations.RetailOperation.ResetPassword:
                    case Operations.RetailOperation.SalesInvoice:
                    case Operations.RetailOperation.ShowBlindClosedShifts:
                    case Operations.RetailOperation.StockCount:
                    case Operations.RetailOperation.SuspendShift:
                    case Operations.RetailOperation.TimeRegistration:
                    case Operations.RetailOperation.ViewTimeClockEntries:
                        return false;
                    case Operations.RetailOperation.CreateCustomerOrder:
                        return Commerce.ApplicationContext.Instance.deviceConfiguration.CreateOfflineCustomerOrders;
                    case Operations.RetailOperation.CustomerAdd:
                    case Operations.RetailOperation.CustomerEdit:
                        return Commerce.ApplicationContext.Instance.deviceConfiguration.CreateAsyncCustomers;
                    default:
                        return true;
                }
            };
            OperationsManager.prototype.runOperationInternal = function (id, options, skipManagerPermissionChecks) {
                var operationName = Commerce.Proxy.Entities.RetailOperation[id];
                if (Commerce.StringExtensions.isNullOrWhitespace(operationName)) {
                    operationName = "Unknown";
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    var traceableOperationOptions = options;
                    if (!Commerce.ObjectExtensions.isUndefined(traceableOperationOptions.correlationId)) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(traceableOperationOptions.correlationId)) {
                            traceableOperationOptions.correlationId = correlationId;
                        }
                        else {
                            correlationId = traceableOperationOptions.correlationId;
                        }
                    }
                }
                var request = new Commerce.LegacyOperationRequest(id, correlationId);
                request.options = options;
                request.skipManagerPermissionChecks = skipManagerPermissionChecks;
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (result) {
                    var data;
                    if (!result.canceled) {
                        data = result.data.data;
                    }
                    return { canceled: result.canceled, data: data };
                });
            };
            OperationsManager._instance = null;
            return OperationsManager;
        }());
        Operations.OperationsManager = OperationsManager;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var NumberParser = (function () {
        function NumberParser() {
        }
        NumberParser.prototype.parse = function (input, options) {
            if (input === Commerce.NumberExtensions.decimalSeparator) {
                input = "0" + input;
            }
            var value = Commerce.NumberExtensions.parseNumber(input);
            if (isNaN(value)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var decimalPrecision;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(options) && Commerce.ObjectExtensions.isNumber(options.decimalPrecision)) {
                decimalPrecision = options.decimalPrecision;
            }
            else {
                decimalPrecision = Commerce.NumberExtensions.getDecimalPrecision();
            }
            value = this.roundValue(value, decimalPrecision);
            return Commerce.NumberExtensions.formatNumber(value, decimalPrecision);
        };
        NumberParser.prototype.roundValue = function (value, decimalPrecision) {
            return Commerce.NumberExtensions.roundToNDigits(value, decimalPrecision);
        };
        return NumberParser;
    }());
    Commerce.NumberParser = NumberParser;
    var DecimalNotRequiredParser = (function (_super) {
        __extends(DecimalNotRequiredParser, _super);
        function DecimalNotRequiredParser() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DecimalNotRequiredParser.prototype.parse = function (input, options) {
            this._input = input;
            this._decimalNotRequiredForMinorCurrencyUnit = Commerce.ApplicationContext.Instance.deviceConfiguration.DecimalNotRequiredForMinorCurrencyUnit;
            return _super.prototype.parse.call(this, input, options);
        };
        DecimalNotRequiredParser.prototype.roundValue = function (value, decimalPrecision) {
            var isFractionalValue = this._input.indexOf(Commerce.NumberExtensions.decimalSeparator) !== -1;
            if (!isFractionalValue && this._decimalNotRequiredForMinorCurrencyUnit) {
                value = value / Math.pow(10, decimalPrecision);
            }
            return _super.prototype.roundValue.call(this, value, decimalPrecision);
        };
        return DecimalNotRequiredParser;
    }(NumberParser));
    Commerce.DecimalNotRequiredParser = DecimalNotRequiredParser;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ErrorCode;
    (function (ErrorCode) {
        ErrorCode[ErrorCode["None"] = 0] = "None";
        ErrorCode[ErrorCode["RetrievalTransactionByReferenceInProgress"] = 22155] = "RetrievalTransactionByReferenceInProgress";
        ErrorCode[ErrorCode["NoTransactionFoundByTransactionReference"] = 22156] = "NoTransactionFoundByTransactionReference";
        ErrorCode[ErrorCode["TransactionRetrievalByReferenceNotSupported"] = 22157] = "TransactionRetrievalByReferenceNotSupported";
        ErrorCode[ErrorCode["DuplicateTransactionResultUnknown"] = 22158] = "DuplicateTransactionResultUnknown";
    })(ErrorCode = Commerce.ErrorCode || (Commerce.ErrorCode = {}));
    var PaymentErrorTypeEnum = (function () {
        function PaymentErrorTypeEnum() {
        }
        PaymentErrorTypeEnum[20001] = "InvalidOperation";
        PaymentErrorTypeEnum[20002] = "ApplicationError";
        PaymentErrorTypeEnum[20003] = "GenericCheckDetailsForError";
        PaymentErrorTypeEnum[20004] = "DONotAuthorized";
        PaymentErrorTypeEnum[20005] = "UserAborted";
        PaymentErrorTypeEnum[20119] = "InvalidArgumentTenderAccountNumber";
        PaymentErrorTypeEnum[21001] = "LocaleNotSupported";
        PaymentErrorTypeEnum[21002] = "InvalidMerchantProperty";
        PaymentErrorTypeEnum[21033] = "InvalidVoiceAuthorizationCode";
        PaymentErrorTypeEnum[21035] = "CashBackAmountExceedsTotalAmount";
        PaymentErrorTypeEnum[22001] = "CommunicationError";
        PaymentErrorTypeEnum[22010] = "InvalidArgumentCardTypeNotSupported";
        PaymentErrorTypeEnum[22011] = "VoiceAuthorizationNotSupported";
        PaymentErrorTypeEnum[22012] = "ReauthorizationNotSupported";
        PaymentErrorTypeEnum[22013] = "MultipleCaptureNotSupported";
        PaymentErrorTypeEnum[22014] = "BatchCaptureNotSupported";
        PaymentErrorTypeEnum[22015] = "UnsupportedCurrency";
        PaymentErrorTypeEnum[22016] = "UnsupportedCountry";
        PaymentErrorTypeEnum[22017] = "CannotReauthorizePostCapture";
        PaymentErrorTypeEnum[22018] = "CannotReauthorizePostVoid";
        PaymentErrorTypeEnum[22019] = "ImmediateCaptureNotSupported";
        PaymentErrorTypeEnum[22050] = "CardExpired";
        PaymentErrorTypeEnum[22051] = "ReferToIssuer";
        PaymentErrorTypeEnum[22052] = "NoReply";
        PaymentErrorTypeEnum[22053] = "HoldCallOrPickupCard";
        PaymentErrorTypeEnum[22054] = "InvalidAmount";
        PaymentErrorTypeEnum[22055] = "AccountLengthError";
        PaymentErrorTypeEnum[22056] = "AlreadyReversed";
        PaymentErrorTypeEnum[22057] = "CannotVerifyPin";
        PaymentErrorTypeEnum[22058] = "InvalidCardNumber";
        PaymentErrorTypeEnum[22059] = "InvalidCVV2";
        PaymentErrorTypeEnum[22060] = "CashBackNotAvailable";
        PaymentErrorTypeEnum[22061] = "CardTypeVerificationError";
        PaymentErrorTypeEnum[22062] = "Decline";
        PaymentErrorTypeEnum[22063] = "EncryptionError";
        PaymentErrorTypeEnum[22065] = "NoActionTaken";
        PaymentErrorTypeEnum[22066] = "NoSuchIssuer";
        PaymentErrorTypeEnum[22067] = "PinTriesExceeded";
        PaymentErrorTypeEnum[22068] = "SecurityViolation";
        PaymentErrorTypeEnum[22069] = "ServiceNotAllowed";
        PaymentErrorTypeEnum[22070] = "StopRecurring";
        PaymentErrorTypeEnum[22071] = "WrongPin";
        PaymentErrorTypeEnum[22072] = "CVV2Mismatch";
        PaymentErrorTypeEnum[22073] = "DuplicateTransaction";
        PaymentErrorTypeEnum[22074] = "Reenter";
        PaymentErrorTypeEnum[22075] = "AmountExceedLimit";
        PaymentErrorTypeEnum[22076] = "AuthorizationExpired";
        PaymentErrorTypeEnum[22077] = "AuthorizationAlreadyCompleted";
        PaymentErrorTypeEnum[22078] = "AuthorizationIsVoided";
        PaymentErrorTypeEnum[22090] = "ProcessorDuplicateBatch";
        PaymentErrorTypeEnum[22100] = "AuthorizationFailure";
        PaymentErrorTypeEnum[22102] = "InvalidMerchantConfiguration";
        PaymentErrorTypeEnum[22103] = "InvalidExpirationDate";
        PaymentErrorTypeEnum[22104] = "InvalidCardholderNameFirstNameRequired";
        PaymentErrorTypeEnum[22105] = "InvalidCardholderNameLastNameRequired";
        PaymentErrorTypeEnum[22106] = "FilterDecline";
        PaymentErrorTypeEnum[22107] = "InvalidAddress";
        PaymentErrorTypeEnum[22108] = "CVV2Required";
        PaymentErrorTypeEnum[22109] = "CardTypeNotSupported";
        PaymentErrorTypeEnum[22110] = "UniqueInvoiceNumberRequired";
        PaymentErrorTypeEnum[22111] = "PossibleDuplicate";
        PaymentErrorTypeEnum[22112] = "ProcessorRequiresLinkedRefund";
        PaymentErrorTypeEnum[22113] = "CryptoBoxUnavailable";
        PaymentErrorTypeEnum[22114] = "CVV2Declined";
        PaymentErrorTypeEnum[22115] = "MerchantIdInvalid";
        PaymentErrorTypeEnum[22116] = "TranNotAllowed";
        PaymentErrorTypeEnum[22117] = "TerminalNotFound";
        PaymentErrorTypeEnum[22118] = "InvalidEffectiveDate";
        PaymentErrorTypeEnum[22119] = "InsufficientFunds";
        PaymentErrorTypeEnum[22120] = "ReauthorizationMaxReached";
        PaymentErrorTypeEnum[22121] = "ReauthorizationNotAllowed";
        PaymentErrorTypeEnum[22122] = "DateOfBirthError";
        PaymentErrorTypeEnum[22123] = "EnterLesserAmount";
        PaymentErrorTypeEnum[22124] = "HostKeyError";
        PaymentErrorTypeEnum[22125] = "InvalidCashBackAmount";
        PaymentErrorTypeEnum[22126] = "InvalidTransaction";
        PaymentErrorTypeEnum[22127] = "ImmediateCaptureRequired";
        PaymentErrorTypeEnum[22128] = "ImmediateCaptureRequiredMAC";
        PaymentErrorTypeEnum[22129] = "MACRequired";
        PaymentErrorTypeEnum[22130] = "BankcardNotSet";
        PaymentErrorTypeEnum[22131] = "InvalidRequest";
        PaymentErrorTypeEnum[22132] = "InvalidTransactionFee";
        PaymentErrorTypeEnum[22133] = "NoCheckingAccount";
        PaymentErrorTypeEnum[22134] = "NoSavingsAccount";
        PaymentErrorTypeEnum[22135] = "RestrictedCardTemporarilyDisallowedFromInterchange";
        PaymentErrorTypeEnum[22136] = "MACSecurityFailure";
        PaymentErrorTypeEnum[22137] = "ExceedsWithdrawalFrequencyLimit";
        PaymentErrorTypeEnum[22138] = "InvalidCaptureDate";
        PaymentErrorTypeEnum[22139] = "NoKeysAvailable";
        PaymentErrorTypeEnum[22140] = "KMESyncError";
        PaymentErrorTypeEnum[22141] = "KPESyncError";
        PaymentErrorTypeEnum[22142] = "KMACSyncError";
        PaymentErrorTypeEnum[22143] = "ResubmitExceedsLimit";
        PaymentErrorTypeEnum[22144] = "SystemProblemError";
        PaymentErrorTypeEnum[22145] = "AccountNumberNotFoundForRow";
        PaymentErrorTypeEnum[22146] = "InvalidTokenInfoParameterForRow";
        PaymentErrorTypeEnum[22147] = "ExceptionThrownForRow";
        PaymentErrorTypeEnum[22148] = "TransactionAmountExceedsRemaining";
        PaymentErrorTypeEnum[22149] = "GeneralException";
        PaymentErrorTypeEnum[22150] = "InvalidCardTrackData";
        PaymentErrorTypeEnum[22151] = "InvalidResultAccessCode";
        PaymentErrorTypeEnum[22152] = "ExecuteTaskNotSupported";
        PaymentErrorTypeEnum[22153] = "CardNotActivated";
        PaymentErrorTypeEnum[22154] = "CardAlreadyActivated";
        PaymentErrorTypeEnum[22155] = "RetrievalTransactionByReferenceInProgress";
        PaymentErrorTypeEnum[22156] = "NoTransactionFoundByTransactionReference";
        PaymentErrorTypeEnum[22157] = "TransactionRetrievalByReferenceNotSupported";
        PaymentErrorTypeEnum[22158] = "DuplicateTransactionResultUnknown";
        PaymentErrorTypeEnum[22159] = "GiftCardNumberNotFound";
        return PaymentErrorTypeEnum;
    }());
    Commerce.PaymentErrorTypeEnum = PaymentErrorTypeEnum;
    var PaymentErrorHelper = (function () {
        function PaymentErrorHelper() {
        }
        PaymentErrorHelper.ConvertToClientErrors = function (errors) {
            var paymentErrors = [];
            var paymentSdkErrors = [];
            for (var i = 0; i < errors.length; i++) {
                var paymentException = errors[i].commerceException;
                if (paymentException != null && Commerce.ArrayExtensions.hasElements(paymentException.PaymentSdkErrors)) {
                    paymentSdkErrors = PaymentErrorHelper.ConvertPaymentSdkErrorsToClientErrors(paymentException.PaymentSdkErrors);
                }
                if (Commerce.ArrayExtensions.hasElements(paymentSdkErrors)) {
                    paymentErrors = paymentErrors.concat(paymentSdkErrors);
                }
                else {
                    paymentErrors.push(PaymentErrorHelper.MapPaymentSdkErrorToClientError(errors[i]));
                }
            }
            return paymentErrors;
        };
        PaymentErrorHelper.ConvertPaymentSdkErrorsToClientErrors = function (errors) {
            var paymentErrors = [];
            for (var i = 0; i < errors.length; i++) {
                var code = Commerce.StringExtensions.isNullOrWhitespace(errors[i].Code) ? PaymentErrorTypeEnum[PaymentErrorHelper.GENERAL_EXCEPTION_ERROR_CODE]
                    : errors[i].Code;
                paymentErrors.push(new Commerce.Proxy.Entities.Error(PaymentErrorHelper.PAYMENT_EXCEPTION_NAMESPACE + code.toUpperCase(), false, errors[i].Message));
            }
            return paymentErrors;
        };
        PaymentErrorHelper.MapPaymentSdkErrorToClientError = function (error) {
            var result = PaymentErrorTypeEnum[error.ErrorCode];
            var paymentError = Commerce.ObjectExtensions.isNullOrUndefined(result) ? error
                : new Commerce.Proxy.Entities.Error(PaymentErrorHelper.PAYMENT_EXCEPTION_NAMESPACE + result.toUpperCase(), false, error.ExternalLocalizedErrorMessage);
            return paymentError;
        };
        PaymentErrorHelper.PAYMENT_EXCEPTION_NAMESPACE = "MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_";
        PaymentErrorHelper.GENERAL_EXCEPTION_ERROR_CODE = "22149";
        return PaymentErrorHelper;
    }());
    Commerce.PaymentErrorHelper = PaymentErrorHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var LogData = (function () {
        function LogData() {
        }
        return LogData;
    }());
    var PerformanceLogger = (function () {
        function PerformanceLogger(markName, canBeRootNode, description) {
            this.children = [];
            this.startTime = 0;
            this.endTime = 0;
            this.endTimeExclusive = 0;
            this._numberOfPendingChildren = 0;
            this._parent = null;
            this._canBeRootNode = false;
            this._complete = false;
            if (!PerformanceLogger.isPerformanceLoggerEnabled) {
                return;
            }
            this.markName = markName;
            this.description = description || "";
            this.startTime = window.performance.now();
            this._canBeRootNode = canBeRootNode;
            if (PerformanceLogger.currentNode) {
                PerformanceLogger.currentNode.addChild(this);
                this._parent = PerformanceLogger.currentNode;
                PerformanceLogger.currentNode = this;
            }
            else if (canBeRootNode) {
                PerformanceLogger.allRootNodes.push(this);
                PerformanceLogger.currentNode = this;
            }
        }
        Object.defineProperty(PerformanceLogger, "performanceMarkersEnabled", {
            get: function () {
                if (!Commerce.ObjectExtensions.isBoolean(PerformanceLogger.isPerformanceLoggerEnabled)) {
                    var isPerformanceLoggerEnabledValue = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.PERFORMANCE_LOGGER_SETTINGS);
                    PerformanceLogger.isPerformanceLoggerEnabled = !Commerce.StringExtensions.isEmptyOrWhitespace(isPerformanceLoggerEnabledValue) ?
                        isPerformanceLoggerEnabledValue === "true" : false;
                }
                return PerformanceLogger.isPerformanceLoggerEnabled;
            },
            enumerable: true,
            configurable: true
        });
        PerformanceLogger.markStart = function (markName, canBeRootNode, description) {
            if (canBeRootNode === void 0) { canBeRootNode = false; }
            return new PerformanceLogger(markName, canBeRootNode, description);
        };
        PerformanceLogger.stringify = function (node, offsetChar) {
            return JSON.stringify(node, function (key, value) {
                if (key.indexOf("_") === 0) {
                    value = undefined;
                }
                return value;
            }, offsetChar);
        };
        PerformanceLogger.enableDisablePerformanceMarkers = function (enabled) {
            PerformanceLogger.isPerformanceLoggerEnabled = enabled;
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.PERFORMANCE_LOGGER_SETTINGS, enabled.toString());
            if (enabled) {
                var viewModelsNamespace = "ViewModels";
                var viewControllersNamespace = "ViewControllers";
                PerformanceLogger.instrumentNamespacePerformanceLogs(Commerce.Model.Managers.RetailServer, false, ["ViewControllerBase", "AsyncServiceManager"]);
                PerformanceLogger.instrumentNamespacePerformanceLogs(Commerce.Operations, false, ["OperationsManager"]);
                PerformanceLogger.instrumentNamespacePerformanceLogs(Commerce[viewModelsNamespace], false, ["RetailServerManagerFactory", "ViewModelBase", "AsyncServiceViewModel"]);
                PerformanceLogger.instrumentNamespacePerformanceLogs(Commerce[viewControllersNamespace], true, ["ViewControllerBase"]);
                PerformanceLogger.instrumentClassPerformanceLogs("ApplicationContextLoader", Commerce.ApplicationContextLoader, true);
                if (Commerce.ObjectExtensions.isFunction(Commerce.Host.instance.timers.setImmediate)) {
                    var timersPrototype = Object.getPrototypeOf && Object.getPrototypeOf(Commerce.Host.instance.timers);
                    timersPrototype = timersPrototype && timersPrototype.setImmediate ? timersPrototype : Commerce.Host.instance.timers;
                    var setImmediateOriginal = void 0;
                    setImmediateOriginal = timersPrototype.setImmediate;
                    var setImmediateNew = function (expression) {
                        var args = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            args[_i - 1] = arguments[_i];
                        }
                        expression.apply(undefined, args);
                    };
                    setImmediateNew[PerformanceLogger.originalFunctionKey] = setImmediateOriginal;
                    timersPrototype.setImmediate = setImmediateNew;
                }
            }
            else {
                PerformanceLogger.removeAllInstrumentation();
                var setImmediateOriginal = Commerce.Host.instance.timers.setImmediate[PerformanceLogger.originalFunctionKey];
                if (Commerce.ObjectExtensions.isFunction(setImmediateOriginal)) {
                    Commerce.Host.instance.timers.setImmediate[PerformanceLogger.originalFunctionKey] = undefined;
                    Commerce.Host.instance.timers.setImmediate = setImmediateOriginal;
                }
            }
        };
        PerformanceLogger.logNavigationStart = function (destinationViewName, correlationId) {
            var originViewName = Commerce.ViewModelAdapter.getCurrentViewName();
            if (!Commerce.StringExtensions.isNullOrWhitespace(originViewName)) {
                PerformanceLogger._navigationLog.correlationId = correlationId;
                PerformanceLogger._navigationLog.originViewName = originViewName;
                PerformanceLogger._navigationLog.destinationViewName = destinationViewName;
                PerformanceLogger._navigationLog.isActive = true;
                Commerce.RetailLogger.navigationStartEvent(originViewName, destinationViewName, correlationId);
            }
        };
        PerformanceLogger.logNavigationEnd = function () {
            var viewName = Commerce.ViewModelAdapter.getCurrentViewName();
            var log = PerformanceLogger._navigationLog;
            if (Commerce.StringExtensions.compare(viewName, log.destinationViewName) === 0) {
                if (log.isActive === true) {
                    Commerce.RetailLogger.navigationEndEvent(log.originViewName, log.destinationViewName, log.correlationId);
                }
            }
            log.isActive = false;
        };
        PerformanceLogger.prototype.addChild = function (node) {
            this._numberOfPendingChildren++;
            this.children.push(node);
        };
        PerformanceLogger.prototype.forEach = function (callbackFunction) {
            callbackFunction(this);
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].forEach(callbackFunction);
            }
        };
        PerformanceLogger.prototype.notifyChildComplete = function () {
            this._numberOfPendingChildren--;
            this.logResultsIfAllNodesComplete();
        };
        PerformanceLogger.prototype.dispose = function () {
            this.forEach(function (instance) {
                instance.dispose();
            });
            this._parent = null;
            this.children = null;
        };
        PerformanceLogger.prototype.markEnd = function () {
            if (!PerformanceLogger.isPerformanceLoggerEnabled) {
                return;
            }
            if (this.endTime > 0) {
                throw "Performance tracking for '" + this.markName + "' is already complete. Multiple end markers are not allowed.";
            }
            this.endTimeExclusive = window.performance.now();
            this._complete = true;
            PerformanceLogger.currentNode = this._parent;
            this.logResultsIfAllNodesComplete();
        };
        PerformanceLogger.prototype.logDuration = function (spacer) {
            console.log(spacer + this.markName + " took " + Math.round((this.endTime - this.startTime) * 100) / 100 + "ms " + this.description);
        };
        PerformanceLogger.wrapFunction = function (className, functionName, canBeRootNode, functionReference) {
            var substituteFunction = function () {
                return PerformanceLogger.logExecutionTime((className + "." + functionName), functionReference.bind(this), canBeRootNode, arguments);
            };
            return substituteFunction;
        };
        PerformanceLogger.logExecutionTime = function (name, functionToExecute, canBeRootNode, args) {
            var performanceMarker = PerformanceLogger.markStart(name, canBeRootNode, "");
            var returnValue = functionToExecute.apply(undefined, args);
            var functionExecutionDuration = function () {
                performanceMarker.markEnd();
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(returnValue) && Commerce.ObjectExtensions.isFunction(returnValue.always)) {
                returnValue.always(functionExecutionDuration);
            }
            else {
                functionExecutionDuration();
            }
            return returnValue;
        };
        PerformanceLogger.removeAllInstrumentation = function () {
            PerformanceLogger.instrumentedClasses.forEach(function (classPrototype) {
                PerformanceLogger.removeClassInstrumentation(classPrototype);
            });
            PerformanceLogger.instrumentedClasses = [];
        };
        PerformanceLogger.instrumentClassPerformanceLogs = function (className, classPrototype, canBeRootNode) {
            if (Commerce.ObjectExtensions.isFunction(classPrototype)) {
                PerformanceLogger.instrumentedClasses.push(classPrototype);
                var allClassProperties = Object.getOwnPropertyNames(classPrototype.prototype);
                allClassProperties.forEach(function (propertyName) {
                    if (propertyName.length > 0 && propertyName[0] !== "_") {
                        var propertyDescriptor = Object.getOwnPropertyDescriptor(classPrototype.prototype, propertyName);
                        if (propertyDescriptor.writable) {
                            var classFunction = classPrototype.prototype[propertyName];
                            if (Commerce.ObjectExtensions.isFunction(classFunction)) {
                                var substituteFunction = PerformanceLogger.wrapFunction(className, propertyName, canBeRootNode, classFunction);
                                substituteFunction[PerformanceLogger.originalFunctionKey] = classFunction;
                                classPrototype.prototype[propertyName] = substituteFunction;
                            }
                        }
                    }
                });
            }
        };
        PerformanceLogger.instrumentNamespacePerformanceLogs = function (namespaceReferece, canBeRootNode, ignoreClasses) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(namespaceReferece)) {
                var allNamespaceClasses = Object.getOwnPropertyNames(namespaceReferece);
                allNamespaceClasses.forEach(function (className) {
                    if (ignoreClasses && ignoreClasses.length > 0 && ignoreClasses.indexOf(className) > -1) {
                        return;
                    }
                    var classDescriptor = Object.getOwnPropertyDescriptor(namespaceReferece, className);
                    if (classDescriptor.writable) {
                        var viewModelClass = namespaceReferece[className];
                        PerformanceLogger.instrumentClassPerformanceLogs(className, viewModelClass, canBeRootNode);
                    }
                });
            }
        };
        PerformanceLogger.removeClassInstrumentation = function (classPrototype) {
            if (Commerce.ObjectExtensions.isFunction(classPrototype)) {
                var allClassProperties = Object.getOwnPropertyNames(classPrototype.prototype);
                allClassProperties.forEach(function (propertyName) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(propertyName)) {
                        return;
                    }
                    var propertyDescriptor = Object.getOwnPropertyDescriptor(classPrototype.prototype, propertyName);
                    if (propertyDescriptor.writable) {
                        var substituteFunction = classPrototype.prototype[propertyName];
                        var originalFunction = substituteFunction[PerformanceLogger.originalFunctionKey];
                        substituteFunction[PerformanceLogger.originalFunctionKey] = null;
                        if (Commerce.ObjectExtensions.isFunction(originalFunction)) {
                            classPrototype.prototype[propertyName] = originalFunction;
                        }
                    }
                });
            }
        };
        PerformanceLogger.logNodesAndDispose = function (node, spacer) {
            if (node) {
                node.logDuration(spacer);
                if (node.children.length > 0) {
                    node.children.forEach(function (childNode) {
                        PerformanceLogger.logNodesAndDispose(childNode, spacer + "  ");
                    });
                    node.children = [];
                    node._parent = null;
                }
            }
        };
        PerformanceLogger.prototype.logResultsIfAllNodesComplete = function () {
            if (this._numberOfPendingChildren > 0 || !this._complete) {
                return;
            }
            this.endTime = window.performance.now();
            if (this._parent) {
                this._parent.notifyChildComplete();
            }
            else {
                if (this._canBeRootNode) {
                    PerformanceLogger.logNodesAndDispose(this, "");
                    var rootNodeLocation = PerformanceLogger.allRootNodes.indexOf(this);
                    if (rootNodeLocation >= 0) {
                        PerformanceLogger.allRootNodes.splice(rootNodeLocation, 1);
                    }
                    PerformanceLogger.currentNode = null;
                }
            }
        };
        PerformanceLogger.allRootNodes = [];
        PerformanceLogger.currentNode = null;
        PerformanceLogger.originalFunctionKey = "__PerformanceLogger_OriginalFunction";
        PerformanceLogger.instrumentedClasses = [];
        PerformanceLogger._navigationLog = new LogData();
        return PerformanceLogger;
    }());
    Commerce.PerformanceLogger = PerformanceLogger;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Core;
    (function (Core) {
        "use strict";
        var RegularExpressionValidations = (function () {
            function RegularExpressionValidations() {
            }
            RegularExpressionValidations.validateEmail = function (email) {
                var regex = new RegExp(RegularExpressionValidations.EMAIL_REGEX);
                return regex.test(email);
            };
            RegularExpressionValidations.validateUrl = function (url) {
                var regex = new RegExp("^((http|https|ftp)://)?([^@]+)//.(.+)$");
                return regex.test(url);
            };
            RegularExpressionValidations.EMAIL_REGEX = "^.+@.+\\..+$";
            return RegularExpressionValidations;
        }());
        Core.RegularExpressionValidations = RegularExpressionValidations;
    })(Core = Commerce.Core || (Commerce.Core = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var TenderTypeHelper = (function () {
        function TenderTypeHelper() {
        }
        TenderTypeHelper.isProcessedByMerchant = function (tenderTypeId) {
            var result = false;
            if (!Commerce.StringExtensions.isNullOrWhitespace(tenderTypeId)) {
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderTypeId);
                var isCreditOrDebitCard = tenderType.OperationId === Commerce.Operations.RetailOperation.PayCard;
                var isExternalGiftCard = tenderType.OperationId === Commerce.Operations.RetailOperation.PayGiftCertificate &&
                    !Commerce.StringExtensions.isNullOrWhitespace(tenderType.ConnectorId);
                result = isCreditOrDebitCard || isExternalGiftCard;
            }
            return result;
        };
        TenderTypeHelper.getExecutableTenderTypes = function (tenderTypes) {
            tenderTypes = Commerce.ArrayExtensions.hasElements(tenderTypes) ? tenderTypes : [];
            return tenderTypes.filter(function (tenderType) {
                if (Commerce.LegacyOperationPipeline.instance.hasHandler(tenderType.OperationId)) {
                    var paymentControllerOptions = {
                        tenderType: tenderType,
                        correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                    };
                    var validationErrors = Commerce.LegacyOperationPipeline.instance.validateOptions(tenderType.OperationId, paymentControllerOptions);
                    return !Commerce.ArrayExtensions.hasElements(validationErrors);
                }
                else {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Extensibility.ExtensionOperationProvider)
                        && Commerce.Extensibility.ExtensionOperationProvider.operationRequestExists(tenderType.OperationId);
                }
            });
        };
        TenderTypeHelper.isTenderTypeForSalesTransaction = function (tenderType) {
            return tenderType.OperationId !== 0 && tenderType.Function !== Commerce.Proxy.Entities.TenderFunctionEnum.TenderRemoveFloat;
        };
        return TenderTypeHelper;
    }());
    Commerce.TenderTypeHelper = TenderTypeHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var UserActivityTracker = (function () {
        function UserActivityTracker() {
        }
        UserActivityTracker.detachHandler = function () {
            clearTimeout(UserActivityTracker._userActivityTimeoutId);
            $(document).unbind(UserActivityTracker._userEvents, UserActivityTracker.userActivityHandler);
            UserActivityTracker._lastUserActivityTime = null;
        };
        UserActivityTracker.setupServerConfiguredAutoExitTimeout = function () {
            UserActivityTracker.detachHandler();
            var signOffTimeOutConfig = Commerce.ApplicationContext.Instance.deviceConfiguration.AutoLogOffTimeoutInMinutes;
            if (Commerce.ObjectExtensions.isNullOrUndefined(signOffTimeOutConfig)) {
                signOffTimeOutConfig = UserActivityTracker.DEFAULT_TIMEOUT;
            }
            signOffTimeOutConfig = signOffTimeOutConfig * UserActivityTracker.MILLISECONDS_IN_A_MINUTE;
            if ((signOffTimeOutConfig > 0) &&
                (Commerce.ApplicationContext.Instance.deviceConfiguration.AutoExitMethodValue !== Commerce.Proxy.Entities.AutoExitMethodType.None)) {
                UserActivityTracker._userActivityTimeout = signOffTimeOutConfig;
                $(document).bind(UserActivityTracker._userEvents, UserActivityTracker.userActivityHandler);
                UserActivityTracker._lastUserActivityTime = null;
                UserActivityTracker.autoExitTimeoutHandler(signOffTimeOutConfig, Commerce.ApplicationContext.Instance.deviceConfiguration.AutoExitMethodValue);
            }
        };
        UserActivityTracker.userActivityHandler = function () {
            UserActivityTracker._lastUserActivityTime = window.performance.now();
        };
        UserActivityTracker.autoExitTimeoutHandler = function (timeoutInMilliseconds, autoExitMethodType) {
            UserActivityTracker._userActivityTimeoutId = setTimeout(function () {
                var timeToNextTimeout = UserActivityTracker._userActivityTimeout;
                if (Commerce.ObjectExtensions.isNullOrUndefined(UserActivityTracker._lastUserActivityTime) && Commerce.Utilities.LogonHelper.isLoggedOn()) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.RetailLogger.posAuthentication_AutomaticExitAfterTimeoutTriggered(correlationId, timeoutInMilliseconds);
                    switch (autoExitMethodType) {
                        case Commerce.Proxy.Entities.AutoExitMethodType.Lock:
                            Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.LockTerminal, { correlationId: correlationId });
                            break;
                        default:
                            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId)));
                            break;
                    }
                }
                else {
                    var currentTime = performance.now();
                    var timeInMillisecondsSinceLastActivity = currentTime - UserActivityTracker._lastUserActivityTime;
                    timeToNextTimeout = UserActivityTracker._userActivityTimeout - timeInMillisecondsSinceLastActivity;
                    if (timeToNextTimeout <= 0) {
                        timeToNextTimeout = UserActivityTracker._userActivityTimeout;
                    }
                }
                UserActivityTracker._lastUserActivityTime = null;
                UserActivityTracker.autoExitTimeoutHandler(timeToNextTimeout, autoExitMethodType);
            }, timeoutInMilliseconds);
        };
        UserActivityTracker.MILLISECONDS_IN_A_MINUTE = 60 * 1000;
        UserActivityTracker.DEFAULT_TIMEOUT = 30;
        UserActivityTracker._userEvents = "keypress mousedown touchstart click keydown wheel";
        UserActivityTracker.MINIMUM_TIMEOUT_IN_MILLISECONDS = 1 * UserActivityTracker.MILLISECONDS_IN_A_MINUTE;
        return UserActivityTracker;
    }());
    Commerce.UserActivityTracker = UserActivityTracker;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var Activity = (function () {
            function Activity(context) {
                this.context = context || Object.create(null);
            }
            Activity.prototype.execute = function () {
                throw "Activity method execute not implemented.";
            };
            Activity.prototype.cancel = function () {
                throw "Activity method cancel not implemented.";
            };
            return Activity;
        }());
        Activities.Activity = Activity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.ICartManagerName = "ICartManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetProductsActivity = (function (_super) {
            __extends(GetProductsActivity, _super);
            function GetProductsActivity() {
                return _super.call(this, null) || this;
            }
            return GetProductsActivity;
        }(Activities.Activity));
        Activities.GetProductsActivity = GetProductsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetProductKeyInQuantityActivity = (function (_super) {
            __extends(GetProductKeyInQuantityActivity, _super);
            function GetProductKeyInQuantityActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetProductKeyInQuantityActivity;
        }(Activities.Activity));
        Activities.GetProductKeyInQuantityActivity = GetProductKeyInQuantityActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCartLineWeightActivity = (function (_super) {
            __extends(GetCartLineWeightActivity, _super);
            function GetCartLineWeightActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCartLineWeightActivity;
        }(Activities.Activity));
        Activities.GetCartLineWeightActivity = GetCartLineWeightActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetReasonCodeLinesActivity = (function (_super) {
            __extends(GetReasonCodeLinesActivity, _super);
            function GetReasonCodeLinesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetReasonCodeLinesActivity;
        }(Activities.Activity));
        Activities.GetReasonCodeLinesActivity = GetReasonCodeLinesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetSerialNumberActivity = (function (_super) {
            __extends(GetSerialNumberActivity, _super);
            function GetSerialNumberActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSerialNumberActivity;
        }(Activities.Activity));
        Activities.GetSerialNumberActivity = GetSerialNumberActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var RegisterTimeActivity = (function (_super) {
            __extends(RegisterTimeActivity, _super);
            function RegisterTimeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RegisterTimeActivity;
        }(Activities.Activity));
        Activities.RegisterTimeActivity = RegisterTimeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectVariantActivity = (function (_super) {
            __extends(SelectVariantActivity, _super);
            function SelectVariantActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectVariantActivity;
        }(Activities.Activity));
        Activities.SelectVariantActivity = SelectVariantActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ActivityHelper = (function () {
        function ActivityHelper() {
        }
        ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue = function (cart) {
            var asyncQueue = new Commerce.AsyncQueue();
            var reasonCodeId = Commerce.ApplicationContext.Instance.deviceConfiguration.StartOfTransaction;
            if (Commerce.CartHelper.isInProgress(cart) || Commerce.StringExtensions.isNullOrWhitespace(reasonCodeId)) {
                return asyncQueue;
            }
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var affiliationLines = cart.AffiliationLines;
            asyncQueue.enqueue(function () {
                return Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: cart, affiliationLines: affiliationLines }, function (c) { return cartManager.createOrUpdateCartAsync(c.cart); }, Commerce.Proxy.Entities.ReasonCodeSourceType.StartOfTransaction).run();
            }).cancel(function (result) { return result.canceled; });
            return asyncQueue;
        };
        ActivityHelper.getStartOfTransactionSalesRepresentativeAsyncQueue = function (cart) {
            var asyncQueue = new Commerce.AsyncQueue();
            var cartId = Commerce.ObjectExtensions.isNullOrUndefined(cart) ? null : cart.Id;
            if (!Commerce.StringExtensions.isNullOrWhitespace(cartId) && Commerce.CartHelper.hasProductOrGiftCardLine(cart, true)) {
                return asyncQueue;
            }
            var salesRepresentativeId = Commerce.StringExtensions.EMPTY;
            asyncQueue.enqueue(function () {
                var asyncResult = new Commerce.AsyncResult();
                Commerce.Utilities.SalesRepresentativeHelper.getSalesRepresentativeIdWhenCreatingATransactionAsync()
                    .done(function (commissionSalesGroupId) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroupId)
                        && Commerce.ApplicationContext.Instance.deviceConfiguration.AskForSalesRepresentative
                            !== Commerce.Proxy.Entities.SalesRepPromptType.PromptOnCartLineCreation) {
                        asyncResult.resolve({ canceled: true });
                    }
                    else {
                        salesRepresentativeId = commissionSalesGroupId;
                        asyncResult.resolve({ canceled: false });
                    }
                }).fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            if (Commerce.StringExtensions.isNullOrWhitespace(cartId)) {
                asyncQueue.enqueue(function () {
                    return cartManager.createOrUpdateCartAsync(cart);
                });
            }
            asyncQueue.enqueue(function () {
                return cartManager.updateCommissionSalesGroup(Commerce.Session.instance.cart.Id, null, salesRepresentativeId, false);
            });
            return asyncQueue;
        };
        ActivityHelper.getProductSaleDetailsAsyncQueue = function (productSaleDetails) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (Commerce.ArrayExtensions.hasElements(productSaleDetails)) {
                var productManager_1 = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                var productIdsToBeFetched_1 = [];
                var productSaleDetailsByProductId_1 = Object.create(null);
                productSaleDetails.forEach(function (detail) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(detail.product) && !(Commerce.ObjectExtensions.isNullOrUndefined(detail.productId))) {
                        productSaleDetailsByProductId_1[detail.productId] = detail;
                        productIdsToBeFetched_1.push(detail.productId);
                    }
                });
                if (!Commerce.ArrayExtensions.hasElements(productIdsToBeFetched_1)) {
                    return asyncQueue;
                }
                var channelId_1 = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                if (productIdsToBeFetched_1.length > 1) {
                    asyncQueue.enqueue(function () {
                        return productManager_1.getByIdsAsync(productIdsToBeFetched_1, channelId_1).done(function (products) {
                            products.forEach(function (product) {
                                var detail = productSaleDetailsByProductId_1[product.RecordId];
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(detail)) {
                                    detail.product = product;
                                }
                            });
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        return productManager_1.getByIdAsync(productIdsToBeFetched_1[0], channelId_1).done(function (fetchedProduct) {
                            var productSaleDetail = productSaleDetailsByProductId_1[fetchedProduct.RecordId];
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(productSaleDetail)) {
                                productSaleDetail.product = fetchedProduct;
                            }
                        });
                    });
                }
                return asyncQueue;
            }
            asyncQueue.enqueue(function () {
                var activity = new Commerce.Activities.GetProductsActivity();
                return activity.execute().done(function () {
                    var shouldCancel = Commerce.ObjectExtensions.isNullOrUndefined(activity.response)
                        || !Commerce.ArrayExtensions.hasElements(activity.response.productSaleReturnDetails);
                    if (shouldCancel) {
                        asyncQueue.cancel();
                        return null;
                    }
                    activity.response.productSaleReturnDetails.forEach(function (productDetail) {
                        productSaleDetails.push(productDetail);
                    });
                });
            });
            return asyncQueue;
        };
        ActivityHelper.getProductReturnDetailsAsyncQueue = function (productReturnDetails) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (Commerce.ArrayExtensions.hasElements(productReturnDetails)) {
                return asyncQueue;
            }
            asyncQueue.enqueue(function () {
                var activity = new Commerce.Activities.GetProductsToReturnActivity();
                return activity.execute().done(function () {
                    var shouldCancel = Commerce.ObjectExtensions.isNullOrUndefined(activity.response)
                        || Commerce.ArrayExtensions.hasElements(activity.response.productReturnDetails);
                    if (shouldCancel) {
                        asyncQueue.cancel();
                        return null;
                    }
                    activity.response.productReturnDetails.forEach(function (productDetail) {
                        productReturnDetails.push(productDetail);
                    });
                });
            });
            return asyncQueue;
        };
        ActivityHelper.createCartLinesAsyncQueue = function (productSaleDetails, cartLines) {
            var productQueue = new Commerce.AsyncQueue();
            productQueue.enqueue(function () {
                var hasSerializedProductWithMultipleQuantities = productSaleDetails.some(function (productDetail) {
                    return productDetail.quantity > 1 && productDetail.product.Behavior.HasSerialNumber;
                });
                if (hasSerializedProductWithMultipleQuantities) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_CHANGE_QUANTITY_WHEN_SERIALIZED)]);
                }
                return Commerce.VoidAsyncResult.createResolved();
            });
            productSaleDetails.forEach(function (productDetail) {
                var cartLine = new Commerce.Proxy.Entities.CartLineClass();
                cartLine.ItemId = productDetail.product.ItemId;
                cartLine.Quantity = productDetail.quantity;
                cartLine.TrackingId = productDetail.trackingId;
                cartLine.CatalogId = productDetail.catalogId;
                cartLine.EntryMethodTypeValue = productDetail.entryType;
                if (!Commerce.StringExtensions.isNullOrWhitespace(productDetail.unitOfMeasureSymbol)) {
                    cartLine.UnitOfMeasureSymbol = productDetail.unitOfMeasureSymbol;
                }
                else if ((!Commerce.ObjectExtensions.isNullOrUndefined(productDetail.barcode)) &&
                    (!Commerce.ObjectExtensions.isNullOrUndefined(productDetail.barcode.ItemBarcode)) &&
                    (!Commerce.StringExtensions.isNullOrWhitespace(productDetail.barcode.ItemBarcode.UnitId))) {
                    cartLine.UnitOfMeasureSymbol = productDetail.barcode.ItemBarcode.UnitId;
                }
                else {
                    cartLine.UnitOfMeasureSymbol = productDetail.product.DefaultUnitOfMeasure;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(productDetail.barcode)) {
                    cartLine.Barcode = productDetail.barcode.BarcodeId;
                    if (!Commerce.NumberExtensions.isNullOrZero(productDetail.barcode.BarcodePrice)) {
                        cartLine.PriceInBarcode = true;
                        cartLine.BarcodeEmbeddedPrice = productDetail.barcode.BarcodePrice;
                    }
                }
                productQueue.enqueue(function () {
                    var productIdQueue = ActivityHelper.getProductIdAsyncQueue(productDetail, cartLine);
                    return productQueue.cancelOn(productIdQueue.run());
                });
                productQueue.enqueue(function () {
                    var keyInQuantityQueue = ActivityHelper.getProductKeyInQuantityAsyncQueue(productDetail, cartLine);
                    return productQueue.cancelOn(keyInQuantityQueue.run());
                });
                productQueue.enqueue(function () {
                    cartLine.Description = productDetail.product.Name;
                    Commerce.Session.instance.addToProductsInCartCache(productDetail.product);
                    return Commerce.VoidAsyncResult.createResolved();
                });
                productQueue.enqueue(function () {
                    var serialNumberQueue = ActivityHelper.getSerialNumberForCreateCartLineAsyncQueue(productDetail.product, cartLine);
                    return productQueue.cancelOn(serialNumberQueue.run());
                });
                productQueue.enqueue(function () {
                    var getProductKeyInPriceQueue = ActivityHelper.getProductKeyInPriceAsyncQueue(productDetail, cartLine);
                    return productQueue.cancelOn(getProductKeyInPriceQueue.run());
                });
                productQueue.enqueue(function () {
                    var getProductWeightQueue = ActivityHelper.getProductWeightAsyncQueue(productDetail, cartLine);
                    return productQueue.cancelOn(getProductWeightQueue.run());
                });
                productQueue.enqueue(function () {
                    var getProductKeyInCommentQueue = ActivityHelper.getProductKeyInCommentAsyncQueue(productDetail.product, cartLine);
                    return productQueue.cancelOn(getProductKeyInCommentQueue.run());
                });
                productQueue.enqueue(function () {
                    return Commerce.Utilities.SalesRepresentativeHelper.getSalesRepresentativeIdWhenAddingAnItemAsync(productDetail.product)
                        .done(function (salesRepresentative) {
                        if (Commerce.ApplicationContext.Instance.deviceConfiguration.IsSalesRepRequired
                            && Commerce.ApplicationContext.Instance.deviceConfiguration.AskForSalesRepresentative !== Commerce.Proxy.Entities.SalesRepPromptType.NoPrompt
                            && Commerce.StringExtensions.isNullOrWhitespace(salesRepresentative)) {
                            productQueue.cancel();
                        }
                        else {
                            cartLine.CommissionSalesGroup = salesRepresentative;
                        }
                    });
                });
                productQueue.enqueue(function () {
                    cartLines.push(cartLine);
                    var linkedProductsQueue = ActivityHelper.getLinkedProductsAsyncQueue(productDetail, cartLines);
                    return productQueue.cancelOn(linkedProductsQueue.run());
                });
            });
            return productQueue;
        };
        ActivityHelper.addCartLinesAsyncQueue = function (cartLines, correlationId) {
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            }
            Commerce.RetailLogger.helpersActivityHelperAddCartLinesStarted(correlationId);
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart, cartLines: cartLines }, function (c) { return cartManager.addCartLinesToCartAsync(c.cartLines); }).run();
                return asyncQueue.cancelOn(result)
                    .done(function (addCartLinesResult) {
                    if (addCartLinesResult && !addCartLinesResult.canceled) {
                        Commerce.RetailLogger.helpersActivityHelperNumberOfCartLinesInCart(correlationId, Commerce.Session.instance.cart.CartLines.length.toString());
                        Commerce.RetailLogger.helpersActivityHelperAddCartLinesFinished(correlationId);
                    }
                });
            });
            return asyncQueue;
        };
        ActivityHelper.getSerialNumberForUpdateCartLineAsyncQueue = function (product, cartLine) {
            if (!Commerce.StringExtensions.isNullOrWhitespace(cartLine.SerialNumber)) {
                return new Commerce.AsyncQueue();
            }
            return ActivityHelper.createSerialNumberAsyncQueue(product, cartLine);
        };
        ActivityHelper.createSerialNumberAsyncQueue = function (product, cartLine) {
            var asyncQueue = new Commerce.AsyncQueue();
            var serialNumber;
            if (!Commerce.CustomerOrderHelper.isSerialNumberSupported(product, cartLine)) {
                return asyncQueue;
            }
            asyncQueue.enqueue(function () {
                var getSerialNumberClientRequest = new Commerce.Products.GetSerialNumberClientRequest(product);
                return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getSerialNumberClientRequest)))
                    .done(function (serialNumberResult) {
                    if (serialNumberResult.canceled) {
                        return;
                    }
                    serialNumber = serialNumberResult.data.result;
                    cartLine.SerialNumber = serialNumber;
                });
            }).enqueue(function () {
                var triggerOptions = {
                    product: product,
                    serialNumber: serialNumber,
                    cart: Commerce.Session.instance.cart
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostGetSerialNumber, triggerOptions);
            }).enqueue(function () {
                var reasonCodesQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: [cartLine] }, function (c) {
                    cartLine = c.cartLines[0];
                    return Commerce.VoidAsyncResult.createResolved();
                }, Commerce.Proxy.Entities.ReasonCodeSourceType.SerialNumber);
                return asyncQueue.cancelOn(reasonCodesQueue.run());
            });
            return asyncQueue;
        };
        ActivityHelper.getProductIdAsyncQueue = function (productSaleDetail, cartLine) {
            var asyncQueue = new Commerce.AsyncQueue();
            var product = productSaleDetail.product;
            if (product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone
                || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                cartLine.ProductId = product.RecordId;
                return asyncQueue;
            }
            asyncQueue.enqueue(function () {
                var selectProductVariantClientRequest = new Commerce.Products.SelectProductVariantClientRequest(product, productSaleDetail.preSelectedDimensions);
                return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectProductVariantClientRequest)))
                    .done(function (variantSelectionResult) {
                    if (!variantSelectionResult.canceled) {
                        var variantProduct = variantSelectionResult.data.result;
                        cartLine.ProductId = variantProduct.RecordId;
                        productSaleDetail.product = variantProduct;
                    }
                });
            });
            return asyncQueue;
        };
        ActivityHelper.getProductKeyInPriceAsyncQueue = function (productDetail, cartLine) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.ObjectExtensions.isNullOrUndefined(productDetail.barcode) && !Commerce.NumberExtensions.isNullOrZero(productDetail.barcode.BarcodePrice)) {
                return asyncQueue;
            }
            var min;
            var max;
            var minPriceInclusive;
            var maxPriceInclusive;
            var validationError = null;
            var product = productDetail.product;
            if (product.Price !== 0) {
                switch (product.Behavior.KeyInPriceValue) {
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.None):
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.NotAllowed):
                        return asyncQueue;
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.NewPrice):
                        min = 0;
                        max = Number.MAX_VALUE;
                        break;
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.HigherOrEqualPrice):
                        min = product.Price;
                        max = Number.MAX_VALUE;
                        break;
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.LowerOrEqualPrice):
                        min = 0;
                        max = product.Price;
                        break;
                }
                minPriceInclusive = true;
                maxPriceInclusive = true;
            }
            else {
                var mustKeyInPriceIfZero = Commerce.ApplicationContext.Instance.deviceConfiguration.MustKeyInPriceIfZero;
                var zeroPriceValid = product.Behavior.IsZeroSalePriceAllowed;
                switch (product.Behavior.KeyInPriceValue) {
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.None):
                        if (zeroPriceValid && !mustKeyInPriceIfZero) {
                            return asyncQueue;
                        }
                        else {
                            min = 0;
                            max = Number.MAX_VALUE;
                            minPriceInclusive = zeroPriceValid;
                            maxPriceInclusive = true;
                        }
                        break;
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.NotAllowed):
                        if (zeroPriceValid) {
                            return asyncQueue;
                        }
                        else {
                            validationError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ITEM_ADD_INVALID_NON_UPDATABLE_PRICE, false, null, null, product.Name);
                        }
                        break;
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.NewPrice):
                        min = 0;
                        max = Number.MAX_VALUE;
                        minPriceInclusive = zeroPriceValid;
                        maxPriceInclusive = true;
                        break;
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.HigherOrEqualPrice):
                        min = product.Price;
                        max = Number.MAX_VALUE;
                        minPriceInclusive = zeroPriceValid;
                        maxPriceInclusive = true;
                        break;
                    case (Commerce.Proxy.Entities.KeyInPriceRestriction.LowerOrEqualPrice):
                        if (zeroPriceValid) {
                            min = 0;
                            max = product.Price;
                            minPriceInclusive = true;
                            maxPriceInclusive = true;
                        }
                        else {
                            validationError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ITEM_ADD_INVALID_NON_UPDATABLE_PRICE, false, null, null, product.Name);
                        }
                        break;
                }
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(validationError)) {
                asyncQueue.enqueue(function () { return Commerce.AsyncResult.createRejected([validationError]); });
            }
            else {
                asyncQueue.enqueue(function () {
                    var getProductKeyInPriceClientRequest = new Commerce.GetKeyedInPriceClientRequest(product.RecordId, min, max, minPriceInclusive, maxPriceInclusive);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getProductKeyInPriceClientRequest)))
                        .done(function (keyInPriceResult) {
                        if (keyInPriceResult.canceled) {
                            return;
                        }
                        cartLine.IsPriceKeyedIn = true;
                        cartLine.Price = keyInPriceResult.data.result;
                    });
                });
            }
            return asyncQueue;
        };
        ActivityHelper.getProductKeyInQuantityAsyncQueue = function (productDetails, cartLine) {
            var asyncQueue = new Commerce.AsyncQueue();
            var product = productDetails.product;
            if (product.Behavior.MustWeighProductAtSale) {
                return asyncQueue;
            }
            if (cartLine.Quantity > 0) {
                return asyncQueue;
            }
            if (product.Behavior.KeyInQuantityValue === Commerce.Proxy.Entities.KeyInQuantityRestriction.Required) {
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetProductKeyInQuantityActivity({ product: product });
                    return activity.execute().done(function () {
                        if (!activity.response) {
                            asyncQueue.cancel();
                            return;
                        }
                        cartLine.Quantity = activity.response.keyInQuantity;
                    });
                });
            }
            else {
                if (Commerce.NumberExtensions.isNullOrZero(productDetails.quantity)) {
                    productDetails.quantity = product.Behavior.IsNegativeQuantityAllowed ? -1 : 1;
                }
                cartLine.Quantity = productDetails.quantity;
            }
            return asyncQueue;
        };
        ActivityHelper.getProductKeyInCommentAsyncQueue = function (product, cartLine) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (!product.Behavior.MustKeyInComment) {
                return asyncQueue;
            }
            asyncQueue.enqueue(function () {
                var activity = new Commerce.Activities.GetCartLineCommentsActivity({ cartLines: [cartLine] });
                return activity.execute().done(function () {
                    if (!activity.response) {
                        asyncQueue.cancel();
                        return;
                    }
                    cartLine.Comment = activity.response.comments[0];
                });
            });
            return asyncQueue;
        };
        ActivityHelper.getProductWeightAsyncQueue = function (productSaleDetail, cartLine) {
            var asyncQueue = new Commerce.AsyncQueue();
            var product = productSaleDetail.product;
            if (!product.Behavior.MustWeighProductAtSale) {
                return asyncQueue;
            }
            asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(Commerce.Operations.HardwareStationHelper.selectActiveHardwareStationAsync());
            }).enqueue(function () {
                var activity = new Commerce.Activities.GetCartLineWeightActivity({ cartLine: cartLine });
                return activity.execute().done(function () {
                    if (!activity.response) {
                        asyncQueue.cancel();
                        return;
                    }
                    var sign = 1;
                    if (productSaleDetail.quantity !== 0 && !isNaN(productSaleDetail.quantity)) {
                        sign = productSaleDetail.quantity / Math.abs(productSaleDetail.quantity);
                    }
                    cartLine.Quantity = sign * activity.response.weight;
                });
            });
            return asyncQueue;
        };
        ActivityHelper.getLinkedProductsAsyncQueue = function (productSaleDetail, cartLines) {
            var asyncQueue = new Commerce.AsyncQueue();
            var product = productSaleDetail.product;
            if (!Commerce.ArrayExtensions.hasElements(product.LinkedProducts)) {
                return asyncQueue;
            }
            var linkedProductSaleDetails = null;
            asyncQueue.enqueue(function () {
                linkedProductSaleDetails = product.LinkedProducts.map(function (linkedProduct) {
                    var product = linkedProduct;
                    var sign = 1;
                    if (productSaleDetail.quantity !== 0 && !isNaN(productSaleDetail.quantity)) {
                        sign = productSaleDetail.quantity / Math.abs(productSaleDetail.quantity);
                    }
                    return {
                        product: product,
                        quantity: sign * Math.abs(linkedProduct.Quantity) * Math.abs(productSaleDetail.quantity)
                    };
                });
                var cartLinesQueue = ActivityHelper.createCartLinesAsyncQueue(linkedProductSaleDetails, cartLines);
                return cartLinesQueue.run();
            });
            return asyncQueue;
        };
        ActivityHelper.getSerialNumberForCreateCartLineAsyncQueue = function (product, cartLine) {
            if (!Commerce.CustomerOrderHelper.isSerialNumberSupported(product, cartLine)) {
                return new Commerce.AsyncQueue();
            }
            return ActivityHelper.createSerialNumberAsyncQueue(product, cartLine);
        };
        return ActivityHelper;
    }());
    Commerce.ActivityHelper = ActivityHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var CashManagementActivity = (function (_super) {
            __extends(CashManagementActivity, _super);
            function CashManagementActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CashManagementActivity.prototype.execute = function () {
                throw "CashManagementActivity method execute not implemented.";
            };
            return CashManagementActivity;
        }(Activities.Activity));
        Activities.CashManagementActivity = CashManagementActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ViewVoidSelectionMethod;
        (function (ViewVoidSelectionMethod) {
            ViewVoidSelectionMethod[ViewVoidSelectionMethod["ViewAll"] = 0] = "ViewAll";
            ViewVoidSelectionMethod[ViewVoidSelectionMethod["VoidAll"] = 1] = "VoidAll";
        })(ViewVoidSelectionMethod = Activities.ViewVoidSelectionMethod || (Activities.ViewVoidSelectionMethod = {}));
        var CheckSuspendedTransactionsActivity = (function (_super) {
            __extends(CheckSuspendedTransactionsActivity, _super);
            function CheckSuspendedTransactionsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CheckSuspendedTransactionsActivity;
        }(Activities.Activity));
        Activities.CheckSuspendedTransactionsActivity = CheckSuspendedTransactionsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var RelatedLineVoidMode;
        (function (RelatedLineVoidMode) {
            RelatedLineVoidMode[RelatedLineVoidMode["All"] = 0] = "All";
            RelatedLineVoidMode[RelatedLineVoidMode["Selected"] = 1] = "Selected";
        })(RelatedLineVoidMode = Activities.RelatedLineVoidMode || (Activities.RelatedLineVoidMode = {}));
        var ConfirmRelatedLinesVoidActivity = (function (_super) {
            __extends(ConfirmRelatedLinesVoidActivity, _super);
            function ConfirmRelatedLinesVoidActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ConfirmRelatedLinesVoidActivity;
        }(Activities.Activity));
        Activities.ConfirmRelatedLinesVoidActivity = ConfirmRelatedLinesVoidActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var CreateCashManagementTransactionActivity = (function (_super) {
            __extends(CreateCashManagementTransactionActivity, _super);
            function CreateCashManagementTransactionActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateCashManagementTransactionActivity.prototype.execute = function () {
                throw "CreateCashManagementTransactionActivity method execute not implemented.";
            };
            return CreateCashManagementTransactionActivity;
        }(Activities.Activity));
        Activities.CreateCashManagementTransactionActivity = CreateCashManagementTransactionActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var DepositOverrideActivity = (function (_super) {
            __extends(DepositOverrideActivity, _super);
            function DepositOverrideActivity() {
                return _super.call(this, null) || this;
            }
            return DepositOverrideActivity;
        }(Activities.Activity));
        Activities.DepositOverrideActivity = DepositOverrideActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var DisplayMessageOperationIds = (function () {
            function DisplayMessageOperationIds() {
            }
            DisplayMessageOperationIds.OK = "okButtonClick";
            DisplayMessageOperationIds.CANCEL = "cancelButtonClick";
            DisplayMessageOperationIds.CLOSE = "closeButtonClick";
            DisplayMessageOperationIds.NO = "noButtonClick";
            return DisplayMessageOperationIds;
        }());
        Activities.DisplayMessageOperationIds = DisplayMessageOperationIds;
        var DisplayMessageActivity = (function (_super) {
            __extends(DisplayMessageActivity, _super);
            function DisplayMessageActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DisplayMessageActivity.prototype.execute = function () {
                throw "DisplayMessageActivity method execute not implemented.";
            };
            return DisplayMessageActivity;
        }(Activities.Activity));
        Activities.DisplayMessageActivity = DisplayMessageActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var EditSalesOrderAttributesActivity = (function (_super) {
            __extends(EditSalesOrderAttributesActivity, _super);
            function EditSalesOrderAttributesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            EditSalesOrderAttributesActivity.prototype.execute = function () {
                throw "EditSalesOrderAttributesActivity method execute not implemented.";
            };
            return EditSalesOrderAttributesActivity;
        }(Activities.Activity));
        Activities.EditSalesOrderAttributesActivity = EditSalesOrderAttributesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetAdvancedCustomerSearchActivity = (function (_super) {
            __extends(GetAdvancedCustomerSearchActivity, _super);
            function GetAdvancedCustomerSearchActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetAdvancedCustomerSearchActivity;
        }(Activities.Activity));
        Activities.GetAdvancedCustomerSearchActivity = GetAdvancedCustomerSearchActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetBankBagNumberActivity = (function (_super) {
            __extends(GetBankBagNumberActivity, _super);
            function GetBankBagNumberActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetBankBagNumberActivity;
        }(Activities.Activity));
        Activities.GetBankBagNumberActivity = GetBankBagNumberActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCancellationChargeActivity = (function (_super) {
            __extends(GetCancellationChargeActivity, _super);
            function GetCancellationChargeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCancellationChargeActivity;
        }(Activities.Activity));
        Activities.GetCancellationChargeActivity = GetCancellationChargeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCartLineCommentsActivity = (function (_super) {
            __extends(GetCartLineCommentsActivity, _super);
            function GetCartLineCommentsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCartLineCommentsActivity;
        }(Activities.Activity));
        Activities.GetCartLineCommentsActivity = GetCartLineCommentsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCartLineDiscountsActivity = (function (_super) {
            __extends(GetCartLineDiscountsActivity, _super);
            function GetCartLineDiscountsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCartLineDiscountsActivity;
        }(Activities.Activity));
        Activities.GetCartLineDiscountsActivity = GetCartLineDiscountsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCartLineQuantitiesActivity = (function (_super) {
            __extends(GetCartLineQuantitiesActivity, _super);
            function GetCartLineQuantitiesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCartLineQuantitiesActivity;
        }(Activities.Activity));
        Activities.GetCartLineQuantitiesActivity = GetCartLineQuantitiesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCartLineUnitOfMeasuresActivity = (function (_super) {
            __extends(GetCartLineUnitOfMeasuresActivity, _super);
            function GetCartLineUnitOfMeasuresActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCartLineUnitOfMeasuresActivity;
        }(Activities.Activity));
        Activities.GetCartLineUnitOfMeasuresActivity = GetCartLineUnitOfMeasuresActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCashManagementTransactionAmountActivity = (function (_super) {
            __extends(GetCashManagementTransactionAmountActivity, _super);
            function GetCashManagementTransactionAmountActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetCashManagementTransactionAmountActivity.prototype.execute = function () {
                throw "GetCashManagementTransactionAmountActivity method execute not implemented.";
            };
            return GetCashManagementTransactionAmountActivity;
        }(Activities.Activity));
        Activities.GetCashManagementTransactionAmountActivity = GetCashManagementTransactionAmountActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCashManagementTransactionSourceActivity = (function (_super) {
            __extends(GetCashManagementTransactionSourceActivity, _super);
            function GetCashManagementTransactionSourceActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetCashManagementTransactionSourceActivity.prototype.execute = function () {
                throw "GetCashManagementTransactionSourceActivity method execute not implemented.";
            };
            return GetCashManagementTransactionSourceActivity;
        }(Activities.Activity));
        Activities.GetCashManagementTransactionSourceActivity = GetCashManagementTransactionSourceActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetChargeAmountActivity = (function (_super) {
            __extends(GetChargeAmountActivity, _super);
            function GetChargeAmountActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetChargeAmountActivity;
        }(Activities.Activity));
        Activities.GetChargeAmountActivity = GetChargeAmountActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetChargeCodesActivity = (function (_super) {
            __extends(GetChargeCodesActivity, _super);
            function GetChargeCodesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetChargeCodesActivity;
        }(Activities.Activity));
        Activities.GetChargeCodesActivity = GetChargeCodesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCouponCodeActivity = (function (_super) {
            __extends(GetCouponCodeActivity, _super);
            function GetCouponCodeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCouponCodeActivity;
        }(Activities.Activity));
        Activities.GetCouponCodeActivity = GetCouponCodeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCurrencyAmountActivity = (function (_super) {
            __extends(GetCurrencyAmountActivity, _super);
            function GetCurrencyAmountActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCurrencyAmountActivity;
        }(Activities.Activity));
        Activities.GetCurrencyAmountActivity = GetCurrencyAmountActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCustomerAccountDepositAmountActivity = (function (_super) {
            __extends(GetCustomerAccountDepositAmountActivity, _super);
            function GetCustomerAccountDepositAmountActivity() {
                return _super.call(this, null) || this;
            }
            return GetCustomerAccountDepositAmountActivity;
        }(Activities.Activity));
        Activities.GetCustomerAccountDepositAmountActivity = GetCustomerAccountDepositAmountActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetCustomerAccountDepositLineCommentsActivity = (function (_super) {
            __extends(GetCustomerAccountDepositLineCommentsActivity, _super);
            function GetCustomerAccountDepositLineCommentsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCustomerAccountDepositLineCommentsActivity;
        }(Activities.Activity));
        Activities.GetCustomerAccountDepositLineCommentsActivity = GetCustomerAccountDepositLineCommentsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetDateActivity = (function (_super) {
            __extends(GetDateActivity, _super);
            function GetDateActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetDateActivity;
        }(Activities.Activity));
        Activities.GetDateActivity = GetDateActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetDenominationAmountActivity = (function (_super) {
            __extends(GetDenominationAmountActivity, _super);
            function GetDenominationAmountActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetDenominationAmountActivity;
        }(Activities.Activity));
        Activities.GetDenominationAmountActivity = GetDenominationAmountActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetDenominationQuantityActivity = (function (_super) {
            __extends(GetDenominationQuantityActivity, _super);
            function GetDenominationQuantityActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetDenominationQuantityActivity;
        }(Activities.Activity));
        Activities.GetDenominationQuantityActivity = GetDenominationQuantityActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetDenominationTotalsActivity = (function (_super) {
            __extends(GetDenominationTotalsActivity, _super);
            function GetDenominationTotalsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetDenominationTotalsActivity.prototype.execute = function () {
                return _super.prototype.execute.call(this);
            };
            return GetDenominationTotalsActivity;
        }(Activities.Activity));
        Activities.GetDenominationTotalsActivity = GetDenominationTotalsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetEmailForReceiptActivity = (function (_super) {
            __extends(GetEmailForReceiptActivity, _super);
            function GetEmailForReceiptActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetEmailForReceiptActivity;
        }(Activities.Activity));
        Activities.GetEmailForReceiptActivity = GetEmailForReceiptActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetFulfillmentLineSearchCriteriaActivity = (function (_super) {
            __extends(GetFulfillmentLineSearchCriteriaActivity, _super);
            function GetFulfillmentLineSearchCriteriaActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetFulfillmentLineSearchCriteriaActivity;
        }(Activities.Activity));
        Activities.GetFulfillmentLineSearchCriteriaActivity = GetFulfillmentLineSearchCriteriaActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetIncomeExpenseLineActivity = (function (_super) {
            __extends(GetIncomeExpenseLineActivity, _super);
            function GetIncomeExpenseLineActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetIncomeExpenseLineActivity;
        }(Activities.Activity));
        Activities.GetIncomeExpenseLineActivity = GetIncomeExpenseLineActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetInvoiceCommentActivity = (function (_super) {
            __extends(GetInvoiceCommentActivity, _super);
            function GetInvoiceCommentActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetInvoiceCommentActivity;
        }(Activities.Activity));
        Activities.GetInvoiceCommentActivity = GetInvoiceCommentActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetLoginActivity = (function (_super) {
            __extends(GetLoginActivity, _super);
            function GetLoginActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetLoginActivity;
        }(Activities.Activity));
        Activities.GetLoginActivity = GetLoginActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetLoyaltyCardActivity = (function (_super) {
            __extends(GetLoyaltyCardActivity, _super);
            function GetLoyaltyCardActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetLoyaltyCardActivity;
        }(Activities.Activity));
        Activities.GetLoyaltyCardActivity = GetLoyaltyCardActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetLoyaltyCardBalanceActivity = (function (_super) {
            __extends(GetLoyaltyCardBalanceActivity, _super);
            function GetLoyaltyCardBalanceActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetLoyaltyCardBalanceActivity;
        }(Activities.Activity));
        Activities.GetLoyaltyCardBalanceActivity = GetLoyaltyCardBalanceActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetOrderTypeActivity = (function (_super) {
            __extends(GetOrderTypeActivity, _super);
            function GetOrderTypeActivity() {
                return _super.call(this, null) || this;
            }
            return GetOrderTypeActivity;
        }(Activities.Activity));
        Activities.GetOrderTypeActivity = GetOrderTypeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetPasswordActivity = (function (_super) {
            __extends(GetPasswordActivity, _super);
            function GetPasswordActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetPasswordActivity;
        }(Activities.Activity));
        Activities.GetPasswordActivity = GetPasswordActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetPriceOverrideActivity = (function (_super) {
            __extends(GetPriceOverrideActivity, _super);
            function GetPriceOverrideActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetPriceOverrideActivity;
        }(Activities.Activity));
        Activities.GetPriceOverrideActivity = GetPriceOverrideActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetProductKeyInPriceActivity = (function (_super) {
            __extends(GetProductKeyInPriceActivity, _super);
            function GetProductKeyInPriceActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetProductKeyInPriceActivity;
        }(Activities.Activity));
        Activities.GetProductKeyInPriceActivity = GetProductKeyInPriceActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetProductRefinersActivity = (function (_super) {
            __extends(GetProductRefinersActivity, _super);
            function GetProductRefinersActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetProductRefinersActivity;
        }(Activities.Activity));
        Activities.GetProductRefinersActivity = GetProductRefinersActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetProductsToReturnActivity = (function (_super) {
            __extends(GetProductsToReturnActivity, _super);
            function GetProductsToReturnActivity() {
                return _super.call(this, null) || this;
            }
            return GetProductsToReturnActivity;
        }(Activities.Activity));
        Activities.GetProductsToReturnActivity = GetProductsToReturnActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetQuantityActivity = (function (_super) {
            __extends(GetQuantityActivity, _super);
            function GetQuantityActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetQuantityActivity;
        }(Activities.Activity));
        Activities.GetQuantityActivity = GetQuantityActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetQuotationExpirationDateActivity = (function (_super) {
            __extends(GetQuotationExpirationDateActivity, _super);
            function GetQuotationExpirationDateActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetQuotationExpirationDateActivity;
        }(Activities.Activity));
        Activities.GetQuotationExpirationDateActivity = GetQuotationExpirationDateActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetReconcileLinesDescriptionActivity = (function (_super) {
            __extends(GetReconcileLinesDescriptionActivity, _super);
            function GetReconcileLinesDescriptionActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetReconcileLinesDescriptionActivity;
        }(Activities.Activity));
        Activities.GetReconcileLinesDescriptionActivity = GetReconcileLinesDescriptionActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetRefinerActivity = (function (_super) {
            __extends(GetRefinerActivity, _super);
            function GetRefinerActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetRefinerActivity;
        }(Activities.Activity));
        Activities.GetRefinerActivity = GetRefinerActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetReportFilterValuesActivity = (function (_super) {
            __extends(GetReportFilterValuesActivity, _super);
            function GetReportFilterValuesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetReportFilterValuesActivity;
        }(Activities.Activity));
        Activities.GetReportFilterValuesActivity = GetReportFilterValuesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetReturnChargeActivity = (function (_super) {
            __extends(GetReturnChargeActivity, _super);
            function GetReturnChargeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetReturnChargeActivity;
        }(Activities.Activity));
        Activities.GetReturnChargeActivity = GetReturnChargeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetSalesPersonActivity = (function (_super) {
            __extends(GetSalesPersonActivity, _super);
            function GetSalesPersonActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSalesPersonActivity;
        }(Activities.Activity));
        Activities.GetSalesPersonActivity = GetSalesPersonActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetSalesRepresentativeMode;
        (function (GetSalesRepresentativeMode) {
            GetSalesRepresentativeMode[GetSalesRepresentativeMode["Product"] = 0] = "Product";
            GetSalesRepresentativeMode[GetSalesRepresentativeMode["Line"] = 1] = "Line";
            GetSalesRepresentativeMode[GetSalesRepresentativeMode["Transaction"] = 2] = "Transaction";
        })(GetSalesRepresentativeMode = Activities.GetSalesRepresentativeMode || (Activities.GetSalesRepresentativeMode = {}));
        var GetSalesRepresentativeActivity = (function (_super) {
            __extends(GetSalesRepresentativeActivity, _super);
            function GetSalesRepresentativeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSalesRepresentativeActivity;
        }(Activities.Activity));
        Activities.GetSalesRepresentativeActivity = GetSalesRepresentativeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetSearchTextActivity = (function (_super) {
            __extends(GetSearchTextActivity, _super);
            function GetSearchTextActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSearchTextActivity;
        }(Activities.Activity));
        Activities.GetSearchTextActivity = GetSearchTextActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ShiftActionType;
        (function (ShiftActionType) {
            ShiftActionType[ShiftActionType["AlreadyOpen"] = 0] = "AlreadyOpen";
            ShiftActionType[ShiftActionType["NewShift"] = 1] = "NewShift";
            ShiftActionType[ShiftActionType["ExistingShift"] = 2] = "ExistingShift";
            ShiftActionType[ShiftActionType["NonDrawer"] = 3] = "NonDrawer";
        })(ShiftActionType = Activities.ShiftActionType || (Activities.ShiftActionType = {}));
        var GetShiftActionActivity = (function (_super) {
            __extends(GetShiftActionActivity, _super);
            function GetShiftActionActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetShiftActionActivity;
        }(Activities.Activity));
        Activities.GetShiftActionActivity = GetShiftActionActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetShippingChargeActivity = (function (_super) {
            __extends(GetShippingChargeActivity, _super);
            function GetShippingChargeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetShippingChargeActivity;
        }(Activities.Activity));
        Activities.GetShippingChargeActivity = GetShippingChargeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetShippingDateActivity = (function (_super) {
            __extends(GetShippingDateActivity, _super);
            function GetShippingDateActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetShippingDateActivity;
        }(Activities.Activity));
        Activities.GetShippingDateActivity = GetShippingDateActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetTransactionActivity = (function (_super) {
            __extends(GetTransactionActivity, _super);
            function GetTransactionActivity() {
                return _super.call(this, null) || this;
            }
            return GetTransactionActivity;
        }(Activities.Activity));
        Activities.GetTransactionActivity = GetTransactionActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetTransactionCommentActivity = (function (_super) {
            __extends(GetTransactionCommentActivity, _super);
            function GetTransactionCommentActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetTransactionCommentActivity;
        }(Activities.Activity));
        Activities.GetTransactionCommentActivity = GetTransactionCommentActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetTransactionDiscountActivity = (function (_super) {
            __extends(GetTransactionDiscountActivity, _super);
            function GetTransactionDiscountActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetTransactionDiscountActivity;
        }(Activities.Activity));
        Activities.GetTransactionDiscountActivity = GetTransactionDiscountActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetTransactionReturnLinesActivity = (function (_super) {
            __extends(GetTransactionReturnLinesActivity, _super);
            function GetTransactionReturnLinesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetTransactionReturnLinesActivity;
        }(Activities.Activity));
        Activities.GetTransactionReturnLinesActivity = GetTransactionReturnLinesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var VariantSelectionMethod;
        (function (VariantSelectionMethod) {
            VariantSelectionMethod[VariantSelectionMethod["SelectVariant"] = 0] = "SelectVariant";
            VariantSelectionMethod[VariantSelectionMethod["ViewAllVariants"] = 1] = "ViewAllVariants";
        })(VariantSelectionMethod = Activities.VariantSelectionMethod || (Activities.VariantSelectionMethod = {}));
        var GetVariantSelectionMethodActivity = (function (_super) {
            __extends(GetVariantSelectionMethodActivity, _super);
            function GetVariantSelectionMethodActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetVariantSelectionMethodActivity;
        }(Activities.Activity));
        Activities.GetVariantSelectionMethodActivity = GetVariantSelectionMethodActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GiveChangeBackActivity = (function (_super) {
            __extends(GiveChangeBackActivity, _super);
            function GiveChangeBackActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GiveChangeBackActivity;
        }(Activities.Activity));
        Activities.GiveChangeBackActivity = GiveChangeBackActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var HandleCommentsActivity = (function (_super) {
            __extends(HandleCommentsActivity, _super);
            function HandleCommentsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return HandleCommentsActivity;
        }(Activities.Activity));
        Activities.HandleCommentsActivity = HandleCommentsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RequestHelper = (function () {
        function RequestHelper() {
        }
        RequestHelper.getRequestLocaleInternal = function (query) {
            var locale = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(query) && !Commerce.StringExtensions.isNullOrWhitespace(query.locale)) {
                locale = query.locale;
            }
            else {
                locale = RequestHelper.getRequestLocaleFromConfiguration();
            }
            return locale;
        };
        RequestHelper.getRequestLocaleFromConfiguration = function () {
            var locale = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration) &&
                !Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)) {
                locale = Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName;
            }
            else {
                locale = Commerce.Host.instance.globalization.getApplicationLanguage();
            }
            return locale;
        };
        return RequestHelper;
    }());
    Commerce.RequestHelper = RequestHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var HardwareStationErrorActionType;
            (function (HardwareStationErrorActionType) {
                HardwareStationErrorActionType[HardwareStationErrorActionType["None"] = 0] = "None";
                HardwareStationErrorActionType[HardwareStationErrorActionType["SelectAnotherHardwareStation"] = 1] = "SelectAnotherHardwareStation";
                HardwareStationErrorActionType[HardwareStationErrorActionType["Retry"] = 2] = "Retry";
                HardwareStationErrorActionType[HardwareStationErrorActionType["ForceUnlockPeripheral"] = 3] = "ForceUnlockPeripheral";
            })(HardwareStationErrorActionType = HardwareStation.HardwareStationErrorActionType || (HardwareStation.HardwareStationErrorActionType = {}));
            var PaymentType;
            (function (PaymentType) {
                PaymentType[PaymentType["Unknown"] = 0] = "Unknown";
                PaymentType[PaymentType["AuthorizeOrRefund"] = 1] = "AuthorizeOrRefund";
                PaymentType[PaymentType["Void"] = 2] = "Void";
                PaymentType[PaymentType["CardToken"] = 3] = "CardToken";
                PaymentType[PaymentType["Capture"] = 4] = "Capture";
            })(PaymentType = HardwareStation.PaymentType || (HardwareStation.PaymentType = {}));
            var PeripheralConfigKey = (function () {
                function PeripheralConfigKey() {
                }
                Object.defineProperty(PeripheralConfigKey, "IP_ADDRESS", {
                    get: function () {
                        return "IpAddress";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PeripheralConfigKey, "PORT", {
                    get: function () {
                        return "Port";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PeripheralConfigKey, "TRANSPORT_TYPE", {
                    get: function () {
                        return "Transport";
                    },
                    enumerable: true,
                    configurable: true
                });
                return PeripheralConfigKey;
            }());
            HardwareStation.PeripheralConfigKey = PeripheralConfigKey;
            var TransportType = (function () {
                function TransportType() {
                }
                Object.defineProperty(TransportType, "TCP_TRANSPORT", {
                    get: function () {
                        return "tcp";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TransportType, "TCP_TLS_TRANSPORT", {
                    get: function () {
                        return "tcptls";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TransportType, "SERIAL_TRANSPORT", {
                    get: function () {
                        return "serial";
                    },
                    enumerable: true,
                    configurable: true
                });
                return TransportType;
            }());
            HardwareStation.TransportType = TransportType;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var HardwareStationContext = (function () {
                function HardwareStationContext() {
                }
                Object.defineProperty(HardwareStationContext, "instance", {
                    get: function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(HardwareStationContext._instance)) {
                            HardwareStationContext._instance = new HardwareStationContext();
                        }
                        return HardwareStationContext._instance;
                    },
                    enumerable: true,
                    configurable: true
                });
                HardwareStationContext.setPaymentTransactionReferenceData = function (paymentTransactionReferenceData) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.PAYMENT_TRANSACTION_REFERENCE_DATA, paymentTransactionReferenceData);
                };
                HardwareStationContext.getPaymentTransactionReferenceData = function () {
                    return Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.PAYMENT_TRANSACTION_REFERENCE_DATA);
                };
                HardwareStationContext.clearPaymentTransactionReferenceData = function (removalReason, additionalData, correlationId) {
                    var paymentTransactionReferenceData = HardwareStationContext.getPaymentTransactionReferenceData();
                    if (!Commerce.StringExtensions.isNullOrWhitespace(paymentTransactionReferenceData)) {
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.PAYMENT_TRANSACTION_REFERENCE_DATA, Commerce.StringExtensions.EMPTY);
                        Commerce.RetailLogger.posPaymentRemovingPaymentTransactionReferenceData(paymentTransactionReferenceData, removalReason, additionalData, correlationId);
                    }
                };
                HardwareStationContext.checkErrorsAndClearTransactionReference = function (errors, action, correlationId) {
                    var removeCorrelationId = false;
                    var foundError;
                    if (action === Commerce.PaymentHelper.ACTION_AUTHORIZE_PAYMENT) {
                        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
                            var error = errors_1[_i];
                            if (error.ErrorCode.indexOf(Commerce.PaymentErrorHelper.PAYMENT_EXCEPTION_NAMESPACE) > -1) {
                                foundError = error.ErrorCode;
                                removeCorrelationId = true;
                                HardwareStationContext.clearPaymentTransactionReferenceData("interaction with Hardware Station resulted in Payment Error", foundError, correlationId);
                                break;
                            }
                        }
                    }
                    return removeCorrelationId;
                };
                HardwareStationContext.isRetryableException = function (context) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                        return false;
                    }
                    var isRetryableException = false;
                    var hardwareStationEnabled = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_FEATURE_ENABLE);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(context.errors) && Commerce.ArrayExtensions.hasElements(context.errors)) {
                        for (var index = 0; index < context.errors.length; index++) {
                            var errorCode = context.errors[index].ErrorCode;
                            if (errorCode === "Microsoft_Dynamics_Commerce_HardwareStation_PeripheralLockNotAcquired" ||
                                errorCode === "Microsoft_Dynamics_Commerce_HardwareStation_CardPayment_LockNotAcquired" ||
                                errorCode.indexOf(Commerce.PaymentErrorHelper.PAYMENT_EXCEPTION_NAMESPACE) > -1) {
                                isRetryableException = true;
                                break;
                            }
                        }
                    }
                    return isRetryableException && hardwareStationEnabled === "true";
                };
                HardwareStationContext.executeWithRelock = function (action, relockAction) {
                    var asyncResult = new Commerce.AsyncResult(null);
                    action()
                        .done(function (result) {
                        asyncResult.resolve(result);
                    })
                        .fail(function (errors) {
                        if (HardwareStationContext.isLockNotAcquiredError(errors)) {
                            var asyncQueue = new Commerce.AsyncQueue();
                            asyncQueue.enqueue(function () {
                                return relockAction();
                            }).enqueue(function () {
                                return action()
                                    .done(function (result) {
                                    asyncResult.resolve(result);
                                });
                            });
                            asyncQueue.run()
                                .fail(function (errors) {
                                asyncResult.reject(errors);
                            });
                        }
                        else {
                            asyncResult.reject(errors);
                        }
                    });
                    return asyncResult;
                };
                HardwareStationContext.isLockNotAcquiredError = function (errors) {
                    var error = Commerce.ArrayExtensions.firstOrUndefined(errors);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                        return false;
                    }
                    var code = error.ErrorCode;
                    return (code === "Microsoft_Dynamics_Commerce_HardwareStation_PeripheralLockNotAcquired")
                        || (code === "Microsoft_Dynamics_Commerce_HardwareStation_CardPayment_LockNotAcquired")
                        || (code === "Microsoft_Dynamics_Commerce_HardwareStation_MissingMerchantProperties");
                };
                HardwareStationContext.isLocalStation = function (hardwareStation) {
                    return (hardwareStation && (hardwareStation.url.toUpperCase().indexOf(Peripherals.HardwareStation.HardwareStationContext.localStation) === 0));
                };
                HardwareStationContext.getHardwareStationUrlFromProfile = function (profile) {
                    var hardwareStationUrl = Commerce.StringExtensions.cleanUri(profile.HardwareStationUrl);
                    var applicationType = Commerce.Host.instance.application.getApplicationType();
                    if (this.GUID_URL_REGEXP.test(hardwareStationUrl)) {
                        hardwareStationUrl = hardwareStationUrl.replace(this.GUID_URL_REGEXP, this.localStation);
                    }
                    if (!Commerce.ApplicationHelper.isWebApplicationType(applicationType)) {
                        if (Commerce.UrlHelper.isLocalAddress(hardwareStationUrl)) {
                            hardwareStationUrl = this.localStation;
                        }
                    }
                    return hardwareStationUrl;
                };
                HardwareStationContext.prototype.security = function (hardwareStation) {
                    return new HardwareStation.HardwareStationRequest(hardwareStation, "Security");
                };
                HardwareStationContext.prototype.isActive = function () {
                    var hardwareStationEnabled = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_FEATURE_ENABLE);
                    return !Commerce.ObjectExtensions.isNullOrUndefined(this.getActiveHardwareStation()) && hardwareStationEnabled === "true";
                };
                HardwareStationContext.prototype.peripheral = function (peripheralKind) {
                    var _this = this;
                    var activeHardwareStation = this.isActive() ? this.getActiveHardwareStation() : null;
                    return new HardwareStation.HardwareStationRequest(activeHardwareStation, peripheralKind, function (errors) {
                        if (Commerce.ObjectExtensions.isFunction(_this.onError)) {
                            _this.onError(activeHardwareStation, errors);
                        }
                    });
                };
                HardwareStationContext.prototype.getActiveHardwareStation = function () {
                    return Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                };
                HardwareStationContext.localStation = "IPC://LOCALHOST";
                HardwareStationContext.GUID_REGEXP = /-{[A-F\d-?]{36}}/i;
                HardwareStationContext.GUID_URL_REGEXP = /https:\/\/localhost-{[A-F\d-?]{36}}/i;
                HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT = 600;
                HardwareStationContext.HS_DEFAULT_CARD_PAYMENT_TIMEOUT = 1800;
                HardwareStationContext.HS_DEFAULT_POLLING_TIMEOUT_IN_SECONDS = 30;
                HardwareStationContext._instance = null;
                return HardwareStationContext;
            }());
            HardwareStation.HardwareStationContext = HardwareStationContext;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var HandleHardwareStationErrorActivity = (function (_super) {
            __extends(HandleHardwareStationErrorActivity, _super);
            function HandleHardwareStationErrorActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return HandleHardwareStationErrorActivity;
        }(Activities.Activity));
        Activities.HandleHardwareStationErrorActivity = HandleHardwareStationErrorActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var LoyaltyCardDetailsActivity = (function (_super) {
            __extends(LoyaltyCardDetailsActivity, _super);
            function LoyaltyCardDetailsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return LoyaltyCardDetailsActivity;
        }(Activities.Activity));
        Activities.LoyaltyCardDetailsActivity = LoyaltyCardDetailsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        var ManageChargesDetailsActivity = (function (_super) {
            __extends(ManageChargesDetailsActivity, _super);
            function ManageChargesDetailsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ManageChargesDetailsActivity;
        }(Activities.Activity));
        Activities.ManageChargesDetailsActivity = ManageChargesDetailsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ManageSafeActivity = (function (_super) {
            __extends(ManageSafeActivity, _super);
            function ManageSafeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ManageSafeActivity.prototype.execute = function () {
                throw "ManageSafeActivity method execute not implemented.";
            };
            return ManageSafeActivity;
        }(Activities.Activity));
        Activities.ManageSafeActivity = ManageSafeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var NotifyPasswordExpiredActivity = (function (_super) {
            __extends(NotifyPasswordExpiredActivity, _super);
            function NotifyPasswordExpiredActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NotifyPasswordExpiredActivity;
        }(Activities.Activity));
        Activities.NotifyPasswordExpiredActivity = NotifyPasswordExpiredActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var OverrideHeaderChargeActivity = (function (_super) {
            __extends(OverrideHeaderChargeActivity, _super);
            function OverrideHeaderChargeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return OverrideHeaderChargeActivity;
        }(Activities.Activity));
        Activities.OverrideHeaderChargeActivity = OverrideHeaderChargeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var OverrideLineChargeActivity = (function (_super) {
            __extends(OverrideLineChargeActivity, _super);
            function OverrideLineChargeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return OverrideLineChargeActivity;
        }(Activities.Activity));
        Activities.OverrideLineChargeActivity = OverrideLineChargeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var PaymentTerminalAuthorizeRefundActivity = (function (_super) {
            __extends(PaymentTerminalAuthorizeRefundActivity, _super);
            function PaymentTerminalAuthorizeRefundActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PaymentTerminalAuthorizeRefundActivity;
        }(Activities.Activity));
        Activities.PaymentTerminalAuthorizeRefundActivity = PaymentTerminalAuthorizeRefundActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var PrintReceiptActivity = (function (_super) {
            __extends(PrintReceiptActivity, _super);
            function PrintReceiptActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PrintReceiptActivity;
        }(Activities.Activity));
        Activities.PrintReceiptActivity = PrintReceiptActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ResumeShiftActivity = (function (_super) {
            __extends(ResumeShiftActivity, _super);
            function ResumeShiftActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ResumeShiftActivity;
        }(Activities.Activity));
        Activities.ResumeShiftActivity = ResumeShiftActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectCashDrawerActivity = (function (_super) {
            __extends(SelectCashDrawerActivity, _super);
            function SelectCashDrawerActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectCashDrawerActivity;
        }(Activities.Activity));
        Activities.SelectCashDrawerActivity = SelectCashDrawerActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectCashManagementTransactionEndpointActivity = (function (_super) {
            __extends(SelectCashManagementTransactionEndpointActivity, _super);
            function SelectCashManagementTransactionEndpointActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectCashManagementTransactionEndpointActivity;
        }(Activities.Activity));
        Activities.SelectCashManagementTransactionEndpointActivity = SelectCashManagementTransactionEndpointActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectCouponCodesActivity = (function (_super) {
            __extends(SelectCouponCodesActivity, _super);
            function SelectCouponCodesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectCouponCodesActivity;
        }(Activities.Activity));
        Activities.SelectCouponCodesActivity = SelectCouponCodesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectCustomerActivity = (function (_super) {
            __extends(SelectCustomerActivity, _super);
            function SelectCustomerActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectCustomerActivity.prototype.execute = function () {
                throw "SelectCustomerActivity method execute not implemented.";
            };
            return SelectCustomerActivity;
        }(Activities.Activity));
        Activities.SelectCustomerActivity = SelectCustomerActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectCustomerAffiliationActivity = (function (_super) {
            __extends(SelectCustomerAffiliationActivity, _super);
            function SelectCustomerAffiliationActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectCustomerAffiliationActivity;
        }(Activities.Activity));
        Activities.SelectCustomerAffiliationActivity = SelectCustomerAffiliationActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectCustomerLoyaltyCardActivity = (function (_super) {
            __extends(SelectCustomerLoyaltyCardActivity, _super);
            function SelectCustomerLoyaltyCardActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectCustomerLoyaltyCardActivity;
        }(Activities.Activity));
        Activities.SelectCustomerLoyaltyCardActivity = SelectCustomerLoyaltyCardActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectHardwareStationActivity = (function (_super) {
            __extends(SelectHardwareStationActivity, _super);
            function SelectHardwareStationActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectHardwareStationActivity;
        }(Activities.Activity));
        Activities.SelectHardwareStationActivity = SelectHardwareStationActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectKitComponentSubstituteActivity = (function (_super) {
            __extends(SelectKitComponentSubstituteActivity, _super);
            function SelectKitComponentSubstituteActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectKitComponentSubstituteActivity;
        }(Activities.Activity));
        Activities.SelectKitComponentSubstituteActivity = SelectKitComponentSubstituteActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectLinkedRefundActivity = (function (_super) {
            __extends(SelectLinkedRefundActivity, _super);
            function SelectLinkedRefundActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectLinkedRefundActivity;
        }(Activities.Activity));
        Activities.SelectLinkedRefundActivity = SelectLinkedRefundActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectPackingSlipActivity = (function (_super) {
            __extends(SelectPackingSlipActivity, _super);
            function SelectPackingSlipActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectPackingSlipActivity;
        }(Activities.Activity));
        Activities.SelectPackingSlipActivity = SelectPackingSlipActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectPackingSlipIdActivity = (function (_super) {
            __extends(SelectPackingSlipIdActivity, _super);
            function SelectPackingSlipIdActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectPackingSlipIdActivity;
        }(Activities.Activity));
        Activities.SelectPackingSlipIdActivity = SelectPackingSlipIdActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectProductActivity = (function (_super) {
            __extends(SelectProductActivity, _super);
            function SelectProductActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectProductActivity.prototype.execute = function () {
                throw "SelectProductActivity method execute not implemented.";
            };
            return SelectProductActivity;
        }(Activities.Activity));
        Activities.SelectProductActivity = SelectProductActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectSalesLinesActivity = (function (_super) {
            __extends(SelectSalesLinesActivity, _super);
            function SelectSalesLinesActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectSalesLinesActivity;
        }(Activities.Activity));
        Activities.SelectSalesLinesActivity = SelectSalesLinesActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectSalesLinesForPickUpActivity = (function (_super) {
            __extends(SelectSalesLinesForPickUpActivity, _super);
            function SelectSalesLinesForPickUpActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectSalesLinesForPickUpActivity.prototype.execute = function () {
                throw "SelectSalesLinesForPickUpActivity method execute not implemented.";
            };
            return SelectSalesLinesForPickUpActivity;
        }(Activities.Activity));
        Activities.SelectSalesLinesForPickUpActivity = SelectSalesLinesForPickUpActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectStoreActivity = (function (_super) {
            __extends(SelectStoreActivity, _super);
            function SelectStoreActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectStoreActivity;
        }(Activities.Activity));
        Activities.SelectStoreActivity = SelectStoreActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectTaxOverrideActivity = (function (_super) {
            __extends(SelectTaxOverrideActivity, _super);
            function SelectTaxOverrideActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectTaxOverrideActivity;
        }(Activities.Activity));
        Activities.SelectTaxOverrideActivity = SelectTaxOverrideActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectWarehouseActivity = (function (_super) {
            __extends(SelectWarehouseActivity, _super);
            function SelectWarehouseActivity() {
                return _super.call(this, null) || this;
            }
            return SelectWarehouseActivity;
        }(Activities.Activity));
        Activities.SelectWarehouseActivity = SelectWarehouseActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectWarehouseLocationActivity = (function (_super) {
            __extends(SelectWarehouseLocationActivity, _super);
            function SelectWarehouseLocationActivity() {
                return _super.call(this, null) || this;
            }
            return SelectWarehouseLocationActivity;
        }(Activities.Activity));
        Activities.SelectWarehouseLocationActivity = SelectWarehouseLocationActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SetTransferOrderHeaderActivity = (function (_super) {
            __extends(SetTransferOrderHeaderActivity, _super);
            function SetTransferOrderHeaderActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SetTransferOrderHeaderActivity;
        }(Activities.Activity));
        Activities.SetTransferOrderHeaderActivity = SetTransferOrderHeaderActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ShowLoyaltyExpiringPointsActivity = (function (_super) {
            __extends(ShowLoyaltyExpiringPointsActivity, _super);
            function ShowLoyaltyExpiringPointsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ShowLoyaltyExpiringPointsActivity;
        }(Activities.Activity));
        Activities.ShowLoyaltyExpiringPointsActivity = ShowLoyaltyExpiringPointsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ShowLoyaltyTransactionsActivity = (function (_super) {
            __extends(ShowLoyaltyTransactionsActivity, _super);
            function ShowLoyaltyTransactionsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ShowLoyaltyTransactionsActivity;
        }(Activities.Activity));
        Activities.ShowLoyaltyTransactionsActivity = ShowLoyaltyTransactionsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ShowNoDiscountOnPriceOverriddenWarningActivity = (function (_super) {
            __extends(ShowNoDiscountOnPriceOverriddenWarningActivity, _super);
            function ShowNoDiscountOnPriceOverriddenWarningActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ShowNoDiscountOnPriceOverriddenWarningActivity;
        }(Activities.Activity));
        Activities.ShowNoDiscountOnPriceOverriddenWarningActivity = ShowNoDiscountOnPriceOverriddenWarningActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var TenderCountingActivity = (function (_super) {
            __extends(TenderCountingActivity, _super);
            function TenderCountingActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TenderCountingActivity.prototype.execute = function () {
                throw "TenderCountingActivity method execute not implemented.";
            };
            return TenderCountingActivity;
        }(Activities.Activity));
        Activities.TenderCountingActivity = TenderCountingActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var UserInfoActivity = (function (_super) {
            __extends(UserInfoActivity, _super);
            function UserInfoActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UserInfoActivity;
        }(Activities.Activity));
        Activities.UserInfoActivity = UserInfoActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        "use strict";
        var EmployeeLogonType = Commerce.Proxy.Entities.EmployeeLogonType;
        var AuthenticationProviderManager = (function () {
            function AuthenticationProviderManager() {
                this.implicitGrantProviders = {};
                this.resourceOwnerPasswordGrantProviders = {};
            }
            Object.defineProperty(AuthenticationProviderManager, "instance", {
                get: function () {
                    if (!AuthenticationProviderManager._instance) {
                        AuthenticationProviderManager._instance = new AuthenticationProviderManager();
                    }
                    return AuthenticationProviderManager._instance;
                },
                enumerable: true,
                configurable: true
            });
            AuthenticationProviderManager.prototype.registerImplicitGrantProvider = function (provider, resourceType) {
                this.implicitGrantProviders[resourceType] = provider;
            };
            AuthenticationProviderManager.prototype.registerResourceOwnerPasswordGrantProvider = function (provider, resourceType) {
                this.resourceOwnerPasswordGrantProviders[resourceType] = provider;
            };
            AuthenticationProviderManager.prototype.getImplicitGrantProvider = function (resourceType) {
                return this.implicitGrantProviders[resourceType];
            };
            AuthenticationProviderManager.prototype.getResourceOwnerPasswordGrantProvider = function (resourceType) {
                return this.resourceOwnerPasswordGrantProviders[resourceType];
            };
            AuthenticationProviderManager.prototype.acquireToken = function (resourceType, parameters) {
                var _this = this;
                if (parameters === void 0) { parameters = {}; }
                var queue = new Commerce.AsyncQueue();
                var token = null;
                queue.enqueue(function () {
                    var provider = _this.getImplicitGrantProvider(resourceType);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(provider)) {
                        return provider.acquireTokenWithParam(parameters).done(function (authenticationToken) {
                            token = authenticationToken;
                        });
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var provider = _this.getResourceOwnerPasswordGrantProvider(resourceType);
                    if ((Commerce.Operations.OperationsManager.instance.isManagerLoggedOn &&
                        (Commerce.ApplicationContext.Instance.deviceConfiguration.EmployeeLogonTypeValue === EmployeeLogonType.AzureActiveDirectory) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(provider)) ||
                        (Commerce.ObjectExtensions.isNullOrUndefined(token) && !Commerce.ObjectExtensions.isNullOrUndefined(provider))) {
                        return provider.acquireToken().done(function (authenticationToken) {
                            token = authenticationToken;
                        });
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return queue.run().map(function () {
                    return token;
                });
            };
            AuthenticationProviderManager.prototype.logoff = function (resourceType) {
                var implicit = this.getImplicitGrantProvider(resourceType);
                var owner = this.getResourceOwnerPasswordGrantProvider(resourceType);
                return Commerce.VoidAsyncResult.join([
                    implicit != null ? implicit.logoff() : Commerce.VoidAsyncResult.createResolved(),
                    owner != null ? owner.logoff() : Commerce.VoidAsyncResult.createResolved(),
                ]);
            };
            return AuthenticationProviderManager;
        }());
        Authentication.AuthenticationProviderManager = AuthenticationProviderManager;
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        "use strict";
        var AuthenticationProviderResourceType = (function () {
            function AuthenticationProviderResourceType() {
            }
            AuthenticationProviderResourceType.USER = "USER";
            AuthenticationProviderResourceType.DEVICE = "DEVICE";
            AuthenticationProviderResourceType.LOCATOR_SERVICE = "LOCATOR_SERVICE";
            return AuthenticationProviderResourceType;
        }());
        Authentication.AuthenticationProviderResourceType = AuthenticationProviderResourceType;
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        "use strict";
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        "use strict";
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        "use strict";
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var AddressTypeHelper = (function () {
                function AddressTypeHelper() {
                }
                AddressTypeHelper.getDescription = function (value) {
                    var textValue = null;
                    switch (value) {
                        case Entities.AddressType.AltDlv:
                            textValue = "string_4812";
                            break;
                        case Entities.AddressType.Business:
                            textValue = "string_4813";
                            break;
                        case Entities.AddressType.Consignment_IN:
                            textValue = "string_4814";
                            break;
                        case Entities.AddressType.Delivery:
                            textValue = "string_4815";
                            break;
                        case Entities.AddressType.FixedAsset:
                            textValue = "string_4816";
                            break;
                        case Entities.AddressType.Home:
                            textValue = "string_4817";
                            break;
                        case Entities.AddressType.Invoice:
                            textValue = "string_4818";
                            break;
                        case Entities.AddressType.Lading_W:
                            textValue = "string_4819";
                            break;
                        case Entities.AddressType.None:
                            textValue = "string_4820";
                            break;
                        case Entities.AddressType.Onetime:
                            textValue = "string_4821";
                            break;
                        case Entities.AddressType.Other:
                            textValue = "string_4822";
                            break;
                        case Entities.AddressType.Payment:
                            textValue = "string_4823";
                            break;
                        case Entities.AddressType.Recruit:
                            textValue = "string_4824";
                            break;
                        case Entities.AddressType.RemitTo:
                            textValue = "string_4825";
                            break;
                        case Entities.AddressType.Service:
                            textValue = "string_4826";
                            break;
                        case Entities.AddressType.ShipCarrierThirdPartyShipping:
                            textValue = "string_4827";
                            break;
                        case Entities.AddressType.SMS:
                            textValue = "string_4828";
                            break;
                        case Entities.AddressType.Statement:
                            textValue = "string_4829";
                            break;
                        case Entities.AddressType.SWIFT:
                            textValue = "string_4830";
                            break;
                        case Entities.AddressType.Unlading_W:
                            textValue = "string_4831";
                            break;
                        default:
                            Commerce.RetailLogger.coreHelpersUnknownAddressType(value);
                            break;
                    }
                    return Commerce.ViewModelAdapter.getResourceString(textValue);
                };
                return AddressTypeHelper;
            }());
            Entities.AddressTypeHelper = AddressTypeHelper;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var ApplicationTypeEnum;
            (function (ApplicationTypeEnum) {
                ApplicationTypeEnum[ApplicationTypeEnum["None"] = 0] = "None";
                ApplicationTypeEnum[ApplicationTypeEnum["MposForWindows"] = 2] = "MposForWindows";
                ApplicationTypeEnum[ApplicationTypeEnum["CloudPos"] = 4] = "CloudPos";
                ApplicationTypeEnum[ApplicationTypeEnum["MposForWindowsPhone"] = 5] = "MposForWindowsPhone";
                ApplicationTypeEnum[ApplicationTypeEnum["ModernPOSAndroid"] = 6] = "ModernPOSAndroid";
                ApplicationTypeEnum[ApplicationTypeEnum["ModernPOSIOS"] = 7] = "ModernPOSIOS";
            })(ApplicationTypeEnum = Entities.ApplicationTypeEnum || (Entities.ApplicationTypeEnum = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var CardSource;
            (function (CardSource) {
                CardSource[CardSource["Unknown"] = 0] = "Unknown";
                CardSource[CardSource["Manual"] = 1] = "Manual";
                CardSource[CardSource["MSR"] = 2] = "MSR";
                CardSource[CardSource["PaymentTerminal"] = 3] = "PaymentTerminal";
            })(CardSource = Entities.CardSource || (Entities.CardSource = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var CartLineForDisplay = (function (_super) {
                __extends(CartLineForDisplay, _super);
                function CartLineForDisplay(cartLine, product) {
                    var _this = _super.call(this, cartLine) || this;
                    _this._product = product;
                    return _this;
                }
                Object.defineProperty(CartLineForDisplay.prototype, "ProductName", {
                    get: function () {
                        return Commerce.ObjectExtensions.isNullOrUndefined(this._product) ? Commerce.StringExtensions.EMPTY : this._product.Name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CartLineForDisplay;
            }(Proxy.Entities.CartLineClass));
            Entities.CartLineForDisplay = CartLineForDisplay;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var ChargeTypeEnum;
            (function (ChargeTypeEnum) {
                ChargeTypeEnum[ChargeTypeEnum["HeaderCharge"] = 0] = "HeaderCharge";
                ChargeTypeEnum[ChargeTypeEnum["LineCharge"] = 1] = "LineCharge";
            })(ChargeTypeEnum = Entities.ChargeTypeEnum || (Entities.ChargeTypeEnum = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var FieldValidator = (function () {
                function FieldValidator(params) {
                    this._validationAttributes = params;
                }
                FieldValidator.prototype.setValidationAttributes = function (element) {
                    var _this = this;
                    var attributeNames = Object.keys(this._validationAttributes);
                    attributeNames.forEach(function (attributeName) {
                        var value = _this._validationAttributes[attributeName];
                        if (value) {
                            element.setAttribute(attributeName, value);
                        }
                        if (_this._validationAttributes.required !== true) {
                            element.removeAttribute("required");
                        }
                    });
                };
                return FieldValidator;
            }());
            Entities.FieldValidator = FieldValidator;
            var EmailFieldValidator = (function (_super) {
                __extends(EmailFieldValidator, _super);
                function EmailFieldValidator(title, required) {
                    return _super.call(this, { title: title, required: required, pattern: Commerce.Core.RegularExpressionValidations.EMAIL_REGEX, maxLength: 80 }) || this;
                }
                return EmailFieldValidator;
            }(FieldValidator));
            Entities.EmailFieldValidator = EmailFieldValidator;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var EntityValidatorBase = (function () {
                function EntityValidatorBase() {
                }
                EntityValidatorBase.prototype.setValidationAttributes = function (element, fieldName) {
                    var fieldValidator = this[fieldName];
                    if (fieldValidator) {
                        fieldValidator.setValidationAttributes(element);
                    }
                };
                return EntityValidatorBase;
            }());
            Entities.EntityValidatorBase = EntityValidatorBase;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var AddressValidator = (function (_super) {
                __extends(AddressValidator, _super);
                function AddressValidator() {
                    var _this = _super.call(this) || this;
                    _this.Phone = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.PHONE_MAX_LENGTH });
                    _this.Url = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.URL_MAX_LENGTH });
                    _this.Email = new Entities.EmailFieldValidator(Commerce.ViewModelAdapter.getResourceString("string_1331"));
                    _this.Street = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.STREET_MAX_LENGTH, required: false });
                    _this.City = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.CITY_MAX_LENGTH, required: false });
                    _this.ZipCode = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.ZIPCODE_MAX_LENGTH, required: false });
                    _this.County = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.COUNTY_MAX_LENGTH, required: false });
                    _this.DistrictName = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.DISTRICTNAME_MAX_LENGTH, required: false });
                    _this.BuildingCompliment = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.BUILDINGCOMPLIMENT_MAX_LENGTH });
                    _this.StreetNumber = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.STREETNUMBER_MAX_LENGTH });
                    return _this;
                }
                Object.defineProperty(AddressValidator.prototype, "Phone", {
                    get: function () {
                        return this._phone;
                    },
                    set: function (val) {
                        this._phone = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "Url", {
                    get: function () {
                        return this._url;
                    },
                    set: function (val) {
                        this._url = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "Email", {
                    get: function () {
                        return this._email;
                    },
                    set: function (val) {
                        this._email = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "Street", {
                    get: function () {
                        return this._street;
                    },
                    set: function (val) {
                        this._street = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "City", {
                    get: function () {
                        return this._city;
                    },
                    set: function (val) {
                        this._city = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "ZipCode", {
                    get: function () {
                        return this._zipCode;
                    },
                    set: function (val) {
                        this._zipCode = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "County", {
                    get: function () {
                        return this._county;
                    },
                    set: function (val) {
                        this._county = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "DistrictName", {
                    get: function () {
                        return this._districtName;
                    },
                    set: function (val) {
                        this._districtName = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "BuildingCompliment", {
                    get: function () {
                        return this._buildingCompliment;
                    },
                    set: function (val) {
                        this._buildingCompliment = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AddressValidator.prototype, "StreetNumber", {
                    get: function () {
                        return this._streetNumber;
                    },
                    set: function (val) {
                        this._streetNumber = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return AddressValidator;
            }(Entities.EntityValidatorBase));
            Entities.AddressValidator = AddressValidator;
            var CartValidator = (function (_super) {
                __extends(CartValidator, _super);
                function CartValidator() {
                    var _this = _super.call(this) || this;
                    _this.CancellationChargeAmount = new Entities.FieldValidator({ maxLength: 10 });
                    _this.OverriddenDepositAmount = new Entities.FieldValidator({ maxLength: 10 });
                    _this.ShippingChargeAmount = new Entities.FieldValidator({ maxLength: 10 });
                    return _this;
                }
                Object.defineProperty(CartValidator.prototype, "CancellationChargeAmount", {
                    get: function () {
                        return this._cancellationChargeAmount;
                    },
                    set: function (val) {
                        this._cancellationChargeAmount = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartValidator.prototype, "OverriddenDepositAmount", {
                    get: function () {
                        return this._overriddenDepositAmount;
                    },
                    set: function (val) {
                        this._overriddenDepositAmount = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartValidator.prototype, "ShippingChargeAmount", {
                    get: function () {
                        return this._shippingChargeAmount;
                    },
                    set: function (val) {
                        this._shippingChargeAmount = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CartValidator;
            }(Entities.EntityValidatorBase));
            Entities.CartValidator = CartValidator;
            var CartLineValidator = (function (_super) {
                __extends(CartLineValidator, _super);
                function CartLineValidator() {
                    var _this = _super.call(this) || this;
                    _this.LineManualDiscountAmount = new Entities.FieldValidator({ maxLength: 10 });
                    _this.PriceOverrideAmount = new Entities.FieldValidator({ maxLength: 10 });
                    _this.ItemQuantity = new Entities.FieldValidator({ maxLength: 10 });
                    _this.ItemSerialNumber = new Entities.FieldValidator({ maxLength: 20 });
                    return _this;
                }
                Object.defineProperty(CartLineValidator.prototype, "LineManualDiscountAmount", {
                    get: function () {
                        return this._lineManualDiscountAmount;
                    },
                    set: function (val) {
                        this._lineManualDiscountAmount = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartLineValidator.prototype, "PriceOverrideAmount", {
                    get: function () {
                        return this._priceOverrideAmount;
                    },
                    set: function (val) {
                        this._priceOverrideAmount = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartLineValidator.prototype, "ItemQuantity", {
                    get: function () {
                        return this._itemQuantity;
                    },
                    set: function (val) {
                        this._itemQuantity = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartLineValidator.prototype, "ItemSerialNumber", {
                    get: function () {
                        return this._itemSerialNumber;
                    },
                    set: function (val) {
                        this._itemSerialNumber = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CartLineValidator;
            }(Entities.EntityValidatorBase));
            Entities.CartLineValidator = CartLineValidator;
            var PaymentCardValidator = (function (_super) {
                __extends(PaymentCardValidator, _super);
                function PaymentCardValidator() {
                    var _this = _super.call(this) || this;
                    _this.CardNumber = new Entities.FieldValidator({ maxLength: 19 });
                    _this.CCID = new Entities.FieldValidator({ maxLength: 10 });
                    _this.VoiceAuthorizationCode = new Entities.FieldValidator({ maxLength: 50 });
                    _this.CardAddress = new Entities.FieldValidator({ maxLength: 150 });
                    _this.CardAddressZip = new Entities.FieldValidator({ maxLength: 10 });
                    return _this;
                }
                Object.defineProperty(PaymentCardValidator.prototype, "CardNumber", {
                    get: function () {
                        return this._cardNumber;
                    },
                    set: function (val) {
                        this._cardNumber = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PaymentCardValidator.prototype, "CCID", {
                    get: function () {
                        return this._CCID;
                    },
                    set: function (val) {
                        this._CCID = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PaymentCardValidator.prototype, "VoiceAuthorizationCode", {
                    get: function () {
                        return this._voiceAuthorizationCode;
                    },
                    set: function (val) {
                        this._voiceAuthorizationCode = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PaymentCardValidator.prototype, "CardAddress", {
                    get: function () {
                        return this._cardAddress;
                    },
                    set: function (val) {
                        this._cardAddress = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PaymentCardValidator.prototype, "CardAddressZip", {
                    get: function () {
                        return this._cardAddressZip;
                    },
                    set: function (val) {
                        this._cardAddressZip = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PaymentCardValidator;
            }(Entities.EntityValidatorBase));
            Entities.PaymentCardValidator = PaymentCardValidator;
            var ConnectionRequestValidator = (function (_super) {
                __extends(ConnectionRequestValidator, _super);
                function ConnectionRequestValidator() {
                    var _this = _super.call(this) || this;
                    _this.UserId = new Entities.FieldValidator({ maxLength: 30 });
                    _this.Password = new Entities.FieldValidator({ maxLength: 30 });
                    return _this;
                }
                Object.defineProperty(ConnectionRequestValidator.prototype, "UserId", {
                    get: function () {
                        return this._userId;
                    },
                    set: function (val) {
                        this._userId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ConnectionRequestValidator.prototype, "Password", {
                    get: function () {
                        return this._password;
                    },
                    set: function (val) {
                        this._password = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ConnectionRequestValidator;
            }(Entities.EntityValidatorBase));
            Entities.ConnectionRequestValidator = ConnectionRequestValidator;
            var CustomerValidator = (function (_super) {
                __extends(CustomerValidator, _super);
                function CustomerValidator() {
                    var _this = _super.call(this) || this;
                    _this.FirstName = new Entities.FieldValidator({
                        maxLength: Commerce.CustomerValidationConstants.NAME_MAX_LENGTH,
                        required: true,
                        title: Commerce.ViewModelAdapter.getResourceString("string_1361"),
                        pattern: CustomerValidator._nameRegex
                    });
                    _this.MiddleName = new Entities.FieldValidator({
                        maxLength: Commerce.CustomerValidationConstants.NAME_MAX_LENGTH,
                        title: Commerce.ViewModelAdapter.getResourceString("string_1361"),
                        pattern: CustomerValidator._nameRegex
                    });
                    _this.LastName = new Entities.FieldValidator({
                        maxLength: Commerce.CustomerValidationConstants.NAME_MAX_LENGTH,
                        required: true,
                        title: Commerce.ViewModelAdapter.getResourceString("string_1361"), pattern: CustomerValidator._nameRegex
                    });
                    _this.Name = new Entities.FieldValidator({ maxLength: Commerce.CustomerValidationConstants.COMPANY_NAME_MAX_LENGTH, required: true });
                    return _this;
                }
                Object.defineProperty(CustomerValidator.prototype, "FirstName", {
                    get: function () {
                        return this._firstName;
                    },
                    set: function (val) {
                        this._firstName = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CustomerValidator.prototype, "MiddleName", {
                    get: function () {
                        return this._middleName;
                    },
                    set: function (val) {
                        this._middleName = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CustomerValidator.prototype, "LastName", {
                    get: function () {
                        return this._lastName;
                    },
                    set: function (val) {
                        this._lastName = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CustomerValidator.prototype, "Name", {
                    get: function () {
                        return this._name;
                    },
                    set: function (val) {
                        this._name = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                CustomerValidator._nameRegex = "^(?=\\s*\\S).*$";
                return CustomerValidator;
            }(Entities.EntityValidatorBase));
            Entities.CustomerValidator = CustomerValidator;
            var DeliveryOptionValidator = (function (_super) {
                __extends(DeliveryOptionValidator, _super);
                function DeliveryOptionValidator() {
                    var _this = _super.call(this) || this;
                    _this.Price = new Entities.FieldValidator({ maxLength: 10 });
                    return _this;
                }
                Object.defineProperty(DeliveryOptionValidator.prototype, "Price", {
                    get: function () {
                        return this._price;
                    },
                    set: function (val) {
                        this._price = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return DeliveryOptionValidator;
            }(Entities.EntityValidatorBase));
            Entities.DeliveryOptionValidator = DeliveryOptionValidator;
            var GiftCardValidator = (function (_super) {
                __extends(GiftCardValidator, _super);
                function GiftCardValidator() {
                    var _this = _super.call(this) || this;
                    _this.CardNumber = new Entities.FieldValidator({
                        maxLength: 30,
                        required: false,
                        title: Commerce.ViewModelAdapter.getResourceString("string_4362"), pattern: "^[A-Za-z0-9]+$"
                    });
                    _this.Amount = new Entities.FieldValidator({ maxLength: 10 });
                    return _this;
                }
                Object.defineProperty(GiftCardValidator.prototype, "CardNumber", {
                    get: function () {
                        return this._cardNumber;
                    },
                    set: function (val) {
                        this._cardNumber = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GiftCardValidator.prototype, "Amount", {
                    get: function () {
                        return this._amount;
                    },
                    set: function (val) {
                        this._amount = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return GiftCardValidator;
            }(Entities.EntityValidatorBase));
            Entities.GiftCardValidator = GiftCardValidator;
            var LoyaltyCardValidator = (function (_super) {
                __extends(LoyaltyCardValidator, _super);
                function LoyaltyCardValidator() {
                    var _this = _super.call(this) || this;
                    _this.CardNumber = new Entities.FieldValidator({
                        maxLength: 30,
                        required: true,
                        title: Commerce.ViewModelAdapter.getResourceString("string_4362"), pattern: "^[A-Za-z0-9]+$"
                    });
                    return _this;
                }
                Object.defineProperty(LoyaltyCardValidator.prototype, "CardNumber", {
                    get: function () {
                        return this._cardNumber;
                    },
                    set: function (val) {
                        this._cardNumber = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return LoyaltyCardValidator;
            }(Entities.EntityValidatorBase));
            Entities.LoyaltyCardValidator = LoyaltyCardValidator;
            var SalesOrderSearchCriteriaValidator = (function (_super) {
                __extends(SalesOrderSearchCriteriaValidator, _super);
                function SalesOrderSearchCriteriaValidator() {
                    var _this = _super.call(this) || this;
                    var regexForId = "^[A-Za-z0-9#-]+$";
                    var lengthForId = 30;
                    var errorForId = Commerce.ViewModelAdapter.getResourceString("string_4362");
                    var regexForName = "^[A-Za-z]+$";
                    var lengthForName = 25;
                    var errorForName = Commerce.ViewModelAdapter.getResourceString("string_1361");
                    _this.TransactionId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.SalesId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.ReceiptId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.ChannelReferenceId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.CustomerAccountNumber = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.CustomerFirstName = new Entities.FieldValidator({ maxLength: lengthForName, title: errorForName, pattern: regexForName });
                    _this.CustomerLastName = new Entities.FieldValidator({ maxLength: lengthForName, title: errorForName, pattern: regexForName });
                    _this.StoreId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.TerminalId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.ItemId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.Barcode = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.StaffId = new Entities.FieldValidator({ maxLength: lengthForId, title: errorForId, pattern: regexForId });
                    _this.ReceiptEmailAddress = new Entities.EmailFieldValidator(Commerce.ViewModelAdapter.getResourceString("string_1331"));
                    return _this;
                }
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "TransactionId", {
                    get: function () {
                        return this._transactionId;
                    },
                    set: function (val) {
                        this._transactionId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "SalesId", {
                    get: function () {
                        return this._salesId;
                    },
                    set: function (val) {
                        this._salesId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "ReceiptId", {
                    get: function () {
                        return this._receiptId;
                    },
                    set: function (val) {
                        this._receiptId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "ChannelReferenceId", {
                    get: function () {
                        return this._channelReferenceId;
                    },
                    set: function (val) {
                        this._channelReferenceId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "CustomerAccountNumber", {
                    get: function () {
                        return this._customerAccountNumber;
                    },
                    set: function (val) {
                        this._customerAccountNumber = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "CustomerFirstName", {
                    get: function () {
                        return this._customerFirstName;
                    },
                    set: function (val) {
                        this._customerFirstName = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "CustomerLastName", {
                    get: function () {
                        return this._customerLastName;
                    },
                    set: function (val) {
                        this._customerLastName = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "StoreId", {
                    get: function () {
                        return this._storeId;
                    },
                    set: function (val) {
                        this._storeId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "TerminalId", {
                    get: function () {
                        return this._terminalId;
                    },
                    set: function (val) {
                        this._terminalId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "ItemId", {
                    get: function () {
                        return this._itemId;
                    },
                    set: function (val) {
                        this._itemId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "Barcode", {
                    get: function () {
                        return this._barcode;
                    },
                    set: function (val) {
                        this._barcode = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "StaffId", {
                    get: function () {
                        return this._staffId;
                    },
                    set: function (val) {
                        this._staffId = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderSearchCriteriaValidator.prototype, "ReceiptEmailAddress", {
                    get: function () {
                        return this._receiptEmailAddress;
                    },
                    set: function (val) {
                        this._receiptEmailAddress = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return SalesOrderSearchCriteriaValidator;
            }(Entities.EntityValidatorBase));
            Entities.SalesOrderSearchCriteriaValidator = SalesOrderSearchCriteriaValidator;
            var SearchValidator = (function (_super) {
                __extends(SearchValidator, _super);
                function SearchValidator() {
                    var _this = _super.call(this) || this;
                    _this.SearchText = new Entities.FieldValidator({ maxLength: 60 });
                    _this.SearchReceiptText = new Entities.FieldValidator({ maxLength: 30 });
                    _this.SearchOrderText = new Entities.FieldValidator({ maxLength: 50, required: true });
                    return _this;
                }
                Object.defineProperty(SearchValidator.prototype, "SearchText", {
                    get: function () {
                        return this._searchText;
                    },
                    set: function (val) {
                        this._searchText = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SearchValidator.prototype, "SearchReceiptText", {
                    get: function () {
                        return this._searchReceiptText;
                    },
                    set: function (val) {
                        this._searchReceiptText = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SearchValidator.prototype, "SearchOrderText", {
                    get: function () {
                        return this._searchOrderText;
                    },
                    set: function (val) {
                        this._searchOrderText = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return SearchValidator;
            }(Entities.EntityValidatorBase));
            Entities.SearchValidator = SearchValidator;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var CommissionSalesGroupForDisplay = (function (_super) {
                __extends(CommissionSalesGroupForDisplay, _super);
                function CommissionSalesGroupForDisplay(commissionSalesGroup) {
                    var _this = _super.call(this, commissionSalesGroup) || this;
                    var id = Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroup.GroupId) ? Commerce.StringExtensions.EMPTY : commissionSalesGroup.GroupId;
                    var name = Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroup.Name) ? Commerce.StringExtensions.EMPTY : commissionSalesGroup.Name;
                    _this._displayName = Commerce.StringExtensions.format(CommissionSalesGroupForDisplay.GetDisplayNameFormat(), id, name);
                    return _this;
                }
                Object.defineProperty(CommissionSalesGroupForDisplay.prototype, "DisplayName", {
                    get: function () {
                        return this._displayName;
                    },
                    enumerable: true,
                    configurable: true
                });
                CommissionSalesGroupForDisplay.GetDisplayNameFormat = function () {
                    if (Commerce.StringExtensions.isNullOrWhitespace(CommissionSalesGroupForDisplay._displayNameFormat)) {
                        var displayFormat = Commerce.ViewModelAdapter.getResourceString("string_13000");
                        if (Commerce.StringExtensions.isNullOrWhitespace(displayFormat)) {
                            displayFormat = "{0} : {1}";
                        }
                        CommissionSalesGroupForDisplay._displayNameFormat = displayFormat;
                    }
                    return CommissionSalesGroupForDisplay._displayNameFormat;
                };
                return CommissionSalesGroupForDisplay;
            }(Proxy.Entities.CommissionSalesGroupClass));
            Entities.CommissionSalesGroupForDisplay = CommissionSalesGroupForDisplay;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var CustomerOrderOperations;
            (function (CustomerOrderOperations) {
                CustomerOrderOperations[CustomerOrderOperations["Edit"] = 0] = "Edit";
                CustomerOrderOperations[CustomerOrderOperations["Cancel"] = 1] = "Cancel";
                CustomerOrderOperations[CustomerOrderOperations["PickUpFromStore"] = 2] = "PickUpFromStore";
                CustomerOrderOperations[CustomerOrderOperations["CreatePickingList"] = 3] = "CreatePickingList";
                CustomerOrderOperations[CustomerOrderOperations["CreatePackingSlip"] = 4] = "CreatePackingSlip";
                CustomerOrderOperations[CustomerOrderOperations["PrintPackingSlip"] = 5] = "PrintPackingSlip";
                CustomerOrderOperations[CustomerOrderOperations["Return"] = 6] = "Return";
            })(CustomerOrderOperations = Entities.CustomerOrderOperations || (Entities.CustomerOrderOperations = {}));
            var CustomerOrderRecallType;
            (function (CustomerOrderRecallType) {
                CustomerOrderRecallType[CustomerOrderRecallType["OrderRecall"] = 0] = "OrderRecall";
                CustomerOrderRecallType[CustomerOrderRecallType["QuoteRecall"] = 1] = "QuoteRecall";
            })(CustomerOrderRecallType = Entities.CustomerOrderRecallType || (Entities.CustomerOrderRecallType = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var DeliveryModeStatusEnum;
            (function (DeliveryModeStatusEnum) {
                DeliveryModeStatusEnum[DeliveryModeStatusEnum["None"] = 0] = "None";
                DeliveryModeStatusEnum[DeliveryModeStatusEnum["Selected"] = 1] = "Selected";
                DeliveryModeStatusEnum[DeliveryModeStatusEnum["All"] = 2] = "All";
            })(DeliveryModeStatusEnum = Entities.DeliveryModeStatusEnum || (Entities.DeliveryModeStatusEnum = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var AuthenticationProviderEnum = (function () {
                function AuthenticationProviderEnum() {
                }
                AuthenticationProviderEnum.USERAUTHENTICATION = "UserAuthentication";
                return AuthenticationProviderEnum;
            }());
            Entities.AuthenticationProviderEnum = AuthenticationProviderEnum;
            var DeviceActivationControllerState;
            (function (DeviceActivationControllerState) {
                DeviceActivationControllerState[DeviceActivationControllerState["PreMessage"] = 1] = "PreMessage";
                DeviceActivationControllerState[DeviceActivationControllerState["Deactivated"] = 2] = "Deactivated";
                DeviceActivationControllerState[DeviceActivationControllerState["Processing"] = 3] = "Processing";
                DeviceActivationControllerState[DeviceActivationControllerState["Error"] = 4] = "Error";
                DeviceActivationControllerState[DeviceActivationControllerState["Succeeded"] = 5] = "Succeeded";
            })(DeviceActivationControllerState = Entities.DeviceActivationControllerState || (Entities.DeviceActivationControllerState = {}));
            var DeviceActivationType;
            (function (DeviceActivationType) {
                DeviceActivationType[DeviceActivationType["None"] = 0] = "None";
                DeviceActivationType[DeviceActivationType["ManualActivation"] = 1] = "ManualActivation";
                DeviceActivationType[DeviceActivationType["GuidedActivation"] = 2] = "GuidedActivation";
            })(DeviceActivationType = Entities.DeviceActivationType || (Entities.DeviceActivationType = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var DimensionKeys = (function () {
                function DimensionKeys() {
                }
                DimensionKeys.COLOR = "COLOR";
                DimensionKeys.CONFIGURATION = "CONFIGURATION";
                DimensionKeys.SIZE = "SIZE";
                DimensionKeys.STYLE = "STYLE";
                return DimensionKeys;
            }());
            Entities.DimensionKeys = DimensionKeys;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            var HardwareStationLocalizedError = (function (_super) {
                __extends(HardwareStationLocalizedError, _super);
                function HardwareStationLocalizedError(errorCode, canRetry, externalLocalizedErrorMessage, extraData) {
                    if (canRetry === void 0) { canRetry = false; }
                    var _this = _super.call(this, errorCode, canRetry, externalLocalizedErrorMessage, extraData) || this;
                    _this.__proto__ = HardwareStationLocalizedError.prototype;
                    return _this;
                }
                return HardwareStationLocalizedError;
            }(Commerce.Proxy.Entities.Error));
            Entities.HardwareStationLocalizedError = HardwareStationLocalizedError;
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            var HeaderSearchType;
            (function (HeaderSearchType) {
                HeaderSearchType[HeaderSearchType["Product"] = 1] = "Product";
                HeaderSearchType[HeaderSearchType["Customer"] = 2] = "Customer";
            })(HeaderSearchType = Entities.HeaderSearchType || (Entities.HeaderSearchType = {}));
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var HealthCheckConnectivityStatus;
            (function (HealthCheckConnectivityStatus) {
                HealthCheckConnectivityStatus[HealthCheckConnectivityStatus["None"] = 0] = "None";
                HealthCheckConnectivityStatus[HealthCheckConnectivityStatus["Connecting"] = 1] = "Connecting";
                HealthCheckConnectivityStatus[HealthCheckConnectivityStatus["Succeeded"] = 2] = "Succeeded";
                HealthCheckConnectivityStatus[HealthCheckConnectivityStatus["Failed"] = 3] = "Failed";
                HealthCheckConnectivityStatus[HealthCheckConnectivityStatus["Unknown"] = 4] = "Unknown";
            })(HealthCheckConnectivityStatus = Entities.HealthCheckConnectivityStatus || (Entities.HealthCheckConnectivityStatus = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            "use strict";
            function isIFufillmentLineDetails(arg) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(arg)) {
                    return false;
                }
                var argAsIFulfillmentLineDetails = arg;
                return argAsIFulfillmentLineDetails.ReasonCodeLines !== undefined &&
                    argAsIFulfillmentLineDetails.Description !== undefined &&
                    argAsIFulfillmentLineDetails.ProductName !== undefined &&
                    argAsIFulfillmentLineDetails.SalesId !== undefined &&
                    argAsIFulfillmentLineDetails.ItemId !== undefined;
            }
            Entities.isIFufillmentLineDetails = isIFufillmentLineDetails;
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var LanguagesInfo = (function () {
                function LanguagesInfo(languageName, languageId) {
                    this._languageName = languageName;
                    this._languageId = languageId;
                }
                Object.defineProperty(LanguagesInfo.prototype, "LanguageName", {
                    get: function () {
                        return this._languageName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(LanguagesInfo.prototype, "LanguageId", {
                    get: function () {
                        return this._languageId;
                    },
                    enumerable: true,
                    configurable: true
                });
                return LanguagesInfo;
            }());
            Entities.LanguagesInfo = LanguagesInfo;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var Layout = (function () {
                function Layout() {
                    this.ID = Commerce.StringExtensions.EMPTY;
                    this.IsCustomAttribute = false;
                    this.AttributeName = Commerce.StringExtensions.EMPTY;
                    this.AttributeTypeName = Commerce.StringExtensions.EMPTY;
                    this.Type = Commerce.StringExtensions.EMPTY;
                    this.Title = Commerce.StringExtensions.EMPTY;
                    this.TabStripPlacement = Commerce.StringExtensions.EMPTY;
                    this.ZoneID = Commerce.StringExtensions.EMPTY;
                }
                return Layout;
            }());
            Entities.Layout = Layout;
            var TransactionSummaryOptions;
            (function (TransactionSummaryOptions) {
                TransactionSummaryOptions[TransactionSummaryOptions["TotalLines"] = 0] = "TotalLines";
                TransactionSummaryOptions[TransactionSummaryOptions["TotalItems"] = 1] = "TotalItems";
            })(TransactionSummaryOptions = Entities.TransactionSummaryOptions || (Entities.TransactionSummaryOptions = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            var Orientation;
            (function (Orientation) {
                "use strict";
                Orientation.LANDSCAPE = "Landscape";
                Orientation.PORTRAIT = "Portrait";
            })(Orientation = Entities.Orientation || (Entities.Orientation = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var PeripheralType;
            (function (PeripheralType) {
                PeripheralType[PeripheralType["None"] = 0] = "None";
                PeripheralType[PeripheralType["OPOS"] = 1] = "OPOS";
                PeripheralType[PeripheralType["Windows"] = 2] = "Windows";
                PeripheralType[PeripheralType["Device"] = 3] = "Device";
                PeripheralType[PeripheralType["Network"] = 4] = "Network";
            })(PeripheralType = Entities.PeripheralType || (Entities.PeripheralType = {}));
            var PeripheralDeviceType;
            (function (PeripheralDeviceType) {
                PeripheralDeviceType[PeripheralDeviceType["None"] = 0] = "None";
                PeripheralDeviceType[PeripheralDeviceType["OPOS"] = 1] = "OPOS";
                PeripheralDeviceType[PeripheralDeviceType["Windows"] = 2] = "Windows";
                PeripheralDeviceType[PeripheralDeviceType["Network"] = 3] = "Network";
            })(PeripheralDeviceType = Entities.PeripheralDeviceType || (Entities.PeripheralDeviceType = {}));
            var PeripheralPaymentType;
            (function (PeripheralPaymentType) {
                PeripheralPaymentType[PeripheralPaymentType["None"] = 0] = "None";
                PeripheralPaymentType[PeripheralPaymentType["CardPaymentController"] = 1] = "CardPaymentController";
                PeripheralPaymentType[PeripheralPaymentType["PaymentTerminal"] = 2] = "PaymentTerminal";
                PeripheralPaymentType[PeripheralPaymentType["RetailServer"] = 3] = "RetailServer";
                PeripheralPaymentType[PeripheralPaymentType["CardPaymentAccept"] = 4] = "CardPaymentAccept";
            })(PeripheralPaymentType = Entities.PeripheralPaymentType || (Entities.PeripheralPaymentType = {}));
            var PrintableReceipt = (function () {
                function PrintableReceipt(receipt, printer) {
                    var _this = this;
                    this._receipt = receipt;
                    this._printer = printer;
                    this.receiptHeader = receipt.Header;
                    this.receiptBody = receipt.Body;
                    this.receiptFooter = receipt.Footer;
                    this.receiptTypeValue = receipt.ReceiptTypeValue;
                    this.receiptTypeStrValue = receipt.ReceiptTypeStrValue;
                    this.receiptLayoutId = receipt.LayoutId;
                    this.receiptWidth = receipt.Width;
                    this.extensionProperties = receipt.ExtensionProperties;
                    this.receiptName = "";
                    if (!Commerce.StringExtensions.isEmptyOrWhitespace(receipt.ReceiptTitle)) {
                        this.receiptName = receipt.ReceiptTitle;
                    }
                    else if (!Commerce.StringExtensions.isEmptyOrWhitespace(receipt.ReceiptTypeStrValue)) {
                        this.receiptName = receipt.ReceiptTypeStrValue;
                    }
                    this.printerName = printer.Name;
                    this.printerType = printer.PrinterType;
                    this.printBehaviorValue = printer.PrintBehaviorValue;
                    switch (this.printBehaviorValue) {
                        case Entities.PrintBehavior.Never:
                            this.shouldPrint = false;
                            this.shouldPrompt = false;
                            break;
                        case Entities.PrintBehavior.AsRequired:
                        case Entities.PrintBehavior.Always:
                            this.shouldPrint = true;
                            this.shouldPrompt = false;
                            break;
                        case Entities.PrintBehavior.Prompt:
                        default:
                            this.shouldPrint = true;
                            this.shouldPrompt = true;
                            break;
                    }
                    if (this.printerType === Proxy.Entities.PeripheralType.Network) {
                        var printerConfigurations = void 0;
                        var hardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation) && hardwareStation.profileId) {
                            printerConfigurations = hardwareStation.hardwareConfigurations.PrinterConfigurations;
                        }
                        else {
                            printerConfigurations = Commerce.ApplicationContext.Instance.deviceConfiguration.HardwareConfigurations.PrinterConfigurations;
                        }
                        if (printerConfigurations) {
                            var printerConfiguration = Commerce.ArrayExtensions.firstOrUndefined(printerConfigurations, function (p) { return (Commerce.StringExtensions.compare(p.DeviceName, _this.printerName) === 0); });
                            if (printerConfiguration) {
                                this.printerIP = printerConfiguration.IPAddress;
                                this.printerPort = printerConfiguration.Port;
                            }
                        }
                    }
                }
                Object.defineProperty(PrintableReceipt.prototype, "printer", {
                    get: function () {
                        return this._printer;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PrintableReceipt.prototype, "receipt", {
                    get: function () {
                        return this._receipt;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PrintableReceipt;
            }());
            Entities.PrintableReceipt = PrintableReceipt;
            var HardwareStation = (function () {
                function HardwareStation() {
                }
                return HardwareStation;
            }());
            Entities.HardwareStation = HardwareStation;
            var PinPadInfo = (function () {
                function PinPadInfo(encryptedPin, additionalSecurityData) {
                    this.encryptedPin = encryptedPin;
                    this.additionalSecurityData = additionalSecurityData;
                }
                return PinPadInfo;
            }());
            Entities.PinPadInfo = PinPadInfo;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var PickingAndReceivingOrderHelper = (function () {
                function PickingAndReceivingOrderHelper() {
                }
                PickingAndReceivingOrderHelper.createPickingAndReceivingOrderLine = function (product, quantityOrdered, quantityReceived, quantityReceivedNow, orderType, orderId, wmsLocationId, dataAreaId) {
                    switch (orderType) {
                        case Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                            return new PickingAndReceivingPurchaseOrderLine({
                                RecordId: 0,
                                OrderId: orderId,
                                ProductRecordId: product.RecordId,
                                ItemId: product.ItemId,
                                ItemName: product.Name,
                                QuantityOrdered: quantityOrdered,
                                PurchaseQuantity: quantityReceivedNow,
                                PurchaseUnit: product.DefaultUnitOfMeasure,
                                PurchaseReceived: quantityReceived,
                                PurchaseReceivedNow: quantityReceivedNow,
                                WMSLocationId: wmsLocationId,
                                DataAreaId: dataAreaId
                            });
                        case Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                            return new PickingAndReceivingTransferInOrderLine({
                                RecordId: 0,
                                OrderId: orderId,
                                ProductRecordId: product.RecordId,
                                ItemId: product.ItemId,
                                ItemName: product.Name,
                                QuantityTransferred: quantityOrdered,
                                QuantityReceived: quantityReceived,
                                QuantityReceiveNow: quantityReceivedNow,
                                QuantityRemainReceive: quantityOrdered - quantityReceived,
                                PurchaseUnit: product.DefaultUnitOfMeasure,
                                WMSLocationId: wmsLocationId,
                                DataAreaId: dataAreaId
                            });
                        case Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                            return new PickingAndReceivingTransferOutOrderLine({
                                RecordId: 0,
                                OrderId: orderId,
                                ProductRecordId: product.RecordId,
                                ItemId: product.ItemId,
                                ItemName: product.Name,
                                QuantityTransferred: quantityOrdered,
                                QuantityShipped: quantityReceived,
                                QuantityShipNow: quantityReceivedNow,
                                QuantityRemainShip: quantityOrdered - quantityReceived,
                                PurchaseUnit: product.DefaultUnitOfMeasure,
                                WMSLocationId: wmsLocationId,
                                DataAreaId: dataAreaId
                            });
                        default:
                            return null;
                    }
                };
                PickingAndReceivingOrderHelper.createJournal = function (orderType, entity) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(entity)) {
                        return null;
                    }
                    var result = null;
                    switch (orderType) {
                        case Proxy.Entities.PurchaseTransferOrderType.PurchaseOrder:
                            result = new PickingAndReceivingPurchaseOrder(entity);
                            break;
                        case Proxy.Entities.PurchaseTransferOrderType.TransferIn:
                            result = new PickingAndReceivingTransferInOrder(entity);
                            break;
                        case Proxy.Entities.PurchaseTransferOrderType.TransferOut:
                            result = new PickingAndReceivingTransferOutOrder(entity);
                            break;
                        case Proxy.Entities.PurchaseTransferOrderType.PickingList:
                            result = new PickingAndReceivingPickingList(entity);
                            break;
                        default:
                            throw "Unsupported order type: " + orderType;
                    }
                    return result;
                };
                PickingAndReceivingOrderHelper.convertToCommerceTypes = function (genericJournal) {
                    var originalJournal = genericJournal.originalOrder;
                    originalJournal.OrderLines = genericJournal.orderLines.map(function (orderLine) {
                        return orderLine.originalLine;
                    });
                    return originalJournal;
                };
                return PickingAndReceivingOrderHelper;
            }());
            Entities.PickingAndReceivingOrderHelper = PickingAndReceivingOrderHelper;
            var PickingAndReceivingPickingListLine = (function () {
                function PickingAndReceivingPickingListLine(pickingListLine) {
                    this._pickingListLine = pickingListLine;
                }
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "recordId", {
                    get: function () {
                        return this._pickingListLine.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "productRecordId", {
                    get: function () {
                        return this._pickingListLine.ProductRecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "productNumber", {
                    get: function () {
                        return this._pickingListLine.ItemId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "description", {
                    get: function () {
                        return this._pickingListLine.ItemName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "quantityOrdered", {
                    get: function () {
                        return this._pickingListLine.QuantityOrdered;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "quantityReceived", {
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "quantityReceivedNow", {
                    get: function () {
                        return this._pickingListLine.PurchaseReceivedNow;
                    },
                    set: function (newReceivedNow) {
                        this._pickingListLine.PurchaseReceivedNow = newReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "unitOfMeasure", {
                    get: function () {
                        return "";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "inventDimId", {
                    get: function () {
                        return this._pickingListLine.InventDimId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "originalLine", {
                    get: function () {
                        return this._pickingListLine;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingListLine.prototype, "wmsLocationId", {
                    get: function () {
                        return this._wmsLocationId;
                    },
                    set: function (newValue) {
                        this._wmsLocationId = newValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingPickingListLine;
            }());
            Entities.PickingAndReceivingPickingListLine = PickingAndReceivingPickingListLine;
            var PickingAndReceivingPurchaseOrderLine = (function () {
                function PickingAndReceivingPurchaseOrderLine(purchaseOrderLine) {
                    this._purchaseOrderLine = purchaseOrderLine;
                }
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "recordId", {
                    get: function () {
                        return this._purchaseOrderLine.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "productNumber", {
                    get: function () {
                        return this._purchaseOrderLine.ItemId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "productRecordId", {
                    get: function () {
                        return this._purchaseOrderLine.ProductRecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "description", {
                    get: function () {
                        return this._purchaseOrderLine.ItemName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "quantityOrdered", {
                    get: function () {
                        return this._purchaseOrderLine.QuantityOrdered;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "quantityReceived", {
                    get: function () {
                        return this._purchaseOrderLine.PurchaseReceived;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "quantityReceivedNow", {
                    get: function () {
                        return this._purchaseOrderLine.PurchaseReceivedNow;
                    },
                    set: function (newReceivedNow) {
                        this._purchaseOrderLine.PurchaseReceivedNow = newReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "unitOfMeasure", {
                    get: function () {
                        return this._purchaseOrderLine.PurchaseUnit;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "inventDimId", {
                    get: function () {
                        return this._purchaseOrderLine.InventDimId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "originalLine", {
                    get: function () {
                        return this._purchaseOrderLine;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrderLine.prototype, "wmsLocationId", {
                    get: function () {
                        return this._purchaseOrderLine.WMSLocationId;
                    },
                    set: function (newValue) {
                        this._purchaseOrderLine.WMSLocationId = newValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingPurchaseOrderLine;
            }());
            Entities.PickingAndReceivingPurchaseOrderLine = PickingAndReceivingPurchaseOrderLine;
            var PickingAndReceivingPurchaseOrder = (function () {
                function PickingAndReceivingPurchaseOrder(purchaseTransferOrder) {
                    this._totalReceivedNow = 0;
                    this._orderLines = [];
                    this._purchaseOrder = purchaseTransferOrder;
                    this.constructOrderLine();
                }
                PickingAndReceivingPurchaseOrder.prototype.constructOrderLine = function () {
                    var orderLines = this._purchaseOrder.OrderLines;
                    for (var i = 0; i < orderLines.length; i++) {
                        this._orderLines.push(new PickingAndReceivingPurchaseOrderLine(orderLines[i]));
                    }
                };
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "orderId", {
                    get: function () {
                        return this._purchaseOrder.OrderId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "recId", {
                    get: function () {
                        return this._purchaseOrder.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "orderType", {
                    get: function () {
                        return Entities.PurchaseTransferOrderType.PurchaseOrder;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "status", {
                    get: function () {
                        return this._purchaseOrder.Status;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "lines", {
                    get: function () {
                        return this._purchaseOrder.Lines;
                    },
                    set: function (newLines) {
                        this._purchaseOrder.Lines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "totalOrdered", {
                    get: function () {
                        return this._purchaseOrder.TotalItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "totalReceived", {
                    get: function () {
                        return this._purchaseOrder.TotalReceived;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "totalReceivedNow", {
                    get: function () {
                        return this._totalReceivedNow;
                    },
                    set: function (newReceivedNow) {
                        this._totalReceivedNow = newReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "orderLines", {
                    get: function () {
                        return this._orderLines;
                    },
                    set: function (newLines) {
                        this._orderLines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "originalOrder", {
                    get: function () {
                        return this._purchaseOrder;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPurchaseOrder.prototype, "extensionProperties", {
                    get: function () {
                        return this._purchaseOrder.ExtensionProperties;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingPurchaseOrder;
            }());
            Entities.PickingAndReceivingPurchaseOrder = PickingAndReceivingPurchaseOrder;
            var PickingAndReceivingPickingList = (function () {
                function PickingAndReceivingPickingList(pickingList) {
                    this._pickingLines = [];
                    this._pickingList = pickingList;
                    this.constructPickingLine();
                }
                PickingAndReceivingPickingList.prototype.constructPickingLine = function () {
                    var pickingLines = this._pickingList.OrderLines;
                    for (var i = 0; i < pickingLines.length; i++) {
                        this._pickingLines.push(new PickingAndReceivingPickingListLine(pickingLines[i]));
                    }
                };
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "orderId", {
                    get: function () {
                        return this._pickingList.OrderId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "recId", {
                    get: function () {
                        return this._pickingList.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "orderType", {
                    get: function () {
                        return Entities.PurchaseTransferOrderType.PickingList;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "status", {
                    get: function () {
                        return this._pickingList.Status;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "lines", {
                    get: function () {
                        return this._pickingList.OrderLines.length;
                    },
                    set: function (newLines) {
                        this._pickingList.Lines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "totalOrdered", {
                    get: function () {
                        var totalOrdered = 0;
                        this._pickingList.OrderLines.forEach(function (orderLine) {
                            totalOrdered += orderLine.QuantityOrdered;
                        });
                        return totalOrdered;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "totalReceived", {
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "totalReceivedNow", {
                    get: function () {
                        var totalReceivedNow = 0;
                        this._pickingList.OrderLines.forEach(function (orderLine) {
                            totalReceivedNow += orderLine.PurchaseReceivedNow;
                        });
                        return totalReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "orderLines", {
                    get: function () {
                        return this._pickingLines;
                    },
                    set: function (newLines) {
                        this._pickingLines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "originalOrder", {
                    get: function () {
                        return this._pickingList;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingPickingList.prototype, "extensionProperties", {
                    get: function () {
                        return this._pickingList.ExtensionProperties;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingPickingList;
            }());
            Entities.PickingAndReceivingPickingList = PickingAndReceivingPickingList;
            var PickingAndReceivingTransferInOrderLine = (function () {
                function PickingAndReceivingTransferInOrderLine(transferOrderLine) {
                    this._transferOrderLine = transferOrderLine;
                }
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "productNumber", {
                    get: function () {
                        return this._transferOrderLine.ItemId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "recordId", {
                    get: function () {
                        return this._transferOrderLine.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "productRecordId", {
                    get: function () {
                        return this._transferOrderLine.ProductRecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "description", {
                    get: function () {
                        return this._transferOrderLine.ItemName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "quantityOrdered", {
                    get: function () {
                        return this._transferOrderLine.QuantityTransferred;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "quantityReceived", {
                    get: function () {
                        return this._transferOrderLine.QuantityReceived;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "quantityReceivedNow", {
                    get: function () {
                        return this._transferOrderLine.QuantityReceiveNow;
                    },
                    set: function (newReceivedNow) {
                        this._transferOrderLine.QuantityReceiveNow = newReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "unitOfMeasure", {
                    get: function () {
                        return this._transferOrderLine.PurchaseUnit;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "inventDimId", {
                    get: function () {
                        return this._transferOrderLine.InventDimId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "originalLine", {
                    get: function () {
                        return this._transferOrderLine;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrderLine.prototype, "wmsLocationId", {
                    get: function () {
                        return this._transferOrderLine.WMSLocationId;
                    },
                    set: function (newValue) {
                        this._transferOrderLine.WMSLocationId = newValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingTransferInOrderLine;
            }());
            Entities.PickingAndReceivingTransferInOrderLine = PickingAndReceivingTransferInOrderLine;
            var PickingAndReceivingTransferOutOrderLine = (function () {
                function PickingAndReceivingTransferOutOrderLine(transferOrderLine) {
                    this._transferOrderLine = transferOrderLine;
                }
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "recordId", {
                    get: function () {
                        return this._transferOrderLine.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "productRecordId", {
                    get: function () {
                        return this._transferOrderLine.ProductRecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "productNumber", {
                    get: function () {
                        return this._transferOrderLine.ItemId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "description", {
                    get: function () {
                        return this._transferOrderLine.ItemName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "quantityOrdered", {
                    get: function () {
                        return this._transferOrderLine.QuantityTransferred;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "quantityReceived", {
                    get: function () {
                        return this._transferOrderLine.QuantityShipped;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "quantityReceivedNow", {
                    get: function () {
                        return this._transferOrderLine.QuantityShipNow;
                    },
                    set: function (newReceivedNow) {
                        this._transferOrderLine.QuantityShipNow = newReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "unitOfMeasure", {
                    get: function () {
                        return this._transferOrderLine.PurchaseUnit;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "inventDimId", {
                    get: function () {
                        return this._transferOrderLine.InventDimId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "originalLine", {
                    get: function () {
                        return this._transferOrderLine;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrderLine.prototype, "wmsLocationId", {
                    get: function () {
                        return this._transferOrderLine.WMSLocationId;
                    },
                    set: function (newValue) {
                        this._transferOrderLine.WMSLocationId = newValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingTransferOutOrderLine;
            }());
            Entities.PickingAndReceivingTransferOutOrderLine = PickingAndReceivingTransferOutOrderLine;
            var PickingAndReceivingTransferInOrder = (function () {
                function PickingAndReceivingTransferInOrder(transferOrder) {
                    this._orderLines = [];
                    this._transferOrder = transferOrder;
                    this.constructOrderLine();
                }
                PickingAndReceivingTransferInOrder.prototype.constructOrderLine = function () {
                    var orderLines = this._transferOrder.OrderLines;
                    for (var i = 0; i < orderLines.length; i++) {
                        this._orderLines.push(new PickingAndReceivingTransferInOrderLine(orderLines[i]));
                    }
                };
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "orderId", {
                    get: function () {
                        return this._transferOrder.OrderId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "recId", {
                    get: function () {
                        return this._transferOrder.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "orderType", {
                    get: function () {
                        return Entities.PurchaseTransferOrderType.TransferIn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "status", {
                    get: function () {
                        return this._transferOrder.Status;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "lines", {
                    get: function () {
                        return this._transferOrder.Lines;
                    },
                    set: function (newLines) {
                        this._transferOrder.Lines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "totalOrdered", {
                    get: function () {
                        return this._transferOrder.TotalItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "totalReceived", {
                    get: function () {
                        return this._transferOrder.QuantityReceived;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "totalReceivedNow", {
                    get: function () {
                        return this._transferOrder.QuantityReceiveNow;
                    },
                    set: function (newReceivedNow) {
                        this._transferOrder.QuantityReceiveNow = newReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "orderLines", {
                    get: function () {
                        return this._orderLines;
                    },
                    set: function (newLines) {
                        this._orderLines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "originalOrder", {
                    get: function () {
                        return this._transferOrder;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferInOrder.prototype, "extensionProperties", {
                    get: function () {
                        return this._transferOrder.ExtensionProperties;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingTransferInOrder;
            }());
            Entities.PickingAndReceivingTransferInOrder = PickingAndReceivingTransferInOrder;
            var PickingAndReceivingTransferOutOrder = (function () {
                function PickingAndReceivingTransferOutOrder(transferOrder) {
                    this._orderLines = [];
                    this._transferOrder = transferOrder;
                    this.constructOrderLine();
                }
                PickingAndReceivingTransferOutOrder.prototype.constructOrderLine = function () {
                    var orderLines = this._transferOrder.OrderLines;
                    for (var i = 0; i < orderLines.length; i++) {
                        this._orderLines.push(new PickingAndReceivingTransferOutOrderLine(orderLines[i]));
                    }
                };
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "orderId", {
                    get: function () {
                        return this._transferOrder.OrderId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "recId", {
                    get: function () {
                        return this._transferOrder.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "orderType", {
                    get: function () {
                        return Entities.PurchaseTransferOrderType.TransferOut;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "status", {
                    get: function () {
                        return this._transferOrder.Status;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "lines", {
                    get: function () {
                        return this._transferOrder.Lines;
                    },
                    set: function (newLines) {
                        this._transferOrder.Lines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "totalOrdered", {
                    get: function () {
                        return this._transferOrder.TotalItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "totalReceived", {
                    get: function () {
                        return this._transferOrder.QuantityShipped;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "totalReceivedNow", {
                    get: function () {
                        return this._transferOrder.QuantityShipNow;
                    },
                    set: function (newReceivedNow) {
                        this._transferOrder.QuantityShipNow = newReceivedNow;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "orderLines", {
                    get: function () {
                        return this._orderLines;
                    },
                    set: function (newLines) {
                        this._orderLines = newLines;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "originalOrder", {
                    get: function () {
                        return this._transferOrder;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PickingAndReceivingTransferOutOrder.prototype, "extensionProperties", {
                    get: function () {
                        return this._transferOrder.ExtensionProperties;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PickingAndReceivingTransferOutOrder;
            }());
            Entities.PickingAndReceivingTransferOutOrder = PickingAndReceivingTransferOutOrder;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var Point = (function () {
                function Point(x, y) {
                    this.x = x;
                    this.y = y;
                }
                return Point;
            }());
            Entities.Point = Point;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            var PosExtensionError = (function (_super) {
                __extends(PosExtensionError, _super);
                function PosExtensionError(errorDetails) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(errorDetails) || Commerce.StringExtensions.isNullOrWhitespace(errorDetails.localizedMessage)) {
                        throw "Invalid details provided to the ExtensionError constructor. Error details with a localized message must be provided.";
                    }
                    _this = _super.call(this, Commerce.ErrorTypeEnum.APPLICATION_ERROR, false, errorDetails.localizedMessage) || this;
                    _this.__proto__ = PosExtensionError.prototype;
                    _this._localizedMessage = errorDetails.localizedMessage;
                    return _this;
                }
                Object.defineProperty(PosExtensionError.prototype, "localizedMessage", {
                    get: function () {
                        return this._localizedMessage;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PosExtensionError;
            }(Commerce.Proxy.Entities.Error));
            Entities.PosExtensionError = PosExtensionError;
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var PriceType;
            (function (PriceType) {
                PriceType[PriceType["None"] = 0] = "None";
                PriceType[PriceType["FromItem"] = 1] = "FromItem";
                PriceType[PriceType["Price"] = 2] = "Price";
                PriceType[PriceType["Percent"] = 3] = "Percent";
            })(PriceType = Entities.PriceType || (Entities.PriceType = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var ReasonCodeInputTypeEnum;
            (function (ReasonCodeInputTypeEnum) {
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["None"] = 0] = "None";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["SubCode"] = 1] = "SubCode";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["Date"] = 2] = "Date";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["Numeric"] = 3] = "Numeric";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["Item"] = 4] = "Item";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["Customer"] = 5] = "Customer";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["Staff"] = 6] = "Staff";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["Text"] = 9] = "Text";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["SubCodeButtons"] = 10] = "SubCodeButtons";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["AgeLimit"] = 11] = "AgeLimit";
                ReasonCodeInputTypeEnum[ReasonCodeInputTypeEnum["CompositeSubCodes"] = 12] = "CompositeSubCodes";
            })(ReasonCodeInputTypeEnum = Entities.ReasonCodeInputTypeEnum || (Entities.ReasonCodeInputTypeEnum = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var ReasonCodeTableRefType;
            (function (ReasonCodeTableRefType) {
                ReasonCodeTableRefType[ReasonCodeTableRefType["None"] = 0] = "None";
                ReasonCodeTableRefType[ReasonCodeTableRefType["Item"] = 1] = "Item";
                ReasonCodeTableRefType[ReasonCodeTableRefType["Customer"] = 2] = "Customer";
                ReasonCodeTableRefType[ReasonCodeTableRefType["Tender"] = 3] = "Tender";
                ReasonCodeTableRefType[ReasonCodeTableRefType["CreditCard"] = 4] = "CreditCard";
                ReasonCodeTableRefType[ReasonCodeTableRefType["IncomeExpense"] = 5] = "IncomeExpense";
                ReasonCodeTableRefType[ReasonCodeTableRefType["ItemDepartment"] = 6] = "ItemDepartment";
                ReasonCodeTableRefType[ReasonCodeTableRefType["ItemGroup"] = 7] = "ItemGroup";
                ReasonCodeTableRefType[ReasonCodeTableRefType["HierarchyTable"] = 8] = "HierarchyTable";
                ReasonCodeTableRefType[ReasonCodeTableRefType["InventTable"] = 9] = "InventTable";
                ReasonCodeTableRefType[ReasonCodeTableRefType["Affiliation"] = 10] = "Affiliation";
            })(ReasonCodeTableRefType = Entities.ReasonCodeTableRefType || (Entities.ReasonCodeTableRefType = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var CustomerReceiptPreferenceEnum;
            (function (CustomerReceiptPreferenceEnum) {
                CustomerReceiptPreferenceEnum[CustomerReceiptPreferenceEnum["POS"] = 0] = "POS";
                CustomerReceiptPreferenceEnum[CustomerReceiptPreferenceEnum["Email"] = 1] = "Email";
                CustomerReceiptPreferenceEnum[CustomerReceiptPreferenceEnum["Both"] = 2] = "Both";
            })(CustomerReceiptPreferenceEnum = Entities.CustomerReceiptPreferenceEnum || (Entities.CustomerReceiptPreferenceEnum = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var SalesLineForDisplay = (function (_super) {
                __extends(SalesLineForDisplay, _super);
                function SalesLineForDisplay(salesLine, product) {
                    var _this = _super.call(this, salesLine) || this;
                    _this._product = product;
                    return _this;
                }
                Object.defineProperty(SalesLineForDisplay.prototype, "productName", {
                    get: function () {
                        return Commerce.ObjectExtensions.isNullOrUndefined(this._product) ? Commerce.StringExtensions.EMPTY : this._product.Name;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesLineForDisplay.prototype, "variantDescription", {
                    get: function () {
                        return Commerce.ObjectExtensions.isNullOrUndefined(this._product) ? Commerce.StringExtensions.EMPTY :
                            Commerce.SimpleProductHelper.getVariantDescription(this._product);
                    },
                    enumerable: true,
                    configurable: true
                });
                return SalesLineForDisplay;
            }(Proxy.Entities.SalesLineClass));
            Entities.SalesLineForDisplay = SalesLineForDisplay;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var SalesOrderWrapper = (function () {
                function SalesOrderWrapper(salesOrder) {
                    this.salesOrder = salesOrder;
                }
                SalesOrderWrapper.convertDocumentToSalesStatus = function (documentStatus) {
                    switch (documentStatus) {
                        case Proxy.Entities.DocumentStatus.None:
                            return Proxy.Entities.SalesStatus.Created;
                        case Proxy.Entities.DocumentStatus.PickingList:
                            return Proxy.Entities.SalesStatus.Processing;
                        case Proxy.Entities.DocumentStatus.PackingSlip:
                            return Proxy.Entities.SalesStatus.Delivered;
                        case Proxy.Entities.DocumentStatus.Invoice:
                            return Proxy.Entities.SalesStatus.Invoiced;
                        case Proxy.Entities.DocumentStatus.Confirmation:
                            return Proxy.Entities.SalesStatus.Confirmed;
                        case Proxy.Entities.DocumentStatus.Canceled:
                            return Proxy.Entities.SalesStatus.Canceled;
                        case Proxy.Entities.DocumentStatus.Lost:
                            return Proxy.Entities.SalesStatus.Lost;
                        default:
                            return Proxy.Entities.SalesStatus.Unknown;
                    }
                };
                Object.defineProperty(SalesOrderWrapper.prototype, "customerOrderType", {
                    get: function () {
                        return SalesOrderWrapper.getOrderTypeString(this.salesOrder.CustomerOrderTypeValue);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderWrapper.prototype, "transactionType", {
                    get: function () {
                        switch (this.salesOrder.TransactionTypeValue) {
                            case Entities.SalesTransactionType.CustomerOrder:
                                return Commerce.ViewModelAdapter.getResourceString("string_4515");
                            case Entities.SalesTransactionType.IncomeExpense:
                                return Commerce.ViewModelAdapter.getResourceString("string_4516");
                            case Entities.SalesTransactionType.None:
                                return Commerce.ViewModelAdapter.getResourceString("string_4517");
                            case Entities.SalesTransactionType.PendingSalesOrder:
                                return Commerce.ViewModelAdapter.getResourceString("string_4518");
                            case Entities.SalesTransactionType.Sales:
                                return Commerce.ViewModelAdapter.getResourceString("string_4519");
                            default:
                                return Commerce.StringExtensions.EMPTY;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderWrapper.prototype, "orderStatus", {
                    get: function () {
                        return SalesOrderWrapper.getOrderStatusString(this.salesOrder.StatusValue);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SalesOrderWrapper.prototype, "documentStatus", {
                    get: function () {
                        return this.getDocumentStatusString(this.salesOrder.DocumentStatusValue);
                    },
                    enumerable: true,
                    configurable: true
                });
                SalesOrderWrapper.getOrderTypeString = function (orderType) {
                    switch (orderType) {
                        case Proxy.Entities.CustomerOrderType.Quote:
                            return Commerce.ViewModelAdapter.getResourceString("string_4569");
                        case Proxy.Entities.CustomerOrderType.SalesOrder:
                            return Commerce.ViewModelAdapter.getResourceString("string_4568");
                        default:
                            return Commerce.StringExtensions.EMPTY;
                    }
                };
                SalesOrderWrapper.getOrderStatusString = function (status) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(status)) {
                        status = Entities.SalesStatus.Unknown;
                    }
                    switch (status) {
                        case Entities.SalesStatus.Created:
                            return Commerce.ViewModelAdapter.getResourceString("string_4521");
                        case Entities.SalesStatus.Processing:
                            return Commerce.ViewModelAdapter.getResourceString("string_4522");
                        case Entities.SalesStatus.Delivered:
                            return Commerce.ViewModelAdapter.getResourceString("string_4523");
                        case Entities.SalesStatus.Invoiced:
                            return Commerce.ViewModelAdapter.getResourceString("string_4524");
                        case Entities.SalesStatus.Confirmed:
                            return Commerce.ViewModelAdapter.getResourceString("string_4525");
                        case Entities.SalesStatus.Sent:
                            return Commerce.ViewModelAdapter.getResourceString("string_4526");
                        case Entities.SalesStatus.Canceled:
                            return Commerce.ViewModelAdapter.getResourceString("string_4527");
                        case Entities.SalesStatus.Lost:
                            return Commerce.ViewModelAdapter.getResourceString("string_4528");
                        default:
                            return Commerce.ViewModelAdapter.getResourceString("string_4520");
                    }
                };
                SalesOrderWrapper.prototype.getDocumentStatusString = function (documentStatus) {
                    var documentToSalesStatus = SalesOrderWrapper.convertDocumentToSalesStatus(documentStatus);
                    return SalesOrderWrapper.getOrderStatusString(documentToSalesStatus);
                };
                return SalesOrderWrapper;
            }());
            Entities.SalesOrderWrapper = SalesOrderWrapper;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var ScreenLayout = (function () {
                function ScreenLayout() {
                    this._configurationProperties = Object.create(null);
                }
                ScreenLayout.prototype.setConfigurationProperty = function (propertyName, controlId, value) {
                    this._configurationProperties[ScreenLayout._getConfigurationPropertyKey(propertyName, controlId)] = value;
                };
                ScreenLayout.prototype.getConfigurationProperty = function (propertyName, controlId) {
                    return this._configurationProperties[ScreenLayout._getConfigurationPropertyKey(propertyName, controlId)];
                };
                ScreenLayout._getConfigurationPropertyKey = function (propertyName, controlId) {
                    propertyName = Commerce.ObjectExtensions.isNullOrUndefined(propertyName) ? Commerce.StringExtensions.EMPTY : propertyName.toLowerCase();
                    controlId = Commerce.ObjectExtensions.isNullOrUndefined(controlId) ? Commerce.StringExtensions.EMPTY : controlId.toLowerCase();
                    return propertyName + controlId;
                };
                return ScreenLayout;
            }());
            Entities.ScreenLayout = ScreenLayout;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var StartScreen;
            (function (StartScreen) {
                StartScreen[StartScreen["Welcome"] = 0] = "Welcome";
                StartScreen[StartScreen["Transaction"] = 1] = "Transaction";
            })(StartScreen = Entities.StartScreen || (Entities.StartScreen = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            "use strict";
            var StockCountLineClass = (function () {
                function StockCountLineClass(commerceStockCountLine, product) {
                    this._colorTranslation = Commerce.StringExtensions.EMPTY;
                    this._configurationTranslation = Commerce.StringExtensions.EMPTY;
                    this._sizeTranslation = Commerce.StringExtensions.EMPTY;
                    this._styleTranslation = Commerce.StringExtensions.EMPTY;
                    this._originalLine = commerceStockCountLine;
                    this._product = product;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._product)) {
                        this._colorTranslation = Commerce.SimpleProductHelper.getDimensionValue(this._product, Commerce.Proxy.Entities.ProductDimensionType.Color);
                        this._sizeTranslation = Commerce.SimpleProductHelper.getDimensionValue(this._product, Commerce.Proxy.Entities.ProductDimensionType.Size);
                        this._styleTranslation = Commerce.SimpleProductHelper.getDimensionValue(this._product, Commerce.Proxy.Entities.ProductDimensionType.Style);
                        this._configurationTranslation = Commerce.SimpleProductHelper.getDimensionValue(this._product, Commerce.Proxy.Entities.ProductDimensionType.Configuration);
                    }
                }
                Object.defineProperty(StockCountLineClass.prototype, "originalLine", {
                    get: function () {
                        return this._originalLine;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "recordId", {
                    get: function () {
                        return this._originalLine.RecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "productRecordId", {
                    get: function () {
                        return this._originalLine.ProductRecordId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "itemId", {
                    get: function () {
                        return this._originalLine.ItemId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "colorTranslation", {
                    get: function () {
                        return this._colorTranslation;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "configurationTranslation", {
                    get: function () {
                        return this._configurationTranslation;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "sizeTranslation", {
                    get: function () {
                        return this._sizeTranslation;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "styleTranslation", {
                    get: function () {
                        return this._styleTranslation;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "inventColorId", {
                    get: function () {
                        return this._originalLine.InventColorId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "configId", {
                    get: function () {
                        return this._originalLine.ConfigId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "inventSizeId", {
                    get: function () {
                        return this._originalLine.InventSizeId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "inventStyleId", {
                    get: function () {
                        return this._originalLine.InventStyleId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "itemName", {
                    get: function () {
                        return this._originalLine.ItemName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "counted", {
                    get: function () {
                        return this._originalLine.Counted;
                    },
                    set: function (newCounted) {
                        this._originalLine.Counted = newCounted;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "quantity", {
                    get: function () {
                        return this._originalLine.Quantity;
                    },
                    set: function (newQuantity) {
                        this._originalLine.Quantity = newQuantity;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "userId", {
                    get: function () {
                        return this._originalLine.UserId;
                    },
                    set: function (newUserId) {
                        this._originalLine.UserId = newUserId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "status", {
                    get: function () {
                        return this._originalLine.Status;
                    },
                    set: function (newStatus) {
                        this._originalLine.Status = newStatus;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "dataAreaId", {
                    get: function () {
                        return this._originalLine.DataAreaId;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "product", {
                    get: function () {
                        return this._product;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StockCountLineClass.prototype, "warehouseLocationId", {
                    get: function () {
                        return this._originalLine.WarehouseLocationId;
                    },
                    set: function (newValue) {
                        this._originalLine.WarehouseLocationId = newValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                return StockCountLineClass;
            }());
            Entities.StockCountLineClass = StockCountLineClass;
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var TaskRecorderODataType = (function () {
                function TaskRecorderODataType() {
                }
                TaskRecorderODataType.recording = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.Recording";
                TaskRecorderODataType.scope = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.Scope";
                TaskRecorderODataType.annotation = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.TaskGuideAnnotation";
                TaskRecorderODataType.taskUserAction = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.TaskUserAction";
                TaskRecorderODataType.commandUserAction = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.CommandUserAction";
                TaskRecorderODataType.infoUserAction = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.InfoUserAction";
                TaskRecorderODataType.menuItemUserAction = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.MenuItemUserAction";
                TaskRecorderODataType.propertyUserAction = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.PropertyUserAction";
                TaskRecorderODataType.validationUserAction = "#Microsoft.Dynamics.Commerce.Runtime.DataModel.ValidationUserAction";
                return TaskRecorderODataType;
            }());
            Entities.TaskRecorderODataType = TaskRecorderODataType;
            var TaskRecorderRecordingClass = (function () {
                function TaskRecorderRecordingClass(odataObject) {
                    odataObject = odataObject || {};
                    this.Scopes = undefined;
                    if (odataObject.Scopes) {
                        this.Scopes = [];
                        for (var i = 0; i < odataObject.Scopes.length; i++) {
                            this.Scopes[i] = odataObject.Scopes[i] ? new Entities.ScopeClass(odataObject.Scopes[i]) : null;
                        }
                    }
                    this.FormContextEntries = undefined;
                    if (odataObject.FormContextEntries) {
                        this.FormContextEntries = [];
                        for (var i = 0; i < odataObject.FormContextEntries.length; i++) {
                            this.FormContextEntries[i] = odataObject.FormContextEntries[i] ?
                                new Entities.FormContextDictionaryEntryClass(odataObject.FormContextEntries[i]) : null;
                        }
                    }
                    this.RootScope = odataObject.RootScope ? new TaskRecorderScopeClass(odataObject.RootScope) : null;
                    this.Name = odataObject.Name;
                    this.Description = odataObject.Description;
                }
                return TaskRecorderRecordingClass;
            }());
            Entities.TaskRecorderRecordingClass = TaskRecorderRecordingClass;
            var TaskRecorderScopeClass = (function (_super) {
                __extends(TaskRecorderScopeClass, _super);
                function TaskRecorderScopeClass(odataObject) {
                    var _this = _super.call(this, odataObject) || this;
                    _this.oDataTypePropertyName = "@odata.type";
                    odataObject = odataObject || {};
                    _this.Name = odataObject.Name;
                    _this.ScopeTypeValue = odataObject.ScopeTypeValue;
                    _this.Children = undefined;
                    if (odataObject.Children) {
                        _this.Children = [];
                        for (var i = 0; i < odataObject.Children.length; i++) {
                            _this.Children[i] = odataObject.Children[i] ? _this.createChild(odataObject.Children[i]) : null;
                        }
                    }
                    _this.ActiveCount = odataObject.ActiveCount;
                    _this.IsForm = odataObject.IsForm;
                    return _this;
                }
                TaskRecorderScopeClass.prototype.createChild = function (odataObject) {
                    var result = null;
                    switch (odataObject[this.oDataTypePropertyName]) {
                        case TaskRecorderODataType.scope:
                            result = new TaskRecorderScopeClass(odataObject);
                            break;
                        case TaskRecorderODataType.commandUserAction:
                            result = new Entities.CommandUserActionClass(odataObject);
                            break;
                        case TaskRecorderODataType.taskUserAction:
                            result = new Entities.TaskUserActionClass(odataObject);
                            break;
                        case TaskRecorderODataType.infoUserAction:
                        case TaskRecorderODataType.menuItemUserAction:
                        case TaskRecorderODataType.propertyUserAction:
                        case TaskRecorderODataType.validationUserAction:
                            result = new Entities.UserActionClass(odataObject);
                            break;
                        default:
                            result = new Entities.NodeClass(odataObject);
                            break;
                    }
                    return result;
                };
                return TaskRecorderScopeClass;
            }(Entities.NodeClass));
            Entities.TaskRecorderScopeClass = TaskRecorderScopeClass;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            var TenderFunctionEnum;
            (function (TenderFunctionEnum) {
                TenderFunctionEnum[TenderFunctionEnum["Normal"] = 0] = "Normal";
                TenderFunctionEnum[TenderFunctionEnum["Card"] = 1] = "Card";
                TenderFunctionEnum[TenderFunctionEnum["Check"] = 2] = "Check";
                TenderFunctionEnum[TenderFunctionEnum["Customer"] = 3] = "Customer";
                TenderFunctionEnum[TenderFunctionEnum["TenderRemoveFloat"] = 4] = "TenderRemoveFloat";
            })(TenderFunctionEnum = Entities.TenderFunctionEnum || (Entities.TenderFunctionEnum = {}));
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Entities;
        (function (Entities) {
            "use strict";
            var TillLayoutProxy = (function () {
                function TillLayoutProxy(tillLayoutResponse) {
                    var _this = this;
                    this._buttonGridsByZoneId = null;
                    this._buttonGridsById = null;
                    this._designerControlTypeCustomerPanel = "Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls.ICustomerPanel";
                    this._layoutCssPrefix = " .tillLayout-";
                    this._startView = "HomeView";
                    this._tillLayoutResponse = tillLayoutResponse;
                    this.transactionScreenLayout = new Entities.ScreenLayout();
                    var tillLayoutResponseDefined = !Commerce.ObjectExtensions.isNullOrUndefined(tillLayoutResponse);
                    if (tillLayoutResponseDefined
                        && Commerce.ObjectExtensions.isNumber(this._tillLayoutResponse.StartScreen)
                        && this._tillLayoutResponse.StartScreen === Entities.StartScreen.Transaction) {
                        this._startView = "CartView";
                    }
                    if (!tillLayoutResponseDefined || Commerce.StringExtensions.isNullOrWhitespace(tillLayoutResponse.LayoutXml)) {
                        Commerce.ViewModelAdapter.displayMessage("string_4", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_1");
                    }
                    else {
                        try {
                            this.transactionScreenLayout.landscape = JSON.parse(tillLayoutResponse.LayoutXml);
                            this.updateOldLayoutFormat(this.transactionScreenLayout.landscape);
                            if (tillLayoutResponse.LayoutXmlPortrait) {
                                this.transactionScreenLayout.portrait = JSON.parse(tillLayoutResponse.LayoutXmlPortrait);
                                this.updateOldLayoutFormat(this.transactionScreenLayout.portrait);
                            }
                        }
                        catch (ex) {
                            Commerce.ViewModelAdapter.displayMessage("string_5", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default, "string_1");
                            return;
                        }
                        var cssContent = [];
                        var classPrefix = this._layoutCssPrefix + "TransactionScreenLayout";
                        cssContent[cssContent.length] = "@media (orientation:landscape) {";
                        this.buildCss(cssContent, this.transactionScreenLayout.landscape.DesignerControls, classPrefix);
                        cssContent[cssContent.length] = "}";
                        if (this.transactionScreenLayout.portrait) {
                            cssContent[cssContent.length] = "@media (orientation:portrait) {";
                            this.buildCss(cssContent, this.transactionScreenLayout.portrait.DesignerControls, classPrefix);
                            cssContent[cssContent.length] = "}";
                        }
                        var $css = $("head").find("style[title=TillLayoutStyles]");
                        $css.text(cssContent.join(Commerce.StringExtensions.EMPTY));
                    }
                    this._orientationSwitchHandler = function (mediaQueryArgs) {
                        _this.orientation = mediaQueryArgs.matches ? Entities.Orientation.LANDSCAPE : Entities.Orientation.PORTRAIT;
                        Commerce.EventProxy.Instance.raiseCustomEvent("OrientationChangedEvent", _this.orientation);
                    };
                    this.attachOrientationTracking();
                }
                Object.defineProperty(TillLayoutProxy.prototype, "startView", {
                    get: function () {
                        return this._startView;
                    },
                    enumerable: true,
                    configurable: true
                });
                TillLayoutProxy.prototype.addOrientationChangedHandler = function (element, eventHandler) {
                    if (eventHandler) {
                        Commerce.EventProxy.Instance.addCustomEventHandler(element, "OrientationChangedEvent", eventHandler);
                    }
                };
                TillLayoutProxy.prototype.removeOrientationChangedHandler = function (element, eventHandler) {
                    if (eventHandler) {
                        Commerce.EventProxy.Instance.removeCustomEventHandler(element, "OrientationChangedEvent", eventHandler);
                    }
                };
                TillLayoutProxy.prototype.getButtonGridZones = function () {
                    if (this._tillLayoutResponse) {
                        return this._tillLayoutResponse.ButtonGridZones;
                    }
                    return null;
                };
                TillLayoutProxy.prototype.getImageZones = function (imageZoneIds) {
                    var results = [];
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._tillLayoutResponse) && !Commerce.ObjectExtensions.isNullOrUndefined(this._tillLayoutResponse.ImageZones) &&
                        this._tillLayoutResponse.ImageZones.length > 0) {
                        results = this._tillLayoutResponse.ImageZones.filter(function (item) {
                            return imageZoneIds.indexOf(item.ZoneId) > -1;
                        });
                    }
                    return results;
                };
                TillLayoutProxy.prototype.setButtonGrids = function (buttonGrids) {
                    this._allButtonGrids = buttonGrids;
                };
                TillLayoutProxy.prototype.getLayoutType = function () {
                    return this._tillLayoutResponse.LayoutTypeValue;
                };
                TillLayoutProxy.prototype.getButtonGridById = function (buttonGridId) {
                    if (this._buttonGridsById == null) {
                        this.initializeButtonGridDictionary();
                    }
                    return this._buttonGridsById[buttonGridId];
                };
                TillLayoutProxy.prototype.getButtonGridByZoneIds = function (buttonGridZoneIds) {
                    var buttonGrids = new Commerce.Dictionary();
                    if (this._buttonGridsByZoneId == null) {
                        this.initializeButtonGridDictionary();
                    }
                    for (var i = 0; i < buttonGridZoneIds.length; i++) {
                        var buttonGrid = this._buttonGridsByZoneId[buttonGridZoneIds[i]];
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(buttonGrid)) {
                            buttonGrids.setItem(buttonGridZoneIds[i], buttonGrid);
                        }
                    }
                    return buttonGrids;
                };
                TillLayoutProxy.prototype.getCustomControls = function (view) {
                    return this.getLayoutItems(view, "ICustomControl");
                };
                TillLayoutProxy.prototype.getLayoutItem = function (view, layoutItemId) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(layoutItemId)) {
                        var layout = this.getLayout(view);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(layout)) {
                            if (layout.DesignerControls) {
                                var filteredItems = layout.DesignerControls.filter(function (item) {
                                    return item.ID === layoutItemId;
                                });
                                if (filteredItems.length > 0) {
                                    var item = filteredItems[0];
                                    return item;
                                }
                                else {
                                    var tabControls = layout.DesignerControls.filter(function (item) {
                                        return item.ID === "TabControl";
                                    });
                                    if (tabControls.length > 0) {
                                        var tabControl = tabControls[0];
                                        var tabItems = tabControl.TabPages.filter(function (item) {
                                            return item.Content.ID === layoutItemId;
                                        });
                                        if (tabItems.length > 0) {
                                            var item = tabItems[0].Content;
                                            return item;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return null;
                };
                TillLayoutProxy.prototype.getLayout = function (view) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(view)) {
                        var screenLayout = this[view];
                        if (!screenLayout) {
                            return null;
                        }
                        var layout = null;
                        switch (this.orientation) {
                            case Entities.Orientation.PORTRAIT:
                                layout = screenLayout.portrait;
                                break;
                            case Entities.Orientation.LANDSCAPE:
                                layout = screenLayout.landscape;
                                break;
                        }
                        return layout;
                    }
                    return null;
                };
                TillLayoutProxy.prototype.getTillLayoutId = function () {
                    return this._tillLayoutResponse.LayoutId;
                };
                TillLayoutProxy.prototype.getTillLayoutWidth = function () {
                    return this._tillLayoutResponse.Width;
                };
                TillLayoutProxy.prototype.getTillLayoutHeight = function () {
                    return this._tillLayoutResponse.Height;
                };
                TillLayoutProxy.prototype.dispose = function () {
                    this.clearHandlers();
                };
                TillLayoutProxy.prototype.getLayoutItems = function (view, type) {
                    var matchingLayouts = [];
                    if (Commerce.StringExtensions.isNullOrWhitespace(view)) {
                        return matchingLayouts;
                    }
                    var parentLayout = this.getLayout(view);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(parentLayout)) {
                        return matchingLayouts;
                    }
                    var candidateLayouts = parentLayout.DesignerControls;
                    parentLayout.DesignerControls.filter(function (childLayout) {
                        return childLayout.Type.indexOf("ITabControl") !== -1;
                    }).forEach(function (tabControlLayout) {
                        var newCandidateLayouts = tabControlLayout.TabPages.map(function (tabPageLayout) {
                            return tabPageLayout.Content;
                        });
                        candidateLayouts = candidateLayouts.concat(newCandidateLayouts);
                    });
                    matchingLayouts = candidateLayouts.filter(function (candidateLayout) {
                        return candidateLayout.Type.indexOf(type) !== -1;
                    });
                    return matchingLayouts;
                };
                TillLayoutProxy.prototype.fontSchemeFormatter = function (fontScheme) {
                    return fontScheme === 0 ? "10px" : "15px";
                };
                TillLayoutProxy.prototype.attachOrientationTracking = function () {
                    if (!this._landscapeMediaQuery) {
                        this._landscapeMediaQuery = window.matchMedia("(orientation: landscape)");
                        this.orientation = this._landscapeMediaQuery.matches ? Entities.Orientation.LANDSCAPE : Entities.Orientation.PORTRAIT;
                        this._landscapeMediaQuery.addListener(this._orientationSwitchHandler);
                    }
                };
                TillLayoutProxy.prototype.clearHandlers = function () {
                    if (this._landscapeMediaQuery) {
                        this._landscapeMediaQuery.removeListener(this._orientationSwitchHandler);
                        this._landscapeMediaQuery = null;
                    }
                };
                TillLayoutProxy.prototype.buildCss = function (cssContent, designerControls, prefix) {
                    var _this = this;
                    if (Commerce.ArrayExtensions.hasElements(designerControls)) {
                        designerControls.forEach(function (designerControl, index, array) {
                            var controlClassPrefix = prefix + " #" + designerControl.ID.replace(" ", "_");
                            switch (designerControl.Type) {
                                case "Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls.ITransactionGrid":
                                    _this.buildITransactionGridCss(cssContent, designerControl, controlClassPrefix);
                                    break;
                                case "Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls.ITabControl":
                                    _this.buildCss(cssContent, designerControl.TabPages, prefix);
                                    break;
                                case "Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls.ILogo":
                                    _this.buildILogoCss(cssContent, designerControl, controlClassPrefix);
                                    break;
                                case _this._designerControlTypeCustomerPanel:
                                    _this.buildCustomerPanelCss(cssContent, designerControl, controlClassPrefix);
                                    break;
                                case "Microsoft.Dynamics.Retail.TillLayoutDesigner.Contracts.Controls.IButtonGrid":
                                    _this.buildButtonGridCss(cssContent, designerControl, controlClassPrefix);
                                    break;
                            }
                            if (designerControl.Content && designerControl.Content.Type) {
                                _this.buildCss(cssContent, [designerControl.Content], prefix);
                            }
                            _this.buildControlDimensionsCss(cssContent, designerControl, controlClassPrefix);
                        });
                    }
                };
                TillLayoutProxy.prototype.buildILogoCss = function (cssContent, designerControl, prefix) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(designerControl.ImageID)) {
                        var imageZones = this.getImageZones([designerControl.ZoneID]);
                        if (imageZones.length > 0) {
                            cssContent.push(prefix + " { background-repeat: no-repeat;background-position-y: center;");
                            cssContent.push("background-image: url('data:image;base64," + imageZones[0].PictureAsBase64 + "');");
                            if (designerControl.StretchImageToFit) {
                                cssContent.push("background-size: cover;");
                            }
                            cssContent.push("} ");
                        }
                    }
                };
                TillLayoutProxy.prototype.buildCustomerPanelCss = function (cssContent, designerControl, cssClass) {
                    var layoutDataWithDisplayBlock = {
                        "ShowImage": designerControl.ShowImage,
                        "ShowName": designerControl.ShowName,
                        "ShowAccountNumber": designerControl.ShowAccountNumber
                    };
                    Object.keys(layoutDataWithDisplayBlock).forEach(function (key) {
                        var fieldCssClass = cssClass + " ." + key;
                        if (!layoutDataWithDisplayBlock[key] || layoutDataWithDisplayBlock[key] === 0) {
                            cssContent.push(fieldCssClass + " { display: none; }");
                        }
                        else {
                            cssContent.push(fieldCssClass + " { display: block; }");
                        }
                    });
                    var layoutDataWithDisplayFlex = {
                        "ShowLoyaltyCard": designerControl.ShowLoyaltyCard,
                        "ShowBalance": designerControl.ShowBalance,
                        "ShowCreditLimit": designerControl.ShowCreditLimit
                    };
                    Object.keys(layoutDataWithDisplayFlex).forEach(function (key) {
                        var fieldCssClass = cssClass + " ." + key;
                        if (!layoutDataWithDisplayFlex[key] || layoutDataWithDisplayFlex[key] === 0) {
                            cssContent.push(fieldCssClass + " { display: none; }");
                        }
                        else {
                            cssContent.push(fieldCssClass + " { display: flex; }");
                        }
                    });
                    var addressType = designerControl.AddressType;
                    if (addressType === 1) {
                        cssContent.push(cssClass + " .customerPanelPrimaryAddress { display: flex; }");
                        cssContent.push(cssClass + " .customerPanelInvoiceAddress { display: none; }");
                    }
                    else if (addressType === 2) {
                        cssContent.push(cssClass + " .customerPanelInvoiceAddress { display: flex; }");
                        cssContent.push(cssClass + " .customerPanelPrimaryAddress { display: none; }");
                    }
                };
                TillLayoutProxy.prototype.buildControlDimensionsCss = function (cssContent, designerControl, cssClass) {
                    if (!Commerce.Config.isPhone) {
                        cssContent.push(cssClass + "{ ");
                        var addCssProperty = function (propertyName) {
                            var controlProperty = designerControl[propertyName];
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(controlProperty)) {
                                cssContent.push(propertyName.toLowerCase() + ": " + controlProperty + "px; ");
                            }
                        };
                        cssContent.push("display: block;");
                        addCssProperty("Left");
                        addCssProperty("Top");
                        addCssProperty("Width");
                        addCssProperty("Height");
                        cssContent.push("} ");
                    }
                };
                TillLayoutProxy.prototype.buildITransactionGridCss = function (cssContent, designerControl, prefix) {
                    var _this = this;
                    var transactionGridListviewPrefix = prefix + " .listViewContainer";
                    var fontSize = this.fontSchemeFormatter(Commerce.ApplicationContext.Instance.deviceConfiguration.FontScheme);
                    cssContent.push(transactionGridListviewPrefix + " { font-size: " + fontSize + "; }");
                    var buildGridCss = function (propertyName, isAdditionalField) {
                        var controls = designerControl[propertyName];
                        var gridPrefix = prefix + _this._layoutCssPrefix + propertyName;
                        if (Commerce.ArrayExtensions.hasElements(controls)) {
                            var cartLinesColumns_1 = [];
                            controls.forEach(function (control, index, array) {
                                _this.transactionScreenLayout.setConfigurationProperty(propertyName, control.ID, true);
                                if (!isAdditionalField) {
                                    if ((!Commerce.ObjectExtensions.isNullOrUndefined(control.Width)) && (control.Width > 0)) {
                                        cartLinesColumns_1.push(Commerce.StringExtensions.format("{0} >{1}{2}{ min-width:{3}px; max-width:{3}px; } ", gridPrefix, _this._layoutCssPrefix, control.ID, control.Width));
                                    }
                                }
                                cartLinesColumns_1.push(Commerce.StringExtensions.format("{0} >{1}{2}{ order:{3}; display: block; flex-grow:1; flex-basis:0; } ", gridPrefix, _this._layoutCssPrefix, control.ID, index + 1));
                                cartLinesColumns_1.push(Commerce.StringExtensions.format("{0} {1}{2} >.h4{ display: inline; } ", gridPrefix, _this._layoutCssPrefix, control.ID));
                            });
                            cssContent.push(Commerce.StringExtensions.format("{0} > * { display:none; } ", gridPrefix));
                            cssContent.push(cartLinesColumns_1.join(Commerce.StringExtensions.EMPTY));
                        }
                    };
                    buildGridCss("SelectedLinesFields", false);
                    buildGridCss("SelectedPaymentsFields", false);
                    buildGridCss("SelectedDeliveryFields", false);
                    buildGridCss("SelectedAdditionalLineFields", true);
                };
                TillLayoutProxy.prototype.buildButtonGridCss = function (cssContent, designerControl, cssClass) {
                    var displayTitleAboveControl = designerControl.DisplayTitleAboveControl;
                    var fieldCssClass = cssClass + " .titleAboveControl";
                    if (displayTitleAboveControl) {
                        cssContent.push(fieldCssClass + " { display: block !important; }");
                    }
                    else {
                        cssContent.push(fieldCssClass + " { display: none !important; }");
                    }
                };
                TillLayoutProxy.prototype.initializeButtonGridDictionary = function () {
                    this._buttonGridsByZoneId = {};
                    this._buttonGridsById = {};
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._tillLayoutResponse) &&
                        Commerce.ArrayExtensions.hasElements(this._tillLayoutResponse.ButtonGridZones) &&
                        Commerce.ArrayExtensions.hasElements(this._allButtonGrids)) {
                        for (var i = 0; i < this._allButtonGrids.length; i++) {
                            var buttonGrid = this._allButtonGrids[i];
                            for (var j = 0; j < this._tillLayoutResponse.ButtonGridZones.length; j++) {
                                var buttonGridZone = this._tillLayoutResponse.ButtonGridZones[j];
                                if (buttonGridZone.ButtonGridId === buttonGrid.Id) {
                                    this._buttonGridsByZoneId[buttonGridZone.ZoneId] = buttonGrid;
                                }
                            }
                            this._buttonGridsById[buttonGrid.Id] = buttonGrid;
                        }
                    }
                };
                TillLayoutProxy.prototype.updateOldLayoutFormat = function (layout) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(layout)) {
                        return;
                    }
                    layout.DesignerControls.forEach(function (designerControl) {
                        if (designerControl.Type === _this._designerControlTypeCustomerPanel) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(designerControl.SelectedCustomerFields)) {
                                designerControl.SelectedCustomerFields = new Array();
                                if (designerControl.ShowLoyaltyCard) {
                                    var selectedLoyaltyCard = new Entities.Layout();
                                    selectedLoyaltyCard.ID = "LoyaltyCardField";
                                    selectedLoyaltyCard.IsCustomAttribute = false;
                                    designerControl.SelectedCustomerFields.push(selectedLoyaltyCard);
                                }
                                if (designerControl.ShowBalance) {
                                    var selectedShowBalance = new Entities.Layout();
                                    selectedShowBalance.ID = "BalanceField";
                                    selectedShowBalance.IsCustomAttribute = false;
                                    designerControl.SelectedCustomerFields.push(selectedShowBalance);
                                }
                                if (designerControl.ShowCreditLimit) {
                                    var selectedCreditLimit = new Entities.Layout();
                                    selectedCreditLimit.ID = "CreditLimitField";
                                    selectedCreditLimit.IsCustomAttribute = false;
                                    designerControl.SelectedCustomerFields.push(selectedCreditLimit);
                                }
                            }
                        }
                    });
                };
                return TillLayoutProxy;
            }());
            Entities.TillLayoutProxy = TillLayoutProxy;
        })(Entities = Proxy.Entities || (Proxy.Entities = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        "use strict";
        function setExtensionCultureManager(extensionCultureManager) {
            Commerce.Extensibility.ExtensionCultureManager = extensionCultureManager;
        }
        Extensibility.setExtensionCultureManager = setExtensionCultureManager;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        "use strict";
        function SetExtensionOperationProviderInstance(extensionOperationProvider) {
            Extensibility.ExtensionOperationProvider = extensionOperationProvider;
        }
        Extensibility.SetExtensionOperationProviderInstance = SetExtensionOperationProviderInstance;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        "use strict";
        var ExtensionPackagesFailureReason;
        (function (ExtensionPackagesFailureReason) {
            ExtensionPackagesFailureReason["Unknown"] = "Unknown";
        })(ExtensionPackagesFailureReason = Extensibility.ExtensionPackagesFailureReason || (Extensibility.ExtensionPackagesFailureReason = {}));
        var ExtensionPackageFailureReason;
        (function (ExtensionPackageFailureReason) {
            ExtensionPackageFailureReason["Unknown"] = "Unknown";
        })(ExtensionPackageFailureReason = Extensibility.ExtensionPackageFailureReason || (Extensibility.ExtensionPackageFailureReason = {}));
        var ExtensionFailureReason;
        (function (ExtensionFailureReason) {
            ExtensionFailureReason["Unknown"] = "Unknown";
            ExtensionFailureReason["HtmlPathNullOrWhitespace"] = "HtmlPathNullOrWhitespace";
        })(ExtensionFailureReason = Extensibility.ExtensionFailureReason || (Extensibility.ExtensionFailureReason = {}));
        var ExtensionPackageSkipReason;
        (function (ExtensionPackageSkipReason) {
            ExtensionPackageSkipReason["NotSupportedInCurrentRegion"] = "NotSupportedInCurrentRegion";
            ExtensionPackageSkipReason["NotSupportedInCurrentPosVersion"] = "NotSupportedInCurrentPosVersion";
        })(ExtensionPackageSkipReason = Extensibility.ExtensionPackageSkipReason || (Extensibility.ExtensionPackageSkipReason = {}));
        var ExtensionLoadError = (function (_super) {
            __extends(ExtensionLoadError, _super);
            function ExtensionLoadError(failureReason, failureMessage) {
                var _this = _super.call(this, failureMessage) || this;
                _this.failureReason = failureReason;
                return _this;
            }
            return ExtensionLoadError;
        }(Error));
        Extensibility.ExtensionLoadError = ExtensionLoadError;
        var ExtensionPointType;
        (function (ExtensionPointType) {
            ExtensionPointType[ExtensionPointType["AppBarCommand"] = 0] = "AppBarCommand";
            ExtensionPointType[ExtensionPointType["Control"] = 1] = "Control";
            ExtensionPointType[ExtensionPointType["CustomColumnSet"] = 2] = "CustomColumnSet";
            ExtensionPointType[ExtensionPointType["CustomControl"] = 3] = "CustomControl";
            ExtensionPointType[ExtensionPointType["CustomGridColumn"] = 4] = "CustomGridColumn";
            ExtensionPointType[ExtensionPointType["CustomGridItemSubfield"] = 5] = "CustomGridItemSubfield";
            ExtensionPointType[ExtensionPointType["CustomSearchFilter"] = 6] = "CustomSearchFilter";
            ExtensionPointType[ExtensionPointType["MenuCommand"] = 7] = "MenuCommand";
            ExtensionPointType[ExtensionPointType["NewOperation"] = 8] = "NewOperation";
            ExtensionPointType[ExtensionPointType["NewRequestHandler"] = 9] = "NewRequestHandler";
            ExtensionPointType[ExtensionPointType["NewView"] = 10] = "NewView";
            ExtensionPointType[ExtensionPointType["ReplacementRequestHandler"] = 11] = "ReplacementRequestHandler";
            ExtensionPointType[ExtensionPointType["Resources"] = 12] = "Resources";
            ExtensionPointType[ExtensionPointType["TemplatedDialog"] = 13] = "TemplatedDialog";
            ExtensionPointType[ExtensionPointType["TotalsPanelCustomField"] = 14] = "TotalsPanelCustomField";
            ExtensionPointType[ExtensionPointType["Trigger"] = 15] = "Trigger";
            ExtensionPointType[ExtensionPointType["ViewController"] = 16] = "ViewController";
        })(ExtensionPointType = Extensibility.ExtensionPointType || (Extensibility.ExtensionPointType = {}));
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var ExtensibleEnumerations;
    (function (ExtensibleEnumerations) {
        "use strict";
        ExtensibleEnumerations.CustomerSearchFieldType = Commerce.Client.Entities.CustomerSearchFieldType;
        ExtensibleEnumerations.ExtensibleAddressType = Commerce.Client.Entities.ExtensibleAddressType;
        ExtensibleEnumerations.ExtensibleAuditEventType = Commerce.Client.Entities.ExtensibleAuditEventType;
        ExtensibleEnumerations.ExtensibleEnumerationBase = Commerce.Client.Entities.ExtensibleEnumerationBase;
        ExtensibleEnumerations.ExtensibleLoyaltyRewardPointActivityEntryType = Commerce.Client.Entities.ExtensibleLoyaltyRewardPointActivityEntryType;
        ExtensibleEnumerations.ExtensibleTransactionType = Commerce.Client.Entities.ExtensibleTransactionType;
        ExtensibleEnumerations.ExtensibleSalesTransactionType = Commerce.Client.Entities.ExtensibleSalesTransactionType;
        ExtensibleEnumerations.FulfillmentLineStatus = Commerce.Client.Entities.FulfillmentLineStatus;
        ExtensibleEnumerations.FulfillmentLineDeliveryType = Commerce.Client.Entities.FulfillmentLineDeliveryType;
        var ExtensibleEnumerationManager = (function () {
            function ExtensibleEnumerationManager() {
                this._extensibleEnumerations = Object.create(null);
                ExtensibleEnumerations.ExtensibleEnumerationBase.extensibleEnumerationByNameGetter = this.getExtensibleEnumerationByName.bind(this);
                ExtensibleEnumerations.ExtensibleEnumerationBase.extensibleEnumerationByValueGetter = this.getExtensibleEnumerationByValue.bind(this);
            }
            Object.defineProperty(ExtensibleEnumerationManager, "instance", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(ExtensibleEnumerationManager._instance)) {
                        ExtensibleEnumerationManager._instance = new ExtensibleEnumerationManager();
                    }
                    return ExtensibleEnumerationManager._instance;
                },
                enumerable: true,
                configurable: true
            });
            ExtensibleEnumerationManager.prototype.getExtensibleEnumerationByName = function (typeName, valueName) {
                if (Commerce.StringExtensions.isNullOrWhitespace(typeName) || Commerce.StringExtensions.isNullOrWhitespace(valueName)) {
                    return null;
                }
                var extensibleEnumeration = this.getEnumerationValues(typeName).byName[valueName];
                if (Commerce.ObjectExtensions.isNullOrUndefined(extensibleEnumeration)) {
                    Commerce.RetailLogger.coreGetExtensibleEnumerationByNameEnumerationMissing(typeName, valueName);
                }
                return extensibleEnumeration;
            };
            ExtensibleEnumerationManager.prototype.getExtensibleEnumerationByValue = function (typeName, value) {
                if (Commerce.StringExtensions.isNullOrWhitespace(typeName) || Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                    return null;
                }
                var extensibleEnumeration = this.getEnumerationValues(typeName).byValue[value];
                if (Commerce.ObjectExtensions.isNullOrUndefined(extensibleEnumeration)) {
                    Commerce.RetailLogger.coreGetExtensibleEnumerationByValueEnumerationMissing(typeName, value);
                }
                return extensibleEnumeration;
            };
            ExtensibleEnumerationManager.prototype.loadExtensibleEnumerations = function () {
                var _this = this;
                if (!Commerce.ApplicationContext.Instance.isDeviceActivated) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var storeOperationsManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                return storeOperationsManager.getExtensibleEnumerationsAsync().map(function (enumerations) {
                    enumerations.forEach(function (enumData) {
                        var typeName = enumData.TypeName;
                        enumData.ExtensibleEnumerations.forEach(function (enumValue) {
                            _this._addExtensibleEnumerationValue(typeName, enumValue);
                        });
                    });
                });
            };
            ExtensibleEnumerationManager.prototype._addExtensibleEnumerationValue = function (typeName, enumeration) {
                this.getEnumerationValues(typeName).byName[enumeration.Name] = enumeration;
                this.getEnumerationValues(typeName).byValue[enumeration.Value] = enumeration;
            };
            ExtensibleEnumerationManager.prototype.getEnumerationValues = function (typeName) {
                if (Commerce.StringExtensions.isNullOrWhitespace(typeName)) {
                    throw "An extensible enumeration cannot have a type name that is null or whitespace.";
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._extensibleEnumerations[typeName])) {
                    this._extensibleEnumerations[typeName] = {
                        byName: Object.create(null),
                        byValue: Object.create(null)
                    };
                }
                return this._extensibleEnumerations[typeName];
            };
            return ExtensibleEnumerationManager;
        }());
        ExtensibleEnumerations.ExtensibleEnumerationManager = ExtensibleEnumerationManager;
    })(ExtensibleEnumerations = Commerce.ExtensibleEnumerations || (Commerce.ExtensibleEnumerations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var NumberExtensions = (function () {
        function NumberExtensions() {
        }
        Object.defineProperty(NumberExtensions, "decimalSeparator", {
            get: function () {
                return NumberExtensions._decimalSeparator.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberExtensions, "groupSeparator", {
            get: function () {
                return NumberExtensions._groupSeparator.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberExtensions, "DECIMAL_MAX_VALUE", {
            get: function () {
                return NumberExtensions._maxDecimalValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberExtensions, "DECIMAL_MIN_VALUE", {
            get: function () {
                return NumberExtensions._minDecimalValue;
            },
            enumerable: true,
            configurable: true
        });
        NumberExtensions.getNumberOfDecimals = function (value) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(value) || isNaN(value)) {
                return 0;
            }
            var valueParts = value.toString().split("e");
            var valueWithoutExponent = valueParts[0];
            var exponent = valueParts.length > 1 ? valueParts[1] : "0";
            var numberOfDigitsInFractionWithSeperator = valueWithoutExponent.length - Math.floor(Number(valueWithoutExponent)).toString().length;
            var numberOfDecimals = numberOfDigitsInFractionWithSeperator === 0 ? 0 : numberOfDigitsInFractionWithSeperator - 1;
            numberOfDecimals -= Number(exponent);
            numberOfDecimals = numberOfDecimals < 0 ? 0 : numberOfDecimals;
            return numberOfDecimals;
        };
        NumberExtensions.getDecimalPrecision = function (currencyCode) {
            if (currencyCode === void 0) { currencyCode = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency; }
            var currency = Commerce.ApplicationContext.Instance.currenciesMap.getItem(currencyCode);
            if (Commerce.ObjectExtensions.isNullOrUndefined(currency)) {
                return NumberExtensions.DEFAULT_DECIMAL_PRECISION;
            }
            return NumberExtensions.toDecimalPrecision(currency.NumberOfDecimals);
        };
        NumberExtensions.formatNumber = function (value, decimalPrecision, format, cultureName) {
            if (format === void 0) { format = "N"; }
            if (cultureName === void 0) { cultureName = Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName; }
            var numberFormat = Globalize.culture(cultureName.toLowerCase()).numberFormat;
            numberFormat.decimals = NumberExtensions.toDecimalPrecision(decimalPrecision);
            return Globalize.format(value, format);
        };
        NumberExtensions.formatCurrency = function (value, currencyCode, cultureName) {
            if (currencyCode === void 0) { currencyCode = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency; }
            if (cultureName === void 0) { cultureName = Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName; }
            var currency = Commerce.ApplicationContext.Instance.currenciesMap.getItem(currencyCode);
            var currencyFormat = Globalize.culture(cultureName.toLowerCase()).numberFormat.currency;
            currencyFormat.symbol = currency.CurrencySymbol;
            currencyFormat.decimals = NumberExtensions.toDecimalPrecision(currency.NumberOfDecimals);
            return Globalize.format(value, "C");
        };
        NumberExtensions.parseNumber = function (value, cultureName) {
            if (cultureName === void 0) { cultureName = Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName; }
            if (Commerce.StringExtensions.isNullOrWhitespace(value)) {
                return NaN;
            }
            return Globalize.parseFloat(value, 10, cultureName.toLowerCase());
        };
        NumberExtensions.roundToNDigits = function (value, decimalPrecision) {
            decimalPrecision = NumberExtensions.toDecimalPrecision(decimalPrecision);
            if (decimalPrecision === 0) {
                return Math.round(value);
            }
            return Math.round(value * Math.pow(10, decimalPrecision)) / Math.pow(10, decimalPrecision);
        };
        NumberExtensions.compare = function (object, comparisonObject) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(object) && Commerce.ObjectExtensions.isNullOrUndefined(comparisonObject)) {
                return 0;
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(object)) {
                return -1;
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(comparisonObject)) {
                return 1;
            }
            return object < comparisonObject ? -1 : object > comparisonObject ? 1 : 0;
        };
        NumberExtensions.isNullOrZero = function (object) {
            return (Commerce.ObjectExtensions.isNullOrUndefined(object) || object === 0);
        };
        NumberExtensions.isNullNaNOrZero = function (object) {
            return (NumberExtensions.isNullOrZero(object) || isNaN(object));
        };
        NumberExtensions.areEquivalent = function (object, comparisonObject, sigma) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(object) && Commerce.ObjectExtensions.isNullOrUndefined(comparisonObject)) {
                return true;
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(object) || Commerce.ObjectExtensions.isNullOrUndefined(comparisonObject)) {
                return false;
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(sigma)) {
                sigma = .00001;
            }
            if ((object - sigma > comparisonObject) || (object + sigma < comparisonObject)) {
                return false;
            }
            else {
                return true;
            }
        };
        NumberExtensions.roundToCurrencyPrecision = function (value, currencyCode) {
            return NumberExtensions.roundToNDigits(value, NumberExtensions.getDecimalPrecision(currencyCode));
        };
        NumberExtensions.toDecimalPrecision = function (decimalPrecision, defaultIfInvalid) {
            if (defaultIfInvalid === void 0) { defaultIfInvalid = NumberExtensions.DEFAULT_DECIMAL_PRECISION; }
            if (Commerce.ObjectExtensions.isNumber(decimalPrecision) && decimalPrecision >= 0) {
                return Math.round(decimalPrecision);
            }
            return defaultIfInvalid;
        };
        NumberExtensions.DEFAULT_DECIMAL_PRECISION = 2;
        NumberExtensions._decimalSeparator = new Commerce.Lazy(function () {
            return Globalize.culture(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName.toLowerCase()).numberFormat["."];
        });
        NumberExtensions._groupSeparator = new Commerce.Lazy(function () {
            return Globalize.culture(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName.toLowerCase()).numberFormat[","];
        });
        NumberExtensions._maxDecimalValue = 79228162514264337593543950335;
        NumberExtensions._minDecimalValue = -79228162514264337593543950335;
        return NumberExtensions;
    }());
    Commerce.NumberExtensions = NumberExtensions;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var FiscalIntegrationInitializer = (function () {
            function FiscalIntegrationInitializer() {
            }
            FiscalIntegrationInitializer.resetInitialized = function () {
                FiscalIntegrationInitializer._initialized = false;
            };
            FiscalIntegrationInitializer.prototype.isFiscalIntegrationEnabledAsync = function (correlationId) {
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.GetDeviceConfigurationClientRequest(correlationId)))
                    .map(function (result) {
                    var deviceConfiguration = result.data.result;
                    return !Commerce.StringExtensions.isNullOrWhitespace(deviceConfiguration.FiscalRegistrationProcessId);
                });
            };
            FiscalIntegrationInitializer.prototype.initializeAsync = function (correlationId) {
                var _this = this;
                if (FiscalIntegrationInitializer._initialized) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var registrationProcessSupportedTypes = [];
                return new Commerce.AsyncQueue()
                    .enqueue(function () {
                    return _this._getRegistrationProcessSupportedTypes(correlationId)
                        .map(function (result) {
                        registrationProcessSupportedTypes = result;
                    });
                })
                    .enqueue(function () {
                    return _this._registerOperationHandlersAsync(correlationId, registrationProcessSupportedTypes).map(function () { return void 0; });
                }).enqueue(function () {
                    return _this._registerInterceptorsAsync(correlationId, registrationProcessSupportedTypes).map(function () { return void 0; });
                }).enqueue(function () {
                    FiscalIntegrationInitializer._initialized = true;
                    return Commerce.AsyncResult.createResolved();
                }).run();
            };
            FiscalIntegrationInitializer.prototype._getRegistrationProcessSupportedTypes = function (correlationId) {
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new FiscalIntegration.GetFiscalIntegrationRegistrationProcessServiceRequest(correlationId))).map(function (result) {
                    var registrationProcessLines = [];
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(result.data) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(result.data.fiscalIntegrationRegistrationProcess)) {
                        registrationProcessLines = result.data.fiscalIntegrationRegistrationProcess.RegistrationProcessLines || [];
                    }
                    var allSupportedFiscalEventTypeValues = [];
                    registrationProcessLines.forEach(function (line) {
                        var fiscalUniqueEvents = line.SupportedFiscalEventTypes ?
                            line.SupportedFiscalEventTypes.filter(function (event) { return allSupportedFiscalEventTypeValues.indexOf(event) < 0; }) :
                            [];
                        allSupportedFiscalEventTypeValues.push.apply(allSupportedFiscalEventTypeValues, fiscalUniqueEvents);
                        var nonFiscalUniqueEvents = line.SupportedNonFiscalEventTypes ?
                            line.SupportedNonFiscalEventTypes.filter(function (event) { return allSupportedFiscalEventTypeValues.indexOf(event) < 0; }) :
                            [];
                        allSupportedFiscalEventTypeValues.push.apply(allSupportedFiscalEventTypeValues, nonFiscalUniqueEvents);
                    });
                    return allSupportedFiscalEventTypeValues.map(function (value) { return value; });
                });
            };
            FiscalIntegrationInitializer.prototype._registerOperationHandlersAsync = function (correlationId, registrationProcessSupportedTypes) {
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.ArrayExtensions.hasElement(registrationProcessSupportedTypes, Commerce.Proxy.Entities.FiscalIntegrationEventType.FiscalXReport)) {
                    asyncQueue.enqueue(function () { return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.RegisterLegacyOperationRequest(correlationId, {
                        id: Commerce.Operations.RetailOperation.PrintFiscalX,
                        handler: new FiscalIntegration.Operations.PrintFiscalXOperationHandler(),
                        validators: [
                            { validatorFunctions: [Commerce.Operations.Validators.noExistingCart] }
                        ]
                    }))); });
                }
                if (Commerce.ArrayExtensions.hasElement(registrationProcessSupportedTypes, Commerce.Proxy.Entities.FiscalIntegrationEventType.FiscalZReport)) {
                    asyncQueue.enqueue(function () { return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.RegisterLegacyOperationRequest(correlationId, {
                        id: Commerce.Operations.RetailOperation.PrintFiscalZ,
                        handler: new FiscalIntegration.Operations.PrintFiscalZOperationHandler(),
                        validators: [
                            { validatorFunctions: [Commerce.Operations.Validators.noExistingCart] }
                        ]
                    }))); });
                }
                if (Commerce.ArrayExtensions.hasElements(registrationProcessSupportedTypes)) {
                    asyncQueue.enqueue(function () { return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.RegisterLegacyOperationRequest(correlationId, {
                        id: Commerce.Operations.RetailOperation.MarkFiscalEventRegistered,
                        handler: new FiscalIntegration.Operations.MarkFiscalEventRegisteredOperationHandler()
                    }))); }).enqueue(function () { return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.RegisterLegacyOperationRequest(correlationId, {
                        id: Commerce.Operations.RetailOperation.SkipFiscalRegistration,
                        handler: new FiscalIntegration.Operations.SkipFiscalRegistrationOperationHandler()
                    }))); });
                }
                return asyncQueue.run();
            };
            FiscalIntegrationInitializer.prototype._registerInterceptorsAsync = function (correlationId, registrationProcessSupportedTypes) {
                var availableInterceptors = [
                    {
                        requestType: Commerce.CheckoutCartClientRequest,
                        requestInterceptor: new FiscalIntegration.Interceptors.RegisterFiscalEventForSaleRequestInterceptor()
                    },
                    {
                        requestType: Commerce.PrintReceiptsClientRequest,
                        requestInterceptor: new FiscalIntegration.Interceptors.RegisterFiscalEventsForReceiptPrintingRequestInterceptor(),
                    },
                    {
                        requestType: Commerce.PrintPackingSlipClientRequest,
                        requestInterceptor: new FiscalIntegration.Interceptors.RegisterFiscalEventForPackingSlipRequestInterceptor()
                    },
                    {
                        requestType: Commerce.OperationRequest,
                        requestInterceptor: new FiscalIntegration.Interceptors.RegisterFiscalEventForOperationRequestInterceptor()
                    },
                    {
                        requestType: Commerce.AuditEvent.RegisterAndGetAuditEventServiceRequest,
                        requestInterceptor: new FiscalIntegration.Interceptors.RegisterFiscalEventForAuditEventRequestInterceptor()
                    }
                ];
                var supportedInterceptors = availableInterceptors.filter(function (interceptor) {
                    return registrationProcessSupportedTypes.some(function (supportedType) {
                        return Commerce.ArrayExtensions.hasElement(interceptor.requestInterceptor.supportedFiscalIntegrationEventTypes(), supportedType);
                    });
                });
                if (Commerce.ArrayExtensions.hasElements(registrationProcessSupportedTypes)) {
                    supportedInterceptors.push({
                        requestType: Commerce.OperationRequest,
                        requestInterceptor: new FiscalIntegration.Interceptors.CompletePendingRegistrationProcessInterceptor()
                    });
                }
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.RegisterRequestInterceptorsRequest(correlationId, supportedInterceptors)));
            };
            FiscalIntegrationInitializer._initialized = false;
            return FiscalIntegrationInitializer;
        }());
        FiscalIntegration.FiscalIntegrationInitializer = FiscalIntegrationInitializer;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var FiscalIntegrationDocumentGenerationResultType = Commerce.Proxy.Entities.FiscalIntegrationDocumentGenerationResultType;
        var FiscalIntegrationValidators = (function () {
            function FiscalIntegrationValidators() {
            }
            FiscalIntegrationValidators.hasProcessLines = function (registrationProcess) {
                return !Commerce.ObjectExtensions.isNullOrUndefined(registrationProcess) &&
                    !Commerce.ObjectExtensions.isNullOrUndefined(registrationProcess.RegistrationProcessLines) &&
                    Commerce.ArrayExtensions.hasElements(registrationProcess.RegistrationProcessLines);
            };
            FiscalIntegrationValidators.isRegistrationRequired = function (document) {
                Commerce.ThrowIf.argumentIsNotObject(document, "document");
                if (document.DocumentGenerationResultTypeValue === FiscalIntegrationDocumentGenerationResultType.Failed) {
                    throw new Error("The fiscal document failed to generate. Check the generation result first.");
                }
                return document.DocumentGenerationResultTypeValue === FiscalIntegrationDocumentGenerationResultType.Succeeded;
            };
            FiscalIntegrationValidators.assertDocumentGenerationSucceeded = function (document) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(document) ||
                    document.DocumentGenerationResultTypeValue === Commerce.Proxy.Entities.FiscalIntegrationDocumentGenerationResultType.Failed) {
                    var error = new Commerce.Proxy.Entities.Error("string_4946", false, Commerce.ViewModelAdapter.getResourceString("string_4946"));
                    return error;
                }
                return undefined;
            };
            FiscalIntegrationValidators.assertPeripheralActionSucceeded = function (technicalProfile, response) {
                var _a;
                Commerce.ThrowIf.argumentIsNotObject(technicalProfile, "technicalProfile");
                Commerce.ThrowIf.argumentIsNotObject(response, "response");
                if (response.CommunicationResultType === FiscalIntegration.Peripherals.FiscalPeripheralCommunicationResultType.Failed) {
                    var failureDetails = response.FailureDetails;
                    var errorMessageResourceId = this.getFiscalFailureErrorMessageResourceId(failureDetails.FailureType);
                    var formatData = this.getFailureDetailsFormatData(technicalProfile, failureDetails);
                    var error = new ((_a = Commerce.Proxy.Entities.Error).bind.apply(_a, [void 0, errorMessageResourceId,
                        false,
                        Commerce.ViewModelAdapter.getResourceString(errorMessageResourceId),
                        null].concat(formatData)))();
                    return error;
                }
                return undefined;
            };
            FiscalIntegrationValidators.getFailureDetailsFormatData = function (technicalProfile, failureDetails) {
                return [
                    technicalProfile.ConnectorName,
                    failureDetails.ErrorCode || Commerce.StringExtensions.EMPTY,
                    failureDetails.ErrorMessage || Commerce.StringExtensions.EMPTY
                ];
            };
            FiscalIntegrationValidators.getFiscalFailureErrorMessageResourceId = function (failureType) {
                var result;
                switch (failureType) {
                    case FiscalIntegration.Peripherals.FiscalPeripheralFailureType.Busy:
                        result = "string_4941";
                        break;
                    case FiscalIntegration.Peripherals.FiscalPeripheralFailureType.NotAvailable:
                        result = "string_4942";
                        break;
                    case FiscalIntegration.Peripherals.FiscalPeripheralFailureType.PaperOut:
                        result = "string_4943";
                        break;
                    case FiscalIntegration.Peripherals.FiscalPeripheralFailureType.SubmissionFailed:
                        result = "string_4944";
                        break;
                    case FiscalIntegration.Peripherals.FiscalPeripheralFailureType.Timeout:
                        result = "string_4949";
                        break;
                    case FiscalIntegration.Peripherals.FiscalPeripheralFailureType.BadResponse:
                        result = "string_4950";
                        break;
                    default:
                        result = "string_4945";
                        break;
                }
                return result;
            };
            FiscalIntegrationValidators.isFiscalSale = function (cart) {
                return cart.CartTypeValue === Commerce.Proxy.Entities.CartType.Shopping
                    || Commerce.CustomerOrderHelper.isCustomerOrderCreationOrEdition(cart) && Commerce.CustomerOrderHelper.hasCarryoutLines(cart.CartLines)
                    || Commerce.CustomerOrderHelper.isCustomerOrderReturnOrPickup(cart);
            };
            FiscalIntegrationValidators.isCustomerAccountDeposit = function (cart) {
                return cart.TransactionTypeValue === Commerce.Proxy.Entities.TransactionType.Payment
                    && Commerce.ArrayExtensions.hasElements(cart.CustomerAccountDepositLines);
            };
            FiscalIntegrationValidators.isCompleted = function (context) {
                return context.state.stateType === FiscalIntegration.Workflow.RegistrationProcess.RegistrationProcessStateType.Completed;
            };
            return FiscalIntegrationValidators;
        }());
        FiscalIntegration.FiscalIntegrationValidators = FiscalIntegrationValidators;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
        var BrowserType;
        (function (BrowserType) {
            BrowserType[BrowserType["IE11"] = 0] = "IE11";
            BrowserType[BrowserType["Chrome"] = 1] = "Chrome";
            BrowserType[BrowserType["Other"] = 2] = "Other";
            BrowserType[BrowserType["Edge"] = 3] = "Edge";
            BrowserType[BrowserType["Phantom"] = 4] = "Phantom";
        })(BrowserType = Host.BrowserType || (Host.BrowserType = {}));
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var DisableAutoLogOffDuringExecutionInterceptor = (function () {
                function DisableAutoLogOffDuringExecutionInterceptor() {
                }
                DisableAutoLogOffDuringExecutionInterceptor.prototype.onInterceptingAsync = function (request) {
                    var requestName = Commerce.PrototypeHelper.getPrototypeChainTypeName(Object.getPrototypeOf(request));
                    DisableAutoLogOffDuringExecutionInterceptor.requestStackCount++;
                    try {
                        Commerce.UserActivityTracker.detachHandler();
                        Commerce.RetailLogger.requestInterceptorEnableAutoLogOffSucceeded(requestName, request.correlationId);
                    }
                    catch (error) {
                        Commerce.RetailLogger.requestInterceptorEnableAutoLogOffFailed(JSON.stringify(error), requestName, request.correlationId);
                    }
                    return Promise.resolve({ canceled: false });
                };
                DisableAutoLogOffDuringExecutionInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    var requestName = Commerce.PrototypeHelper.getPrototypeChainTypeName(Object.getPrototypeOf(request));
                    DisableAutoLogOffDuringExecutionInterceptor.requestStackCount--;
                    try {
                        if (DisableAutoLogOffDuringExecutionInterceptor.requestStackCount <= 0) {
                            Commerce.UserActivityTracker.setupServerConfiguredAutoExitTimeout();
                            Commerce.RetailLogger.requestInterceptorDisableAutoLogOffSucceeded(requestName, request.correlationId);
                        }
                    }
                    catch (error) {
                        Commerce.RetailLogger.requestInterceptorDisableAutoLogOffFailed(JSON.stringify(error), requestName, request.correlationId);
                    }
                    return Promise.resolve();
                };
                DisableAutoLogOffDuringExecutionInterceptor.requestStackCount = 0;
                return DisableAutoLogOffDuringExecutionInterceptor;
            }());
            Interceptors.DisableAutoLogOffDuringExecutionInterceptor = DisableAutoLogOffDuringExecutionInterceptor;
        })(Interceptors = Operations.Interceptors || (Operations.Interceptors = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IAsyncServiceManagerName = "IAsyncServiceManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IAuditEventManagerName = "IAuditEventManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IAuthenticationManagerName = "IAuthenticationManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IFiscalIntegrationManagerName = "IFiscalIntegrationManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IFiscalRegisterManagerName = "IFiscalRegisterManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IFulfillmentManagerName = "IFulfillmentManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IInventoryManagerName = "IInventoryManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.INotificationManagerName = "INotificationManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IPaymentManagerName = "IPaymentManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IProductDataManagerName = "IProductDataManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IProductManagerName = "IProductManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IRecordingManagerName = "IRecordingManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IReportManagerName = "IReportManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.ISalesOrderManagerName = "ISalesOrderManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IStockCountJournalManagerName = "IStockCountJournalManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IStoreOperationsManagerName = "IStoreOperationsManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.ISuspendedCartManagerName = "ISuspendedCartManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.ITillLayoutManagerName = "ITillLayoutManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            Managers.IWarehouseManagerName = "IWarehouseManager";
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            "use strict";
            var RetailServerManagerFactory = (function () {
                function RetailServerManagerFactory(retailServerUrl) {
                    this._odataEndpoint = Commerce.StringExtensions.cleanUri(retailServerUrl);
                    this._commerceContext = new Commerce.Proxy.CommerceContext(this.createDataServiceFactory(false));
                    this.commerceAuthenticationContext = new Commerce.Proxy.Context.CommerceAuthenticationContext(this.createDataServiceFactory(true));
                }
                RetailServerManagerFactory.prototype.updateServerUriInCommerceContext = function (retailServerUri) {
                    this._odataEndpoint = Commerce.StringExtensions.cleanUri(retailServerUri);
                    this._commerceContext.dataServiceRequestFactory = this.createDataServiceFactory(false);
                    this.commerceAuthenticationContext = new Commerce.Proxy.Context.CommerceAuthenticationContext(this.createDataServiceFactory(true));
                };
                RetailServerManagerFactory.prototype.getDataServiceRequestFactory = function () {
                    return this._commerceContext.dataServiceRequestFactory;
                };
                RetailServerManagerFactory.prototype.getManager = function (entityManagerInterface) {
                    var dataManager;
                    switch (entityManagerInterface) {
                        case Commerce.Model.Managers.IAsyncServiceManagerName:
                            dataManager = new Managers.RetailServer.AsyncServiceManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IAuthenticationManagerName:
                            dataManager = new Managers.RetailServer.AuthenticateManager(this._commerceContext, this.commerceAuthenticationContext);
                            break;
                        case Commerce.Model.Managers.ICartManagerName:
                            dataManager = new Managers.RetailServer.CartManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.ISuspendedCartManagerName:
                            dataManager = new Managers.RetailServer.SuspendedCartManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IChannelManagerName:
                            dataManager = new Managers.RetailServer.ChannelManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.ICustomerManagerName:
                            dataManager = new Managers.RetailServer.CustomerManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IInventoryManagerName:
                            dataManager = new Managers.RetailServer.InventoryManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.INotificationManagerName:
                            dataManager = new Managers.RetailServer.NotificationManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IOperatorManagerName:
                            dataManager = new Managers.RetailServer.OperatorManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IPaymentManagerName:
                            dataManager = new Managers.RetailServer.PaymentManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IProductManagerName:
                            dataManager = new Managers.RetailServer.ProductManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IRecordingManagerName:
                            dataManager = new Managers.RetailServer.RecordingManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IReportManagerName:
                            dataManager = new Managers.RetailServer.ReportManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.ISalesOrderManagerName:
                            dataManager = new Managers.RetailServer.SalesOrderManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IStockCountJournalManagerName:
                            dataManager = new Managers.RetailServer.StockCountJournalManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IStoreOperationsManagerName:
                            dataManager = new Managers.RetailServer.StoreOperationsManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.ITillLayoutManagerName:
                            dataManager = new Managers.RetailServer.TillLayoutManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IWarehouseManagerName:
                            dataManager = new Managers.RetailServer.WarehouseManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IFiscalIntegrationManagerName:
                            dataManager = new Managers.RetailServer.FiscalIntegrationManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IFiscalRegisterManagerName:
                            dataManager = new Managers.RetailServer.FiscalRegisterManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IProductDataManagerName:
                            dataManager = new Managers.RetailServer.ProductDataManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IAuditEventManagerName:
                            dataManager = new Managers.RetailServer.AuditEventManager(this._commerceContext);
                            break;
                        case Commerce.Model.Managers.IFulfillmentManagerName:
                            dataManager = new Managers.RetailServer.FulfillmentManager(this._commerceContext);
                            break;
                        default:
                            throw entityManagerInterface + " is not supported.";
                    }
                    return dataManager;
                };
                RetailServerManagerFactory.prototype.toggleConnection = function () {
                    var chainedRequestFactory = this._commerceContext.dataServiceRequestFactory;
                    if (chainedRequestFactory.switchConnection) {
                        var newConnectionStatus_1;
                        if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                            newConnectionStatus_1 = Commerce.Client.Entities.ConnectionStatusType.ManualOffline;
                        }
                        else {
                            newConnectionStatus_1 = Commerce.Client.Entities.ConnectionStatusType.Online;
                        }
                        var asyncQueue = new Commerce.AsyncQueue().enqueue(function () {
                            return chainedRequestFactory.switchConnection(newConnectionStatus_1, true);
                        });
                        return asyncQueue.run();
                    }
                    else {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_SWITCH_OFFLINE_NOT_AVAILABLE)]);
                    }
                };
                RetailServerManagerFactory.prototype.createDataServiceFactory = function (userAuthenticationFactory) {
                    var architectureType = Commerce.Host.instance.application.getArchitectureType();
                    Commerce.RetailLogger.modelManagersRetailServerManagerFactoryCreate(Commerce.Proxy.Entities.ArchitectureType[architectureType]);
                    var onlineConfigurationName = "online";
                    var offlineConfigurationName = "offline";
                    var dataServiceRequestFactory;
                    switch (architectureType) {
                        case Commerce.Proxy.Entities.ArchitectureType.X86:
                            var onlineDataServiceRequestFactory = null;
                            var offlineDataServiceRequestFactory = null;
                            if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.onlineDatabase)) {
                                if (Microsoft.Dynamics.Commerce.ClientBroker.CommerceRuntimeRequest.tryAddConfiguration(onlineConfigurationName, Commerce.Config.onlineDatabase, true)) {
                                    onlineDataServiceRequestFactory = new Commerce.Proxy.Requests.CommerceRuntimeRequestFactory("crt://" + onlineConfigurationName);
                                }
                            }
                            if (!onlineDataServiceRequestFactory) {
                                onlineDataServiceRequestFactory = userAuthenticationFactory
                                    ? new Commerce.Proxy.Requests.CommerceAuthenticationRequestFactory(this._odataEndpoint)
                                    : new Commerce.Proxy.Requests.RetailServerRequestFactory(this._odataEndpoint);
                            }
                            if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.offlineDatabase)) {
                                if (Microsoft.Dynamics.Commerce.ClientBroker.CommerceRuntimeRequest.tryAddConfiguration(offlineConfigurationName, Commerce.Config.offlineDatabase, false)) {
                                    offlineDataServiceRequestFactory = new Commerce.Proxy.Requests.CommerceRuntimeRequestFactory("crt://" + offlineConfigurationName);
                                }
                            }
                            if (onlineDataServiceRequestFactory && offlineDataServiceRequestFactory) {
                                dataServiceRequestFactory = new Commerce.Proxy.Requests.ChainedRequestFactory(onlineDataServiceRequestFactory, offlineDataServiceRequestFactory);
                                Commerce.RetailLogger.modelManagersRetailServerManagerFactoryCreateChained();
                            }
                            else {
                                dataServiceRequestFactory = onlineDataServiceRequestFactory;
                                Commerce.RetailLogger.modelManagersRetailServerManagerFactoryCreateOnline();
                            }
                            break;
                        default:
                            dataServiceRequestFactory = onlineDataServiceRequestFactory = userAuthenticationFactory
                                ? new Commerce.Proxy.Requests.CommerceAuthenticationRequestFactory(this._odataEndpoint)
                                : new Commerce.Proxy.Requests.RetailServerRequestFactory(this._odataEndpoint);
                            Commerce.Session.instance.connectionStatus = Commerce.Client.Entities.ConnectionStatusType.Online;
                            Commerce.RetailLogger.modelManagersRetailServerManagerFactoryCreateOnlineDefault();
                            break;
                    }
                    return dataServiceRequestFactory;
                };
                return RetailServerManagerFactory;
            }());
            Managers.RetailServerManagerFactory = RetailServerManagerFactory;
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Messaging;
    (function (Messaging) {
        var MessageChannelEndpoint = (function () {
            function MessageChannelEndpoint(outbound, inbound) {
                this._outbound = outbound;
                this._inbound = inbound;
            }
            MessageChannelEndpoint.prototype.sendMessage = function (type, data) {
                this._outbound.sendMessage(type, data);
            };
            MessageChannelEndpoint.prototype.addMessageHandler = function (type, handler) {
                return this._inbound.addMessageHandler(type, handler);
            };
            MessageChannelEndpoint.prototype.start = function () {
                this._inbound.start();
            };
            MessageChannelEndpoint.prototype.close = function () {
                this._inbound.close();
            };
            MessageChannelEndpoint.prototype.dispose = function () {
                this._inbound.dispose();
                this._outbound.dispose();
            };
            return MessageChannelEndpoint;
        }());
        Messaging.MessageChannelEndpoint = MessageChannelEndpoint;
    })(Messaging = Commerce.Messaging || (Commerce.Messaging = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Messaging;
    (function (Messaging) {
        var PosMessagePort = (function () {
            function PosMessagePort() {
                this._messageHandlerMap = Object.create(null);
                this._nextHandlerId = 0;
                this._messageQueue = [];
                this._isActive = false;
                this._isDisposed = false;
            }
            PosMessagePort.prototype.sendMessage = function (type, data) {
                if (this._isDisposed) {
                    Commerce.RetailLogger.messagingPosMessagePortSendMessageCalledAfterDisposal(type);
                    return;
                }
                if (this._isActive) {
                    var messageHandlers = this._messageHandlerMap[type];
                    if (Commerce.ArrayExtensions.hasElements(messageHandlers)) {
                        messageHandlers.forEach(function (handlerInfo) {
                            try {
                                handlerInfo.handler(data);
                            }
                            catch (handlerError) {
                                Commerce.RetailLogger.messagingPosMessagePortExceptionThrownWhileCallingMessageHandler(type, handlerError.name, handlerError.message);
                            }
                        });
                    }
                }
                else {
                    this._messageQueue.push({ type: type, data: data });
                }
            };
            PosMessagePort.prototype.addMessageHandler = function (messageType, handler) {
                if (this._isDisposed) {
                    Commerce.RetailLogger.messagingPosMessagePortAddMessageHandlerCalledAfterDisposal(messageType);
                    return this._createSubscription(messageType, -1);
                }
                var messageHandlers = this._messageHandlerMap[messageType] || [];
                var handlerInfo = {
                    handler: handler,
                    id: this._nextHandlerId++
                };
                messageHandlers.push(handlerInfo);
                this._messageHandlerMap[messageType] = messageHandlers;
                return this._createSubscription(messageType, handlerInfo.id);
            };
            PosMessagePort.prototype.start = function () {
                var _this = this;
                if (this._isActive || this._isDisposed) {
                    return;
                }
                this._isActive = true;
                this._messageQueue.forEach(function (message) {
                    _this.sendMessage(message.type, message.data);
                });
                this._messageQueue = [];
            };
            PosMessagePort.prototype.close = function () {
                this._isActive = false;
            };
            PosMessagePort.prototype.dispose = function () {
                this._isDisposed = true;
                this._isActive = false;
                this._messageHandlerMap = undefined;
                this._messageQueue = undefined;
            };
            PosMessagePort.prototype._createSubscription = function (messageType, id) {
                var _this = this;
                return {
                    dispose: function () {
                        _this._removeMessageHandler(messageType, id);
                    }
                };
            };
            PosMessagePort.prototype._removeMessageHandler = function (messageType, handlerId) {
                if (this._isDisposed) {
                    return;
                }
                var handlers = this._messageHandlerMap[messageType];
                var handlerIndex = Commerce.ArrayExtensions.findIndex(handlers, function (handlerInfo) {
                    return handlerInfo.id === handlerId;
                });
                if (handlerIndex >= 0) {
                    handlers.splice(handlerIndex, 1);
                    this._messageHandlerMap[messageType] = handlers;
                }
            };
            return PosMessagePort;
        }());
        Messaging.PosMessagePort = PosMessagePort;
    })(Messaging = Commerce.Messaging || (Commerce.Messaging = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OperationHandlerBase = (function () {
            function OperationHandlerBase() {
                Object.freeze(this);
            }
            Object.defineProperty(OperationHandlerBase.prototype, "applicationContext", {
                get: function () {
                    return Commerce.ApplicationContext.Instance;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "asyncServiceManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAsyncServiceManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "authenticationManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuthenticationManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "cartManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "channelManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "customerManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "inventoryManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IInventoryManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "notificationManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.INotificationManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "operatorManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IOperatorManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "operationsManager", {
                get: function () {
                    return Operations.OperationsManager.instance;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "paymentManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IPaymentManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "productManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "reportManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IReportManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "salesOrderManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "stockCountJournalManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStockCountJournalManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "storeOperationsManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "tillLayoutManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ITillLayoutManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "fulfillmentManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFulfillmentManagerName);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OperationHandlerBase.prototype, "suspendedCartManager", {
                get: function () {
                    return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISuspendedCartManagerName);
                },
                enumerable: true,
                configurable: true
            });
            OperationHandlerBase.prototype.execute = function (options) {
                throw "Operation handler not implemented.";
            };
            return OperationHandlerBase;
        }());
        Operations.OperationHandlerBase = OperationHandlerBase;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddAffiliationFromListOperationHandler = (function (_super) {
            __extends(AddAffiliationFromListOperationHandler, _super);
            function AddAffiliationFromListOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddAffiliationFromListOperationHandler.prototype.execute = function (options) {
                options = options || {};
                var cart = Commerce.Session.instance.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && !Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId)
                    && cart.CustomerOrderModeValue !== Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit) {
                    Commerce.NotificationHandler.displayErrorMessage("string_4451");
                }
                else {
                    Commerce.ViewModelAdapter.navigate("AffiliationsView");
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            return AddAffiliationFromListOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddAffiliationFromListOperationHandler = AddAffiliationFromListOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddAffiliationOperationHandler = (function (_super) {
            __extends(AddAffiliationOperationHandler, _super);
            function AddAffiliationOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddAffiliationOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { affiliationNames: undefined, affiliations: undefined };
                options.affiliationNames = options.affiliationNames || [];
                options.affiliations = options.affiliations || [];
                var cart = Commerce.Session.instance.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && !Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId)
                    && cart.CustomerOrderModeValue !== Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMER_ORDER_CANNOT_PERFORM_OPERATION);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                var affiliationsToAdd = options.affiliations.map(function (a) { return _this.convertToAffiliationLoyaltyTier(a); });
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.isCartInProgress) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart).run());
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(options.affiliationNames)) {
                    asyncQueue.enqueue(function () {
                        return _this.cartManager.getAffiliationsAsync()
                            .done(function (result) {
                            result.forEach(function (a) {
                                if (options.affiliationNames.some(function (n) { return a.Name === n; })) {
                                    affiliationsToAdd.push(_this.convertToAffiliationLoyaltyTier(a));
                                }
                            });
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ affiliationLines: affiliationsToAdd }, function (context) { return _this.cartManager.addAffiliationToCartAsync(context.affiliationLines); }).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            AddAffiliationOperationHandler.prototype.convertToAffiliationLoyaltyTier = function (affiliation) {
                var affiliationLoyaltyTier = new Commerce.Proxy.Entities.AffiliationLoyaltyTierClass();
                affiliationLoyaltyTier.AffiliationId = affiliation.RecordId;
                affiliationLoyaltyTier.LoyaltyTierId = 0;
                affiliationLoyaltyTier.ReasonCodeLines = [];
                return affiliationLoyaltyTier;
            };
            return AddAffiliationOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddAffiliationOperationHandler = AddAffiliationOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var UpdateCustomerAffiliationsOperationHandlerBase = (function (_super) {
            __extends(UpdateCustomerAffiliationsOperationHandlerBase, _super);
            function UpdateCustomerAffiliationsOperationHandlerBase() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            UpdateCustomerAffiliationsOperationHandlerBase.prototype.updateCustomerAffiliations = function (customer, customerAffiliations) {
                customer.CustomerAffiliations = customerAffiliations;
                var accountNumber = customer.AccountNumber;
                var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var updateCustomerServiceRequest = new Commerce.UpdateCustomerServiceRequest(Commerce.LoggerHelper.getNewCorrelationId(), customer);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateCustomerServiceRequest));
                });
                if (accountNumber === Commerce.Session.instance.cart.CustomerId) {
                    var cartManager_1 = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    asyncQueue.enqueue(function () {
                        var cart = Commerce.Session.instance.cart;
                        var updatedCartAffiliations = cart.AffiliationLines.filter(function (value) {
                            return value.CustomerId !== accountNumber;
                        });
                        customerAffiliations.forEach(function (customerAffiliation) {
                            var affiliationLoyaltyTier = new Commerce.Proxy.Entities.AffiliationLoyaltyTierClass();
                            affiliationLoyaltyTier.AffiliationId = customerAffiliation.RetailAffiliationId;
                            affiliationLoyaltyTier.CustomerId = accountNumber;
                            affiliationLoyaltyTier.LoyaltyTierId = 0;
                            updatedCartAffiliations.push(affiliationLoyaltyTier);
                        });
                        var handleReasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ affiliationLines: updatedCartAffiliations }, function (context) { return cartManager_1.addAffiliationToCartAsync(context.affiliationLines); }).run();
                        return asyncQueue.cancelOn(handleReasonCodesResult);
                    });
                }
                asyncQueue.enqueue(function () {
                    return customerManager.getCustomerDetailsAsync(accountNumber);
                });
                return asyncQueue.run().map(function (result) {
                    return result.data.customer;
                });
            };
            return UpdateCustomerAffiliationsOperationHandlerBase;
        }(Operations.OperationHandlerBase));
        Operations.UpdateCustomerAffiliationsOperationHandlerBase = UpdateCustomerAffiliationsOperationHandlerBase;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddAffiliationToCustomerOperationHandler = (function (_super) {
            __extends(AddAffiliationToCustomerOperationHandler, _super);
            function AddAffiliationToCustomerOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddAffiliationToCustomerOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { customer: undefined, customerAffiliations: undefined, allAffiliations: undefined };
                var addAffiliationQueue = new Commerce.AsyncQueue();
                addAffiliationQueue.enqueue(function () {
                    var customerAffiliationIds = new Commerce.Dictionary();
                    options.customerAffiliations.forEach(function (customerAffiliation) {
                        customerAffiliationIds.setItem(customerAffiliation.RetailAffiliationId, true);
                    });
                    var activityContext = {
                        affiliations: options.allAffiliations.filter(function (affiliation) {
                            return !customerAffiliationIds.hasItem(affiliation.RecordId);
                        })
                    };
                    var selectCustomerAffiliationActivity = new Commerce.Activities.SelectCustomerAffiliationActivity(activityContext);
                    return selectCustomerAffiliationActivity.execute().map(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(selectCustomerAffiliationActivity.response)
                            || Commerce.ObjectExtensions.isNullOrUndefined(selectCustomerAffiliationActivity.response.selectedAffiliation)) {
                            addAffiliationQueue.cancel();
                            return { canceled: true, data: null };
                        }
                        else {
                            return { canceled: false, data: selectCustomerAffiliationActivity.response.selectedAffiliation.RecordId };
                        }
                    });
                }).enqueue(function (result) {
                    var updatedCustomerAffiliations = options.customer.CustomerAffiliations ?
                        options.customer.CustomerAffiliations.slice() : [];
                    var selectedCustomerAffiliation = new Commerce.Proxy.Entities.CustomerAffiliationClass();
                    selectedCustomerAffiliation.RetailAffiliationId = result.data;
                    updatedCustomerAffiliations.push(selectedCustomerAffiliation);
                    return _this.updateCustomerAffiliations(options.customer, updatedCustomerAffiliations);
                });
                return addAffiliationQueue.run().map(function (queueResult) {
                    return queueResult;
                });
            };
            return AddAffiliationToCustomerOperationHandler;
        }(Operations.UpdateCustomerAffiliationsOperationHandlerBase));
        Operations.AddAffiliationToCustomerOperationHandler = AddAffiliationToCustomerOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddCouponCodeOperationHandler = (function (_super) {
            __extends(AddCouponCodeOperationHandler, _super);
            function AddCouponCodeOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddCouponCodeOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { couponCode: undefined, isLegacyDiscountCode: false };
                options.isLegacyDiscountCode = options.isLegacyDiscountCode || false;
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.StringExtensions.isNullOrWhitespace(options.couponCode)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetCouponCodeActivity({ cart: Commerce.Session.instance.cart });
                        activity.responseHandler = function (response) {
                            return asyncQueue.cancelOn(_this.addCouponCode(response.couponCode, options.isLegacyDiscountCode));
                        };
                        return activity.execute().done(function () {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this.addCouponCode(options.couponCode, options.isLegacyDiscountCode));
                    });
                }
                return asyncQueue.run();
            };
            AddCouponCodeOperationHandler.prototype.addCouponCode = function (couponCode, isLegacyDiscountCode) {
                var _this = this;
                return Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                    var preTriggerOptions = {
                        couponCode: couponCode,
                        operationId: isLegacyDiscountCode ? Operations.RetailOperation.DiscountCodeBarcode : Operations.RetailOperation.AddCoupons
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreAddCoupon, preTriggerOptions);
                }, function () {
                    return _this.cartManager.addCouponsToCartAsync([couponCode], isLegacyDiscountCode);
                }, function () {
                    var postTriggerOptions = {
                        couponCode: couponCode,
                        operationId: isLegacyDiscountCode ? Operations.RetailOperation.DiscountCodeBarcode : Operations.RetailOperation.AddCoupons
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostAddCoupon, postTriggerOptions);
                });
            };
            return AddCouponCodeOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddCouponCodeOperationHandler = AddCouponCodeOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddCustomerToSalesOrderOperationHandler = (function (_super) {
            __extends(AddCustomerToSalesOrderOperationHandler, _super);
            function AddCustomerToSalesOrderOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddCustomerToSalesOrderOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cartAffiliations: undefined, customerId: undefined, customer: undefined, correlationId: undefined };
                if (Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    options.correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                options.cartAffiliations = options.cartAffiliations || [];
                var cart = Commerce.Session.instance.cart;
                var currentCustomerAccount = cart.CustomerId;
                var customerAccount = options.customerId;
                if (currentCustomerAccount === customerAccount) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.StringExtensions.isNullOrWhitespace(customerAccount)) {
                    asyncQueue.enqueue(function () {
                        var preTriggerOptions = { cart: Commerce.Session.instance.cart, customerId: customerAccount };
                        var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreCustomerSet, preTriggerOptions);
                        return asyncQueue.cancelOn(preTriggerResult);
                    });
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(customerAccount)
                    && !Commerce.ArrayExtensions.hasElements(options.cartAffiliations)) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.customer)) {
                        asyncQueue.enqueue(function () {
                            return _this.customerManager.getCustomerDetailsAsync(customerAccount)
                                .done(function (customerDetails) {
                                options.customer = customerDetails.customer;
                            });
                        });
                    }
                    asyncQueue.enqueue(function () {
                        options.customer.CustomerAffiliations.forEach(function (customerAffiliation) {
                            var affiliationLoyaltyTier = new Commerce.Proxy.Entities.AffiliationLoyaltyTierClass();
                            affiliationLoyaltyTier.AffiliationId = customerAffiliation.RetailAffiliationId;
                            affiliationLoyaltyTier.CustomerId = customerAccount;
                            affiliationLoyaltyTier.LoyaltyTierId = 0;
                            options.cartAffiliations.push(affiliationLoyaltyTier);
                        });
                        options.cartAffiliations = Operations.AddCustomerOperationHelper.getUpdatedCartAffiliations(cart, customerAccount, options.cartAffiliations);
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                asyncQueue.enqueue(function () {
                    var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                    return asyncQueue.cancelOn(reasonCodeQueue.run());
                }).enqueue(function () {
                    var newCart = {
                        Id: Commerce.Session.instance.cart.Id,
                        CustomerId: customerAccount,
                        AffiliationLines: options.cartAffiliations
                    };
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: newCart, affiliationLines: newCart.AffiliationLines }, function (c) { return _this.cartManager.createOrUpdateCartAsync(c.cart); }).run();
                    return asyncQueue.cancelOn(result);
                }).enqueue(function () {
                    return _this.postExecuteStepsAsync();
                });
                return asyncQueue.run().done(function (queueResult) {
                    if (!queueResult.canceled) {
                        Commerce.Session.instance.Customer = options.customer;
                    }
                });
            };
            AddCustomerToSalesOrderOperationHandler.prototype.postExecuteStepsAsync = function () {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                var newCart = new Commerce.Proxy.Entities.CartClass();
                newCart.Id = cart.Id;
                var nonVoidedShippingCartLines = cart.CartLines
                    .filter(function (cartLine) {
                    return !cartLine.IsVoided
                        && cartLine.DeliveryMode !== _this.applicationContext.channelConfiguration.PickupDeliveryModeCode
                        && cartLine.DeliveryMode !== _this.applicationContext.channelConfiguration.CarryoutDeliveryModeCode;
                });
                var mustClearHeaderDeliveryInformation = cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit
                        || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit)
                    && cart.DeliveryMode !== this.applicationContext.channelConfiguration.PickupDeliveryModeCode;
                var mustClearCartLinesDeliveryInformation = mustClearHeaderDeliveryInformation
                    && Commerce.ArrayExtensions.hasElements(nonVoidedShippingCartLines);
                if (mustClearHeaderDeliveryInformation) {
                    Commerce.DeliveryHelper.clearHeaderDeliveryInfo(newCart);
                }
                if (mustClearCartLinesDeliveryInformation) {
                    Commerce.DeliveryHelper.clearLinesDeliveryInformation(nonVoidedShippingCartLines);
                }
                if (!mustClearHeaderDeliveryInformation && !mustClearCartLinesDeliveryInformation) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return new Commerce.AsyncQueue().enqueue(function () {
                    return _this.cartManager.createOrUpdateCartAsync(newCart);
                }).enqueue(function () {
                    if (mustClearCartLinesDeliveryInformation) {
                        return _this.cartManager.updateCartLinesOnCartAsync(nonVoidedShippingCartLines);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).run();
            };
            return AddCustomerToSalesOrderOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddCustomerToSalesOrderOperationHandler = AddCustomerToSalesOrderOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddHeaderChargeOperationHandler = (function (_super) {
            __extends(AddHeaderChargeOperationHandler, _super);
            function AddHeaderChargeOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddHeaderChargeOperationHandler.prototype.execute = function (options) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var chargeCode;
                var chargeAmount = 0;
                var moduleTypeValue = 0;
                if (!Commerce.Session.instance.isCartInProgress) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart).run());
                    });
                }
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetChargeCodesActivity({ chargeType: Commerce.Proxy.Entities.ChargeTypeEnum.HeaderCharge });
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            chargeCode = activity.response.chargeCode;
                            moduleTypeValue = activity.response.chargeCode.ModuleTypeValue;
                        }
                        else {
                            asyncQueue.cancel();
                        }
                    });
                }).enqueue(function () {
                    var activity = new Commerce.Activities.GetChargeAmountActivity({ chargeCode: chargeCode.Code, chargeType: Commerce.Proxy.Entities.ChargeTypeEnum.HeaderCharge });
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            chargeAmount = activity.response.chargeAmount;
                            _this.cartManager.addChargeAsync(moduleTypeValue, chargeCode.Code, chargeAmount);
                        }
                        else {
                            asyncQueue.cancel();
                        }
                    });
                });
                return asyncQueue.run();
            };
            return AddHeaderChargeOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddHeaderChargeOperationHandler = AddHeaderChargeOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddLineChargeOperationHandler = (function (_super) {
            __extends(AddLineChargeOperationHandler, _super);
            function AddLineChargeOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddLineChargeOperationHandler.prototype.execute = function (options) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var cartLine;
                var chargeAmount = 0;
                var chargeCode;
                var moduleTypeValue = 0;
                var product = null;
                if (!Commerce.Session.instance.isCartInProgress) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart).run());
                    });
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.cartLine)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MISSING_CARTLINE_LINE_CHARGES)]);
                }
                cartLine = options.cartLine;
                product = Commerce.Session.instance.getFromProductsInCartCache(options.cartLine.ProductId);
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetChargeCodesActivity({ chargeType: Commerce.Proxy.Entities.ChargeTypeEnum.LineCharge, product: product });
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            chargeCode = activity.response.chargeCode;
                            moduleTypeValue = activity.response.chargeCode.ModuleTypeValue;
                        }
                        else {
                            asyncQueue.cancel();
                        }
                    });
                }).enqueue(function () {
                    var activity = new Commerce.Activities.GetChargeAmountActivity({ chargeCode: chargeCode.Code, chargeType: Commerce.Proxy.Entities.ChargeTypeEnum.LineCharge, product: product });
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            chargeAmount = activity.response.chargeAmount;
                            _this.cartManager.addCartLineChargeAsync(cartLine.LineId, moduleTypeValue, chargeCode.Code, chargeAmount);
                        }
                        else {
                            asyncQueue.cancel();
                        }
                    });
                });
                return asyncQueue.run();
            };
            return AddLineChargeOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddLineChargeOperationHandler = AddLineChargeOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddLoyaltyCardOperationHandler = (function (_super) {
            __extends(AddLoyaltyCardOperationHandler, _super);
            function AddLoyaltyCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddLoyaltyCardOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { loyaltyCardId: undefined, loyaltyCard: undefined, customer: undefined };
                var operationCanceled = false;
                var asyncQueue = new Commerce.AsyncQueue();
                var shouldGetLoyaltyCard = Commerce.ObjectExtensions.isNullOrUndefined(options.loyaltyCard) && Commerce.StringExtensions.isNullOrWhitespace(options.loyaltyCardId);
                if (shouldGetLoyaltyCard) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetLoyaltyCardActivity({ defaultLoyaltyCardId: Commerce.Session.instance.cart.LoyaltyCardId });
                        activity.responseHandler = function (response) {
                            var loyaltyCardId = response ? response.loyaltyCardId : null;
                            if (Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardId)) {
                                operationCanceled = true;
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                            return _this.addLoyaltyCardToCartAsyncQueue(loyaltyCardId).run()
                                .done(function (result) { operationCanceled = result.canceled; });
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this.addLoyaltyCardToCartAsyncQueue(options.loyaltyCardId, options.loyaltyCard, options.customer).run());
                    });
                }
                return asyncQueue.run().map(function (result) {
                    return { canceled: result.canceled || operationCanceled };
                });
            };
            AddLoyaltyCardOperationHandler.prototype.addLoyaltyCardToCartAsyncQueue = function (loyaltyCardId, loyaltyCard, customer) {
                var _this = this;
                var addLoyaltyCardQueue = new Commerce.AsyncQueue();
                var notInCartAffiliations = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(loyaltyCard)) {
                    addLoyaltyCardQueue.enqueue(function () {
                        return _this.customerManager.getLoyaltyCardAsync(loyaltyCardId)
                            .done(function (result) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                                Commerce.NotificationHandler.displayErrorMessage(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDLOYALTYCARDNUMBER);
                                addLoyaltyCardQueue.cancel();
                                return;
                            }
                            loyaltyCard = result;
                        });
                    });
                }
                if (!Commerce.Session.instance.isCartInProgress) {
                    addLoyaltyCardQueue.enqueue(function () {
                        return addLoyaltyCardQueue.cancelOn(Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart).run());
                    });
                }
                addLoyaltyCardQueue.enqueue(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(loyaltyCard) || Commerce.StringExtensions.isNullOrWhitespace(loyaltyCard.CustomerAccount)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)
                        && Commerce.StringExtensions.compare(customer.AccountNumber, loyaltyCard.CustomerAccount) === 0) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    return _this.customerManager.getCustomerDetailsAsync(loyaltyCard.CustomerAccount)
                        .done(function (result) { customer = result.customer; });
                }).enqueue(function () {
                    var notInCartCustomerAffiliations = [];
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                        notInCartCustomerAffiliations = Operations.AddCustomerOperationHelper.getNotInCartCustomerAffiliations(customer.AccountNumber, customer.CustomerAffiliations);
                        notInCartCustomerAffiliations.forEach(function (customerAffiliation) {
                            var affiliationLoyaltyTier = new Commerce.Proxy.Entities.AffiliationLoyaltyTierClass();
                            affiliationLoyaltyTier.AffiliationId = customerAffiliation.RetailAffiliationId;
                            affiliationLoyaltyTier.CustomerId = loyaltyCard.CustomerAccount;
                            affiliationLoyaltyTier.LoyaltyTierId = 0;
                            notInCartAffiliations.push(affiliationLoyaltyTier);
                        });
                    }
                    var retryQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart, affiliationLines: notInCartAffiliations }, function (context) {
                        return _this.cartManager.addLoyaltyCardToCartAsync(loyaltyCard.CardNumber, context.affiliationLines, context.cart.ReasonCodeLines);
                    });
                    return addLoyaltyCardQueue.cancelOn(retryQueue.run());
                });
                return addLoyaltyCardQueue;
            };
            return AddLoyaltyCardOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddLoyaltyCardOperationHandler = AddLoyaltyCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddSerialNumberOperationHandler = (function (_super) {
            __extends(AddSerialNumberOperationHandler, _super);
            function AddSerialNumberOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddSerialNumberOperationHandler.prototype.execute = function (options) {
                var _this = this;
                var selectedCartLine = Commerce.ArrayExtensions.firstOrUndefined(options.cartLines);
                var product = Commerce.Session.instance.getFromProductsInCartCache(selectedCartLine.ProductId);
                var updatedCartLine = Commerce.ObjectExtensions.clone(selectedCartLine);
                var queue = Commerce.ActivityHelper.getSerialNumberForUpdateCartLineAsyncQueue(product, updatedCartLine);
                queue.enqueue(function () { return _this.cartManager.updateCartLinesOnCartAsync([updatedCartLine]); });
                return queue.run();
            };
            return AddSerialNumberOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddSerialNumberOperationHandler = AddSerialNumberOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var BankDropOperationHandler = (function (_super) {
            __extends(BankDropOperationHandler, _super);
            function BankDropOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BankDropOperationHandler.prototype.execute = function (options) {
                options = options || {};
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                if (!options.skipOpenDrawer) {
                    asyncQueue.enqueue(function () {
                        var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                    });
                }
                asyncQueue.enqueue(function () {
                    var context = {
                        tenderDropAndDeclareType: Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop,
                        shift: options.shift
                    };
                    var activity = new Commerce.Activities.TenderCountingActivity(context);
                    return asyncQueue.cancelOn(activity.execute()).map(function (result) {
                        return result.data;
                    });
                });
                return asyncQueue.run();
            };
            return BankDropOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.BankDropOperationHandler = BankDropOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var BlankOperationHandler = (function (_super) {
            __extends(BlankOperationHandler, _super);
            function BlankOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BlankOperationHandler.registerBlankOperationHandler = function (blankOperationId, handler) {
                if (Commerce.StringExtensions.isNullOrWhitespace(blankOperationId)) {
                    throw "Invalid blank operation identifier.";
                }
                BlankOperationHandler._blankOperationsMap[blankOperationId] = handler;
            };
            BlankOperationHandler.getBlankOperationHandler = function (blankOperationId) {
                return BlankOperationHandler._blankOperationsMap[blankOperationId];
            };
            BlankOperationHandler.prototype.execute = function (options) {
                options = options || { operationId: undefined, operationData: undefined };
                if (Commerce.StringExtensions.isNullOrWhitespace(options.operationId)) {
                    return Commerce.VoidAsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.INVALID_BLANK_OPERATION)
                    ]);
                }
                var handler = BlankOperationHandler.getBlankOperationHandler(options.operationId);
                if (Commerce.ObjectExtensions.isNullOrUndefined(handler) || Commerce.ObjectExtensions.isNullOrUndefined(handler.execute)) {
                    return Commerce.VoidAsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.INVALID_BLANK_OPERATION)
                    ]);
                }
                return handler.execute(options.operationData);
            };
            BlankOperationHandler._blankOperationsMap = {};
            return BlankOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.BlankOperationHandler = BlankOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var BlindCloseShiftOperationHandler = (function (_super) {
            __extends(BlindCloseShiftOperationHandler, _super);
            function BlindCloseShiftOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BlindCloseShiftOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { shift: undefined, correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    if (Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()) {
                        var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(options.correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                    }
                    else {
                        return Commerce.AsyncResult.createResolved();
                    }
                }).enqueue(function () {
                    if (!Commerce.Session.instance.Shift.IsShared) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var message = Commerce.ViewModelAdapter.getResourceString("string_4176");
                    return Commerce.ViewModelAdapter.displayMessage(message, Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                        .done(function (result) {
                        if (result === Commerce.DialogResult.No) {
                            asyncQueue.cancel();
                            _this.operationsManager.revertToSelf(options.correlationId).fail(function (errors) {
                                Commerce.RetailLogger.operationBlindCloseSharedShiftFailedOnRevertToSelfDuringCancellation(Commerce.Session.instance.Shift.ShiftId, Commerce.Session.instance.Shift.CurrentStaffId, options.correlationId);
                            });
                        }
                    });
                }).enqueue(function () {
                    return _this.storeOperationsManager.blindCloseShiftAsync(Commerce.Session.instance.Shift.TerminalId, Commerce.Session.instance.Shift.ShiftId, options.correlationId).done(function (shift) {
                        Commerce.RetailLogger.blindCloseShiftSucceeded(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), shift.StatusValue, options.correlationId);
                        Commerce.Session.instance.RemoveFromOpenedShifts(shift);
                    }).fail(function (errors) {
                        var shift = Commerce.Session.instance.Shift;
                        Commerce.RetailLogger.blindCloseShiftFailed(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), Commerce.ErrorHelper.getErrorMessages(errors), options.correlationId);
                    });
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this.operationsManager.revertToSelf(options.correlationId));
                }).enqueue(function () {
                    Commerce.Session.instance.Shift = null;
                    return Commerce.ShiftHelper.saveCashDrawerOnStorageAsync(null);
                }).enqueue(function () {
                    var logOffOperationRequest = new Commerce.LogOffOperationRequest(options.correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(logOffOperationRequest));
                });
                return asyncQueue.run();
            };
            return BlindCloseShiftOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.BlindCloseShiftOperationHandler = BlindCloseShiftOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CalculateTotalOperationHandler = (function (_super) {
            __extends(CalculateTotalOperationHandler, _super);
            function CalculateTotalOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CalculateTotalOperationHandler.prototype.execute = function (options) {
                return this.cartManager.recalculateOrderAsync(Commerce.Session.instance.cart.Id)
                    .map(function (result) { return { canceled: false, data: result }; });
            };
            return CalculateTotalOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CalculateTotalOperationHandler = CalculateTotalOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CarryoutSelectedOperationHandler = (function (_super) {
            __extends(CarryoutSelectedOperationHandler, _super);
            function CarryoutSelectedOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CarryoutSelectedOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {
                    cart: undefined,
                    cartLines: undefined,
                    pickupDate: undefined,
                    storeAddress: undefined,
                    storeNumber: undefined,
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                options.cart = options.cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
                options.cartLines = options.cartLines || [];
                options.pickupDate = options.pickupDate || Commerce.DateExtensions.getDate();
                options.storeNumber = options.storeNumber || Commerce.ApplicationContext.Instance.storeNumber;
                options.storeAddress = options.storeAddress || null;
                options.correlationId = options.correlationId || Commerce.LoggerHelper.getNewCorrelationId();
                var posTimeZoneOffset = options.pickupDate.getTimezoneOffset() * 60000;
                options.pickupDate = new Date(options.pickupDate.setHours(23, 59, 59) - posTimeZoneOffset);
                var cart = options.cart;
                var cartLines = options.cartLines;
                var asyncQueue = new Commerce.AsyncQueue();
                var carryoutAll = false;
                asyncQueue
                    .enqueue(function () {
                    if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart) &&
                        Commerce.CartHelper.areAllCartLinesSelected(cart, cartLines)) {
                        return Commerce.VoidAsyncResult.createRejected([]);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validateCartForCarryout(cart);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validatePickupProperties(options.storeNumber);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.getStorePickupAddress(options.storeNumber, options.storeAddress)
                        .done(function (address) {
                        options.storeAddress = address;
                    });
                }).enqueue(function () {
                    var tempCartLines = Commerce.ObjectExtensions.clone(cart.CartLines);
                    Commerce.DeliveryHelper.setDeliveryForCartLines(cartLines, 0, Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode, options.pickupDate, options.storeAddress, options.storeNumber);
                    if ((Commerce.CartHelper.areAllCartLinesSelected(cart, cartLines)
                        || Commerce.CustomerOrderHelper.areAllCustomerOrderCartLinesCarriedOut(cart))
                        && !Commerce.CustomerOrderHelper.isCustomerOrderWithExchange(cart)) {
                        carryoutAll = true;
                        return Commerce.ViewModelAdapter.displayMessage(Commerce.ViewModelAdapter.getResourceString("string_4450"), Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                            .done(function (result) {
                            if (result === Commerce.DialogResult.No) {
                                cart.CartLines = tempCartLines;
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    if (carryoutAll) {
                        cartLines = Commerce.CartHelper.GetNonVoidedCartLines(cart.CartLines);
                        Commerce.DeliveryHelper.setDeliveryCarryOutForCartLines(cartLines, 0, options.storeNumber, Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation);
                    }
                    return _this.cartManager.updateCartLinesOnCartAsync(cartLines);
                }).enqueue(function () {
                    if (!carryoutAll && cart.DeliveryModeChargeAmount > 0) {
                        var nonVoidedShippingCartLines = Commerce.CartHelper.GetNonVoidedShippingCartLines(cart.CartLines);
                        if (nonVoidedShippingCartLines.length > 1) {
                            Commerce.ViewModelAdapter.displayMessage("string_2561", Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default);
                        }
                        Commerce.DeliveryHelper.splitDeliveryCharges(cart.DeliveryModeChargeAmount, nonVoidedShippingCartLines);
                        if (Commerce.ArrayExtensions.hasElements(nonVoidedShippingCartLines)) {
                            return _this.cartManager.updateCartLinesOnCartAsync(nonVoidedShippingCartLines);
                        }
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var newCart = {
                        Id: cart.Id,
                        DeliveryMode: Commerce.StringExtensions.EMPTY,
                        RequestedDeliveryDate: null,
                        ShippingAddress: null,
                        DeliveryModeChargeAmount: 0
                    };
                    if (carryoutAll) {
                        newCart.CustomerOrderModeValue = Commerce.Proxy.Entities.CustomerOrderMode.None;
                        newCart.CartTypeValue = Commerce.Proxy.Entities.CartType.Shopping;
                        newCart.WarehouseId = Commerce.ApplicationContext.Instance.channelConfiguration.InventLocation;
                    }
                    return _this.cartManager.createOrUpdateCartAsync(newCart);
                });
                return asyncQueue.run();
            };
            return CarryoutSelectedOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CarryoutSelectedOperationHandler = CarryoutSelectedOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ChangePasswordOperationHandler = (function (_super) {
            __extends(ChangePasswordOperationHandler, _super);
            function ChangePasswordOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ChangePasswordOperationHandler.prototype.execute = function (options) {
                options = options || {
                    staffId: undefined,
                    newPassword: undefined,
                    oldPassword: undefined
                };
                return this.authenticationManager.changePassword({
                    userId: options.staffId,
                    oldPassword: options.oldPassword,
                    newPassword: options.newPassword
                })
                    .map(function (result) {
                    Commerce.AsyncService.instance.startProcessDataPackage(result);
                    return { canceled: false, data: result };
                });
            };
            return ChangePasswordOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ChangePasswordOperationHandler = ChangePasswordOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ChangeUnitOfMeasureOperationHandler = (function (_super) {
            __extends(ChangeUnitOfMeasureOperationHandler, _super);
            function ChangeUnitOfMeasureOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ChangeUnitOfMeasureOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cartLineUnitOfMeasures: undefined };
                options.cartLineUnitOfMeasures = options.cartLineUnitOfMeasures || [];
                var errors = this.validateOperationOptions(options);
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var cartLinesForUnitOfMeasureUpdate = [];
                var cartLinesToUpdate = [];
                options.cartLineUnitOfMeasures.forEach(function (cu) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(cu.unitOfMeasure)) {
                        cartLinesForUnitOfMeasureUpdate.push(cu.cartLine);
                    }
                    else {
                        var clonedCartLine = Commerce.ObjectExtensions.clone(cu.cartLine);
                        clonedCartLine.UnitOfMeasureSymbol = cu.unitOfMeasure.Symbol;
                        cartLinesToUpdate.push(clonedCartLine);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(cartLinesForUnitOfMeasureUpdate)) {
                    asyncQueue.enqueue(function () {
                        return _this.getCartLineUnitOfMeasures(cartLinesForUnitOfMeasureUpdate)
                            .done(function (cartLines) {
                            if (!cartLines) {
                                asyncQueue.cancel();
                                return;
                            }
                            cartLinesToUpdate = cartLinesToUpdate.concat(cartLines);
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    if (Commerce.ArrayExtensions.hasElements(cartLinesToUpdate)) {
                        var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLinesToUpdate }, function (context) {
                            return _this.cartManager.updateCartLinesOnCartAsync(context.cartLines);
                        }).run();
                        return asyncQueue.cancelOn(reasonCodesResult);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            ChangeUnitOfMeasureOperationHandler.prototype.validateOperationOptions = function (options) {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.IncomeExpense)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_INCOME_EXPENSE_TRANSACTION)];
                }
                if (!Commerce.ArrayExtensions.hasElements(options.cartLineUnitOfMeasures)
                    || options.cartLineUnitOfMeasures.some(function (c) { return Commerce.ObjectExtensions.isNullOrUndefined(c); })) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_NO_ITEM_SELECTED)];
                }
                var errors = [];
                options.cartLineUnitOfMeasures.forEach(function (cu) {
                    var cartLineErrors = _this.preValidateCartLine(cu.cartLine);
                    if (Commerce.ArrayExtensions.hasElements(cartLineErrors)) {
                        errors = errors.concat(cartLineErrors);
                    }
                });
                return errors;
            };
            ChangeUnitOfMeasureOperationHandler.prototype.getCartLineUnitOfMeasures = function (cartLines) {
                var _this = this;
                var unitsOfMeasureQueue = new Commerce.AsyncQueue();
                var cartLinesWithUnitOfMeasureOptions = [];
                var updatedCartLines;
                cartLines.forEach(function (cartLine) {
                    unitsOfMeasureQueue.enqueue(function () {
                        var getUnitsOfMeasureResult = new Commerce.VoidAsyncResult();
                        _this.productManager.getUnitsOfMeasureAsync(cartLine.ProductId).done(function (unitsOfMeasure) {
                            if (Commerce.ArrayExtensions.hasElements(unitsOfMeasure)) {
                                var cartLineWithUnitOfMeasureOptions = {
                                    cartLine: cartLine,
                                    unitOfMeasureOptions: unitsOfMeasure
                                };
                                cartLinesWithUnitOfMeasureOptions.push(cartLineWithUnitOfMeasureOptions);
                                getUnitsOfMeasureResult.resolve();
                            }
                            else {
                                var notFoundError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.UNIT_OF_MEASURE_CONVERSION_NOT_DEFINED);
                                getUnitsOfMeasureResult.reject([notFoundError]);
                            }
                        }).fail(function (getUnitsOfMeasureErrors) {
                            getUnitsOfMeasureResult.reject(getUnitsOfMeasureErrors);
                        });
                        return getUnitsOfMeasureResult;
                    });
                });
                unitsOfMeasureQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetCartLineUnitOfMeasuresActivity({ cartLinesWithUnitOfMeasureOptions: cartLinesWithUnitOfMeasureOptions });
                    return activity.execute().map(function () {
                        if (!activity.response) {
                            return null;
                        }
                        updatedCartLines = cartLines.map(function (cartLine, index) {
                            var clonedCartLine = Commerce.ObjectExtensions.clone(cartLine);
                            clonedCartLine.UnitOfMeasureSymbol = activity.response.selectedUnitsOfMeasure[index].Symbol;
                            return clonedCartLine;
                        });
                        return updatedCartLines;
                    });
                });
                return unitsOfMeasureQueue.run().map(function (queueResult) {
                    return updatedCartLines;
                });
            };
            ChangeUnitOfMeasureOperationHandler.prototype.preValidateCartLine = function (cartLine) {
                var errors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_NO_ITEM_SELECTED));
                    return errors;
                }
                if (cartLine.IsVoided) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_VOIDED));
                }
                if (cartLine.IsGiftCardLine) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_GIFT_CARD));
                }
                if (Commerce.CartLineHelper.isFromAReceipt(cartLine)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_RECEIPT));
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(cartLine.UnitOfMeasureSymbol)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.UNIT_OF_MEASURE_CANNOT_BE_CHANGED));
                }
                if (cartLine.IsInvoiceLine) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_SALES_INVOICE));
                }
                return errors;
            };
            return ChangeUnitOfMeasureOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ChangeUnitOfMeasureOperationHandler = ChangeUnitOfMeasureOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PrePostTriggerOperationHandlerBase = (function (_super) {
            __extends(PrePostTriggerOperationHandlerBase, _super);
            function PrePostTriggerOperationHandlerBase() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PrePostTriggerOperationHandlerBase.prototype.execute = function (options) {
                var _this = this;
                options = this.sanitizeOptions(options);
                return Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                    return _this.executePreTrigger(options);
                }, function () {
                    return _this.executeInternal(options);
                }, function (result) {
                    return _this.executePostTrigger(options, result);
                }).map(function (value) {
                    return value.data || { canceled: value.canceled };
                });
            };
            PrePostTriggerOperationHandlerBase.prototype.executePreTrigger = function (options) {
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            PrePostTriggerOperationHandlerBase.prototype.executePostTrigger = function (options, result) {
                return Commerce.VoidAsyncResult.createResolved();
            };
            PrePostTriggerOperationHandlerBase.prototype.sanitizeOptions = function (options) {
                return options;
            };
            PrePostTriggerOperationHandlerBase.prototype.executeInternal = function (options) {
                throw "executeInternal not implemented.";
            };
            return PrePostTriggerOperationHandlerBase;
        }(Operations.OperationHandlerBase));
        Operations.PrePostTriggerOperationHandlerBase = PrePostTriggerOperationHandlerBase;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ClearQuantityOperationHandler = (function (_super) {
            __extends(ClearQuantityOperationHandler, _super);
            function ClearQuantityOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ClearQuantityOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: options.cartLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreClearQuantity, preTriggerOptions);
            };
            ClearQuantityOperationHandler.prototype.executePostTrigger = function (options, result) {
                var lineIds = options.cartLines.map(function (cartLine) {
                    return cartLine.LineId;
                });
                var updatedCartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, lineIds);
                var postTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: updatedCartLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostClearQuantity, postTriggerOptions);
            };
            ClearQuantityOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { cartLines: undefined };
                options.cartLines = options.cartLines || [];
                return options;
            };
            ClearQuantityOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                var cartLinesToUpdate = [];
                options.cartLines.forEach(function (c) {
                    var quantity = c.Quantity > 0 ? 1 : -1;
                    var clonedCartLine = Commerce.ObjectExtensions.clone(c);
                    clonedCartLine.Quantity = quantity;
                    cartLinesToUpdate.push(clonedCartLine);
                });
                return Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLinesToUpdate }, function (context) { return _this.cartManager.updateCartLinesOnCartAsync(context.cartLines); })
                    .run();
            };
            return ClearQuantityOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.ClearQuantityOperationHandler = ClearQuantityOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CloseShiftOperationHandler = (function (_super) {
            __extends(CloseShiftOperationHandler, _super);
            function CloseShiftOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CloseShiftOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { shift: undefined, correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                options.shift = options.shift || Commerce.Session.instance.Shift;
                options.correlationId = options.correlationId || Commerce.LoggerHelper.getNewCorrelationId();
                var isSessionShift = options.shift.ShiftId === Commerce.Session.instance.Shift.ShiftId
                    && options.shift.TerminalId === Commerce.Session.instance.Shift.TerminalId
                    && options.shift.StoreRecordId === Commerce.Session.instance.Shift.StoreRecordId;
                var asyncQueue = new Commerce.AsyncQueue();
                if (options.shift.IsShared === true) {
                    asyncQueue.enqueue(function () {
                        return Commerce.ViewModelAdapter.displayMessage("string_4178", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                            .done(function (result) {
                            if (result === Commerce.DialogResult.No) {
                                asyncQueue.cancel();
                            }
                        });
                    });
                }
                if (Commerce.ApplicationContext.Instance.channelConfiguration.VoidSuspendedTransactionsOnCloseShift) {
                    asyncQueue.enqueue(function () {
                        return _this.suspendedCartManager.getSuspendedCartsByShiftAsync(options.shift.TerminalId, options.shift.ShiftId);
                    }).enqueue(function (suspendedCarts) {
                        if (Commerce.ArrayExtensions.hasElements(suspendedCarts)) {
                            var activity_1 = new Commerce.Activities.CheckSuspendedTransactionsActivity({});
                            var asyncInnerQueue_1 = new Commerce.AsyncQueue();
                            asyncInnerQueue_1.enqueue(function () {
                                return activity_1.execute();
                            }).enqueue(function () {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(activity_1.response)
                                    && (activity_1.response.viewVoidSelectionMethod === Commerce.Activities.ViewVoidSelectionMethod.VoidAll)) {
                                    return _this.suspendedCartManager.voidSuspendedTransactionsFromShiftAsync(options.shift.TerminalId, options.shift.ShiftId);
                                }
                                else {
                                    asyncInnerQueue_1.cancel();
                                    return Commerce.VoidAsyncResult.createResolved();
                                }
                            });
                            return asyncQueue.cancelOn(asyncInnerQueue_1.run());
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                }
                asyncQueue.enqueue(function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    return _this.storeOperationsManager.closeShiftAsync(options.shift.TerminalId, options.shift.ShiftId, false, correlationId)
                        .done(function (shift) {
                        Commerce.RetailLogger.closeShiftSucceeded(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), shift.StatusValue, correlationId);
                        Commerce.Session.instance.RemoveFromOpenedShifts(shift);
                    }).fail(function (errors) {
                        var shift = options.shift;
                        Commerce.RetailLogger.closeShiftFailed(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    });
                }).enqueue(function () {
                    Commerce.RetailLogger.operationCloseShift(options.correlationId);
                    if (isSessionShift) {
                        Commerce.Session.instance.Shift = null;
                        return Commerce.ShiftHelper.saveCashDrawerOnStorageAsync(null);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    return _this.operationsManager.revertToSelf(options.correlationId);
                }).enqueue(function () {
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration.PrintXZReportsOnTerminal) {
                        return _this.operationsManager.runOperation(Operations.RetailOperation.PrintZ, {});
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    if (isSessionShift) {
                        var logOffOperationRequest = new Commerce.LogOffOperationRequest(options.correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(logOffOperationRequest));
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            return CloseShiftOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CloseShiftOperationHandler = CloseShiftOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CreateCustomerOrderOperationHandler = (function (_super) {
            __extends(CreateCustomerOrderOperationHandler, _super);
            function CreateCustomerOrderOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateCustomerOrderOperationHandler.prototype.execute = function (options) {
                var _this = this;
                if (!options || !options.cart) {
                    throw "CreateCustomerOrderOperationHandler.executue operation options are required.";
                }
                var cart = options.cart;
                var errors = Commerce.CustomerOrderHelper.preCreateCustomerOrderValidation(cart);
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.AsyncResult.createRejected(errors);
                }
                if (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit) {
                    return Commerce.AsyncResult.createResolved({ data: Commerce.Session.instance.cart, canceled: false });
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                    return asyncQueue.cancelOn(reasonCodeQueue.run());
                }).enqueue(function () {
                    return _this.cartManager.setCustomerOrderModeAsync(Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit);
                });
                return asyncQueue.run().map(function (queueResult) {
                    return { data: Commerce.Session.instance.cart, canceled: queueResult.canceled };
                });
            };
            return CreateCustomerOrderOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CreateCustomerOrderOperationHandler = CreateCustomerOrderOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CreateCustomerQuoteOperationHandler = (function (_super) {
            __extends(CreateCustomerQuoteOperationHandler, _super);
            function CreateCustomerQuoteOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateCustomerQuoteOperationHandler.prototype.execute = function (options) {
                var _this = this;
                if (Commerce.CustomerOrderHelper.isQuote(options.cart)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.isCartInProgress) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart).run());
                    });
                }
                asyncQueue.enqueue(function () {
                    var newCart = new Commerce.Proxy.Entities.CartClass({
                        Id: options.cart.Id,
                        CustomerOrderModeValue: Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit,
                        CartTypeValue: Commerce.Proxy.Entities.CartType.CustomerOrder
                    });
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(options.quotationExpirationDate)) {
                        newCart.QuotationExpiryDate = options.quotationExpirationDate;
                    }
                    return _this.cartManager.createOrUpdateCartAsync(newCart);
                });
                return asyncQueue.run();
            };
            return CreateCustomerQuoteOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CreateCustomerQuoteOperationHandler = CreateCustomerQuoteOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CreateRetailTransactionOperationHandler = (function (_super) {
            __extends(CreateRetailTransactionOperationHandler, _super);
            function CreateRetailTransactionOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateRetailTransactionOperationHandler.preOperationValidation = function (cart) {
                var errors = [];
                if ((cart.CartTypeValue === Commerce.Proxy.Entities.CartType.Shopping)
                    || ((cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder) &&
                        (cart.CustomerOrderModeValue !== Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit))) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.FINISH_TRANSACTION_BEFORE_STARTING_ANOTHER));
                    return errors;
                }
                errors = Commerce.CustomerOrderHelper.validateCartLinesForRetailTransaction(cart);
                return errors;
            };
            CreateRetailTransactionOperationHandler.prototype.execute = function (options) {
                var _this = this;
                if (!options || !options.cart) {
                    throw "CreateRetailTransactionOperationHandler.execute operation options are required.";
                }
                var cart = options.cart;
                var errors = CreateRetailTransactionOperationHandler.preOperationValidation(cart);
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.AsyncResult.createRejected(errors);
                }
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.Shopping) {
                    return Commerce.AsyncResult.createResolved({ data: Commerce.Session.instance.cart, canceled: false });
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                    return asyncQueue.cancelOn(reasonCodeQueue.run());
                }).enqueue(function () {
                    return _this.cartManager.setRetailTransactionTypeAsync();
                });
                return asyncQueue.run().map(function (queueResult) {
                    return { data: Commerce.Session.instance.cart, canceled: queueResult.canceled };
                });
            };
            return CreateRetailTransactionOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CreateRetailTransactionOperationHandler = CreateRetailTransactionOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CustomerAccountDepositOperationHandler = (function (_super) {
            __extends(CustomerAccountDepositOperationHandler, _super);
            function CustomerAccountDepositOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerAccountDepositOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { accountDepositAmount: undefined };
                var amountDeposit;
                var customerAccountDepositLineCustomerAccount;
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.NumberExtensions.isNullNaNOrZero(options.accountDepositAmount)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetCustomerAccountDepositAmountActivity();
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                            amountDeposit = activity.response.amount;
                        });
                    });
                }
                else {
                    amountDeposit = options.accountDepositAmount;
                }
                asyncQueue.enqueue(function () {
                    customerAccountDepositLineCustomerAccount = Commerce.Session.instance.cart.CustomerId;
                    return _this.customerManager.getCustomerDetailsAsync(customerAccountDepositLineCustomerAccount)
                        .done(function (customerDetails) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(customerDetails.customer.InvoiceAccount)) {
                            customerAccountDepositLineCustomerAccount = customerDetails.customer.InvoiceAccount;
                        }
                    });
                }).enqueue(function () {
                    var customerAccountDepositLine = {
                        Amount: amountDeposit,
                        CustomerAccount: customerAccountDepositLineCustomerAccount
                    };
                    return _this.cartManager.addCustomerAccountDepositLinesToCartAsync([customerAccountDepositLine]);
                });
                return asyncQueue.run();
            };
            return CustomerAccountDepositOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CustomerAccountDepositOperationHandler = CustomerAccountDepositOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CustomerAddOperationHandler = (function (_super) {
            __extends(CustomerAddOperationHandler, _super);
            function CustomerAddOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerAddOperationHandler.prototype.executePreTrigger = function (options) {
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreCustomerAdd, { cart: Commerce.Session.instance.cart });
            };
            CustomerAddOperationHandler.prototype.executeInternal = function (options) {
                options = options || { customerSelectionHandler: undefined };
                var viewOptions = {
                    customer: undefined,
                    address: undefined,
                    customerCreatedOrUpdatedHandler: options.customerSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("CustomerAddEditView", viewOptions);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return CustomerAddOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.CustomerAddOperationHandler = CustomerAddOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CustomerClearOperationHandler = (function (_super) {
            __extends(CustomerClearOperationHandler, _super);
            function CustomerClearOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerClearOperationHandler.prototype.executePreTrigger = function (options) {
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreCustomerClear, { cart: Commerce.Session.instance.cart });
            };
            CustomerClearOperationHandler.prototype.executePostTrigger = function (options, result) {
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostCustomerClear, { cart: Commerce.Session.instance.cart });
            };
            CustomerClearOperationHandler.prototype.executeInternal = function (options) {
                var setCustomerOnCartOperationRequest = new Commerce.SetCustomerOnCartOperationRequest(options.correlationId, "");
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(setCustomerOnCartOperationRequest));
            };
            return CustomerClearOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.CustomerClearOperationHandler = CustomerClearOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CustomerEditOperationHandler = (function (_super) {
            __extends(CustomerEditOperationHandler, _super);
            function CustomerEditOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerEditOperationHandler.prototype.execute = function (options) {
                options = options || { customer: undefined };
                var viewOptions = {
                    customer: options.customer,
                    address: undefined,
                    customerCreatedOrUpdatedHandler: options.customerSelectionHandler
                };
                Commerce.ViewModelAdapter.navigate("CustomerAddEditView", viewOptions);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return CustomerEditOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CustomerEditOperationHandler = CustomerEditOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CustomerOrderHelper = (function () {
        function CustomerOrderHelper() {
        }
        CustomerOrderHelper.isSerialNumberSupported = function (product, cartLine) {
            return !cartLine.IsVoided
                && !cartLine.IsGiftCardLine
                && !cartLine.IsInvoiceLine
                && !Commerce.ObjectExtensions.isNullOrUndefined(product)
                && !Commerce.ObjectExtensions.isNullOrUndefined(product.Behavior)
                && product.Behavior.HasSerialNumber;
        };
        CustomerOrderHelper.isCustomerOrderMode = function (cart, customerOrderMode) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customerOrderMode)) {
                return CustomerOrderHelper.isCustomerOrder(cart) && cart.CustomerOrderModeValue === customerOrderMode;
            }
            return false;
        };
        CustomerOrderHelper.isCustomerOrder = function (cart) {
            return !Commerce.ObjectExtensions.isNullOrUndefined(cart) && cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder;
        };
        CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition = function (cart) {
            return CustomerOrderHelper.isCustomerOrderMode(cart, Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit)
                || CustomerOrderHelper.isCustomerOrderMode(cart, Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit);
        };
        CustomerOrderHelper.isCustomerOrderCancellation = function (cart) {
            return CustomerOrderHelper.isCustomerOrder(cart) && cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Cancellation;
        };
        CustomerOrderHelper.isCustomerOrderReturnOrPickup = function (cart) {
            return CustomerOrderHelper.isCustomerOrder(cart)
                && (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Return
                    || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup);
        };
        CustomerOrderHelper.isQuote = function (cart) {
            return CustomerOrderHelper.isCustomerOrder(cart) && cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit;
        };
        CustomerOrderHelper.isCustomerOrderCreationOrEdition = function (cart) {
            return CustomerOrderHelper.isCustomerOrder(cart) && cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit;
        };
        CustomerOrderHelper.isCustomerOrderPickup = function (cart) {
            return CustomerOrderHelper.isCustomerOrder(cart) && cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup;
        };
        CustomerOrderHelper.isCustomerOrderEdition = function (cart) {
            return CustomerOrderHelper.isCustomerOrderCreationOrEdition(cart) && !Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId);
        };
        CustomerOrderHelper.isCustomerOrderCreate = function (cart) {
            return CustomerOrderHelper.isCustomerOrderCreationOrEdition(cart) &&
                Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId);
        };
        CustomerOrderHelper.isCustomerOrderWithExchange = function (cart) {
            return CustomerOrderHelper.isCustomerOrderCreationOrEdition(cart) &&
                Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId) &&
                cart.CartLines.some(function (line) { return !line.IsVoided && Commerce.CartHelper.isReturnLine(line); });
        };
        CustomerOrderHelper.isQuoteExpired = function (cart) {
            var now = new Date();
            return cart.QuotationExpiryDate < now;
        };
        CustomerOrderHelper.hasLinesForShipping = function (cartLines) {
            return cartLines.some(function (cartLine) {
                return !Commerce.StringExtensions.isNullOrWhitespace(cartLine.DeliveryMode)
                    && cartLine.DeliveryMode !== Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode
                    && cartLine.DeliveryMode !== Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode
                    && cartLine.Quantity > 0;
            });
        };
        CustomerOrderHelper.hasCarryoutLines = function (cartLines) {
            var nonVoidedCartLines = Commerce.CartHelper.GetNonVoidedCartLines(cartLines);
            return nonVoidedCartLines.some(function (cartLine) {
                return !Commerce.StringExtensions.isNullOrWhitespace(cartLine.DeliveryMode)
                    && cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode
                    && cartLine.Quantity > 0;
            });
        };
        CustomerOrderHelper.canAuthorizeShippingAmount = function (cart) {
            var orderAmountNotCoveredByDeposit = cart.TotalCustomerOrderSalesAmount - cart.RequiredDepositWithoutCarryoutAmount;
            return CustomerOrderHelper.isCustomerOrderCreationOrEdition(cart)
                && (Commerce.ApplicationContext.Instance.channelConfiguration.EnableOmniChannelPayments
                    || CustomerOrderHelper.hasLinesForShipping(cart.CartLines))
                && orderAmountNotCoveredByDeposit > 0
                && !CustomerOrderHelper.isEstimatedBalanceCoveredByAuthorization(cart);
        };
        CustomerOrderHelper.isEstimatedBalanceCoveredByAuthorization = function (cart) {
            var estimatedRemainingBalance = Commerce.CartHelper.getEstimatedRemainingBalance();
            if (isNaN(estimatedRemainingBalance)) {
                return false;
            }
            return cart.TenderLines.some(function (tenderLine) {
                return !Commerce.StringExtensions.isNullOrWhitespace(tenderLine.CardToken)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.StatusValue)
                    && tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.PendingCommit
                    && !Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.ProcessingTypeValue)
                    && tenderLine.ProcessingTypeValue === Commerce.Proxy.Entities.PaymentProcessingType.Deferred
                    && !Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.AuthorizedAmount)
                    && tenderLine.AuthorizedAmount >= estimatedRemainingBalance;
            });
        };
        CustomerOrderHelper.isDepositOverridden = function (cart) {
            return !Commerce.ObjectExtensions.isNullOrUndefined(cart.OverriddenDepositWithoutCarryoutAmount);
        };
        CustomerOrderHelper.getDefaultQuoteExpirationDate = function () {
            var defaultQuoteExpiryDate = Commerce.DateExtensions.getDate();
            defaultQuoteExpiryDate.setDate(defaultQuoteExpiryDate.getDate() + Commerce.ApplicationContext.Instance.channelConfiguration.QuoteExpirationDays);
            Commerce.DateExtensions.setTimeToLastSecondOfDay(defaultQuoteExpiryDate);
            return defaultQuoteExpiryDate;
        };
        CustomerOrderHelper.preCreateCustomerOrderValidation = function (cart) {
            var errors = [];
            if ((cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder)
                && (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Cancellation)
                || (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup)
                || (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Return)
                || (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.OrderRecalled)) {
                errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.FINISH_TRANSACTION_BEFORE_STARTING_ANOTHER));
                return errors;
            }
            errors = CustomerOrderHelper.validateCartLinesForCustomerOrder(cart);
            return errors;
        };
        CustomerOrderHelper.validateCartLinesForCustomerOrder = function (cart) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                Commerce.RetailLogger.customerOrderHelperValidateCartLinesForCustomerOrderCartIsNull();
                return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)];
            }
            var cartLines = cart.CartLines;
            var errors = [];
            if (Commerce.ArrayExtensions.hasElements(cartLines)) {
                for (var i = 0; i < cartLines.length; i++) {
                    var cartLine = cartLines[i];
                    if (cartLine.IsGiftCardLine && !cartLine.IsVoided) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ORDERS_CANNOT_INCLUDE_GIFTCARDS));
                        break;
                    }
                    if (Commerce.CartHelper.isReturnLine(cartLine) &&
                        !cartLine.IsVoided &&
                        !Commerce.ApplicationContext.Instance.channelConfiguration.AllowExchangeOnReturnOrders) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ORDERS_CANNOT_INCLUDE_RETURNS));
                        break;
                    }
                    if (cartLine.IsInvoiceLine && !cartLine.IsVoided) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SALES_INVOICE_CANNOT_BE_IN_CUSTOMER_ORDER));
                        break;
                    }
                }
            }
            return errors;
        };
        CustomerOrderHelper.validateCartLinesForRetailTransaction = function (cart) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                Commerce.RetailLogger.customerOrderHelperValidateCartLinesForRetailTransactionCartIsNull();
                return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)];
            }
            var cartLines = cart.CartLines;
            var errors = [];
            if (Commerce.ArrayExtensions.hasElements(cartLines)) {
                for (var i = 0; i < cartLines.length; i++) {
                    var cartLine = cartLines[i];
                    if (!Commerce.StringExtensions.isNullOrWhitespace(cartLine.DeliveryMode)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMER_ORDER_CANNOT_PERFORM_OPERATION));
                        break;
                    }
                }
            }
            return errors;
        };
        CustomerOrderHelper.getQuotationExpirationDate = function (originalExpirationDate) {
            var asyncResult = new Commerce.AsyncResult(Commerce.StringExtensions.EMPTY);
            if (Commerce.ObjectExtensions.isNullOrUndefined(originalExpirationDate)) {
                originalExpirationDate = CustomerOrderHelper.getDefaultQuoteExpirationDate();
            }
            var activityContext = {
                originalExpirationDate: originalExpirationDate
            };
            var activity = new Commerce.Activities.GetQuotationExpirationDateActivity(activityContext);
            activity.execute().done(function () {
                if (activity.response) {
                    Commerce.DateExtensions.setTimeToLastSecondOfDay(activity.response.expirationDate);
                    asyncResult.resolve(activity.response.expirationDate);
                }
                else {
                    asyncResult.resolve(null);
                }
            });
            return asyncResult;
        };
        CustomerOrderHelper.setQuotationExpirationDate = function (cart, requestedExpirationDate) {
            var quoteExpirationDateOperationParameters = {
                cart: cart,
                requestedExpirationDate: requestedExpirationDate,
                correlationId: Commerce.LoggerHelper.getNewCorrelationId()
            };
            return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.SetQuotationExpirationDate, quoteExpirationDateOperationParameters);
        };
        CustomerOrderHelper.shouldWarnForDepositOverrideActionOnPickup = function (cart) {
            return CustomerOrderHelper.isCustomerOrderPickup(cart)
                && CustomerOrderHelper.isDepositOverridden(cart)
                && Commerce.NumberExtensions.isNullNaNOrZero(cart.OverriddenDepositWithoutCarryoutAmount)
                && !Commerce.NumberExtensions.isNullNaNOrZero(cart.AvailableDepositAmount);
        };
        CustomerOrderHelper.createReturnChargesAsyncQueue = function (currentCart, selectedCartLines, returnChargesActivated, returnChargesLimit) {
            if (!returnChargesActivated) {
                return CustomerOrderHelper.createZeroReturnChargesAsyncQueue(currentCart, selectedCartLines);
            }
            else if (!Commerce.NumberExtensions.isNullNaNOrZero(currentCart.DeliveryModeChargeAmount)) {
                return CustomerOrderHelper.createReturnHeaderChargesAsyncQueue(currentCart, returnChargesLimit);
            }
            else {
                return CustomerOrderHelper.createProductLineChargesAsyncQueue(selectedCartLines, returnChargesLimit);
            }
        };
        CustomerOrderHelper.isOrderAvailableForOperation = function (salesOrder, operationId) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                return false;
            }
            if (this.isOrderQuote(salesOrder)) {
                return operationId === Commerce.Proxy.Entities.CustomerOrderOperations.Edit;
            }
            var documentStatus = Commerce.Proxy.Entities.SalesOrderWrapper.convertDocumentToSalesStatus(salesOrder.DocumentStatusValue);
            var salesStatus = salesOrder.StatusValue;
            var isShipping = Commerce.StringExtensions.compare(salesOrder.DeliveryMode, Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode, true) !== 0;
            var isOrderCanceled = salesStatus === Commerce.Proxy.Entities.SalesStatus.Canceled;
            if (isOrderCanceled) {
                return false;
            }
            switch (operationId) {
                case Commerce.Proxy.Entities.CustomerOrderOperations.CreatePackingSlip:
                    return isShipping &&
                        (salesStatus !== Commerce.Proxy.Entities.SalesStatus.Invoiced && salesStatus !== Commerce.Proxy.Entities.SalesStatus.Delivered);
                case Commerce.Proxy.Entities.CustomerOrderOperations.Return: {
                    if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.Sales.equals(salesOrder.TransactionTypeValue)) {
                        return true;
                    }
                    return documentStatus === Commerce.Proxy.Entities.SalesStatus.Invoiced;
                }
                case Commerce.Proxy.Entities.CustomerOrderOperations.CreatePickingList:
                    return salesStatus === Commerce.Proxy.Entities.SalesStatus.Created;
                case Commerce.Proxy.Entities.CustomerOrderOperations.Cancel:
                case Commerce.Proxy.Entities.CustomerOrderOperations.Edit:
                    return documentStatus === Commerce.Proxy.Entities.SalesStatus.Created;
                case Commerce.Proxy.Entities.CustomerOrderOperations.PickUpFromStore:
                    return salesStatus !== Commerce.Proxy.Entities.SalesStatus.Invoiced;
                case Commerce.Proxy.Entities.CustomerOrderOperations.PrintPackingSlip:
                    return isShipping &&
                        (documentStatus === Commerce.Proxy.Entities.SalesStatus.Delivered || documentStatus === Commerce.Proxy.Entities.SalesStatus.Invoiced);
                default:
                    return false;
            }
        };
        CustomerOrderHelper.areAllCustomerOrderCartLinesCarriedOut = function (cart) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart) || !Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.CustomerOrder)) {
                return false;
            }
            var nonVoidedCartLines = Commerce.CartHelper.GetNonVoidedCartLines(cart.CartLines);
            return Commerce.ArrayExtensions.hasElements(nonVoidedCartLines) && !nonVoidedCartLines.some(function (line) {
                return Commerce.CartHelper.isReturnLine(line) || Commerce.StringExtensions.isNullOrWhitespace(line.DeliveryMode)
                    || line.DeliveryMode !== Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode;
            });
        };
        CustomerOrderHelper.createSimpleProductDictionaryFromProductIds = function (productIds, productDictionary) {
            productIds = productIds.filter(function (productId) {
                return !productDictionary.hasItem(productId);
            });
            var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                return productManager.getByIdsAsync(productIds, channelId)
                    .done(function (products) {
                    products.forEach(function (p) {
                        productDictionary.setItem(p.RecordId, p);
                    });
                });
            }).enqueue(function () {
                var remoteProductIds = productIds.filter(function (productId) {
                    return !productDictionary.hasItem(productId);
                });
                if (Commerce.ArrayExtensions.hasElements(remoteProductIds)) {
                    var channelId = 0;
                    return productManager.getByIdsAsync(remoteProductIds, channelId)
                        .done(function (products) {
                        products.forEach(function (p) {
                            productDictionary.setItem(p.RecordId, p);
                        });
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            });
            return asyncQueue.run();
        };
        CustomerOrderHelper.createCartLinesDisplayForReturn = function (cart, productDictionary) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(productDictionary)) {
                productDictionary = new Commerce.Dictionary();
            }
            var hasReturnableQuantities = cart.CartLines.some(function (cartLine) {
                return cartLine.QuantityReturnable < 0;
            });
            if (!hasReturnableQuantities) {
                return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RETURN_ALL_SALES_LINES_IN_SALES_INVOICE_RETURN, null)]);
            }
            else {
                var productIdsNotInCart = cart.CartLines.map(function (c) { return c.ProductId; });
                return CustomerOrderHelper.createSimpleProductDictionaryFromProductIds(productIdsNotInCart, productDictionary)
                    .map(function () {
                    return cart.CartLines.filter(function (cartLine) {
                        return cartLine.QuantityReturnable < 0;
                    }).map(function (cartLine) {
                        return new Commerce.Proxy.Entities.CartLineForDisplay(cartLine, productDictionary.getItem(cartLine.ProductId));
                    });
                });
            }
        };
        CustomerOrderHelper.createReturnInvoicedSalesLines = function (currentCart, cartLinesForDisplay) {
            var asyncQueue = new Commerce.AsyncQueue();
            return asyncQueue.enqueue(function () {
                Commerce.Session.instance.cart = new Commerce.Proxy.Entities.CartClass(currentCart);
                var chargesQueue = CustomerOrderHelper.createReturnChargesAsyncQueue(Commerce.Session.instance.cart, cartLinesForDisplay, Commerce.ApplicationContext.Instance.channelConfiguration.RefundShippingCharges, Commerce.ApplicationContext.Instance.channelConfiguration.RefundableShippingAmountWithoutApproval);
                return asyncQueue.cancelOn(chargesQueue.run());
            }).enqueue(function () {
                var options = {
                    customerId: Commerce.Session.instance.cart.CustomerId,
                    productReturnDetails: cartLinesForDisplay
                        .map(function (cartLineForDisplay) {
                        var cartLineForDisplayAsCartLine = cartLineForDisplay;
                        cartLineForDisplayAsCartLine.Quantity = cartLineForDisplayAsCartLine.QuantityReturnable;
                        return { cartLine: cartLineForDisplayAsCartLine };
                    })
                };
                var operationResult = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ReturnItem, options);
                return asyncQueue.cancelOn(operationResult);
            }).run();
        };
        CustomerOrderHelper.hasValidDeliveryDates = function (currentCart) {
            var cartLinesForSales = [];
            if (CustomerOrderHelper.isCustomerOrderCreationOrEdition(currentCart)) {
                cartLinesForSales = currentCart.CartLines.filter(function (cartLine) {
                    return !Commerce.CartHelper.isReturnLine(cartLine) && !cartLine.IsInvoiceLine;
                });
            }
            else if (CustomerOrderHelper.isQuote(currentCart)) {
                cartLinesForSales = currentCart.CartLines;
            }
            return cartLinesForSales.every(function (cartLine) {
                return Commerce.DateExtensions.isTodayOrFutureDate(cartLine.RequestedDeliveryDate);
            });
        };
        CustomerOrderHelper.tryUpdatingProductsInCartCacheAsync = function (cart) {
            if (!CustomerOrderHelper.isCustomerOrder(cart)) {
                return Commerce.VoidAsyncResult.createResolved();
            }
            var missingProductIds = [];
            cart.CartLines.forEach(function (cartLine) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId))
                    && Commerce.CartLineHelper.IsProduct(cartLine)) {
                    missingProductIds.push(cartLine.ProductId);
                }
            });
            missingProductIds = Commerce.ArrayExtensions.distinct(missingProductIds);
            if (Commerce.ArrayExtensions.hasElements(missingProductIds)) {
                var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                return productManager.getByIdsAsync(missingProductIds, 0)
                    .map(function (products) {
                    products.forEach(function (product) {
                        Commerce.Session.instance.addToProductsInCartCache(product);
                    });
                }).recoverOnFailure(function () {
                    return Commerce.VoidAsyncResult.createResolved();
                });
            }
            else {
                return Commerce.VoidAsyncResult.createResolved();
            }
        };
        CustomerOrderHelper.isOrderQuote = function (salesOrder) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                return false;
            }
            return salesOrder.CustomerOrderTypeValue === Commerce.Proxy.Entities.CustomerOrderType.Quote;
        };
        CustomerOrderHelper.createProductLineChargesAsyncQueue = function (selectedCartLines, returnChargesLimit) {
            var asyncQueue = new Commerce.AsyncQueue();
            var chargeLines = selectedCartLines.filter(function (line) {
                return !Commerce.NumberExtensions.isNullNaNOrZero(line.DeliveryModeChargeAmount);
            });
            var updatedChargeLines = [];
            var totalCharges = 0;
            chargeLines.forEach(function (line) {
                asyncQueue.enqueue(function () {
                    var getReturnChargeActivityParameters = {
                        originalReturnCharge: line.DeliveryModeChargeAmount,
                        deliveryMethodDescription: CustomerOrderHelper.getDeliveryOptionDescription(line.DeliveryMode),
                        productName: line.ProductName
                    };
                    var getReturnChargeActivity = new Commerce.Activities.GetReturnChargeActivity(getReturnChargeActivityParameters);
                    var activityResponse;
                    return getReturnChargeActivity.execute().done(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(getReturnChargeActivity.response)) {
                            asyncQueue.cancel();
                            return;
                        }
                        activityResponse = getReturnChargeActivity.response;
                        updatedChargeLines.push({
                            LineId: line.LineId,
                            DeliveryModeChargeAmount: -1 * activityResponse.returnChargeAmount
                        });
                        totalCharges += activityResponse.returnChargeAmount;
                    });
                });
            });
            if (Commerce.ArrayExtensions.hasElements(chargeLines)) {
                asyncQueue.enqueue(function () {
                    var operationParameters = {
                        currentCart: null,
                        updateChargeHeader: false,
                        cartLines: updatedChargeLines
                    };
                    if (totalCharges > returnChargesLimit) {
                        return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ReturnChargesOverride, operationParameters);
                    }
                    else {
                        return Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.ReturnChargesOverride, operationParameters);
                    }
                });
            }
            return asyncQueue;
        };
        CustomerOrderHelper.createZeroReturnChargesAsyncQueue = function (currentCart, selectedCartLines) {
            currentCart.DeliveryModeChargeAmount = 0;
            var nonZeroChargesLines = [];
            for (var i = 0; i < selectedCartLines.length; i++) {
                if (!Commerce.NumberExtensions.isNullNaNOrZero(selectedCartLines[i].DeliveryModeChargeAmount)) {
                    nonZeroChargesLines.push({
                        LineId: selectedCartLines[i].LineId,
                        DeliveryModeChargeAmount: 0
                    });
                }
            }
            var operationParameters = {
                currentCart: currentCart,
                updateChargeHeader: true,
                cartLines: nonZeroChargesLines
            };
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                return Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.ReturnChargesOverride, operationParameters);
            });
            return asyncQueue;
        };
        CustomerOrderHelper.createReturnHeaderChargesAsyncQueue = function (currentCart, chargesLimit) {
            var getReturnChargeActivityParameters = {
                originalReturnCharge: currentCart.DeliveryModeChargeAmount,
                deliveryMethodDescription: CustomerOrderHelper.getDeliveryOptionDescription(currentCart.DeliveryMode),
                productName: Commerce.StringExtensions.EMPTY
            };
            var getReturnChargeActivity = new Commerce.Activities.GetReturnChargeActivity(getReturnChargeActivityParameters);
            var activityResponse;
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                return getReturnChargeActivity.execute().done(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(getReturnChargeActivity.response)) {
                        asyncQueue.cancel();
                        return;
                    }
                    activityResponse = getReturnChargeActivity.response;
                });
            }).enqueue(function () {
                var cartParameter = new Commerce.Proxy.Entities.CartClass();
                cartParameter.Id = currentCart.Id;
                cartParameter.DeliveryModeChargeAmount = -1 * activityResponse.returnChargeAmount;
                var operationParameters = {
                    currentCart: cartParameter,
                    updateChargeHeader: true,
                    cartLines: []
                };
                if (activityResponse.returnChargeAmount > chargesLimit) {
                    return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ReturnChargesOverride, operationParameters);
                }
                else {
                    return Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Operations.RetailOperation.ReturnChargesOverride, operationParameters);
                }
            });
            return asyncQueue;
        };
        CustomerOrderHelper.getDeliveryOptionDescription = function (deliveryModeCode) {
            if (Commerce.ApplicationContext.Instance.deliveryOptionsMap.hasItem(deliveryModeCode)) {
                return Commerce.ApplicationContext.Instance.deliveryOptionsMap.getItem(deliveryModeCode).Description;
            }
            return Commerce.StringExtensions.EMPTY;
        };
        return CustomerOrderHelper;
    }());
    Commerce.CustomerOrderHelper = CustomerOrderHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SearchSelectionMode;
        (function (SearchSelectionMode) {
            SearchSelectionMode[SearchSelectionMode["None"] = 0] = "None";
            SearchSelectionMode[SearchSelectionMode["Product"] = 1] = "Product";
            SearchSelectionMode[SearchSelectionMode["Customer"] = 2] = "Customer";
        })(SearchSelectionMode = Operations.SearchSelectionMode || (Operations.SearchSelectionMode = {}));
        var SearchEntity;
        (function (SearchEntity) {
            SearchEntity[SearchEntity["Product"] = 0] = "Product";
            SearchEntity[SearchEntity["Customer"] = 1] = "Customer";
        })(SearchEntity = Operations.SearchEntity || (Operations.SearchEntity = {}));
        var CustomerSearchOperationHandler = (function (_super) {
            __extends(CustomerSearchOperationHandler, _super);
            function CustomerSearchOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerSearchOperationHandler.prototype.execute = function (options) {
                options = options || { searchText: undefined };
                var searchOptions = {
                    searchText: options.searchText,
                    selectionMode: SearchSelectionMode.None,
                    searchEntity: SearchEntity.Customer
                };
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.customerSelectionHandler)) {
                    searchOptions.selectionMode = SearchSelectionMode.Customer;
                    searchOptions.customerSelectionOptions = {
                        customerSelectionHandler: options.customerSelectionHandler,
                        isOnlySelectionAllowed: false
                    };
                }
                Commerce.ViewModelAdapter.navigate("SearchView", searchOptions);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return CustomerSearchOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CustomerSearchOperationHandler = CustomerSearchOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DatabaseConnectionStatusOperationHandler = (function (_super) {
            __extends(DatabaseConnectionStatusOperationHandler, _super);
            function DatabaseConnectionStatusOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DatabaseConnectionStatusOperationHandler.prototype.execute = function (options) {
                options = options || {};
                Commerce.ViewModelAdapter.navigate("DatabaseConnectionStatusView");
                return Commerce.VoidAsyncResult.createResolved();
            };
            return DatabaseConnectionStatusOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.DatabaseConnectionStatusOperationHandler = DatabaseConnectionStatusOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DeactivateDeviceOperationHandler = (function (_super) {
            __extends(DeactivateDeviceOperationHandler, _super);
            function DeactivateDeviceOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DeactivateDeviceOperationHandler.prototype.execute = function (options) {
                var _this = this;
                var correlationId = TsLogging.Utils.generateGuid();
                options = options || {};
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    Commerce.RetailLogger.deviceDeactivating(correlationId);
                    return _this.authenticationManager.deactivateDeviceAsync();
                }).enqueue(function () {
                    Commerce.RetailLogger.deviceDeactivated(correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId)));
                }).enqueue(function () {
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Payments.ClearMerchantInformationClientRequest(correlationId)))
                        .always(function () {
                        Commerce.RetailLogger.coreStorageClearInitiated(correlationId, "DeactivateDeviceOperationHandler");
                        Commerce.ApplicationStorage.clear();
                        Commerce.Session.instance.resetSession();
                        Commerce.ApplicationContext.Instance = null;
                        Commerce.Config.retailServerUrl = Commerce.StringExtensions.EMPTY;
                        Commerce.Utilities.OfflineHelper.stopOffline();
                        Commerce.Helpers.DeviceActivationHelper.navigateToGetStartedPage();
                    });
                }).enqueue(function () {
                    if (Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                        clearTimeout(Commerce.Session.instance.offlineParameters.syncDownloadOfflineData);
                        Commerce.Session.instance.offlineParameters.syncDownloadOfflineData = 0;
                        clearTimeout(Commerce.Session.instance.offlineParameters.syncUploadOfflineData);
                        Commerce.Session.instance.offlineParameters.syncUploadOfflineData = 0;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            return DeactivateDeviceOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.DeactivateDeviceOperationHandler = DeactivateDeviceOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DeclareStartAmountOperationHandler = (function (_super) {
            __extends(DeclareStartAmountOperationHandler, _super);
            function DeclareStartAmountOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DeclareStartAmountOperationHandler.prototype.execute = function (options) {
                options = options || {};
                options.skipOpenDrawer = options.transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe ? true : options.skipOpenDrawer;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                if (!options.skipOpenDrawer) {
                    asyncQueue.enqueue(function () {
                        var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                    });
                }
                asyncQueue.enqueue(function () {
                    var useAdvancedCashManagement = Commerce.ApplicationContext.Instance.channelConfiguration.UseAdvancedCashManagement;
                    if (useAdvancedCashManagement) {
                        var request = new Commerce.CashManagement.CreateAdvancedCashManagementTransactionClientRequest(correlationId, options.shift, Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount, options.transactionContext, options.storeSafe);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .map(function (result) {
                            return result.canceled ? null : result.data.result;
                        });
                    }
                    else {
                        var context = {
                            transactionType: Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount,
                            shift: options.shift
                        };
                        var activity = new Commerce.Activities.CashManagementActivity(context);
                        return asyncQueue.cancelOn(activity.execute()).map(function (result) {
                            return result.data;
                        });
                    }
                });
                return asyncQueue.run();
            };
            return DeclareStartAmountOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.DeclareStartAmountOperationHandler = DeclareStartAmountOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DepositOverrideOperationHandler = (function (_super) {
            __extends(DepositOverrideOperationHandler, _super);
            function DepositOverrideOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DepositOverrideOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { depositOverrideAmount: undefined };
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.depositOverrideAmount)) {
                    return this.cartManager.updateOverriddenDepositAmountForCartAsync(options.depositOverrideAmount);
                }
                else {
                    var activity = new Commerce.Activities.DepositOverrideActivity();
                    activity.responseHandler = function (response) {
                        return _this.cartManager.updateOverriddenDepositAmountForCartAsync(response.depositOverrideAmount);
                    };
                    return activity.execute();
                }
            };
            return DepositOverrideOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.DepositOverrideOperationHandler = DepositOverrideOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DiscountOperationsHelper = (function () {
            function DiscountOperationsHelper() {
            }
            DiscountOperationsHelper.createTransactionDiscountQueue = function (options, isPercent) {
                options = options || { cart: Commerce.Session.instance.cart, discountValue: undefined };
                options.cart = options.cart || Commerce.Session.instance.cart;
                var asyncQueue = new Commerce.AsyncQueue();
                var error = Commerce.DiscountsHelper.validateCanAddDiscounts(options.cart);
                if (error) {
                    asyncQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected([error]);
                    });
                    return asyncQueue;
                }
                var applyDiscountsToPriceOverrides = Commerce.ApplicationContext.Instance.deviceConfiguration.ApplyDiscountsToPriceOverrides;
                if (!applyDiscountsToPriceOverrides) {
                    if (options.cart.CartLines.filter(function (cartLine) { return !cartLine.IsVoided && cartLine.IsPriceOverridden; }).length > 0) {
                        asyncQueue.enqueue(function () {
                            var activity = new Commerce.Activities.ShowNoDiscountOnPriceOverriddenWarningActivity({});
                            return activity.execute().done(function () {
                                if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                                    asyncQueue.cancel();
                                }
                            });
                        });
                    }
                }
                asyncQueue.enqueue(function () {
                    var preTriggerOptions = { cart: options.cart };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(isPercent ? Commerce.Triggers.CancelableTriggerType.PreTotalDiscountPercent : Commerce.Triggers.CancelableTriggerType.PreTotalDiscountAmount, preTriggerOptions);
                    return asyncQueue.cancelOn(preTriggerResult);
                });
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.discountValue)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetTransactionDiscountActivity({ cart: options.cart, isPercent: isPercent });
                        activity.responseHandler = function (response) {
                            var error = isPercent
                                ? Commerce.DiscountsHelper.validateMaximumDiscountPercentage(response.discount)
                                : Commerce.DiscountsHelper.validateMaximumDiscountAmount(response.discount);
                            if (error) {
                                return Commerce.VoidAsyncResult.createRejected([error]);
                            }
                            options.discountValue = response.discount;
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        var error = isPercent
                            ? Commerce.DiscountsHelper.validateMaximumDiscountPercentage(options.discountValue)
                            : Commerce.DiscountsHelper.validateMaximumDiscountAmount(options.discountValue);
                        if (error) {
                            return Commerce.VoidAsyncResult.createRejected([error]);
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                asyncQueue.enqueue(function () {
                    var updatedCart = new Commerce.Proxy.Entities.CartClass({
                        Id: options.cart.Id,
                        TotalManualDiscountAmount: isPercent ? 0 : options.discountValue,
                        TotalManualDiscountPercentage: isPercent ? options.discountValue : 0,
                        ReasonCodeLines: options.cart.ReasonCodeLines
                    });
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    var retryQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: updatedCart }, function (context) { return cartManager.createOrUpdateCartAsync(context.cart); }, Commerce.Proxy.Entities.ReasonCodeSourceType.TotalDiscount);
                    return asyncQueue.cancelOn(retryQueue.run());
                });
                asyncQueue.enqueue(function () {
                    var postTriggerOptions = { cart: Commerce.Session.instance.cart };
                    return Commerce.Triggers.TriggerManager.instance.execute(isPercent ? Commerce.Triggers.NonCancelableTriggerType.PostTotalDiscountPercent : Commerce.Triggers.NonCancelableTriggerType.PostTotalDiscountAmount, postTriggerOptions);
                });
                return asyncQueue;
            };
            DiscountOperationsHelper.createLineDiscountQueue = function (options, isPercent) {
                options = options || { cartLineDiscounts: [] };
                options.cartLineDiscounts = options.cartLineDiscounts || [];
                var cartLinesWithoutDiscount = [];
                var cartLinesToUpdate = [];
                var asyncQueue = new Commerce.AsyncQueue();
                var error = Commerce.DiscountsHelper.validateCanAddDiscounts(Commerce.Session.instance.cart);
                if (error) {
                    asyncQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected([error]);
                    });
                    return asyncQueue;
                }
                if (!Commerce.ArrayExtensions.hasElements(options.cartLineDiscounts)) {
                    asyncQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MISSING_CARTLINE_ON_APPLY_DISCOUNT)]);
                    });
                    return asyncQueue;
                }
                if (Commerce.Session.instance.cart.TotalManualDiscountAmount > 0 || Commerce.Session.instance.cart.TotalManualDiscountPercentage > 0) {
                    asyncQueue.enqueue(function () {
                        var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                        var yesLabel = Commerce.ViewModelAdapter.getResourceString("string_7430");
                        var noLabel = Commerce.ViewModelAdapter.getResourceString("string_7431");
                        var YES_RESULT_VALUE = "YES_RESULT";
                        var NO_RESULT_VALUE = "NO_RESULT";
                        var yesButton = {
                            id: Commerce.Activities.DisplayMessageOperationIds.OK,
                            label: yesLabel,
                            isPrimary: true,
                            result: YES_RESULT_VALUE
                        };
                        var noButton = {
                            id: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                            label: noLabel,
                            isPrimary: false,
                            result: NO_RESULT_VALUE
                        };
                        var dialogRequest = new Commerce.ShowMessageDialogClientRequest({
                            title: Commerce.ViewModelAdapter.getResourceString("string_7429"),
                            message: Commerce.ViewModelAdapter.getResourceString("string_5627"),
                            showCloseX: true,
                            button1: yesButton,
                            button2: noButton
                        }, correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest))
                            .done(function (response) {
                            if (response.canceled || response.data.result.dialogResult === NO_RESULT_VALUE) {
                                asyncQueue.cancel();
                            }
                        });
                    });
                }
                var applyDiscountsToPriceKeyedIn = Commerce.ApplicationContext.Instance.deviceConfiguration.ApplyDiscountsToPriceKeyedIn;
                var applyDiscountsToPriceOverrides = Commerce.ApplicationContext.Instance.deviceConfiguration.ApplyDiscountsToPriceOverrides;
                asyncQueue.enqueue(function () {
                    if (options.cartLineDiscounts.some(function (cartLineDiscount) { return cartLineDiscount.cartLine.IsPriceKeyedIn; })
                        && !applyDiscountsToPriceKeyedIn) {
                        var error_1 = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERMISSION_DENIED_CANNOT_APPLY_DISCOUNT_TO_LINE_WITH_PRICE_KEYED_IN);
                        return Commerce.VoidAsyncResult.createRejected([error_1]);
                    }
                    if (options.cartLineDiscounts.some(function (cartLineDiscount) { return cartLineDiscount.cartLine.IsPriceOverridden; })
                        && !applyDiscountsToPriceOverrides) {
                        var error_2 = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERMISSION_DENIED_CANNOT_APPLY_DISCOUNT_TO_LINE_WITH_OVERRIDDEN_PRICE);
                        return Commerce.VoidAsyncResult.createRejected([error_2]);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncQueue.enqueue(function () {
                    var cartLines = options.cartLineDiscounts.map(function (cartLineDiscount) {
                        return cartLineDiscount.cartLine;
                    });
                    var preTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: cartLines };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(isPercent ? Commerce.Triggers.CancelableTriggerType.PreLineDiscountPercent : Commerce.Triggers.CancelableTriggerType.PreLineDiscountAmount, preTriggerOptions);
                    return asyncQueue.cancelOn(preTriggerResult);
                });
                options.cartLineDiscounts.forEach(function (cartLineDiscount) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(cartLineDiscount.discountValue)) {
                        cartLinesWithoutDiscount.push(cartLineDiscount.cartLine);
                    }
                    else {
                        cartLinesToUpdate.push({
                            LineId: cartLineDiscount.cartLine.LineId,
                            ProductId: cartLineDiscount.cartLine.ProductId,
                            Quantity: cartLineDiscount.cartLine.Quantity,
                            LineManualDiscountAmount: isPercent ? 0 : cartLineDiscount.discountValue,
                            LineManualDiscountPercentage: isPercent ? cartLineDiscount.discountValue : 0,
                            ReasonCodeLines: cartLineDiscount.cartLine.ReasonCodeLines
                        });
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(cartLinesToUpdate)) {
                    asyncQueue.enqueue(function () {
                        var errors = [];
                        cartLinesToUpdate.forEach(function (cartLine) {
                            var error = isPercent
                                ? Commerce.DiscountsHelper.validateMaximumLineDiscountPercentage(cartLine.LineManualDiscountPercentage, cartLine)
                                : Commerce.DiscountsHelper.validateMaximumLineDiscountAmount(cartLine.LineManualDiscountAmount, cartLine);
                            if (error) {
                                errors.push(error);
                            }
                        });
                        if (Commerce.ArrayExtensions.hasElements(errors)) {
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(cartLinesWithoutDiscount)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetCartLineDiscountsActivity({ cartLines: cartLinesWithoutDiscount, isPercent: isPercent });
                        activity.responseHandler = function (response) {
                            var errors = [];
                            response.discounts.forEach(function (discount, discountIndex) {
                                var cartLine = cartLinesWithoutDiscount[discountIndex];
                                var error = isPercent
                                    ? Commerce.DiscountsHelper.validateMaximumLineDiscountPercentage(discount, cartLine)
                                    : Commerce.DiscountsHelper.validateMaximumLineDiscountAmount(discount, cartLine);
                                if (error) {
                                    errors.push(error);
                                }
                            });
                            if (Commerce.ArrayExtensions.hasElements(errors)) {
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                            cartLinesWithoutDiscount.forEach(function (cartLine, cartLineIndex) {
                                cartLine.LineManualDiscountPercentage = isPercent ? response.discounts[cartLineIndex] : 0;
                                cartLine.LineManualDiscountAmount = isPercent ? 0 : response.discounts[cartLineIndex];
                                cartLinesToUpdate.push(cartLine);
                            });
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    var retryQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLinesToUpdate }, function (context) { return cartManager.updateCartLinesOnCartAsync(context.cartLines); }, Commerce.Proxy.Entities.ReasonCodeSourceType.ItemDiscount);
                    return asyncQueue.cancelOn(retryQueue.run());
                });
                asyncQueue.enqueue(function () {
                    var lineIds = options.cartLineDiscounts.map(function (cartLineDiscount) {
                        return cartLineDiscount.cartLine.LineId;
                    });
                    var updatedCartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, lineIds);
                    var postTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: updatedCartLines };
                    return Commerce.Triggers.TriggerManager.instance.execute(isPercent ? Commerce.Triggers.NonCancelableTriggerType.PostLineDiscountPercent : Commerce.Triggers.NonCancelableTriggerType.PostLineDiscountAmount, postTriggerOptions);
                });
                return asyncQueue;
            };
            return DiscountOperationsHelper;
        }());
        Operations.DiscountOperationsHelper = DiscountOperationsHelper;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DisplayTotalOperationHandler = (function (_super) {
            __extends(DisplayTotalOperationHandler, _super);
            function DisplayTotalOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DisplayTotalOperationHandler.prototype.execute = function (options) {
                var result = new Commerce.VoidAsyncResult();
                Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayBalance(Commerce.Session.instance.cart.TotalAmount, Commerce.Session.instance.cart.AmountDue)
                    .done(function () {
                    result.resolve();
                }).fail(function (errors) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_LINEDISPLAY_ERROR);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(errors)) {
                        errors = new Commerce.Proxy.Entities.Error[0];
                    }
                    errors.unshift(error);
                    result.reject(errors);
                });
                return result.map(function () {
                    return { canceled: false };
                });
            };
            return DisplayTotalOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.DisplayTotalOperationHandler = DisplayTotalOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ExpenseAccountsOperationHandler = (function (_super) {
            __extends(ExpenseAccountsOperationHandler, _super);
            function ExpenseAccountsOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ExpenseAccountsOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { incomeExpenseLine: undefined };
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.incomeExpenseLine)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetIncomeExpenseLineActivity({ accountType: Commerce.Proxy.Entities.IncomeExpenseAccountType.Expense });
                        return activity.execute()
                            .done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                            options.incomeExpenseLine = activity.response.incomeExpenseLine;
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart }, function (c) { return _this.cartManager.addIncomeExpenseLinesToCartAsync([options.incomeExpenseLine]); }).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            return ExpenseAccountsOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ExpenseAccountsOperationHandler = ExpenseAccountsOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ExtendedLogOnOperationHandler = (function (_super) {
            __extends(ExtendedLogOnOperationHandler, _super);
            function ExtendedLogOnOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ExtendedLogOnOperationHandler.prototype.execute = function (options) {
                Commerce.ViewModelAdapter.navigate("ExtendedLogOnView");
                return Commerce.VoidAsyncResult.createResolved();
            };
            return ExtendedLogOnOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ExtendedLogOnOperationHandler = ExtendedLogOnOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var FloatEntryOperationHandler = (function (_super) {
            __extends(FloatEntryOperationHandler, _super);
            function FloatEntryOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            FloatEntryOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { shift: options.shift || Commerce.Session.instance.Shift };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreFloatEntry, preTriggerOptions);
            };
            FloatEntryOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || {};
                return options;
            };
            FloatEntryOperationHandler.prototype.executePostTrigger = function (options, result) {
                var postTriggerOptions = {
                    shift: options.shift || Commerce.Session.instance.Shift,
                    transaction: result.data
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostFloatEntry, postTriggerOptions);
            };
            FloatEntryOperationHandler.prototype.executeInternal = function (options) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                options.skipOpenDrawer = options.transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe ? true : options.skipOpenDrawer;
                var asyncQueue = new Commerce.AsyncQueue();
                if (!options.skipOpenDrawer) {
                    asyncQueue.enqueue(function () {
                        var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                    });
                }
                asyncQueue.enqueue(function () {
                    var useAdvancedCashManagement = Commerce.ApplicationContext.Instance.channelConfiguration.UseAdvancedCashManagement;
                    if (useAdvancedCashManagement) {
                        var request = new Commerce.CashManagement.CreateAdvancedCashManagementTransactionClientRequest(correlationId, options.shift, Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry, options.transactionContext, options.storeSafe);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .map(function (result) {
                            return result.canceled ? null : result.data.result;
                        });
                    }
                    else {
                        var context = {
                            transactionType: Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry,
                            shift: options.shift
                        };
                        var activity = new Commerce.Activities.CashManagementActivity(context);
                        return asyncQueue.cancelOn(activity.execute()).map(function (result) {
                            return result.data;
                        });
                    }
                });
                return asyncQueue.run();
            };
            return FloatEntryOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.FloatEntryOperationHandler = FloatEntryOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ForceUnlockPeripheralOperationHandler = (function (_super) {
            __extends(ForceUnlockPeripheralOperationHandler, _super);
            function ForceUnlockPeripheralOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ForceUnlockPeripheralOperationHandler.prototype.execute = function (options) {
                options = options || { lockRequest: undefined, action: undefined, data: undefined, timeout: undefined, suppressGlobalErrorEvent: undefined };
                var asyncResult = new Commerce.AsyncResult();
                options.data.Override = true;
                options.lockRequest.execute(options.action, options.data, options.timeout, options.suppressGlobalErrorEvent)
                    .done(function (result) {
                    asyncResult.resolve({ canceled: false, data: result });
                }).fail(function (error) {
                    asyncResult.reject(error);
                });
                return asyncResult;
            };
            return ForceUnlockPeripheralOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ForceUnlockPeripheralOperationHandler = ForceUnlockPeripheralOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetPaymentsHistoryOperationHandler = (function (_super) {
            __extends(GetPaymentsHistoryOperationHandler, _super);
            function GetPaymentsHistoryOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetPaymentsHistoryOperationHandler.prototype.execute = function (options) {
                options = options || { cart: undefined };
                return this.cartManager.getPaymentsHistoryAsync(options.cart.Id)
                    .map(function (tenderLines) { return { canceled: false, data: tenderLines }; });
            };
            return GetPaymentsHistoryOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.GetPaymentsHistoryOperationHandler = GetPaymentsHistoryOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var HardwareStationHelper = (function () {
            function HardwareStationHelper() {
            }
            HardwareStationHelper.selectActiveHardwareStationAsync = function (isTransactionStart) {
                var _this = this;
                if (isTransactionStart === void 0) { isTransactionStart = false; }
                if (Commerce.ApplicationContext.Instance.deviceConfiguration.SelectHardwareStationOnTendering
                    && !this._transactionStart) {
                    var activity = new Commerce.Activities.SelectHardwareStationActivity({
                        activeOnly: false,
                        title: Commerce.ViewModelAdapter.getResourceString("string_6000"),
                        subTitle: Commerce.ViewModelAdapter.getResourceString("string_6001"),
                        isPairedHardwareStationView: false
                    });
                    return activity.execute().map(function () {
                        var isHardwareStationActive = Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
                        _this._transactionStart = isTransactionStart;
                        return {
                            canceled: !isHardwareStationActive
                        };
                    });
                }
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            HardwareStationHelper.clearSelection = function () {
                this._transactionStart = false;
            };
            HardwareStationHelper._transactionStart = false;
            return HardwareStationHelper;
        }());
        Operations.HardwareStationHelper = HardwareStationHelper;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var IncomeAccountsOperationHandler = (function (_super) {
            __extends(IncomeAccountsOperationHandler, _super);
            function IncomeAccountsOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            IncomeAccountsOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { incomeExpenseLine: undefined };
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.incomeExpenseLine)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetIncomeExpenseLineActivity({ accountType: Commerce.Proxy.Entities.IncomeExpenseAccountType.Income });
                        return activity.execute()
                            .done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                            options.incomeExpenseLine = activity.response.incomeExpenseLine;
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart }, function (c) { return _this.cartManager.addIncomeExpenseLinesToCartAsync([options.incomeExpenseLine]); }).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            return IncomeAccountsOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.IncomeAccountsOperationHandler = IncomeAccountsOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var InventoryLookupOperationHandler = (function (_super) {
            __extends(InventoryLookupOperationHandler, _super);
            function InventoryLookupOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InventoryLookupOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options provided to InventoryLookupOperationHandler.execute requires options to be set.";
                }
                return this.productManager.searchProductAvailabilityAsync(options.productRecordId, options.criteria)
                    .map(function (stores) {
                    return { canceled: false, data: stores };
                });
            };
            return InventoryLookupOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.InventoryLookupOperationHandler = InventoryLookupOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var InvoiceCommentOperationHandler = (function (_super) {
            __extends(InvoiceCommentOperationHandler, _super);
            function InvoiceCommentOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InvoiceCommentOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cart: undefined, comment: undefined };
                options.cart = options.cart || Commerce.Session.instance.cart;
                options.comment = options.comment || undefined;
                var asyncQueue = new Commerce.AsyncQueue();
                if (options.cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder) {
                    var errors = [];
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.INVOICE_COMMENTS_NOT_AVAILABLE));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(options.comment)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetInvoiceCommentActivity({ cart: options.cart });
                        activity.responseHandler = function (response) {
                            return asyncQueue.cancelOn(_this.addInvoiceCommentAsync(response.comment));
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this.addInvoiceCommentAsync(options.comment));
                    });
                }
                return asyncQueue.run();
            };
            InvoiceCommentOperationHandler.prototype.addInvoiceCommentAsync = function (comment) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                    return asyncQueue.cancelOn(reasonCodeQueue.run());
                }).enqueue(function () {
                    return _this.cartManager.addInvoiceCommentAsync(comment);
                });
                return asyncQueue.run();
            };
            return InvoiceCommentOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.InvoiceCommentOperationHandler = InvoiceCommentOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var IssueCreditMemoOperationHandler = (function (_super) {
            __extends(IssueCreditMemoOperationHandler, _super);
            function IssueCreditMemoOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            IssueCreditMemoOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { recipientEmailAddress: undefined };
                var issueCreditMemoTenderType = this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Operations.RetailOperation.PayCreditMemo);
                if (Commerce.ObjectExtensions.isNullOrUndefined(issueCreditMemoTenderType)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_ISSUE_CREDIT_MEMO_NOT_AVAILABLE)]);
                }
                if (!Commerce.CustomerOrderHelper.isCustomerOrderReturnOrPickup(Commerce.Session.instance.cart)) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart.IsDiscountFullyCalculated) && !Commerce.Session.instance.cart.IsDiscountFullyCalculated) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_ISSUE_CREDIT_MEMO_CALCULATE_TRANSACTION)]);
                    }
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart.HasTaxCalculationTriggered) && !Commerce.Session.instance.cart.HasTaxCalculationTriggered) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_ISSUE_CREDIT_MEMO_CALCULATE_TRANSACTION)]);
                }
                var tenderLine;
                var salesOrder;
                var finalCheckedOutCart = null;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var amount = Commerce.Session.instance.cart.AmountDue;
                    if (amount >= 0) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CREDIT_MEMO_INVALID_AMOUNT)]);
                    }
                    tenderLine = {
                        TenderLineId: Commerce.StringExtensions.EMPTY,
                        Amount: amount,
                        Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                        TenderTypeId: issueCreditMemoTenderType.TenderTypeId
                    };
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var addTenderLineToCartRequest = new Commerce.AddTenderLineToCartClientRequest(tenderLine);
                    var addTenderLineToCartResponse = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addTenderLineToCartRequest));
                    return asyncQueue.cancelOn(addTenderLineToCartResponse);
                }).enqueue(function () {
                    var updateCartBeforeCheckout = false;
                    var retryQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart }, function (context) {
                        var updateAsyncQueue = new Commerce.AsyncQueue();
                        if (updateCartBeforeCheckout) {
                            updateAsyncQueue.enqueue(function () {
                                return _this.cartManager.createOrUpdateCartAsync(context.cart);
                            });
                        }
                        updateCartBeforeCheckout = true;
                        updateAsyncQueue.enqueue(function () {
                            finalCheckedOutCart = Commerce.Session.instance.cart;
                            return _this.cartManager.checkoutCartAsync(options.recipientEmailAddress)
                                .done(function (salesOrderResult) {
                                salesOrder = salesOrderResult;
                            });
                        });
                        return updateAsyncQueue.run();
                    });
                    return asyncQueue.cancelOn(retryQueue.run());
                });
                return asyncQueue.run().map(function (result) {
                    return { canceled: result.canceled, data: { salesOrder: salesOrder, finalCheckedOutCart: finalCheckedOutCart } };
                });
            };
            return IssueCreditMemoOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.IssueCreditMemoOperationHandler = IssueCreditMemoOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var IssueLoyaltyCardOperationHandler = (function (_super) {
            __extends(IssueLoyaltyCardOperationHandler, _super);
            function IssueLoyaltyCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            IssueLoyaltyCardOperationHandler.prototype.execute = function (options) {
                options = options || { customer: undefined };
                Commerce.ViewModelAdapter.navigate("IssueLoyaltyCardView", options);
                return Commerce.AsyncResult.createResolved();
            };
            return IssueLoyaltyCardOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.IssueLoyaltyCardOperationHandler = IssueLoyaltyCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var Diagnostics = Microsoft.Dynamics.Diagnostics;
        var ItemSaleOperationHandler = (function (_super) {
            __extends(ItemSaleOperationHandler, _super);
            function ItemSaleOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ItemSaleOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart, productSaleDetails: options.productSaleDetails };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreProductSale, preTriggerOptions);
            };
            ItemSaleOperationHandler.prototype.executePostTrigger = function (options, result) {
                var postTriggerOptions = { cart: Commerce.Session.instance.cart, productSaleDetails: options.productSaleDetails };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostProductSale, postTriggerOptions);
            };
            ItemSaleOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { productSaleDetails: undefined, correlationId: undefined };
                if (Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    options.correlationId = Diagnostics.TypeScriptCore.Utils.generateGuid();
                }
                if (Commerce.ArrayExtensions.hasElements(options.productSaleDetails)) {
                    options.productSaleDetails.forEach(function (productSaleReturnDetail) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(productSaleReturnDetail) && Commerce.ObjectExtensions.isNullOrUndefined(productSaleReturnDetail.entryType)) {
                            productSaleReturnDetail.entryType = Commerce.Proxy.Entities.BarcodeEntryMethodType.Selected;
                        }
                    });
                }
                return options;
            };
            ItemSaleOperationHandler.prototype.executeInternal = function (options) {
                var productSaleDetails = options.productSaleDetails || [];
                var cartLines = [];
                var productSaleDetailsToSell = [];
                var productSaleDetailsToReturn = [];
                productSaleDetails.forEach(function (detail) {
                    var product = detail.product;
                    var negativeQuantity = !Commerce.ObjectExtensions.isNullOrUndefined(detail.quantity) && detail.quantity < 0;
                    var qtyBecomesNegative = !Commerce.ObjectExtensions.isNullOrUndefined(product) && product.Behavior.IsNegativeQuantityAllowed;
                    if (negativeQuantity || qtyBecomesNegative) {
                        productSaleDetailsToReturn.push(detail);
                    }
                    else {
                        productSaleDetailsToSell.push(detail);
                    }
                });
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.ArrayExtensions.hasElements(productSaleDetailsToReturn)) {
                    var itemsToReturn = productSaleDetailsToReturn
                        .filter(function (productSaleReturnDetail) {
                        return !Commerce.ObjectExtensions.isNullOrUndefined(productSaleReturnDetail.product);
                    }).map(function (productSaleReturnDetail) {
                        return productSaleReturnDetail.product.ItemId;
                    }).toString();
                    Commerce.RetailLogger.operationItemSaleOperationHandlerReturnItems(itemsToReturn);
                    asyncQueue.enqueue(function () {
                        var returnOptions = {
                            customerId: Commerce.Session.instance.cart.CustomerId,
                            productReturnDetails: productSaleDetailsToReturn.map(function (detail) {
                                return { manualReturn: detail };
                            })
                        };
                        return asyncQueue.cancelOn(Operations.OperationsManager.instance.runOperation(Operations.RetailOperation.ReturnItem, returnOptions));
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(productSaleDetailsToSell)) {
                    var itemsToAdd = productSaleDetailsToSell
                        .filter(function (productSaleReturnDetail) {
                        return !Commerce.ObjectExtensions.isNullOrUndefined(productSaleReturnDetail.product);
                    }).map(function (productSaleReturnDetail) {
                        return productSaleReturnDetail.product.ItemId;
                    }).toString();
                    Commerce.RetailLogger.operationItemSaleOperationHandlerAddItems(itemsToAdd);
                    asyncQueue
                        .enqueue(function () {
                        var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                        return asyncQueue.cancelOn(reasonCodeQueue.run());
                    }).enqueue(function () {
                        var addSalesRepresentativeQueue = Commerce.ActivityHelper.getStartOfTransactionSalesRepresentativeAsyncQueue(Commerce.Session.instance.cart);
                        return Commerce.ApplicationContext.Instance.deviceConfiguration.IsSalesRepRequired
                            ? asyncQueue.cancelOn(addSalesRepresentativeQueue.run()) : addSalesRepresentativeQueue.run();
                    }).enqueue(function () {
                        Commerce.RetailLogger.operationItemSaleGetProductSaleDetailsStarted(options.correlationId);
                        var productDetailsQueue = Commerce.ActivityHelper.getProductSaleDetailsAsyncQueue(productSaleDetailsToSell);
                        return asyncQueue.cancelOn(productDetailsQueue.run()).done(function (getProductSaleDetailsResult) {
                            Commerce.RetailLogger.operationItemSaleGetProductSaleDetailsFinished(options.correlationId, true);
                        }).fail(function (errors) {
                            Commerce.RetailLogger.operationItemSaleGetProductSaleDetailsFinished(options.correlationId, false);
                        });
                    }).enqueue(function () {
                        Commerce.RetailLogger.operationItemSaleCreateCartLinesStarted(options.correlationId);
                        var cartLinesQueue = Commerce.ActivityHelper.createCartLinesAsyncQueue(productSaleDetailsToSell, cartLines);
                        return asyncQueue.cancelOn(cartLinesQueue.run()).done(function (createCartLinesResult) {
                            Commerce.RetailLogger.operationItemSaleCreateCartLinesFinished(options.correlationId, true);
                        }).fail(function (errors) {
                            Commerce.RetailLogger.operationItemSaleCreateCartLinesFinished(options.correlationId, false);
                        });
                    }).enqueue(function () {
                        var addCartLinesQueue = Commerce.ActivityHelper.addCartLinesAsyncQueue(cartLines, options.correlationId);
                        return asyncQueue.cancelOn(addCartLinesQueue.run());
                    });
                }
                return asyncQueue.run();
            };
            return ItemSaleOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.ItemSaleOperationHandler = ItemSaleOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var KitDisassemblyOperationHandler = (function (_super) {
            __extends(KitDisassemblyOperationHandler, _super);
            function KitDisassemblyOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            KitDisassemblyOperationHandler.prototype.execute = function (options) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw "Invalid options provided to KitDisassemblyOperationHandler.execute method. Options cannot be null or undefined.";
                }
                var kitTransLines = [
                    {
                        Quantity: options.quantity,
                        ProductId: options.kitProductId
                    }
                ];
                var kitTrans = {
                    Id: "",
                    TransactionTypeValue: Commerce.ExtensibleEnumerations.ExtensibleTransactionType.KitDisassembly.Value,
                    KitTransactionLines: kitTransLines
                };
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.inventoryManager.saveKitTransactionAsync(kitTrans);
                }).enqueue(function () {
                    if (Commerce.ArrayExtensions.hasElements(options.productSaleReturnDetails)) {
                        var itemSaleOptions = {
                            productSaleDetails: options.productSaleReturnDetails
                        };
                        var operationResult = _this.operationsManager.runOperationWithoutPermissionsCheck(Operations.RetailOperation.ItemSale, itemSaleOptions);
                        return asyncQueue.cancelOn(operationResult);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            return KitDisassemblyOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.KitDisassemblyOperationHandler = KitDisassemblyOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var LineDiscountAmountOperationHandler = (function (_super) {
            __extends(LineDiscountAmountOperationHandler, _super);
            function LineDiscountAmountOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LineDiscountAmountOperationHandler.prototype.execute = function (options) {
                return Operations.DiscountOperationsHelper.createLineDiscountQueue(options, false).run();
            };
            return LineDiscountAmountOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.LineDiscountAmountOperationHandler = LineDiscountAmountOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var LineDiscountPercentOperationHandler = (function (_super) {
            __extends(LineDiscountPercentOperationHandler, _super);
            function LineDiscountPercentOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LineDiscountPercentOperationHandler.prototype.execute = function (options) {
                return Operations.DiscountOperationsHelper.createLineDiscountQueue(options, true).run();
            };
            return LineDiscountPercentOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.LineDiscountPercentOperationHandler = LineDiscountPercentOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Utilities;
    (function (Utilities) {
        "use strict";
        var LogonHelper = (function () {
            function LogonHelper() {
            }
            LogonHelper.resourceOwnedPasswordLogon = function (correlationId, userId, password, operationId, doNotUpdateSession, credentials, grantType) {
                Commerce.RetailLogger.posAuthentication_CoreLogOnBegin(correlationId);
                return new Commerce.AsyncQueue().enqueue(function () {
                    return LogonHelper._authenticationProviderLogOn(userId, password, operationId, credentials, grantType)
                        .recoverOnFailure(function (errors) {
                        return LogonHelper._handleLogOnErrors(correlationId, errors, userId, operationId, doNotUpdateSession, credentials, grantType);
                    });
                }).enqueue(function () {
                    if (doNotUpdateSession === true) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    return LogonHelper.updateSessionWithUserTokenInformation();
                }).run().done(function () {
                    Commerce.RetailLogger.posAuthentication_CoreLogOnSuccess(correlationId);
                });
            };
            LogonHelper.updateSessionWithUserTokenInformation = function () {
                return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.USER).done(function (token) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(token)) {
                        Commerce.Session.instance.CurrentEmployee = null;
                        Commerce.Session.instance.isSessionStateValid = true;
                    }
                    else {
                        var employee = new Commerce.Proxy.Entities.EmployeeClass();
                        employee.Name = token.name;
                        employee.Permissions = {
                            Roles: []
                        };
                        Commerce.Session.instance.CurrentEmployee = employee;
                        Commerce.Session.instance.isSessionStateValid = true;
                    }
                });
            };
            LogonHelper.aadAuthenticateUser = function (correlationId, userId, password) {
                Commerce.RetailLogger.posAuthentication_AadLogonCoreFlowStart(correlationId);
                if (!Commerce.Config.aadEnabled) {
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_AADCONFIGURATION_ERROR.serverErrorCode)];
                    Commerce.RetailLogger.posAuthentication_AadLogonCoreFlowAadConfigurationError(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                var operationState = {
                    serviceUrl: Commerce.Config.retailServerUrl,
                    operatorId: userId,
                    password: password,
                    registerId: Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY),
                    deviceId: Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY),
                    currentOperation: null,
                    currentOperationStep: ko.observable(0),
                    forceActivate: false,
                    skipConnectivityOperation: false
                };
                var aadAuthenticationOperation = new Commerce.Operations.AADLogonOperation(operationState);
                return aadAuthenticationOperation.operationProcess()().done(function () {
                    Commerce.RetailLogger.posAuthentication_AadLogonCoreFlowSuccess(correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.posAuthentication_AadLogonCoreFlowFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                });
            };
            LogonHelper.logoffAuthenticationProviderAsync = function (ignoreErrors) {
                if (ignoreErrors === void 0) { ignoreErrors = false; }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return LogonHelper.handleAsyncResult(Commerce.Authentication.AuthenticationProviderManager.instance.logoff(Commerce.Authentication.AuthenticationProviderResourceType.USER), ignoreErrors);
                }).enqueue(function () {
                    return LogonHelper.handleAsyncResult(LogonHelper.updateSessionWithUserTokenInformation(), ignoreErrors);
                });
                return asyncQueue.run();
            };
            LogonHelper.exitAfterTransactionIfConfiguredAsync = function () {
                if (Commerce.ApplicationContext.Instance.deviceConfiguration.ExitAfterEachTransaction &&
                    (Commerce.ApplicationContext.Instance.deviceConfiguration.AutoExitMethodValue !== Commerce.Proxy.Entities.AutoExitMethodType.None)) {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    Commerce.RetailLogger.posAuthentication_AutomaticExitAfterEachTransaction(correlationId);
                    switch (Commerce.ApplicationContext.Instance.deviceConfiguration.AutoExitMethodValue) {
                        case Commerce.Proxy.Entities.AutoExitMethodType.Lock:
                            return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.LockTerminal, { correlationId: correlationId });
                        default:
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId)));
                    }
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            LogonHelper.isLoggedOn = function () {
                return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee);
            };
            LogonHelper.isLoggedOnForDeviceActivation = function () {
                var deviceToken = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY);
                return Commerce.StringExtensions.isNullOrWhitespace(deviceToken) && !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee);
            };
            LogonHelper.isLoggedOnForPOS = function () {
                var deviceToken = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY);
                return !Commerce.StringExtensions.isNullOrWhitespace(deviceToken) && !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee);
            };
            LogonHelper.isAadEmployeeLoginMode = function () {
                return Commerce.ApplicationContext.Instance.deviceConfiguration.EmployeeLogonTypeValue === Commerce.Proxy.Entities.EmployeeLogonType.AzureActiveDirectory;
            };
            LogonHelper.enableExtendedLogon = function (logonFunction) {
                Commerce.Peripherals.instance.barcodeScanner.enableAsync(function (barcode) {
                    logonFunction(barcode, Commerce.Authentication.Providers.CommerceUserAuthenticationProvider.EXTENDEDLOGON_BARCODE_GRANT_TYPE);
                });
                Commerce.Peripherals.instance.magneticStripeReader.enableAsync(function (cardInfo) {
                    logonFunction(cardInfo.CardNumber, Commerce.Authentication.Providers.CommerceUserAuthenticationProvider.EXTENDEDLOGON_MSR_GRANT_TYPE);
                }, Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.LOGON);
            };
            LogonHelper.disableExtendedLogon = function () {
                Commerce.Peripherals.instance.barcodeScanner.disableAsync();
                Commerce.Peripherals.instance.magneticStripeReader.disableAsync(Commerce.Peripherals.HardwareStation.LongPollingSupportedEventsSourceTypes.LOGON);
            };
            LogonHelper.handleAsyncResult = function (asyncResult, ignoreErrors) {
                if (ignoreErrors === void 0) { ignoreErrors = false; }
                if (ignoreErrors) {
                    return asyncResult.recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.logonHelperHandleAsyncResultFailed(Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                return asyncResult;
            };
            LogonHelper._authenticationProviderLogOn = function (userId, password, operationId, credentials, grantType) {
                var scope = [];
                var logonRequestParameters = {
                    OperationId: (operationId || "").toString(),
                    Credentials: credentials,
                    GrantType: grantType
                };
                var authenticationProvider;
                authenticationProvider = Commerce.Authentication.AuthenticationProviderManager.instance.getResourceOwnerPasswordGrantProvider(Commerce.Authentication.AuthenticationProviderResourceType.USER);
                return authenticationProvider.logon(userId, password, scope, logonRequestParameters);
            };
            LogonHelper._handleLogOnErrors = function (correlationId, errors, userId, operationId, doNotUpdateSession, credentials, grantType) {
                if (LogonHelper._isPasswordRequired(errors)) {
                    Commerce.RetailLogger.posAuthentication_CoreLogOnPasswordRequired(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    var getPasswordActivity_1 = new Commerce.Activities.GetPasswordActivity({});
                    var getPasswordAndRetryLogonQueue = new Commerce.AsyncQueue();
                    getPasswordAndRetryLogonQueue.enqueue(function () {
                        return getPasswordActivity_1.execute();
                    }).enqueue(function () {
                        if (getPasswordActivity_1.response) {
                            Commerce.RetailLogger.posAuthentication_CoreLogOnPasswordRequiredAndProvided(correlationId);
                            return LogonHelper._authenticationProviderLogOn(userId, getPasswordActivity_1.response.password, operationId, credentials, grantType);
                        }
                        else {
                            Commerce.RetailLogger.posAuthentication_CoreLogOnPasswordRequiredNotProvided(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        }
                    });
                    return getPasswordAndRetryLogonQueue.run();
                }
                else if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAUTHENTICATIONCREDENTIALS.serverErrorCode)) {
                    Commerce.RetailLogger.posAuthentication_CoreLogOnInvalidCredentials(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                else {
                    Commerce.RetailLogger.posAuthentication_CoreLogOnFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
            };
            LogonHelper._isPasswordRequired = function (errors) {
                return Commerce.ErrorHelper.hasError(errors, Commerce.Proxy.Entities.SecurityErrors[Commerce.Proxy.Entities.SecurityErrors.Microsoft_Dynamics_Commerce_Runtime_PasswordRequired]);
            };
            return LogonHelper;
        }());
        Utilities.LogonHelper = LogonHelper;
    })(Utilities = Commerce.Utilities || (Commerce.Utilities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var LogonHelper = Commerce.Utilities.LogonHelper;
        var LockTerminalOperationHandler = (function (_super) {
            __extends(LockTerminalOperationHandler, _super);
            function LockTerminalOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LockTerminalOperationHandler.prototype.execute = function (options) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options) || Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    options = { correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                }
                var currentEmployee = Commerce.Session.instance.CurrentEmployee;
                return Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                    var preTriggerOptions = {
                        correlationId: options.correlationId,
                        currentEmployee: currentEmployee
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreLockTerminal, preTriggerOptions);
                }, function () {
                    return _this._lockTerminal(options);
                }, function () {
                    var postTriggerOptions = {
                        correlationId: options.correlationId,
                        currentEmployee: currentEmployee
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostLockTerminal, postTriggerOptions);
                });
            };
            LockTerminalOperationHandler.prototype._lockTerminal = function (options) {
                if (LogonHelper.isAadEmployeeLoginMode()) {
                    Commerce.RetailLogger.posAuthentication_AadLogonLockBlockedLogoffInstead(options.correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(options.correlationId)));
                }
                else {
                    var lockCompleteAsyncResult_1 = new Commerce.VoidAsyncResult();
                    Commerce.RetailLogger.posAuthentication_CoreLockBegin(options.correlationId);
                    var operatorId_1 = Commerce.Session.instance.CurrentEmployee.StaffId;
                    Commerce.Utilities.LogonHelper.logoffAuthenticationProviderAsync(true).done(function () {
                        Commerce.RetailLogger.posAuthentication_CoreLockSuccess(options.correlationId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posAuthentication_CoreLockFailed(options.correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    }).always(function () {
                        Commerce.ViewModelAdapter.navigateToLockPage(operatorId_1);
                        lockCompleteAsyncResult_1.resolve();
                    });
                    return lockCompleteAsyncResult_1;
                }
            };
            return LockTerminalOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.LockTerminalOperationHandler = LockTerminalOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var LogonHelper = Commerce.Utilities.LogonHelper;
        var LogoffOperationHandler = (function (_super) {
            __extends(LogoffOperationHandler, _super);
            function LogoffOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LogoffOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options) || Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    options = { correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                }
                Commerce.RetailLogger.posAuthentication_LogOffOperationBegin(options.correlationId);
                var currentEmployee = Commerce.Session.instance.CurrentEmployee;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    Commerce.RetailLogger.posAuthentication_CoreLogOffBegin(options.correlationId);
                    return LogoffOperationHandler._clearPosSessionAsync(options.correlationId).done(function () {
                        Commerce.RetailLogger.posAuthentication_CoreLogOffSuccess(options.correlationId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posAuthentication_CoreLogOffFailed(options.correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    }).always(function () {
                        var deviceActivationInProgress = Commerce.Helpers.DeviceActivationHelper.isInDeviceActivationProcess();
                        if (!deviceActivationInProgress) {
                            Commerce.ViewModelAdapter.navigate(Commerce.ViewModelAdapter.getLoginViewName());
                        }
                    });
                }).enqueue(function () {
                    var options = { employee: currentEmployee };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostLogOff, options);
                });
                return asyncQueue.run()
                    .done(function () {
                    Commerce.Session.instance.CurrentEmployee = null;
                    Commerce.Session.instance.isSessionStateValid = false;
                    var setAppLanguageResult = Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName);
                    setAppLanguageResult.done(function () {
                        Commerce.RetailLogger.posAuthentication_LogOffOperationPostLogOffSuccess(options.correlationId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posAuthentication_LogOffOperationPostLogOffFailed(options.correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    });
                });
            };
            LogoffOperationHandler._clearPosSessionAsync = function (correlationId) {
                var criticalLogoffStepsQueueDoNotAlterUnlessStrictlyNecessary = new Commerce.AsyncQueue();
                criticalLogoffStepsQueueDoNotAlterUnlessStrictlyNecessary.enqueue(function () {
                    return LogonHelper.handleAsyncResult(Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuthenticationManagerName).endSessionAsync(correlationId), true);
                }).enqueue(function () {
                    return LogonHelper.logoffAuthenticationProviderAsync(true);
                });
                Commerce.RetailLogger.posAuthentication_CoreLogOffCriticalStepsBegin(correlationId);
                var criticalStepsAsyncResult = criticalLogoffStepsQueueDoNotAlterUnlessStrictlyNecessary.run();
                var logoffAndCloseHardwareResult = criticalStepsAsyncResult.done(function () {
                    Commerce.RetailLogger.posAuthentication_CoreLogOffCriticalStepsSuccess(correlationId);
                }).fail(function (errors) {
                    Commerce.RetailLogger.posAuthentication_CoreLogOffCriticalStepsFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                }).always(function () {
                    Commerce.NotificationHelper.resetBackgroundGetNotifications();
                    Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayTerminalClosedText()
                        .always(function () {
                        Commerce.Peripherals.instance.lineDisplay.closeDevice()
                            .always(function () {
                            Commerce.Session.instance.resetSession();
                            Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName);
                        });
                    });
                });
                return logoffAndCloseHardwareResult;
            };
            return LogoffOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.LogoffOperationHandler = LogoffOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var LoyaltyCardBalanceOperationHandler = (function (_super) {
            __extends(LoyaltyCardBalanceOperationHandler, _super);
            function LoyaltyCardBalanceOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LoyaltyCardBalanceOperationHandler.prototype.executePreTrigger = function (options) {
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreGetLoyaltyCardBalance, { loyaltyCardId: options.loyaltyCardId });
            };
            LoyaltyCardBalanceOperationHandler.prototype.executePostTrigger = function (options, result) {
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostGetLoyaltyCardBalance, { loyaltyCard: result.data });
            };
            LoyaltyCardBalanceOperationHandler.prototype.sanitizeOptions = function (options) {
                return options || { loyaltyCardId: Commerce.StringExtensions.EMPTY };
            };
            LoyaltyCardBalanceOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var loyaltyCardId = options.loyaltyCardId;
                var shouldGetLoyaltyCard = Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardId);
                var addToTransaction = !Commerce.ViewModelAdapter.isInView("PaymentView");
                if (shouldGetLoyaltyCard) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetLoyaltyCardActivity({
                            defaultLoyaltyCardId: Commerce.Session.instance.cart.LoyaltyCardId,
                            descriptionStringResourceId: "string_3270"
                        });
                        activity.responseHandler = function (response) {
                            loyaltyCardId = response ? response.loyaltyCardId : null;
                            if (Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardId)) {
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                            return asyncQueue.cancelOn(_this._displayLoyaltyCardBalanceAsync(correlationId, loyaltyCardId, false));
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this._displayLoyaltyCardBalanceAsync(correlationId, options.loyaltyCardId, addToTransaction));
                    });
                }
                return asyncQueue.run().map(function (result) {
                    return { canceled: result.canceled, data: result.canceled ? null : result.data.data };
                });
            };
            LoyaltyCardBalanceOperationHandler.prototype._displayLoyaltyCardBalanceAsync = function (correlationId, loyaltyCardId, addToTransaction) {
                var _this = this;
                var loyaltyCard;
                var displayLoyaltyCardQueue = new Commerce.AsyncQueue();
                var addLoyaltyCardToCart = false;
                displayLoyaltyCardQueue.enqueue(function () {
                    return _this.customerManager.getLoyaltyCardAsync(loyaltyCardId)
                        .done(function (result) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                            Commerce.NotificationHandler.displayErrorMessage(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDLOYALTYCARDNUMBER);
                            displayLoyaltyCardQueue.cancel();
                            return;
                        }
                        loyaltyCard = result;
                    });
                });
                displayLoyaltyCardQueue.enqueue(function () {
                    var preTriggerOptions = {
                        loyaltyCard: loyaltyCard
                    };
                    return displayLoyaltyCardQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreDisplayLoyaltyCardBalance, preTriggerOptions));
                });
                displayLoyaltyCardQueue.enqueue(function () {
                    var activity = new Commerce.Activities.GetLoyaltyCardBalanceActivity({
                        correlationId: correlationId,
                        loyaltyCard: loyaltyCard,
                        addToTransaction: addToTransaction
                    });
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            var activityResponse = activity.response;
                            loyaltyCardId = activityResponse.loyaltyCardId;
                            addLoyaltyCardToCart = true;
                        }
                    });
                }).enqueue(function () {
                    if (addLoyaltyCardToCart) {
                        var loyaltyOptions = {
                            loyaltyCard: { CardNumber: loyaltyCardId }
                        };
                        return displayLoyaltyCardQueue.cancelOn(Operations.OperationsManager.instance.runOperation(Operations.RetailOperation.LoyaltyRequest, loyaltyOptions));
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return displayLoyaltyCardQueue.run().map(function (result) { return { canceled: result.canceled, data: loyaltyCard }; });
            };
            return LoyaltyCardBalanceOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.LoyaltyCardBalanceOperationHandler = LoyaltyCardBalanceOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ManageChargesOperationHandler = (function (_super) {
            __extends(ManageChargesOperationHandler, _super);
            function ManageChargesOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ManageChargesOperationHandler.prototype.execute = function (options) {
                options = options || {};
                Commerce.ViewModelAdapter.navigate("ManageChargesView", options);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return ManageChargesOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ManageChargesOperationHandler = ManageChargesOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ManageSafesOperationHandler = (function (_super) {
            __extends(ManageSafesOperationHandler, _super);
            function ManageSafesOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ManageSafesOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                if (!Commerce.ApplicationContext.Instance.channelConfiguration.UseAdvancedCashManagement) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MANAGE_SAFES_NOT_ENABLED_IN_HQ)]);
                }
                var manageSafesQueue = new Commerce.AsyncQueue();
                manageSafesQueue.enqueue(function () {
                    return _this._getStoreSafeAsync().done(function (storeSafes) {
                        Commerce.RetailLogger.getStoreSafesSucceeded(storeSafes.length.toString(), options.correlationId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.getStoreSafesFailed(Commerce.ErrorHelper.getErrorMessages(errors), options.correlationId);
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                }).enqueue(function (storeSafes) {
                    var context = {
                        storeSafes: storeSafes
                    };
                    var activity = new Commerce.Activities.ManageSafeActivity(context);
                    return manageSafesQueue.cancelOn(activity.execute());
                });
                return manageSafesQueue.run();
            };
            ManageSafesOperationHandler.prototype._getStoreSafeAsync = function () {
                return this.storeOperationsManager.getStoreSafesAsync();
            };
            return ManageSafesOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ManageSafesOperationHandler = ManageSafesOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ManageShiftsOperationHandler = (function (_super) {
            __extends(ManageShiftsOperationHandler, _super);
            function ManageShiftsOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ManageShiftsOperationHandler.prototype.execute = function (options) {
                options = options || {};
                Commerce.ViewModelAdapter.navigate("ManageShiftsView");
                return Commerce.VoidAsyncResult.createResolved();
            };
            return ManageShiftsOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ManageShiftsOperationHandler = ManageShiftsOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OpenCashDrawerOperationHandler = (function (_super) {
            __extends(OpenCashDrawerOperationHandler, _super);
            function OpenCashDrawerOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OpenCashDrawerOperationHandler.prototype.execute = function (options) {
                options = options || {};
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                var nonSalesTransaction = { Id: Commerce.StringExtensions.EMPTY };
                asyncQueue.enqueue(function () {
                    nonSalesTransaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.OpenDrawer.Value;
                    nonSalesTransaction.ShiftId = Commerce.Session.instance.Shift.ShiftId.toString();
                    nonSalesTransaction.ShiftTerminalId = Commerce.Session.instance.Shift.TerminalId;
                    var reasonCodesQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ nonSalesTransaction: nonSalesTransaction }, function (reasonCodeContext) {
                        var request = new Commerce.CreateNonSalesTransactionServiceRequest(correlationId, reasonCodeContext.nonSalesTransaction);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                    }, Commerce.Proxy.Entities.ReasonCodeSourceType.OpenDrawer);
                    return asyncQueue.cancelOn(reasonCodesQueue.run());
                }).enqueue(function () {
                    return asyncQueue.cancelOn(Operations.HardwareStationHelper.selectActiveHardwareStationAsync(true));
                }).enqueue(function () {
                    var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                }).enqueue(function () {
                    var printReceiptsAsyncQueue = new Commerce.AsyncQueue();
                    printReceiptsAsyncQueue.enqueue(function () {
                        var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                        return salesOrderManager.getReceiptsForPrintAsync(nonSalesTransaction.Id, false, Commerce.Proxy.Entities.ReceiptType.OpenDrawer, false, Commerce.Session.instance.Shift.ShiftId, Commerce.Session.instance.Shift.TerminalId, null, null, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                    }).enqueue(function (receipts) {
                        var receiptActivity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts });
                        return receiptActivity.execute().fail(function (errors) {
                            Commerce.RetailLogger.openCashDraswerOperationFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        });
                    });
                    return printReceiptsAsyncQueue.run().recoverOnFailure(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    });
                });
                return asyncQueue.run().always(function () {
                    Operations.HardwareStationHelper.clearSelection();
                });
            };
            return OpenCashDrawerOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.OpenCashDrawerOperationHandler = OpenCashDrawerOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OverrideTaxOperationsHelper = (function () {
            function OverrideTaxOperationsHelper() {
            }
            OverrideTaxOperationsHelper.createOverrideTaxFromListQueue = function (overrideType, overrideTaxContext) {
                var taxOverrides = [];
                var taxOverride = null;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var getTaxOverridesServiceRequest = new Commerce.GetTaxOverridesServiceRequest(correlationId, overrideType);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTaxOverridesServiceRequest))
                        .done(function (result) {
                        taxOverrides = taxOverrides.concat(result.data.taxOverrides);
                    });
                }).enqueue(function () {
                    if (!Commerce.ArrayExtensions.hasElements(taxOverrides)) {
                        var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NO_TAX_OVERRIDE_GROUP_CONFIGURED);
                        return Commerce.VoidAsyncResult.createRejected([error]);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var activity = new Commerce.Activities.SelectTaxOverrideActivity({ overrideType: overrideType, taxOverrides: taxOverrides });
                    return activity.execute().done(function () {
                        if (!activity.response) {
                            asyncQueue.cancel();
                            return;
                        }
                        taxOverride = activity.response.taxOverride;
                    });
                }).enqueue(function () {
                    if (overrideType === Commerce.Proxy.Entities.TaxOverrideBy.Line) {
                        var options = { cartLine: overrideTaxContext, taxOverride: taxOverride };
                        return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.OverrideTaxLine, options);
                    }
                    else {
                        var request = new Commerce.OverrideTransactionTaxOperationRequest(correlationId, taxOverride.Code);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                    }
                });
                return asyncQueue;
            };
            return OverrideTaxOperationsHelper;
        }());
        Operations.OverrideTaxOperationsHelper = OverrideTaxOperationsHelper;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OverrideLineProductTaxFromListOperationHandler = (function (_super) {
            __extends(OverrideLineProductTaxFromListOperationHandler, _super);
            function OverrideLineProductTaxFromListOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OverrideLineProductTaxFromListOperationHandler.prototype.execute = function (options) {
                options = options || { cartLine: undefined };
                return Operations.OverrideTaxOperationsHelper.createOverrideTaxFromListQueue(Commerce.Proxy.Entities.TaxOverrideBy.Line, options.cartLine).run();
            };
            return OverrideLineProductTaxFromListOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.OverrideLineProductTaxFromListOperationHandler = OverrideLineProductTaxFromListOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OverrideLineProductTaxOperationHandler = (function (_super) {
            __extends(OverrideLineProductTaxOperationHandler, _super);
            function OverrideLineProductTaxOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OverrideLineProductTaxOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = {
                    cart: Commerce.Session.instance.cart,
                    cartLine: options.cartLine,
                    taxOverride: options.taxOverride
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreOverrideLineProductTax, preTriggerOptions);
            };
            OverrideLineProductTaxOperationHandler.prototype.executePostTrigger = function (options, result) {
                var updatedCart = Commerce.Session.instance.cart;
                var updatedCartLine = Commerce.ArrayExtensions.firstOrUndefined(updatedCart.CartLines, function (cartLine) {
                    return cartLine.LineId === options.cartLine.LineId;
                });
                var postTriggerOptions = {
                    cart: updatedCart,
                    cartLine: updatedCartLine,
                    taxOverride: options.taxOverride
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostOverrideLineProductTax, postTriggerOptions);
            };
            OverrideLineProductTaxOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { taxOverride: undefined, cartLine: undefined };
                options.taxOverride = options.taxOverride || new Commerce.Proxy.Entities.TaxOverrideClass({ Code: Commerce.StringExtensions.EMPTY });
                return options;
            };
            OverrideLineProductTaxOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                options.cartLine = new Commerce.Proxy.Entities.CartLineClass(options.cartLine);
                options.cartLine.TaxOverrideCode = options.taxOverride.Code;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: [options.cartLine] }, function (c) { return _this.cartManager.updateCartLinesOnCartAsync(c.cartLines); }, Commerce.Proxy.Entities.ReasonCodeSourceType.LineItemTaxChange).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            return OverrideLineProductTaxOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.OverrideLineProductTaxOperationHandler = OverrideLineProductTaxOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OverrideTransactionTaxFromListOperationHandler = (function (_super) {
            __extends(OverrideTransactionTaxFromListOperationHandler, _super);
            function OverrideTransactionTaxFromListOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OverrideTransactionTaxFromListOperationHandler.prototype.execute = function (options) {
                options = options || { cart: Commerce.Session.instance.cart };
                return Operations.OverrideTaxOperationsHelper.createOverrideTaxFromListQueue(Commerce.Proxy.Entities.TaxOverrideBy.Cart, options.cart).run();
            };
            return OverrideTransactionTaxFromListOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.OverrideTransactionTaxFromListOperationHandler = OverrideTransactionTaxFromListOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OverrideTransactionTaxOperationHandler = (function (_super) {
            __extends(OverrideTransactionTaxOperationHandler, _super);
            function OverrideTransactionTaxOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OverrideTransactionTaxOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = {
                    cart: options.cart,
                    taxOverride: options.taxOverride
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreOverrideTransactionTax, preTriggerOptions);
            };
            OverrideTransactionTaxOperationHandler.prototype.executePostTrigger = function (options, result) {
                var postTriggerOptions = {
                    cart: Commerce.Session.instance.cart,
                    taxOverride: options.taxOverride
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostOverrideTransactionTax, postTriggerOptions);
            };
            OverrideTransactionTaxOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { taxOverride: undefined, cart: undefined, correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                options.taxOverride = options.taxOverride || new Commerce.Proxy.Entities.TaxOverrideClass({ Code: Commerce.StringExtensions.EMPTY });
                return options;
            };
            OverrideTransactionTaxOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                var newCart = new Commerce.Proxy.Entities.CartClass({ Id: options.cart.Id, TaxOverrideCode: options.taxOverride.Code, ReasonCodeLines: options.cart.ReasonCodeLines });
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: newCart }, function (c) { return _this.cartManager.createOrUpdateCartAsync(c.cart); }, Commerce.Proxy.Entities.ReasonCodeSourceType.TransactionTaxChange).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            return OverrideTransactionTaxOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.OverrideTransactionTaxOperationHandler = OverrideTransactionTaxOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var HardwareStationOperationType;
        (function (HardwareStationOperationType) {
            HardwareStationOperationType[HardwareStationOperationType["Pair"] = 0] = "Pair";
            HardwareStationOperationType[HardwareStationOperationType["Unpair"] = 1] = "Unpair";
            HardwareStationOperationType[HardwareStationOperationType["Enable"] = 2] = "Enable";
            HardwareStationOperationType[HardwareStationOperationType["Disable"] = 3] = "Disable";
        })(HardwareStationOperationType = Operations.HardwareStationOperationType || (Operations.HardwareStationOperationType = {}));
        var PairHardwareStationOperationHandler = (function (_super) {
            __extends(PairHardwareStationOperationHandler, _super);
            function PairHardwareStationOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PairHardwareStationOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { hardwareStation: undefined, operation: undefined };
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.operation)) {
                    Commerce.RetailLogger.pairHardwareStationOperationOptionsNotSent(correlationId);
                }
                if (Commerce.Peripherals.instance && Commerce.Peripherals.instance.lineDisplay && Commerce.Peripherals.instance.lineDisplay.isActive) {
                    return Commerce.VoidAsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_CHANGE_ERROR_LINE_DISPLAY_ACTIVE)
                    ]);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                if (options.operation === HardwareStationOperationType.Pair) {
                    var tokenResult_1;
                    var pairingResult_1;
                    asyncQueue
                        .enqueue(function () {
                        return _this.authenticationManager.createHardwareStationToken()
                            .done(function (result) { tokenResult_1 = result; });
                    }).enqueue(function () {
                        var pairingRequest = {
                            DeviceNumber: Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY),
                            HardwareStationToken: tokenResult_1.HardwareStationToken
                        };
                        return Commerce.Peripherals.HardwareStation.HardwareStationContext.instance
                            .security(options.hardwareStation)
                            .execute("Pair", pairingRequest)
                            .done(function (result) { pairingResult_1 = result; });
                    }).enqueue(function () {
                        if (!pairingResult_1) {
                            var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAIRINGERROR);
                            return Commerce.VoidAsyncResult.createRejected([error]);
                        }
                        Commerce.HardwareStationEndpointStorage.setHardwareStationToken(options.hardwareStation.recordId, options.hardwareStation.url, tokenResult_1.PairingKey);
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        return null;
                    });
                }
                else if (options.operation === HardwareStationOperationType.Unpair) {
                    asyncQueue.enqueue(function () {
                        return Commerce.Peripherals.HardwareStation.HardwareStationContext.instance
                            .security(options.hardwareStation)
                            .execute("Unpair", null)
                            .always(function () {
                            Commerce.HardwareStationEndpointStorage.clearActiveHardwareStation(correlationId);
                            Commerce.HardwareStationEndpointStorage.setHardwareStationToken(options.hardwareStation.recordId, options.hardwareStation.url, Commerce.StringExtensions.EMPTY);
                        });
                    });
                }
                else {
                    var isHardwareStationEnabled_1 = options.operation === HardwareStationOperationType.Enable;
                    asyncQueue.enqueue(function () {
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_FEATURE_ENABLE, JSON.stringify(isHardwareStationEnabled_1));
                        return Commerce.AsyncResult.createResolved();
                    });
                }
                return asyncQueue.run();
            };
            return PairHardwareStationOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.PairHardwareStationOperationHandler = PairHardwareStationOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PickingAndReceivingOperationHandler = (function (_super) {
            __extends(PickingAndReceivingOperationHandler, _super);
            function PickingAndReceivingOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PickingAndReceivingOperationHandler.prototype.execute = function (options) {
                options = options || {};
                Commerce.ViewModelAdapter.navigate("SearchPickingAndReceivingView");
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return PickingAndReceivingOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.PickingAndReceivingOperationHandler = PickingAndReceivingOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PickupAllOperationHandler = (function (_super) {
            __extends(PickupAllOperationHandler, _super);
            function PickupAllOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PickupAllOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {
                    cart: undefined,
                    pickupDate: undefined,
                    storeAddress: undefined,
                    storeNumber: undefined,
                    correlationId: ""
                };
                options.cart = options.cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
                options.pickupDate = options.pickupDate || Commerce.DateExtensions.getDate();
                options.storeNumber = options.storeNumber || Commerce.StringExtensions.EMPTY;
                options.storeAddress = options.storeAddress || null;
                Commerce.DateExtensions.setTimeToLastSecondOfDay(options.pickupDate);
                var cart = options.cart;
                var cartLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.DeliveryHelper.validateCartForShippingOrPickup(cart);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validatePickupProperties(options.storeNumber);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.getStorePickupAddress(options.storeNumber, options.storeAddress)
                        .done(function (address) {
                        options.storeAddress = address;
                    });
                }).enqueue(function () {
                    var newCart = {
                        Id: cart.Id,
                        DeliveryMode: Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode,
                        ReasonCodeLines: cart.ReasonCodeLines,
                        RequestedDeliveryDate: options.pickupDate,
                        ShippingAddress: options.storeAddress,
                        DeliveryModeChargeAmount: 0
                    };
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: newCart }, function (c) { return _this.cartManager.createOrUpdateCartAsync(c.cart); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                }).enqueue(function () {
                    cartLines = Commerce.ObjectExtensions.clone(Commerce.CartHelper.getNonReturnCartLines(cart.CartLines));
                    Commerce.DeliveryHelper.setDeliveryForCartLines(cartLines, 0, Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode, options.pickupDate, options.storeAddress, options.storeNumber);
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLines }, function (c) { return _this.cartManager.updateCartLinesOnCartAsync(c.cartLines); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                });
                return asyncQueue.run();
            };
            return PickupAllOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.PickupAllOperationHandler = PickupAllOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PickupSelectedOperationHandler = (function (_super) {
            __extends(PickupSelectedOperationHandler, _super);
            function PickupSelectedOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PickupSelectedOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {
                    cart: undefined,
                    cartLines: undefined,
                    pickupDate: undefined,
                    storeAddress: undefined,
                    storeNumber: undefined
                };
                options.cart = options.cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
                options.pickupDate = options.pickupDate || Commerce.DateExtensions.getDate();
                options.cartLines = options.cartLines || [];
                options.storeNumber = options.storeNumber || Commerce.StringExtensions.EMPTY;
                options.storeAddress = options.storeAddress || null;
                Commerce.DateExtensions.setTimeToLastSecondOfDay(options.pickupDate);
                var cart = options.cart;
                var cartLines = Commerce.ObjectExtensions.clone(options.cartLines);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.DeliveryHelper.validateCartForShippingOrPickup(cart);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validateCartLinesForShippingOrPickup(cart, cartLines);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validatePickupProperties(options.storeNumber);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.getStorePickupAddress(options.storeNumber, options.storeAddress)
                        .done(function (address) {
                        options.storeAddress = address;
                    });
                }).enqueue(function () {
                    var newCart = {
                        Id: cart.Id,
                        DeliveryMode: Commerce.StringExtensions.EMPTY,
                        ReasonCodeLines: cart.ReasonCodeLines,
                        RequestedDeliveryDate: null,
                        ShippingAddress: null,
                        DeliveryModeChargeAmount: 0
                    };
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: newCart }, function (c) { return _this.cartManager.createOrUpdateCartAsync(c.cart); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                }).enqueue(function () {
                    Commerce.DeliveryHelper.setDeliveryForCartLines(cartLines, 0, Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode, options.pickupDate, options.storeAddress, options.storeNumber);
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLines }, function (c) { return _this.cartManager.updateCartLinesOnCartAsync(c.cartLines); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                });
                return asyncQueue.run();
            };
            return PickupSelectedOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.PickupSelectedOperationHandler = PickupSelectedOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PriceCheckOperationHandler = (function (_super) {
            __extends(PriceCheckOperationHandler, _super);
            function PriceCheckOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PriceCheckOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { product: undefined, quantity: undefined, barcodeId: undefined, barcode: undefined };
                var cart = Commerce.Session.instance.cart;
                var customerId = cart.CustomerId;
                var loyaltyCardId = cart.LoyaltyCardId;
                var product = options.product;
                var productId = options.product.RecordId;
                var barcode = options.barcode;
                if (Commerce.ObjectExtensions.isNullOrUndefined(customerId)) {
                    customerId = "";
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var productPrice = null;
                asyncQueue.enqueue(function () {
                    return _this.productManager.getDiscountedProductPriceAsync(productId, customerId, product.DefaultUnitOfMeasure, loyaltyCardId, cart.AffiliationLines).done(function (result) {
                        productPrice = result;
                    });
                });
                asyncQueue.enqueue(function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(barcode) &&
                        product.AdjustedPrice === 0.00 &&
                        productPrice.CustomerContextualPrice === 0.00 &&
                        barcode.BarcodePrice > 0.00) {
                        productPrice.CustomerContextualPrice = barcode.BarcodePrice;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                asyncQueue.enqueue(function () {
                    var triggerOptions = {
                        barcodeId: options.barcodeId,
                        customerId: customerId,
                        product: product,
                        productPrice: productPrice,
                        quantity: options.quantity
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostPriceCheck, triggerOptions);
                });
                return asyncQueue.run().map(function () {
                    return { canceled: false, data: productPrice };
                });
            };
            return PriceCheckOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.PriceCheckOperationHandler = PriceCheckOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PriceOverrideOperationHandler = (function (_super) {
            __extends(PriceOverrideOperationHandler, _super);
            function PriceOverrideOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PriceOverrideOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart, cartLinePrices: options.cartLinePrices };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PrePriceOverride, preTriggerOptions);
            };
            PriceOverrideOperationHandler.prototype.executePostTrigger = function (options, result) {
                var lineIds = options.cartLinePrices.map(function (cartLinePrice) {
                    return cartLinePrice.cartLine.LineId;
                });
                var updatedCartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, lineIds);
                var postTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: updatedCartLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostPriceOverride, postTriggerOptions);
            };
            PriceOverrideOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { cartLinePrices: undefined };
                return options;
            };
            PriceOverrideOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(options.cartLinePrices)) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)]);
                }
                var updatedCartLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                options.cartLinePrices.forEach(function (cp) {
                    asyncQueue.enqueue(function () {
                        var cartLine = new Commerce.Proxy.Entities.CartLineClass(cp.cartLine);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(cp.price)) {
                            cartLine.Price = cp.price;
                            updatedCartLines.push(cartLine);
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        var activityContext = { cartLine: cartLine };
                        var activity = new Commerce.Activities.GetPriceOverrideActivity(activityContext);
                        activity.responseHandler = function (response) {
                            var newPrice = response.newPrice;
                            if (Commerce.ObjectExtensions.isNullOrUndefined(newPrice) || isNaN(newPrice)) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_PRICE_NOT_A_NUMBER)]);
                            }
                            var errors = PriceOverrideOperationHandler.validate(cartLine, newPrice);
                            if (Commerce.ArrayExtensions.hasElements(errors)) {
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                            cartLine.Price = newPrice;
                            updatedCartLines.push(cartLine);
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                });
                asyncQueue.enqueue(function () {
                    var priceOverrideQueue = _this.priceOverrideAsyncQueue(updatedCartLines);
                    return asyncQueue.cancelOn(priceOverrideQueue.run());
                });
                return asyncQueue.run();
            };
            PriceOverrideOperationHandler.validate = function (cartLine, newPrice) {
                var errors = [];
                if (isNaN(newPrice)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_PRICE_NOT_A_NUMBER));
                    return errors;
                }
                var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                var allowPriceOverrideToZero = !Commerce.ObjectExtensions.isNullOrUndefined(product.Behavior.IsZeroSalePriceAllowed) && product.Behavior.IsZeroSalePriceAllowed;
                if (newPrice < 0) {
                    if (allowPriceOverrideToZero) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_PRICE_CANNOT_BE_NEGATIVE));
                    }
                    else {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_PRICE_MUST_BE_POSITIVE));
                    }
                    return errors;
                }
                if (!Commerce.Helpers.CurrencyHelper.isValidAmount(newPrice)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_INVALID_PRICE));
                    return errors;
                }
                if (newPrice === 0) {
                    if (!allowPriceOverrideToZero) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_PRICE_CANNOT_BE_ZERO));
                        return errors;
                    }
                }
                var originalPrice = Commerce.ObjectExtensions.isNullOrUndefined(cartLine.OriginalPrice) ? cartLine.Price : cartLine.OriginalPrice;
                if (!Operations.OperationsManager.instance.isManagerLoggedOn) {
                    if ((newPrice > originalPrice) &&
                        (Commerce.Session.instance.CurrentEmployee.Permissions.AllowPriceOverride === Commerce.Proxy.Entities.EmployeePriceOverrideType.LowerOnly)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_ONLY_LOWER_AMOUNTS_ALLOWED));
                        return errors;
                    }
                    if ((newPrice < originalPrice) &&
                        (Commerce.Session.instance.CurrentEmployee.Permissions.AllowPriceOverride === Commerce.Proxy.Entities.EmployeePriceOverrideType.HigherOnly)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_ONLY_HIGHER_AMOUNTS_ALLOWED));
                        return errors;
                    }
                    if (Commerce.Session.instance.CurrentEmployee.Permissions.AllowPriceOverride === Commerce.Proxy.Entities.EmployeePriceOverrideType.NotAllowed) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_NONE_ALLOWED));
                        return errors;
                    }
                }
                if ((newPrice > originalPrice) &&
                    (product.Behavior.KeyInPriceValue === Commerce.Proxy.Entities.KeyInPriceRestriction.LowerOrEqualPrice)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_ONLY_LOWER_OR_EQUAL_AMOUNTS_ALLOWED));
                    return errors;
                }
                if ((newPrice < originalPrice) &&
                    (product.Behavior.KeyInPriceValue === Commerce.Proxy.Entities.KeyInPriceRestriction.HigherOrEqualPrice)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_ONLY_HIGHER_OR_EQUAL_AMOUNTS_ALLOWED));
                    return errors;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration.MaximumPrice)
                    && (Commerce.ApplicationContext.Instance.deviceConfiguration.MaximumPrice !== 0)
                    && (Commerce.ApplicationContext.Instance.deviceConfiguration.MaximumPrice < newPrice)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_PRICE_EXCEEDS_MAXIMUM_DEVICE_PRICE));
                }
                return errors.length === 0 ? null : errors;
            };
            PriceOverrideOperationHandler.prototype.priceOverrideAsyncQueue = function (cartLines) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                cartLines.forEach(function (cartLine) {
                    asyncQueue.enqueue(function () {
                        var updateCartBeforeOverride = !Commerce.StringExtensions.isNullOrWhitespace(_this.applicationContext.deviceConfiguration.OverridePrice);
                        var retryQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: [cartLine] }, function (context) {
                            var updateAsyncQueue = new Commerce.AsyncQueue();
                            if (updateCartBeforeOverride) {
                                updateAsyncQueue.enqueue(function () {
                                    return _this.cartManager.updateCartLinesOnCartAsync(context.cartLines);
                                });
                            }
                            updateCartBeforeOverride = true;
                            updateAsyncQueue.enqueue(function () {
                                return _this.cartManager.priceOverrideAsync(context.cartLines[0]);
                            });
                            return updateAsyncQueue.run();
                        }, Commerce.Proxy.Entities.ReasonCodeSourceType.OverridePrice);
                        return asyncQueue.cancelOn(retryQueue.run());
                    });
                });
                return asyncQueue;
            };
            return PriceOverrideOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.PriceOverrideOperationHandler = PriceOverrideOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PrintXOperationHandler = (function (_super) {
            __extends(PrintXOperationHandler, _super);
            function PrintXOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PrintXOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { shift: undefined };
                options.shift = options.shift || Commerce.Session.instance.Shift;
                var asyncQueue = new Commerce.AsyncQueue();
                var receipts = null;
                asyncQueue.enqueue(function () {
                    return _this.storeOperationsManager.getXReport(options.shift.ShiftId, options.shift.TerminalId, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId).done(function (receipt) {
                        receipts = Commerce.ObjectExtensions.isNullOrUndefined(receipt) ? [] : [receipt];
                    });
                });
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts, notifyOnNoPrintableReceipts: true });
                    return activity.execute();
                });
                return asyncQueue.run();
            };
            return PrintXOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.PrintXOperationHandler = PrintXOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PrintZOperationHandler = (function (_super) {
            __extends(PrintZOperationHandler, _super);
            function PrintZOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PrintZOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { notifyOnNoPrintableReceipts: false };
                var asyncQueue = new Commerce.AsyncQueue();
                var receipts = null;
                asyncQueue.enqueue(function () {
                    return _this.storeOperationsManager.getZReport(Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId)
                        .done(function (zreport) {
                        receipts = [zreport];
                    });
                });
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts, notifyOnNoPrintableReceipts: options.notifyOnNoPrintableReceipts });
                    return activity.execute();
                });
                return asyncQueue.run();
            };
            return PrintZOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.PrintZOperationHandler = PrintZOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ProductCommentOperationHandler = (function (_super) {
            __extends(ProductCommentOperationHandler, _super);
            function ProductCommentOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ProductCommentOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cart: Commerce.Session.instance.cart, cartLineComments: [], customerAccountDepositLineComment: null };
                options.cart = options.cart || Commerce.Session.instance.cart;
                options.cartLineComments = options.cartLineComments || [];
                options.customerAccountDepositLineComment = options.customerAccountDepositLineComment || null;
                var cart = options.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup
                        || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Return)
                    || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Cancellation) {
                    return Commerce.VoidAsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMER_ORDER_OPERATION_PICKUP_CANCEL_RETURN_NOT_SUPPORTED)
                    ]);
                }
                if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.IncomeExpense)) {
                    return Commerce.VoidAsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_INCOME_EXPENSE_TRANSACTION)
                    ]);
                }
                if (Commerce.CartHelper.isCartType(options.cart, Commerce.Proxy.Entities.CartType.AccountDeposit)) {
                    return this.executeForCustomerAccountDeposit(options);
                }
                var cartLinesWithoutComment = [];
                var cartLinesToUpdate = [];
                options.cartLineComments.forEach(function (cartLineComment) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(cartLineComment.comment)) {
                        cartLinesWithoutComment.push(cartLineComment.cartLine);
                    }
                    else {
                        cartLinesToUpdate.push({
                            LineId: cartLineComment.cartLine.LineId,
                            Quantity: cartLineComment.cartLine.Quantity,
                            Comment: cartLineComment.comment
                        });
                    }
                });
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.ArrayExtensions.hasElements(cartLinesWithoutComment)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetCartLineCommentsActivity({ cartLines: cartLinesWithoutComment });
                        activity.responseHandler = function (response) {
                            var updatedCartLines = cartLinesToUpdate.concat(cartLinesWithoutComment.map(function (cartLine, index) {
                                return {
                                    LineId: cartLine.LineId,
                                    Quantity: cartLine.Quantity,
                                    Comment: response.comments[index]
                                };
                            }));
                            return _this.cartManager.updateCartLinesOnCartAsync(updatedCartLines);
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                else if (Commerce.ArrayExtensions.hasElements(cartLinesToUpdate)) {
                    asyncQueue.enqueue(function () {
                        return _this.cartManager.updateCartLinesOnCartAsync(cartLinesToUpdate);
                    });
                }
                return asyncQueue.run();
            };
            ProductCommentOperationHandler.prototype.executeForCustomerAccountDeposit = function (options) {
                var _this = this;
                var setCustomerAccountDepositLineComment = function (comment) {
                    var customerAccountDepositLine = {
                        Amount: options.customerAccountDepositLineComment.line.Amount,
                        CustomerAccount: options.customerAccountDepositLineComment.line.CustomerAccount,
                        Comment: comment
                    };
                    return _this.cartManager.addCustomerAccountDepositLinesToCartAsync([customerAccountDepositLine]);
                };
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.customerAccountDepositLineComment)) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(options.customerAccountDepositLineComment.comment)) {
                        asyncQueue.enqueue(function () {
                            var activity = new Commerce.Activities.GetCustomerAccountDepositLineCommentsActivity({ customerAccountDepositLines: [options.customerAccountDepositLineComment.line] });
                            activity.responseHandler = function (response) {
                                return setCustomerAccountDepositLineComment(response.comments[0]);
                            };
                            return activity.execute().done(function () {
                                if (!activity.response) {
                                    asyncQueue.cancel();
                                    return;
                                }
                            });
                        });
                    }
                    else {
                        return setCustomerAccountDepositLineComment(options.customerAccountDepositLineComment.comment);
                    }
                }
                return asyncQueue.run();
            };
            return ProductCommentOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ProductCommentOperationHandler = ProductCommentOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var RecalculateChargesOperationHandler = (function (_super) {
            __extends(RecalculateChargesOperationHandler, _super);
            function RecalculateChargesOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RecalculateChargesOperationHandler.prototype.execute = function (options) {
                return this.cartManager.resetAllChargesAsync(Commerce.Session.instance.cart.Id)
                    .map(function (result) { return { canceled: false, data: result }; });
            };
            return RecalculateChargesOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.RecalculateChargesOperationHandler = RecalculateChargesOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var RecalculateCustomerOrderOperationHandler = (function (_super) {
            __extends(RecalculateCustomerOrderOperationHandler, _super);
            function RecalculateCustomerOrderOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RecalculateCustomerOrderOperationHandler.prototype.execute = function (options) {
                options = options || { cart: undefined };
                options.cart = options.cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
                if (Commerce.StringExtensions.isNullOrWhitespace(options.cart.Id)
                    || !Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(options.cart)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY)]);
                }
                return this.cartManager.recalculateOrderAsync(options.cart.Id).map(function (cart) { return { canceled: false, data: cart }; });
            };
            return RecalculateCustomerOrderOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.RecalculateCustomerOrderOperationHandler = RecalculateCustomerOrderOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var RecallCustomerOrderOperationHandler = (function (_super) {
            __extends(RecallCustomerOrderOperationHandler, _super);
            function RecallCustomerOrderOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RecallCustomerOrderOperationHandler.prototype.execute = function (options) {
                options = options || {};
                Commerce.ViewModelAdapter.navigate("SearchOrdersView", options);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return RecallCustomerOrderOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.RecallCustomerOrderOperationHandler = RecallCustomerOrderOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var RecallTransactionOperationHandler = (function (_super) {
            __extends(RecallTransactionOperationHandler, _super);
            function RecallTransactionOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RecallTransactionOperationHandler.prototype.execute = function (options) {
                options = options || {};
                Commerce.ViewModelAdapter.navigate("ResumeCartView");
                return Commerce.VoidAsyncResult.createResolved();
            };
            return RecallTransactionOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.RecallTransactionOperationHandler = RecallTransactionOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var RemoveAffiliationFromCustomerOperationHandler = (function (_super) {
            __extends(RemoveAffiliationFromCustomerOperationHandler, _super);
            function RemoveAffiliationFromCustomerOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RemoveAffiliationFromCustomerOperationHandler.prototype.execute = function (options) {
                options = options || { affiliationsToKeep: undefined, customer: undefined };
                return this.updateCustomerAffiliations(options.customer, options.affiliationsToKeep)
                    .map(function (customer) {
                    return { canceled: false, data: customer };
                });
            };
            return RemoveAffiliationFromCustomerOperationHandler;
        }(Operations.UpdateCustomerAffiliationsOperationHandlerBase));
        Operations.RemoveAffiliationFromCustomerOperationHandler = RemoveAffiliationFromCustomerOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var RemoveCouponsOperationHandler = (function (_super) {
            __extends(RemoveCouponsOperationHandler, _super);
            function RemoveCouponsOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RemoveCouponsOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {};
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var activity = new Commerce.Activities.SelectCouponCodesActivity({ cart: Commerce.Session.instance.cart });
                    activity.responseHandler = function (response) {
                        return asyncQueue.cancelOn(_this.removeCouponCodes(response.couponCodes));
                    };
                    return activity.execute().done(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            asyncQueue.cancel();
                            return;
                        }
                    });
                });
                return asyncQueue.run();
            };
            RemoveCouponsOperationHandler.prototype.removeCouponCodes = function (couponCodes) {
                var _this = this;
                var couponCodesQueue = new Commerce.AsyncQueue();
                couponCodesQueue.enqueue(function () {
                    if (Commerce.ArrayExtensions.hasElements(couponCodes)) {
                        return _this.cartManager.removeCouponsFromCartAsync(couponCodes);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return couponCodesQueue.run();
            };
            return RemoveCouponsOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.RemoveCouponsOperationHandler = RemoveCouponsOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ResetPasswordOperationHandler = (function (_super) {
            __extends(ResetPasswordOperationHandler, _super);
            function ResetPasswordOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ResetPasswordOperationHandler.prototype.execute = function (options) {
                options = options || { targetUserId: undefined, newPassword: undefined, changePassword: undefined };
                return this.authenticationManager.resetPassword({
                    userId: options.targetUserId,
                    newPassword: options.newPassword,
                    mustChangePasswordAtNextLogOn: options.changePassword
                })
                    .map(function (result) {
                    Commerce.AsyncService.instance.startProcessDataPackage(result);
                    return { canceled: false, data: result };
                });
            };
            return ResetPasswordOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ResetPasswordOperationHandler = ResetPasswordOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ReturnOperationHandlerBase = (function (_super) {
            __extends(ReturnOperationHandlerBase, _super);
            function ReturnOperationHandlerBase() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReturnOperationHandlerBase.prototype.execute = function (options) {
                throw "Abstract method 'execute' not implemented.";
            };
            ReturnOperationHandlerBase.prototype.createCartLinesFromReturnDetails = function (returnDetails, cartLines) {
                throw "Abstract method 'createCartLinesFromReturnDetails' not implemented.";
            };
            ReturnOperationHandlerBase.prototype.returnProducts = function (options) {
                var _this = this;
                options = options || { customerId: undefined, productReturnDetails: [], preReturnTrigger: null, postReturnTrigger: null };
                options.productReturnDetails = options.productReturnDetails || [];
                var cartLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                    return asyncQueue.cancelOn(reasonCodeQueue.run());
                });
                asyncQueue.enqueue(function () {
                    var productDetailsQueue = Commerce.ActivityHelper.getProductReturnDetailsAsyncQueue(options.productReturnDetails);
                    return asyncQueue.cancelOn(productDetailsQueue.run());
                });
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this.createCartLinesFromReturnDetails(options.productReturnDetails, cartLines));
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.preReturnTrigger)) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(options.preReturnTrigger(cartLines));
                    });
                }
                asyncQueue.enqueue(function () {
                    var linesToAdd = cartLines.filter(function (c) {
                        return Commerce.StringExtensions.isNullOrWhitespace(c.LineId);
                    });
                    if (linesToAdd.length === 0) {
                        return null;
                    }
                    var addCartLinesQueue = Commerce.ActivityHelper.addCartLinesAsyncQueue(linesToAdd);
                    return asyncQueue.cancelOn(addCartLinesQueue.run());
                });
                asyncQueue.enqueue(function () {
                    var linesToUpdate = cartLines.filter(function (c) { return !Commerce.StringExtensions.isNullOrWhitespace(c.LineId); })
                        .map(function (c) { return new Commerce.Proxy.Entities.CartLineClass({
                        LineId: c.LineId,
                        ProductId: c.ProductId,
                        Quantity: c.Quantity,
                        ReasonCodeLines: c.ReasonCodeLines
                    }); });
                    if (linesToUpdate.length === 0) {
                        return null;
                    }
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart, cartLines: linesToUpdate }, function (c) { return _this.cartManager.updateCartLinesOnCartAsync(c.cartLines); }).run();
                    return asyncQueue.cancelOn(result);
                });
                if (!Commerce.StringExtensions.isNullOrWhitespace(options.customerId) && options.customerId !== Commerce.Session.instance.cart.CustomerId) {
                    asyncQueue.enqueue(function () {
                        var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart }, function (c) { return _this.cartManager.addCustomerToCartAsync(options.customerId, []); }).run();
                        return asyncQueue.cancelOn(result);
                    });
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.postReturnTrigger)) {
                    asyncQueue.enqueue(function () {
                        return options.postReturnTrigger(cartLines);
                    });
                }
                return asyncQueue.run();
            };
            return ReturnOperationHandlerBase;
        }(Operations.OperationHandlerBase));
        Operations.ReturnOperationHandlerBase = ReturnOperationHandlerBase;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ReturnChargesOverrideOperationHandler = (function (_super) {
            __extends(ReturnChargesOverrideOperationHandler, _super);
            function ReturnChargesOverrideOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReturnChargesOverrideOperationHandler.prototype.execute = function (options) {
                options = options || { currentCart: Commerce.Session.instance.cart, updateChargeHeader: true, cartLines: [] };
                var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                var asyncQueue = new Commerce.AsyncQueue();
                if (options.updateChargeHeader) {
                    asyncQueue.enqueue(function () {
                        var updatedCart = {
                            Id: options.currentCart.Id,
                            DeliveryModeChargeAmount: options.currentCart.DeliveryModeChargeAmount
                        };
                        return cartManager.createOrUpdateCartAsync(updatedCart);
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(options.cartLines)) {
                    asyncQueue.enqueue(function () {
                        var updatedCartLines = [];
                        options.cartLines.forEach(function (line) {
                            updatedCartLines.push({
                                LineId: line.LineId,
                                DeliveryModeChargeAmount: line.DeliveryModeChargeAmount
                            });
                        });
                        return cartManager.updateCartLinesOnCartAsync(updatedCartLines);
                    });
                }
                return asyncQueue.run();
            };
            return ReturnChargesOverrideOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ReturnChargesOverrideOperationHandler = ReturnChargesOverrideOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ReturnProductOperationHandler = (function (_super) {
            __extends(ReturnProductOperationHandler, _super);
            function ReturnProductOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReturnProductOperationHandler.prototype.execute = function (options) {
                var returnProductOptions = {
                    customerId: options.customerId,
                    productReturnDetails: options.productReturnDetails,
                    preReturnTrigger: function (cartLines) {
                        var preTriggerOptions = { cart: Commerce.Session.instance.cart, cartLinesForReturn: cartLines };
                        return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreReturnProduct, preTriggerOptions);
                    },
                    postReturnTrigger: function (cartLines) {
                        var postTriggerOptions = { cart: Commerce.Session.instance.cart, cartLinesForReturn: cartLines };
                        return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostReturnProduct, postTriggerOptions);
                    }
                };
                return this.returnProducts(returnProductOptions);
            };
            ReturnProductOperationHandler.prototype.createCartLinesFromReturnDetails = function (returnDetails, cartLines) {
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var manualReturns = returnDetails.filter(function (p) { return !Commerce.ObjectExtensions.isNullOrUndefined(p.manualReturn); }).map(function (p) { return p.manualReturn; });
                    if (!Commerce.ArrayExtensions.hasElements(manualReturns)) {
                        return null;
                    }
                    manualReturns.forEach(function (p) { return p.quantity = -1 * Math.abs(p.quantity); });
                    var cartLinesQueue = Commerce.ActivityHelper.createCartLinesAsyncQueue(manualReturns, cartLines);
                    return asyncQueue.cancelOn(cartLinesQueue.run());
                }).enqueue(function () {
                    returnDetails.forEach(function (p) {
                        if (p.cartLine) {
                            cartLines.push({
                                LineId: p.cartLine.LineId,
                                Description: p.cartLine.Description,
                                ItemId: p.cartLine.ItemId,
                                ProductId: p.cartLine.ProductId,
                                Quantity: -1 * Math.abs(p.cartLine.Quantity)
                            });
                        }
                    });
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLines }, function (c) { return Commerce.VoidAsyncResult.createResolved(); }, Commerce.Proxy.Entities.ReasonCodeSourceType.ReturnItem, true).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            return ReturnProductOperationHandler;
        }(Operations.ReturnOperationHandlerBase));
        Operations.ReturnProductOperationHandler = ReturnProductOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ReturnTransactionOperationHandler = (function (_super) {
            __extends(ReturnTransactionOperationHandler, _super);
            function ReturnTransactionOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReturnTransactionOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { salesOrder: null };
                var asyncResult = new Commerce.AsyncResult();
                var activity = new Commerce.Activities.GetTransactionReturnLinesActivity({ salesOrder: options.salesOrder });
                activity.responseHandler = function (response) {
                    var responseHandlerAsyncResult = new Commerce.VoidAsyncResult();
                    if (response && response.salesOrder && response.salesLines) {
                        var productReturnOptions = {
                            customerId: response.salesOrder.CustomerId,
                            productReturnDetails: response.salesLines.map(function (salesLine) {
                                return {
                                    cartLine: undefined,
                                    manualReturn: undefined,
                                    salesLineReturn: { quantity: salesLine.Quantity, returnTransactionId: response.salesOrder.Id, salesLine: salesLine }
                                };
                            }),
                            preReturnTrigger: function (cartLines) {
                                var preTriggerOptions = {
                                    cart: Commerce.Session.instance.cart,
                                    cartLinesForReturn: cartLines,
                                    originalTransaction: response.salesOrder
                                };
                                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreReturnTransaction, preTriggerOptions);
                            },
                            postReturnTrigger: function (cartLines) {
                                var postTriggerOptions = {
                                    cart: Commerce.Session.instance.cart,
                                    originalTransaction: response.salesOrder,
                                    cartLinesForReturn: cartLines
                                };
                                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostReturnTransaction, postTriggerOptions);
                            }
                        };
                        _this.returnProducts(productReturnOptions).done(function (result) {
                            if (result.canceled) {
                                responseHandlerAsyncResult.reject(null);
                            }
                            else {
                                responseHandlerAsyncResult.resolve();
                            }
                        }).fail(function (errors) {
                            responseHandlerAsyncResult.reject(errors);
                        });
                    }
                    else {
                        responseHandlerAsyncResult.reject(null);
                    }
                    return responseHandlerAsyncResult;
                };
                activity.execute().done(function () {
                    if (activity.response) {
                        asyncResult.resolve({ canceled: false, data: null });
                    }
                    else {
                        asyncResult.resolve({ canceled: true, data: null });
                    }
                }).fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            ReturnTransactionOperationHandler.prototype.createCartLinesFromReturnDetails = function (returnDetails, cartLines) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var productsByRecordId = {};
                asyncQueue.enqueue(function () {
                    var productIds = [];
                    returnDetails.forEach(function (p) {
                        if (p.salesLineReturn) {
                            productIds.push(p.salesLineReturn.salesLine.ProductId);
                        }
                    });
                    if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    if (productIds.length > 1) {
                        return _this.productManager.getByIdsAsync(productIds, 0).done(function (products) {
                            products.forEach(function (p) { productsByRecordId[p.RecordId] = p; });
                        });
                    }
                    else {
                        return _this.productManager.getByIdAsync(productIds[0], 0).done(function (product) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(product) && !isNaN(product.RecordId)) {
                                productsByRecordId[product.RecordId] = product;
                            }
                        });
                    }
                });
                asyncQueue.enqueue(function () {
                    returnDetails.forEach(function (p) {
                        var salesLine = p.salesLineReturn.salesLine;
                        var product = productsByRecordId[salesLine.ProductId];
                        Commerce.Session.instance.addToProductsInCartCache(product);
                        cartLines.push({
                            Description: Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : product.Name,
                            ItemId: salesLine.ItemId,
                            ProductId: salesLine.ProductId,
                            Quantity: -1 * Math.abs(p.salesLineReturn.quantity),
                            ReturnLineNumber: salesLine.LineNumber,
                            ReturnTransactionId: p.salesLineReturn.returnTransactionId
                        });
                    });
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLines }, function (c) { return Commerce.VoidAsyncResult.createResolved(); }, Commerce.Proxy.Entities.ReasonCodeSourceType.ReturnTransaction).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            return ReturnTransactionOperationHandler;
        }(Operations.ReturnOperationHandlerBase));
        Operations.ReturnTransactionOperationHandler = ReturnTransactionOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SafeDropOperationHandler = (function (_super) {
            __extends(SafeDropOperationHandler, _super);
            function SafeDropOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SafeDropOperationHandler.prototype.execute = function (options) {
                options = options || {};
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                if (!options.skipOpenDrawer) {
                    asyncQueue.enqueue(function () {
                        var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                    });
                }
                asyncQueue.enqueue(function () {
                    var context = {
                        tenderDropAndDeclareType: Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop,
                        shift: options.shift
                    };
                    var activity = new Commerce.Activities.TenderCountingActivity(context);
                    return asyncQueue.cancelOn(activity.execute()).map(function (result) {
                        return result.data;
                    });
                });
                return asyncQueue.run();
            };
            return SafeDropOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.SafeDropOperationHandler = SafeDropOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SalesInvoiceOperationHandler = (function (_super) {
            __extends(SalesInvoiceOperationHandler, _super);
            function SalesInvoiceOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SalesInvoiceOperationHandler.prototype.execute = function (options) {
                if (Commerce.StringExtensions.isNullOrWhitespace(options.customerId)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SALES_INVOICES_CUSTOMER_ACCOUNT_NUMBER_NOTSET)]);
                }
                Commerce.ViewModelAdapter.navigate("CustomerOrderInvoicesView", options);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return SalesInvoiceOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.SalesInvoiceOperationHandler = SalesInvoiceOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddCustomerOperationHelper = (function () {
            function AddCustomerOperationHelper() {
            }
            AddCustomerOperationHelper.getUpdatedCartAffiliations = function (cart, customerId, newCartAffiliations) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                    return [];
                }
                var updatedCartAffiliations = [];
                if (Commerce.ArrayExtensions.hasElements(newCartAffiliations)) {
                    var isAddCustomer = Commerce.StringExtensions.isNullOrWhitespace(cart.CustomerId) && !Commerce.StringExtensions.isNullOrWhitespace(customerId);
                    var isClearCustomer = !isAddCustomer && customerId === Commerce.StringExtensions.EMPTY;
                    var isUpdateCustomer = !isAddCustomer && !isClearCustomer && customerId !== cart.CustomerId;
                    var isChangedCustomer = isAddCustomer || isClearCustomer || isUpdateCustomer;
                    if (isChangedCustomer) {
                        if (Commerce.ArrayExtensions.hasElements(cart.AffiliationLines)) {
                            if (isUpdateCustomer || isAddCustomer) {
                                if (isAddCustomer) {
                                    cart.AffiliationLines.forEach(function (cartAffiliationLine) {
                                        if (Commerce.StringExtensions.isNullOrWhitespace(cartAffiliationLine.CustomerId)) {
                                            updatedCartAffiliations.push(cartAffiliationLine);
                                        }
                                    });
                                }
                                if (isUpdateCustomer) {
                                    cart.AffiliationLines.forEach(function (cartAffiliationLine) {
                                        if (cartAffiliationLine.CustomerId !== cart.CustomerId) {
                                            updatedCartAffiliations.push(cartAffiliationLine);
                                        }
                                    });
                                }
                                newCartAffiliations.forEach(function (cartAffiliationLine) {
                                    var isDuplicate = updatedCartAffiliations.some(function (value) {
                                        return value.AffiliationId === cartAffiliationLine.AffiliationId;
                                    });
                                    if (!isDuplicate) {
                                        updatedCartAffiliations.push(cartAffiliationLine);
                                    }
                                });
                            }
                            else if (isClearCustomer) {
                                AddCustomerOperationHelper.getManuallyAddedAffiliationsFromCustomerCart(cart, updatedCartAffiliations);
                            }
                        }
                        else {
                            updatedCartAffiliations = newCartAffiliations;
                        }
                    }
                    else {
                        updatedCartAffiliations = cart.AffiliationLines;
                    }
                }
                else {
                    AddCustomerOperationHelper.getManuallyAddedAffiliationsFromCustomerCart(cart, updatedCartAffiliations);
                }
                return updatedCartAffiliations;
            };
            AddCustomerOperationHelper.getNotInCartCustomerAffiliations = function (customerId, customerAffiliations) {
                if (!Commerce.ArrayExtensions.hasElements(customerAffiliations) || Commerce.StringExtensions.isNullOrWhitespace(customerId)) {
                    return [];
                }
                var cartAffiliations = Commerce.Session.instance.cart.AffiliationLines;
                var notInCartCustomerAffiliations = [];
                if (Commerce.ArrayExtensions.hasElements(cartAffiliations)) {
                    customerAffiliations.forEach(function (customerAffiliation) {
                        var isInCart = cartAffiliations.some(function (cartAffiliation) {
                            return (Commerce.StringExtensions.isNullOrWhitespace(cartAffiliation.CustomerId)
                                && cartAffiliation.AffiliationId === customerAffiliation.RetailAffiliationId);
                        });
                        if (!isInCart) {
                            notInCartCustomerAffiliations.push(customerAffiliation);
                        }
                    });
                }
                else {
                    notInCartCustomerAffiliations = customerAffiliations;
                }
                return notInCartCustomerAffiliations;
            };
            AddCustomerOperationHelper.getManuallyAddedAffiliationsFromCustomerCart = function (cart, updatedCartAffiliations) {
                if (Commerce.ArrayExtensions.hasElements(cart.AffiliationLines)) {
                    cart.AffiliationLines.forEach(function (cartAffiliationLine) {
                        if (cartAffiliationLine.CustomerId !== cart.CustomerId) {
                            updatedCartAffiliations.push(cartAffiliationLine);
                        }
                    });
                }
            };
            return AddCustomerOperationHelper;
        }());
        Operations.AddCustomerOperationHelper = AddCustomerOperationHelper;
        var IssueCreditMemoOperationHelper = (function () {
            function IssueCreditMemoOperationHelper() {
            }
            IssueCreditMemoOperationHelper.preOperationValidation = function (cart) {
                var errors = [];
                if (!Commerce.CustomerOrderHelper.isCustomerOrderReturnOrPickup(cart)) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cart.IsDiscountFullyCalculated) && (!cart.IsDiscountFullyCalculated)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_ISSUE_CREDIT_MEMO_CALCULATE_TRANSACTION));
                    }
                }
                if (isNaN(cart.AmountDue) || (cart.AmountDue >= 0)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CREDIT_MEMO_INVALID_AMOUNT));
                }
                var deliveryModeErrors = Operations.CustomerOrderValidators.isDeliveryModeSet(cart);
                errors = errors.concat(deliveryModeErrors);
                return errors.length === 0 ? null : errors;
            };
            return IssueCreditMemoOperationHelper;
        }());
        Operations.IssueCreditMemoOperationHelper = IssueCreditMemoOperationHelper;
        var PaymentOperationHelper = (function () {
            function PaymentOperationHelper() {
            }
            PaymentOperationHelper.preOperationValidation = function (paymentOperationId, cart) {
                var errors = PaymentOperationHelper.validateCartLines(cart);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentOperationId)) {
                    switch (paymentOperationId) {
                        case Operations.RetailOperation.PayCreditMemo:
                            var payCreditErrors = PayCreditMemoOperationHelper.preOperationValidation(cart);
                            if (Commerce.ArrayExtensions.hasElements(payCreditErrors)) {
                                errors = errors.concat(payCreditErrors);
                            }
                            break;
                    }
                }
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return errors;
                }
                return null;
            };
            PaymentOperationHelper.validateCartLines = function (cart) {
                for (var i = 0; i < cart.CartLines.length; i++) {
                    var cartLine = cart.CartLines[i];
                    if (cartLine.IsInvoiceLine) {
                        continue;
                    }
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    if (PaymentOperationHelper._isSerialNumberRequired(product, cartLine, cart)
                        && Commerce.StringExtensions.isNullOrWhitespace(cartLine.SerialNumber)
                        && !product.Behavior.IsBlankSerialNumberAllowed) {
                        var error = void 0;
                        if (Commerce.CustomerOrderHelper.isCustomerOrder(cart)
                            && !Commerce.CustomerOrderHelper.isCustomerOrderPickup(cart)) {
                            error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERIALNUMBERMISSINGINCUSTOMERORDER);
                        }
                        else {
                            error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERIALNUMBERMISSING);
                        }
                        return [error];
                    }
                }
                return [];
            };
            PaymentOperationHelper._isSerialNumberRequired = function (product, cartLine, cart) {
                if (Commerce.CustomerOrderHelper.isSerialNumberSupported(product, cartLine)) {
                    if (!Commerce.CustomerOrderHelper.isCustomerOrder(cart)) {
                        return true;
                    }
                    if (Commerce.CustomerOrderHelper.isCustomerOrderPickup(cart)) {
                        return true;
                    }
                    if (cartLine.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode) {
                        return true;
                    }
                }
                return false;
            };
            return PaymentOperationHelper;
        }());
        Operations.PaymentOperationHelper = PaymentOperationHelper;
        var PayCreditMemoOperationHelper = (function () {
            function PayCreditMemoOperationHelper() {
            }
            PayCreditMemoOperationHelper.preOperationValidation = function (cart) {
                var errors = [];
                if (isNaN(cart.AmountDue) || (cart.AmountDue <= 0)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CREDIT_MEMO_NEGATIVE_BALANCE));
                }
                return errors.length === 0 ? null : errors;
            };
            return PayCreditMemoOperationHelper;
        }());
        Operations.PayCreditMemoOperationHelper = PayCreditMemoOperationHelper;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SalesPersonOperationHandler = (function (_super) {
            __extends(SalesPersonOperationHandler, _super);
            function SalesPersonOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SalesPersonOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cart: undefined };
                options.cart = options.cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
                var cart = options.cart;
                var salesPersonId;
                var currentEmployees;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                        var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CHANGE_SALES_PERSON_INVALID_CART_MODE);
                        return Commerce.VoidAsyncResult.createRejected([error]);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    return Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value
                        .done(function (employees) {
                        currentEmployees = employees;
                    });
                }).enqueue(function () {
                    var activity = new Commerce.Activities.GetSalesPersonActivity({ originalSalesPersonId: cart.StaffId, salesPersons: currentEmployees });
                    return activity.execute().done(function () {
                        if (!activity.response) {
                            asyncQueue.cancel();
                            return;
                        }
                        salesPersonId = activity.response.salesPersonId;
                    });
                }).enqueue(function () {
                    var newCart = { Id: cart.Id, StaffId: salesPersonId };
                    var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: newCart }, function (c) { return _this.cartManager.createOrUpdateCartAsync(newCart); }, Commerce.Proxy.Entities.ReasonCodeSourceType.AddSalesperson).run();
                    return asyncQueue.cancelOn(result);
                });
                return asyncQueue.run();
            };
            return SalesPersonOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.SalesPersonOperationHandler = SalesPersonOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SelectHardwareStationOperationHandler = (function (_super) {
            __extends(SelectHardwareStationOperationHandler, _super);
            function SelectHardwareStationOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectHardwareStationOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { hardwareStation: undefined, isInactivate: undefined };
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.cart.TenderLines)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_CHANGE_HARDWARE_STATION_WHEN_PAYMENT_DONE)]);
                }
                if (Commerce.Peripherals.instance
                    && Commerce.Peripherals.instance.lineDisplay
                    && Commerce.Peripherals.instance.lineDisplay.isActive
                    && !Commerce.Session.instance.isNonDrawerMode()) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_CHANGE_ERROR_LINE_DISPLAY_ACTIVE)]);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var sharedDrawer;
                var hardwareProfile;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.hardwareStation)) {
                    asyncQueue
                        .enqueue(function () {
                        if (options.isInactivate) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        var hardwareStation = options.hardwareStation;
                        if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(hardwareStation)
                            && !Commerce.HardwareStationEndpointStorage.getHardwareStationToken(hardwareStation.recordId, hardwareStation.url)) {
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_MUST_BE_PAIRED_BEFORE_ACTIVATE)]);
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        if (options.isInactivate
                            || Commerce.Session.instance.Shift.ShiftId === 0
                            || !Commerce.Session.instance.Shift.IsShared) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        return Commerce.ApplicationContextLoader.getActiveHardwareProfileAsync(options.hardwareStation, _this.channelManager)
                            .done(function (profile) {
                            hardwareProfile = profile;
                            sharedDrawer = Commerce.ArrayExtensions.firstOrUndefined(profile.CashDrawers, function (cashDrawer) { return cashDrawer.IsSharedShiftDrawer; });
                        });
                    }).enqueue(function () {
                        var nextStepAllowed = false;
                        if (options.isInactivate
                            || Commerce.Session.instance.Shift.ShiftId === 0
                            || (Commerce.Session.instance.Shift.IsShared && !Commerce.ObjectExtensions.isNullOrUndefined(sharedDrawer))
                            || (!Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()
                                && !Commerce.Session.instance.Shift.IsShared
                                && Commerce.StringExtensions.isNullOrWhitespace(options.hardwareStation.profileId))) {
                            nextStepAllowed = true;
                        }
                        if (nextStepAllowed) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.HARDWARESTATION_SWITCH_NOT_ALLOWED_TO_NONSHARED)]);
                    }).enqueue(function () {
                        if (options.isInactivate
                            && Commerce.Session.instance.Shift.ShiftId !== 0
                            && !Commerce.Session.instance.Shift.IsShared) {
                            var currentHardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(currentHardwareStation)
                                && !Commerce.StringExtensions.isNullOrWhitespace(currentHardwareStation.profileId)) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SHIFT_USING_ACTIVE_HARDWARESTATION_DRAWER)]);
                            }
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        if (options.isInactivate) {
                            Commerce.HardwareStationEndpointStorage.clearActiveHardwareStation(correlationId);
                        }
                        else {
                            Commerce.HardwareStationEndpointStorage.setActiveHardwareStation(correlationId, options.hardwareStation);
                        }
                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.HardwareStationGeneralError, true);
                        return Commerce.ApplicationContextLoader.loadActiveHardwareStationProfileAsync(correlationId, _this.channelManager, hardwareProfile);
                    }).enqueue(function () {
                        if (!options.isInactivate && !Commerce.ObjectExtensions.isNullOrUndefined(sharedDrawer)) {
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_NAME, sharedDrawer.DeviceName);
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_TYPE, sharedDrawer.DeviceTypeValue.toString());
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        return Commerce.Peripherals.instance.cashDrawer.isOpenAsync();
                    });
                }
                return asyncQueue.run();
            };
            return SelectHardwareStationOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.SelectHardwareStationOperationHandler = SelectHardwareStationOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SetQuantityOperationHandler = (function (_super) {
            __extends(SetQuantityOperationHandler, _super);
            function SetQuantityOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SetQuantityOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart, cartLineQuantities: options.cartLineQuantities };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreSetQuantity, preTriggerOptions);
            };
            SetQuantityOperationHandler.prototype.executePostTrigger = function (options, result) {
                var cartLineIds = options.cartLineQuantities.map(function (cartLineQuantity) {
                    return cartLineQuantity.cartLine.LineId;
                });
                var updatedCartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, cartLineIds);
                var postTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: updatedCartLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostSetQuantity, postTriggerOptions);
            };
            SetQuantityOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { cartLineQuantities: undefined, correlationId: undefined };
                if (Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    options.correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                options.cartLineQuantities = options.cartLineQuantities || [];
                return options;
            };
            SetQuantityOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                var errors = this.validateOperationOptions(options);
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    Commerce.RetailLogger.operationSetQuantityOptionsValidationFailed(options.correlationId, Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var cartLinesForQuantityUpdate = [];
                var cartLinesForWeightUpdate = [];
                var cartLinesToUpdate = [];
                options.cartLineQuantities.forEach(function (cq) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(cq.quantity)) {
                        var product = Commerce.Session.instance.getFromProductsInCartCache(cq.cartLine.ProductId);
                        if (!product.Behavior.MustWeighProductAtSale) {
                            cartLinesForQuantityUpdate.push(cq.cartLine);
                        }
                        else {
                            cartLinesForWeightUpdate.push(cq.cartLine);
                        }
                    }
                    else {
                        var clonedCartLine = Commerce.ObjectExtensions.clone(cq.cartLine);
                        clonedCartLine.Quantity = cq.quantity;
                        cartLinesToUpdate.push(clonedCartLine);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(cartLinesForQuantityUpdate)) {
                    asyncQueue.enqueue(function () {
                        return _this.getCartLineQuantities(cartLinesForQuantityUpdate)
                            .done(function (cartLines) {
                            if (!cartLines) {
                                asyncQueue.cancel();
                                return;
                            }
                            cartLinesToUpdate = cartLinesToUpdate.concat(cartLines);
                        });
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(cartLinesForWeightUpdate)) {
                    asyncQueue.enqueue(function () {
                        return _this.getCartLineWeights(cartLinesForWeightUpdate)
                            .done(function (cartLines) {
                            if (!cartLines) {
                                asyncQueue.cancel();
                                return;
                            }
                            cartLinesToUpdate = cartLinesToUpdate.concat(cartLines);
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    if (Commerce.ArrayExtensions.hasElements(cartLinesToUpdate)) {
                        var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLinesToUpdate }, function (context) {
                            return _this.cartManager.updateCartLinesOnCartAsync(context.cartLines);
                        }).run();
                        return asyncQueue.cancelOn(reasonCodesResult);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            SetQuantityOperationHandler.prototype.validateOperationOptions = function (options) {
                var _this = this;
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.IncomeExpense)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_INCOME_EXPENSE_TRANSACTION)];
                }
                if (!Commerce.ArrayExtensions.hasElements(options.cartLineQuantities)
                    || options.cartLineQuantities.some(function (c) { return Commerce.ObjectExtensions.isNullOrUndefined(c); })) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_VALID_NO_ITEM_SELECTED)];
                }
                if (Commerce.CustomerOrderHelper.isCustomerOrderCancellation(cart)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_CANCELING_ORDER)];
                }
                var errors = [];
                options.cartLineQuantities.forEach(function (cq) {
                    var cartLineErrors = _this.preValidateCartLine(cq.cartLine);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cq.quantity)) {
                        cartLineErrors = cartLineErrors.concat(_this.validateCartLine(cq.cartLine, cq.quantity));
                    }
                    if (Commerce.ArrayExtensions.hasElements(cartLineErrors)) {
                        errors = errors.concat(cartLineErrors);
                    }
                });
                return errors;
            };
            SetQuantityOperationHandler.prototype.getCartLineQuantities = function (cartLines) {
                var _this = this;
                var activity = new Commerce.Activities.GetCartLineQuantitiesActivity({ cartLines: cartLines });
                activity.responseHandler = function (response) {
                    var errors = [];
                    var updatedCartLines = cartLines.map(function (cartLine, index) {
                        var quantity = response.quantities[index];
                        if (cartLine.Quantity < 0) {
                            var numberOfDecimals = Commerce.NumberExtensions.getNumberOfDecimals(quantity);
                            quantity = -1 * quantity;
                            if (Commerce.NumberExtensions.getNumberOfDecimals(quantity) >= numberOfDecimals) {
                                quantity = Commerce.NumberExtensions.roundToNDigits(quantity, numberOfDecimals);
                            }
                        }
                        errors = errors.concat(_this.validateCartLine(cartLine, quantity));
                        var clonedCartLine = Commerce.ObjectExtensions.clone(cartLine);
                        clonedCartLine.Quantity = quantity;
                        return clonedCartLine;
                    });
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                    cartLines = updatedCartLines;
                    return Commerce.VoidAsyncResult.createResolved();
                };
                return activity.execute().map(function () {
                    if (!activity.response) {
                        return null;
                    }
                    return cartLines;
                });
            };
            SetQuantityOperationHandler.prototype.getCartLineWeights = function (cartLines) {
                var _this = this;
                var updatedCartLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                cartLines.forEach(function (cartLine) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetCartLineWeightActivity({ cartLine: cartLine });
                        activity.responseHandler = function (response) {
                            var quantity = response.weight;
                            if (cartLine.Quantity < 0) {
                                var numberOfDecimals = Commerce.NumberExtensions.getNumberOfDecimals(quantity);
                                quantity = -1 * quantity;
                                if (Commerce.NumberExtensions.getNumberOfDecimals(quantity) >= numberOfDecimals) {
                                    quantity = Commerce.NumberExtensions.roundToNDigits(quantity, numberOfDecimals);
                                }
                            }
                            var errors = _this.validateCartLine(cartLine, quantity);
                            if (Commerce.ArrayExtensions.hasElements(errors)) {
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                            var clonedCartLine = Commerce.ObjectExtensions.clone(cartLine);
                            clonedCartLine.Quantity = quantity;
                            updatedCartLines.push(clonedCartLine);
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                });
                return asyncQueue.run().map(function (result) {
                    if (!result.canceled) {
                        return updatedCartLines;
                    }
                    return null;
                });
            };
            SetQuantityOperationHandler.prototype.preValidateCartLine = function (cartLine) {
                var errors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_VALID_NO_ITEM_SELECTED));
                    return errors;
                }
                if (cartLine.IsVoided) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_VOIDED));
                }
                if (cartLine.IsGiftCardLine) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_GIFT_CARD));
                }
                if (cartLine.IsInvoiceLine) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_SALES_INVOICE));
                }
                var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                var isProduct = !Commerce.ObjectExtensions.isNullOrUndefined(product);
                if ((!Commerce.ObjectExtensions.isNullOrUndefined(cartLine.SerialNumber)
                    && !Commerce.StringExtensions.isEmptyOrWhitespace(cartLine.SerialNumber))
                    || (isProduct && product.Behavior.HasSerialNumber)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_SERIALIZED_ITEM));
                }
                if (isProduct
                    && product.Behavior.KeyInQuantityValue === Commerce.Proxy.Entities.KeyInQuantityRestriction.NotAllowed) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_VALID_ONE_OR_MORE_ITEMS));
                }
                return errors;
            };
            SetQuantityOperationHandler.prototype.validateCartLine = function (cartLine, quantity) {
                var errors = [];
                if (isNaN(quantity)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_A_NUMBER));
                    return errors;
                }
                if ((cartLine.Quantity > 0 && quantity < 0) || (cartLine.Quantity < 0 && quantity > 0) || quantity === 0) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_GREATER_THAN_ZERO));
                    return errors;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.applicationContext.deviceConfiguration.MaximumQuantity)
                    && (this.applicationContext.deviceConfiguration.MaximumQuantity !== 0)
                    && (this.applicationContext.deviceConfiguration.MaximumQuantity < Math.abs(quantity))) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_QUANTITY_EXCEEDS_MAXIMUM_DEVICE_QUANTITY));
                }
                var cartLineUnitOfMeasure = this.applicationContext.unitsOfMeasureMap.getItem(cartLine.UnitOfMeasureSymbol.toLowerCase());
                if (!Commerce.UnitOfMeasureHelper.isQuantityValid(quantity, cartLineUnitOfMeasure)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SET_QUANTITY_NOT_VALID_FOR_UNIT_OF_MEASURE));
                }
                var cart = Commerce.Session.instance.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup
                    && (quantity + cartLine.QuantityInvoiced > cartLine.QuantityOrdered)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOPICKUPMORETHANQTYREMAINING));
                }
                return errors;
            };
            return SetQuantityOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.SetQuantityOperationHandler = SetQuantityOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SetQuotationExpirationDateOperationHandler = (function (_super) {
            __extends(SetQuotationExpirationDateOperationHandler, _super);
            function SetQuotationExpirationDateOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SetQuotationExpirationDateOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { correlationId: undefined, cart: undefined, requestedExpirationDate: undefined };
                var cart = options.cart;
                var expirationDate = options.requestedExpirationDate;
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.CustomerOrderHelper.isQuote(cart)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CREATE_OR_EDIT_QUOTATION_ONLY)]);
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(expirationDate)) {
                    asyncQueue.enqueue(function () {
                        var originalExpirationDate = Commerce.ObjectExtensions.isNullOrUndefined(cart.QuotationExpiryDate) ?
                            Commerce.CustomerOrderHelper.getDefaultQuoteExpirationDate() : cart.QuotationExpiryDate;
                        return Commerce.CustomerOrderHelper.getQuotationExpirationDate(originalExpirationDate)
                            .done(function (requestedExpirationDate) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(requestedExpirationDate)) {
                                asyncQueue.cancel();
                                return;
                            }
                            expirationDate = requestedExpirationDate;
                        });
                    });
                }
                asyncQueue
                    .enqueue(function () {
                    if (!Commerce.DateExtensions.isTodayOrFutureDate(expirationDate)) {
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_QUOTEMUSTHAVEVALIDQUOTATIONEXPIRYDATE)]);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var requestCart = new Commerce.Proxy.Entities.CartClass();
                    requestCart.Id = cart.Id;
                    requestCart.QuotationExpiryDate = expirationDate;
                    return _this.cartManager.createOrUpdateCartAsync(requestCart);
                });
                return asyncQueue.run();
            };
            return SetQuotationExpirationDateOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.SetQuotationExpirationDateOperationHandler = SetQuotationExpirationDateOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ShipAllOperationHandler = (function (_super) {
            __extends(ShipAllOperationHandler, _super);
            function ShipAllOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ShipAllOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {
                    cart: undefined,
                    shipDate: undefined,
                    customerAddress: undefined,
                    deliveryModeCode: undefined,
                    chargeAmount: undefined,
                    fulfilmentStoreId: undefined
                };
                options.shipDate = options.shipDate || Commerce.DateExtensions.getDate();
                options.chargeAmount = options.chargeAmount || 0;
                options.customerAddress = options.customerAddress || null;
                options.deliveryModeCode = options.deliveryModeCode || Commerce.StringExtensions.EMPTY;
                options.fulfilmentStoreId = options.fulfilmentStoreId || Commerce.StringExtensions.EMPTY;
                Commerce.DateExtensions.setTimeToLastSecondOfDay(options.shipDate);
                var cart = options.cart;
                var cartLines = [];
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.DeliveryHelper.validateCartForShippingOrPickup(cart);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validateShippingProperties(options.customerAddress, options.deliveryModeCode, options.chargeAmount);
                }).enqueue(function () {
                    var newCart = {
                        Id: cart.Id,
                        DeliveryMode: options.deliveryModeCode,
                        ReasonCodeLines: cart.ReasonCodeLines,
                        RequestedDeliveryDate: options.shipDate,
                        ShippingAddress: options.customerAddress,
                        DeliveryModeChargeAmount: options.chargeAmount
                    };
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: newCart }, function (c) { return _this.cartManager.createOrUpdateCartAsync(c.cart); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                }).enqueue(function () {
                    cartLines = Commerce.ObjectExtensions.clone(Commerce.CartHelper.getNonReturnCartLines(cart.CartLines));
                    Commerce.DeliveryHelper.setDeliveryForCartLines(cartLines, 0, options.deliveryModeCode, options.shipDate, options.customerAddress, options.fulfilmentStoreId);
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLines }, function (c) { return _this.cartManager.updateCartLinesOnCartAsync(c.cartLines); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                });
                return asyncQueue.run();
            };
            return ShipAllOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ShipAllOperationHandler = ShipAllOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ShipSelectedOperationHandler = (function (_super) {
            __extends(ShipSelectedOperationHandler, _super);
            function ShipSelectedOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ShipSelectedOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {
                    cart: undefined,
                    cartLines: undefined,
                    shipDate: undefined,
                    customerAddress: undefined,
                    deliveryModeCode: undefined,
                    chargeAmount: undefined,
                    fulfilmentStoreId: undefined
                };
                options.cart = options.cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
                options.cartLines = options.cartLines || [];
                options.customerAddress = options.customerAddress || null;
                options.deliveryModeCode = options.deliveryModeCode || Commerce.StringExtensions.EMPTY;
                options.shipDate = options.shipDate || Commerce.DateExtensions.getDate();
                options.chargeAmount = options.chargeAmount || 0;
                options.fulfilmentStoreId = options.fulfilmentStoreId || Commerce.StringExtensions.EMPTY;
                Commerce.DateExtensions.setTimeToLastSecondOfDay(options.shipDate);
                var cart = options.cart;
                var cartLines = Commerce.ObjectExtensions.clone(options.cartLines);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.DeliveryHelper.validateCartForShippingOrPickup(cart);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validateCartLinesForShippingOrPickup(cart, cartLines);
                }).enqueue(function () {
                    return Commerce.DeliveryHelper.validateShippingProperties(options.customerAddress, options.deliveryModeCode, options.chargeAmount);
                }).enqueue(function () {
                    var newCart = {
                        Id: cart.Id,
                        DeliveryMode: Commerce.StringExtensions.EMPTY,
                        ReasonCodeLines: cart.ReasonCodeLines,
                        RequestedDeliveryDate: null,
                        ShippingAddress: null,
                        DeliveryModeChargeAmount: 0
                    };
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: newCart }, function (c) { return _this.cartManager.createOrUpdateCartAsync(c.cart); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                }).enqueue(function () {
                    Commerce.DeliveryHelper.setDeliveryForCartLines(cartLines, 0, options.deliveryModeCode, options.shipDate, options.customerAddress, options.fulfilmentStoreId);
                    Commerce.DeliveryHelper.splitDeliveryCharges(options.chargeAmount, cartLines);
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLines }, function (c) { return _this.cartManager.updateCartLinesOnCartAsync(c.cartLines); }).run();
                    return asyncQueue.cancelOn(reasonCodesResult);
                });
                return asyncQueue.run();
            };
            return ShipSelectedOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ShipSelectedOperationHandler = ShipSelectedOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ShowJournalOperationHandler = (function (_super) {
            __extends(ShowJournalOperationHandler, _super);
            function ShowJournalOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ShowJournalOperationHandler.prototype.execute = function (options) {
                Commerce.ViewModelAdapter.navigate("ShowJournalView", options);
                return Commerce.VoidAsyncResult.createResolved();
            };
            return ShowJournalOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ShowJournalOperationHandler = ShowJournalOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var StockCountOperationHandler = (function (_super) {
            __extends(StockCountOperationHandler, _super);
            function StockCountOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            StockCountOperationHandler.prototype.execute = function (options) {
                Commerce.ViewModelAdapter.navigate("SearchStockCountView");
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return StockCountOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.StockCountOperationHandler = StockCountOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SuspendShiftOperationHandler = (function (_super) {
            __extends(SuspendShiftOperationHandler, _super);
            function SuspendShiftOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SuspendShiftOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    if (!Commerce.Session.instance.Shift.IsShared) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    return Commerce.ViewModelAdapter.displayMessage("string_4177", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo)
                        .done(function (result) {
                        if (result === Commerce.DialogResult.No) {
                            asyncQueue.cancel();
                        }
                    });
                }).enqueue(function () {
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    return _this.storeOperationsManager.suspendShiftAsync(Commerce.Session.instance.Shift.TerminalId, Commerce.Session.instance.Shift.ShiftId, correlationId)
                        .done(function (shift) {
                        Commerce.RetailLogger.suspendShiftSucceeded(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), shift.StatusValue, correlationId);
                        Commerce.Session.instance.RemoveFromOpenedShifts(shift);
                    }).fail(function (errors) {
                        var shift = Commerce.Session.instance.Shift;
                        Commerce.RetailLogger.suspendShiftFailed(Commerce.ShiftHelper.getShiftIdentifier(shift), shift.CashDrawer, shift.StaffId, String(shift.IsShared), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    });
                }).enqueue(function () {
                    Commerce.Session.instance.Shift = null;
                    return Commerce.ShiftHelper.saveCashDrawerOnStorageAsync(null);
                }).enqueue(function () {
                    var logOffOperationRequest = new Commerce.LogOffOperationRequest(options.correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(logOffOperationRequest));
                });
                return asyncQueue.run();
            };
            return SuspendShiftOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.SuspendShiftOperationHandler = SuspendShiftOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SuspendTransactionOperationHandler = (function (_super) {
            __extends(SuspendTransactionOperationHandler, _super);
            function SuspendTransactionOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SuspendTransactionOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {
                    correlationId: Commerce.StringExtensions.EMPTY,
                    cart: undefined
                };
                if (Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    options.correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var isSessionCart;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.cart)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetTransactionActivity();
                        activity.responseHandler = function (response) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(response.cart)) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)]);
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                            options.cart = activity.response.cart;
                        });
                    });
                }
                var journalCartId = Commerce.NumberSequence.GetNextTransactionId();
                asyncQueue.enqueue(function () {
                    isSessionCart = Commerce.Session.instance.cart.Id === options.cart.Id;
                    if (isSessionCart && !Commerce.Session.instance.isCartInProgress) {
                        asyncQueue.cancel();
                    }
                    return Commerce.AsyncResult.createResolved(null);
                }).enqueue(function () {
                    var preTriggerOptions = { cart: options.cart };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreSuspendTransaction, preTriggerOptions);
                    return asyncQueue.cancelOn(preTriggerResult);
                }).enqueue(function () {
                    var checkRecoveryRequest = new Commerce.CheckForRecoveredPaymentTransactionClientRequest(options.correlationId, null, Commerce.Payments.TransactionReferenceAllowedActions.Read);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(checkRecoveryRequest));
                }).enqueue(function (response) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.result.foundTransaction)) {
                        Commerce.RetailLogger.posOperationCanceledDueToRecoveredPayment("SuspendTransaction", options.correlationId);
                        asyncQueue.cancel();
                        return Commerce.AsyncResult.createResolved();
                    }
                    return Commerce.AsyncResult.createResolved();
                }).enqueue(function () {
                    return _this.cartManager.suspendCartAsync(options.cart.Id, journalCartId)
                        .recoverOnFailure(function (errors) {
                        if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTNOTACTIVE)) {
                            return Commerce.AsyncResult.createResolved();
                        }
                        return Commerce.AsyncResult.createRejected(errors);
                    }).done(function () {
                        if (isSessionCart) {
                            Commerce.Session.instance.clearCart();
                        }
                    });
                }).enqueue(function () {
                    return _this.salesOrderManager.getReceiptsForPrintAsync(journalCartId, false, Commerce.Proxy.Entities.ReceiptType.SuspendedTransaction, false, null, null, false, null, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId)
                        .recoverOnFailure(function (errors) {
                        if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OBJECTNOTFOUND)) {
                            return Commerce.AsyncResult.createResolved(null);
                        }
                        return Commerce.AsyncResult.createRejected(errors);
                    });
                }).enqueue(function (receipts) {
                    if (Commerce.ArrayExtensions.hasElements(receipts)) {
                        return asyncQueue.cancelOn(_this._printReceiptsAsync(receipts, options.correlationId));
                    }
                    return Commerce.AsyncResult.createResolved();
                }).enqueue(function () {
                    var postTriggerOptions = { cart: options.cart };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostSuspendTransaction, postTriggerOptions);
                });
                return asyncQueue.run();
            };
            SuspendTransactionOperationHandler.prototype._printReceiptsAsync = function (receipts, correlationId) {
                var printReceiptsRequest = new Commerce.PrintReceiptsClientRequest(Commerce.ReceiptHelper.getPrintableReceipts(receipts), null, false, correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(printReceiptsRequest));
            };
            return SuspendTransactionOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.SuspendTransactionOperationHandler = SuspendTransactionOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var TenderDeclarationOperationHandler = (function (_super) {
            __extends(TenderDeclarationOperationHandler, _super);
            function TenderDeclarationOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TenderDeclarationOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { shift: options.shift || Commerce.Session.instance.Shift };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreTenderDeclaration, preTriggerOptions);
            };
            TenderDeclarationOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { shift: undefined };
                return options;
            };
            TenderDeclarationOperationHandler.prototype.executeInternal = function (options) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var tenderDeclarationQueue = new Commerce.AsyncQueue();
                var dropAndDeclareTransaction = { Id: Commerce.StringExtensions.EMPTY };
                tenderDeclarationQueue.enqueue(function () {
                    var reasonCodeQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ dropAndDeclareTransaction: dropAndDeclareTransaction }, function (c) { return Commerce.VoidAsyncResult.createResolved(); }, Commerce.Proxy.Entities.ReasonCodeSourceType.TenderDeclaration);
                    return tenderDeclarationQueue.cancelOn(reasonCodeQueue.run());
                });
                if (!options.skipOpenDrawer) {
                    tenderDeclarationQueue.enqueue(function () {
                        var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                    });
                }
                tenderDeclarationQueue.enqueue(function () {
                    var context = {
                        tenderDropAndDeclareType: Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration,
                        shift: options.shift,
                        reasonCodeLines: dropAndDeclareTransaction.ReasonCodeLines
                    };
                    var activity = new Commerce.Activities.TenderCountingActivity(context);
                    return tenderDeclarationQueue.cancelOn(activity.execute()).map(function (result) {
                        return result.data;
                    });
                });
                return tenderDeclarationQueue.run();
            };
            return TenderDeclarationOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.TenderDeclarationOperationHandler = TenderDeclarationOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var TenderRemovalOperationHandler = (function (_super) {
            __extends(TenderRemovalOperationHandler, _super);
            function TenderRemovalOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TenderRemovalOperationHandler.prototype.execute = function (options) {
                options = options || {};
                options.skipOpenDrawer = options.transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe ? true : options.skipOpenDrawer;
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncQueue = new Commerce.AsyncQueue();
                if (!options.skipOpenDrawer) {
                    asyncQueue.enqueue(function () {
                        var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest));
                    });
                }
                asyncQueue.enqueue(function () {
                    var useAdvancedCashManagement = Commerce.ApplicationContext.Instance.channelConfiguration.UseAdvancedCashManagement;
                    if (useAdvancedCashManagement) {
                        var request = new Commerce.CashManagement.CreateAdvancedCashManagementTransactionClientRequest(correlationId, options.shift, Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender, options.transactionContext, options.storeSafe);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .map(function (result) {
                            return result.canceled ? null : result.data.result;
                        });
                    }
                    else {
                        var context = {
                            transactionType: Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender,
                            shift: options.shift
                        };
                        var activity = new Commerce.Activities.CashManagementActivity(context);
                        return asyncQueue.cancelOn(activity.execute()).map(function (result) {
                            return result.data;
                        });
                    }
                });
                return asyncQueue.run();
            };
            return TenderRemovalOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.TenderRemovalOperationHandler = TenderRemovalOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var TimeClockOperationHandler = (function (_super) {
            __extends(TimeClockOperationHandler, _super);
            function TimeClockOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TimeClockOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {};
                if (!this.applicationContext.deviceConfiguration.EnableTimeRegistration) {
                    Commerce.RetailLogger.operationTimeClockNotEnabled();
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_TIME_CLOCK_DISABLED)];
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var employeeActivity = null;
                var activity;
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    _this.storeOperationsManager.getCurrentTimeRegistrationStatus()
                        .done(function (result) {
                        employeeActivity = result;
                    }).always(function () {
                        asyncResult.resolve();
                    });
                    return asyncResult;
                }).enqueue(function () {
                    activity = new Commerce.Activities.RegisterTimeActivity({ employeeActivity: employeeActivity });
                    activity.responseHandler = function (response) {
                        return _this.storeOperationsManager.performTimeRegistration(Commerce.Session.instance.CurrentEmployee.StaffId, response.employeeActivityType);
                    };
                    return activity.execute();
                });
                return asyncQueue.run();
            };
            return TimeClockOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.TimeClockOperationHandler = TimeClockOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var TotalDiscountAmountOperationHandler = (function (_super) {
            __extends(TotalDiscountAmountOperationHandler, _super);
            function TotalDiscountAmountOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TotalDiscountAmountOperationHandler.prototype.execute = function (options) {
                return Operations.DiscountOperationsHelper.createTransactionDiscountQueue(options, false).run();
            };
            return TotalDiscountAmountOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.TotalDiscountAmountOperationHandler = TotalDiscountAmountOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var TotalDiscountPercentOperationHandler = (function (_super) {
            __extends(TotalDiscountPercentOperationHandler, _super);
            function TotalDiscountPercentOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TotalDiscountPercentOperationHandler.prototype.execute = function (options) {
                return Operations.DiscountOperationsHelper.createTransactionDiscountQueue(options, true).run();
            };
            return TotalDiscountPercentOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.TotalDiscountPercentOperationHandler = TotalDiscountPercentOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var TransactionCommentOperationHandler = (function (_super) {
            __extends(TransactionCommentOperationHandler, _super);
            function TransactionCommentOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TransactionCommentOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cart: undefined, comment: undefined };
                options.cart = options.cart || Commerce.Session.instance.cart;
                options.comment = options.comment || undefined;
                var cart = options.cart;
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup
                        || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Return)
                    || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Cancellation) {
                    return Commerce.VoidAsyncResult.createRejected([
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMER_ORDER_OPERATION_PICKUP_CANCEL_RETURN_NOT_SUPPORTED)
                    ]);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.StringExtensions.isNullOrWhitespace(options.comment)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetTransactionCommentActivity({ cart: options.cart });
                        activity.responseHandler = function (response) {
                            return asyncQueue.cancelOn(_this.addTransactionCommentAsync(response.comment));
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                        });
                    });
                }
                else {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this.addTransactionCommentAsync(options.comment));
                    });
                }
                return asyncQueue.run();
            };
            TransactionCommentOperationHandler.prototype.addTransactionCommentAsync = function (comment) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var reasonCodeQueue = Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart);
                    return asyncQueue.cancelOn(reasonCodeQueue.run());
                }).enqueue(function () {
                    return _this.cartManager.addCartCommentAsync(comment);
                });
                return asyncQueue.run();
            };
            return TransactionCommentOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.TransactionCommentOperationHandler = TransactionCommentOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var UpdateCustomerOrderOperationHandler = (function (_super) {
            __extends(UpdateCustomerOrderOperationHandler, _super);
            function UpdateCustomerOrderOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            UpdateCustomerOrderOperationHandler.prototype.execute = function (options) {
                options = options || { operationType: undefined, parameters: undefined };
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                var asyncResult = new Commerce.VoidAsyncResult();
                switch (options.operationType) {
                    case Commerce.Proxy.Entities.CustomerOrderOperations.PickUpFromStore:
                        return UpdateCustomerOrderOperationHandler.pickUpInStoreCustomerOrder(options.parameters, correlationId);
                    case Commerce.Proxy.Entities.CustomerOrderOperations.Cancel:
                    case Commerce.Proxy.Entities.CustomerOrderOperations.Edit:
                        return UpdateCustomerOrderOperationHandler.updateCustomerOrder(options.parameters);
                    case Commerce.Proxy.Entities.CustomerOrderOperations.PrintPackingSlip:
                        break;
                    case Commerce.Proxy.Entities.CustomerOrderOperations.CreatePackingSlip:
                        UpdateCustomerOrderOperationHandler.createPackingSlip(asyncResult, options.parameters);
                        break;
                    case Commerce.Proxy.Entities.CustomerOrderOperations.CreatePickingList:
                        UpdateCustomerOrderOperationHandler.createPickingList(asyncResult, options.parameters);
                        break;
                    case Commerce.Proxy.Entities.CustomerOrderOperations.Return:
                        UpdateCustomerOrderOperationHandler.updateReturnCart(asyncResult, options.parameters.IReturnCustomerOrderParameter);
                        break;
                    default:
                        Commerce.RetailLogger.operationUpdateCustomerOrderInvalidOperationType(correlationId, options.operationType);
                        asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                        break;
                }
                return asyncResult.map(function () {
                    return { canceled: false };
                });
            };
            UpdateCustomerOrderOperationHandler.pickUpInStoreCustomerOrder = function (parameters, correlationId) {
                var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                var newCart = { Id: Commerce.Session.instance.cart.Id, CustomerOrderModeValue: Commerce.Proxy.Entities.CustomerOrderMode.Pickup };
                var asyncQueue = new Commerce.AsyncQueue();
                var requestedCartLines;
                var productsDictionary = new Commerce.Dictionary();
                var serialNumberAsyncQueue = new Commerce.AsyncQueue();
                asyncQueue
                    .enqueue(function () {
                    return cartManager.createOrUpdateCartAsync(newCart);
                })
                    .enqueue(function () {
                    var productIds = [];
                    parameters.PickUpInStoreParameter.CartLines.forEach(function (cartLine) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId))) {
                            productIds.push(cartLine.ProductId);
                        }
                        else {
                            productsDictionary.setItem(cartLine.ProductId, Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId));
                        }
                    });
                    if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                        parameters.PickUpInStoreParameter.CartLines.forEach(function (cartLine) {
                            serialNumberAsyncQueue.enqueue(function () {
                                var product = productsDictionary.getItem(cartLine.ProductId);
                                return serialNumberAsyncQueue.cancelOn(Commerce.ActivityHelper.getSerialNumberForUpdateCartLineAsyncQueue(product, cartLine).run());
                            });
                        });
                        return null;
                    }
                    else {
                        var channelId = 0;
                        return productManager.getByIdsAsync(productIds, channelId)
                            .done(function (productsFound) {
                            parameters.PickUpInStoreParameter.CartLines.forEach(function (cartLine) {
                                var product = Commerce.ArrayExtensions.firstOrUndefined(productsFound, function (product) {
                                    return product.ItemId === cartLine.ItemId;
                                });
                                Commerce.Session.instance.addToProductsInCartCache(product);
                                productsDictionary.setItem(cartLine.ProductId, product);
                                serialNumberAsyncQueue.enqueue(function () {
                                    return serialNumberAsyncQueue.cancelOn(Commerce.ActivityHelper.getSerialNumberForUpdateCartLineAsyncQueue(product, cartLine).run());
                                });
                            });
                        });
                    }
                }).enqueue(function () {
                    return asyncQueue.cancelOn(serialNumberAsyncQueue.run());
                }).enqueue(function () {
                    requestedCartLines = parameters.PickUpInStoreParameter.CartLines.map(function (cartLine) {
                        var product = productsDictionary.getItem(cartLine.ProductId);
                        var cartLineForPickup = { LineId: cartLine.LineId, Quantity: cartLine.Quantity };
                        if (product.Behavior.HasSerialNumber) {
                            cartLineForPickup.SerialNumber = cartLine.SerialNumber;
                        }
                        return cartLineForPickup;
                    });
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    return cartManager.updateCartLinesOnCartAsync(requestedCartLines);
                }).enqueue(function () {
                    var request = new Commerce.Payments.AddPreAuthorizedPaymentsToCartClientRequest(correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .recoverOnFailure(function (errors) {
                        return Commerce.NotificationHandler.displayClientErrors(errors)
                            .recoverOnFailure(function () {
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                    });
                });
                return asyncQueue.run();
            };
            UpdateCustomerOrderOperationHandler.updateReturnCart = function (asyncResult, parameters) {
                var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                var cart = parameters.returnCart;
                cartManager.createOrUpdateCartAsync(cart)
                    .done(function () { return asyncResult.resolve(); })
                    .fail(function (errors) { return asyncResult.reject(errors); });
            };
            UpdateCustomerOrderOperationHandler.updateCustomerOrder = function (parameters) {
                var errors = Operations.Validators.noExistingCart();
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                var asyncQueue = new Commerce.AsyncQueue();
                switch (parameters.UpdateParameter.CustomerOrderModeValue) {
                    case Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit:
                    case Commerce.Proxy.Entities.CustomerOrderMode.Cancellation:
                        asyncQueue.enqueue(function () {
                            var recallOrderServiceRequest = new Commerce.RecallOrderServiceRequest(Commerce.LoggerHelper.getNewCorrelationId(), parameters.UpdateParameter.salesId);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(recallOrderServiceRequest));
                        });
                        break;
                    case Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit:
                        asyncQueue.enqueue(function () {
                            return cartManager.recallCustomerQuote(parameters.UpdateParameter.salesId);
                        });
                        break;
                    default:
                        break;
                }
                asyncQueue.enqueue(function () {
                    return cartManager.setCustomerOrderModeAsync(parameters.UpdateParameter.CustomerOrderModeValue);
                });
                return asyncQueue.run();
            };
            UpdateCustomerOrderOperationHandler.createPackingSlip = function (asyncResult, parameters) {
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                salesOrderManager.createPackingSlip(parameters.CreatePackingSlipParameter.SalesId)
                    .done(function () { return asyncResult.resolve(); })
                    .fail(function (error) { return asyncResult.reject(error); });
            };
            UpdateCustomerOrderOperationHandler.createPickingList = function (asyncResult, parameters) {
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                salesOrderManager.createPickingList(parameters.CreatePickingListParameter.SalesId)
                    .done(function () { return asyncResult.resolve(); })
                    .fail(function (error) { return asyncResult.reject(error); });
            };
            return UpdateCustomerOrderOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.UpdateCustomerOrderOperationHandler = UpdateCustomerOrderOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var OpenUrlOperationHandler = (function (_super) {
            __extends(OpenUrlOperationHandler, _super);
            function OpenUrlOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OpenUrlOperationHandler.prototype.execute = function (options) {
                var urlParameters = options.actionProperty.split(";");
                if (Commerce.ArrayExtensions.hasElements(urlParameters) && urlParameters.length > 1) {
                    var uriToLaunch = urlParameters[0];
                    var isOpenInNewWindow = parseInt(urlParameters[1], 10) > 0;
                    if (isOpenInNewWindow) {
                        return Commerce.Host.instance.application.openNewWindowAsync(uriToLaunch, options.correlationId).done(function () {
                            Commerce.RetailLogger.urlOperationHandlerLaunchUriAsyncSucceded(options.correlationId);
                        }).fail(function () {
                            Commerce.RetailLogger.urlOperationHandlerLaunchUriAsyncFailed(options.correlationId);
                        })
                            .map(function () {
                            return {
                                canceled: false
                            };
                        });
                    }
                    else {
                        var urlOptions = {
                            url: uriToLaunch,
                            actionTitle: options.actionTitle
                        };
                        Commerce.ViewModelAdapter.navigate("UrlOperationView", urlOptions);
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    }
                }
                return Commerce.AsyncResult.createResolved({ canceled: true });
            };
            return OpenUrlOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.OpenUrlOperationHandler = OpenUrlOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ViewOrderFulfillmentLinesOperationHandler = (function (_super) {
            __extends(ViewOrderFulfillmentLinesOperationHandler, _super);
            function ViewOrderFulfillmentLinesOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ViewOrderFulfillmentLinesOperationHandler.prototype.execute = function (options) {
                options = options || { fulfillmentDeliveryType: undefined, correlationId: Commerce.StringExtensions.EMPTY };
                Commerce.ViewModelAdapter.navigate("FulfillmentLineView", options);
                return Commerce.VoidAsyncResult.createResolved();
            };
            return ViewOrderFulfillmentLinesOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ViewOrderFulfillmentLinesOperationHandler = ViewOrderFulfillmentLinesOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var ViewProductDetailsOperationHandler = (function (_super) {
            __extends(ViewProductDetailsOperationHandler, _super);
            function ViewProductDetailsOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ViewProductDetailsOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options) || Commerce.ObjectExtensions.isNullOrUndefined(options.cartLine)) {
                    throw "Invalid options provided to the ViewProductDetailsOperationHandler.execute method.";
                }
                var productId = options.cartLine.ProductId;
                var simpleProduct = Commerce.Session.instance.getFromProductsInCartCache(productId);
                var productDetailsOptions = {
                    productId: productId,
                    product: simpleProduct,
                    isSelectionMode: false,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                Commerce.ViewModelAdapter.navigate("SimpleProductDetailsView", productDetailsOptions);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return ViewProductDetailsOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ViewProductDetailsOperationHandler = ViewProductDetailsOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ViewReportsOperationHandler = (function (_super) {
            __extends(ViewReportsOperationHandler, _super);
            function ViewReportsOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ViewReportsOperationHandler.prototype.execute = function (options) {
                Commerce.ViewModelAdapter.navigate("ReportsView", options);
                return Commerce.VoidAsyncResult.createResolved();
            };
            return ViewReportsOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ViewReportsOperationHandler = ViewReportsOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ViewTimeClockEntriesOperationHandler = (function (_super) {
            __extends(ViewTimeClockEntriesOperationHandler, _super);
            function ViewTimeClockEntriesOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ViewTimeClockEntriesOperationHandler.prototype.execute = function (options) {
                options = options || {};
                var asyncResult = new Commerce.VoidAsyncResult();
                if (Commerce.ApplicationContext.Instance.deviceConfiguration.EnableTimeRegistration) {
                    Commerce.ViewModelAdapter.navigate("TimeClockManagerView");
                    asyncResult.resolve();
                }
                else {
                    Commerce.RetailLogger.operationTimeClockNotEnabled();
                    var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_TIME_CLOCK_DISABLED)];
                    asyncResult.reject(errors);
                }
                return asyncResult.map(function () {
                    return { canceled: false };
                });
            };
            return ViewTimeClockEntriesOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.ViewTimeClockEntriesOperationHandler = ViewTimeClockEntriesOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var VoidPaymentOperationHandler = (function (_super) {
            __extends(VoidPaymentOperationHandler, _super);
            function VoidPaymentOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoidPaymentOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart, tenderLines: options.tenderLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreVoidPayment, preTriggerOptions);
            };
            VoidPaymentOperationHandler.prototype.executePostTrigger = function (options, result) {
                var tenderLineIds = options.tenderLines.map(function (tenderLine) {
                    return tenderLine.TenderLineId;
                });
                var updatedTenderLines = Commerce.CartHelper.getTenderLineByTenderLineIds(Commerce.Session.instance.cart, tenderLineIds);
                var postTriggerOptions = { cart: Commerce.Session.instance.cart, tenderLines: updatedTenderLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostVoidPayment, postTriggerOptions);
            };
            VoidPaymentOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { tenderLines: [], correlationId: undefined };
                options.autoForceVoid = Commerce.ObjectExtensions.isNullOrUndefined(options.autoForceVoid) ? false : options.autoForceVoid;
                return options;
            };
            VoidPaymentOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(options.tenderLines)
                    || options.tenderLines[0].StatusValue === Commerce.Proxy.Entities.TenderLineStatus.Voided
                    || !options.tenderLines[0].IsVoidable) {
                    var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TENDERLINECANNOTBEVOIDED);
                    return Commerce.VoidAsyncResult.createRejected([error]);
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(options.correlationId)) {
                    options.correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                }
                var cartTenderLine = options.tenderLines[0];
                var isProcessedByMerchant = Commerce.TenderTypeHelper.isProcessedByMerchant(cartTenderLine.TenderTypeId);
                if (!isProcessedByMerchant) {
                    var messageResourceID = null;
                    if (Commerce.CartHelper.isInternalGiftCard(cartTenderLine)) {
                        messageResourceID = "string_5118";
                    }
                    return this.voidTenderLineInCart(cartTenderLine, messageResourceID, false, false, false, options.autoForceVoid);
                }
                var tenderLine = this.getTenderLineFromCart(cartTenderLine);
                var giftCardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
                var isVoidingGiftCardInCart = cartTenderLine.CardTypeId === giftCardTypeId
                    && cartTenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.None;
                if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine) && !isVoidingGiftCardInCart) {
                    return this.voidTenderLineInCartOnAsk(cartTenderLine, "string_29826", true, false, options.autoForceVoid, false);
                }
                else if (isVoidingGiftCardInCart) {
                    tenderLine = cartTenderLine;
                }
                var paymentType = Commerce.CartHelper.getPeripheralPaymentType(tenderLine);
                var paymentPeripheral;
                switch (paymentType) {
                    case Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController:
                        paymentPeripheral = Commerce.Peripherals.instance.cardPayment;
                        break;
                    case Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal:
                        paymentPeripheral = Commerce.Peripherals.instance.paymentTerminal;
                        break;
                    default:
                        break;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(paymentPeripheral)) {
                    return this.voidTenderLineInCart(cartTenderLine, "string_1194", false, false, true, options.autoForceVoid);
                }
                var peripheralQueue = new Commerce.AsyncQueue();
                var peripheralFailure = false;
                var localErrors = [];
                peripheralQueue.enqueue(function () {
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
                    var cardNumber = !Commerce.StringExtensions.isNullOrWhitespace(tenderLine.MaskedCardNumber)
                        ? tenderLine.MaskedCardNumber
                        : tenderLine.GiftCardId;
                    var tenderInfo = {
                        CardNumber: cardNumber,
                        TenderId: null,
                        CardTypeId: tenderLine.CardTypeId
                    };
                    var asyncResult;
                    if (paymentType === Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController) {
                        asyncResult = _this._voidTenderLineViaCardPayment(tenderLine, tenderType, tenderInfo, options.correlationId);
                    }
                    else {
                        asyncResult = _this._voidTenderLineViaPaymentTerminal(tenderLine, tenderType, tenderInfo, options.correlationId);
                    }
                    return peripheralQueue.cancelOn(asyncResult)
                        .map(function (result) {
                        return result.canceled ? null : result.data;
                    }).fail(function (errors) {
                        peripheralFailure = true;
                        localErrors = errors;
                    });
                }).enqueue(function (result) {
                    if (isVoidingGiftCardInCart) {
                        if (peripheralFailure) {
                            return Commerce.VoidAsyncResult.createRejected(localErrors);
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && result.IsApproved) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(result.PaymentSdkData)) {
                            tenderLine.Authorization = result.PaymentSdkData;
                        }
                        return peripheralQueue.cancelOn(_this.voidTenderLineInCart(tenderLine, "string_1191", true, false, false, options.autoForceVoid));
                    }
                    return _this.voidPaymentFailureHandler(cartTenderLine, options.autoForceVoid);
                });
                return peripheralQueue.run()
                    .recoverOnFailure(function (errors) {
                    if (peripheralFailure && !isVoidingGiftCardInCart) {
                        return _this.voidPaymentFailureHandler(cartTenderLine, options.autoForceVoid);
                    }
                    return Commerce.VoidAsyncResult.createRejected(errors);
                });
            };
            VoidPaymentOperationHandler.prototype._voidTenderLineViaPaymentTerminal = function (tenderLine, tenderType, tenderInfo, correlationId) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var voidPaymentInfo = null;
                asyncQueue.enqueue(function () {
                    var voidRequest = new Commerce.PaymentTerminalVoidPaymentRequest(tenderType.ConnectorId, tenderInfo, tenderLine.Amount, tenderLine.Authorization, null, correlationId);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(voidRequest)));
                }).enqueue(function (result) {
                    voidPaymentInfo = Commerce.ObjectExtensions.isNullOrUndefined(result.data) ? null : result.data.result;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(voidPaymentInfo) && voidPaymentInfo.IsApproved) {
                        return _this._printVoidedCardPaymentReceiptAsync(correlationId, tenderLine.CardTypeId, tenderLine.Currency, tenderLine.Amount, voidPaymentInfo, tenderType);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return asyncQueue.run().map(function (result) {
                    return { canceled: false, data: voidPaymentInfo };
                });
            };
            VoidPaymentOperationHandler.prototype._voidTenderLineViaCardPayment = function (tenderLine, tenderType, tenderInfo, correlationId) {
                var voidRequest = new Commerce.CardPaymentVoidPaymentRequest(tenderType.ConnectorId, tenderLine.Amount, tenderInfo, tenderLine.Authorization, null, correlationId, tenderLine.CardPaymentAccountId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(voidRequest))
                    .map(function (result) {
                    return { canceled: result.canceled, data: result.data.result };
                });
            };
            VoidPaymentOperationHandler.prototype.voidTenderLineInCartOnAsk = function (cartTenderLine, messageResourceID, isPreProcessed, skipSourceTypeInfoCode, autoForceVoid, forceVoid) {
                var _this = this;
                if (forceVoid === void 0) { forceVoid = false; }
                var dialogResult;
                var recoveryQueue = new Commerce.AsyncQueue();
                recoveryQueue.enqueue(function () {
                    if (autoForceVoid) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        return Commerce.ViewModelAdapter.displayMessage(messageResourceID, Commerce.MessageType.Info, Commerce.MessageBoxButtons.OKCancel, "string_1193")
                            .done(function (result) { dialogResult = result; });
                    }
                }).enqueue(function () {
                    if ((dialogResult === Commerce.DialogResult.Yes) || (dialogResult === Commerce.DialogResult.OK) || autoForceVoid) {
                        return recoveryQueue.cancelOn(_this.voidTenderLineInCart(cartTenderLine, messageResourceID, isPreProcessed, skipSourceTypeInfoCode, true, autoForceVoid));
                    }
                    return Commerce.VoidAsyncResult.createRejected();
                });
                return recoveryQueue.run();
            };
            VoidPaymentOperationHandler.prototype.voidTenderLineInCart = function (cartTenderLine, messageResourceID, isPreprocessed, skipSourceTypeInfoCode, forceVoid, autoForceVoid) {
                var _this = this;
                if (skipSourceTypeInfoCode === void 0) { skipSourceTypeInfoCode = false; }
                if (forceVoid === void 0) { forceVoid = false; }
                if (autoForceVoid === void 0) { autoForceVoid = false; }
                if (forceVoid) {
                    var cardNumber = "";
                    var cardType = "";
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cartTenderLine.PaymentCard)) {
                        if (cartTenderLine.PaymentCard.CardNumber) {
                            if (cartTenderLine.PaymentCard.CardNumber.length > 4) {
                                cardNumber = cartTenderLine.PaymentCard.CardNumber.substring(cartTenderLine.PaymentCard.CardNumber.length - 4);
                            }
                            else {
                                cardNumber = cartTenderLine.PaymentCard.CardNumber;
                            }
                        }
                        cardType = cartTenderLine.PaymentCard.CardTypeId;
                    }
                    var message = Commerce.StringExtensions.format("Card: {0} ({1}). Amount: {2}.", cardType, cardNumber, cartTenderLine.Amount);
                    Commerce.RetailLogger.viewsOrderPaymentViewPaymentWasForceVoided(message);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var sourceType = skipSourceTypeInfoCode ? undefined : Commerce.Proxy.Entities.ReasonCodeSourceType.VoidPayment;
                    var reasonCodesQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart, tenderLines: [cartTenderLine] }, function (c) {
                        return _this.cartManager.voidTenderLineAsync(c.tenderLines[0].TenderLineId, c.cart.ReasonCodeLines, isPreprocessed, forceVoid);
                    }, sourceType);
                    var asyncResult = reasonCodesQueue.run()
                        .recoverOnFailure(function (errors) {
                        if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTALREADYVOIDED)) {
                            return _this.cartManager.getCartByCartIdAsync(Commerce.Session.instance.cart.Id);
                        }
                        else if (!isPreprocessed) {
                            return _this.voidTenderLineInCartOnAsk(cartTenderLine, messageResourceID, true, true, autoForceVoid, true);
                        }
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    });
                    return asyncQueue.cancelOn(asyncResult);
                });
                return asyncQueue.run();
            };
            VoidPaymentOperationHandler.prototype.getTenderLineFromCart = function (cartTenderLine) {
                var cart = Commerce.Session.instance.cart;
                var tenderLine = null;
                if (Commerce.ArrayExtensions.hasElements(cart.TenderLines)) {
                    cart.TenderLines.forEach(function (currentTenderLine) {
                        if (currentTenderLine.TenderLineId === cartTenderLine.TenderLineId) {
                            tenderLine = currentTenderLine;
                        }
                    });
                }
                return tenderLine;
            };
            VoidPaymentOperationHandler.prototype.voidPaymentFailureHandler = function (cartTenderLine, autoForceVoid) {
                return this.voidTenderLineInCartOnAsk(cartTenderLine, "string_1194", true, false, autoForceVoid);
            };
            VoidPaymentOperationHandler.prototype._printVoidedCardPaymentReceiptAsync = function (correlationId, cardTypeId, currency, paymentAmount, paymentInfo, tenderType) {
                var isHardwareProfileConfigured = !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.hardwareProfile);
                if (Commerce.Config.printReceiptsOnCardDeclineOrVoid && isHardwareProfileConfigured && !Commerce.ObjectExtensions.isNullOrUndefined(paymentInfo)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(paymentInfo.PaymentSdkData)) {
                    var isRefundOperation = paymentAmount < 0;
                    cardTypeId = Commerce.StringExtensions.isNullOrWhitespace(cardTypeId) ? Commerce.Proxy.Entities.CardType.Unknown.toString().toUpperCase() : cardTypeId;
                    var printVoidedCardReceiptsRequest = new Commerce.PrintDeclinedOrVoidedCardReceiptsClientRequest(correlationId, cardTypeId, currency, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId, isRefundOperation, paymentInfo, tenderType);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(printVoidedCardReceiptsRequest))
                        .map(function (result) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }).recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.printDeclinedOrVoidedCardPaymentReceiptsFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                else {
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            return VoidPaymentOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.VoidPaymentOperationHandler = VoidPaymentOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var VoidProductsOperationHandler = (function (_super) {
            __extends(VoidProductsOperationHandler, _super);
            function VoidProductsOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoidProductsOperationHandler.prototype.executePreTrigger = function (options) {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: options.cartLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreVoidProducts, preTriggerOptions);
            };
            VoidProductsOperationHandler.prototype.executePostTrigger = function (options, result) {
                var lineIds = options.cartLines.map(function (cartLine) {
                    return cartLine.LineId;
                });
                var updatedCartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, lineIds);
                var postTriggerOptions = { cart: Commerce.Session.instance.cart, cartLines: updatedCartLines };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostVoidProducts, postTriggerOptions);
            };
            VoidProductsOperationHandler.prototype.sanitizeOptions = function (options) {
                options = options || { cartLines: undefined };
                return options;
            };
            VoidProductsOperationHandler.prototype.executeInternal = function (options) {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(options.cartLines)) {
                    var cartLines = Commerce.ObjectExtensions.clone(options.cartLines);
                    var cartLinesToVoid_1 = cartLines.filter(function (c) { return !c.IsVoided; });
                    var cartLinesToUnvoid_1 = cartLines.filter(function (c) { return c.IsVoided; });
                    var asyncQueue_1 = new Commerce.AsyncQueue();
                    var correlationId_1 = Commerce.LoggerHelper.getNewCorrelationId();
                    asyncQueue_1.enqueue(function () {
                        var checkRecoveryRequest = new Commerce.CheckForRecoveredPaymentTransactionClientRequest(correlationId_1, null, Commerce.Payments.TransactionReferenceAllowedActions.Read);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(checkRecoveryRequest)).done(function (result) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data.result.foundTransaction)) {
                                Commerce.RetailLogger.posOperationCanceledDueToRecoveredPayment("VoidLine", correlationId_1);
                                asyncQueue_1.cancel();
                            }
                        });
                    });
                    cartLines.forEach(function (c) { return c.IsVoided = !c.IsVoided; });
                    var relatedDiscountedLines_1 = this._processVoidRelatedLines(cartLinesToVoid_1);
                    var activity_2 = new Commerce.Activities.ConfirmRelatedLinesVoidActivity({
                        linesToBeVoided: cartLinesToVoid_1.concat(relatedDiscountedLines_1)
                    });
                    if (Commerce.ArrayExtensions.hasElements(relatedDiscountedLines_1)) {
                        asyncQueue_1.enqueue(function () {
                            return activity_2.execute().done(function () {
                                if (Commerce.ObjectExtensions.isNullOrUndefined(activity_2.response)) {
                                    asyncQueue_1.cancel();
                                }
                            });
                        });
                    }
                    var thirdPartyGcVoidPaymentOptions_1 = this.getVoidPaymentOptionsForThirdPartyGiftCards(cartLines, correlationId_1);
                    if (Commerce.ArrayExtensions.hasElements(thirdPartyGcVoidPaymentOptions_1.tenderLines)) {
                        asyncQueue_1.enqueue(function () {
                            var operationManager = Operations.OperationsManager.instance;
                            return operationManager.runOperation(Operations.RetailOperation.VoidPayment, thirdPartyGcVoidPaymentOptions_1);
                        });
                    }
                    asyncQueue_1.enqueue(function () {
                        if (Commerce.ArrayExtensions.hasElements(relatedDiscountedLines_1)) {
                            var compareCartLines = function (c1, c2) { return c1.LineId === c2.LineId; };
                            if (activity_2.response.mode === Commerce.Activities.RelatedLineVoidMode.All) {
                                relatedDiscountedLines_1.forEach(function (c) { c.IsVoided = true; });
                                cartLinesToVoid_1 = Commerce.ArrayExtensions.distinct(cartLinesToVoid_1.concat(relatedDiscountedLines_1), compareCartLines);
                            }
                        }
                        if (Commerce.ArrayExtensions.hasElements(cartLinesToVoid_1)) {
                            var lineNumbersToVoid = cartLinesToVoid_1.map(function (cartLine) {
                                return cartLine.LineNumber;
                            }).toString();
                            Commerce.RetailLogger.operationVoidProductsOperationHandlerVoidLines(lineNumbersToVoid);
                        }
                        if (Commerce.ArrayExtensions.hasElements(cartLinesToUnvoid_1)) {
                            var lineNumbersToUnvoid = cartLinesToUnvoid_1.map(function (cartLine) {
                                return cartLine.LineNumber;
                            }).toString();
                            Commerce.RetailLogger.operationVoidProductsOperationHandlerUnvoidLines(lineNumbersToUnvoid);
                        }
                        var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLinesToVoid_1 }, function (c) {
                            return _this.cartManager.voidCartLinesOnCartAsync(c.cartLines.concat(cartLinesToUnvoid_1));
                        }, Commerce.Proxy.Entities.ReasonCodeSourceType.VoidItem).run();
                        return asyncQueue_1.cancelOn(reasonCodesResult);
                    });
                    return asyncQueue_1.run();
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            VoidProductsOperationHandler.prototype.getVoidPaymentOptionsForThirdPartyGiftCards = function (cartLines, correlationId) {
                var options = { tenderLines: [], correlationId: correlationId };
                cartLines.forEach(function (cartLine) {
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByItemId(cartLine.Comment);
                    var isThirdPartyGiftCard = cartLine.IsGiftCardLine
                        && !Commerce.ObjectExtensions.isNullOrUndefined(tenderType)
                        && !Commerce.StringExtensions.isNullOrWhitespace(tenderType.ConnectorId);
                    if (isThirdPartyGiftCard) {
                        var giftCardId = Commerce.Proxy.Entities.CardType.GiftCard;
                        var tenderLine = {
                            MaskedCardNumber: cartLine.GiftCardId,
                            CardTypeId: giftCardId,
                            Amount: cartLine.TotalAmount,
                            Authorization: cartLine.ThirdPartyGiftCardInfo.Authorization,
                            TenderTypeId: tenderType.TenderTypeId,
                            IsVoidable: true,
                            StatusValue: Commerce.Proxy.Entities.TenderLineStatus.None
                        };
                        options.tenderLines.push(tenderLine);
                    }
                });
                return options;
            };
            VoidProductsOperationHandler.prototype._processVoidRelatedLines = function (cartLines) {
                var relatedDiscountedLines = [];
                var cartLinesById = new Commerce.Dictionary();
                Commerce.Session.instance.cart.CartLines.forEach(function (c) { return cartLinesById.setItem(c.LineId, c); });
                cartLines.forEach(function (c) {
                    if (Commerce.ArrayExtensions.hasElements(c.RelatedDiscountedLineIds)) {
                        c.RelatedDiscountedLineIds.forEach(function (r) {
                            if (cartLinesById.hasItem(r)) {
                                var line = Commerce.ObjectExtensions.clone(cartLinesById.getItem(r));
                                relatedDiscountedLines.push(line);
                                line.RelatedDiscountedLineIds.forEach(function (s) {
                                    var siblingLine = Commerce.ObjectExtensions.clone(cartLinesById.getItem(s));
                                    relatedDiscountedLines.push(siblingLine);
                                });
                            }
                        });
                    }
                });
                return relatedDiscountedLines;
            };
            return VoidProductsOperationHandler;
        }(Operations.PrePostTriggerOperationHandlerBase));
        Operations.VoidProductsOperationHandler = VoidProductsOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var VoidTransactionOperationHandler = (function (_super) {
            __extends(VoidTransactionOperationHandler, _super);
            function VoidTransactionOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoidTransactionOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cart: undefined };
                var asyncQueue = new Commerce.AsyncQueue();
                var isExternalGiftCard = false;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.cart)) {
                    asyncQueue.enqueue(function () {
                        var activity = new Commerce.Activities.GetTransactionActivity();
                        activity.responseHandler = function (response) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(response.cart)) {
                                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)]);
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        };
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                asyncQueue.cancel();
                                return;
                            }
                            options.cart = activity.response.cart;
                        });
                    });
                }
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                if (!Commerce.ObjectExtensions.isBoolean(options.promptConfirmation) || options.promptConfirmation) {
                    asyncQueue.enqueue(function () {
                        var checkRecoveryRequest = new Commerce.CheckForRecoveredPaymentTransactionClientRequest(correlationId, null, Commerce.Payments.TransactionReferenceAllowedActions.Remove);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(checkRecoveryRequest)).done(function (result) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data.result.foundTransaction)) {
                                Commerce.RetailLogger.posOperationCanceledDueToRecoveredPayment("VoidTransaction", correlationId);
                                asyncQueue.cancel();
                            }
                        });
                    });
                    asyncQueue.enqueue(function () {
                        var isSessionCart = Commerce.Session.instance.cart.Id === options.cart.Id;
                        if (isSessionCart && !Commerce.Session.instance.isCartInProgress) {
                            asyncQueue.cancel();
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        return Commerce.ViewModelAdapter.displayMessage("string_187", Commerce.MessageType.Info, Commerce.MessageBoxButtons.YesNo, null, 0)
                            .done(function (result) {
                            if (result !== Commerce.DialogResult.Yes) {
                                asyncQueue.cancel();
                            }
                        });
                    });
                }
                else {
                    Commerce.Peripherals.HardwareStation.HardwareStationContext.clearPaymentTransactionReferenceData("Cart Force Voided", null, correlationId);
                }
                asyncQueue.enqueue(function () {
                    isExternalGiftCard = VoidTransactionOperationHandler.isExternalGiftCardContainedInCart();
                    if (isExternalGiftCard) {
                        return Commerce.NotificationHandler.displayErrorMessage(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_AS_ACTIVE_THIRD_PARTY_GIFT_CARDS)
                            .always(function () {
                            asyncQueue.cancel();
                        });
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                asyncQueue.enqueue(function () {
                    var preTriggerOptions = { cart: options.cart };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreVoidTransaction, preTriggerOptions);
                    return asyncQueue.cancelOn(preTriggerResult);
                }).enqueue(function () {
                    var salesOrder;
                    var reasonCodesResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: options.cart }, function (c) {
                        return _this.cartManager.voidCartAsync(c.cart.Id, c.cart.ReasonCodeLines).done(function (result) {
                            salesOrder = result;
                        });
                    }, Commerce.Proxy.Entities.ReasonCodeSourceType.VoidTransaction).run();
                    return asyncQueue.cancelOn(reasonCodesResult).map(function () {
                        return salesOrder;
                    });
                }).enqueue(function (salesOrder) {
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration.PrintVoidTransactionReceipts) {
                        var printReceiptsAsyncQueue = new Commerce.AsyncQueue();
                        printReceiptsAsyncQueue.enqueue(function () {
                            var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                            return salesOrderManager.getReceiptsForPrintAsync(salesOrder.Id, false, Commerce.Proxy.Entities.ReceiptType.SalesReceipt, false, Commerce.Session.instance.Shift.ShiftId, Commerce.Session.instance.Shift.TerminalId, null, null, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                        }).enqueue(function (receipts) {
                            var receiptActivity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts });
                            return receiptActivity.execute().fail(function (errors) {
                                Commerce.RetailLogger.voidTransactionOperationFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                            });
                        });
                        return printReceiptsAsyncQueue.run().recoverOnFailure(function (errors) {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                            return Commerce.AsyncResult.createResolved({ canceled: false });
                        });
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                }).enqueue(function () {
                    var isSessionCart = Commerce.Session.instance.cart.Id === options.cart.Id;
                    if (isSessionCart) {
                        Commerce.Session.instance.clearCart();
                    }
                    if (Commerce.Peripherals.instance.lineDisplay) {
                        Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayIdleText();
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    var postTriggerOptions = { cart: options.cart };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostVoidTransaction, postTriggerOptions);
                });
                return asyncQueue.run();
            };
            VoidTransactionOperationHandler.isExternalGiftCardContainedInCart = function () {
                var cartContainsExternalGiftCard = false;
                Commerce.Session.instance.cart.CartLines.forEach(function (cartLine) {
                    var tenderType = null;
                    if (cartLine.IsGiftCardLine && !cartLine.IsVoided) {
                        tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByItemId(cartLine.ItemId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderType) && !Commerce.StringExtensions.isNullOrWhitespace(tenderType.ConnectorId)) {
                            cartContainsExternalGiftCard = true;
                            return;
                        }
                    }
                });
                return cartContainsExternalGiftCard;
            };
            return VoidTransactionOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.VoidTransactionOperationHandler = VoidTransactionOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var CompositeBarcodeScanner = (function () {
            function CompositeBarcodeScanner(scanners) {
                this._scannerEventHandlers = [];
                this._scanners = scanners;
            }
            CompositeBarcodeScanner.prototype.enableAsync = function (scannerMsgEventHandler) {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(this._scanners)) {
                    if (Commerce.ObjectExtensions.isFunction(scannerMsgEventHandler)) {
                        this._scannerEventHandlers.push(scannerMsgEventHandler);
                    }
                    if (this._scannerEventHandlers.length === 1) {
                        return Commerce.VoidAsyncResult.join(this._scanners.map(function (scanner) {
                            return scanner.enableAsync(function (barcode) {
                                scannerMsgEventHandler = _this._scannerEventHandlers[_this._scannerEventHandlers.length - 1];
                                if (!Commerce.StringExtensions.isNullOrWhitespace(barcode) && scannerMsgEventHandler) {
                                    scannerMsgEventHandler(barcode);
                                }
                            });
                        }));
                    }
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            CompositeBarcodeScanner.prototype.disableAsync = function () {
                if (Commerce.ArrayExtensions.hasElements(this._scanners)) {
                    this._scannerEventHandlers.pop();
                    if (this._scannerEventHandlers.length === 0) {
                        return Commerce.VoidAsyncResult.join(this._scanners.map(function (scanner) {
                            return scanner.disableAsync();
                        }));
                    }
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            return CompositeBarcodeScanner;
        }());
        Peripherals.CompositeBarcodeScanner = CompositeBarcodeScanner;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var CompositeMagneticStripeReader = (function () {
            function CompositeMagneticStripeReader(readers) {
                this._readerMsgEventHandlers = [];
                this._readers = readers;
            }
            CompositeMagneticStripeReader.prototype.enableAsync = function (readerMsgEventHandler, handlerSource) {
                var _this = this;
                if (Commerce.ArrayExtensions.hasElements(this._readers)) {
                    if (Commerce.ObjectExtensions.isFunction(readerMsgEventHandler)) {
                        this._readerMsgEventHandlers.push(readerMsgEventHandler);
                    }
                    Commerce.RetailLogger.peripheralsMagneticStripeReaderEnableRequest(handlerSource);
                    if (this._readerMsgEventHandlers.length === 1) {
                        return Commerce.VoidAsyncResult.join(this._readers.map(function (reader) {
                            return reader.enableAsync(function (cardInfo) {
                                readerMsgEventHandler = _this._readerMsgEventHandlers[_this._readerMsgEventHandlers.length - 1];
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(cardInfo) && readerMsgEventHandler) {
                                    readerMsgEventHandler(cardInfo);
                                }
                            }, handlerSource);
                        }));
                    }
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            CompositeMagneticStripeReader.prototype.disableAsync = function (handlerSource) {
                if (Commerce.ArrayExtensions.hasElements(this._readers)) {
                    this._readerMsgEventHandlers.pop();
                    Commerce.RetailLogger.peripheralsMagneticStripeReaderDisableRequest(handlerSource);
                    if (this._readerMsgEventHandlers.length === 0) {
                        return Commerce.VoidAsyncResult.join(this._readers.map(function (reader) {
                            return reader.disableAsync(handlerSource);
                        }));
                    }
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            return CompositeMagneticStripeReader;
        }());
        Peripherals.CompositeMagneticStripeReader = CompositeMagneticStripeReader;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var KeyboardBarcodeScanParser = (function () {
            function KeyboardBarcodeScanParser() {
                this._scanBuffer = "";
                this._isScanEnabled = false;
                this._keyboardEventHandlerPointer = this.keyboardEventHandler.bind(this);
            }
            KeyboardBarcodeScanParser.prototype.enableAsync = function (scannerMsgEventHandler) {
                var result = new Commerce.VoidAsyncResult();
                if (Commerce.ObjectExtensions.isFunction(scannerMsgEventHandler)) {
                    this._scannerMsgEventHandler = scannerMsgEventHandler;
                    if (!this._isScanEnabled) {
                        Peripherals.KeyboardEventAggregator.addListener(this._keyboardEventHandlerPointer, 7);
                        this._isScanEnabled = true;
                    }
                }
                result.resolve();
                return result;
            };
            KeyboardBarcodeScanParser.prototype.disableAsync = function () {
                if (this._isScanEnabled) {
                    Peripherals.KeyboardEventAggregator.removeListener(this._keyboardEventHandlerPointer);
                    this._isScanEnabled = false;
                }
                return Commerce.VoidAsyncResult.createResolved();
            };
            KeyboardBarcodeScanParser.prototype.keyboardEventHandler = function (e) {
                var _this = this;
                if (!Peripherals.KeyboardEventAggregator.isEnterOnKeydownOrNonEnterOnKeypress(e)) {
                    return true;
                }
                var pressedChar = String.fromCharCode(e.keyCode);
                if (!Peripherals.KeyboardEventAggregator.isInputField(e.srcElement) || this.isBarcodeScannerEnabled(e.srcElement)) {
                    if (this._scanBuffer === "") {
                        this._readerStreamTimerID = setTimeout(function () { return _this.validateBarcodeReaderStream(); }, 125);
                        this._keystrokeLogTimerID = setTimeout(function () { return _this._scanBuffer = ""; }, 2000);
                    }
                    if (this._scanBuffer.length > 0 && e.keyCode === 13) {
                        this.fireEvent();
                        return false;
                    }
                    else {
                        this._scanBuffer += pressedChar;
                    }
                }
                return true;
            };
            KeyboardBarcodeScanParser.prototype.validateBarcodeReaderStream = function () {
                if (this._scanBuffer.length < 4) {
                    this._scanBuffer = "";
                }
            };
            KeyboardBarcodeScanParser.prototype.fireEvent = function () {
                if (this._scanBuffer.length > 0) {
                    clearInterval(this._keystrokeLogTimerID);
                    clearInterval(this._readerStreamTimerID);
                    var barcode = this._scanBuffer;
                    this._scanBuffer = "";
                    this._scannerMsgEventHandler.call(this, barcode);
                }
            };
            KeyboardBarcodeScanParser.prototype.isBarcodeScannerEnabled = function (element) {
                var dataset = element.dataset || {};
                return Commerce.StringExtensions.compare(dataset.axBarcodeScannerEnabled, "true", true) === 0;
            };
            return KeyboardBarcodeScanParser;
        }());
        Peripherals.KeyboardBarcodeScanParser = KeyboardBarcodeScanParser;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var KeyboardEventAggregator = (function () {
            function KeyboardEventAggregator() {
            }
            KeyboardEventAggregator.addListener = function (eventHandler, priority) {
                if (priority === void 0) { priority = 10; }
                if (!Commerce.ObjectExtensions.isFunction(eventHandler)) {
                    return;
                }
                KeyboardEventAggregator._handlers.push({ eventHandler: eventHandler, priority: priority });
                KeyboardEventAggregator._handlers.sort(function (a, b) { return a.priority - b.priority; });
                if (!KeyboardEventAggregator._isEventEnabled) {
                    document.addEventListener("keydown", KeyboardEventAggregator.scanHandler, true);
                    document.addEventListener("keypress", KeyboardEventAggregator.scanHandler, true);
                    KeyboardEventAggregator._isEventEnabled = true;
                }
            };
            KeyboardEventAggregator.removeListener = function (eventHandler) {
                var i = KeyboardEventAggregator._handlers.length;
                while (i--) {
                    if (KeyboardEventAggregator._handlers[i].eventHandler === eventHandler) {
                        KeyboardEventAggregator._handlers.splice(i, 1);
                    }
                }
                if (KeyboardEventAggregator._isEventEnabled && KeyboardEventAggregator._handlers.length === 0) {
                    document.removeEventListener("keydown", KeyboardEventAggregator.scanHandler, true);
                    document.removeEventListener("keypress", KeyboardEventAggregator.scanHandler);
                    KeyboardEventAggregator._isEventEnabled = false;
                }
            };
            KeyboardEventAggregator.isInputField = function (element) {
                var tag = element.tagName.toLowerCase();
                var type = element.type;
                if (!Commerce.StringExtensions.isNullOrWhitespace(type)) {
                    type = type.toLowerCase();
                }
                return tag === "textarea" || (tag === "input"
                    && (type === "text"
                        || type === "password"
                        || type === "search"
                        || type === "number"
                        || type === "email"
                        || type === "url"));
            };
            KeyboardEventAggregator.isEnterOnKeydownOrNonEnterOnKeypress = function (e) {
                return ((e.type === "keydown") && (e.keyCode === 13)) || ((e.type === "keypress") && (e.keyCode !== 13));
            };
            KeyboardEventAggregator.scanHandler = function (e) {
                for (var i in KeyboardEventAggregator._handlers) {
                    if (!KeyboardEventAggregator._handlers[i].eventHandler(e)) {
                        e.target.blur();
                        document.body.focus();
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        return false;
                    }
                }
                return true;
            };
            KeyboardEventAggregator._handlers = [];
            return KeyboardEventAggregator;
        }());
        Peripherals.KeyboardEventAggregator = KeyboardEventAggregator;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var KeyboardNumPadParser = (function () {
            function KeyboardNumPadParser() {
                var _this = this;
                this._publishers = [];
                var callback = function (e) {
                    return !_this.keyboardPressEvent(e);
                };
                Peripherals.KeyboardEventAggregator.addListener(callback, 6);
            }
            KeyboardNumPadParser.prototype.enable = function (publisher) {
                this._publishers.push(publisher);
            };
            KeyboardNumPadParser.prototype.disable = function () {
                this._publishers.pop();
            };
            KeyboardNumPadParser.prototype.keyboardPressEvent = function (event) {
                var _publisher = this._publishers[this._publishers.length - 1];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(_publisher)) {
                    return _publisher.publish(event);
                }
                return false;
            };
            return KeyboardNumPadParser;
        }());
        Peripherals.KeyboardNumPadParser = KeyboardNumPadParser;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var MSRKeyboardSwipeParser = (function () {
            function MSRKeyboardSwipeParser() {
                this._swipeBuffer = "";
                this._fastCharsEaten = "";
                this._captureKeys = false;
                this._track2Started = false;
                this._shouldEatFastKeyStrokes = false;
                this._isSwipeEnabled = false;
                this._cardNumber = "";
                this._expiryMonth = 0;
                this._expiryYear = 0;
                this._track1 = "";
                this._track2 = "";
                this._swipeHandlerPointer = this._swipeParserDocumentKeyPressHandler.bind(this);
            }
            MSRKeyboardSwipeParser.prototype.enableAsync = function (readerMsgEventHandler) {
                this.enable(readerMsgEventHandler);
                var result = new Commerce.VoidAsyncResult();
                result.resolve();
                return result;
            };
            MSRKeyboardSwipeParser.prototype.disableAsync = function () {
                this.disable();
                return Commerce.VoidAsyncResult.createResolved();
            };
            MSRKeyboardSwipeParser.prototype.disable = function () {
                if (this._isSwipeEnabled) {
                    this._isSwipeEnabled = false;
                    Peripherals.KeyboardEventAggregator.removeListener(this._swipeHandlerPointer);
                }
            };
            MSRKeyboardSwipeParser.prototype.enable = function (readerMsgEventHandler) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(readerMsgEventHandler)) {
                    return;
                }
                this._readerMsgEventHandler = readerMsgEventHandler;
                if (!this._isSwipeEnabled) {
                    Peripherals.KeyboardEventAggregator.addListener(this._swipeHandlerPointer, 5);
                    this._isSwipeEnabled = true;
                }
            };
            MSRKeyboardSwipeParser.prototype._swipeParserDocumentKeyPressHandler = function (e) {
                var _this = this;
                if (!Peripherals.KeyboardEventAggregator.isEnterOnKeydownOrNonEnterOnKeypress(e)) {
                    return true;
                }
                var key = e.keyCode;
                var pressedChar = String.fromCharCode(key);
                if (this._shouldEatFastKeyStrokes) {
                    this._fastCharsEaten += pressedChar;
                    return false;
                }
                this._keyPressedSourceElement = e.srcElement;
                if (this._captureKeys) {
                    this._swipeBuffer = this._swipeBuffer + pressedChar;
                    if (pressedChar === MSRKeyboardSwipeParser.END_TRACK) {
                        if (this._track2Started) {
                            this._shouldEatFastKeyStrokes = true;
                            setTimeout(function () {
                                _this._eatFastKeyStrokes();
                            }, MSRKeyboardSwipeParser.FAST_CHARS_TIMEOUT_MS);
                            this._captureKeys = false;
                            this._track2Started = false;
                            this._clearIsCardReaderStreamTimer();
                            this._clearKeystrokeLogTimer();
                            Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserParseingCardStarted(this._swipeBuffer);
                            if (this._parseSwipe()) {
                                Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserParseingCardFinished();
                                if (typeof (this._readerMsgEventHandler) === "function") {
                                    this._readerMsgEventHandler.call(this, {
                                        CardNumber: this._cardNumber,
                                        ExpirationMonth: this._expiryMonth,
                                        ExpirationYear: this._expiryYear,
                                        Track1: this._track1 || Commerce.StringExtensions.EMPTY,
                                        Track2: this._track2 || Commerce.StringExtensions.EMPTY,
                                        Track3: Commerce.StringExtensions.EMPTY
                                    });
                                }
                            }
                            else {
                                Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserParseingCardFailed(this._swipeBuffer);
                            }
                            this._swipeBuffer = Commerce.StringExtensions.EMPTY;
                            this._cardNumber = Commerce.StringExtensions.EMPTY;
                            this._expiryMonth = 0;
                            this._expiryYear = 0;
                            this._track1 = Commerce.StringExtensions.EMPTY;
                            this._track2 = Commerce.StringExtensions.EMPTY;
                        }
                        else {
                            this._track2Started = true;
                        }
                    }
                    return false;
                }
                else if (pressedChar === MSRKeyboardSwipeParser.START_TRACK || pressedChar === MSRKeyboardSwipeParser.START_TRACK_2) {
                    this._clearIsCardReaderStreamTimer();
                    this._clearKeystrokeLogTimer();
                    this._captureKeys = true;
                    this._swipeBuffer = pressedChar;
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserSetCardReaderStreamTimer(MSRKeyboardSwipeParser.FAST_CHARS_TIMEOUT_MS);
                    this._cardReaderStreamTimerID = setTimeout(function () { _this._cardReaderStreamProcessor(); }, MSRKeyboardSwipeParser.FAST_CHARS_TIMEOUT_MS);
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserSetKeystrokeLogTimer(MSRKeyboardSwipeParser.KEYSTROKE_TIMEOUT_MS);
                    this._keystrokeLogTimerID = setTimeout(function () { _this._keystrokeLogTimer(); }, MSRKeyboardSwipeParser.KEYSTROKE_TIMEOUT_MS);
                    document.body.focus();
                    e.stopImmediatePropagation();
                    if (pressedChar === MSRKeyboardSwipeParser.START_TRACK_2) {
                        this._track2Started = true;
                    }
                    return false;
                }
                else {
                    return true;
                }
            };
            MSRKeyboardSwipeParser.prototype._parseSwipe = function () {
                var swipeCopy = this._swipeBuffer;
                if (swipeCopy === null || swipeCopy.length === 0) {
                    return true;
                }
                var cardNumber;
                var expMonth, expYear;
                var reTrackDelimiters = /\?/g;
                var reTrack1FieldDelimiters = /\^|\}/g;
                var reTrack2FieldDelimiters = /\=/g;
                var reLastFirstNameDelimiter = /\//g;
                var reDigits = /^\d+$/;
                var reTrackDelimMatches = new Array();
                var reTrack1FieldDelimMatches = new Array();
                var reTrack2FieldDelimMatches = new Array();
                var reLastFirstNameDelimMatches = new Array();
                var match;
                swipeCopy = swipeCopy.replace("\n", "").replace("\r", "");
                while ((match = reTrackDelimiters.exec(swipeCopy)) != null) {
                    reTrackDelimMatches.push(match);
                }
                if (reTrackDelimMatches.length < 1) {
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserParseingTrackDelimitersFailed(swipeCopy);
                    return false;
                }
                var currentTrackIndex = 0;
                var track1EndIdx = undefined;
                if (reTrackDelimMatches.length > 1) {
                    track1EndIdx = reTrackDelimMatches[currentTrackIndex++].index;
                    this._track1 = swipeCopy.substring(0, track1EndIdx + 1);
                    while ((match = reTrack1FieldDelimiters.exec(this._track1)) != null) {
                        reTrack1FieldDelimMatches.push(match);
                    }
                    if (reTrack1FieldDelimMatches.length < 2) {
                        Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserParseingTrack1FieldDelimFailed(reTrack1FieldDelimMatches.length, this._track1);
                        return false;
                    }
                    var firstSep_1 = reTrack1FieldDelimMatches[0].index;
                    var secondSep_1 = reTrack1FieldDelimMatches[1].index;
                    var rawName = this._track1.substring(firstSep_1 + 1, secondSep_1);
                    while ((match = reLastFirstNameDelimiter.exec(rawName)) != null) {
                        reLastFirstNameDelimMatches.push(match);
                    }
                }
                var track2EndIdx = reTrackDelimMatches[currentTrackIndex++].index;
                this._track2 = swipeCopy.substring(track1EndIdx + 1, track2EndIdx + 1);
                while ((match = reTrack2FieldDelimiters.exec(this._track2)) != null) {
                    reTrack2FieldDelimMatches.push(match);
                }
                if (reTrack2FieldDelimMatches.length < 1 || reTrack2FieldDelimMatches.length > 3) {
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserParseingTrack2FieldDelimFailed(reTrack2FieldDelimMatches.length, this._track2);
                    return false;
                }
                var firstSep = reTrack2FieldDelimMatches[0].index;
                var secondSep = 0;
                if (reTrack2FieldDelimMatches.length > 1) {
                    secondSep = reTrack2FieldDelimMatches[1].index;
                }
                cardNumber = this._track2.substring(1, firstSep);
                if (secondSep === 0 || secondSep !== firstSep + 1) {
                    expYear = this._track2.substring(firstSep + 1, firstSep + 1 + 2);
                    if (!reDigits.test(expYear)) {
                        Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserInvalidExpirationYear(expYear);
                        return false;
                    }
                    expMonth = this._track2.substring(firstSep + 3, firstSep + 3 + 2);
                    if (!reDigits.test(expMonth)) {
                        Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserInvalidExpirationMonth(expMonth);
                        return false;
                    }
                }
                else {
                    expYear = "0";
                    expMonth = "0";
                }
                this._expiryMonth = parseInt(expMonth, 10);
                this._expiryYear = parseInt(expYear.valueOf(), 10);
                this._cardNumber = cardNumber;
                return true;
            };
            MSRKeyboardSwipeParser.prototype._keystrokeLogTimer = function () {
                this._keystrokeLogTimerID = -1;
                Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserEnteringKeystrokeLogTimer();
                if (this._captureKeys) {
                    this._captureKeys = false;
                    this._track2Started = false;
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserKeystrokeLogTimerTimeOut(this._swipeBuffer);
                    this._swipeBuffer = Commerce.StringExtensions.EMPTY;
                }
                else {
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserKeystrokeLogTimerFinished();
                }
            };
            MSRKeyboardSwipeParser.prototype._cardReaderStreamProcessor = function () {
                var _this = this;
                this._cardReaderStreamTimerID = -1;
                var secondChar = this._swipeBuffer.substring(1, 2);
                if (this._swipeBuffer.length < 5 || secondChar === MSRKeyboardSwipeParser.START_TRACK) {
                    this._captureKeys = false;
                    this._track2Started = false;
                    if (this._isSwipeEnabled && (this._keyPressedSourceElement.tagName.toLowerCase() === "input")) {
                        var input = this._keyPressedSourceElement;
                        if (input.type.toLowerCase() === "text" || input.type.toLowerCase() === "password") {
                            var maxLength = input.maxLength;
                            if (maxLength > 0) {
                                input.value = (input.value + this._swipeBuffer).substring(0, maxLength);
                            }
                            else {
                                input.value += this._swipeBuffer;
                            }
                        }
                    }
                    else {
                        this._shouldEatFastKeyStrokes = true;
                        this._swipeBuffer = Commerce.StringExtensions.EMPTY;
                        this._captureKeys = false;
                        this._track2Started = false;
                        setTimeout(function () { _this._eatFastKeyStrokes(); }, MSRKeyboardSwipeParser.FAST_CHARS_TIMEOUT_MS);
                    }
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserInvalidSwipeBuffer(this._swipeBuffer);
                    this._swipeBuffer = Commerce.StringExtensions.EMPTY;
                }
            };
            MSRKeyboardSwipeParser.prototype._eatFastKeyStrokes = function () {
                var _this = this;
                if (this._fastCharsEaten.length < 5) {
                    this._shouldEatFastKeyStrokes = false;
                    this._fastCharsEaten = "";
                    return;
                }
                Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserFastCharsEaten(this._fastCharsEaten);
                this._fastCharsEaten = "";
                setTimeout(function () { _this._eatFastKeyStrokes(); }, MSRKeyboardSwipeParser.FAST_CHARS_TIMEOUT_MS);
            };
            MSRKeyboardSwipeParser.prototype._clearIsCardReaderStreamTimer = function () {
                if (this._cardReaderStreamTimerID !== -1) {
                    clearInterval(this._cardReaderStreamTimerID);
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserCardReaderStreamTimerCanceled();
                    this._cardReaderStreamTimerID = -1;
                }
            };
            MSRKeyboardSwipeParser.prototype._clearKeystrokeLogTimer = function () {
                if (this._keystrokeLogTimerID !== -1) {
                    clearInterval(this._keystrokeLogTimerID);
                    Commerce.RetailLogger.peripheralsMSRKeyboardSwipeParserKeystrokeLogTimerCanceled();
                    this._keystrokeLogTimerID = -1;
                }
            };
            MSRKeyboardSwipeParser.START_TRACK = "%";
            MSRKeyboardSwipeParser.START_TRACK_2 = ";";
            MSRKeyboardSwipeParser.END_TRACK = "?";
            MSRKeyboardSwipeParser.KEYSTROKE_TIMEOUT_MS = 7500;
            MSRKeyboardSwipeParser.FAST_CHARS_TIMEOUT_MS = 250;
            return MSRKeyboardSwipeParser;
        }());
        Peripherals.MSRKeyboardSwipeParser = MSRKeyboardSwipeParser;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var PeripheralsBase = (function () {
            function PeripheralsBase() {
                this.numPad = new Peripherals.KeyboardNumPadParser();
            }
            PeripheralsBase.prototype.initializeAsync = function () {
                var htmlElementForEvents = $("#contenthost").get(0);
                Commerce.Session.instance.addCartStateUpdateHandler(htmlElementForEvents, PeripheralsBase._cartUpdateHandler);
                Commerce.EventProxy.Instance.addCustomEventHandler(htmlElementForEvents, "CustomerStateUpdateEvent", PeripheralsBase._customerUpdateHandler);
                Commerce.EventProxy.Instance.addCustomEventHandler(htmlElementForEvents, "IsLoggedOnStateUpdateEvent", PeripheralsBase._isLoggedOnStateUpdateHandler);
                return Commerce.VoidAsyncResult.createResolved();
            };
            PeripheralsBase._cartUpdateHandler = function (args) {
                if (args.cartStateType === Commerce.CartStateType.Started) {
                    Commerce.Peripherals.HardwareStation.HardwareStationContext.clearPaymentTransactionReferenceData("new cart created", null, "does not exist");
                }
                switch (args.cartStateType) {
                    case Commerce.CartStateType.Started:
                    case Commerce.CartStateType.Reloaded:
                        var lockHardwareStation = Commerce.Peripherals.instance
                            && !Commerce.ApplicationContext.Instance.deviceConfiguration.SelectHardwareStationOnTendering;
                        if (lockHardwareStation) {
                            Commerce.PaymentHelper.beginTransactionAsync();
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(Peripherals.instance.cardPayment)) {
                            Commerce.Operations.HardwareStationHelper.selectActiveHardwareStationAsync(true);
                            Peripherals.instance.cardPayment.loadCartMerchantPropertiesAsync();
                        }
                        break;
                    case Commerce.CartStateType.Updated:
                        var shouldDisplayLines = Peripherals.HardwareStation.LineDisplayHelper.shouldDisplayLines(args.oldCart, Commerce.Session.instance.cart);
                        if (Commerce.Peripherals.instance.paymentTerminal && shouldDisplayLines) {
                            var request = new Commerce.PaymentTerminalUpdateLinesRequest(Commerce.Session.instance.cart);
                            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                        }
                        if (Commerce.Peripherals.instance.lineDisplay && shouldDisplayLines) {
                            var hasOriginalCart = !Commerce.ObjectExtensions.isNullOrUndefined(args.oldCart);
                            if (hasOriginalCart) {
                                Peripherals.HardwareStation.LineDisplayHelper.displayLineItems(args.oldCart, Commerce.Session.instance.cart);
                            }
                        }
                        break;
                    case Commerce.CartStateType.Completed:
                        if (Commerce.Peripherals.instance.paymentTerminal) {
                            var request = new Commerce.PaymentTerminalEndTransactionRequest();
                            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                        }
                        else if (Commerce.Peripherals.instance.cardPayment) {
                            var request = new Commerce.CardPaymentEndTransactionRequest();
                            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                        }
                        if (Commerce.Peripherals.instance.pinPad) {
                            Commerce.Peripherals.instance.pinPad.closeDevice();
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(Peripherals.instance.cardPayment)) {
                            Peripherals.instance.cardPayment.clearCartMerchantProperties();
                            Commerce.Operations.HardwareStationHelper.clearSelection();
                        }
                        break;
                }
                if (Commerce.Peripherals.instance.dualDisplay) {
                    Commerce.Peripherals.instance.dualDisplay.sendCartChangedMessage();
                }
            };
            PeripheralsBase._customerUpdateHandler = function (oldCustomer) {
                if (Commerce.Peripherals.instance.dualDisplay) {
                    Commerce.Peripherals.instance.dualDisplay.sendCustomerChangedMessage();
                }
            };
            PeripheralsBase._isLoggedOnStateUpdateHandler = function (args) {
                if (Commerce.Peripherals.instance.dualDisplay) {
                    Commerce.Peripherals.instance.dualDisplay.sendIsLoggedOnStateChangedMessage();
                }
            };
            return PeripheralsBase;
        }());
        Peripherals.PeripheralsBase = PeripheralsBase;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var RefinerFactory = (function () {
            function RefinerFactory() {
            }
            RefinerFactory.createTextRefiner = function (id, keyName, selectedValue, validationFunction) {
                return new Refiners.TextRefiner(id, keyName, selectedValue, validationFunction);
            };
            RefinerFactory.createDateRefiner = function (id, keyName, startDate, endDate, validationFunction) {
                return new Refiners.DateRefiner(id, keyName, startDate, endDate, validationFunction);
            };
            RefinerFactory.createSingleSelectListRefiner = function (id, keyName, selectedValues, values) {
                return new Refiners.ListRefiner(id, keyName, Refiners.RefinerType.SingleSelectList, selectedValues, values);
            };
            RefinerFactory.createMultiSelectListRefiner = function (id, keyName, selectedValues, values) {
                return new Refiners.ListRefiner(id, keyName, Refiners.RefinerType.MultiSelectList, selectedValues, values);
            };
            return RefinerFactory;
        }());
        Refiners.RefinerFactory = RefinerFactory;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var RemoteTaskManager;
    (function (RemoteTaskManager) {
        "use strict";
    })(RemoteTaskManager = Commerce.RemoteTaskManager || (Commerce.RemoteTaskManager = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var RemoteTaskManager;
    (function (RemoteTaskManager) {
        "use strict";
    })(RemoteTaskManager = Commerce.RemoteTaskManager || (Commerce.RemoteTaskManager = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var RemoteTaskManager;
    (function (RemoteTaskManager) {
        "use strict";
    })(RemoteTaskManager = Commerce.RemoteTaskManager || (Commerce.RemoteTaskManager = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var RemoteTaskManager;
    (function (RemoteTaskManager) {
        "use strict";
    })(RemoteTaskManager = Commerce.RemoteTaskManager || (Commerce.RemoteTaskManager = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var RemoteTaskManager;
    (function (RemoteTaskManager) {
        "use strict";
        var OutgoingTask = (function () {
            function OutgoingTask(timeoutInMilliseconds) {
                if (timeoutInMilliseconds === void 0) { timeoutInMilliseconds = 30000; }
                this.timeoutInMilliseconds = timeoutInMilliseconds;
            }
            Object.defineProperty(OutgoingTask.prototype, "timeoutInMilliseconds", {
                get: function () {
                    return this._timeoutInMilliseconds;
                },
                set: function (value) {
                    this._timeoutInMilliseconds = value;
                },
                enumerable: true,
                configurable: true
            });
            return OutgoingTask;
        }());
        RemoteTaskManager.OutgoingTask = OutgoingTask;
    })(RemoteTaskManager = Commerce.RemoteTaskManager || (Commerce.RemoteTaskManager = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var RemoteTaskManager;
    (function (RemoteTaskManager_1) {
        "use strict";
        var RemoteTaskManager = (function () {
            function RemoteTaskManager(remoteMessageHandler) {
                var _this = this;
                this._runningOutgoingTasks = new Commerce.Dictionary();
                this._incomingTasks = new Commerce.Dictionary();
                this._remoteMessageHandler = remoteMessageHandler;
                this._remoteMessageHandler.addMessageHandler("RemoteTaskResponse", function (data) {
                    _this._handleOutgoingTaskResponse(data.correlationId, data.taskInstanceId, data.message);
                });
                this._remoteMessageHandler.addMessageHandler("IncomingTaskRequest", function (data) {
                    _this._handleIncomingTaskRequest(data.correlationId, data.taskInstanceId, data.message);
                });
                this._remoteMessageHandler.start();
            }
            RemoteTaskManager.prototype.registerIncomingTask = function (incomingTask) {
                if (this._incomingTasks.hasItem(incomingTask.name)) {
                    Commerce.RetailLogger.remoteTaskManagerInternalTaskReplaced(this.remoteTaskManagerID, incomingTask.name);
                }
                this._incomingTasks.setItem(incomingTask.name, incomingTask);
            };
            RemoteTaskManager.prototype.runOutgoingTask = function (correlationId, outgoingTask) {
                var _this = this;
                try {
                    if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                        correlationId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                    }
                }
                catch (e) {
                }
                var promise = new Promise(function (resolve, reject) {
                    var outgoingTaskId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                    var runningOutgoingTask = {
                        outgoingTask: outgoingTask,
                        resolve: resolve,
                        reject: reject
                    };
                    Commerce.RetailLogger.remoteTaskManagerRunOutgoingTaskStart(correlationId, _this.remoteTaskManagerID, outgoingTask.name, outgoingTaskId);
                    try {
                        var runMessage_1 = {
                            name: outgoingTask.name,
                            parameters: JSON.stringify(outgoingTask.parameters)
                        };
                        var serializedMessageRequest = JSON.stringify(runMessage_1);
                        _this._runningOutgoingTasks.setItem(outgoingTaskId, runningOutgoingTask);
                        _this._sendRemoteMessage(correlationId, "RemoteTaskRequest", outgoingTaskId, serializedMessageRequest);
                        if (outgoingTask.timeoutInMilliseconds > 0) {
                            window.setTimeout(function () {
                                if (_this._runningOutgoingTasks.hasItem(outgoingTaskId)) {
                                    var runningOutgoingTask_1 = _this._runningOutgoingTasks.getItem(outgoingTaskId);
                                    _this._runningOutgoingTasks.removeItem(outgoingTaskId);
                                    runningOutgoingTask_1.reject("The task has timed out");
                                    Commerce.RetailLogger.remoteTaskManagerRunOutgoingTaskTimedOut(correlationId, runMessage_1.name, outgoingTaskId, runningOutgoingTask_1.outgoingTask.timeoutInMilliseconds, runMessage_1.parameters);
                                }
                            }, outgoingTask.timeoutInMilliseconds);
                        }
                        Commerce.RetailLogger.remoteTaskManagerRunOutgoingTaskSuccessful(correlationId, runMessage_1.name, outgoingTaskId);
                    }
                    catch (e) {
                        Commerce.RetailLogger.remoteTaskManagerRunOutgoingTaskFailed(correlationId, outgoingTask.name, outgoingTaskId, Commerce.ErrorHelper.serializeError(e));
                        throw e;
                    }
                });
                return promise;
            };
            RemoteTaskManager.prototype._handleOutgoingTaskResponse = function (correlationId, taskInstanceId, message) {
                Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResponseStart(correlationId, this.remoteTaskManagerID, taskInstanceId, message);
                var outgoingTaskResult;
                var isSuccessful = true;
                try {
                    outgoingTaskResult = JSON.parse(message);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(outgoingTaskResult) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(outgoingTaskResult.isSuccessful)) {
                        Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResponseFailedExpectedParameterValueNotSet(correlationId, taskInstanceId, message);
                        isSuccessful = false;
                    }
                }
                catch (e) {
                    Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResponseFailedUnableToDeseriaizeMessage(correlationId, taskInstanceId, message, Commerce.ErrorHelper.serializeError(e));
                    isSuccessful = false;
                }
                if (isSuccessful) {
                    this._handleOutgoingTaskResult(correlationId, taskInstanceId, outgoingTaskResult);
                }
                Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResponseEnd(correlationId, this.remoteTaskManagerID, taskInstanceId, message);
            };
            RemoteTaskManager.prototype._handleIncomingTaskRequest = function (correlationId, taskInstanceId, message) {
                Commerce.RetailLogger.remoteTaskManagerHandleIncomingTaskRequestStart(correlationId, this.remoteTaskManagerID, taskInstanceId, message);
                var methodResult = {
                    isSuccessful: true,
                    data: null
                };
                var incomingTaskRequest;
                try {
                    incomingTaskRequest = JSON.parse(message);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(incomingTaskRequest) ||
                        Commerce.ObjectExtensions.isNullOrUndefined(incomingTaskRequest.name)) {
                        Commerce.RetailLogger.remoteTaskManagerHandleIncomingTaskRequestFailedExpectedParameterValueNotSet(correlationId, taskInstanceId, message);
                        var error = { message: "The incoming task request was parsed but did not contain name value." };
                        methodResult.isSuccessful = false;
                        methodResult.data = JSON.stringify(error);
                    }
                }
                catch (e) {
                    Commerce.RetailLogger.remoteTaskManagerHandleIncomingTaskRequestFailedUnableToDeseriaizeMessage(correlationId, taskInstanceId, message, Commerce.ErrorHelper.serializeError(e));
                    var error = { message: "The incoming task request could not be parsed." };
                    methodResult.isSuccessful = false;
                    methodResult.data = JSON.stringify(error);
                }
                if (methodResult.isSuccessful) {
                    this._runIncomingTask(correlationId, taskInstanceId, incomingTaskRequest);
                }
                else {
                    this._sendRemoteMessage(correlationId, "IncomingTaskResponse", taskInstanceId, JSON.stringify(methodResult));
                }
                Commerce.RetailLogger.remoteTaskManagerHandleIncomingTaskRequestEnd(correlationId, this.remoteTaskManagerID, taskInstanceId, message);
            };
            RemoteTaskManager.prototype._handleOutgoingTaskResult = function (correlationId, taskInstanceId, outgoingTaskResult) {
                var serializedOutgoingTaskResult = Commerce.StringExtensions.EMPTY;
                try {
                    serializedOutgoingTaskResult = JSON.stringify(outgoingTaskResult);
                }
                catch (e) {
                }
                Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResultStart(correlationId, this.remoteTaskManagerID, taskInstanceId, serializedOutgoingTaskResult);
                if (!this._runningOutgoingTasks.hasItem(taskInstanceId)) {
                    Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResultEndAsOutgoingTaskNotFound(correlationId, taskInstanceId);
                }
                else {
                    var runningOutgoingTask = this._runningOutgoingTasks.getItem(taskInstanceId);
                    this._runningOutgoingTasks.removeItem(taskInstanceId);
                    if (outgoingTaskResult.isSuccessful) {
                        try {
                            var deserializedOutgoingTaskResultData = runningOutgoingTask.outgoingTask.DeserializeResult(outgoingTaskResult.data);
                            Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResultSuccessfulWithOutgoingTaskSucceeded(correlationId, taskInstanceId);
                            runningOutgoingTask.resolve(deserializedOutgoingTaskResultData);
                        }
                        catch (e) {
                            var serializedErrorData = Commerce.ErrorHelper.serializeError(e);
                            Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResultFailedUnableToParseTaskResultData(correlationId, taskInstanceId, outgoingTaskResult.data, serializedErrorData);
                            runningOutgoingTask.reject(serializedErrorData);
                        }
                    }
                    else {
                        try {
                            var error = JSON.parse(outgoingTaskResult.data);
                            Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResultSuccessfulWithOutgoingTaskFailed(correlationId, taskInstanceId, error.message);
                            runningOutgoingTask.reject(error.message);
                        }
                        catch (e) {
                            var serializedErrorData = Commerce.ErrorHelper.serializeError(e);
                            Commerce.RetailLogger.remoteTaskManagerHandleOutgoingTaskResultFailedUnableToParseTaskFailureData(correlationId, taskInstanceId, outgoingTaskResult.data, serializedErrorData);
                            runningOutgoingTask.reject("Unable to parse the reason the outgoing task failed");
                        }
                    }
                }
            };
            RemoteTaskManager.prototype._runIncomingTask = function (correlationId, taskInstanceId, incomingTaskRequest) {
                var _this = this;
                var serializedIncomingTaskRequest = Commerce.StringExtensions.EMPTY;
                try {
                    serializedIncomingTaskRequest = JSON.stringify(incomingTaskRequest);
                }
                catch (e) {
                }
                Commerce.RetailLogger.remoteTaskManagerRunIncomingTaskStart(correlationId, this.remoteTaskManagerID, taskInstanceId, serializedIncomingTaskRequest);
                var methodResult = {
                    isSuccessful: true,
                    data: null
                };
                try {
                    if (this._incomingTasks.hasItem(incomingTaskRequest.name)) {
                        var input = null;
                        if (!Commerce.StringExtensions.isNullOrWhitespace(incomingTaskRequest.parameters)) {
                            input = { serializedInputValue: incomingTaskRequest.parameters };
                        }
                        Commerce.RetailLogger.remoteTaskManagerRunIncomingTaskExecuteTask(correlationId, taskInstanceId, incomingTaskRequest.name, JSON.stringify(input));
                        this._incomingTasks.getItem(incomingTaskRequest.name).action(input).then(function (result) {
                            var resultValue = {
                                isSuccessful: true,
                                data: JSON.stringify(result)
                            };
                            Commerce.RetailLogger.remoteTaskManagerRunIncomingTaskSuccessfulWithIncomingTaskSucceeded(correlationId, taskInstanceId, incomingTaskRequest.name);
                            _this._sendRemoteMessage(correlationId, "IncomingTaskResponse", taskInstanceId, JSON.stringify(resultValue));
                        }).catch(function (reason) {
                            var actionError = { message: reason };
                            var resultValue = {
                                isSuccessful: false,
                                data: JSON.stringify(actionError)
                            };
                            Commerce.RetailLogger.remoteTaskManagerRunIncomingTaskSuccessfulWithIncomingTaskFailed(correlationId, taskInstanceId, incomingTaskRequest.name, reason);
                            _this._sendRemoteMessage(correlationId, "IncomingTaskResponse", taskInstanceId, JSON.stringify(resultValue));
                        });
                    }
                    else {
                        Commerce.RetailLogger.remoteTaskManagerRunIncomingTaskRequestFailedTaskNotSupported(correlationId, taskInstanceId, incomingTaskRequest.name);
                        var error = { message: "The specified incoming task is not supported" };
                        methodResult.isSuccessful = false;
                        methodResult.data = JSON.stringify(error);
                    }
                }
                catch (e) {
                    var errorData = Commerce.ErrorHelper.serializeError(e);
                    Commerce.RetailLogger.remoteTaskManagerRunIncomingTaskRequestFailedErrorWhenRunningIncomingTask(this.remoteTaskManagerID, taskInstanceId, incomingTaskRequest.name, errorData);
                    var error = { message: errorData };
                    methodResult.isSuccessful = false;
                    methodResult.data = JSON.stringify(error);
                }
                if (!methodResult.isSuccessful) {
                    this._sendRemoteMessage(correlationId, "IncomingTaskResponse", taskInstanceId, JSON.stringify(methodResult));
                }
                Commerce.RetailLogger.remoteTaskManagerRunIncomingTaskEnd(correlationId, this.remoteTaskManagerID, taskInstanceId, serializedIncomingTaskRequest);
            };
            RemoteTaskManager.prototype._sendRemoteMessage = function (correlationId, messageType, taskInstanceId, messageData) {
                var remoteMessageData = {
                    correlationId: correlationId, taskInstanceId: taskInstanceId, message: messageData
                };
                this._remoteMessageHandler.sendMessage(messageType, remoteMessageData);
            };
            return RemoteTaskManager;
        }());
        RemoteTaskManager_1.RemoteTaskManager = RemoteTaskManager;
    })(RemoteTaskManager = Commerce.RemoteTaskManager || (Commerce.RemoteTaskManager = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CommerceRuntime = (function () {
        function CommerceRuntime(configuration) {
            this._runtimeConfiguration = Object.freeze(configuration);
        }
        CommerceRuntime.prototype.getConfiguration = function () {
            return this._runtimeConfiguration;
        };
        CommerceRuntime.prototype.executeAsync = function (request) {
            var _this = this;
            if (request === null || typeof request === "undefined") {
                return Promise.reject([new Commerce.Proxy.Entities.Error("string_14001")]);
            }
            var config = this.getConfiguration();
            var loader = config.compositionLoader;
            return this.interceptAsync(request, config.request.interceptor, loader.getRequestInterceptors(request), function () {
                return _this.executeHandlerAsync(request);
            }, request.correlationId);
        };
        CommerceRuntime.prototype.executeHandlerAsync = function (request) {
            var config = this.getConfiguration();
            var loader = config.compositionLoader;
            return this.interceptAsync(request, config.requestHandler.interceptor, loader.getRequestHandlerInterceptors(request), function () {
                var handler = loader.getRequestHandler(request);
                if (handler === null || typeof handler === "undefined") {
                    var typeName = void 0;
                    try {
                        typeName = Commerce.PrototypeHelper.getPrototypeChainTypeName(request);
                    }
                    catch (ex) {
                        typeName = "Unexpected type.";
                    }
                    return Promise.reject([new Commerce.Proxy.Entities.Error("string_14002", false, null, typeName)]);
                }
                return handler.executeAsync(request);
            }, request.correlationId);
        };
        CommerceRuntime.prototype.interceptAsync = function (request, configuration, interceptors, interceptee, intercepteeCorrelationId) {
            var _this = this;
            if (interceptors.length === 0) {
                return this.executeInterceptee(interceptee, intercepteeCorrelationId);
            }
            var topDownInterceptors = interceptors;
            var bottomUpInterceptors = topDownInterceptors.slice().reverse();
            var preQueue = new Commerce.AsyncQueue();
            bottomUpInterceptors.forEach(function (interceptor) {
                if (interceptor.onInterceptingAsync) {
                    preQueue.enqueue(function () {
                        var result;
                        try {
                            result = interceptor.onInterceptingAsync(request);
                        }
                        catch (error) {
                        }
                        if (result === null || typeof result === "undefined") {
                            result = Promise.resolve({ canceled: false });
                        }
                        return Commerce.AsyncResult.fromPromise(result).map(function (value) {
                            value = value || { canceled: true };
                            return { canceled: value.canceled };
                        });
                    }).cancel(function (args) {
                        return args.canceled;
                    });
                }
            });
            var preAndHandlerQueue = preQueue.enqueue(function () {
                return Commerce.AsyncResult.fromPromise(_this.executeInterceptee(interceptee, intercepteeCorrelationId))
                    .map(function (value) {
                    value = value || { canceled: true, data: null };
                    return { canceled: value.canceled, data: value.data };
                });
            });
            var executionQueue = new Commerce.AsyncQueue();
            executionQueue.enqueue(function () {
                return preAndHandlerQueue.run().map(function (value) {
                    var preAndHandlerResult = value.data;
                    if (preAndHandlerResult === null || typeof preAndHandlerResult === "undefined") {
                        preAndHandlerResult = { canceled: true, data: null };
                    }
                    return preAndHandlerResult;
                }).recoverOnFailure(function (errors) {
                    return Commerce.AsyncResult.createResolved(Commerce.ErrorHelper.toProxyErrors(errors));
                });
            }).enqueue(function (result) {
                var postQueue = new Commerce.AsyncQueue()
                    .enqueue(function () {
                    return Commerce.AsyncResult.createResolved(result);
                });
                topDownInterceptors.forEach(function (interceptor) {
                    if (interceptor.onInterceptedAsync) {
                        postQueue.enqueue(function (args) {
                            var result;
                            try {
                                result = interceptor.onInterceptedAsync(request, args);
                            }
                            catch (error) {
                            }
                            if (result === null || typeof result === "undefined") {
                                return Commerce.AsyncResult.createResolved(args);
                            }
                            var interceptedErrors;
                            return Commerce.VoidAsyncResult.fromPromise(result)
                                .recoverOnFailure(function (errors) {
                                interceptedErrors = errors;
                                return Commerce.VoidAsyncResult.createResolved();
                            }).map(function () {
                                if (interceptedErrors != null) {
                                    return interceptedErrors;
                                }
                                return args;
                            });
                        });
                    }
                });
                return postQueue.run().map(function (value) {
                    return value.data;
                });
            });
            var interceptionResult;
            var interceptionAsyncResult = new Commerce.AsyncResult();
            executionQueue.run().done(function (result) {
                interceptionResult = result.data;
            }).fail(function (errors) {
                interceptionResult = Commerce.ErrorHelper.toProxyErrors(errors);
            }).always(function () {
                if (interceptionResult instanceof Array) {
                    interceptionAsyncResult.reject(interceptionResult);
                }
                else {
                    if (interceptionResult === null || typeof interceptionResult === "undefined") {
                        interceptionResult = { canceled: true, data: null };
                    }
                    interceptionAsyncResult.resolve(interceptionResult);
                }
            });
            return interceptionAsyncResult.getPromise();
        };
        CommerceRuntime.prototype.executeInterceptee = function (interceptee, intercepteeCorrelationId) {
            var result;
            try {
                result = interceptee();
                if (result === null || typeof result === "undefined") {
                    result = Promise.resolve({ canceled: true, data: null });
                }
                else {
                    result = result.catch(function (handlerError) {
                        return Promise.reject(Commerce.ErrorHelper.toProxyErrors(handlerError, intercepteeCorrelationId));
                    });
                }
            }
            catch (error) {
                result = Promise.reject(Commerce.ErrorHelper.toProxyErrors(error, intercepteeCorrelationId));
            }
            return result;
        };
        return CommerceRuntime;
    }());
    Commerce.CommerceRuntime = CommerceRuntime;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PosStringResourceManager = (function () {
        function PosStringResourceManager(getStringByIdImpl) {
            if (!Commerce.ObjectExtensions.isFunction(getStringByIdImpl)) {
                throw new Error("Invalid parameters provided to PosStringResourceManager constructor. 'getStringByIdImpl' must be a function.");
            }
            this._getStringByIdImpl = getStringByIdImpl;
            this._includeStringIds = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVELOPER_MODE_SHOW_STRING_IDS) === "true";
            this._customStringsMap = new Commerce.Dictionary();
        }
        PosStringResourceManager.prototype.getString = function (resourceId) {
            if (Commerce.StringExtensions.isNullOrWhitespace(resourceId)) {
                return resourceId;
            }
            var resourceValueOverride = this._customStringsMap.getItem(resourceId);
            var localizedMessage;
            if (Commerce.ObjectExtensions.isNullOrUndefined(resourceValueOverride)) {
                localizedMessage = this._getStringByIdImpl(resourceId);
            }
            else {
                localizedMessage = resourceValueOverride.Text;
            }
            if (Commerce.StringExtensions.beginsWith(resourceId, PosStringResourceManager.STRING_RESOURCE_PREFIX, true)) {
                if (resourceId === localizedMessage) {
                    Commerce.RetailLogger.coreCannotMapResourceMessage(resourceId);
                }
                else if ((this._includeStringIds) && (resourceId !== PosStringResourceManager.DEVELOPER_MODE_SHOW_STRING_IDS_RESOURCE_NAME)) {
                    var stringIDFormat = this.getString(PosStringResourceManager.DEVELOPER_MODE_SHOW_STRING_IDS_RESOURCE_NAME);
                    if (stringIDFormat !== PosStringResourceManager.DEVELOPER_MODE_SHOW_STRING_IDS_RESOURCE_NAME) {
                        localizedMessage = Commerce.StringExtensions.format(stringIDFormat, resourceId.substr(7), localizedMessage);
                    }
                }
            }
            return localizedMessage;
        };
        PosStringResourceManager.prototype.setCustomStringValues = function (customStrings) {
            this._customStringsMap.clear();
            this._customStringsMap.setItems(customStrings, function (customString) { return PosStringResourceManager.STRING_RESOURCE_PREFIX +
                customString.TextId.toString(); });
        };
        PosStringResourceManager.prototype.setIncludeStringIdsMode = function (showStringIds) {
            this._includeStringIds = showStringIds;
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVELOPER_MODE_SHOW_STRING_IDS, Commerce.StringExtensions.EMPTY + showStringIds);
        };
        PosStringResourceManager.prototype.isIncludeStringIdsModeEnabled = function () {
            return this._includeStringIds;
        };
        PosStringResourceManager.DEVELOPER_MODE_SHOW_STRING_IDS_RESOURCE_NAME = "string_7414";
        PosStringResourceManager.STRING_RESOURCE_PREFIX = "string_";
        return PosStringResourceManager;
    }());
    Commerce.PosStringResourceManager = PosStringResourceManager;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ThrowIf;
    (function (ThrowIf) {
        function argumentIsNotObject(val, parameterName) {
            if (Commerce.ObjectExtensions.isNull(val) || !Commerce.ObjectExtensions.isObject(val)) {
                throw new TypeError("The argument '" + parameterName + "' should be an object.");
            }
        }
        ThrowIf.argumentIsNotObject = argumentIsNotObject;
        function argumentIsNotFunction(val, parameterName) {
            if (!Commerce.ObjectExtensions.isFunction(val)) {
                throw new TypeError("The argument '" + parameterName + "' should be a function.");
            }
        }
        ThrowIf.argumentIsNotFunction = argumentIsNotFunction;
        function argumentIsNotString(val, parameterName) {
            if (!Commerce.ObjectExtensions.isString(val)) {
                throw new TypeError("The argument '" + parameterName + "' should be a string.");
            }
        }
        ThrowIf.argumentIsNotString = argumentIsNotString;
        function argumentIsNotStringOrNull(val, parameterName) {
            if (!Commerce.ObjectExtensions.isNull(val) && !Commerce.ObjectExtensions.isString(val)) {
                throw new TypeError("The argument '" + parameterName + "' should be a string or null.");
            }
        }
        ThrowIf.argumentIsNotStringOrNull = argumentIsNotStringOrNull;
    })(ThrowIf = Commerce.ThrowIf || (Commerce.ThrowIf = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var Configuration;
        (function (Configuration) {
            "use strict";
        })(Configuration = TaskRecorder.Configuration || (TaskRecorder.Configuration = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var ViewModel;
        (function (ViewModel) {
            "use strict";
            var TaskRecorderStepViewModel = (function () {
                function TaskRecorderStepViewModel(model) {
                    var _this = this;
                    Commerce.ThrowIf.argumentIsNotObject(model, "model");
                    this.id = model.Id;
                    this.sequence = ko.observable(model.Sequence);
                    this.text = ko.observable(model.Description);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(model.Annotations) && model.Annotations.length > 0) {
                        this.notes = ko.observable(model.Annotations[0].Description);
                    }
                    else {
                        this.notes = ko.observable(Commerce.StringExtensions.EMPTY);
                    }
                    this.parent = ko.observable(null);
                    this.displayNumber = ko.computed(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(_this.sequence())) {
                            return Commerce.StringExtensions.EMPTY;
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(_this.parent())) {
                            return _this.sequence().toString();
                        }
                        return _this.parent().displayNumber() + "." + _this.sequence().toString();
                    }, this);
                    this.description = ko.computed(function () {
                        return _this.text();
                    });
                    this.editable = true;
                    this.oDataClass = Commerce.Proxy.Entities.TaskRecorderODataType.commandUserAction;
                    this.commandName = model.CommandName;
                    if (Commerce.ArrayExtensions.hasElements(model.Arguments)) {
                        try {
                            this.stepInfo = JSON.parse(model.Arguments[0].Value);
                        }
                        catch (ex) {
                            Commerce.RetailLogger.taskRecorderCommandArgumentsParseError(ex.toString(), model.Arguments[0].Value);
                            this.stepInfo = null;
                        }
                    }
                    this.controlName = model.ControlName;
                    this.controlType = model.ControlType;
                    this.viewContextId = model.FormId;
                    this.screenshotUri = model.ScreenshotUri;
                }
                TaskRecorderStepViewModel.prototype.toModel = function () {
                    return TaskRecorder.Model.RecordingFactory.createNewCommand(this.id, this.commandName, this.text(), this.notes(), this.screenshotUri, this.stepInfo, this.controlName, this.controlType, this.viewContextId);
                };
                return TaskRecorderStepViewModel;
            }());
            ViewModel.TaskRecorderStepViewModel = TaskRecorderStepViewModel;
        })(ViewModel = TaskRecorder.ViewModel || (TaskRecorder.ViewModel = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var ViewModel;
        (function (ViewModel) {
            "use strict";
            var TaskRecorderTaskViewModel = (function () {
                function TaskRecorderTaskViewModel(model, beginTaskViewModel) {
                    var _this = this;
                    Commerce.ThrowIf.argumentIsNotObject(model, "model");
                    this.id = model.Id;
                    this.sequence = ko.observable(model.Sequence);
                    this.parent = ko.observable(null);
                    this.taskType = model.UserActionTypeValue;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(beginTaskViewModel)) {
                        this.name = ko.observable(model.Name);
                        this.comment = ko.observable(model.Comment);
                    }
                    else {
                        this.name = beginTaskViewModel.name;
                        this.comment = beginTaskViewModel.comment;
                    }
                    this.displayNumber = ko.computed(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(_this.sequence())) {
                            return Commerce.StringExtensions.EMPTY;
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(_this.parent())) {
                            return _this.sequence().toString();
                        }
                        return _this.parent().displayNumber() + "." + _this.sequence().toString();
                    }, this);
                    this.description = ko.computed(function () {
                        var taskPrefix = _this.taskType === TaskRecorder.Model.TaskRecorderTaskType.Begin ?
                            Commerce.ViewModelAdapter.getResourceString("string_10098") : Commerce.ViewModelAdapter.getResourceString("string_10099");
                        return taskPrefix + _this.name();
                    });
                    this.editable = (this.taskType === TaskRecorder.Model.TaskRecorderTaskType.Begin);
                    this.oDataClass = Commerce.Proxy.Entities.TaskRecorderODataType.taskUserAction;
                }
                TaskRecorderTaskViewModel.prototype.toModel = function () {
                    return TaskRecorder.Model.RecordingFactory.createNewTask(this.id, this.name(), this.comment(), this.description(), this.taskType);
                };
                return TaskRecorderTaskViewModel;
            }());
            ViewModel.TaskRecorderTaskViewModel = TaskRecorderTaskViewModel;
        })(ViewModel = TaskRecorder.ViewModel || (TaskRecorder.ViewModel = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var ViewModel;
        (function (ViewModel) {
            "use strict";
            var NodeType;
            (function (NodeType) {
                NodeType[NodeType["none"] = 0] = "none";
                NodeType[NodeType["scope"] = 1] = "scope";
                NodeType[NodeType["taskUserAction"] = 2] = "taskUserAction";
                NodeType[NodeType["userAction"] = 3] = "userAction";
            })(NodeType || (NodeType = {}));
            var TaskRecorderSessionViewModel = (function () {
                function TaskRecorderSessionViewModel(model) {
                    var _this = this;
                    Commerce.ThrowIf.argumentIsNotObject(model, "model");
                    this._viewContextsByViewId = new Commerce.Dictionary();
                    this.name = ko.observable(model.Name);
                    this.description = ko.observable(model.Description);
                    this.activeTask = ko.observable(null);
                    this.nodes = ko.observableArray([]);
                    this.resetSequence();
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(model.FormContextEntries)) {
                        model.FormContextEntries.forEach(function (formContextDictionaryEntry) {
                            _this.addViewToDictionary(formContextDictionaryEntry.FormContext.FormID, formContextDictionaryEntry.FormContext.FormName);
                        });
                    }
                    this.parseRecording(model.RootScope);
                }
                TaskRecorderSessionViewModel.prototype.startTask = function (taskViewModel) {
                    taskViewModel.parent(this.activeTask());
                    taskViewModel.sequence(this.getNextSequence());
                    this.nodes.push(taskViewModel);
                    this.activeTask(taskViewModel);
                    this.resetSequence();
                };
                TaskRecorderSessionViewModel.prototype.endTask = function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeTask())) {
                        throw new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_SESSION_NO_ACTIVE_TASK);
                    }
                    var task = TaskRecorder.Model.RecordingFactory.createNewTask(TaskRecorder.TaskRecorderUtil.generateGuid(), null, null, null, TaskRecorder.Model.TaskRecorderTaskType.End);
                    var taskViewModel = new ViewModel.TaskRecorderTaskViewModel(task, this.activeTask());
                    taskViewModel.parent(this.activeTask());
                    taskViewModel.sequence(this.getNextSequence());
                    this.nodes.push(taskViewModel);
                    this.activeTask((this.activeTask().parent()));
                    this.restoreSequence();
                    this.scrollDown();
                };
                TaskRecorderSessionViewModel.prototype.addView = function (viewName) {
                    var viewId = this.findView(viewName);
                    if (!Commerce.StringExtensions.isNullOrWhitespace(viewId)) {
                        return viewId;
                    }
                    viewId = this.generateViewId(viewName);
                    this.addViewToDictionary(viewId, viewName);
                    return viewId;
                };
                TaskRecorderSessionViewModel.prototype.addStep = function (stepViewModel) {
                    stepViewModel.parent(this.activeTask());
                    stepViewModel.sequence(this.getNextSequence());
                    this.nodes.push(stepViewModel);
                    this.scrollDown();
                };
                TaskRecorderSessionViewModel.prototype.scrollDown = function () {
                    var listSteps = document.getElementsByClassName(TaskRecorderSessionViewModel.LIST_STEPS_CLASS_NAME);
                    if (listSteps.length === 0) {
                        return;
                    }
                    listSteps[0].scrollTop = listSteps[0].scrollHeight;
                };
                TaskRecorderSessionViewModel.prototype.toModel = function () {
                    var recording = TaskRecorder.Model.RecordingFactory.createNew(this.name(), this.description());
                    recording.RootScope.Sequence = 0;
                    recording.FormContextEntries = [];
                    this._currentNodeIndex = 0;
                    this._currentModelSequence = 0;
                    this.buildRecording(recording, recording.RootScope);
                    return recording;
                };
                TaskRecorderSessionViewModel.prototype.buildRecording = function (recording, currentScope) {
                    var _loop_1 = function () {
                        var node = this_1.nodes()[this_1._currentNodeIndex];
                        this_1._currentNodeIndex++;
                        var dataModel = node.toModel();
                        dataModel.Sequence = ++this_1._currentModelSequence;
                        dataModel.ParentScopeId = currentScope.Id;
                        dataModel.ParentSequence = currentScope.Sequence;
                        currentScope.Children.push(dataModel);
                        if (node.oDataClass !== Commerce.Proxy.Entities.TaskRecorderODataType.commandUserAction) {
                            if (node.taskType === TaskRecorder.Model.TaskRecorderTaskType.Begin) {
                                var scope = TaskRecorder.Model.RecordingFactory.createNewScope(TaskRecorder.TaskRecorderUtil.generateGuid(), null, null, TaskRecorder.Model.ScopeType.Task);
                                scope.Sequence = ++this_1._currentModelSequence;
                                scope.ParentScopeId = currentScope.Id;
                                scope.ParentSequence = currentScope.Sequence;
                                currentScope.Children.push(scope);
                                this_1.buildRecording(recording, scope);
                            }
                            else {
                                return { value: void 0 };
                            }
                        }
                        else {
                            var viewContextId_1 = node.viewContextId;
                            var existingFormContextDictionaryEntry = Commerce.ArrayExtensions.firstOrUndefined(recording.FormContextEntries, function (formContextDictionaryEntry) {
                                return viewContextId_1 === formContextDictionaryEntry.FormId;
                            });
                            if (Commerce.ObjectExtensions.isNullOrUndefined(existingFormContextDictionaryEntry)) {
                                var newFormContextDictionaryEntry = TaskRecorder.Model.RecordingFactory.createFormContextDictionaryEntry(viewContextId_1, this_1._viewContextsByViewId.getItem(viewContextId_1), recording.Name, dataModel.Sequence);
                                recording.FormContextEntries.push(newFormContextDictionaryEntry);
                            }
                        }
                    };
                    var this_1 = this;
                    while (this._currentNodeIndex < this.nodes().length) {
                        var state_1 = _loop_1();
                        if (typeof state_1 === "object")
                            return state_1.value;
                    }
                };
                TaskRecorderSessionViewModel.prototype.parseRecording = function (currentScope) {
                    var _this = this;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(currentScope)) {
                        currentScope.Children.forEach(function (node) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(node)) {
                                switch (_this.getNodeType(node)) {
                                    case NodeType.scope:
                                        _this.parseRecording(node);
                                        break;
                                    case NodeType.taskUserAction:
                                        var taskUserAction = node;
                                        if (taskUserAction.UserActionTypeValue === TaskRecorder.Model.TaskRecorderTaskType.Begin) {
                                            _this.startTask(new ViewModel.TaskRecorderTaskViewModel(taskUserAction));
                                        }
                                        else {
                                            _this.endTask();
                                        }
                                        break;
                                    case NodeType.userAction:
                                        _this.addStep(new ViewModel.TaskRecorderStepViewModel(node));
                                        break;
                                }
                            }
                        });
                    }
                };
                TaskRecorderSessionViewModel.prototype.getNodeType = function (node) {
                    var nodeObj = node;
                    if (Commerce.ObjectExtensions.isNumber(nodeObj.ScopeTypeValue)) {
                        return NodeType.scope;
                    }
                    if (Commerce.ObjectExtensions.isString(nodeObj.TaskId)) {
                        return NodeType.taskUserAction;
                    }
                    if (Commerce.ObjectExtensions.isString(nodeObj.GlobalId)) {
                        return NodeType.userAction;
                    }
                    return NodeType.none;
                };
                TaskRecorderSessionViewModel.prototype.resetSequence = function () {
                    this._sequence = 0;
                };
                TaskRecorderSessionViewModel.prototype.restoreSequence = function () {
                    var maxSequence = 0;
                    var nodes = this.nodes();
                    for (var i = (nodes.length - 1); i >= 0; i--) {
                        var element = nodes[i];
                        if ((element.parent() === this.activeTask()) && (element.sequence() > maxSequence)) {
                            maxSequence = element.sequence();
                        }
                    }
                    this._sequence = maxSequence;
                };
                TaskRecorderSessionViewModel.prototype.getNextSequence = function () {
                    return ++this._sequence;
                };
                TaskRecorderSessionViewModel.prototype.generateViewId = function (viewName) {
                    return Commerce.StringExtensions.format(TaskRecorderSessionViewModel.VIEW_ID_MASK, viewName, TaskRecorder.TaskRecorderUtil.generateGuid());
                };
                TaskRecorderSessionViewModel.prototype.addViewToDictionary = function (viewId, viewName) {
                    if (this._viewContextsByViewId.hasItem(viewId)) {
                        return;
                    }
                    this._viewContextsByViewId.setItem(viewId, viewName);
                };
                TaskRecorderSessionViewModel.prototype.findView = function (viewName) {
                    var viewsIds = this._viewContextsByViewId.getKeys();
                    for (var i = 0; i < viewsIds.length; i++) {
                        if (this._viewContextsByViewId.getItem(viewsIds[i]) === viewName) {
                            return viewsIds[i];
                        }
                    }
                    return null;
                };
                TaskRecorderSessionViewModel.LIST_STEPS_CLASS_NAME = "listSteps";
                TaskRecorderSessionViewModel.VIEW_ID_MASK = "{0}_{1}";
                return TaskRecorderSessionViewModel;
            }());
            ViewModel.TaskRecorderSessionViewModel = TaskRecorderSessionViewModel;
        })(ViewModel = TaskRecorder.ViewModel || (TaskRecorder.ViewModel = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var TaskRecorderState;
        (function (TaskRecorderState) {
            TaskRecorderState[TaskRecorderState["None"] = 0] = "None";
            TaskRecorderState[TaskRecorderState["Recording"] = 1] = "Recording";
            TaskRecorderState[TaskRecorderState["RecordingPaused"] = 2] = "RecordingPaused";
            TaskRecorderState[TaskRecorderState["RecordingCompleted"] = 3] = "RecordingCompleted";
        })(TaskRecorderState = TaskRecorder.TaskRecorderState || (TaskRecorder.TaskRecorderState = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var TaskRecorderEventListener = (function () {
            function TaskRecorderEventListener(subscriber, config) {
                Commerce.ThrowIf.argumentIsNotObject(subscriber, "subscriber");
                Commerce.ThrowIf.argumentIsNotObject(config, "config");
                this.subscriber = subscriber;
                this.config = config;
                this.eventDictionary = new Commerce.Dictionary();
                this.taskRecorderEventName = Commerce.ViewModelAdapter.getTaskRecorderEventName();
                this.subscribeToGlobalEvents();
                this.lockKeyDown = false;
            }
            TaskRecorderEventListener.prototype.dispose = function () {
                this.removeCurrentEventListeners();
            };
            TaskRecorderEventListener.prototype.removeCurrentEventListeners = function () {
                var _this = this;
                this.config.events.forEach(function (event) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(event.custom) &&
                        Commerce.ArrayExtensions.hasElements(event.custom.internalEvents)) {
                        _this.removeElementEventListener(event.custom.internalEvents);
                    }
                });
                this.eventDictionary.forEach(function (name, listeners) {
                    listeners.forEach(function (listener) {
                        if (_this.isTaskRecorderEvent(name)) {
                            Commerce.ViewModelAdapter.removeTaskRecorderEvent(listener);
                        }
                        else {
                            window.removeEventListener(name, listener, true);
                        }
                    });
                });
            };
            TaskRecorderEventListener.prototype.removeElementEventListener = function (internalEvents) {
                if (Commerce.ArrayExtensions.hasElements(internalEvents)) {
                    internalEvents.forEach(function (event) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(event.element) &&
                            !Commerce.ObjectExtensions.isNullOrUndefined(event.listener) &&
                            !Commerce.StringExtensions.isNullOrWhitespace(event.name)) {
                            event.element.removeEventListener(event.name, event.listener, true);
                        }
                    });
                }
            };
            TaskRecorderEventListener.prototype.subscribeToGlobalEvents = function () {
                var _this = this;
                this.config.events.forEach(function (event) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(event.custom)) {
                        _this.subscribeToCustomEvent(event);
                    }
                    else {
                        _this.subscribeToEvent(event.eventName, event.rules);
                    }
                });
                if (this.eventDictionary.hasItem("keydown")) {
                    this.addEventListener("keyup", function () { _this.lockKeyDown = false; });
                }
            };
            TaskRecorderEventListener.prototype.subscribeToEvent = function (eventName, eventRules) {
                var _this = this;
                this.processEvents([eventName], eventRules, function (actions) {
                    if (Commerce.ArrayExtensions.hasElements(actions)) {
                        var deferred_1 = false;
                        actions.forEach(function (action) {
                            deferred_1 = deferred_1 || action.deferred;
                        });
                        if (deferred_1) {
                            setTimeout(function () {
                                _this.handleActions(actions, eventName);
                            }, 0);
                        }
                        else {
                            _this.handleActions(actions, eventName);
                        }
                    }
                });
            };
            TaskRecorderEventListener.prototype.subscribeToCustomEvent = function (event) {
                var _this = this;
                var runAction;
                this.processEvents(event.custom.startEvents, event.rules, function (actions) {
                    if (event.custom.startPhase) {
                        return;
                    }
                    event.custom.actions = actions;
                    actions.forEach(function (action) {
                        runAction = !Commerce.ObjectExtensions.isNullOrUndefined(action.element) && event.custom.runAction;
                        event.custom.startPhase = true;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(action.element) && !Commerce.ObjectExtensions.isNullOrUndefined(event.custom.elementEvents)) {
                            event.custom.internalEvents = event.custom.internalEvents || [];
                            if (Commerce.ArrayExtensions.hasElements(event.custom.elementEvents.acceptEvents)) {
                                _this.addElementEvents(action.element, event.custom.elementEvents.acceptEvents, event.custom.internalEvents, function () {
                                    runAction = true;
                                });
                            }
                            if (Commerce.ArrayExtensions.hasElements(event.custom.elementEvents.declineEvents)) {
                                _this.addElementEvents(action.element, event.custom.elementEvents.declineEvents, event.custom.internalEvents, function () {
                                    runAction = false;
                                });
                            }
                        }
                    });
                });
                this.processEvents(event.custom.endEvents, event.rules, function (actions) {
                    if (!event.custom.startPhase) {
                        return;
                    }
                    event.custom.startPhase = false;
                    if (Commerce.ArrayExtensions.hasElements(event.custom.internalEvents)) {
                        _this.removeElementEventListener(event.custom.internalEvents);
                        event.custom.internalEvents = [];
                    }
                    setTimeout(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(event.custom.actions) && runAction) {
                            _this.handleActions(event.custom.actions, event.eventName);
                        }
                        event.custom.actions = null;
                    }, 0);
                });
            };
            TaskRecorderEventListener.prototype.addElementEvents = function (element, eventNames, elementEvents, listener) {
                eventNames.forEach(function (event) {
                    element.addEventListener(event, listener, true);
                    elementEvents.push({
                        element: element,
                        listener: listener,
                        name: event
                    });
                });
            };
            TaskRecorderEventListener.prototype.processEvents = function (eventNames, eventRules, actionHandler) {
                var _this = this;
                var eventListener = this.getEventListener(eventRules, actionHandler);
                var taskRecorderEventListener = this.getTaskRecorderEventListener(eventRules, actionHandler);
                eventNames.forEach(function (eventName) {
                    var listener = _this.isTaskRecorderEvent(eventName)
                        ? taskRecorderEventListener
                        : eventListener;
                    _this.addEventListener(eventName, listener);
                });
            };
            TaskRecorderEventListener.prototype.getEventListener = function (eventRules, actionHandler) {
                var _this = this;
                return (function (event) {
                    if (Commerce.StringExtensions.compare(event.type, "keydown", true) === 0) {
                        if (_this.lockKeyDown) {
                            return;
                        }
                        _this.lockKeyDown = true;
                    }
                    var isMiddleMouseButonClicked = Commerce.ArrayExtensions.hasElement(["mousedown", "mouseup", "pointerdown", "pointerup", "click"], event.type, function (left, right) { return Commerce.StringExtensions.compare(left, right, true) === 0; }) &&
                        Commerce.NumberExtensions.compare(event.which, TaskRecorderEventListener.middleMouseButtonWhichValue) === 0;
                    if (isMiddleMouseButonClicked) {
                        return;
                    }
                    var eventInfo = {
                        type: event.type,
                        element: event.target,
                        keyCode: event.keyCode
                    };
                    var actions = _this.applyRules(eventInfo, eventRules);
                    if (Commerce.ArrayExtensions.hasElements(actions)) {
                        actionHandler(actions);
                    }
                });
            };
            TaskRecorderEventListener.prototype.getTaskRecorderEventListener = function (eventRules, actionHandler) {
                var _this = this;
                return function (eventInfo) {
                    var actions = _this.applyRules(eventInfo, eventRules);
                    if (Commerce.ArrayExtensions.hasElements(actions)) {
                        actionHandler(actions);
                    }
                };
            };
            TaskRecorderEventListener.prototype.addEventListener = function (eventName, listener) {
                if (this.isTaskRecorderEvent(eventName)) {
                    Commerce.ViewModelAdapter.addTaskRecorderEvent(listener);
                }
                else {
                    window.addEventListener(eventName, listener, true);
                }
                if (!this.eventDictionary.hasItem(eventName)) {
                    this.eventDictionary.setItem(eventName, []);
                }
                this.eventDictionary.getItem(eventName).push(listener);
            };
            TaskRecorderEventListener.prototype.applyRules = function (eventInfo, rules) {
                var _this = this;
                var element = eventInfo.element;
                var resultRule = null;
                var matchElement = null;
                var results = [];
                rules.forEach(function (rule) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(resultRule)) {
                        return;
                    }
                    matchElement = _this.applyRule(eventInfo, element, rule);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(matchElement)) {
                        resultRule = rule;
                    }
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(resultRule) && !resultRule.ignore) {
                    results.push(this.createResultEventAction(resultRule, matchElement));
                    results = results.concat(this.parentHandler(eventInfo, matchElement, resultRule));
                    results = results.concat(this.childHandler(eventInfo, matchElement, resultRule));
                }
                return results;
            };
            TaskRecorderEventListener.prototype.parentHandler = function (eventInfo, element, rule) {
                var results = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined((rule.parentRule))) {
                    var parentMatchElement = this.applyRuleToParent(eventInfo, element, rule.parentRule);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(parentMatchElement)) {
                        results.push(this.createResultEventAction(rule.parentRule, parentMatchElement));
                        results = results.concat(this.parentHandler(eventInfo, parentMatchElement, rule.parentRule));
                        results = results.concat(this.childHandler(eventInfo, parentMatchElement, rule.parentRule));
                    }
                }
                return results;
            };
            TaskRecorderEventListener.prototype.childHandler = function (eventInfo, element, rule) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(rule.childRules)) {
                    return [];
                }
                var results = [];
                var _loop_2 = function (i) {
                    rule.childRules.forEach(function (childRule) {
                        var matchElement = _this.applyRule(eventInfo, element.children[i], childRule);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(matchElement)) {
                            results.push(_this.createResultEventAction(childRule, matchElement));
                        }
                    });
                    results = results.concat(this_2.childHandler(eventInfo, element.children[i], rule));
                };
                var this_2 = this;
                for (var i = 0; i < element.children.length; i++) {
                    _loop_2(i);
                }
                return results;
            };
            TaskRecorderEventListener.prototype.applyRule = function (eventInfo, element, rule) {
                var match = false;
                var checked = false;
                var resultElement = element;
                if (Commerce.ObjectExtensions.isNullOrUndefined(element) ||
                    !Commerce.ObjectExtensions.isNullOrUndefined(element.attributes[TaskRecorderEventListener.disabledAttribute])) {
                    return null;
                }
                var backspaceKeyCode = 8;
                if (Commerce.NumberExtensions.compare(rule.keyCode, eventInfo.keyCode) === 0
                    && Commerce.NumberExtensions.compare(rule.keyCode, backspaceKeyCode) === 0) {
                    return resultElement;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(rule.tagName) || Commerce.StringExtensions.compare(rule.tagName, element.tagName, true) === 0) {
                    if (Commerce.ArrayExtensions.hasElements(rule.ids)) {
                        match = (Commerce.ArrayExtensions.hasElement(rule.ids, element.id));
                        checked = true;
                    }
                    if (!match && Commerce.ArrayExtensions.hasElements(rule.classNames)) {
                        rule.classNames.forEach(function (className) {
                            match = (element.classList.contains(className));
                        });
                        checked = true;
                    }
                    if (!match && Commerce.ArrayExtensions.hasElements(rule.roles)) {
                        var role = element.getAttribute(TaskRecorderEventListener.roleAttribute);
                        match = !Commerce.StringExtensions.isNullOrWhitespace(role) ? Commerce.ArrayExtensions.hasElement(rule.roles, role.toLowerCase()) : false;
                        checked = true;
                    }
                    if (!match && Commerce.ArrayExtensions.hasElements(rule.types)) {
                        var type = element.getAttribute(TaskRecorderEventListener.typeAttribute);
                        match = !Commerce.StringExtensions.isNullOrWhitespace(type) ? Commerce.ArrayExtensions.hasElement(rule.types, type.toLowerCase()) : false;
                        checked = true;
                    }
                    if (!match && Commerce.ArrayExtensions.hasElements(rule.dataAxBubbles)) {
                        var bubbleAttribute = element.attributes[Commerce.BubbleHelper.DATA_AX_BUBBLE_ATTRIBUTE];
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(bubbleAttribute)) {
                            match = Commerce.ArrayExtensions.hasElement(rule.dataAxBubbles, bubbleAttribute.value);
                        }
                        checked = true;
                    }
                    if (!match && !Commerce.ObjectExtensions.isNullOrUndefined(rule.dataAction)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(element.attributes[TaskRecorderEventListener.dataActionAttribute])) {
                            match = Commerce.NumberExtensions.compare(rule.dataAction, element.attributes[TaskRecorderEventListener.dataActionAttribute].value) === 0;
                        }
                        checked = true;
                    }
                    if (match && (Commerce.StringExtensions.compare(eventInfo.type, "keypress", true) === 0 ||
                        Commerce.StringExtensions.compare(eventInfo.type, "keydown", true) === 0 ||
                        Commerce.StringExtensions.compare(eventInfo.type, "keyup", true) === 0)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(rule.keyCode)) {
                            match = Commerce.NumberExtensions.compare(rule.keyCode, eventInfo.keyCode) === 0;
                        }
                        else {
                            match = false;
                        }
                        checked = true;
                    }
                    if (match && Commerce.ArrayExtensions.hasElements(rule.parameters)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(eventInfo.parameter)) {
                            match = Commerce.ArrayExtensions.hasElement(rule.parameters, eventInfo.parameter);
                        }
                        checked = true;
                    }
                    if (!checked) {
                        match = true;
                    }
                }
                if (match && !Commerce.ObjectExtensions.isNullOrUndefined(rule.parent)) {
                    match = !Commerce.ObjectExtensions.isNullOrUndefined(this.applyRuleToParent(eventInfo, element, rule.parent));
                }
                if (!match && rule.checkParents && Commerce.StringExtensions.compare("body", element.tagName, true) !== 0) {
                    resultElement = this.applyRuleToParent(eventInfo, element, rule);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(resultElement)) {
                        match = true;
                    }
                }
                return match ? resultElement : null;
            };
            TaskRecorderEventListener.prototype.applyRuleToParent = function (eventInfo, element, rule) {
                var parent = element.parentElement;
                return this.applyRule(eventInfo, parent, rule);
            };
            TaskRecorderEventListener.prototype.handleActions = function (actions, eventName) {
                if (!Commerce.ArrayExtensions.hasElements(actions)) {
                    return;
                }
                var originAction = actions[0];
                var actionText = this.getActionsDescription(actions);
                var commandName = !Commerce.StringExtensions.isNullOrWhitespace(actions[0].commandName) ? actions[0].commandName : eventName;
                var stepInfo = {};
                if (!Commerce.ObjectExtensions.isNullOrUndefined(originAction.keyCode)) {
                    stepInfo.keyCode = originAction.keyCode;
                }
                var primaryControlName = this.getClosestAttributeValue(originAction.element, Commerce.BubbleHelper.DATA_AX_BUBBLE_ATTRIBUTE);
                var secondaryControlName = this.getClosestAttributeValue(originAction.element, TaskRecorderEventListener.dataAxActionAttribute);
                var valueAction = Commerce.ArrayExtensions.firstOrUndefined(actions, function (action) {
                    return !Commerce.StringExtensions.isNullOrWhitespace(action.valueStrategy);
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(valueAction)) {
                    stepInfo.value = this.applyActionDataValueStrategy(valueAction.element, valueAction.valueStrategy);
                    secondaryControlName = this.getClosestAttributeValue(valueAction.element, TaskRecorderEventListener.dataAxActionAttribute);
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(secondaryControlName)) {
                    stepInfo.secondaryControlName = secondaryControlName;
                }
                this.subscriber.addStep(TaskRecorder.Model.RecordingFactory.createNewCommand(Commerce.StringExtensions.EMPTY, commandName, actionText, Commerce.StringExtensions.EMPTY, Commerce.StringExtensions.EMPTY, stepInfo, primaryControlName, originAction.controlType, this.subscriber.addView(Commerce.ViewModelAdapter.getCurrentViewName())));
                Commerce.RetailLogger.taskRecorderHandleAction(actionText);
            };
            TaskRecorderEventListener.prototype.getClosestAttributeValue = function (element, attributeName) {
                return $(element).closest(Commerce.StringExtensions.format("[{0}]", attributeName)).attr(attributeName);
            };
            TaskRecorderEventListener.prototype.getActionsDescription = function (actions) {
                var _this = this;
                if (!Commerce.ArrayExtensions.hasElements(actions)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                if (actions.length > 1) {
                    actions = actions.filter(function (action) {
                        return !Commerce.ObjectExtensions.isNullOrUndefined(action.compositionOrder);
                    });
                    actions = actions.sort(function (a, b) {
                        if (a.compositionOrder < b.compositionOrder) {
                            return -1;
                        }
                        else if (a.compositionOrder > b.compositionOrder) {
                            return 1;
                        }
                        return 0;
                    });
                }
                var descriptionComponents = [];
                actions.forEach(function (action) {
                    descriptionComponents.push(_this.getActionDescription(action));
                });
                var actionDescription = Commerce.StringExtensions.EMPTY;
                if (!Commerce.ArrayExtensions.hasElements(descriptionComponents)) {
                    return Commerce.StringExtensions.EMPTY;
                }
                else if (descriptionComponents.length === 1) {
                    return descriptionComponents[0];
                }
                var formatString = Commerce.ViewModelAdapter.getResourceString("string_10129");
                actionDescription = Commerce.StringExtensions.format(formatString, descriptionComponents[0], descriptionComponents[1]);
                for (var i = 2; i < descriptionComponents.length; ++i) {
                    actionDescription = Commerce.StringExtensions.format(formatString, actionDescription, descriptionComponents[i]);
                }
                return actionDescription;
            };
            TaskRecorderEventListener.prototype.getActionDescription = function (action) {
                var value = Commerce.StringExtensions.EMPTY;
                if (Commerce.ArrayExtensions.hasElements(action.strategies)) {
                    for (var indexStrategy = 0; indexStrategy < action.strategies.length; indexStrategy++) {
                        value = this.applyActionDataStrategy(action.element, action.strategies[indexStrategy]);
                        if (value) {
                            break;
                        }
                    }
                }
                var parameter = value || Commerce.ViewModelAdapter.getResourceString(action.defaultValue);
                value = !Commerce.StringExtensions.isNullOrWhitespace(parameter)
                    ? Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString(action.text), parameter)
                    : Commerce.ViewModelAdapter.getResourceString(action.text);
                return value;
            };
            TaskRecorderEventListener.prototype.applyActionDataStrategy = function (element, strategy) {
                switch (strategy) {
                    case "content":
                        if (!Commerce.StringExtensions.isNullOrWhitespace(element.innerHTML)) {
                            return this.getVisibleContent(element);
                        }
                        break;
                    case "value":
                        return element.value;
                    case "label":
                        if (!Commerce.StringExtensions.isNullOrWhitespace(element.id)) {
                            var label = $("label[for='" + element.id + "']");
                            if (label[0]) {
                                return label[0].innerHTML;
                            }
                        }
                        break;
                    case "title":
                        if (!Commerce.StringExtensions.isNullOrWhitespace(element.title)) {
                            return element.title;
                        }
                        break;
                    case "aria-label":
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(element.attributes[TaskRecorderEventListener.ariaLabelAttribute])) {
                            return element.attributes[TaskRecorderEventListener.ariaLabelAttribute].value;
                        }
                        break;
                    case "actionProperty":
                        var $element = $(element);
                        var elementData = $element.data("commerceButtonGridButtonOptions");
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(elementData)) {
                            var action = elementData.Action;
                            var actionProperty = elementData.ActionProperty;
                            if (action === Commerce.Proxy.Entities.RetailOperation.TotalDiscountPercent
                                && !Commerce.StringExtensions.isNullOrWhitespace(actionProperty)
                                && !Commerce.NumberExtensions.isNullOrZero(actionProperty)) {
                                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_10089"), actionProperty);
                            }
                        }
                        break;
                    case "aria-labelledby":
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(element.attributes[TaskRecorderEventListener.ariaLabelledbyAttribute])) {
                            var labeledElement = document.getElementById(element.attributes[TaskRecorderEventListener.ariaLabelledbyAttribute].value);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(labeledElement) &&
                                !Commerce.ObjectExtensions.isNullOrUndefined(labeledElement.attributes[TaskRecorderEventListener.ariaLabelAttribute])) {
                                return labeledElement.attributes[TaskRecorderEventListener.ariaLabelAttribute].value;
                            }
                        }
                        break;
                }
                return null;
            };
            TaskRecorderEventListener.prototype.getVisibleContent = function (element) {
                var cloneElement = $(element).clone();
                cloneElement.find("*[style*='display: none']").remove();
                var result = cloneElement.text().trim();
                cloneElement.remove();
                return result;
            };
            TaskRecorderEventListener.prototype.applyActionDataValueStrategy = function (element, strategy) {
                switch (strategy) {
                    case "value":
                        return element.value;
                    case "checked":
                        return element.checked;
                    case "aria-checked":
                        return element.getAttribute(TaskRecorderEventListener.ariaCheckedAttribute) === "true";
                    case "option":
                        return element.value;
                }
                return null;
            };
            TaskRecorderEventListener.prototype.createResultEventAction = function (rule, element) {
                return {
                    strategies: rule.actionData.strategies,
                    text: rule.actionData.text,
                    defaultValue: rule.actionData.defaultValue,
                    element: element,
                    deferred: rule.actionData.deferred,
                    compositionOrder: rule.actionData.compositionOrder,
                    commandName: rule.actionData.commandName,
                    keyCode: rule.keyCode,
                    valueStrategy: rule.actionData.valueStrategy,
                    controlType: rule.actionData.controlType
                };
            };
            TaskRecorderEventListener.prototype.isTaskRecorderEvent = function (eventName) {
                return eventName === this.taskRecorderEventName;
            };
            TaskRecorderEventListener.roleAttribute = "role";
            TaskRecorderEventListener.typeAttribute = "type";
            TaskRecorderEventListener.dataActionAttribute = "data-action";
            TaskRecorderEventListener.disabledAttribute = "disabled";
            TaskRecorderEventListener.ariaLabelAttribute = "aria-label";
            TaskRecorderEventListener.ariaLabelledbyAttribute = "aria-labelledby";
            TaskRecorderEventListener.dataAxActionAttribute = "data-ax-action";
            TaskRecorderEventListener.ariaCheckedAttribute = "aria-checked";
            TaskRecorderEventListener.middleMouseButtonWhichValue = 2;
            return TaskRecorderEventListener;
        }());
        TaskRecorder.TaskRecorderEventListener = TaskRecorderEventListener;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var TaskRecorderSession = (function () {
            function TaskRecorderSession(recording, configuration) {
                Commerce.ThrowIf.argumentIsNotObject(recording, "recording");
                Commerce.ThrowIf.argumentIsNotObject(configuration, "configuration");
                this.recordingViewModel = new TaskRecorder.ViewModel.TaskRecorderSessionViewModel(recording);
                this.id = ko.observable(TaskRecorder.TaskRecorderUtil.generateGuid());
                this.state = ko.observable(TaskRecorder.TaskRecorderState.None);
                this.state.subscribe(function () {
                    Commerce.ViewModelAdapter.raiseTaskRecorderStateChangedEvent();
                });
                this.name = this.recordingViewModel.name;
                this.description = this.recordingViewModel.description;
                this.nodes = this.recordingViewModel.nodes;
                this.configuration = configuration;
                this.isScreenshotsCapturingEnabled = ko.observable(false);
                this.state.subscribe(function (newValue) {
                    Commerce.Session.instance.taskRecorderState = newValue;
                });
            }
            TaskRecorderSession.prototype.getRecordingAsync = function () {
                var _this = this;
                var asyncResult = new Commerce.AsyncResult();
                TaskRecorder.TaskRecorderUploadScreenshotsHandler.execute(this.recordingViewModel.nodes()).done(function () {
                    asyncResult.resolve(_this.recordingViewModel.toModel());
                })
                    .fail(function () {
                    asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_COULDNT_UPLOAD_SCREENSHOT)]);
                });
                return asyncResult;
            };
            TaskRecorderSession.prototype.startTask = function (name, comment) {
                Commerce.ThrowIf.argumentIsNotString(name, "name");
                Commerce.ThrowIf.argumentIsNotStringOrNull(comment, "comment");
                var task = TaskRecorder.Model.RecordingFactory.createNewTask(TaskRecorder.TaskRecorderUtil.generateGuid(), name, comment, null, TaskRecorder.Model.TaskRecorderTaskType.Begin);
                this.recordingViewModel.startTask(new TaskRecorder.ViewModel.TaskRecorderTaskViewModel(task));
            };
            TaskRecorderSession.prototype.endTask = function () {
                var state = this.state();
                if (state !== TaskRecorder.TaskRecorderState.Recording) {
                    var stateName = TaskRecorder.TaskRecorderState[state];
                    throw TaskRecorderSession.error(Commerce.ErrorTypeEnum.TASK_RECORDER_SESSION_INVALID_STATE, stateName);
                }
                this.recordingViewModel.endTask();
            };
            TaskRecorderSession.prototype.startRecording = function () {
                this.state(TaskRecorder.TaskRecorderState.Recording);
                this.eventListener = new TaskRecorder.TaskRecorderEventListener(this, this.configuration);
            };
            TaskRecorderSession.prototype.pauseRecording = function () {
                var state = this.state();
                if (state !== TaskRecorder.TaskRecorderState.Recording) {
                    var stateName = TaskRecorder.TaskRecorderState[state];
                    throw TaskRecorderSession.error(Commerce.ErrorTypeEnum.TASK_RECORDER_SESSION_INVALID_STATE, stateName);
                }
                this.eventListener.dispose();
                this.eventListener = null;
                this.state(TaskRecorder.TaskRecorderState.RecordingPaused);
            };
            TaskRecorderSession.prototype.continueRecording = function () {
                var state = this.state();
                if (state !== TaskRecorder.TaskRecorderState.RecordingPaused) {
                    var stateName = TaskRecorder.TaskRecorderState[state];
                    throw TaskRecorderSession.error(Commerce.ErrorTypeEnum.TASK_RECORDER_SESSION_INVALID_STATE, stateName);
                }
                this.eventListener = new TaskRecorder.TaskRecorderEventListener(this, this.configuration);
                this.state(TaskRecorder.TaskRecorderState.Recording);
            };
            TaskRecorderSession.prototype.stopRecording = function () {
                var state = this.state();
                var validStates = [TaskRecorder.TaskRecorderState.Recording, TaskRecorder.TaskRecorderState.RecordingPaused];
                if (!Commerce.ArrayExtensions.hasElement(validStates, state)) {
                    var stateName = TaskRecorder.TaskRecorderState[state];
                    throw TaskRecorderSession.error(Commerce.ErrorTypeEnum.TASK_RECORDER_SESSION_INVALID_STATE, stateName);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(this.eventListener)) {
                    this.eventListener.dispose();
                    this.eventListener = null;
                }
                this.state(TaskRecorder.TaskRecorderState.RecordingCompleted);
            };
            TaskRecorderSession.prototype.addView = function (viewName) {
                return this.recordingViewModel.addView(viewName);
            };
            TaskRecorderSession.prototype.addStep = function (step) {
                Commerce.ThrowIf.argumentIsNotObject(step, "step");
                var stepViewModel = new TaskRecorder.ViewModel.TaskRecorderStepViewModel(step);
                stepViewModel.id = TaskRecorder.TaskRecorderUtil.generateGuid();
                this.recordingViewModel.addStep(stepViewModel);
                var event = document.createEvent("Event");
                event.stepId = stepViewModel.id;
                event.initEvent("screenshot", true, false);
                document.dispatchEvent(event);
            };
            TaskRecorderSession.prototype.isTaskCreated = function () {
                return !Commerce.ObjectExtensions.isNullOrUndefined(this.recordingViewModel.activeTask());
            };
            TaskRecorderSession.prototype.updateScreenshotUri = function (stepId, screenshotUri) {
                var step = Commerce.ArrayExtensions.firstOrUndefined(this.nodes(), function (node) {
                    return node.id === stepId;
                });
                if (Commerce.ObjectExtensions.isNullOrUndefined(step)) {
                    throw new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_STEP_VIEW_MODEL_NOT_FOUND);
                }
                step.screenshotUri = screenshotUri;
            };
            TaskRecorderSession.prototype.updateRecordingView = function () {
                this.recordingViewModel.scrollDown();
            };
            TaskRecorderSession.error = function (errorCode) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return [new Commerce.Proxy.Entities.Error(errorCode, false, Commerce.StringExtensions.EMPTY, null, args)];
            };
            return TaskRecorderSession;
        }());
        TaskRecorder.TaskRecorderSession = TaskRecorderSession;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var Model;
        (function (Model) {
            "use strict";
            var ScopeType;
            (function (ScopeType) {
                ScopeType[ScopeType["Public"] = 0] = "Public";
                ScopeType[ScopeType["Private"] = 1] = "Private";
                ScopeType[ScopeType["PrivateInline"] = 2] = "PrivateInline";
                ScopeType[ScopeType["Task"] = 3] = "Task";
            })(ScopeType = Model.ScopeType || (Model.ScopeType = {}));
            var TaskRecorderTaskType;
            (function (TaskRecorderTaskType) {
                TaskRecorderTaskType[TaskRecorderTaskType["Begin"] = 1] = "Begin";
                TaskRecorderTaskType[TaskRecorderTaskType["End"] = 16] = "End";
            })(TaskRecorderTaskType = Model.TaskRecorderTaskType || (Model.TaskRecorderTaskType = {}));
            var RecordingFactory = (function () {
                function RecordingFactory() {
                }
                RecordingFactory.createNew = function (name, description) {
                    var rootScope = RecordingFactory.createNewScope(TaskRecorder.TaskRecorderUtil.generateGuid(), name, null, ScopeType.Public);
                    var recording = {
                        Name: name,
                        Description: description,
                        RootScope: rootScope
                    };
                    recording[this.oDataPropertyName] = Commerce.Proxy.Entities.TaskRecorderODataType.recording;
                    return recording;
                };
                RecordingFactory.createNewScope = function (id, name, description, scopeType) {
                    var scope = {
                        Id: id,
                        Name: name,
                        Description: description,
                        ScopeTypeValue: scopeType,
                        ActiveCount: 0,
                        Children: []
                    };
                    scope[this.oDataPropertyName] = Commerce.Proxy.Entities.TaskRecorderODataType.scope;
                    return scope;
                };
                RecordingFactory.createNewTask = function (id, name, comment, description, taskType) {
                    var task = {
                        Id: id,
                        TaskId: id,
                        Name: name,
                        Description: description,
                        Comment: comment,
                        UserActionTypeValue: taskType
                    };
                    task[this.oDataPropertyName] = Commerce.Proxy.Entities.TaskRecorderODataType.taskUserAction;
                    return task;
                };
                RecordingFactory.createNewCommand = function (id, name, description, notes, screenshotUri, stepInfo, controlName, controlType, formId) {
                    var command = {
                        Id: id,
                        CommandName: name,
                        Description: description,
                        ReturnTypeValue: 0,
                        Annotations: [],
                        ScreenshotUri: screenshotUri,
                        Arguments: [],
                        ControlName: controlName,
                        ControlType: controlType,
                        FormId: formId
                    };
                    if (!Commerce.StringExtensions.isNullOrWhitespace(notes)) {
                        command.Annotations.push(this.createNewAnnotation(notes));
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(stepInfo) && !jQuery.isEmptyObject(stepInfo)) {
                        command.Arguments.push({
                            IsReference: false,
                            Value: JSON.stringify(stepInfo)
                        });
                    }
                    command[this.oDataPropertyName] = Commerce.Proxy.Entities.TaskRecorderODataType.commandUserAction;
                    return command;
                };
                RecordingFactory.createNewAnnotation = function (description) {
                    var annotation = {
                        Description: description
                    };
                    annotation[this.oDataPropertyName] = Commerce.Proxy.Entities.TaskRecorderODataType.annotation;
                    return annotation;
                };
                RecordingFactory.createFormContextDictionaryEntry = function (formId, formName, recordingName, sequence) {
                    return {
                        FormId: formId,
                        FormContext: {
                            FormID: formId,
                            FormName: formName,
                            RecordingName: recordingName,
                            Sequence: sequence
                        }
                    };
                };
                RecordingFactory.oDataPropertyName = "@odata.type";
                return RecordingFactory;
            }());
            Model.RecordingFactory = RecordingFactory;
        })(Model = TaskRecorder.Model || (TaskRecorder.Model = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var Managers = Commerce.Model.Managers;
        var TaskRecorderManager = (function () {
            function TaskRecorderManager() {
                this.activeSession = ko.observable(null);
                this.inProgress = false;
                this.recordingManager = Managers.Factory.getManager(Managers.IRecordingManagerName);
                var that = this;
                this.takeScreenshotListener = (function (event) {
                    that.takeScreenshot(that.activeSession().id(), event.stepId);
                });
            }
            TaskRecorderManager.loadConfigurationAsync = function () {
                var _this = this;
                if (this.configuration) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var asyncResult = new Commerce.VoidAsyncResult();
                $.getJSON(this.configurationPath).done(function (config) {
                    _this.configuration = config;
                    asyncResult.resolve();
                }).fail(function () {
                    asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_CONFIGURATION_ERROR)]);
                });
                return asyncResult;
            };
            TaskRecorderManager.prototype.startNewSession = function (name, description) {
                var _this = this;
                Commerce.ThrowIf.argumentIsNotString(name, "name");
                Commerce.ThrowIf.argumentIsNotStringOrNull(description, "description");
                if (this.inProgress) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY)]);
                }
                this.cancelSession();
                this.inProgress = true;
                var asyncResult = TaskRecorderManager.loadConfigurationAsync().done(function () {
                    var recording = TaskRecorder.Model.RecordingFactory.createNew(name, description);
                    _this.activeSession(new TaskRecorder.TaskRecorderSession(recording, TaskRecorderManager.configuration));
                });
                return asyncResult.always(function () {
                    _this.inProgress = false;
                });
            };
            TaskRecorderManager.prototype.openExistingSession = function () {
                var _this = this;
                if (this.inProgress) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY)]);
                }
                this.cancelSession();
                this.inProgress = true;
                var asyncResult = Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_IMPLEMENTED)]);
                return asyncResult.always(function () {
                    _this.inProgress = false;
                });
            };
            TaskRecorderManager.prototype.saveSessionAsXml = function () {
                var _this = this;
                if (this.inProgress) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY)]);
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION)]);
                }
                this.inProgress = true;
                var asyncResult = new Commerce.VoidAsyncResult();
                this.activeSession().getRecordingAsync().done(function (recording) {
                    _this.recordingManager.generateRecordingFile(recording).done(function (url) {
                        _this._saveFile(url)
                            .done(function () {
                            asyncResult.resolve();
                        })
                            .fail(function (errors) {
                            asyncResult.reject(errors);
                        });
                    })
                        .fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                })
                    .fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult.always(function () {
                    _this.inProgress = false;
                });
            };
            TaskRecorderManager.prototype.saveBusinessProcessModelPackage = function () {
                var _this = this;
                if (this.inProgress) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY)]);
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION)]);
                }
                this.inProgress = true;
                var asyncResult = new Commerce.VoidAsyncResult();
                this.activeSession().getRecordingAsync().done(function (recording) {
                    _this.recordingManager.generateBusinessProcessModelPackage(recording).done(function (url) {
                        _this._saveFile(url)
                            .done(function () {
                            asyncResult.resolve();
                        })
                            .fail(function (errors) {
                            asyncResult.reject(errors);
                        });
                    })
                        .fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                })
                    .fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult.always(function () {
                    _this.inProgress = false;
                });
            };
            TaskRecorderManager.prototype.saveSessionAsRecordingBundle = function () {
                var _this = this;
                if (this.inProgress) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY)]);
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION)]);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                this.inProgress = true;
                var savingRecording;
                asyncQueue.enqueue(function () {
                    return _this.activeSession().getRecordingAsync().done(function (recording) {
                        savingRecording = recording;
                    });
                });
                asyncQueue.enqueue(function () {
                    return _this.saveRecordingAsRecordingBundle(savingRecording);
                });
                return asyncQueue.run()
                    .always(function () {
                    _this.inProgress = false;
                });
            };
            TaskRecorderManager.prototype.saveRecordingAsRecordingBundle = function (recording) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var savingUrl;
                asyncQueue.enqueue(function () {
                    return _this.recordingManager.generateRecordingBundle(recording).done(function (url) {
                        savingUrl = url;
                    });
                });
                asyncQueue.enqueue(function () {
                    return _this._saveFile(savingUrl);
                });
                return asyncQueue.run();
            };
            TaskRecorderManager.prototype.saveToLifecycleServices = function () {
                var _this = this;
                if (this.inProgress) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY)]);
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION)]);
                }
                this.inProgress = true;
                var asyncResult = Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_IMPLEMENTED)]);
                return asyncResult.always(function () {
                    _this.inProgress = false;
                });
            };
            TaskRecorderManager.prototype.saveSessionAsWordDocument = function () {
                var _this = this;
                if (this.inProgress) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY)]);
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession())) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION)]);
                }
                var asyncQueue = new Commerce.AsyncQueue();
                this.inProgress = true;
                var savingRecording;
                asyncQueue.enqueue(function () {
                    return _this.activeSession().getRecordingAsync().done(function (recording) {
                        savingRecording = recording;
                    });
                });
                asyncQueue.enqueue(function () {
                    return _this.saveRecordingAsWordDocument(savingRecording);
                });
                return asyncQueue.run()
                    .always(function () {
                    _this.inProgress = false;
                });
            };
            TaskRecorderManager.prototype.saveRecordingAsWordDocument = function (recording) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var savingUrl;
                asyncQueue.enqueue(function () {
                    return _this.recordingManager.generateTrainingDocument(recording).done(function (url) {
                        savingUrl = url;
                    });
                });
                asyncQueue.enqueue(function () {
                    return _this._saveFile(savingUrl);
                });
                return asyncQueue.run();
            };
            TaskRecorderManager.prototype.searchTaskGuidesByTitle = function (taskGuideSearchText) {
                var asyncResult = new Commerce.AsyncResult();
                this.recordingManager.searchTaskGuidesByTitle(TaskRecorderManager.BPM_LIBRARY_LINE_ID_TO_SEARCH_OVER_ALL_HELP_LIBRARIES, taskGuideSearchText, Commerce.Proxy.Entities.QueryType.NameAndDescription)
                    .done(function (taskGuides) {
                    var taskGuideModels = [];
                    taskGuides.forEach(function (taskGuide) {
                        taskGuide.Lines.forEach(function (taskGuideLine) {
                            taskGuideModels.push(new TaskRecorder.Model.TaskGuideModel(taskGuideLine, TaskRecorderManager.EMPTY_TASK_GUIDE_PUBLISHER_NAME));
                        });
                    });
                    asyncResult.resolve(taskGuideModels);
                })
                    .fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            TaskRecorderManager.prototype.downloadRecording = function (bpmLineId) {
                var asyncResult = new Commerce.AsyncResult();
                this.recordingManager.downloadRecording(bpmLineId)
                    .done(function (recording) {
                    try {
                        asyncResult.resolve(new TaskRecorder.ViewModel.TaskRecorderSessionViewModel(recording));
                    }
                    catch (error) {
                        asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_COULDNT_DOWNLOAD_RECORDING, false, Commerce.StringExtensions.EMPTY, null, bpmLineId, JSON.stringify(error))]);
                    }
                })
                    .fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            TaskRecorderManager.prototype.cancelSession = function () {
                if (this.inProgress) {
                    throw new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_BUSY);
                }
                if (this.activeSession()) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession().eventListener)) {
                        this.activeSession().eventListener.dispose();
                        this.activeSession().eventListener = null;
                    }
                    this.activeSession(null);
                }
            };
            TaskRecorderManager.prototype.enableScreenCapture = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession())) {
                    throw new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION);
                }
                window.addEventListener("screenshot", this.takeScreenshotListener, true);
                this.activeSession().isScreenshotsCapturingEnabled(true);
            };
            TaskRecorderManager.prototype.disableScreenCapture = function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(this.activeSession())) {
                    throw new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_MANAGER_NO_ACTIVE_SESSION);
                }
                window.removeEventListener("screenshot", this.takeScreenshotListener, true);
                this.activeSession().isScreenshotsCapturingEnabled(false);
            };
            TaskRecorderManager.prototype.takeScreenshot = function (sessionId, stepId) {
                var _this = this;
                Microsoft.Dynamics.Commerce.ClientBroker.ScreenCapture.takeScreenshotAsync(sessionId, stepId).done(function (result) {
                    if (Commerce.StringExtensions.isEmpty(result)) {
                        throw new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_COULDNT_TAKE_SCREENSHOT);
                    }
                    _this.activeSession().updateScreenshotUri(stepId, result);
                });
            };
            TaskRecorderManager.prototype.isRecordingActive = function () {
                var session = this.activeSession();
                if (Commerce.ObjectExtensions.isNullOrUndefined(session)) {
                    return false;
                }
                var sessionState = session.state();
                if (sessionState === TaskRecorder.TaskRecorderState.Recording ||
                    sessionState === TaskRecorder.TaskRecorderState.RecordingPaused) {
                    return true;
                }
                return false;
            };
            TaskRecorderManager.prototype._saveFile = function (url) {
                var asyncResult = new Commerce.VoidAsyncResult();
                TaskRecorder.TaskRecorderDownloader.downloadFile(url)
                    .done(function (isCanceled) {
                    if (isCanceled) {
                        Commerce.RetailLogger.taskRecorderSavingFileCanceled(url);
                    }
                    else {
                        Commerce.RetailLogger.taskRecorderSavingFileFinished(url);
                    }
                    asyncResult.resolve();
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.taskRecorderSavingFileFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            TaskRecorderManager.configurationPath = "TaskRecorder.config.json";
            TaskRecorderManager.configuration = null;
            TaskRecorderManager.BPM_LIBRARY_LINE_ID_TO_SEARCH_OVER_ALL_HELP_LIBRARIES = 0;
            TaskRecorderManager.EMPTY_TASK_GUIDE_PUBLISHER_NAME = Commerce.StringExtensions.EMPTY;
            return TaskRecorderManager;
        }());
        TaskRecorder.TaskRecorderManager = TaskRecorderManager;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var TaskRecorderDownloader = (function () {
            function TaskRecorderDownloader() {
            }
            TaskRecorderDownloader.downloadFile = function (url) {
                throw new Error(Commerce.ViewModelAdapter.getResourceString(Commerce.ErrorTypeEnum.NOT_IMPLEMENTED));
            };
            return TaskRecorderDownloader;
        }());
        TaskRecorder.TaskRecorderDownloader = TaskRecorderDownloader;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var Managers = Commerce.Model.Managers;
        var TaskRecorderUploadScreenshotsHandler = (function () {
            function TaskRecorderUploadScreenshotsHandler() {
            }
            TaskRecorderUploadScreenshotsHandler.execute = function (nodes) {
                var _this = this;
                var recordingManager = Managers.Factory.getManager(Managers.IRecordingManagerName);
                var storageAccessToken;
                var asyncQueue = new Commerce.AsyncQueue();
                var screenshotsFolders = [];
                asyncQueue.enqueue(function () {
                    return recordingManager.getStorageAccessTokenForUpload().done(function (result) {
                        storageAccessToken = result;
                    })
                        .fail(function () {
                        asyncQueue.cancel();
                    });
                });
                for (var i = 0; i < nodes.length; i++) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(nodes[i].screenshotUri) && !this.isUrl(nodes[i].screenshotUri)) {
                        var folderPath = Microsoft.Dynamics.Commerce.ClientBroker.TaskRecorderFileManager.extractFolderPath(nodes[i].screenshotUri);
                        if (screenshotsFolders.indexOf(folderPath) === -1) {
                            screenshotsFolders.push(folderPath);
                        }
                        (function (userAction) { return asyncQueue.enqueue(function () {
                            var result = new Commerce.VoidAsyncResult();
                            try {
                                Microsoft.Dynamics.Commerce.ClientBroker.TaskRecorderFileManager.uploadFileToContainer(userAction.screenshotUri, storageAccessToken.Url, storageAccessToken.SasKey)
                                    .done(function (responseMessage) {
                                    if (responseMessage.isRequestSuccess) {
                                        Microsoft.Dynamics.Commerce.ClientBroker.TaskRecorderFileManager.deleteFileFromLocalStorage(userAction.screenshotUri);
                                        userAction.screenshotUri = responseMessage.blobUrl;
                                        result.resolve();
                                    }
                                    else {
                                        result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_ERROR_OCCURED_DURING_UPLOADING_FILE, false, Commerce.StringExtensions.EMPTY, null, responseMessage.errorMessage)]);
                                        asyncQueue.cancel();
                                    }
                                });
                            }
                            catch (error) {
                                result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.TASK_RECORDER_ERROR_OCCURED_DURING_UPLOADING_FILE, false, Commerce.StringExtensions.EMPTY, null, JSON.stringify(error))]);
                                asyncQueue.cancel();
                            }
                            return result;
                        }); })(nodes[i]);
                    }
                }
                return asyncQueue.run().done(function () {
                    _this.clearLocalStorage(screenshotsFolders);
                }).fail(function (errors) {
                    Commerce.RetailLogger.taskRecorderScreenshotsUploadingFailed(Commerce.ErrorHelper.getErrorMessages(errors));
                    _this.clearLocalStorage(screenshotsFolders);
                });
            };
            TaskRecorderUploadScreenshotsHandler.isUrl = function (url) {
                return (url.lastIndexOf("http://") === 0) || (url.lastIndexOf("https://") === 0);
            };
            TaskRecorderUploadScreenshotsHandler.clearLocalStorage = function (folders) {
                folders.forEach(function (folder) {
                    try {
                        Microsoft.Dynamics.Commerce.ClientBroker.TaskRecorderFileManager.deleteFolderFromLocalStorage(folder);
                    }
                    catch (error) {
                        Commerce.RetailLogger.taskRecorderDeleteFolderFromLocalStorageFailed(folder, JSON.stringify(error));
                    }
                });
            };
            return TaskRecorderUploadScreenshotsHandler;
        }());
        TaskRecorder.TaskRecorderUploadScreenshotsHandler = TaskRecorderUploadScreenshotsHandler;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var TaskRecorderUtil = (function () {
            function TaskRecorderUtil() {
            }
            TaskRecorderUtil.generateGuid = function () {
                function guidPart() {
                    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
                }
                return guidPart() + guidPart() + "-" + guidPart() + "-" + guidPart() + "-" + guidPart() + "-" + guidPart() + guidPart() + guidPart();
            };
            return TaskRecorderUtil;
        }());
        TaskRecorder.TaskRecorderUtil = TaskRecorderUtil;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Triggers;
    (function (Triggers) {
        "use strict";
        var TriggerHelper = (function () {
            function TriggerHelper() {
            }
            TriggerHelper.executeTriggerWorkflowAsync = function (preTrigger, workflowDelegate, postTrigger) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(workflowDelegate)) {
                    throw "businessLogic parameter cannot be null or undefined";
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var businessLogicReturnValue = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(preTrigger)) {
                    asyncQueue.enqueue(function () {
                        var preTriggerResult = preTrigger();
                        return asyncQueue.cancelOn(preTriggerResult);
                    });
                }
                asyncQueue.enqueue(function () {
                    var executionResult = workflowDelegate().done(function (result) {
                        businessLogicReturnValue = result;
                    });
                    return asyncQueue.cancelOn(executionResult);
                });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(postTrigger)) {
                    asyncQueue.enqueue(function () {
                        return postTrigger(businessLogicReturnValue);
                    });
                }
                return asyncQueue.run().map(function (result) {
                    return { data: businessLogicReturnValue, canceled: result.canceled };
                });
            };
            return TriggerHelper;
        }());
        Triggers.TriggerHelper = TriggerHelper;
    })(Triggers = Commerce.Triggers || (Commerce.Triggers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Triggers;
    (function (Triggers) {
        "use strict";
        var TriggerManager = (function () {
            function TriggerManager() {
                this._triggerMap = {};
            }
            Object.defineProperty(TriggerManager, "instance", {
                get: function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(TriggerManager._instance)) {
                        TriggerManager._instance = new TriggerManager();
                    }
                    return TriggerManager._instance;
                },
                enumerable: true,
                configurable: true
            });
            TriggerManager.prototype.execute = function (triggerType, options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(triggerType)) {
                    throw new Error("TriggerManager::execute - Invalid trigger execution parameters: The trigger type cannot be null.");
                }
                var triggerTypeName = triggerType.toString();
                var triggersToExecute = this._triggerMap[triggerTypeName];
                if (!Commerce.ArrayExtensions.hasElements(triggersToExecute)) {
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }
                var triggerQueue = this.triggerQueue(triggerType, triggersToExecute, options);
                return triggerQueue.run();
            };
            TriggerManager.prototype.register = function (triggerType, triggerDetails) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(triggerType)
                    || Commerce.ObjectExtensions.isNullOrUndefined(triggerDetails)
                    || Commerce.ObjectExtensions.isNullOrUndefined(triggerDetails.trigger)) {
                    throw new Error("TriggerManager::register - Invalid trigger registration: The trigger type and trigger cannot be null.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(this._triggerMap[triggerType.toString()])) {
                    this._triggerMap[triggerType.toString()] = [];
                }
                this._triggerMap[triggerType.toString()].push(triggerDetails);
            };
            TriggerManager.prototype.triggerQueue = function (triggerType, triggerDetails, options) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var isCancelable = triggerType instanceof Triggers.CancelableTriggerType;
                triggerDetails.forEach(function (trigger) {
                    asyncQueue.enqueue(function () {
                        var triggerResult = _this.executeTrigger(triggerType, trigger, options);
                        return isCancelable ? asyncQueue.cancelOn(triggerResult) : triggerResult;
                    });
                });
                return asyncQueue;
            };
            TriggerManager.prototype.executeTrigger = function (triggerType, triggerDetails, options) {
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var triggerResult = new Commerce.AsyncResult();
                    try {
                        Commerce.RetailLogger.coreTriggerExecutionStarted(triggerType.toString(), triggerDetails.name, triggerDetails.publisher, triggerDetails.version);
                        var trigger = triggerDetails.trigger;
                        var promise = trigger.execute(options);
                        if (promise instanceof Promise) {
                            promise.then(function (result) {
                                if (result && result.canceled) {
                                    Commerce.RetailLogger.coreTriggerExecutionCanceled(triggerType.toString(), triggerDetails.name, triggerDetails.publisher, triggerDetails.version);
                                    triggerResult.resolve({ canceled: true });
                                }
                                else {
                                    Commerce.RetailLogger.coreTriggerExecutionCompleted(triggerType.toString(), triggerDetails.name, triggerDetails.publisher, triggerDetails.version);
                                    triggerResult.resolve({ canceled: false });
                                }
                            }).catch(function (triggerError) {
                                triggerError = triggerError || {};
                                var error;
                                if (triggerError instanceof Commerce.Client.Entities.ExtensionError) {
                                    error = new Commerce.Client.Entities.PosExtensionError(triggerError);
                                }
                                else {
                                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR);
                                }
                                Commerce.RetailLogger.coreTriggerExecutionFailed(triggerType.toString(), triggerDetails.name, triggerDetails.publisher, triggerDetails.version, JSON.stringify(triggerError));
                                triggerResult.reject([error]);
                            });
                        }
                        else {
                            triggerResult.resolve({ canceled: false });
                        }
                    }
                    catch (error) {
                        Commerce.RetailLogger.coreTriggerExecutionFailed(triggerType.toString(), triggerDetails.name, triggerDetails.publisher, triggerDetails.version, JSON.stringify(error));
                        triggerResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                    }
                    return asyncQueue.cancelOn(triggerResult);
                });
                return asyncQueue.run();
            };
            TriggerManager._instance = null;
            return TriggerManager;
        }());
        Triggers.TriggerManager = TriggerManager;
    })(Triggers = Commerce.Triggers || (Commerce.Triggers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AddressHelper = (function () {
        function AddressHelper() {
        }
        AddressHelper.getFormattedAddress = function (address, isOneLiner) {
            if (isOneLiner === void 0) { isOneLiner = false; }
            var addressIndex = Commerce.ApplicationContext.Instance.countriesIndexMap.getItem(address.ThreeLetterISORegionName);
            if (Commerce.ObjectExtensions.isNullOrUndefined(addressIndex)) {
                return [];
            }
            var countryRegion = Commerce.ApplicationContext.Instance.Countries[addressIndex];
            var addressFormatLines = countryRegion.AddressFormatLines;
            var addressLines = [];
            var addressFormatLine;
            var addressLine = Commerce.StringExtensions.EMPTY;
            var localizedWhitespace = Commerce.ViewModelAdapter.getResourceString("string_2408");
            var lastNumberOfSpaces = 0;
            var lastSeparator = Commerce.StringExtensions.EMPTY;
            for (var i = 0; i < addressFormatLines.length; i++) {
                addressFormatLine = addressFormatLines[i];
                if (addressFormatLine.Inactive || addressFormatLine.IsDataEntryOnly) {
                    continue;
                }
                var addressPart = AddressHelper.getAddressPart(addressFormatLine, address, countryRegion);
                if (!Commerce.StringExtensions.isNullOrWhitespace(addressPart)) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(lastSeparator)) {
                        addressLine += lastSeparator;
                    }
                    var numberOfSpaces = lastNumberOfSpaces;
                    while (numberOfSpaces-- > 0) {
                        addressLine += " ";
                    }
                    if (isOneLiner && !Commerce.StringExtensions.isNullOrWhitespace(addressLine) &&
                        Commerce.StringExtensions.isNullOrWhitespace(lastSeparator) && lastNumberOfSpaces <= 0) {
                        addressLine += localizedWhitespace;
                    }
                    addressLine += addressPart;
                    lastNumberOfSpaces = addressFormatLine.NumberOfSpaces;
                    lastSeparator = addressFormatLine.Separator;
                }
                if (!isOneLiner && addressFormatLine.NewLine) {
                    lastSeparator = Commerce.StringExtensions.EMPTY;
                    lastNumberOfSpaces = 0;
                    addressLines.push(addressLine);
                    addressLine = Commerce.StringExtensions.EMPTY;
                }
            }
            addressLines.push(addressLine);
            return addressLines;
        };
        AddressHelper.validateAddress = function (address) {
            var validationErrors = [];
            var errorMessage;
            if (Commerce.NumberExtensions.isNullNaNOrZero(address.LogisticsLocationRoleRecordId)) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_4856", undefined, Commerce.ViewModelAdapter.getResourceString("string_4856")));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.Phone) && address.Phone.length > Commerce.CustomerValidationConstants.PHONE_MAX_LENGTH) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1309", undefined, Commerce.ViewModelAdapter.getResourceString("string_1332")));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.Url) && address.Url.length > Commerce.CustomerValidationConstants.URL_MAX_LENGTH) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1330", undefined, Commerce.ViewModelAdapter.getResourceString("string_1330")));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.Email) && !Commerce.Core.RegularExpressionValidations.validateEmail(address.Email)) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1331", undefined, Commerce.ViewModelAdapter.getResourceString("string_1331")));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.Street) && address.Street.length > Commerce.CustomerValidationConstants.STREET_MAX_LENGTH) {
                errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1380"), Commerce.CustomerValidationConstants.NAME_MAX_LENGTH);
                validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.City) && address.City.length > Commerce.CustomerValidationConstants.CITY_MAX_LENGTH) {
                errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4850"), Commerce.CustomerValidationConstants.CITY_MAX_LENGTH);
                validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.ZipCode) && address.ZipCode.length > Commerce.CustomerValidationConstants.ZIPCODE_MAX_LENGTH) {
                errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4851"), Commerce.CustomerValidationConstants.ZIPCODE_MAX_LENGTH);
                validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.County) && address.County.length > Commerce.CustomerValidationConstants.COUNTY_MAX_LENGTH) {
                errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4852"), Commerce.CustomerValidationConstants.COUNTY_MAX_LENGTH);
                validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.DistrictName) &&
                address.DistrictName.length > Commerce.CustomerValidationConstants.DISTRICTNAME_MAX_LENGTH) {
                errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4853"), Commerce.CustomerValidationConstants.DISTRICTNAME_MAX_LENGTH);
                validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.BuildingCompliment) &&
                address.BuildingCompliment.length > Commerce.CustomerValidationConstants.BUILDINGCOMPLIMENT_MAX_LENGTH) {
                errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4854"), Commerce.CustomerValidationConstants.BUILDINGCOMPLIMENT_MAX_LENGTH);
                validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(address.StreetNumber) &&
                address.StreetNumber.length > Commerce.CustomerValidationConstants.STREETNUMBER_MAX_LENGTH) {
                errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_4855"), Commerce.CustomerValidationConstants.STREETNUMBER_MAX_LENGTH);
                validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
            }
            return validationErrors;
        };
        AddressHelper.getAddressPart = function (addressFormatLine, address, countryRegion) {
            switch (addressFormatLine.AddressComponentNameValue) {
                case Commerce.Proxy.Entities.AddressFormatLineType.ZipCode:
                    return address.ZipCode;
                case Commerce.Proxy.Entities.AddressFormatLineType.City:
                    return address.City;
                case Commerce.Proxy.Entities.AddressFormatLineType.County:
                    if (addressFormatLine.Expand) {
                        return address.CountyName;
                    }
                    else {
                        return address.County;
                    }
                case Commerce.Proxy.Entities.AddressFormatLineType.State:
                    if (addressFormatLine.Expand) {
                        return address.StateName;
                    }
                    else {
                        return address.State;
                    }
                case Commerce.Proxy.Entities.AddressFormatLineType.CountryRegion:
                    if (addressFormatLine.Expand) {
                        return countryRegion.LongName;
                    }
                    else {
                        return address.ThreeLetterISORegionName;
                    }
                case Commerce.Proxy.Entities.AddressFormatLineType.StreetName:
                    return address.Street;
                case Commerce.Proxy.Entities.AddressFormatLineType.District:
                    return address.DistrictName;
                case Commerce.Proxy.Entities.AddressFormatLineType.StreetNumber:
                    return address.StreetNumber;
                case Commerce.Proxy.Entities.AddressFormatLineType.BuildingCompliment:
                    return address.BuildingCompliment;
                case Commerce.Proxy.Entities.AddressFormatLineType.Postbox:
                    return address.Postbox;
                default:
                    Commerce.RetailLogger.coreHelpersUnrecognizedAddressComponent(addressFormatLine.AddressComponentNameValue);
                    break;
            }
            return Commerce.StringExtensions.EMPTY;
        };
        return AddressHelper;
    }());
    Commerce.AddressHelper = AddressHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ApplicationHelper = (function () {
        function ApplicationHelper() {
        }
        ApplicationHelper.isWebApplicationType = function (applicationType) {
            var isWebApplicationTypeVal = false;
            switch (applicationType) {
                case Commerce.Proxy.Entities.ApplicationTypeEnum.CloudPos:
                case Commerce.Proxy.Entities.ApplicationTypeEnum.ModernPOSAndroid:
                case Commerce.Proxy.Entities.ApplicationTypeEnum.ModernPOSIOS:
                    isWebApplicationTypeVal = true;
            }
            return isWebApplicationTypeVal;
        };
        return ApplicationHelper;
    }());
    Commerce.ApplicationHelper = ApplicationHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Utilities;
    (function (Utilities) {
        "use strict";
        var AsyncExecutionHelper = (function () {
            function AsyncExecutionHelper() {
            }
            AsyncExecutionHelper.forEachAsync = function (array, iterator, then) {
                function next(i) {
                    if (i < array.length) {
                        iterator(array[i], function () { next(i + 1); }, i);
                    }
                    else if (then) {
                        then();
                    }
                }
                next(0);
            };
            return AsyncExecutionHelper;
        }());
        Utilities.AsyncExecutionHelper = AsyncExecutionHelper;
    })(Utilities = Commerce.Utilities || (Commerce.Utilities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AttributeHelper = (function () {
        function AttributeHelper() {
        }
        AttributeHelper.mergeAttributes = function (existingAttributes, newAttributes) {
            existingAttributes = Commerce.ObjectExtensions.isNullOrUndefined(existingAttributes) ? [] : existingAttributes;
            newAttributes = Commerce.ObjectExtensions.isNullOrUndefined(newAttributes) ? [] : newAttributes;
            var uniqueExistingAttributes = existingAttributes.filter(function (existingAttribute) {
                return !Commerce.ArrayExtensions.hasElement(newAttributes, existingAttribute, function (newAttribute, existingAttribute) {
                    return newAttribute.Name === existingAttribute.Name;
                });
            });
            return uniqueExistingAttributes.concat(newAttributes);
        };
        return AttributeHelper;
    }());
    Commerce.AttributeHelper = AttributeHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CartHelper = (function () {
        function CartHelper() {
        }
        CartHelper.isInProgress = function (cart) {
            return !(Commerce.ObjectExtensions.isNullOrUndefined(cart)
                || Commerce.StringExtensions.isNullOrWhitespace(cart.Id)
                || Commerce.ObjectExtensions.isNullOrUndefined(cart.CartStatusValue)
                || cart.CartStatusValue === Commerce.CartStateType.None);
        };
        CartHelper.isCartType = function (cart, cartTypeValue) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cart) && !Commerce.ObjectExtensions.isNullOrUndefined(cartTypeValue)) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart.CartTypeValue)) {
                    return Commerce.Proxy.Entities.CartType.None === cartTypeValue;
                }
                return cart.CartTypeValue === cartTypeValue;
            }
            return false;
        };
        CartHelper.GetNonVoidedCartLines = function (cartLines) {
            if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                return [];
            }
            return cartLines.filter(function (cartLine) { return !cartLine.IsVoided; });
        };
        CartHelper.GetNonVoidedShippingCartLines = function (cartLines) {
            if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                return [];
            }
            return cartLines.filter(function (cartLine) { return (!cartLine.IsVoided
                && cartLine.DeliveryMode !== Commerce.ApplicationContext.Instance.channelConfiguration.PickupDeliveryModeCode
                && cartLine.DeliveryMode !== Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode); });
        };
        CartHelper.getNonReturnCartLines = function (cartLines) {
            if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                return [];
            }
            return cartLines.filter(function (cartLine) { return !cartLine.IsVoided && cartLine.Quantity > 0; });
        };
        CartHelper.isCustomerOnCart = function (cart, customerId) {
            return !Commerce.ObjectExtensions.isNullOrUndefined(cart)
                && !Commerce.StringExtensions.isNullOrWhitespace(cart.CustomerId)
                && !Commerce.StringExtensions.isNullOrWhitespace(customerId)
                && (cart.CustomerId === customerId);
        };
        CartHelper.hasProductOrGiftCardLine = function (cart, allowVoidedLines) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cart) && Commerce.ArrayExtensions.hasElements(cart.CartLines)) {
                var cartLines = allowVoidedLines ? cart.CartLines : CartHelper.GetNonVoidedCartLines(cart.CartLines);
                for (var i = 0; i < cartLines.length; i++) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(cartLines[i].ItemId) || cartLines[i].IsGiftCardLine) {
                        return true;
                    }
                }
            }
            return false;
        };
        CartHelper.containsGiftCardLine = function (cart, allowVoidedLines) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cart) && Commerce.ArrayExtensions.hasElements(cart.CartLines)) {
                var cartLines = allowVoidedLines ? cart.CartLines : CartHelper.GetNonVoidedCartLines(cart.CartLines);
                for (var i = 0; i < cartLines.length; i++) {
                    if (cartLines[i].IsGiftCardLine) {
                        return true;
                    }
                }
            }
            return false;
        };
        CartHelper.areAllCartLinesSelected = function (cart, selectedCartLines) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart) || !Commerce.ArrayExtensions.hasElements(selectedCartLines)) {
                return false;
            }
            var cartLinesTarget = CartHelper.getNonReturnCartLines(selectedCartLines);
            var cartLinesReference = CartHelper.getNonReturnCartLines(cart.CartLines);
            return Commerce.ArrayExtensions.hasElements(cartLinesTarget)
                && cartLinesReference.length === cartLinesTarget.length;
        };
        CartHelper.getCartLinesByLineIds = function (cart, lineIds) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart) || !Commerce.ArrayExtensions.hasElements(lineIds)) {
                return [];
            }
            return cart.CartLines.filter(function (cartLine) {
                return Commerce.ArrayExtensions.hasElement(lineIds, cartLine.LineId);
            });
        };
        CartHelper.getCartLineByLineId = function (cart, lineId) {
            return Commerce.ArrayExtensions.firstOrUndefined(CartHelper.getCartLinesByLineIds(cart, [lineId]));
        };
        CartHelper.getTenderLineByTenderLineIds = function (cart, tenderLineIds) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart) || !Commerce.ArrayExtensions.hasElements(tenderLineIds)) {
                return [];
            }
            return cart.TenderLines.filter(function (tenderLine) {
                return Commerce.ArrayExtensions.hasElement(tenderLineIds, tenderLine.TenderLineId);
            });
        };
        CartHelper.cartAmountDue = function () {
            if (Commerce.Session.instance.cart) {
                return Commerce.Session.instance.cart.AmountDue;
            }
            else {
                return Number.NaN;
            }
        };
        CartHelper.cartEstimatedShippingAmount = function () {
            if (Commerce.Session.instance.cart) {
                return Commerce.Session.instance.cart.EstimatedShippingAmount;
            }
            else {
                return Number.NaN;
            }
        };
        CartHelper.getEstimatedRemainingBalance = function () {
            if (Commerce.CustomerOrderHelper.isCustomerOrder(Commerce.Session.instance.cart) && Commerce.ApplicationContext.Instance.channelConfiguration.EnableOmniChannelPayments) {
                return Commerce.Session.instance.cart.CustomerOrderRemainingBalance;
            }
            else if (Commerce.CustomerOrderHelper.isCustomerOrder(Commerce.Session.instance.cart)
                && Commerce.CustomerOrderHelper.hasLinesForShipping(Commerce.Session.instance.cart.CartLines)) {
                return CartHelper.cartEstimatedShippingAmount();
            }
            else if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart)) {
                return Commerce.Session.instance.cart.AmountDue;
            }
            else {
                return Number.NaN;
            }
        };
        CartHelper.getLastTenderLine = function (cart) {
            var tenderLines = cart.TenderLines;
            return tenderLines.length > 0 ? tenderLines[tenderLines.length - 1] : null;
        };
        CartHelper.isCreditOrDebitCard = function (tenderLine) {
            var isCreditOrDebitCard = false;
            if (tenderLine) {
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
                isCreditOrDebitCard = ((tenderType.OperationId === Commerce.Operations.RetailOperation.PayCard)
                    && (Commerce.StringExtensions.isNullOrWhitespace(tenderLine.GiftCardId))
                    && (Commerce.StringExtensions.isNullOrWhitespace(tenderLine.LoyaltyCardId)));
            }
            return isCreditOrDebitCard;
        };
        CartHelper.isExternalGiftCard = function (tenderLine) {
            var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
            var isExternalGiftCard = !Commerce.StringExtensions.isNullOrWhitespace(tenderLine.GiftCardId)
                && !Commerce.StringExtensions.isNullOrWhitespace(tenderType.ConnectorId);
            return isExternalGiftCard;
        };
        CartHelper.isInternalGiftCard = function (tenderLine) {
            var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
            var isInternalGiftCard = !Commerce.StringExtensions.isNullOrWhitespace(tenderLine.GiftCardId)
                && Commerce.StringExtensions.isNullOrWhitespace(tenderType.ConnectorId);
            return isInternalGiftCard;
        };
        CartHelper.getPeripheralPaymentType = function (tenderLine) {
            if (!CartHelper.isCreditOrDebitCard(tenderLine) && CartHelper.isInternalGiftCard(tenderLine)) {
                return Commerce.Proxy.Entities.PeripheralPaymentType.RetailServer;
            }
            else if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()) {
                return Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentAccept;
            }
            else if (tenderLine.ProcessingTypeValue === Commerce.Proxy.Entities.PaymentProcessingType.Deferred) {
                return Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController;
            }
            else if (Commerce.Peripherals.instance.paymentTerminal && Commerce.Peripherals.instance.paymentTerminal.isActive) {
                return Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal;
            }
            else {
                return Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController;
            }
        };
        CartHelper.cartVersionsMatch = function (cartOne, cartTwo) {
            return (Commerce.ObjectExtensions.isNullOrUndefined(cartOne) && Commerce.ObjectExtensions.isNullOrUndefined(cartTwo))
                || (!Commerce.ObjectExtensions.isNullOrUndefined(cartOne) && !Commerce.ObjectExtensions.isNullOrUndefined(cartTwo)
                    && cartOne.Version === cartTwo.Version);
        };
        CartHelper.isReturnLine = function (cartLine) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                throw "cartLine is undefined or null";
            }
            return cartLine.Quantity < 0 || !Commerce.StringExtensions.isNullOrWhitespace(cartLine.ReturnTransactionId);
        };
        CartHelper.getInvoiceNumber = function (cartId) {
            var cardIdLength = 6;
            var positionOfCartId = cartId.lastIndexOf("-") + 1;
            var filteredCartId = cartId.substr(positionOfCartId);
            var invoiceNumber = (filteredCartId.length > cardIdLength) ? filteredCartId.substr(filteredCartId.length - cardIdLength, cardIdLength) :
                Commerce.StringExtensions.padLeft(filteredCartId, "0", cardIdLength);
            return invoiceNumber;
        };
        return CartHelper;
    }());
    Commerce.CartHelper = CartHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DimensionStringKind;
    (function (DimensionStringKind) {
        DimensionStringKind[DimensionStringKind["LABEL"] = 0] = "LABEL";
        DimensionStringKind[DimensionStringKind["OPTIONSCAPTION"] = 1] = "OPTIONSCAPTION";
    })(DimensionStringKind = Commerce.DimensionStringKind || (Commerce.DimensionStringKind = {}));
    var ProductPropertiesHelper = (function () {
        function ProductPropertiesHelper() {
        }
        ProductPropertiesHelper.getDimensionString = function (dimension, stringKind) {
            if (stringKind === void 0) { stringKind = DimensionStringKind.OPTIONSCAPTION; }
            var value = "";
            var dimensionString = null;
            if (!Commerce.ObjectExtensions.isString(dimension)) {
                dimensionString = Commerce.Proxy.Entities.ProductDimensionType[dimension];
            }
            else {
                dimensionString = dimension;
            }
            var dimensionStringKey = null;
            if (!Commerce.StringExtensions.isNullOrWhitespace(dimensionString)) {
                dimensionStringKey = ProductPropertiesHelper.getDimensionStringKey(dimensionString, stringKind);
            }
            if (!Commerce.StringExtensions.isEmpty(dimensionStringKey)) {
                value = Commerce.ViewModelAdapter.getResourceString(dimensionStringKey);
            }
            return value;
        };
        ProductPropertiesHelper.getActivePricesUsingCart = function (productIds) {
            if (!Commerce.ArrayExtensions.hasElements(productIds)) {
                return Commerce.AsyncResult.createResolved([]);
            }
            var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
            var projectionDomain = Commerce.Session.instance.productCatalogStore.Context;
            var activeDate = Commerce.DateExtensions.now;
            var customerId;
            var affiliationLoyaltyTiers;
            if (Commerce.Session.instance.isCartInProgress) {
                customerId = Commerce.Session.instance.cart.CustomerId;
                affiliationLoyaltyTiers = Commerce.Session.instance.cart.AffiliationLines;
            }
            return productManager.getActivePricesAsync(projectionDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers);
        };
        ProductPropertiesHelper.getActivePricesAndUpdateProductSearchResults = function (gridData) {
            var newProductIds = gridData.map(function (value) { return value.RecordId; });
            return ProductPropertiesHelper.getActivePricesUsingCart(newProductIds)
                .done(function (productPrices) {
                ProductPropertiesHelper.updatePricesOnProductSearchResults(gridData, productPrices);
            }).map(function () {
                return gridData;
            });
        };
        ProductPropertiesHelper.updatePricesOnSimpleProducts = function (productsToUpdate, productPrices) {
            var productPricesByItemId = Object.create(null);
            productPrices.forEach(function (productPrice) {
                productPricesByItemId[productPrice.ProductId] = productPrice;
            });
            productsToUpdate.forEach(function (productToUpdate) {
                var matchedPrice = productPricesByItemId[productToUpdate.RecordId];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(matchedPrice)) {
                    productToUpdate.AdjustedPrice = matchedPrice.AdjustedPrice;
                }
            });
        };
        ProductPropertiesHelper.updatePricesOnProductSearchResults = function (productsToUpdate, productPrices) {
            var productPricesByItemId = Object.create(null);
            productPrices.forEach(function (productPrice) {
                productPricesByItemId[productPrice.ItemId] = productPrice;
            });
            productsToUpdate.forEach(function (productToUpdate) {
                var matchedPrice = productPricesByItemId[productToUpdate.ItemId];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(matchedPrice)) {
                    productToUpdate.Price = matchedPrice.AdjustedPrice;
                }
            });
        };
        ProductPropertiesHelper.getDimensionStringKey = function (dimensionKey, stringKind) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(ProductPropertiesHelper.DIMENSION_STRINGKEYS_MAP)) {
                var map = new Commerce.Dictionary();
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.COLOR + DimensionStringKind.LABEL, "string_930");
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.COLOR + DimensionStringKind.OPTIONSCAPTION, "string_915");
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.SIZE + DimensionStringKind.LABEL, "string_931");
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.SIZE + DimensionStringKind.OPTIONSCAPTION, "string_917");
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.STYLE + DimensionStringKind.LABEL, "string_932");
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.STYLE + DimensionStringKind.OPTIONSCAPTION, "string_916");
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.CONFIGURATION + DimensionStringKind.LABEL, "string_933");
                map.setItem(Commerce.Proxy.Entities.DimensionKeys.CONFIGURATION + DimensionStringKind.OPTIONSCAPTION, "string_918");
                ProductPropertiesHelper.DIMENSION_STRINGKEYS_MAP = map;
            }
            return ProductPropertiesHelper.DIMENSION_STRINGKEYS_MAP.getItem(dimensionKey.toUpperCase() + stringKind);
        };
        return ProductPropertiesHelper;
    }());
    Commerce.ProductPropertiesHelper = ProductPropertiesHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CartLineHelper = (function () {
        function CartLineHelper() {
        }
        CartLineHelper.isFromAReceipt = function (cartLine) {
            var isFromAReceipt = !Commerce.ObjectExtensions.isNullOrUndefined(cartLine)
                && !Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ReturnTransactionId)
                && !Commerce.StringExtensions.isEmptyOrWhitespace(cartLine.ReturnTransactionId);
            return isFromAReceipt;
        };
        CartLineHelper.getModifiedCartLines = function (originalLines, newLines) {
            var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
            var allowAggregation = !Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration) && deviceConfiguration.AllowItemsAggregation;
            var quantitiesByLineId = Object.create(null);
            originalLines.forEach(function (c) { return quantitiesByLineId[c.LineId] = c.Quantity; });
            var addedCartLines = newLines.filter(function (c) {
                return (allowAggregation && quantitiesByLineId[c.LineId] !== c.Quantity)
                    || (!allowAggregation && quantitiesByLineId[c.LineId] === undefined);
            });
            return addedCartLines;
        };
        CartLineHelper.getProductName = function (cartLine) {
            if (cartLine.IsGiftCardLine) {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1245"), cartLine.Comment);
            }
            else if (cartLine.IsInvoiceLine) {
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1252"), cartLine.Comment);
            }
            else {
                var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                return Commerce.ObjectExtensions.isNullOrUndefined(product) ? Commerce.StringExtensions.EMPTY : product.Name;
            }
        };
        CartLineHelper.IsProduct = function (cartLine) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine) && !cartLine.IsGiftCardLine && !cartLine.IsInvoiceLine) {
                return true;
            }
            return false;
        };
        return CartLineHelper;
    }());
    Commerce.CartLineHelper = CartLineHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CSSHelpers = (function () {
        function CSSHelpers() {
        }
        CSSHelpers.applyThemeAsync = function (deviceConfiguration) {
            CSSHelpers.currentTextDir($("body").attr("dir"));
            $("html").attr("lang", Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName);
            var theme;
            var accentColor;
            var headerColor;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration)) {
                accentColor = deviceConfiguration.AccentColor;
                headerColor = deviceConfiguration.HeaderColor;
                theme = deviceConfiguration.Theme;
            }
            else {
                theme = "dark";
                accentColor = CSSHelpers.BLUE_ACCENT_COLOR_KEY;
                headerColor = accentColor;
            }
            if (accentColor !== CSSHelpers.accentColorId) {
                CSSHelpers.applyAccentColor(accentColor, headerColor);
            }
            CSSHelpers.accentColorId = accentColor;
            CSSHelpers.deviceConfigurationTheme = theme;
            CSSHelpers.applyNavigationBarColors(theme, deviceConfiguration);
            return CSSHelpers.applyThemeColorAsync(theme);
        };
        CSSHelpers.loadAxRetailStylesheetAsync = function () {
            var _this = this;
            var results = [];
            $(CSSHelpers.AXRETAIL_STYLESHEET_ASYNC_LINKS_SELECTOR).each(function (index, element) {
                var $element = $(element);
                var uri = $element.attr("href");
                var result = _this.cacheFileContentAsync(uri).done(function (content) {
                    $element.attr("rel", "stylesheet");
                }).fail(function (errors) {
                    Commerce.RetailLogger.applicationStylesheetsLoadFailed(uri, errors[0].ErrorCode, errors[0].extraData);
                });
                results.push(result);
            });
            return Commerce.VoidAsyncResult.join(results);
        };
        CSSHelpers.loadCSSDeveloperModePresets = function () {
            CSSHelpers.setDeveloperModeThemeDefault();
            CSSHelpers.generateGridHelper();
            $(window).resize(function (e) {
                CSSHelpers.isDeveloperGridRendered = false;
                CSSHelpers.generateGridHelper();
            });
            CSSHelpers.setGridHelperVisibility(CSSHelpers.isGridHelperVisible());
            CSSHelpers.setDeveloperModeTextDirectionDefault();
            CSSHelpers.setDeveloperModeColoring(CSSHelpers.isDeveloperModeColoringVisible());
        };
        CSSHelpers.setDeveloperModeNavigationLoggingState = function (isNavigationLoggingEnabled) {
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.NAVIGATION_LOGGING_ENABLED, "" + isNavigationLoggingEnabled);
        };
        CSSHelpers.isDeveloperModeNavigationLoggingEnabled = function () {
            return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.NAVIGATION_LOGGING_ENABLED)) ?
                Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.NAVIGATION_LOGGING_ENABLED) === "true" : false;
        };
        CSSHelpers.setDeveloperModeNavigationLogVisibility = function (isNavigationLogVisible) {
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.NAVIGATION_LOG_VISIBLE, "" + isNavigationLogVisible);
        };
        CSSHelpers.isDeveloperModeNavigationLogVisible = function () {
            return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.NAVIGATION_LOG_VISIBLE)) ?
                Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.NAVIGATION_LOG_VISIBLE) === "true" : false;
        };
        CSSHelpers.setCSSDeveloperMode = function (isDeveloperMode) {
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_DEVMODE, "" + isDeveloperMode);
        };
        CSSHelpers.isCSSDeveloperMode = function () {
            if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_DEVMODE)) ||
                Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_DEVMODE) === "undefined") {
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_DEVMODE, "false");
            }
            return Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_DEVMODE) === "true";
        };
        CSSHelpers.setDeveloperModeTheme = function (theme) {
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_THEME_COLOR, theme);
            if (CSSHelpers.isCSSDeveloperMode()) {
                CSSHelpers.applyThemeColorAsync(theme);
            }
            else {
                CSSHelpers.applyThemeColorAsync(CSSHelpers.deviceConfigurationTheme);
            }
        };
        CSSHelpers.setDeveloperModeThemeDefault = function () {
            if (CSSHelpers.isCSSDeveloperMode()) {
                var theme = CSSHelpers.getDeveloperModeTheme();
                if (!CSSHelpers.isDeveloperModeThemeSet()) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_THEME_COLOR, theme);
                }
                CSSHelpers.applyThemeColorAsync(theme);
            }
        };
        CSSHelpers.getDeveloperModeTheme = function () {
            return CSSHelpers.isDeveloperModeThemeSet() ? Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_THEME_COLOR) : CSSHelpers.currentThemeLoaded();
        };
        CSSHelpers.isDeveloperModeThemeSet = function () {
            return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_THEME_COLOR))
                && Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_THEME_COLOR) !== "undefined";
        };
        CSSHelpers.getDeveloperModeTextDirection = function () {
            return CSSHelpers.isDeveloperModeTextDirectionSet()
                ? Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_BODY_DIRECTION)
                : ($("body").attr("dir") || CSSHelpers.LEFT_TO_RIGHT_TEXT_DIRECTION);
        };
        CSSHelpers.isRightToLeft = function () {
            return CSSHelpers.currentTextDir() === CSSHelpers.RIGHT_TO_LEFT_TEXT_DIRECTION;
        };
        CSSHelpers.setTextDirection = function (dir) {
            Commerce.CSSHelpers.currentTextDir(dir);
            $("body").attr("dir", dir);
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_BODY_DIRECTION, dir);
        };
        CSSHelpers.setDeveloperModeTextDirectionDefault = function () {
            if (CSSHelpers.isCSSDeveloperMode()) {
                var dir = CSSHelpers.getDeveloperModeTextDirection();
                if (!CSSHelpers.isDeveloperModeTextDirectionSet()) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_BODY_DIRECTION, dir);
                }
                CSSHelpers.setTextDirection(dir);
            }
        };
        CSSHelpers.isDeveloperModeTextDirectionSet = function () {
            return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_BODY_DIRECTION))
                && Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_BODY_DIRECTION) !== "undefined";
        };
        CSSHelpers.setGridHelperVisibility = function (isVisible) {
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_DEV_GRID, "" + isVisible);
            if (Commerce.CSSHelpers.isCSSDeveloperMode()) {
                if (isVisible) {
                    $("#mposGridlines").show();
                    CSSHelpers.generateGridHelper();
                }
                else {
                    $("#mposGridlines").hide();
                }
            }
            else {
                $("#mposGridlines").hide();
            }
        };
        CSSHelpers.isGridHelperVisible = function () {
            return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_DEV_GRID)) ?
                Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_DEV_GRID) === "true" : false;
        };
        CSSHelpers.generateGridHelper = function () {
            if (CSSHelpers.isDeveloperGridRendered) {
                return null;
            }
            CSSHelpers.isDeveloperGridRendered = true;
            var gridSize = parseInt($("body").css("font-size"), 10);
            var numHorizontalGrids = Math.ceil($(window).height() / gridSize);
            var numVerticalGrids = Math.ceil($(window).width() / gridSize);
            var cellColor = "rgba(255, 0, 0, 0.15)";
            var divisionColor = "rgba(0, 255, 255, 0.25)";
            var cellTemplate = ["<div class='width100Percent height100Percent top0 left0' style='",
                "borderSide",
                ": 1px solid ",
                "color",
                "; ",
                "size",
                "px;'></div>"];
            var gridHTML = [];
            for (var r = 1; r <= numHorizontalGrids; r++) {
                var isRowDivision = r !== 0 && r % 10 === 0;
                var borderTopColor = isRowDivision ? divisionColor : cellColor;
                cellTemplate[1] = "border-bottom";
                cellTemplate[3] = borderTopColor;
                cellTemplate[5] = "height: " + (gridSize * r) + "px'>";
                gridHTML.push(cellTemplate.join(""));
            }
            for (var c = 1; c <= numVerticalGrids; c++) {
                var isCellDivision = c !== 0 && c % 10 === 0;
                var borderLeftColor = isCellDivision ? divisionColor : cellColor;
                cellTemplate[1] = "border-right";
                cellTemplate[3] = borderLeftColor;
                cellTemplate[5] = "width: " + (gridSize * c) + "px'>";
                gridHTML.push(cellTemplate.join(""));
            }
            $("#mposGridlinesContainer").empty().append(gridHTML.join(""));
            $(window).unbind("mousemove").bind("mousemove", function (e) {
                var positionX = e.pageX;
                var positionY = e.pageY;
                $("#mposGridCoordsX").html("" + (Math.floor(positionX / 10) * 10 + 10));
                $("#mposGridCoordsY").html("" + (Math.floor(positionY / 10) * 10 + 10));
            });
        };
        CSSHelpers.isDeveloperModeColoringVisible = function () {
            return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_DEV_COLORS)) ?
                Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CSS_DEV_COLORS) === "true" : false;
        };
        CSSHelpers.setDeveloperModeColoring = function (isVisible) {
            if (CSSHelpers.isCSSDeveloperMode() && isVisible) {
                if ($("#developerModeCommonStylesheet").length < 1) {
                    CSSHelpers.loadStyleSheetAsync("Stylesheets/Themes/DeveloperMode.css", "developerModeCommonStylesheet");
                }
            }
            else {
                $("#developerModeCommonStylesheet").remove();
            }
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CSS_DEV_COLORS, "" + isVisible);
        };
        CSSHelpers.colorToRGBAStyle = function (color) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(color)) {
                color = { A: 0, R: 0, G: 0, B: 0 };
            }
            return "rgba(" + color.R + "," +
                color.G + "," +
                color.B + "," +
                (color.A / 255) + ")";
        };
        CSSHelpers.getButtonFontStyle = function (buttonStyleValue) {
            var buttonFontStyle;
            switch (buttonStyleValue) {
                case 0:
                    buttonFontStyle = "font-style:normal";
                    break;
                case 1:
                    buttonFontStyle = "font-weight:bold";
                    break;
                case 2:
                    buttonFontStyle = "font-style:italic";
                    break;
                case 3:
                    buttonFontStyle = "font-style:italic !important;font-weight:bold";
                    break;
                default:
                    buttonFontStyle = "font-style:normal";
                    break;
            }
            return buttonFontStyle;
        };
        CSSHelpers.colorIntToHexColor = function (color) {
            var legacyColorMapping = {
                13004559: "#0F6FCF",
                3776084: "#008A00",
                2376177: "#F04325",
                13850523: "#8D4294"
            };
            var rgbaColor = "";
            if (!Commerce.ObjectExtensions.isNullOrUndefined(legacyColorMapping[color])) {
                rgbaColor = legacyColorMapping[color];
            }
            else if (color !== 0) {
                color >>>= 0;
                var r = color & 0xFF, g = (color & 0xFF00) >>> 8, b = (color & 0xFF0000) >>> 16;
                rgbaColor = CSSHelpers.rgbToHex(r, g, b);
            }
            else {
                rgbaColor = "#00B0F0";
            }
            return rgbaColor;
        };
        CSSHelpers.setStyle = function ($element, styleName, styleValue) {
            if (Commerce.ObjectExtensions.isNullOrUndefined($element) ||
                Commerce.ObjectExtensions.isNullOrUndefined(styleName) ||
                Commerce.ObjectExtensions.isNullOrUndefined(styleValue)) {
                return;
            }
            styleName = Commerce.EscapingHelper.escapeHtmlAttribute(styleName.toLocaleLowerCase());
            styleValue = Commerce.EscapingHelper.escapeHtmlAttribute(styleValue.toLocaleLowerCase());
            var currentStyleAttr = $element.attr("style");
            if (Commerce.ObjectExtensions.isNullOrUndefined(currentStyleAttr)) {
                currentStyleAttr = "";
            }
            var currentStyles = currentStyleAttr.split(";");
            var styleFound = false;
            for (var i = 0; i < currentStyles.length; i++) {
                var style = currentStyles[i];
                if (style.split(":")[0].trim().toLocaleLowerCase().localeCompare(styleName) === 0) {
                    currentStyles[i] = styleName + ":" + styleValue;
                    styleFound = true;
                    break;
                }
            }
            if (!styleFound) {
                currentStyles.push(styleName + ":" + styleValue);
            }
            $element.attr("style", currentStyles.join(";"));
        };
        CSSHelpers.applyAccentColor = function (accentColor, headerColor) {
            var mapDictionary = new Commerce.Dictionary();
            if (!Commerce.ObjectExtensions.isNullOrUndefined(accentColor)) {
                var accentColorConverted = CSSHelpers.colorIntToHexColor(accentColor);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(accentColorConverted)) {
                    CSSHelpers.accentColor(accentColorConverted);
                    mapDictionary.setItem(CSSHelpers.accentColorStringToReplace, accentColorConverted);
                    var accentColorLight20 = CSSHelpers.shadeColor(accentColorConverted, 0.2);
                    mapDictionary.setItem(CSSHelpers.accentColorLight20StringToReplace, accentColorLight20);
                    var accentColorDark20 = CSSHelpers.shadeColor(accentColorConverted, -0.2);
                    mapDictionary.setItem(CSSHelpers.accentColorDark20StringToReplace, accentColorDark20);
                }
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(headerColor)) {
                var headerColorConverted = CSSHelpers.colorIntToHexColor(headerColor);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(headerColorConverted)) {
                    mapDictionary.setItem(CSSHelpers.headerColorStringToReplace, headerColorConverted);
                    var headerColorLight20 = CSSHelpers.shadeColor(headerColorConverted, 0.2);
                    mapDictionary.setItem(CSSHelpers.headerColorLight20StringToReplace, headerColorLight20);
                    var headerColorLight10 = CSSHelpers.shadeColor(headerColorConverted, 0.1);
                    mapDictionary.setItem(CSSHelpers.headerColorLight10StringToReplace, headerColorLight10);
                    var headerColorDark20 = CSSHelpers.shadeColor(headerColorConverted, -0.2);
                    mapDictionary.setItem(CSSHelpers.headerColorDark20StringToReplace, headerColorDark20);
                }
            }
            this.cacheFileContentAsync(this.dynamicAccentColorCssFile).done(function (content) {
                if (mapDictionary.length() > 0) {
                    CSSHelpers.injectCss(CSSHelpers.dynamicAccentColorStyleId, CSSHelpers.updateDynamicAccentColorCSSRules(content, mapDictionary));
                }
                else {
                    CSSHelpers.injectCss(CSSHelpers.dynamicAccentColorStyleId, Commerce.StringExtensions.EMPTY);
                }
            });
        };
        CSSHelpers.applyBackgroundImage = function (logonBackgroundImage, logonBackgroundImagePortrait, backgroundImage) {
            if (logonBackgroundImage === void 0) { logonBackgroundImage = Commerce.StringExtensions.EMPTY; }
            if (logonBackgroundImagePortrait === void 0) { logonBackgroundImagePortrait = Commerce.StringExtensions.EMPTY; }
            if (backgroundImage === void 0) { backgroundImage = Commerce.StringExtensions.EMPTY; }
            var mapDictionary = new Commerce.Dictionary();
            mapDictionary.setItem(CSSHelpers.logonBackgroundImageStringToReplace, logonBackgroundImage);
            mapDictionary.setItem(CSSHelpers.logonBackgroundImagePortraitStringToReplace, logonBackgroundImagePortrait);
            mapDictionary.setItem(CSSHelpers.backgroundImageStringToReplace, backgroundImage);
            this.cacheFileContentAsync(this.backgroundImageCssFile).done(function (content) {
                CSSHelpers.injectCss(CSSHelpers.backgroundImageId, CSSHelpers.updateDynamicAccentColorCSSRules(content, mapDictionary));
            });
        };
        CSSHelpers.injectCss = function (classId, content) {
            var inlinedStyleElement = document.getElementById(classId);
            if (Commerce.ObjectExtensions.isNullOrUndefined(inlinedStyleElement)) {
                inlinedStyleElement = document.createElement("style");
                inlinedStyleElement.id = classId;
                document.head.insertBefore(inlinedStyleElement, null);
            }
            inlinedStyleElement.innerHTML = content;
        };
        CSSHelpers.loadStyleSheetAsync = function (filename, id) {
            var cachedCallback;
            cachedCallback = function () {
                var link = document.createElement("link");
                link.setAttribute("rel", "stylesheet");
                link.setAttribute("type", "text/css");
                link.setAttribute("href", filename);
                link.setAttribute("id", id);
                var headElement = document.getElementsByTagName("head")[0];
                headElement.insertBefore(link, headElement.childNodes[0]);
            };
            var result = new Commerce.VoidAsyncResult();
            this.cacheFileContentAsync(filename)
                .always(function () {
                cachedCallback();
                result.resolve();
            })
                .fail(function (errors) {
                Commerce.RetailLogger.applicationStylesheetsLoadFailed(filename, errors[0].ErrorCode, errors[0].extraData);
            });
            return result;
        };
        CSSHelpers.getApplicationDimensions = function () {
            var $window = $(window);
            return { height: $window.height(), width: $window.width() };
        };
        CSSHelpers.isVisible = function (element) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(element) || !(element instanceof HTMLElement)) {
                return false;
            }
            var style = window.getComputedStyle(element);
            return !($(element).is(":hidden") || style.visibility === "none" || style.visibility === "hidden" || style.display === "none");
        };
        CSSHelpers.isEnabled = function (element) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(element) || !(element instanceof HTMLElement)) {
                return false;
            }
            return !($(element).is(":disabled"));
        };
        CSSHelpers.applyNavigationBarColors = function (theme, deviceConfiguration) {
            var navigationBarColor = CSSHelpers.navbarDarkTheme;
            var navigationBarExtensionBackgroundColor = CSSHelpers.navbarExtensionDarkTheme;
            if (deviceConfiguration && !Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration.AccentColor)) {
                var deviceAccentColor = deviceConfiguration.AccentColor;
                navigationBarColor = CSSHelpers.colorIntToHexColor(deviceAccentColor) || navigationBarColor;
                navigationBarExtensionBackgroundColor = CSSHelpers.colorIntToHexColor(deviceAccentColor)
                    || navigationBarExtensionBackgroundColor;
            }
            else {
                switch (theme) {
                    case "light":
                        navigationBarColor = CSSHelpers.navbarLightTheme;
                        navigationBarExtensionBackgroundColor = CSSHelpers.navbarExtensionLightTheme;
                        break;
                }
            }
            var navBarColorRule = Commerce.StringExtensions.format("{0} !important", navigationBarColor);
            var navBarExtensionColorRule = Commerce.StringExtensions.format("{0} !important", navigationBarExtensionBackgroundColor);
            var styleSheet = CSSHelpers.findStyleSheet("Main.min.css$");
            CSSHelpers.addOrUpdateCssRuleToStyleSheet(styleSheet, ".navBarColor", "background-color", navBarColorRule);
            CSSHelpers.addOrUpdateCssRuleToStyleSheet(styleSheet, ".navBarExtensionBackGround", "background-color", navBarExtensionColorRule);
        };
        CSSHelpers.applyThemeColorAsync = function (theme) {
            var currentTheme = CSSHelpers.currentThemeLoaded();
            if (currentTheme !== theme) {
                switch (theme) {
                    case "light":
                        return CSSHelpers.loadCurrentThemeStyleSheetsAsync(theme, CSSHelpers.posLightThemeCssFile, CSSHelpers.winUILightThemeCssFile, CSSHelpers.posLightThemeElementId, CSSHelpers.winUILightThemeElementId);
                    default:
                        return CSSHelpers.loadCurrentThemeStyleSheetsAsync(theme, CSSHelpers.posDarkThemeCssFile, CSSHelpers.winUIDarkThemeCssFile, CSSHelpers.posDarkThemeElementId, CSSHelpers.winUIDarkThemeElementId);
                }
            }
            else {
                return Commerce.VoidAsyncResult.createResolved();
            }
        };
        CSSHelpers.loadCurrentThemeStyleSheetsAsync = function (theme, posThemeCssFile, winUIThemeCssFile, posThemeElementId, winUIThemeElementId) {
            return new Commerce.AsyncQueue()
                .enqueue(function () { return CSSHelpers.loadStyleSheetAsync(Commerce.StringExtensions.format(posThemeCssFile, theme), posThemeElementId); })
                .enqueue(function () { return CSSHelpers.loadStyleSheetAsync(Commerce.StringExtensions.format(winUIThemeCssFile, theme), winUIThemeElementId); })
                .run()
                .done(function () {
                $(document.body).removeClass(CSSHelpers.currentThemeLoaded()).addClass(theme);
                Commerce.CSSHelpers.currentThemeLoaded(theme);
                switch (theme) {
                    case "light":
                        CSSHelpers.removeOppositeThemeStyleSheets(CSSHelpers.posDarkThemeElementId, CSSHelpers.winUIDarkThemeElementId);
                        break;
                    case "dark":
                        CSSHelpers.removeOppositeThemeStyleSheets(CSSHelpers.posLightThemeElementId, CSSHelpers.winUILightThemeElementId);
                        break;
                }
            });
        };
        CSSHelpers.removeOppositeThemeStyleSheets = function (oppositePosThemeElementId, oppositeWinUIThemeElementId) {
            if (document.getElementById(oppositePosThemeElementId)) {
                CSSHelpers.removeStyleSheetById(oppositePosThemeElementId);
            }
            if (document.getElementById(oppositeWinUIThemeElementId)) {
                CSSHelpers.removeStyleSheetById(oppositeWinUIThemeElementId);
            }
        };
        CSSHelpers.cacheFileContentAsync = function (uri) {
            var result = new Commerce.AsyncResult();
            $.ajax({
                url: uri,
                success: function (data, textStatus, jqXHR) {
                    result.resolve(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    result.reject([new Commerce.Proxy.Entities.Error(textStatus, false, null, errorThrown)]);
                },
                cache: true
            });
            return result;
        };
        CSSHelpers.updateDynamicAccentColorCSSRules = function (cssFileContent, mapping) {
            cssFileContent = cssFileContent.replace(cssFileContent.substring(cssFileContent.indexOf("/*"), cssFileContent.indexOf("*/") + 2), Commerce.StringExtensions.EMPTY);
            mapping.forEach(function (key, value) {
                cssFileContent = Commerce.StringExtensions.replaceAll(cssFileContent, key, value);
            });
            return cssFileContent;
        };
        CSSHelpers.removeStyleSheetById = function (id) {
            $("head link[id=" + id + "]").remove();
        };
        CSSHelpers.findStyleSheet = function (regex) {
            for (var i = 0; i < document.styleSheets.length; i++) {
                if (document.styleSheets[i].href && document.styleSheets[i].href.match(regex)) {
                    return document.styleSheets[i];
                }
            }
            return null;
        };
        CSSHelpers.addCssRuleToStyleSheet = function (styleSheet, selector, rule) {
            if (!styleSheet) {
                return;
            }
            CSSHelpers.removeCssRulesFromStyleSheet(styleSheet, selector);
            if (styleSheet.addRule) {
                styleSheet.addRule(selector, rule);
            }
            else if (styleSheet.insertRule) {
                styleSheet.insertRule(Commerce.StringExtensions.format("{0} \{ {1} \}", selector, rule));
            }
        };
        CSSHelpers.addOrUpdateCssRuleToStyleSheet = function (styleSheet, selector, ruleName, rule) {
            var existingCssRule = CSSHelpers.findCssRuleToStyleSheet(styleSheet, selector);
            if (existingCssRule !== null) {
                existingCssRule.style[ruleName] = rule;
            }
            else {
                var style = Commerce.StringExtensions.format("{0}: {1}", ruleName, rule);
                CSSHelpers.addCssRuleToStyleSheet(styleSheet, selector, style);
            }
        };
        CSSHelpers.findCssRuleToStyleSheet = function (styleSheet, selector) {
            if (styleSheet && selector && styleSheet.rules) {
                var i = styleSheet.rules.length - 1;
                while (i > -1) {
                    var rule = styleSheet.rules[i];
                    if (rule.selectorText && rule.selectorText.localeCompare(selector) === 0) {
                        return rule;
                    }
                    i--;
                }
            }
            return null;
        };
        CSSHelpers.removeCssRulesFromStyleSheet = function (styleSheet, selector) {
            if (!styleSheet || !selector) {
                return;
            }
            if (styleSheet.rules) {
                var i = styleSheet.rules.length - 1;
                while (i > -1) {
                    var rule = styleSheet.rules[i];
                    if (rule.selectorText && rule.selectorText.localeCompare(selector) === 0) {
                        if (styleSheet.removeRule) {
                            styleSheet.removeRule(i);
                        }
                        else if (styleSheet.deleteRule) {
                            styleSheet.deleteRule(i);
                        }
                    }
                    i--;
                }
            }
        };
        CSSHelpers.resolveCssFilePath = function (cssFile) {
            return CSSHelpers.cssFileRootPath + cssFile;
        };
        CSSHelpers.shadeColor = function (color, shade) {
            if (color[0] === "#") {
                color = color.slice(1);
            }
            var colorNumber = parseInt(color, 16);
            var edge = shade < 0 ? 0 : 255;
            var p = shade < 0 ? shade * -1 : shade;
            var R = colorNumber >> 16;
            var G = colorNumber >> 8 & 0x00FF;
            var B = colorNumber & 0x0000FF;
            var newR = (Math.round((edge - R) * p) + R);
            var newG = (Math.round((edge - G) * p) + G);
            var newB = Math.round((edge - B) * p) + B;
            return CSSHelpers.rgbToHex(newR, newG, newB);
        };
        CSSHelpers.rgbToHex = function (red, green, blue) {
            red *= 0x10000;
            green *= 0x100;
            return "#" + (0x1000000 + red + green + blue).toString(16).slice(1);
        };
        Object.defineProperty(CSSHelpers, "posLightThemeCssFile", {
            get: function () {
                return CSSHelpers.resolveCssFilePath(CSSHelpers.POS_LIGHT_THEME_CSS_FILE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSSHelpers, "posDarkThemeCssFile", {
            get: function () {
                return CSSHelpers.resolveCssFilePath(CSSHelpers.POS_DARK_THEME_CSS_FILE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSSHelpers, "winUILightThemeCssFile", {
            get: function () {
                return CSSHelpers.resolveCssFilePath(CSSHelpers.WINUI_LIGHT_THEME_CSS_FILE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSSHelpers, "winUIDarkThemeCssFile", {
            get: function () {
                return CSSHelpers.resolveCssFilePath(CSSHelpers.WINUI_DARK_THEME_CSS_FILE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSSHelpers, "dynamicAccentColorCssFile", {
            get: function () {
                return CSSHelpers.resolveCssFilePath(CSSHelpers.DYNAMIC_ACCENT_COLOR_CSS_FILE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CSSHelpers, "backgroundImageCssFile", {
            get: function () {
                return CSSHelpers.resolveCssFilePath(CSSHelpers.BACKGROUND_IMAGE_CSS_FILE);
            },
            enumerable: true,
            configurable: true
        });
        CSSHelpers.AXRETAIL_STYLESHEET_ASYNC_REL = "-axretail-stylesheet-async";
        CSSHelpers.AXRETAIL_STYLESHEET_ASYNC_LINKS_SELECTOR = "link[rel = '" + CSSHelpers.AXRETAIL_STYLESHEET_ASYNC_REL + "']";
        CSSHelpers.LEFT_TO_RIGHT_TEXT_DIRECTION = "ltr";
        CSSHelpers.RIGHT_TO_LEFT_TEXT_DIRECTION = "rtl";
        CSSHelpers.currentThemeLoaded = ko.observable(Commerce.StringExtensions.EMPTY);
        CSSHelpers.currentTextDir = ko.observable(Commerce.StringExtensions.EMPTY);
        CSSHelpers.posLightThemeElementId = "posLightThemeCSSFile";
        CSSHelpers.posDarkThemeElementId = "posDarkThemeCSSFile";
        CSSHelpers.winUILightThemeElementId = "winUILightThemeCSSFile";
        CSSHelpers.winUIDarkThemeElementId = "winUIDarkThemeCSSFile";
        CSSHelpers.dynamicAccentColorStyleId = "dynamicAccentColorStyle";
        CSSHelpers.backgroundImageId = "backgroundImage";
        CSSHelpers.accentColorStringToReplace = "%%ACCENT_COLOR%%";
        CSSHelpers.accentColorLight20StringToReplace = "%%ACCENT_COLOR_LIGHT_20%%";
        CSSHelpers.accentColorDark20StringToReplace = "%%ACCENT_COLOR_DARK_20%%";
        CSSHelpers.headerColorStringToReplace = "%%HEADER_COLOR%%";
        CSSHelpers.headerColorLight20StringToReplace = "%%HEADER_COLOR_LIGHT_20%%";
        CSSHelpers.headerColorLight10StringToReplace = "%%HEADER_COLOR_LIGHT_10%%";
        CSSHelpers.headerColorDark20StringToReplace = "%%HEADER_COLOR_DARK_20%%";
        CSSHelpers.logonBackgroundImageStringToReplace = "%%LOGIN_BACKGROUND_IMAGE%%";
        CSSHelpers.logonBackgroundImagePortraitStringToReplace = "%%LOGIN_BACKGROUND_IMAGE_PORTRAIT%%";
        CSSHelpers.backgroundImageStringToReplace = "%%BACKGROUND_IMAGE%%";
        CSSHelpers.accentColor = ko.observable(Commerce.StringExtensions.EMPTY);
        CSSHelpers.navbarDarkTheme = "#131415";
        CSSHelpers.navbarExtensionDarkTheme = "#333435";
        CSSHelpers.navbarLightTheme = "#B3B4B5";
        CSSHelpers.navbarExtensionLightTheme = "#D3D4D5";
        CSSHelpers.cssFileRootPath = Commerce.StringExtensions.EMPTY;
        CSSHelpers.POS_LIGHT_THEME_CSS_FILE = "Stylesheets/Themes/PosLightTheme.css";
        CSSHelpers.POS_DARK_THEME_CSS_FILE = "Stylesheets/Themes/PosDarkTheme.css";
        CSSHelpers.WINUI_LIGHT_THEME_CSS_FILE = "Libraries/winjs/css/ui-light.css";
        CSSHelpers.WINUI_DARK_THEME_CSS_FILE = "Libraries/winjs/css/ui-dark.css";
        CSSHelpers.DYNAMIC_ACCENT_COLOR_CSS_FILE = "Stylesheets/Parts/DynamicAccentColor.css";
        CSSHelpers.BACKGROUND_IMAGE_CSS_FILE = "Stylesheets/Parts/BackgroundImage.css";
        CSSHelpers.BLUE_ACCENT_COLOR_KEY = 13004559;
        CSSHelpers.isDeveloperGridRendered = false;
        return CSSHelpers;
    }());
    Commerce.CSSHelpers = CSSHelpers;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Helpers;
    (function (Helpers) {
        "use strict";
        var CurrencyHelper = (function () {
            function CurrencyHelper() {
            }
            CurrencyHelper.isValidAmount = function (amount, currencyCode) {
                if (currencyCode === void 0) { currencyCode = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency; }
                if (Commerce.ObjectExtensions.isNullOrUndefined(amount) || isNaN(amount)) {
                    return false;
                }
                var numberOfDigitsAfterDecimalForCurrency = Commerce.NumberExtensions.getDecimalPrecision(currencyCode);
                var numberOfDigitsAfterDecimalForAmount = Commerce.NumberExtensions.getNumberOfDecimals(amount);
                return numberOfDigitsAfterDecimalForCurrency >= numberOfDigitsAfterDecimalForAmount;
            };
            CurrencyHelper.getTotalDenominationAmountDeclaredInCurrency = function (denominationDetails, currencyCode) {
                denominationDetails = Commerce.ObjectExtensions.isNullOrUndefined(denominationDetails) ? [] : denominationDetails;
                var currencyTotal = Commerce.ArrayExtensions.sum(denominationDetails, function (denominationDetail) {
                    var amountDeclared = Commerce.ObjectExtensions.isNullOrUndefined(denominationDetail.AmountDeclared) ? 0 : denominationDetail.AmountDeclared;
                    return Commerce.NumberExtensions.roundToCurrencyPrecision(amountDeclared, currencyCode);
                });
                return currencyTotal;
            };
            return CurrencyHelper;
        }());
        Helpers.CurrencyHelper = CurrencyHelper;
    })(Helpers = Commerce.Helpers || (Commerce.Helpers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CustomerHelper = (function () {
        function CustomerHelper() {
        }
        CustomerHelper.computeCustomerType = function (customer) {
            var result = "";
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                var customerType = CustomerHelper.getCustomerType(customer.CustomerTypeValue);
                switch (customerType) {
                    case Commerce.Proxy.Entities.CustomerType.Organization:
                        result = Commerce.ViewModelAdapter.getResourceString("string_304");
                        break;
                    case Commerce.Proxy.Entities.CustomerType.Person:
                        result = Commerce.ViewModelAdapter.getResourceString("string_303");
                        break;
                }
            }
            return result;
        };
        CustomerHelper.isCrossCompanyCustomer = function (customer) {
            var result = false;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                result = Commerce.StringExtensions.isNullOrWhitespace(customer.AccountNumber);
            }
            return result;
        };
        CustomerHelper.crossCompanyCustomerTransferAsync = function (correlationId, customer) {
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            var asyncResult;
            if (!Commerce.CustomerHelper.isCrossCompanyCustomer(customer)) {
                if (customer instanceof Commerce.Proxy.Entities.CustomerClass) {
                    asyncResult = Commerce.AsyncResult.createResolved(customer);
                }
                else {
                    asyncResult = customerManager.getCustomerDetailsAsync(customer.AccountNumber)
                        .map(function (details) {
                        return details.customer;
                    });
                }
            }
            else {
                var newCustomer = new Commerce.Proxy.Entities.CustomerClass();
                newCustomer.NewCustomerPartyNumber = customer.PartyNumber;
                var createCustomerServiceRequest = new Commerce.CreateCustomerServiceRequest(correlationId, newCustomer);
                asyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCustomerServiceRequest))
                    .map(function (response) {
                    return response.canceled ? null : response.data.customer;
                });
            }
            return asyncResult;
        };
        CustomerHelper.crossCompanyCustomerTransferAndAddToCartAsync = function (correlationId, customer, cartAffiliations) {
            var currentCompanyCustomer;
            var customerSelectionQueue = new Commerce.AsyncQueue();
            customerSelectionQueue.enqueue(function () {
                return CustomerHelper.crossCompanyCustomerTransferAsync(correlationId, customer)
                    .done(function (crossCompanyTransferCustomer) {
                    currentCompanyCustomer = crossCompanyTransferCustomer;
                });
            });
            customerSelectionQueue.enqueue(function () {
                var operationOptions = {
                    customer: currentCompanyCustomer,
                    customerId: currentCompanyCustomer.AccountNumber,
                    cartAffiliations: cartAffiliations,
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                return customerSelectionQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.SetCustomer, operationOptions));
            });
            return customerSelectionQueue.run().map(function (queueResult) {
                return { canceled: queueResult.canceled, data: currentCompanyCustomer };
            });
        };
        CustomerHelper.getPrimaryCustomerAddressFromCustomerObject = function (customer) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.ObjectExtensions.isNullOrUndefined(customer.Addresses)) {
                for (var i = 0; i < customer.Addresses.length; i++) {
                    if (customer.Addresses[i].IsPrimary) {
                        return customer.Addresses[i];
                    }
                }
            }
            return null;
        };
        CustomerHelper.getCustomerType = function (customerTypeEnum) {
            var customerType = Commerce.Proxy.Entities.CustomerType.None;
            switch (customerTypeEnum) {
                case Commerce.Proxy.Entities.CustomerType.Person:
                case 11779:
                case 12120:
                case 12023:
                    customerType = Commerce.Proxy.Entities.CustomerType.Person;
                    break;
                case Commerce.Proxy.Entities.CustomerType.Organization:
                case 1899:
                case 1929:
                case 1930:
                case 6213:
                case 7492:
                case 7618:
                case 8060:
                    customerType = Commerce.Proxy.Entities.CustomerType.Organization;
                    break;
            }
            if (customerType !== Commerce.Proxy.Entities.CustomerType.None) {
                return customerType;
            }
            else if (customerTypeEnum >= 11780) {
                return Commerce.Proxy.Entities.CustomerType.Person;
            }
            return Commerce.Proxy.Entities.CustomerType.Organization;
        };
        CustomerHelper.getCustomerBalance = function (customer, customerBalances) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.ObjectExtensions.isNullOrUndefined(customerBalances)) {
                var customerBalance = !Commerce.StringExtensions.isNullOrWhitespace(customer.InvoiceAccount)
                    ? (customerBalances.InvoiceAccountBalance + customerBalances.InvoiceAccountPendingBalance)
                    : (customerBalances.Balance + customerBalances.PendingBalance);
                return Commerce.NumberExtensions.roundToNDigits(customerBalance, Commerce.NumberExtensions.getDecimalPrecision());
            }
            return Number.NaN;
        };
        CustomerHelper.getCustomerCreditLimit = function (customer, customerBalances) {
            var customerCreditLimit = Number.NaN;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.ObjectExtensions.isNullOrUndefined(customerBalances)) {
                if (!Commerce.StringExtensions.isNullOrWhitespace(customer.InvoiceAccount)) {
                    customerCreditLimit = customerBalances.InvoiceAccountCreditLimit;
                }
                else {
                    customerCreditLimit = customerBalances.CreditLimit;
                }
            }
            return customerCreditLimit;
        };
        CustomerHelper.createCustomerAttribute = function (customerAttributeDefinition) {
            var customerAttribute = new Commerce.Proxy.Entities.CustomerAttributeClass();
            customerAttribute.DataTypeValue = customerAttributeDefinition.DataTypeValue;
            customerAttribute.Name = customerAttributeDefinition.Name;
            customerAttribute.RecordId = customerAttributeDefinition.RecordId;
            if (Commerce.ObjectExtensions.isNullOrUndefined(customerAttributeDefinition.DefaultValue)) {
                customerAttribute.AttributeValue = new Commerce.Proxy.Entities.CommercePropertyValueClass();
                switch (customerAttributeDefinition.DataTypeValue) {
                    case Commerce.Proxy.Entities.AttributeDataType.Text:
                        customerAttribute.AttributeValue.StringValue = Commerce.StringExtensions.EMPTY;
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Integer:
                        customerAttribute.AttributeValue.IntegerValue = null;
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                        customerAttribute.AttributeValue.DecimalValue = null;
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.TrueFalse:
                        customerAttribute.AttributeValue.BooleanValue = false;
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.DateTime:
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(customerAttributeDefinition.LowerBound)
                            && !Commerce.ObjectExtensions.isNullOrUndefined(customerAttributeDefinition.LowerBound.DateTimeOffsetValue)) {
                            customerAttribute.AttributeValue.DateTimeOffsetValue = customerAttributeDefinition.LowerBound.DateTimeOffsetValue;
                        }
                        else if (!Commerce.ObjectExtensions.isNullOrUndefined(customerAttributeDefinition.UpperBound)
                            && !Commerce.ObjectExtensions.isNullOrUndefined(customerAttributeDefinition.UpperBound.DateTimeOffsetValue)) {
                            customerAttribute.AttributeValue.DateTimeOffsetValue = customerAttributeDefinition.UpperBound.DateTimeOffsetValue;
                        }
                        else {
                            customerAttribute.AttributeValue.DateTimeOffsetValue = new Date();
                        }
                        break;
                }
            }
            else {
                customerAttribute.AttributeValue = customerAttributeDefinition.DefaultValue;
            }
            return customerAttribute;
        };
        CustomerHelper.getCommercePropertyFormattedValue = function (attribute, dataTypeValue) {
            var textValue = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(attribute)) {
                switch (dataTypeValue) {
                    case Commerce.Proxy.Entities.AttributeDataType.Text:
                        textValue = attribute.StringValue;
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Integer:
                        var decimalPrecision = 0;
                        textValue = Commerce.NumberExtensions.formatNumber(attribute.IntegerValue, decimalPrecision);
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.Decimal:
                        textValue = Commerce.NumberExtensions.formatNumber(attribute.DecimalValue, Commerce.NumberExtensions.getDecimalPrecision());
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.TrueFalse:
                        textValue = attribute.BooleanValue ?
                            Commerce.ViewModelAdapter.getResourceString("string_831")
                            : Commerce.ViewModelAdapter.getResourceString("string_832");
                        break;
                    case Commerce.Proxy.Entities.AttributeDataType.DateTime:
                        textValue =
                            Commerce.Host.instance.globalization.getDateTimeFormatter(Commerce.Host.Globalization.DateTimeFormat.SHORT_DATE)
                                .format(attribute.DateTimeOffsetValue);
                        break;
                }
            }
            return textValue;
        };
        CustomerHelper.validateCustomer = function (customer) {
            var validationErrors = [];
            var customerType = CustomerHelper.getCustomerType(customer.CustomerTypeValue);
            var errorMessage;
            switch (customerType) {
                case Commerce.Proxy.Entities.CustomerType.Organization:
                    if (Commerce.StringExtensions.isNullOrWhitespace(customer.Name)) {
                        validationErrors.push(new Commerce.Proxy.Entities.Error("string_1338", undefined, Commerce.ViewModelAdapter.getResourceString("string_1338")));
                    }
                    else if (customer.Name.length > Commerce.CustomerValidationConstants.COMPANY_NAME_MAX_LENGTH) {
                        errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1377"), Commerce.CustomerValidationConstants.COMPANY_NAME_MAX_LENGTH);
                        validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
                    }
                    break;
                case Commerce.Proxy.Entities.CustomerType.Person:
                    if (Commerce.StringExtensions.isNullOrWhitespace(customer.FirstName)) {
                        validationErrors.push(new Commerce.Proxy.Entities.Error("string_1338", undefined, Commerce.ViewModelAdapter.getResourceString("string_1338")));
                    }
                    else if (customer.FirstName.length > Commerce.CustomerValidationConstants.NAME_MAX_LENGTH) {
                        errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1378"), Commerce.CustomerValidationConstants.NAME_MAX_LENGTH);
                        validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
                    }
                    if (Commerce.StringExtensions.isNullOrWhitespace(customer.LastName)) {
                        validationErrors.push(new Commerce.Proxy.Entities.Error("string_1338", undefined, Commerce.ViewModelAdapter.getResourceString("string_1338")));
                    }
                    else if (customer.LastName.length > Commerce.CustomerValidationConstants.NAME_MAX_LENGTH) {
                        errorMessage = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_1379"), Commerce.CustomerValidationConstants.NAME_MAX_LENGTH);
                        validationErrors.push(new Commerce.Proxy.Entities.Error(errorMessage, undefined, errorMessage));
                    }
                    break;
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(customer.CustomerTypeValue) || customer.CustomerTypeValue === Commerce.Proxy.Entities.CustomerType.None) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1382", undefined, Commerce.ViewModelAdapter.getResourceString("string_1382")));
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(customer.CurrencyCode)) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1381", undefined, Commerce.ViewModelAdapter.getResourceString("string_1381")));
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(customer.CustomerGroup)) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1383", undefined, Commerce.ViewModelAdapter.getResourceString("string_1383")));
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(customer.Language)) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1384", undefined, Commerce.ViewModelAdapter.getResourceString("string_1384")));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(customer.Email) && !Commerce.Core.RegularExpressionValidations.validateEmail(customer.Email)) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1331", undefined, Commerce.ViewModelAdapter.getResourceString("string_1331")));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(customer.ReceiptEmail) && !Commerce.Core.RegularExpressionValidations.validateEmail(customer.ReceiptEmail)) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1331", undefined, Commerce.ViewModelAdapter.getResourceString("string_1331")));
            }
            if (!Commerce.StringExtensions.isNullOrWhitespace(customer.Phone) && customer.Phone.length > Commerce.CustomerValidationConstants.PHONE_MAX_LENGTH) {
                validationErrors.push(new Commerce.Proxy.Entities.Error("string_1332", undefined, Commerce.ViewModelAdapter.getResourceString("string_1332")));
            }
            return validationErrors;
        };
        return CustomerHelper;
    }());
    Commerce.CustomerHelper = CustomerHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CustomerValidationConstants = (function () {
        function CustomerValidationConstants() {
        }
        CustomerValidationConstants.COMPANY_NAME_MAX_LENGTH = 100;
        CustomerValidationConstants.NAME_MAX_LENGTH = 25;
        CustomerValidationConstants.PHONE_MAX_LENGTH = 255;
        CustomerValidationConstants.URL_MAX_LENGTH = 255;
        CustomerValidationConstants.STREET_MAX_LENGTH = 150;
        CustomerValidationConstants.CITY_MAX_LENGTH = 60;
        CustomerValidationConstants.ZIPCODE_MAX_LENGTH = 10;
        CustomerValidationConstants.COUNTY_MAX_LENGTH = 10;
        CustomerValidationConstants.DISTRICTNAME_MAX_LENGTH = 60;
        CustomerValidationConstants.BUILDINGCOMPLIMENT_MAX_LENGTH = 60;
        CustomerValidationConstants.STREETNUMBER_MAX_LENGTH = 20;
        return CustomerValidationConstants;
    }());
    Commerce.CustomerValidationConstants = CustomerValidationConstants;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DataHelper = (function () {
        function DataHelper() {
        }
        DataHelper.loadJsonAsync = function (uri) {
            var result = new Commerce.AsyncResult();
            $.getJSON(uri)
                .done(function (data) {
                result.resolve(data);
            }).fail(function (error) {
                Commerce.RetailLogger.dataHelperLoadJsonAsyncFailed(error.message);
                result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
            });
            return result;
        };
        DataHelper.loadTextAsync = function (uri, callerContext) {
            var result = new Commerce.AsyncResult(callerContext);
            $.ajax(uri)
                .done(function (data) {
                result.resolve(data);
            }).fail(function (error) {
                Commerce.RetailLogger.dataHelperLoadTextAsyncFailed(error.message);
                result.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
            });
            return result;
        };
        return DataHelper;
    }());
    Commerce.DataHelper = DataHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DeliveryHelper = (function () {
        function DeliveryHelper() {
        }
        DeliveryHelper.getCartDeliveryMode = function (cart) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)
                || !Commerce.ArrayExtensions.hasElements(cart.CartLines)
                || cart.CartTypeValue !== Commerce.Proxy.Entities.CartType.CustomerOrder) {
                return Commerce.Proxy.Entities.DeliveryModeStatusEnum.None;
            }
            var nonVoidedCartLines = Commerce.CartHelper.GetNonVoidedCartLines(cart.CartLines);
            var firstCartLineOrder = Commerce.ArrayExtensions.firstOrUndefined(nonVoidedCartLines, function (cartLine) {
                return !Commerce.StringExtensions.isNullOrWhitespace(cartLine.DeliveryMode);
            });
            if (Commerce.ObjectExtensions.isNullOrUndefined(firstCartLineOrder)) {
                return Commerce.Proxy.Entities.DeliveryModeStatusEnum.None;
            }
            var isLineDeliveryMode = nonVoidedCartLines.some(function (cartLine) {
                if (DeliveryHelper.isCartLineDeliveryOptionsEmpty(cartLine)) {
                    return false;
                }
                var sameShippingAddress = (Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ShippingAddress)
                    && Commerce.ObjectExtensions.isNullOrUndefined(firstCartLineOrder.ShippingAddress))
                    || (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ShippingAddress)
                        && (!Commerce.ObjectExtensions.isNullOrUndefined(firstCartLineOrder.ShippingAddress))
                        && cartLine.ShippingAddress.RecordId === firstCartLineOrder.ShippingAddress.RecordId);
                var isDeliverySettingsUnique = cartLine.DeliveryModeChargeAmount > 0
                    || cartLine.DeliveryMode !== firstCartLineOrder.DeliveryMode
                    || !Commerce.DateExtensions.areEqual(Commerce.DateExtensions.getDate(cartLine.RequestedDeliveryDate), Commerce.DateExtensions.getDate(firstCartLineOrder.RequestedDeliveryDate))
                    || !sameShippingAddress;
                return isDeliverySettingsUnique;
            });
            return isLineDeliveryMode
                ? Commerce.Proxy.Entities.DeliveryModeStatusEnum.Selected
                : Commerce.Proxy.Entities.DeliveryModeStatusEnum.All;
        };
        DeliveryHelper.isCartLineDeliveryOptionsEmpty = function (cartLine) {
            var isDeliveryModeSet = !Commerce.StringExtensions.isNullOrWhitespace(cartLine.DeliveryMode);
            var isShippingAddressSet = !Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ShippingAddress)
                && !Commerce.ObjectExtensions.isNullOrUndefined(cartLine.ShippingAddress.RecordId)
                && cartLine.ShippingAddress.RecordId !== 0;
            var isRequestedDeliveryDateSet = !Commerce.ObjectExtensions.isNullOrUndefined(cartLine.RequestedDeliveryDate)
                && cartLine.RequestedDeliveryDate.getTime() > 0;
            return Commerce.ObjectExtensions.isNullOrUndefined(cartLine) || !isDeliveryModeSet && !isShippingAddressSet && !isRequestedDeliveryDateSet;
        };
        DeliveryHelper.mustClearHeaderDeliveryInfo = function (cart, selectedCartLines) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart) || !Commerce.ArrayExtensions.hasElements(selectedCartLines) ||
                !Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                return false;
            }
            else if (Commerce.CartHelper.areAllCartLinesSelected(cart, selectedCartLines)) {
                return false;
            }
            else if (cart.DeliveryModeChargeAmount > 0) {
                return true;
            }
            var containsEmptyDeliveryMode = selectedCartLines.some(function (cartLine) {
                return DeliveryHelper.isCartLineDeliveryOptionsEmpty(cartLine);
            });
            return !containsEmptyDeliveryMode &&
                DeliveryHelper.getCartDeliveryMode(cart) === Commerce.Proxy.Entities.DeliveryModeStatusEnum.All;
        };
        DeliveryHelper.clearHeaderDeliveryInfo = function (cart) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                cart.ShippingAddress = new Commerce.Proxy.Entities.AddressClass();
                cart.DeliveryMode = null;
                cart.DeliveryModeChargeAmount = 0;
                cart.RequestedDeliveryDate = null;
            }
        };
        DeliveryHelper.clearLinesDeliveryInformation = function (cartLines, predicate) {
            if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                return;
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(predicate)) {
                cartLines = cartLines.filter(function (cartLine) { return predicate(cartLine); });
            }
            cartLines.forEach(function (cartLine) {
                DeliveryHelper.clearLineDeliveryInformation(cartLine);
            });
        };
        DeliveryHelper.validateCartForShippingOrPickup = function (cart, validateCustomerOrder) {
            if (validateCustomerOrder === void 0) { validateCustomerOrder = true; }
            cart = cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
            if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart) && validateCustomerOrder) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CREATE_OR_EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY)]);
            }
            var cartLines = Commerce.CartHelper.GetNonVoidedCartLines(cart.CartLines);
            if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CART_IS_EMPTY)]);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        DeliveryHelper.validateCartForCarryout = function (cart, validateCustomerOrder) {
            if (validateCustomerOrder === void 0) { validateCustomerOrder = true; }
            cart = cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
            if (!Commerce.CustomerOrderHelper.isCustomerOrderCreationOrEdition(cart) && validateCustomerOrder) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CREATE_OR_EDIT_CUSTOMER_ORDER_ONLY)]);
            }
            var cartLines = Commerce.CartHelper.GetNonVoidedCartLines(cart.CartLines);
            if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CART_IS_EMPTY)]);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        DeliveryHelper.validateCartLinesForShippingOrPickup = function (cart, cartLines) {
            cart = cart || new Commerce.Proxy.Entities.CartClass({ Id: Commerce.StringExtensions.EMPTY });
            cartLines = cartLines || [];
            if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_CART_LINE_SELECTED)]);
            }
            if (Commerce.ArrayExtensions.firstOrUndefined(cartLines, function (c) { return c.IsVoided; })) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SELECTED_CARTLINES_CONTAINS_VOIDED_PRODUCTS)]);
            }
            if (Commerce.CartHelper.areAllCartLinesSelected(cart, cartLines)) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ALL_PRODUCTS_SELECTED_PICKUP_OR_SHIP_SELECTED)]);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        DeliveryHelper.validateShippingProperties = function (customerAddress, deliveryModeCode, chargeAmount) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(customerAddress) ||
                Commerce.ObjectExtensions.isNullOrUndefined(customerAddress.RecordId) ||
                customerAddress.RecordId <= 0) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NO_ADDRESSES_SELECTED_FOR_SHIP)]);
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(deliveryModeCode)) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NO_SHIPPING_METHODS_SELECTED_FOR_SHIP)]);
            }
            if (!Commerce.Helpers.CurrencyHelper.isValidAmount(chargeAmount) || chargeAmount < 0) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.INVALID_SHIPPING_CHARGES)]);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        DeliveryHelper.validatePickupProperties = function (storeNumber) {
            if (Commerce.StringExtensions.isNullOrWhitespace(storeNumber)) {
                return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NO_STORE_SELECTED_FOR_PICKUP)]);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        DeliveryHelper.getStorePickupAddress = function (storeNumber, storeAddress) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(storeAddress)
                || Commerce.ObjectExtensions.isNullOrUndefined(storeAddress.RecordId)
                || storeAddress.RecordId <= 0) {
                var orgUnitAddress = Commerce.ApplicationContext.Instance.availableStores.hasItem(storeNumber)
                    ? Commerce.ApplicationContext.Instance.availableStores.getItem(storeNumber).OrgUnitAddress
                    : null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(orgUnitAddress)) {
                    return Commerce.AsyncResult.createResolved(orgUnitAddress);
                }
                else {
                    var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                    return channelManager.getStoreDetailsAsync(storeNumber)
                        .map(function (storeDetails) {
                        return storeDetails.OrgUnitAddress;
                    });
                }
            }
            return Commerce.AsyncResult.createResolved(storeAddress);
        };
        DeliveryHelper.setDeliveryForCartLines = function (cartLines, chargeAmount, deliveryMode, deliveryDate, address, storeNumber) {
            cartLines.forEach(function (cartLine) {
                cartLine.DeliveryModeChargeAmount = chargeAmount;
                cartLine.DeliveryMode = deliveryMode;
                cartLine.RequestedDeliveryDate = deliveryDate;
                cartLine.ShippingAddress = address;
                cartLine.FulfillmentStoreId = storeNumber;
            });
        };
        DeliveryHelper.setDeliveryCarryOutForCartLines = function (cartLines, chargeAmount, storeNumber, warehouseId) {
            cartLines.forEach(function (cartLine) {
                cartLine.DeliveryMode = Commerce.StringExtensions.EMPTY;
                cartLine.RequestedDeliveryDate = null;
                cartLine.ShippingAddress = null;
                cartLine.DeliveryModeChargeAmount = chargeAmount;
                cartLine.FulfillmentStoreId = storeNumber;
                cartLine.WarehouseId = warehouseId;
            });
        };
        DeliveryHelper.calculateDeliveryCharges = function (cart, cartLines) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                return 0;
            }
            if (!Commerce.ArrayExtensions.hasElements(cartLines) || Commerce.CartHelper.areAllCartLinesSelected(cart, cartLines)) {
                return cart.DeliveryModeChargeAmount;
            }
            var cartLineCharges = 0;
            cartLines.forEach(function (cartLine) {
                cartLineCharges += cartLine.DeliveryModeChargeAmount;
            });
            return cartLineCharges;
        };
        DeliveryHelper.splitDeliveryCharges = function (totalChargeAmount, cartLines) {
            if (cartLines === null) {
                throw new Error("Cart does not contains any line.");
            }
            else if (cartLines.length === 0) {
                return;
            }
            var decimalPrecision = Commerce.NumberExtensions.getDecimalPrecision();
            var chargeAmountPerLine = Commerce.NumberExtensions.roundToNDigits(totalChargeAmount / cartLines.length, decimalPrecision);
            var appliedChargeAmount = chargeAmountPerLine * cartLines.length;
            var remainingChargeAmount = Commerce.NumberExtensions.roundToNDigits(totalChargeAmount - appliedChargeAmount, decimalPrecision);
            var totalAppliedChargeAmountPerLine = 0;
            cartLines.forEach(function (cartLine) {
                if (totalAppliedChargeAmountPerLine < totalChargeAmount) {
                    cartLine.DeliveryModeChargeAmount = chargeAmountPerLine;
                    totalAppliedChargeAmountPerLine += chargeAmountPerLine;
                }
            });
            if (totalAppliedChargeAmountPerLine !== totalChargeAmount) {
                Commerce.ArrayExtensions.lastOrUndefined(cartLines).DeliveryModeChargeAmount += remainingChargeAmount;
            }
        };
        DeliveryHelper.getDeliveryDate = function (cart, cartLines) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                return Commerce.DateExtensions.getDate();
            }
            if (!Commerce.ArrayExtensions.hasElements(cartLines) || Commerce.CartHelper.areAllCartLinesSelected(cart, cartLines)) {
                return cart.RequestedDeliveryDate;
            }
            return cartLines[0].RequestedDeliveryDate;
        };
        DeliveryHelper.clearLineDeliveryInformation = function (cartLine) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                cartLine.ShippingAddress = new Commerce.Proxy.Entities.AddressClass();
                cartLine.DeliveryMode = null;
                cartLine.DeliveryModeChargeAmount = 0;
                cartLine.RequestedDeliveryDate = null;
            }
        };
        return DeliveryHelper;
    }());
    Commerce.DeliveryHelper = DeliveryHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Helpers;
    (function (Helpers) {
        "use strict";
        var DeviceActivationHelper = (function () {
            function DeviceActivationHelper() {
            }
            DeviceActivationHelper.isInDeviceActivationProcess = function () {
                for (var i = 0; i < DeviceActivationHelper.DEVICE_ACTIVATION_VIEWS.length; i++) {
                    if (Commerce.ViewModelAdapter.isInView(DeviceActivationHelper.DEVICE_ACTIVATION_VIEWS[i])) {
                        return true;
                    }
                }
                return false;
            };
            DeviceActivationHelper.isActivationConfigProvided = function () {
                return (!Commerce.StringExtensions.isNullOrWhitespace(DeviceActivationHelper.argumentDeviceNumber)
                    || !Commerce.StringExtensions.isNullOrWhitespace(DeviceActivationHelper.storedDeviceNumber)
                        && (!Commerce.StringExtensions.isNullOrWhitespace(DeviceActivationHelper.argumentRegisterNumber)
                            || !Commerce.StringExtensions.isNullOrWhitespace(DeviceActivationHelper.storedRegisterNumber)));
            };
            Object.defineProperty(DeviceActivationHelper, "storedDeviceNumber", {
                get: function () {
                    return Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DeviceActivationHelper, "argumentDeviceNumber", {
                get: function () {
                    return Commerce.Host.instance.configurationProvider.getArgumentValue(Commerce.ApplicationArgumentId.DEVICE_NUMBER);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DeviceActivationHelper, "storedRegisterNumber", {
                get: function () {
                    return Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DeviceActivationHelper, "argumentRegisterNumber", {
                get: function () {
                    return Commerce.Host.instance.configurationProvider.getArgumentValue(Commerce.ApplicationArgumentId.TERMINAL_NUMBER);
                },
                enumerable: true,
                configurable: true
            });
            DeviceActivationHelper.areStoredDeviceTerminalDifferentFromArguments = function () {
                return DeviceActivationHelper.isStoredValueDifferentFromArgument(DeviceActivationHelper.storedDeviceNumber, DeviceActivationHelper.argumentDeviceNumber)
                    || DeviceActivationHelper.isStoredValueDifferentFromArgument(DeviceActivationHelper.storedRegisterNumber, DeviceActivationHelper.argumentRegisterNumber);
            };
            DeviceActivationHelper.isGuidedActivationInProcess = function () {
                var isGuidedActivationInProcessString = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS);
                var isGuidedActivationInProcess = Commerce.StringExtensions.isNullOrWhitespace(isGuidedActivationInProcessString) ?
                    false : Commerce.StringExtensions.compare(isGuidedActivationInProcessString, Commerce.Proxy.Entities.DeviceActivationType.GuidedActivation.toString(), true) === 0;
                return isGuidedActivationInProcess;
            };
            DeviceActivationHelper.isNonGuidedActivationInProcess = function () {
                var isNonGuidedActivationInProcessString = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CURRENT_ACTIVATION_PROCESS);
                var isNonGuidedActivationInProcess = Commerce.StringExtensions.isNullOrWhitespace(isNonGuidedActivationInProcessString) ?
                    false : Commerce.StringExtensions.compare(isNonGuidedActivationInProcessString, Commerce.Proxy.Entities.DeviceActivationType.ManualActivation.toString(), true) === 0;
                return isNonGuidedActivationInProcess;
            };
            DeviceActivationHelper.isMassActivationAllowed = function () {
                return Commerce.Config.allowMassActivation && DeviceActivationHelper.isActivationConfigProvided();
            };
            DeviceActivationHelper.navigateToGetStartedPage = function () {
                Commerce.Config.aadEnabled = !Helpers.DeviceActivationHelper.isMassActivationAllowed()
                    && !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.aadLoginUrl);
                if (Helpers.DeviceActivationHelper.isMassActivationAllowed()) {
                    Helpers.DeviceActivationHelper.navigateToActivationPage();
                }
                else {
                    Commerce.ViewModelAdapter.navigate(Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_GET_STARTED_VIEW_NAME);
                }
            };
            DeviceActivationHelper.navigateToActivationPage = function (activationParameters) {
                if (DeviceActivationHelper.isActivationConfigProvided() || !Commerce.Config.aadEnabled) {
                    Commerce.ViewModelAdapter.navigate(Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_VIEW_NAME, activationParameters);
                }
                else {
                    Commerce.ViewModelAdapter.navigate(Helpers.DeviceActivationHelper.GUIDED_ACTIVATION_VIEW_NAME, activationParameters);
                }
            };
            DeviceActivationHelper.navigateToActivationProcessPage = function (activationParameters) {
                if (DeviceActivationHelper.isNonGuidedActivationInProcess()) {
                    Commerce.ViewModelAdapter.navigate(Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_PROCESS_VIEW_NAME, activationParameters);
                }
                else if (DeviceActivationHelper.isGuidedActivationInProcess()) {
                    Commerce.ViewModelAdapter.navigate(Helpers.DeviceActivationHelper.GUIDED_ACTIVATION_VIEW_NAME, activationParameters);
                }
            };
            DeviceActivationHelper.startDeviceActivation = function () {
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_ACTIVATION_COMPLETED, "");
            };
            DeviceActivationHelper.completeDeviceActivation = function () {
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_ACTIVATION_COMPLETED, "true");
            };
            DeviceActivationHelper.isDeviceActivationCompleted = function () {
                return Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ACTIVATION_COMPLETED) === "true";
            };
            DeviceActivationHelper.isActivationPermitted = function (serverUrl, operatorId, password) {
                var serverUrlRequired = Commerce.Config.aadEnabled
                    || (!Commerce.Config.aadEnabled && Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.onlineDatabase));
                var validServerUrl = !serverUrlRequired || !Commerce.StringExtensions.isNullOrWhitespace(serverUrl);
                var operatorIdProvided = Commerce.Config.aadEnabled || !Commerce.StringExtensions.isNullOrWhitespace(operatorId);
                var passwordProvided = !Commerce.StringExtensions.isNullOrWhitespace(password);
                var operatorCredentialsAvailable = (Commerce.Config.aadEnabled || (operatorIdProvided && passwordProvided));
                return validServerUrl && operatorCredentialsAvailable;
            };
            DeviceActivationHelper.isStoredValueDifferentFromArgument = function (storedValue, argumentValue) {
                if (Commerce.StringExtensions.isNullOrWhitespace(storedValue)) {
                    return false;
                }
                if (Commerce.StringExtensions.isNullOrWhitespace(argumentValue)) {
                    return false;
                }
                return Commerce.StringExtensions.compare(storedValue, argumentValue, true) !== 0;
            };
            DeviceActivationHelper.AAD_ACQUIRE_TOKEN_OPERATION_NAME = "AADAcquireTokenOperation";
            DeviceActivationHelper.AAD_LOGON_OPERATION_NAME = "AADLogonOperation";
            DeviceActivationHelper.ANONYMOUS_LOGON_OPERATION_NAME = "AnonymousLogonOperation";
            DeviceActivationHelper.CHECK_SERVER_CONNECTIVITY_OPERATION_NAME = "CheckServerConnectivityOperation";
            DeviceActivationHelper.DEVICE_ACTIVATION_OPERATION_NAME = "DeviceActivationOperation";
            DeviceActivationHelper.ENCRYPT_DATA_OPERATION_NAME = "EncryptDataOperation";
            DeviceActivationHelper.GET_ENVIRONMENT_CONFIGURATION_OPERATION_NAME = "GetEnvironmentConfigurationName";
            DeviceActivationHelper.GET_DEVICE_CONFIGURATION_OPERATION_NAME = "GetDeviceConfigurationOperation";
            DeviceActivationHelper.GET_EMPLOYEES_OPERATION_NAME = "GetEmployeesOperation";
            DeviceActivationHelper.GET_HARDWARE_PROFILE_OPERATION_NAME = "GetHardwareProfileOperation";
            DeviceActivationHelper.GET_PAYMENT_MERCHANT_INFORMATION_OPERATION_NAME = "GetPaymentMerchantInformationOperation";
            DeviceActivationHelper.GET_LATEST_NUMBER_SEQUENCE_OPERATION_NAME = "GetLatestNumberSequenceOperation";
            DeviceActivationHelper.GET_LOCALIZATION_OPERATION_NAME = "GetLocalizationOperation";
            DeviceActivationHelper.LOGOFF_OPERATION_NAME = "LogoffOperation";
            DeviceActivationHelper.LOGON_WITH_DEVICE_TOKEN_OPERATION_NAME = "LogonWithDeviceTokenOperation";
            DeviceActivationHelper.UPDATE_SERVER_URL_OPERATION_NAME = "UpdateServerUrlOperation";
            DeviceActivationHelper.DIAGNOSTICS_OPERATION_NAME = "DiagnosticsOperation";
            DeviceActivationHelper.DEVICE_ACTIVATION_OPERATIONBASE_NAME = "DeviceActivationOperationBase";
            DeviceActivationHelper.DEVICE_ACTIVATION_VIEW_NAME = "DeviceActivationView";
            DeviceActivationHelper.GUIDED_ACTIVATION_VIEW_NAME = "GuidedActivationView";
            DeviceActivationHelper.DEVICE_ACTIVATION_GET_STARTED_VIEW_NAME = "GetStartedView";
            DeviceActivationHelper.DEVICE_ACTIVATION_PROCESS_VIEW_NAME = "DeviceActivationProcessView";
            DeviceActivationHelper.DEVICE_ACTIVATION_VIEWS = [
                DeviceActivationHelper.DEVICE_ACTIVATION_VIEW_NAME,
                DeviceActivationHelper.DEVICE_ACTIVATION_GET_STARTED_VIEW_NAME,
                DeviceActivationHelper.DEVICE_ACTIVATION_PROCESS_VIEW_NAME,
                DeviceActivationHelper.GUIDED_ACTIVATION_VIEW_NAME
            ];
            return DeviceActivationHelper;
        }());
        Helpers.DeviceActivationHelper = DeviceActivationHelper;
    })(Helpers = Commerce.Helpers || (Commerce.Helpers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DiscountsHelper = (function () {
        function DiscountsHelper() {
        }
        DiscountsHelper.validateMaximumDiscountAmount = function (discountValue) {
            var employee = Commerce.Session.instance.CurrentEmployee;
            var cart = Commerce.Session.instance.cart;
            var error = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(employee)
                && employee.Permissions.MaximumTotalDiscountAmount < discountValue) {
                if (employee.Permissions.MaximumTotalDiscountAmount === 0) {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERMISSION_DENIED_TOTAL_AMOUNT_DISCOUNT);
                }
                else {
                    var maximumDiscountAmount = Commerce.NumberExtensions.formatCurrency(employee.Permissions.MaximumTotalDiscountAmount);
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED, false, null, null, maximumDiscountAmount);
                }
            }
            if (error == null && !Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                var discountValueToCompare = Commerce.NumberExtensions.roundToNDigits(discountValue, Commerce.NumberExtensions.getDecimalPrecision());
                var maximumAllowedDiscountValue = Commerce.NumberExtensions.roundToNDigits(cart.DiscountAmount + cart.SubtotalSalesAmount, Commerce.NumberExtensions.getDecimalPrecision());
                if (discountValueToCompare > maximumAllowedDiscountValue) {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED_SUBTOTAL);
                }
            }
            return error;
        };
        DiscountsHelper.validateMaximumDiscountPercentage = function (discountValue) {
            var employee = Commerce.Session.instance.CurrentEmployee;
            var error = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(employee)
                && employee.Permissions.MaximumTotalDiscountPercentage < discountValue) {
                if (employee.Permissions.MaximumTotalDiscountPercentage === 0) {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERMISSION_DENIED_TOTAL_PERCENT_DISCOUNT);
                }
                else {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MAXIMUM_TOTAL_DISCOUNT_PERCENT_EXCEEDED, false, null, null, employee.Permissions.MaximumTotalDiscountPercentage);
                }
            }
            return error;
        };
        DiscountsHelper.validateMaximumLineDiscountAmount = function (discountValue, cartLine) {
            var employee = Commerce.Session.instance.CurrentEmployee;
            var error = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(employee)
                && employee.Permissions.MaximumLineDiscountAmount < discountValue) {
                if (employee.Permissions.MaximumLineDiscountAmount === 0) {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERMISSION_DENIED_LINE_AMOUNT_DISCOUNT);
                }
                else {
                    var maximumDiscountAmount = Commerce.NumberExtensions.formatCurrency(employee.Permissions.MaximumLineDiscountAmount);
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED, false, null, null, maximumDiscountAmount);
                }
            }
            if (error == null && !Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                var discountValueToCompare = Commerce.NumberExtensions.roundToNDigits(discountValue, Commerce.NumberExtensions.getDecimalPrecision());
                var maximumAllowedDiscountValue = Commerce.NumberExtensions.roundToNDigits(cartLine.ExtendedPrice + cartLine.LineManualDiscountAmount, Commerce.NumberExtensions.getDecimalPrecision());
                if (discountValueToCompare > maximumAllowedDiscountValue) {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED_PRICE);
                }
            }
            return error;
        };
        DiscountsHelper.validateMaximumLineDiscountPercentage = function (discountValue, cartLine) {
            var employee = Commerce.Session.instance.CurrentEmployee;
            var error = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(employee)
                && employee.Permissions.MaximumDiscountPercentage < discountValue) {
                if (employee.Permissions.MaximumDiscountPercentage === 0) {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERMISSION_DENIED_LINE_PERCENT_DISCOUNT);
                }
                else {
                    error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MAXIMUM_LINE_DISCOUNT_PERCENT_EXCEEDED, false, null, null, employee.Permissions.MaximumDiscountPercentage);
                }
            }
            return error;
        };
        DiscountsHelper.validateCanAddDiscounts = function (cart) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                return new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CART_IS_EMPTY);
            }
            var isSalesInvoiceLine = cart.CartLines.some(function (cartLine) { return cartLine.IsInvoiceLine; });
            if (isSalesInvoiceLine) {
                return new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.UNSUPPORTED_APPLY_DISCOUNT_OPERATION_SALESINVOICE);
            }
            var canApplyDiscounts = (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.Shopping)
                || (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && (cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit
                        || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit));
            if (!canApplyDiscounts) {
                return new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DISCOUNTISALLOWEDONLYFORCREATIONANDEDITION);
            }
            return null;
        };
        DiscountsHelper.getDiscountTypeName = function (discountLine, price, quantity) {
            var typeName = Commerce.StringExtensions.EMPTY;
            if (Commerce.ObjectExtensions.isNullOrUndefined(discountLine)) {
                return typeName;
            }
            var percentage = discountLine.Percentage;
            if (percentage === 0 && price > 0 && quantity !== 0) {
                percentage = (discountLine.EffectiveAmount / (price * quantity)) * 100;
                percentage = Commerce.NumberExtensions.roundToNDigits(percentage, 2);
            }
            var formattedAmount = Commerce.NumberExtensions.formatCurrency(discountLine.EffectiveAmount);
            var formattedPercentage = Commerce.NumberExtensions.formatNumber((percentage / 100), Commerce.NumberExtensions.getNumberOfDecimals(percentage), "P");
            switch (discountLine.DiscountLineTypeValue) {
                case Commerce.Proxy.Entities.DiscountLineType.PeriodicDiscount:
                    typeName = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5612"), discountLine.OfferName, Commerce.ViewModelAdapter.getResourceString("string_5615"), formattedAmount, formattedPercentage);
                    break;
                case Commerce.Proxy.Entities.DiscountLineType.ManualDiscount:
                    {
                        switch (discountLine.ManualDiscountTypeValue) {
                            case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountAmount:
                            case Commerce.Proxy.Entities.ManualDiscountType.LineDiscountPercent:
                                typeName = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5616"), Commerce.ViewModelAdapter.getResourceString("string_5611"), formattedAmount, formattedPercentage);
                                break;
                            case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountAmount:
                            case Commerce.Proxy.Entities.ManualDiscountType.TotalDiscountPercent:
                                typeName = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5616"), Commerce.ViewModelAdapter.getResourceString("string_5610"), formattedAmount, formattedPercentage);
                                break;
                            default:
                                Commerce.RetailLogger.coreHelpersInvalidManualDiscountType(discountLine.ManualDiscountTypeValue);
                                break;
                        }
                    }
                    break;
                case Commerce.Proxy.Entities.DiscountLineType.CustomerDiscount:
                    {
                        switch (discountLine.CustomerDiscountTypeValue) {
                            case Commerce.Proxy.Entities.CustomerDiscountType.LineDiscount:
                            case Commerce.Proxy.Entities.CustomerDiscountType.MultilineDiscount:
                                typeName = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5616"), Commerce.ViewModelAdapter.getResourceString("string_5611"), formattedAmount, formattedPercentage);
                                break;
                            case Commerce.Proxy.Entities.CustomerDiscountType.TotalDiscount:
                                typeName = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_5616"), Commerce.ViewModelAdapter.getResourceString("string_5610"), formattedAmount, formattedPercentage);
                                break;
                            default:
                                Commerce.RetailLogger.coreHelpersInvalidCustomerDiscountType(discountLine.CustomerDiscountTypeValue);
                                break;
                        }
                    }
                    break;
                default:
                    Commerce.RetailLogger.coreHelpersInvalidDiscountLineType(discountLine.DiscountLineTypeValue);
                    break;
            }
            return typeName;
        };
        return DiscountsHelper;
    }());
    Commerce.DiscountsHelper = DiscountsHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var EscapingHelper = (function () {
        function EscapingHelper() {
        }
        EscapingHelper.escapeHtml = function (input) {
            var div = document.createElement("div");
            div.appendChild(document.createTextNode(String(input)));
            return div.innerHTML;
        };
        EscapingHelper.escapeHtmlAttribute = function (input) {
            return String(input)
                .replace(/&/g, "&amp;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#39;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;");
        };
        return EscapingHelper;
    }());
    Commerce.EscapingHelper = EscapingHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PropertyTypeEnum;
    (function (PropertyTypeEnum) {
        PropertyTypeEnum[PropertyTypeEnum["BooleanValue"] = 0] = "BooleanValue";
        PropertyTypeEnum[PropertyTypeEnum["ByteValue"] = 1] = "ByteValue";
        PropertyTypeEnum[PropertyTypeEnum["DateTimeOffsetValue"] = 2] = "DateTimeOffsetValue";
        PropertyTypeEnum[PropertyTypeEnum["DecimalValue"] = 3] = "DecimalValue";
        PropertyTypeEnum[PropertyTypeEnum["IntegerValue"] = 4] = "IntegerValue";
        PropertyTypeEnum[PropertyTypeEnum["LongValue"] = 5] = "LongValue";
        PropertyTypeEnum[PropertyTypeEnum["StringValue"] = 6] = "StringValue";
    })(PropertyTypeEnum = Commerce.PropertyTypeEnum || (Commerce.PropertyTypeEnum = {}));
    var ExtensibilityHelper = (function () {
        function ExtensibilityHelper() {
        }
        ExtensibilityHelper.extend = function (typeToExtend, propertyName, key, propertyType) {
            if (Commerce.StringExtensions.isNullOrWhitespace(propertyName)) {
                throw "Cannot extend type with a null or whitespace property name";
            }
            if (!Object.isExtensible(typeToExtend)) {
                throw "The type is not extensible.";
            }
            var prototypeToExtend = typeToExtend.prototype;
            if (!prototypeToExtend) {
                throw "The object passed does not have a prototype.";
            }
            if (Object.getOwnPropertyDescriptor(prototypeToExtend, propertyName)) {
                return;
            }
            Object.defineProperty(prototypeToExtend, propertyName, {
                get: function () {
                    var value = ExtensibilityHelper.getPropertyValue(this, key);
                    if (!value) {
                        return undefined;
                    }
                    return value[PropertyTypeEnum[propertyType]];
                },
                set: function (newValue) {
                    var value = ExtensibilityHelper.getPropertyValue(this, key, true);
                    value[PropertyTypeEnum[propertyType]] = newValue;
                },
                enumerable: true
            });
        };
        ExtensibilityHelper.flatten = function (bag) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(bag) || !Commerce.ArrayExtensions.hasElements(bag.ExtensionProperties)) {
                return [];
            }
            return bag.ExtensionProperties.map(function (property) { return ExtensibilityHelper.getKeyValueType(property); });
        };
        ExtensibilityHelper.getPropertyValue = function (bag, key, createIfNotPresent) {
            if (createIfNotPresent === void 0) { createIfNotPresent = false; }
            var property = Commerce.ArrayExtensions.firstOrUndefined(bag.ExtensionProperties, function (property) {
                return property.Key === key;
            });
            if (!property) {
                if (!createIfNotPresent) {
                    return undefined;
                }
                property = new Commerce.Proxy.Entities.CommercePropertyClass({ Key: key, Value: new Commerce.Proxy.Entities.CommercePropertyValueClass() });
                bag.ExtensionProperties = bag.ExtensionProperties || [];
                bag.ExtensionProperties.push(property);
            }
            return property.Value;
        };
        ExtensibilityHelper.getKeyValueType = function (property) {
            var propertyName = Commerce.ArrayExtensions.firstOrUndefined(Object.keys(property.Value), function (name) { return property.Value[name] !== undefined; });
            if (propertyName) {
                return { key: property.Key, value: property.Value[propertyName], type: PropertyTypeEnum[propertyName] };
            }
            return { key: property.Key, value: undefined, type: undefined };
        };
        return ExtensibilityHelper;
    }());
    Commerce.ExtensibilityHelper = ExtensibilityHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var FulfillmentLineHelper = (function () {
        function FulfillmentLineHelper() {
        }
        FulfillmentLineHelper.getFulfillmentStatusTranslation = function (fulfillmentStatus) {
            var fulfillmentStatusResx = Commerce.StringExtensions.EMPTY;
            if (Commerce.ObjectExtensions.isNullOrUndefined(fulfillmentStatus) || Commerce.Client.Entities.FulfillmentLineStatus.Unknown.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13121";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.Pending.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13122";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.Accepted.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13124";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.Picking.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13125";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.PartiallyPicked.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13126";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.Picked.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13127";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.PartiallyPacked.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13128";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.Packed.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13129";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.PartiallyInvoiced.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13130";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.Invoiced.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13131";
            }
            else if (Commerce.Client.Entities.FulfillmentLineStatus.Rejected.equals(fulfillmentStatus)) {
                fulfillmentStatusResx = "string_13132";
            }
            return Commerce.ViewModelAdapter.getResourceString(fulfillmentStatusResx);
        };
        FulfillmentLineHelper.getFulfillmentDeliveryTypeTranslation = function (fulfillmentDeliveryTypeValue) {
            var fulfillmentDeliveryTypeResx;
            switch (fulfillmentDeliveryTypeValue) {
                case Commerce.Client.Entities.FulfillmentLineDeliveryType.All.Value:
                    fulfillmentDeliveryTypeResx = "string_13102";
                    break;
                case Commerce.Client.Entities.FulfillmentLineDeliveryType.StoreShipping.Value:
                    fulfillmentDeliveryTypeResx = "string_13141";
                    break;
                case Commerce.Client.Entities.FulfillmentLineDeliveryType.StorePickup.Value:
                    fulfillmentDeliveryTypeResx = "string_13142";
                    break;
                default:
                    fulfillmentDeliveryTypeResx = Commerce.StringExtensions.EMPTY;
                    break;
            }
            return Commerce.ViewModelAdapter.getResourceString(fulfillmentDeliveryTypeResx);
        };
        return FulfillmentLineHelper;
    }());
    Commerce.FulfillmentLineHelper = FulfillmentLineHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var HardwareStationEndpointStorage = (function () {
        function HardwareStationEndpointStorage() {
        }
        HardwareStationEndpointStorage.getActiveHardwareStation = function () {
            var serializedValue = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.ACTIVE_HARDWARE_STATION);
            var hardwareStation = null;
            if (!Commerce.StringExtensions.isNullOrWhitespace(serializedValue)) {
                hardwareStation = JSON.parse(serializedValue);
            }
            return hardwareStation;
        };
        HardwareStationEndpointStorage.setActiveHardwareStation = function (correlationId, hardwareStation) {
            var serializedValue = Commerce.StringExtensions.EMPTY;
            var profileIdToLog = Commerce.StringExtensions.EMPTY;
            var isLocalStation;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation)) {
                serializedValue = JSON.stringify(hardwareStation);
                profileIdToLog = hardwareStation.profileId;
                isLocalStation = Commerce.Peripherals.HardwareStation.HardwareStationContext.isLocalStation(hardwareStation);
            }
            Commerce.RetailLogger.peripheralsActiveHardwareStationSet(correlationId, profileIdToLog, isLocalStation);
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.ACTIVE_HARDWARE_STATION, serializedValue);
        };
        HardwareStationEndpointStorage.clearActiveHardwareStation = function (correlationId) {
            HardwareStationEndpointStorage.setActiveHardwareStation(correlationId, null);
        };
        HardwareStationEndpointStorage.getHardwareStationToken = function (hardwareStationRecordId, hardwareStationUrl) {
            var item = HardwareStationEndpointStorage.getStorageItem();
            var key = this.getHardwareStationTokenKey(hardwareStationRecordId, hardwareStationUrl);
            return item.hardwareStationParingTokens[key];
        };
        HardwareStationEndpointStorage.hasHardwareStationToken = function (hardwareStationRecordId, hardwareStationUrl) {
            return !Commerce.StringExtensions.isNullOrWhitespace(HardwareStationEndpointStorage.getHardwareStationToken(hardwareStationRecordId, hardwareStationUrl));
        };
        HardwareStationEndpointStorage.setHardwareStationToken = function (hardwareStationRecordId, hardwareStationUrl, token) {
            var item = HardwareStationEndpointStorage.getStorageItem();
            var key = this.getHardwareStationTokenKey(hardwareStationRecordId, hardwareStationUrl);
            item.hardwareStationParingTokens[key] = token;
            HardwareStationEndpointStorage.setStorageItem(item);
        };
        HardwareStationEndpointStorage.getStorageItem = function () {
            var storedValue = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_ENPOINT_STORAGE);
            var item = JSON.parse(storedValue);
            if (Commerce.ObjectExtensions.isNullOrUndefined(item)) {
                item = { hardwareStationParingTokens: {} };
            }
            return item;
        };
        HardwareStationEndpointStorage.setStorageItem = function (item) {
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_ENPOINT_STORAGE, JSON.stringify(item) || "");
        };
        HardwareStationEndpointStorage.getHardwareStationTokenKey = function (hardwareStationRecordId, hardwareStationUrl) {
            return hardwareStationRecordId + "/" + hardwareStationUrl;
        };
        return HardwareStationEndpointStorage;
    }());
    Commerce.HardwareStationEndpointStorage = HardwareStationEndpointStorage;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var HealthCheckParser = (function () {
        function HealthCheckParser() {
        }
        HealthCheckParser.prototype.isValidEntity = function (entities) {
            if (!Commerce.ArrayExtensions.hasElements(entities)) {
                return false;
            }
            var isValidEntity = true;
            entities.forEach(function (entity) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(entity)
                    || Commerce.StringExtensions.isNullOrWhitespace(entity.data)) {
                    isValidEntity = false;
                }
            });
            return isValidEntity;
        };
        HealthCheckParser.prototype.isValidHttpResponse = function (response) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(response) || !this.isJsonResponse(response) ||
                Commerce.StringExtensions.isNullOrWhitespace(response.body)) {
                return false;
            }
            return true;
        };
        HealthCheckParser.prototype.isJsonResponse = function (response) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.headers)) {
                return false;
            }
            else {
                var returnType = response.headers[Commerce.Proxy.Common.HttpHeaders.CONTENT_TYPE];
                if (Commerce.StringExtensions.isNullOrWhitespace(returnType)) {
                    returnType = response.headers[Commerce.Proxy.Common.HttpHeaders.CONTENT_TYPE.toLowerCase()];
                    if (Commerce.StringExtensions.isNullOrWhitespace(returnType)) {
                        return false;
                    }
                }
                if (returnType.indexOf(Commerce.Proxy.Common.MimeTypes.APPLICATION_JSON) < 0) {
                    return false;
                }
                return true;
            }
        };
        HealthCheckParser.DB_CHECK = "dbcheck";
        HealthCheckParser.RTS_CHECK = "realtimeservicecheck";
        return HealthCheckParser;
    }());
    Commerce.HealthCheckParser = HealthCheckParser;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ImageDisplayHelper = (function () {
        function ImageDisplayHelper() {
        }
        ImageDisplayHelper.GetCustomerImageContent = function (customer) {
            if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)
                    && Commerce.ArrayExtensions.hasElements(customer.Images)
                    && !Commerce.StringExtensions.isNullOrWhitespace(customer.Images[0].Uri)) {
                    return customer.Images[0].Uri;
                }
            }
            else {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(customer.OfflineImage)) {
                    return customer.OfflineImage;
                }
            }
            return Commerce.StringExtensions.EMPTY;
        };
        return ImageDisplayHelper;
    }());
    Commerce.ImageDisplayHelper = ImageDisplayHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var InstrumentationHelper = (function () {
        function InstrumentationHelper() {
        }
        InstrumentationHelper.setEnvironmentInfo = function (environmentConfiguration) {
            var applicationType = Commerce.Host.instance.application.getApplicationType();
            if (!Commerce.ApplicationHelper.isWebApplicationType(applicationType)) {
                TsLogging.LoggerBase.setTenantInfo(environmentConfiguration.EnvironmentId);
                var config = JSON.stringify(environmentConfiguration);
                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.ENVIRONMENT_CONFIGURATION_KEY, config);
                Commerce.RetailLogger.applicationLoadEnvironmentConfigurationServerLoadSucceeded(config);
            }
            if (applicationType === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindows) {
                TsLogging.LoggerBase.setInstrumentationKey(environmentConfiguration.ClientAppInsightsInstrumentationKey);
            }
            else if (applicationType === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindowsPhone) {
                TsLogging.LoggerBase.setInstrumentationKey(environmentConfiguration.WindowsPhonePosAppInsightsInstrumentationKey);
            }
        };
        return InstrumentationHelper;
    }());
    Commerce.InstrumentationHelper = InstrumentationHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var InvoiceLineHelper = (function () {
        function InvoiceLineHelper() {
        }
        InvoiceLineHelper.getInvoiceTypeTranslation = function (invoiceType) {
            var invoiceTypeString = Commerce.StringExtensions.EMPTY;
            switch (invoiceType) {
                case Commerce.Proxy.Entities.InvoiceType.SalesOrderInvoice:
                    invoiceTypeString = Commerce.ViewModelAdapter.getResourceString("string_12310");
                    break;
                case Commerce.Proxy.Entities.InvoiceType.CreditNoteInvoice:
                case Commerce.Proxy.Entities.InvoiceType.FreeTextCreditNoteInvoice:
                case Commerce.Proxy.Entities.InvoiceType.ProjectCreditNoteInvoice:
                    invoiceTypeString = Commerce.ViewModelAdapter.getResourceString("string_12311");
                    break;
                case Commerce.Proxy.Entities.InvoiceType.FreeTextInvoice:
                    invoiceTypeString = Commerce.ViewModelAdapter.getResourceString("string_12312");
                    break;
                case Commerce.Proxy.Entities.InvoiceType.ProjectInvoice:
                    invoiceTypeString = Commerce.ViewModelAdapter.getResourceString("string_12313");
                    break;
            }
            return invoiceTypeString;
        };
        return InvoiceLineHelper;
    }());
    Commerce.InvoiceLineHelper = InvoiceLineHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var KnockoutHandlerHelper = (function () {
        function KnockoutHandlerHelper() {
        }
        KnockoutHandlerHelper.setHandlerViewModel = function (element, handlerViewModel) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(element)) {
                throw "element must be specified.";
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(handlerViewModel)) {
                throw "handlerViewModel must be specified.";
            }
            $(element).data(KnockoutHandlerHelper._handlerViewModelAttributeName, handlerViewModel);
        };
        KnockoutHandlerHelper.getHandlerInstance = function ($parentElement, selector) {
            if (Commerce.ObjectExtensions.isNullOrUndefined($parentElement)) {
                throw "Unable to find handler. $parentElement must be specified.";
            }
            var $handlerElement = $parentElement.find(selector);
            if ($handlerElement.length < 1) {
                throw "Unable to find handler with selector: " + selector;
            }
            else if ($handlerElement.length > 1) {
                throw "Found more than 1 handler with selector: " + selector;
            }
            var viewModel = $handlerElement.data(KnockoutHandlerHelper._handlerViewModelAttributeName);
            if (Commerce.ObjectExtensions.isNullOrUndefined(viewModel)) {
                throw "Unable to find handler viewMode for: " + selector;
            }
            return viewModel;
        };
        KnockoutHandlerHelper.createMultiInstanceKnockoutHandler = function (viewModelType) {
            var handler = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var handlerViewModel = new viewModelType();
                    if (Commerce.ObjectExtensions.isFunction(handlerViewModel.dispose)) {
                        ko.utils.domNodeDisposal.addDisposeCallback(element, function (e) {
                            handlerViewModel.dispose.call(handlerViewModel);
                        });
                    }
                    KnockoutHandlerHelper.setHandlerViewModel(element, handlerViewModel);
                    return handlerViewModel.init.call(handlerViewModel, element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                },
                update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var handlerViewModel = $(element).data(KnockoutHandlerHelper._handlerViewModelAttributeName);
                    if (Commerce.ObjectExtensions.isFunction(handlerViewModel.update)) {
                        handlerViewModel.update.call(handlerViewModel, element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                    }
                }
            };
            return handler;
        };
        KnockoutHandlerHelper._handlerViewModelAttributeName = "handlerViewModel";
        return KnockoutHandlerHelper;
    }());
    Commerce.KnockoutHandlerHelper = KnockoutHandlerHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var LoggerHelper = (function () {
        function LoggerHelper() {
        }
        LoggerHelper.getFormattedCorrelationId = function (correlationId) {
            var correlationIdValue;
            if (typeof correlationId !== "string") {
                correlationIdValue = (Commerce.ObjectExtensions.isNullOrUndefined(correlationId) ? null : correlationId.correlationId);
            }
            else {
                correlationIdValue = correlationId;
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationIdValue)) {
                correlationIdValue = Commerce.StringExtensions.EMPTY;
            }
            return correlationIdValue;
        };
        LoggerHelper.getNewCorrelationId = function () {
            var result = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
            Commerce.RetailLogger.coreLoggerHelperGeneratedNewCorrelationId(result);
            return result;
        };
        LoggerHelper.resolveCorrelationId = function (correlationId) {
            if (!Commerce.ObjectExtensions.isString(correlationId) || Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            }
            return correlationId;
        };
        return LoggerHelper;
    }());
    Commerce.LoggerHelper = LoggerHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MediaBlobHelper = (function () {
        function MediaBlobHelper() {
        }
        MediaBlobHelper.getDefaultOrFirstMediaBlob = function (mediaBlobs) {
            var matchedMediaBlob = null;
            if (Commerce.ArrayExtensions.hasElements(mediaBlobs)) {
                matchedMediaBlob = Commerce.ArrayExtensions.firstOrUndefined(mediaBlobs, function (mediaBlob) { return mediaBlob.IsDefault; });
                if (Commerce.ObjectExtensions.isNullOrUndefined(matchedMediaBlob)) {
                    matchedMediaBlob = mediaBlobs[0];
                }
            }
            return matchedMediaBlob;
        };
        return MediaBlobHelper;
    }());
    Commerce.MediaBlobHelper = MediaBlobHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Utilities;
    (function (Utilities) {
        "use strict";
        var MerchantInformationHelper = (function () {
            function MerchantInformationHelper() {
            }
            MerchantInformationHelper.saveMerchantInformationLocalAsync = function (request, hardwareProfileId) {
                var hardwareStation = {
                    recordId: 0,
                    hostName: "localhost",
                    description: "Local Hardwarestation",
                    url: Commerce.Peripherals.HardwareStation.HardwareStationContext.localStation,
                    profileId: hardwareProfileId,
                    isActive: undefined,
                    isPaired: undefined,
                    eftTerminalId: undefined,
                    hardwareConfigurations: undefined
                };
                return Commerce.Peripherals.HardwareStation.HardwareStationContext.instance
                    .security(hardwareStation)
                    .execute("SaveMerchantInformationLocal", request);
            };
            MerchantInformationHelper.merchantInformationLocalExistsAsync = function () {
                var hardwareStation = {
                    recordId: 0,
                    hostName: "localhost",
                    description: "Local Hardwarestation",
                    url: Commerce.Peripherals.HardwareStation.HardwareStationContext.localStation,
                    profileId: undefined,
                    isActive: undefined,
                    isPaired: undefined,
                    eftTerminalId: undefined,
                    hardwareConfigurations: undefined
                };
                return Commerce.Peripherals.HardwareStation.HardwareStationContext.instance
                    .security(hardwareStation)
                    .execute("MerchantInformationLocalExists");
            };
            return MerchantInformationHelper;
        }());
        Utilities.MerchantInformationHelper = MerchantInformationHelper;
    })(Utilities = Commerce.Utilities || (Commerce.Utilities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var NotificationHelper = (function () {
        function NotificationHelper() {
        }
        NotificationHelper.acknowledgeNotifications = function (lastPullDateTime) {
            var acknowledgeNotificationsRequest = new Commerce.AcknowledgeNotificationsRequest(lastPullDateTime);
            Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(acknowledgeNotificationsRequest));
        };
        NotificationHelper.setBackgroundGetNotifications = function (correlationId) {
            var refreshTime = Commerce.ApplicationContext.Instance.channelConfiguration.NotificationRefreshInterval;
            if (refreshTime > 0) {
                var getNotificationRequest = new Commerce.GetNotificationsRequest(correlationId);
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getNotificationRequest)).always(function () {
                    NotificationHelper.notificationTimeout =
                        setTimeout(NotificationHelper.setBackgroundGetNotifications, refreshTime * 60 * 1000, Commerce.LoggerHelper.getNewCorrelationId());
                });
            }
        };
        NotificationHelper.resetBackgroundGetNotifications = function () {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(NotificationHelper.notificationTimeout)) {
                clearTimeout(NotificationHelper.notificationTimeout);
            }
        };
        NotificationHelper.refreshNotification = function (notification) {
            var getNotificationRequest = new Commerce.RefreshNotificationRequest(notification);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getNotificationRequest));
        };
        NotificationHelper.getNotificationError = function (notification) {
            var notificationErrorDetail = {
                ActionProperty: Commerce.StringExtensions.EMPTY,
                ItemCount: 0,
                IsSuccess: false,
                IsNew: false,
                DisplayText: Commerce.StringExtensions.EMPTY,
                IsLiveContentOnly: false
            };
            var notificationError = notification || {
                Action: 0,
                ActionName: Commerce.StringExtensions.EMPTY,
                lastPullDateTime: Commerce.DateExtensions.now,
                NotificationDetails: [notificationErrorDetail]
            };
            notificationError.lastPullDateTime = Commerce.DateExtensions.now;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(notification)) {
                if (notification.NotificationDetails.length === 0) {
                    notification.NotificationDetails.push(notificationErrorDetail);
                }
                else {
                    notification.NotificationDetails.forEach(function (notificationDetail) {
                        notificationDetail.IsSuccess = false;
                        notificationDetail.IsNew = false;
                    });
                }
            }
            return notificationError;
        };
        return NotificationHelper;
    }());
    Commerce.NotificationHelper = NotificationHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Utilities;
    (function (Utilities) {
        "use strict";
        var OfflineHelper = (function () {
            function OfflineHelper() {
            }
            OfflineHelper.stopOffline = function (correlationId) {
                if (OfflineHelper.isOfflineEnabled()) {
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncDownloadOfflineData);
                    Commerce.Session.instance.offlineParameters.syncDownloadOfflineData = 0;
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncUploadOfflineData);
                    Commerce.Session.instance.offlineParameters.syncUploadOfflineData = 0;
                }
                Commerce.Session.instance.connectionStatus = Commerce.Client.Entities.ConnectionStatusType.Online;
                Commerce.RetailLogger.coreOfflineHelperStopOffline(correlationId);
            };
            OfflineHelper.isOfflineEnabled = function () {
                var offlineEnabled = !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.offlineDatabase) &&
                    !Commerce.StringExtensions.isEmpty(Commerce.Config.offlineDatabase);
                return offlineEnabled;
            };
            return OfflineHelper;
        }());
        Utilities.OfflineHelper = OfflineHelper;
    })(Utilities = Commerce.Utilities || (Commerce.Utilities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        var RefinerDefinition = (function () {
            function RefinerDefinition(id, createRefiner, updateCriteria) {
                this._id = id;
                this._createRefiner = createRefiner;
                this._updateCriteria = updateCriteria;
            }
            Object.defineProperty(RefinerDefinition.prototype, "id", {
                get: function () {
                    return this._id;
                },
                enumerable: true,
                configurable: true
            });
            RefinerDefinition.prototype.createRefiner = function (criteria) {
                return this._createRefiner(this._id, criteria);
            };
            RefinerDefinition.prototype.updateCriteria = function (criteria, refiner) {
                return this._updateCriteria(criteria, refiner);
            };
            return RefinerDefinition;
        }());
        Refiners.RefinerDefinition = RefinerDefinition;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OrderSearchCriteriaConverter = (function () {
        function OrderSearchCriteriaConverter() {
        }
        OrderSearchCriteriaConverter.getRefiners = function (criteria, customFilters) {
            criteria = Commerce.ObjectExtensions.isNullOrUndefined(criteria) ? {} : criteria;
            var refiners = [];
            customFilters.forEach(function (customFilterDefinition) {
                var existingSearchFilter = Commerce.ArrayExtensions.firstOrUndefined(criteria.CustomFilters, function (customFilter) {
                    return customFilter.Key === customFilterDefinition.key;
                });
                if (customFilterDefinition.filterType === Commerce.Proxy.Entities.SearchFilterType.Text) {
                    var value = Commerce.ObjectExtensions.isNullOrUndefined(existingSearchFilter) ? undefined : existingSearchFilter.SearchValues[0].Value.StringValue;
                    var key = OrderSearchCriteriaConverter.EXTENSION_REFINER_PREFIX + customFilterDefinition.key;
                    refiners.push(Commerce.Refiners.RefinerFactory.createTextRefiner(key, customFilterDefinition.label, value));
                }
            });
            OrderSearchCriteriaConverter.REFINER_DEFINITIONS
                .forEach(function (definition) {
                refiners.push(definition.createRefiner(criteria));
            });
            return refiners;
        };
        OrderSearchCriteriaConverter.getOrderSearchCriteria = function (refiners) {
            var criteria = {};
            var refinersByRefinerId = Object.create(null);
            var extensionRefiners = [];
            refiners.forEach(function (refiner) {
                if (!Commerce.StringExtensions.beginsWith(refiner.ID, OrderSearchCriteriaConverter.EXTENSION_REFINER_PREFIX)) {
                    refinersByRefinerId[refiner.ID] = refiner;
                }
                else if (Commerce.ArrayExtensions.hasElements(refiner.SelectedValues)) {
                    extensionRefiners.push(refiner);
                }
            });
            OrderSearchCriteriaConverter.REFINER_DEFINITIONS.forEach(function (definition) {
                var refiner = refinersByRefinerId[definition.id];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner)) {
                    criteria = definition.updateCriteria(criteria, refiner);
                }
            });
            var customSearchFilters = [];
            extensionRefiners.forEach(function (refiner) {
                var key = refiner.ID.substr(OrderSearchCriteriaConverter.EXTENSION_REFINER_PREFIX.length);
                if (refiner instanceof Commerce.Refiners.TextRefiner) {
                    var textValue = refiner.SelectedValue;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(textValue)) {
                        var searchFilter = {
                            Key: key,
                            FilterTypeValue: Commerce.Proxy.Entities.SearchFilterType.Text,
                            SearchValues: [{
                                    Value: { StringValue: textValue }
                                }]
                        };
                        customSearchFilters.push(searchFilter);
                    }
                }
            });
            criteria.CustomFilters = Commerce.ArrayExtensions.hasElements(customSearchFilters) ? customSearchFilters : undefined;
            return criteria;
        };
        OrderSearchCriteriaConverter._validateStartEndDate = function (refiner) {
            var errors = [];
            if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner) && !Commerce.ObjectExtensions.isNullOrUndefined(refiner.startDate)) {
                var now = new Date();
                if (refiner.startDate > now) {
                    var startDateNotInTheFuture = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.START_DATE_NOT_IN_FUTURE);
                    errors.push(startDateNotInTheFuture);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner.endDate)
                    && refiner.startDate > refiner.endDate) {
                    var startDateNotGreaterThanEndDate = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.START_DATE_NOT_MORE_RECENT_THAN_END_DATE);
                    errors.push(startDateNotGreaterThanEndDate);
                }
            }
            return errors;
        };
        OrderSearchCriteriaConverter.EXTENSION_REFINER_PREFIX = "posExtensionRefiner_";
        OrderSearchCriteriaConverter.REFINER_DEFINITIONS = [
            new Commerce.Refiners.RefinerDefinition("customerNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4594"), criteria.CustomerAccountNumber);
            }, function (criteria, refiner) {
                criteria.CustomerAccountNumber = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("customerName", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4595"), criteria.CustomerName);
            }, function (criteria, refiner) {
                criteria.CustomerName = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("customerEmail", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4596"), criteria.EmailAddress);
            }, function (criteria, refiner) {
                criteria.EmailAddress = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("orderNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4588"), criteria.SalesId);
            }, function (criteria, refiner) {
                criteria.SalesId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("orderStatus", function (refinerId, criteria) {
                var getOrderStatusKeyValuePairCallback = function (v) {
                    return { key: Commerce.Proxy.Entities.SalesOrderWrapper.getOrderStatusString(v), value: v };
                };
                var orderStatusFilterCallback = function (value) {
                    switch (value) {
                        case Commerce.Proxy.Entities.SalesStatus.Created:
                        case Commerce.Proxy.Entities.SalesStatus.Invoiced:
                        case Commerce.Proxy.Entities.SalesStatus.Canceled:
                            return true;
                        default:
                            return false;
                    }
                };
                return Commerce.Refiners.RefinerFactory.createMultiSelectListRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4590"), Commerce.ArrayExtensions.hasElements(criteria.OrderStatusValues) ? criteria.OrderStatusValues.map(getOrderStatusKeyValuePairCallback) : null, Commerce.EnumExtensions.getValues(Commerce.Proxy.Entities.SalesStatus).filter(orderStatusFilterCallback).map(getOrderStatusKeyValuePairCallback));
            }, function (criteria, refiner) {
                var orderStatusValues = refiner.SelectedValues.map(function (v) { return v.value; });
                criteria.OrderStatusValues = Commerce.ArrayExtensions.hasElements(orderStatusValues) ? orderStatusValues : undefined;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("orderType", function (refinerId, criteria) {
                var getOrderTypeKeyValuePairCallback = function (v) {
                    return { key: Commerce.Proxy.Entities.SalesOrderWrapper.getOrderTypeString(v), value: v };
                };
                return Commerce.Refiners.RefinerFactory.createSingleSelectListRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4592"), Commerce.ObjectExtensions.isNullOrUndefined(criteria.OrderType) ? null : [criteria.OrderType].map(getOrderTypeKeyValuePairCallback), Commerce.EnumExtensions.getValues(Commerce.Proxy.Entities.CustomerOrderType).map(getOrderTypeKeyValuePairCallback));
            }, function (criteria, refiner) {
                criteria.OrderType = Commerce.ObjectExtensions.isNullOrUndefined(refiner.SelectedValue) ? undefined : refiner.SelectedValue.value;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("orderDate", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createDateRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4591"), criteria.StartDateTime, criteria.EndDateTime, OrderSearchCriteriaConverter._validateStartEndDate);
            }, function (criteria, refiner) {
                criteria.StartDateTime = refiner.startDate;
                criteria.EndDateTime = refiner.endDate;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("receiptNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4589"), criteria.ReceiptId);
            }, function (criteria, refiner) {
                criteria.ReceiptId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("storeNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4597"), criteria.StoreId);
            }, function (criteria, refiner) {
                criteria.StoreId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("channelReferenceID", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4593"), criteria.ChannelReferenceId);
            }, function (criteria, refiner) {
                criteria.ChannelReferenceId = refiner.SelectedValue;
                return criteria;
            })
        ];
        return OrderSearchCriteriaConverter;
    }());
    Commerce.OrderSearchCriteriaConverter = OrderSearchCriteriaConverter;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OrgUnitAvailabilitySearchCriteriaConverter = (function () {
        function OrgUnitAvailabilitySearchCriteriaConverter() {
        }
        OrgUnitAvailabilitySearchCriteriaConverter.getRefiners = function (criteria) {
            criteria = Commerce.ObjectExtensions.isNullOrUndefined(criteria) ? {} : criteria;
            var refiners = OrgUnitAvailabilitySearchCriteriaConverter.DEFINITIONS
                .map(function (definition) {
                return definition.createRefiner(criteria);
            });
            return refiners;
        };
        OrgUnitAvailabilitySearchCriteriaConverter.getOrgUnitAvailabilitySearchCriteria = function (refiners) {
            var criteria = {};
            var refinersByRefinerId = Object.create(null);
            refiners.forEach(function (refiner) {
                refinersByRefinerId[refiner.ID] = refiner;
            });
            OrgUnitAvailabilitySearchCriteriaConverter.DEFINITIONS.forEach(function (definition) {
                var refiner = refinersByRefinerId[definition.id];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner)) {
                    criteria = definition.updateCriteria(criteria, refiner);
                }
            });
            return criteria;
        };
        OrgUnitAvailabilitySearchCriteriaConverter.DEFINITIONS = [
            new Commerce.Refiners.RefinerDefinition("Name", function (refinerId, filter) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_2647"), filter.OrgUnitName);
            }, function (filter, refiner) {
                filter.OrgUnitName = refiner.SelectedValue;
                return filter;
            }),
            new Commerce.Refiners.RefinerDefinition("storeNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_2648"), criteria.OrgUnitNumber);
            }, function (filter, refiner) {
                filter.OrgUnitNumber = refiner.SelectedValue;
                return filter;
            }),
        ];
        return OrgUnitAvailabilitySearchCriteriaConverter;
    }());
    Commerce.OrgUnitAvailabilitySearchCriteriaConverter = OrgUnitAvailabilitySearchCriteriaConverter;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OrgUnitLocationSearchCriteriaConverter = (function () {
        function OrgUnitLocationSearchCriteriaConverter() {
        }
        OrgUnitLocationSearchCriteriaConverter.getRefiners = function (criteria) {
            criteria = Commerce.ObjectExtensions.isNullOrUndefined(criteria) ? {} : criteria;
            var refiners = OrgUnitLocationSearchCriteriaConverter.REFINER_DEFINITIONS
                .map(function (definition) {
                return definition.createRefiner(criteria);
            });
            return refiners;
        };
        OrgUnitLocationSearchCriteriaConverter.getOrgUnitLocationSearchCriteria = function (refiners) {
            var criteria = {};
            var refinersByRefinerId = Object.create(null);
            refiners.forEach(function (refiner) {
                refinersByRefinerId[refiner.ID] = refiner;
            });
            OrgUnitLocationSearchCriteriaConverter.REFINER_DEFINITIONS.forEach(function (definition) {
                var refiner = refinersByRefinerId[definition.id];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner)) {
                    criteria = definition.updateCriteria(criteria, refiner);
                }
            });
            return criteria;
        };
        OrgUnitLocationSearchCriteriaConverter.REFINER_DEFINITIONS = [
            new Commerce.Refiners.RefinerDefinition("storeNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_6406"), criteria.OrgUnitNumber);
            }, function (criteria, refiner) {
                criteria.OrgUnitNumber = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("storeName", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_6407"), criteria.OrgUnitName);
            }, function (criteria, refiner) {
                criteria.OrgUnitName = refiner.SelectedValue;
                return criteria;
            }),
        ];
        return OrgUnitLocationSearchCriteriaConverter;
    }());
    Commerce.OrgUnitLocationSearchCriteriaConverter = OrgUnitLocationSearchCriteriaConverter;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PaymentHelper = (function () {
        function PaymentHelper() {
        }
        PaymentHelper.isAuthorize = function (amount) {
            return amount >= 0;
        };
        PaymentHelper.isCardNumberMasked = function (cardNumber) {
            if (!Commerce.StringExtensions.isNullOrWhitespace(cardNumber)) {
                var result = cardNumber.indexOf(PaymentHelper.maskChar);
                if (result >= 0) {
                    return true;
                }
            }
            return false;
        };
        PaymentHelper.beginTransactionAsync = function () {
            var asyncQueue = new Commerce.AsyncQueue();
            if (Commerce.Peripherals.instance
                && Commerce.Peripherals.instance.paymentTerminal
                && Commerce.StringExtensions.isNullOrWhitespace(Commerce.Peripherals.instance.paymentTerminal.lockToken)) {
                var updateLines_1 = true;
                asyncQueue.enqueue(function () {
                    var beginTransRequest = new Commerce.PaymentTerminalBeginTransactionRequest();
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(beginTransRequest))
                        .recoverOnFailure(function (errors) {
                        updateLines_1 = false;
                        if (PaymentHelper.canUseTerminalAfterErrors(errors)) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    });
                }).enqueue(function () {
                    if (Commerce.Peripherals.instance.cardPayment) {
                        var request = new Commerce.CardPaymentBeginTransactionRequest();
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).map(function (result) { return void 0; });
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    if (!updateLines_1) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var updateLinesRequest = new Commerce.PaymentTerminalUpdateLinesRequest(Commerce.Session.instance.cart);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateLinesRequest));
                });
            }
            return asyncQueue.run().map(function (result) { return void 0; });
        };
        PaymentHelper.getStoreCountryRegionISOCode = function () {
            var storeInformation = Commerce.ApplicationContext.Instance.storeInformation;
            var storeAddress = storeInformation.OrgUnitAddress;
            if (Commerce.ObjectExtensions.isNullOrUndefined(storeAddress)) {
                storeAddress = new Commerce.Proxy.Entities.AddressClass();
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(storeAddress.TwoLetterISORegionName)) {
                storeAddress.TwoLetterISORegionName = "US";
            }
            return storeAddress.TwoLetterISORegionName;
        };
        PaymentHelper.clearSensitiveDataOnTenderLine = function (tenderLine) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderLine.PaymentCard)) {
                if (tenderLine.PaymentCard.IsSwipe) {
                    tenderLine.PaymentCard.Track1 = Commerce.StringExtensions.EMPTY;
                    tenderLine.PaymentCard.Track2 = Commerce.StringExtensions.EMPTY;
                    tenderLine.PaymentCard.Track3 = Commerce.StringExtensions.EMPTY;
                }
                else {
                    tenderLine.PaymentCard.CardNumber = Commerce.StringExtensions.EMPTY;
                    tenderLine.PaymentCard.CCID = Commerce.StringExtensions.EMPTY;
                    tenderLine.PaymentCard.Zip = Commerce.StringExtensions.EMPTY;
                    tenderLine.PaymentCard.Country = PaymentHelper.getStoreCountryRegionISOCode();
                }
            }
        };
        PaymentHelper.isAssociatedCardType = function (cardType, cardNumber) {
            if (cardNumber) {
                var maskNumFrom = parseInt(cardType.NumberFrom, undefined);
                var maskNumTo = parseInt(cardType.NumberTo, undefined);
                var maskLength = cardType.NumberFrom.length;
                var cardSubStr = void 0;
                cardSubStr = (cardNumber.length > maskLength) ? parseInt(cardNumber.substr(0, maskLength), undefined) : parseInt(cardNumber, undefined);
                if ((maskNumFrom <= cardSubStr) && (cardSubStr <= maskNumTo)) {
                    return true;
                }
            }
            return false;
        };
        PaymentHelper.isDebitCard = function (cardTypeId) {
            return cardTypeId === Commerce.Proxy.Entities.CardType.InternationalDebitCard;
        };
        PaymentHelper.getGiftCardByIdAsync = function (tenderType, giftCardId, correlationId) {
            var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
            var giftCardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
            var tenderInfo = {
                TenderId: null,
                CardNumber: giftCardId,
                CardTypeId: giftCardTypeId
            };
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType) || Commerce.StringExtensions.isNullOrWhitespace(tenderType.ConnectorId)) {
                var request = new Commerce.Payments.GetGiftCardByIdServiceRequest(correlationId, giftCardId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .map(function (response) {
                    return response.canceled ? null : response.data.giftCard;
                });
            }
            else if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal) && paymentTerminal.isActive) {
                var request = new Commerce.PaymentTerminalEnquireGiftCardBalancePeripheralRequest(correlationId, tenderType.ConnectorId, tenderInfo);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).map(PaymentHelper.mapEnquireGiftCardBalancePeripheralResponse);
            }
            else if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Peripherals.instance.cardPayment)) {
                var request = new Commerce.CardPaymentEnquireGiftCardBalancePeripheralRequest(correlationId, tenderType.ConnectorId, tenderInfo);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)).map(PaymentHelper.mapEnquireGiftCardBalancePeripheralResponse);
            }
            else {
                var errors = new Array();
                errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED));
                return Commerce.AsyncResult.createRejected(errors);
            }
        };
        PaymentHelper.isCreditCard = function (cardTypeId) {
            return cardTypeId === Commerce.Proxy.Entities.CardType.InternationalCreditCard
                || cardTypeId === Commerce.Proxy.Entities.CardType.CorporateCard;
        };
        PaymentHelper.getMaskedNumber = function (originalNumber) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(originalNumber) && !Commerce.StringExtensions.isEmpty(originalNumber) && originalNumber.length > 4) {
                var numberPrefixLength = originalNumber.length - 4;
                var last4Digits = originalNumber.substr(numberPrefixLength);
                var numberPrefix = Commerce.StringExtensions.padLeft(Commerce.StringExtensions.EMPTY, PaymentHelper.maskChar, numberPrefixLength);
                return numberPrefix + last4Digits;
            }
            else {
                return originalNumber;
            }
        };
        PaymentHelper.getTruncatedCardNumber = function (originalNumber) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(originalNumber) && !Commerce.StringExtensions.isEmpty(originalNumber) && originalNumber.length > 4) {
                var numberPrefixLength = originalNumber.length - 4;
                var last4Digits = originalNumber.substr(numberPrefixLength);
                return Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_3446"), last4Digits);
            }
            else {
                return Commerce.StringExtensions.EMPTY;
            }
        };
        PaymentHelper.canUseTerminalAfterErrors = function (errors) {
            return !Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED)
                && !Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)
                && !Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_COMMUNICATIONERROR)
                && !Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR);
        };
        PaymentHelper.createTokenizedPaymentCardResult = function (correlationId, fetchTokenPaymentInfo, tenderType) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(fetchTokenPaymentInfo) && fetchTokenPaymentInfo.IsApproved) {
                var tokenString = fetchTokenPaymentInfo.PaymentSdkData.substring(36);
                var tokenId = fetchTokenPaymentInfo.PaymentSdkData.substring(0, 36);
                var cardTokenInfo = {
                    CardToken: tokenString,
                    MaskedCardNumber: fetchTokenPaymentInfo.CardNumberMasked,
                    ServiceAccountId: Commerce.ApplicationContext.Instance.hardwareProfile.EftCompanyId,
                    UniqueCardId: tokenId
                };
                var tokenizedPaymentCard = {
                    TenderType: tenderType,
                    CardTokenInfo: cardTokenInfo
                };
                return { canceled: false, data: tokenizedPaymentCard };
            }
            else {
                if (Commerce.ObjectExtensions.isNullOrUndefined(fetchTokenPaymentInfo)) {
                    Commerce.RetailLogger.viewsOrderPaymentViewPaymentInfoIsNull(correlationId);
                }
                else {
                    Commerce.RetailLogger.viewsOrderPaymentViewPaymentInfoWasNotApproved(correlationId, fetchTokenPaymentInfo.CardNumberMasked, fetchTokenPaymentInfo.CardType.toString(), fetchTokenPaymentInfo.CashbackAmount, fetchTokenPaymentInfo.ApprovedAmount);
                }
                return { canceled: true, data: null };
            }
        };
        PaymentHelper.isPaymentTerminalAvailable = function () {
            var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
            return !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)
                && !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal.isActive)
                && paymentTerminal.isActive
                && Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
        };
        PaymentHelper.mapEnquireGiftCardBalancePeripheralResponse = function (response) {
            if (response.canceled) {
                return null;
            }
            var giftCard = {
                Id: response.data.paymentInfo.CardNumberMasked,
                Balance: response.data.paymentInfo.AvailableBalanceAmount,
                CardCurrencyCode: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency
            };
            return giftCard;
        };
        PaymentHelper.ACTION_AUTHORIZE_PAYMENT = "AuthorizePayment";
        PaymentHelper.DUPLICATE_PROTECTION_COMMAND_AUTHORIZE = "sale";
        PaymentHelper.DUPLICATE_PROTECTION_COMMAND_REFUND = "refund";
        PaymentHelper.loyaltyPointDaysToExpiry = 30;
        PaymentHelper.loyaltyBalanceLabel = "string_294";
        PaymentHelper.maskChar = "*";
        return PaymentHelper;
    }());
    Commerce.PaymentHelper = PaymentHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ProductSearchResultHelper = (function () {
        function ProductSearchResultHelper() {
        }
        ProductSearchResultHelper.attachOfflineImageHandler = function (productSearchResults, channelId, catalogId) {
            if (Commerce.ArrayExtensions.hasElements(productSearchResults)) {
                var productManager_2 = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                productSearchResults.forEach(function (result) {
                    var offlineResult = result;
                    offlineResult.OfflineImageHandler = (function (productSearchResult) {
                        var offlineImage = Commerce.StringExtensions.EMPTY;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(productSearchResult)) {
                            return productManager_2.getMediaBlobsAsync(productSearchResult.RecordId, channelId, catalogId)
                                .map(function (mediaBlobs) {
                                var defaultMediBlob = Commerce.MediaBlobHelper.getDefaultOrFirstMediaBlob(mediaBlobs);
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(defaultMediBlob)) {
                                    offlineImage = defaultMediBlob.Content;
                                }
                                return offlineImage;
                            });
                        }
                        return Commerce.AsyncResult.createResolved(offlineImage);
                    });
                });
            }
        };
        return ProductSearchResultHelper;
    }());
    Commerce.ProductSearchResultHelper = ProductSearchResultHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrototypeHelper = (function () {
        function PrototypeHelper() {
        }
        PrototypeHelper.getPrototypeChainTypeName = function (prototype) {
            if (!prototype || prototype === Object.prototype) {
                return null;
            }
            var recursiveName = PrototypeHelper.getPrototypeChainTypeName(Object.getPrototypeOf(prototype));
            recursiveName = recursiveName ? recursiveName + "." : Commerce.StringExtensions.EMPTY;
            return recursiveName + PrototypeHelper._getFunctionName(prototype.constructor);
        };
        PrototypeHelper._getFunctionName = function (functionInstance) {
            var functionInstanceAsAny = functionInstance;
            if (functionInstanceAsAny.name !== null && typeof functionInstanceAsAny.name !== "undefined") {
                return functionInstanceAsAny.name;
            }
            var funcNameRegex = /function\s([^(]{1,})\(/;
            var results = (funcNameRegex).exec(functionInstance.toString());
            return (results && results.length > 1) ? results[1] : "";
        };
        return PrototypeHelper;
    }());
    Commerce.PrototypeHelper = PrototypeHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var TargetContext;
    (function (TargetContext) {
        TargetContext[TargetContext["Unknown"] = 0] = "Unknown";
        TargetContext[TargetContext["Cart"] = 1] = "Cart";
        TargetContext[TargetContext["CartLine"] = 2] = "CartLine";
        TargetContext[TargetContext["DropAndDeclareTransaction"] = 3] = "DropAndDeclareTransaction";
        TargetContext[TargetContext["NonSalesTransaction"] = 4] = "NonSalesTransaction";
        TargetContext[TargetContext["TenderLine"] = 5] = "TenderLine";
        TargetContext[TargetContext["AffiliationLine"] = 6] = "AffiliationLine";
        TargetContext[TargetContext["OrderFulfillment"] = 7] = "OrderFulfillment";
        TargetContext[TargetContext["FiscalRegistrationResult"] = 8] = "FiscalRegistrationResult";
        TargetContext[TargetContext["ChargeLine"] = 9] = "ChargeLine";
    })(TargetContext || (TargetContext = {}));
    var ReasonCodeContainerContext = (function () {
        function ReasonCodeContainerContext(container, targetContext) {
            this._container = container;
            this._processedReasonCodes = new Commerce.Dictionary();
            this._targetContext = targetContext;
        }
        Object.defineProperty(ReasonCodeContainerContext.prototype, "container", {
            get: function () {
                return this._container;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodeContainerContext.prototype, "targetContext", {
            get: function () {
                return this._targetContext;
            },
            enumerable: true,
            configurable: true
        });
        ReasonCodeContainerContext.prototype.hasAlreadyProcessed = function (reasonCode) {
            return this._processedReasonCodes.hasItem(reasonCode.ReasonCodeId);
        };
        ReasonCodeContainerContext.prototype.processAndAddReasonCodeLines = function (reasonCodes, addedReasonCodeLines) {
            this._processedReasonCodes.setItems(reasonCodes, function (reasonCode) {
                return reasonCode.ReasonCodeId;
            });
            this._container.ReasonCodeLines = this.container.ReasonCodeLines || [];
            this.container.ReasonCodeLines = this.container.ReasonCodeLines.concat(addedReasonCodeLines);
        };
        return ReasonCodeContainerContext;
    }());
    var ReasonCodesInternalContext = (function () {
        function ReasonCodesInternalContext(context) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context.cart)) {
                this._cartContext = new ReasonCodeContainerContext(context.cart, TargetContext.Cart);
            }
            if (Commerce.ArrayExtensions.hasElements(context.cartLines)) {
                this._cartLineContexts = context.cartLines.map(function (cartLine) {
                    return new ReasonCodeContainerContext(cartLine, TargetContext.CartLine);
                });
            }
            if (Commerce.ArrayExtensions.hasElements(context.tenderLines)) {
                this._tenderLineContexts = context.tenderLines
                    .map(function (tenderLine) {
                    return new ReasonCodeContainerContext(tenderLine, TargetContext.TenderLine);
                });
            }
            if (Commerce.ArrayExtensions.hasElements(context.affiliationLines)) {
                this._affiliationLineContexts = context.affiliationLines
                    .map(function (affiliationLine) {
                    return new ReasonCodeContainerContext(affiliationLine, TargetContext.AffiliationLine);
                });
            }
            if (Commerce.ArrayExtensions.hasElements(context.chargeLines)) {
                this._chargeLineContexts = context.chargeLines
                    .map(function (chargeLine) {
                    return new ReasonCodeContainerContext(chargeLine, TargetContext.ChargeLine);
                });
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context.nonSalesTransaction)) {
                this._nonSalesTransactionContext = new ReasonCodeContainerContext(context.nonSalesTransaction, TargetContext.NonSalesTransaction);
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context.dropAndDeclareTransaction)) {
                this._dropAndDeclareTransactionContext =
                    new ReasonCodeContainerContext(context.dropAndDeclareTransaction, TargetContext.DropAndDeclareTransaction);
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context.fulfillmentLineDetails)) {
                this._orderFulfillmentContext = new ReasonCodeContainerContext(context.fulfillmentLineDetails, TargetContext.OrderFulfillment);
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context.fiscalRegistrationResult)) {
                this._fiscalRegistrationResultContext = new ReasonCodeContainerContext(context.fiscalRegistrationResult, TargetContext.FiscalRegistrationResult);
            }
            this._processedReasonCodes = [];
            this._addedReasonCodeLines = [];
            this._context = context;
        }
        Object.defineProperty(ReasonCodesInternalContext.prototype, "reasonCodesContext", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "cartContext", {
            get: function () {
                return this._cartContext;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "cartLineContexts", {
            get: function () {
                return this._cartLineContexts;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "tenderLineContexts", {
            get: function () {
                return this._tenderLineContexts;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "affiliationLineContexts", {
            get: function () {
                return this._affiliationLineContexts;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "nonSalesTransactionContext", {
            get: function () {
                return this._nonSalesTransactionContext;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "dropAndDeclareTransactionContext", {
            get: function () {
                return this._dropAndDeclareTransactionContext;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "infoCodeNoTransactionContext", {
            get: function () {
                return this._orderFulfillmentContext;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "fiscalRegistrationResultContext", {
            get: function () {
                return this._fiscalRegistrationResultContext;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "chargeLineContexts", {
            get: function () {
                return this._chargeLineContexts;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "processedReasonCodes", {
            get: function () {
                return this._processedReasonCodes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReasonCodesInternalContext.prototype, "addedReasonCodeLines", {
            get: function () {
                return this._addedReasonCodeLines;
            },
            enumerable: true,
            configurable: true
        });
        ReasonCodesInternalContext.prototype.processAndAddReasonCodeLines = function (processedReasonCodes, addedReasonCodeLines) {
            this._processedReasonCodes = this._processedReasonCodes.concat(processedReasonCodes);
            this._addedReasonCodeLines = this._addedReasonCodeLines.concat(addedReasonCodeLines);
        };
        ReasonCodesInternalContext.prototype.containsReasonCode = function (reasonCode) {
            return !Commerce.ObjectExtensions.isNullOrUndefined(reasonCode) && this._addedReasonCodeLines.some(function (rcl) {
                return rcl.ReasonCodeId === reasonCode.ReasonCodeId;
            });
        };
        ReasonCodesInternalContext.prototype.deleteInternalState = function () {
            delete this._addedReasonCodeLines;
            delete this._processedReasonCodes;
        };
        return ReasonCodesInternalContext;
    }());
    var ReasonCodesHelper = (function () {
        function ReasonCodesHelper() {
        }
        ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue = function (context, asyncAction, sourceType, isManualReturn) {
            var _this = this;
            if (sourceType === void 0) { sourceType = undefined; }
            if (isManualReturn === void 0) { isManualReturn = false; }
            var internalContext = new ReasonCodesInternalContext(context);
            var asyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.ObjectExtensions.isNullOrUndefined(sourceType)) {
                asyncQueue.enqueue(function () {
                    var reasonCodeQueue = ReasonCodesHelper.getFunctionalityProfileReasonCodesAsyncQueue(internalContext, sourceType, isManualReturn);
                    return asyncQueue.cancelOn(reasonCodeQueue.run())
                        .done(function () {
                        Commerce.RetailLogger.helpersReasonCodesHelperGetFunctionalityProfileReasonCodesComplete();
                    });
                });
            }
            asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(_this.handleRequiredReasonCodesInternalAsync(internalContext, asyncAction));
            });
            return asyncQueue;
        };
        ReasonCodesHelper.handleRequiredReasonCodesByReasonCodeIdAsyncQueue = function (context, asyncAction, reasonCodeId) {
            var _this = this;
            var internalContext = new ReasonCodesInternalContext(context);
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(ReasonCodesHelper.getReasonCodeLinesByReasonCodeIdAsyncQueue(internalContext, reasonCodeId).run());
            }).enqueue(function () {
                return asyncQueue.cancelOn(_this.handleRequiredReasonCodesInternalAsync(internalContext, asyncAction));
            });
            return asyncQueue;
        };
        ReasonCodesHelper.handleRequiredReasonCodesInternalAsync = function (internalContext, asyncAction) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.ObjectExtensions.isNullOrUndefined(asyncAction)) {
                asyncQueue.enqueue(function () {
                    var result = ReasonCodesHelper.getReasonCodesFromAsyncActionAsyncQueue(internalContext, asyncAction).run();
                    return asyncQueue.cancelOn(result)
                        .done(function () {
                        Commerce.RetailLogger.helpersReasonCodesHelperGetAllRequiredReasonCodesComplete();
                    });
                });
            }
            return asyncQueue.enqueue(function () {
                var result = ReasonCodesHelper.handleTriggeredReasonSubCodesAsyncQueue(internalContext).run();
                internalContext.deleteInternalState();
                return asyncQueue.cancelOn(result);
            }).run();
        };
        ReasonCodesHelper.getReasonCodesFromAsyncActionAsyncQueue = function (context, asyncAction) {
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var result = asyncAction(context.reasonCodesContext);
                if (Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return result.recoverOnFailure(function (errors) {
                    var retryQueueResult = ReasonCodesHelper.retryOnRequiredReasonCodesAsyncQueue(Commerce.ArrayExtensions.firstOrUndefined(errors), context, function () { return ReasonCodesHelper.getReasonCodesFromAsyncActionAsyncQueue(context, asyncAction); }).run();
                    return asyncQueue.cancelOn(retryQueueResult);
                });
            });
            return asyncQueue;
        };
        ReasonCodesHelper.retryOnRequiredReasonCodesAsyncQueue = function (error, context, retryFunction) {
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var reasonCodesQueue = ReasonCodesHelper.getReasonCodesFromErrorAsyncQueue(error, context);
                return asyncQueue.cancelOn(reasonCodesQueue.run());
            }).enqueue(function () {
                if (retryFunction) {
                    var retryQueue = retryFunction();
                    return asyncQueue.cancelOn(retryQueue.run());
                }
                return null;
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getReasonCodesFromErrorAsyncQueue = function (error, context) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (Commerce.ObjectExtensions.isNullOrUndefined(error.commerceException)
                || !(error.commerceException instanceof Commerce.Proxy.Entities.MissingRequiredReasonCodeExceptionClass)) {
                asyncQueue.enqueue(function () { return Commerce.VoidAsyncResult.createRejected([error]); });
                return asyncQueue;
            }
            var missingRequiredReasonCodeException = error.commerceException;
            var requiredReasonCodes = missingRequiredReasonCodeException.RequiredReasonCodes;
            var reasonCodeRequirements = missingRequiredReasonCodeException.ReasonCodeRequirements;
            var requiredReasonCodeIds = missingRequiredReasonCodeException.TransactionRequiredReasonCodeIds;
            asyncQueue.enqueue(function () {
                var reasonCodeQueue = ReasonCodesHelper.getReasonCodesFromRequirementsAsyncQueue(context, requiredReasonCodes, requiredReasonCodeIds, reasonCodeRequirements);
                return asyncQueue.cancelOn(reasonCodeQueue.run());
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getReasonCodesFromRequirementsAsyncQueue = function (context, requiredReasonCodes, requiredReasonCodeIds, reasonCodeRequirements) {
            var reasonCodeQueue = new Commerce.AsyncQueue();
            reasonCodeQueue.enqueue(function () {
                var transactionContext;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(context.cartContext)) {
                    transactionContext = context.cartContext;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(context.nonSalesTransactionContext)) {
                    transactionContext = context.nonSalesTransactionContext;
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(context.dropAndDeclareTransactionContext)) {
                    transactionContext = context.dropAndDeclareTransactionContext;
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(transactionContext)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var reasonCodes = ReasonCodesHelper.getRequiredReasonCodesForTransaction(requiredReasonCodes, requiredReasonCodeIds, transactionContext.container);
                var transactionQueue = ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, transactionContext, reasonCodes, true);
                return reasonCodeQueue.cancelOn(transactionQueue.run())
                    .done(function () {
                    Commerce.RetailLogger.helpersReasonCodesHelperGetCartReasonCodeLinesFinished();
                }).fail(function (errors) {
                    Commerce.RetailLogger.helpersReasonCodesHelperGetCartReasonCodeLinesFailure(Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                });
            }).enqueue(function () {
                var cartLineQueue = ReasonCodesHelper.getRequiredReasonCodesForCartLinesAsyncQueue(context, requiredReasonCodes, reasonCodeRequirements, context.cartLineContexts);
                return reasonCodeQueue.cancelOn(cartLineQueue.run());
            }).enqueue(function () {
                var tenderLineQueue = ReasonCodesHelper.getRequiredReasonCodesForTenderLinesAsyncQueue(context, requiredReasonCodes, reasonCodeRequirements, context.tenderLineContexts);
                return reasonCodeQueue.cancelOn(tenderLineQueue.run());
            }).enqueue(function () {
                var affiliationLineQueue = ReasonCodesHelper.getRequiredReasonCodesForAffiliationLinesAsyncQueue(context, requiredReasonCodes, reasonCodeRequirements, context.affiliationLineContexts);
                return reasonCodeQueue.cancelOn(affiliationLineQueue.run());
            });
            return reasonCodeQueue;
        };
        ReasonCodesHelper.getRequiredReasonCodesForCartLinesAsyncQueue = function (context, requiredReasonCodes, reasonCodeRequirements, cartLineContexts) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.ArrayExtensions.hasElements(cartLineContexts)) {
                return asyncQueue;
            }
            cartLineContexts.forEach(function (cartLineContext) {
                var reasonCodes = ReasonCodesHelper.getRequiredReasonCodesForCartLine(requiredReasonCodes, reasonCodeRequirements, cartLineContext);
                if (Commerce.ArrayExtensions.hasElements(reasonCodes)) {
                    asyncQueue.enqueue(function () {
                        var reasonCodeQueue = ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, cartLineContext, reasonCodes, true);
                        return asyncQueue.cancelOn(reasonCodeQueue.run())
                            .done(function () {
                            Commerce.RetailLogger.helpersReasonCodesHelperGetCartLineReasonCodeLinesFinished();
                        }).fail(function (errors) {
                            Commerce.RetailLogger.helpersReasonCodesHelperGetCartLineReasonCodeLinesFailure(Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        });
                    });
                }
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getRequiredReasonCodesForTenderLinesAsyncQueue = function (context, requiredReasonCodes, reasonCodeRequirements, tenderLineContexts) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.ArrayExtensions.hasElements(tenderLineContexts)) {
                return asyncQueue;
            }
            tenderLineContexts.forEach(function (tenderLineContext) {
                var reasonCodes = ReasonCodesHelper.getRequiredReasonCodesForTenderLine(requiredReasonCodes, reasonCodeRequirements, tenderLineContext);
                if (Commerce.ArrayExtensions.hasElements(reasonCodes)) {
                    asyncQueue.enqueue(function () {
                        var reasonCodeQueue = ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, tenderLineContext, reasonCodes, true);
                        return asyncQueue.cancelOn(reasonCodeQueue.run())
                            .done(function () {
                            Commerce.RetailLogger.helpersReasonCodesHelperGetTenderLineReasonCodeLinesFinished();
                        }).fail(function (errors) {
                            Commerce.RetailLogger.helpersReasonCodesHelperGetTenderLineReasonCodeLinesFailure(Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        });
                    });
                }
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getRequiredReasonCodesForAffiliationLinesAsyncQueue = function (context, requiredReasonCodes, reasonCodeRequirements, affiliationLineContexts) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.ArrayExtensions.hasElements(affiliationLineContexts)) {
                return asyncQueue;
            }
            affiliationLineContexts.forEach(function (affiliationLineContext) {
                var reasonCodes = ReasonCodesHelper.getRequiredReasonCodesForAffiliationLine(requiredReasonCodes, reasonCodeRequirements, affiliationLineContext);
                if (Commerce.ArrayExtensions.hasElements(reasonCodes)) {
                    asyncQueue.enqueue(function () {
                        var reasonCodeQueue = ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, affiliationLineContext, reasonCodes, true);
                        return asyncQueue.cancelOn(reasonCodeQueue.run())
                            .done(function () {
                            Commerce.RetailLogger.helpersReasonCodesHelperGetAffiliationLineReasonCodeLinesFinished();
                        }).fail(function (errors) {
                            Commerce.RetailLogger.helpersReasonCodesHelperGetAffiliationLineReasonCodeLinesFailure(Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        });
                    });
                }
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getFunctionalityProfileReasonCodesAsyncQueue = function (context, sourceType, isManualReturn) {
            if (isManualReturn === void 0) { isManualReturn = false; }
            var asyncQueue = new Commerce.AsyncQueue();
            var reasonCodeId = ReasonCodesHelper.getReasonCodeIdFromSourceType(sourceType);
            var targetContext = ReasonCodesHelper.getTargetContextFromSourceType(sourceType);
            if ((targetContext === TargetContext.Cart && Commerce.ObjectExtensions.isNullOrUndefined(context.cartContext))
                || (targetContext === TargetContext.CartLine && !Commerce.ArrayExtensions.hasElements(context.cartLineContexts))) {
                return asyncQueue;
            }
            var reasonCodes = [];
            if (Commerce.Proxy.Entities.CartType.CustomerOrder === Commerce.Session.instance.cart.CartTypeValue && isManualReturn) {
                asyncQueue.enqueue(function () {
                    return Commerce.ApplicationContext.Instance.returnOrderReasonCodesAsCompositeSubcodesAsync.value
                        .done(function (reasonCode) { reasonCodes = [reasonCode]; });
                });
            }
            else if (!Commerce.StringExtensions.isNullOrWhitespace(reasonCodeId)) {
                asyncQueue.enqueue(function () {
                    var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                    return salesOrderManager.getReasonCodesByIdAsync(reasonCodeId)
                        .done(function (result) { reasonCodes = result; });
                });
            }
            else {
                return asyncQueue;
            }
            asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(ReasonCodesHelper.getReasonCodeLinesByTargetContextAsync(context, targetContext, reasonCodes))
                    .done(function () {
                    Commerce.RetailLogger.helpersReasonCodesHelperGetReasonCodesLinesByReasonCodeIdFinished();
                }).fail(function (errors) {
                    Commerce.RetailLogger.helpersReasonCodesHelperGetReasonCodesLinesByReasonCodeIdFailure(Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                });
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getReasonCodeLinesByReasonCodeIdAsyncQueue = function (context, reasonCodeId) {
            var targetContext = ReasonCodesHelper.getTargetContextFromReasonCodeContext(context);
            var asyncQueue = new Commerce.AsyncQueue();
            var reasonCodes = [];
            asyncQueue.enqueue(function () {
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                return salesOrderManager.getReasonCodesByIdAsync(reasonCodeId)
                    .done(function (result) { reasonCodes = result; });
            });
            asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(ReasonCodesHelper.getReasonCodeLinesByTargetContextAsync(context, targetContext, reasonCodes))
                    .done(function () {
                    Commerce.RetailLogger.helpersReasonCodesHelperGetReasonCodesLinesByReasonCodeIdFinished();
                }).fail(function (errors) {
                    Commerce.RetailLogger.helpersReasonCodesHelperGetReasonCodesLinesByReasonCodeIdFailure(Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                });
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getReasonCodeLinesByTargetContextAsync = function (context, targetContext, reasonCodes) {
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var reasonCodesQueue;
                if (targetContext === TargetContext.Cart) {
                    reasonCodesQueue = ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, context.cartContext, reasonCodes, false);
                }
                else if (targetContext === TargetContext.CartLine) {
                    reasonCodesQueue = new Commerce.AsyncQueue();
                    context.cartLineContexts.forEach(function (line) {
                        reasonCodesQueue.enqueue(function () {
                            var cartLineQueue = ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, line, reasonCodes, false);
                            return reasonCodesQueue.cancelOn(cartLineQueue.run());
                        });
                    });
                }
                else if (targetContext === TargetContext.DropAndDeclareTransaction) {
                    reasonCodesQueue =
                        ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, context.dropAndDeclareTransactionContext, reasonCodes, false);
                }
                else if (targetContext === TargetContext.NonSalesTransaction) {
                    reasonCodesQueue =
                        ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, context.nonSalesTransactionContext, reasonCodes, false);
                }
                else if (targetContext === TargetContext.OrderFulfillment) {
                    reasonCodesQueue =
                        ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, context.infoCodeNoTransactionContext, reasonCodes, false);
                }
                else if (targetContext === TargetContext.FiscalRegistrationResult) {
                    reasonCodesQueue =
                        ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, context.fiscalRegistrationResultContext, reasonCodes, false);
                }
                else if (targetContext === TargetContext.ChargeLine) {
                    reasonCodesQueue = new Commerce.AsyncQueue();
                    context.chargeLineContexts.forEach(function (charge) {
                        reasonCodesQueue.enqueue(function () {
                            var chargeLineQueue = ReasonCodesHelper.getReasonCodeLinesAsyncQueue(context, charge, reasonCodes, false);
                            return reasonCodesQueue.cancelOn(chargeLineQueue.run());
                        });
                    });
                }
                else {
                    reasonCodesQueue = new Commerce.AsyncQueue();
                }
                return asyncQueue.cancelOn(reasonCodesQueue.run());
            });
            return asyncQueue.run();
        };
        ReasonCodesHelper.getReasonCodeLinesAsyncQueue = function (context, containerContext, reasonCodes, skipFrequencyTest) {
            var asyncQueue = new Commerce.AsyncQueue();
            var processedReasonCodes = [];
            asyncQueue.enqueue(function () {
                var reasonCodeIds = Object.create(null);
                return ReasonCodesHelper.getLinkedReasonCodesForArrayQueue(reasonCodeIds, processedReasonCodes, reasonCodes, skipFrequencyTest).run();
            }).enqueue(function () {
                processedReasonCodes = Commerce.ArrayExtensions.distinct(processedReasonCodes, function (r1, r2) {
                    return r1.ReasonCodeId === r2.ReasonCodeId;
                }).filter(function (reasonCode) {
                    return !containerContext.hasAlreadyProcessed(reasonCode);
                });
                var reasonCodes = processedReasonCodes;
                var reasonCodeContainerAsCart;
                var containers = [];
                if (containerContext.targetContext === TargetContext.Cart) {
                    reasonCodeContainerAsCart = containerContext.container;
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(reasonCodeContainerAsCart) && reasonCodeContainerAsCart.Id !== Commerce.Session.instance.cart.Id) {
                    containers = [containerContext.container];
                }
                else {
                    containers = [Commerce.Session.instance.cart]
                        .concat(Commerce.Session.instance.cart.AffiliationLines)
                        .concat(Commerce.Session.instance.cart.CartLines)
                        .concat(Commerce.Session.instance.cart.TenderLines);
                }
                if (!Commerce.ArrayExtensions.hasElements(reasonCodes)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var asyncResult = new Commerce.AsyncResult();
                var canceled = false;
                var errors = [];
                Commerce.Utilities.AsyncExecutionHelper.forEachAsync(reasonCodes, function (reasonCode, next, index) {
                    var skipReasonCode = canceled || Commerce.ArrayExtensions.hasElements(errors)
                        || (reasonCode.OncePerTransaction
                            && (ReasonCodesHelper.containsReasonCode(reasonCode, containers) || context.containsReasonCode(reasonCode)));
                    if (skipReasonCode) {
                        next();
                        return;
                    }
                    var triggeredReasonCodes = [];
                    var activityQueue = new Commerce.AsyncQueue();
                    var activityContext = {
                        reasonCodes: [reasonCode],
                        reasonCodesContainer: containerContext.container
                    };
                    var activity = new Commerce.Activities.GetReasonCodeLinesActivity(activityContext);
                    activityQueue.enqueue(function () {
                        return activity.execute().done(function () {
                            if (!activity.response) {
                                activityQueue.cancel();
                                return;
                            }
                        });
                    }).enqueue(function () {
                        var addedReasonCodeLine = activity.response.reasonCodeLines[0];
                        if (containerContext.container) {
                            context.processAndAddReasonCodeLines(processedReasonCodes, [addedReasonCodeLine]);
                            containerContext.processAndAddReasonCodeLines(processedReasonCodes, [addedReasonCodeLine]);
                        }
                        var reasonSubCode = Commerce.ArrayExtensions.firstOrUndefined(reasonCode.ReasonSubCodes, function (rsc) {
                            return (rsc.SubCodeId === addedReasonCodeLine.SubReasonCodeId)
                                && (rsc.TriggerFunctionTypeValue === Commerce.Proxy.Entities.TriggerFunctionType.InfoCode)
                                && (!Commerce.StringExtensions.isNullOrWhitespace(rsc.TriggerCode));
                        });
                        if (reasonSubCode) {
                            var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                            return salesOrderManager.getReasonCodesByIdAsync(reasonSubCode.TriggerCode).done(function (result) {
                                triggeredReasonCodes = result.filter(function (r) { return !containerContext.hasAlreadyProcessed(r); });
                            });
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        if (Commerce.ArrayExtensions.hasElements(triggeredReasonCodes)) {
                            var reasonCodeIds = Object.create(null);
                            var linkedReasonCodes_1 = [];
                            return ReasonCodesHelper.getLinkedReasonCodesForArrayQueue(reasonCodeIds, linkedReasonCodes_1, triggeredReasonCodes, skipFrequencyTest)
                                .run().done(function () {
                                reasonCodes.splice.apply(reasonCodes, [index + 1, 0].concat(linkedReasonCodes_1));
                            });
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).run()
                        .done(function (result) { canceled = result.canceled; })
                        .fail(function (activityQueueErrors) { errors = activityQueueErrors; })
                        .always(function () { next(); });
                }, function () {
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        asyncResult.reject(errors);
                    }
                    else {
                        asyncResult.resolve({ canceled: canceled });
                    }
                });
                return asyncQueue.cancelOn(asyncResult);
            });
            return asyncQueue;
        };
        ReasonCodesHelper.containsReasonCode = function (reasonCode, containers) {
            return containers.filter(function (c) { return !Commerce.ObjectExtensions.isNullOrUndefined(c) && Commerce.ArrayExtensions.hasElements(c.ReasonCodeLines); })
                .some(function (c) {
                return c.ReasonCodeLines.some(function (rcl) { return rcl.ReasonCodeId === reasonCode.ReasonCodeId; });
            });
        };
        ReasonCodesHelper.getReasonCodeIdFromSourceType = function (sourceType) {
            var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
            if (Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration)) {
                return undefined;
            }
            switch (sourceType) {
                case Commerce.Proxy.Entities.ReasonCodeSourceType.AddSalesperson:
                    return deviceConfiguration.SalesPerson;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.EndOfTransaction:
                    return deviceConfiguration.EndOfTransaction;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ItemDiscount:
                    return deviceConfiguration.ProductDiscount;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ItemNotOnFile:
                    return deviceConfiguration.ItemNotOnFile;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.LineItemTaxChange:
                    return deviceConfiguration.LineItemTaxChange;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.Markup:
                    return deviceConfiguration.MarkUp;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.NegativeAdjustment:
                    return undefined;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.NfcEContingencyModeEnabled:
                    return deviceConfiguration.NfcEContingencyModeEnabled;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.NfcEVoided:
                    return deviceConfiguration.NfcEVoided;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.None:
                    return undefined;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.OpenDrawer:
                    return deviceConfiguration.OpenDrawer;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.OverridePrice:
                    return deviceConfiguration.OverridePrice;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ReturnItem:
                    return deviceConfiguration.ReturnProduct;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ReturnTransaction:
                    return deviceConfiguration.RefundSale;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.SerialNumber:
                    return deviceConfiguration.SerialNumber;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.StartOfTransaction:
                    return deviceConfiguration.StartOfTransaction;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.TenderDeclaration:
                    return Commerce.StringExtensions.EMPTY;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.TotalDiscount:
                    return deviceConfiguration.DiscountAtTotal;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.TransactionTaxChange:
                    return deviceConfiguration.TransactionTaxChange;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.VoidItem:
                    return deviceConfiguration.VoidItem;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.VoidPayment:
                    return deviceConfiguration.VoidPayment;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.VoidTransaction:
                    return deviceConfiguration.VoidTransaction;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.OrderFulfillment:
                    return deviceConfiguration.RejectOrderFulfillment;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ManualCharge:
                    return deviceConfiguration.ChargeOverrideReasonCode;
                default:
                    return undefined;
            }
        };
        ReasonCodesHelper.getTargetContextFromSourceType = function (sourceType) {
            switch (sourceType) {
                case Commerce.Proxy.Entities.ReasonCodeSourceType.AddSalesperson:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.EndOfTransaction:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ItemNotOnFile:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.NegativeAdjustment:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.StartOfTransaction:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.TotalDiscount:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.TransactionTaxChange:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.VoidPayment:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.VoidTransaction:
                    return TargetContext.Cart;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ItemDiscount:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.LineItemTaxChange:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.Markup:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.OverridePrice:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ReturnTransaction:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ReturnItem:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.SerialNumber:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.VoidItem:
                    return TargetContext.CartLine;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.TenderDeclaration:
                    return TargetContext.DropAndDeclareTransaction;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.OpenDrawer:
                    return TargetContext.NonSalesTransaction;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.OrderFulfillment:
                    return TargetContext.OrderFulfillment;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.ManualCharge:
                    return TargetContext.ChargeLine;
                case Commerce.Proxy.Entities.ReasonCodeSourceType.NfcEContingencyModeEnabled:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.NfcEVoided:
                case Commerce.Proxy.Entities.ReasonCodeSourceType.None:
                    return TargetContext.Unknown;
                default:
                    return TargetContext.Unknown;
            }
        };
        ReasonCodesHelper.getTargetContextFromReasonCodeContext = function (context) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(context.fiscalRegistrationResultContext)) {
                return TargetContext.FiscalRegistrationResult;
            }
            else {
                return TargetContext.Unknown;
            }
        };
        ReasonCodesHelper.getRequiredReasonCodesForTransaction = function (requiredReasonCodes, requiredReasonCodeIds, transactionContainer) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(transactionContainer)) {
                var filteredRequiredReasonCodes = ReasonCodesHelper.filterReasonCodes(requiredReasonCodes, requiredReasonCodeIds);
                Commerce.RetailLogger.helpersReasonCodesHelperCartReasonCodesFound();
                return ReasonCodesHelper.filterUniqueReasonCodes(filteredRequiredReasonCodes, transactionContainer.ReasonCodeLines);
            }
            return [];
        };
        ReasonCodesHelper.getRequiredReasonCodesForCartLine = function (requiredReasonCodes, reasonCodeRequirements, cartLineContext) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLineContext) && Commerce.ArrayExtensions.hasElements(requiredReasonCodes)) {
                var reasonCodeIds = ReasonCodesHelper.getRequiredReasonCodeIds(reasonCodeRequirements, cartLineContext.container.ProductId.toString(), Commerce.Proxy.Entities.ReasonCodeTableRefType.Item);
                var filteredRequiredReasonCodes = ReasonCodesHelper.filterReasonCodes(requiredReasonCodes, reasonCodeIds);
                Commerce.RetailLogger.helpersReasonCodesHelperCartLineReasonCodesFound();
                return ReasonCodesHelper.filterUniqueReasonCodes(filteredRequiredReasonCodes, cartLineContext.container.ReasonCodeLines);
            }
            return [];
        };
        ReasonCodesHelper.getRequiredReasonCodesForTenderLine = function (requiredReasonCodes, reasonCodeRequirements, tenderLineContext) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderLineContext) && Commerce.ArrayExtensions.hasElements(requiredReasonCodes)) {
                var reasonCodeIds = ReasonCodesHelper.getRequiredReasonCodeIds(reasonCodeRequirements, tenderLineContext.container.TenderTypeId, Commerce.Proxy.Entities.ReasonCodeTableRefType.Tender);
                var filteredRequiredReasonCodes = ReasonCodesHelper.filterReasonCodes(requiredReasonCodes, reasonCodeIds);
                Commerce.RetailLogger.helpersReasonCodesHelperTenderLineReasonCodesFound();
                return ReasonCodesHelper.filterUniqueReasonCodes(filteredRequiredReasonCodes, tenderLineContext.container.ReasonCodeLines);
            }
            return [];
        };
        ReasonCodesHelper.getRequiredReasonCodesForAffiliationLine = function (requiredReasonCodes, reasonCodeRequirements, affiliationLineContext) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(affiliationLineContext) && Commerce.ArrayExtensions.hasElements(requiredReasonCodes)) {
                var reasonCodeIds = ReasonCodesHelper.getRequiredReasonCodeIds(reasonCodeRequirements, affiliationLineContext.container.AffiliationId.toString(), Commerce.Proxy.Entities.ReasonCodeTableRefType.Affiliation);
                var filteredRequiredReasonCodes = ReasonCodesHelper.filterReasonCodes(requiredReasonCodes, reasonCodeIds);
                Commerce.RetailLogger.helpersReasonCodesHelperAffiliationLineReasonCodesFound();
                return ReasonCodesHelper.filterUniqueReasonCodes(filteredRequiredReasonCodes, affiliationLineContext.container.ReasonCodeLines);
            }
            return [];
        };
        ReasonCodesHelper.getRequiredReasonCodeIds = function (requirements, sourceId, tableRefType) {
            return requirements.filter(function (value) {
                return value.SourceId === sourceId && value.TableRefTypeValue === tableRefType;
            }).map(function (value) { return value.ReasonCodeId; });
        };
        ReasonCodesHelper.filterReasonCodes = function (reasonCodes, reasonCodeIds) {
            return reasonCodes.filter(function (value) {
                for (var i = 0; i < reasonCodeIds.length; i++) {
                    if (value.ReasonCodeId === reasonCodeIds[i]) {
                        return true;
                    }
                }
                return false;
            });
        };
        ReasonCodesHelper.filterUniqueReasonCodes = function (reasonCodes, presentReasonCodes) {
            return reasonCodes.filter(function (value) {
                if (Commerce.ArrayExtensions.hasElements(presentReasonCodes)) {
                    for (var i = 0; i < presentReasonCodes.length; i++) {
                        if (value.ReasonCodeId === presentReasonCodes[i].ReasonCodeId) {
                            return false;
                        }
                    }
                }
                return true;
            });
        };
        ReasonCodesHelper.getLinkedReasonCodesForArrayQueue = function (reasonCodeIds, reasonCodes, reasonCodesToProcess, skipFrequencyTest) {
            if (skipFrequencyTest === void 0) { skipFrequencyTest = false; }
            var asyncQueue = new Commerce.AsyncQueue();
            reasonCodesToProcess.forEach(function (r) {
                if (reasonCodeIds[r.ReasonCodeId] !== undefined) {
                    return;
                }
                var randomValue = Math.random() * 100;
                var shouldAsk = skipFrequencyTest
                    || Commerce.ObjectExtensions.isNullOrUndefined(r.RandomFactor)
                    || (r.RandomFactor === 0)
                    || (r.RandomFactor > randomValue);
                if (shouldAsk) {
                    asyncQueue.enqueue(function () {
                        return ReasonCodesHelper.getLinkedReasonCodesQueue(reasonCodeIds, reasonCodes, r).run();
                    });
                }
            });
            return asyncQueue;
        };
        ReasonCodesHelper.getLinkedReasonCodesQueue = function (reasonCodeIds, reasonCodes, reasonCodeToProcess) {
            var asyncQueue = new Commerce.AsyncQueue();
            reasonCodeIds[reasonCodeToProcess.ReasonCodeId] = reasonCodeToProcess.ReasonCodeId;
            reasonCodes.push(reasonCodeToProcess);
            if (Commerce.StringExtensions.isNullOrWhitespace(reasonCodeToProcess.LinkedReasonCodeId)) {
                return asyncQueue;
            }
            var linkedReasonCodes = [];
            asyncQueue.enqueue(function () {
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                return salesOrderManager.getReasonCodesByIdAsync(reasonCodeToProcess.LinkedReasonCodeId)
                    .done(function (result) { linkedReasonCodes = result; });
            }).enqueue(function () {
                if (!Commerce.ArrayExtensions.hasElements(linkedReasonCodes)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                return ReasonCodesHelper.getLinkedReasonCodesForArrayQueue(reasonCodeIds, reasonCodes, linkedReasonCodes).run();
            });
            return asyncQueue;
        };
        ReasonCodesHelper.handleTriggeredReasonSubCodesAsyncQueue = function (context) {
            var reasonSubCodesQueue = new Commerce.AsyncQueue();
            if (Commerce.ArrayExtensions.hasElements(context.processedReasonCodes)) {
                var reasonSubCodes = ReasonCodesHelper.getTriggeredReasonSubCodesFromContext(context);
                reasonSubCodes.forEach(function (r) {
                    reasonSubCodesQueue.enqueue(function () {
                        return ReasonCodesHelper.triggerItemReasonSubCodeAsyncQueue(r).run()
                            .done(function () {
                            Commerce.RetailLogger.helpersReasonCodesHelperTriggerReasonSubCodeFinished(r.SubCodeId);
                        }).fail(function (errors) {
                            Commerce.RetailLogger.helpersReasonCodesHelperTriggerReasonSubCodeFailure(r.SubCodeId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        });
                    });
                });
            }
            return reasonSubCodesQueue;
        };
        ReasonCodesHelper.getTriggeredReasonSubCodesFromContext = function (context) {
            var reasonCodesById = Object.create(null);
            context.processedReasonCodes.forEach(function (r) { return reasonCodesById[r.ReasonCodeId] = r; });
            var reasonSubCodes = [];
            context.addedReasonCodeLines.forEach(function (rcl) {
                if (Commerce.StringExtensions.isNullOrWhitespace(rcl.SubReasonCodeId)) {
                    return;
                }
                var subCode = Commerce.ArrayExtensions.firstOrUndefined(reasonCodesById[rcl.ReasonCodeId].ReasonSubCodes, function (rsc) { return rsc.SubCodeId === rcl.SubReasonCodeId; });
                reasonSubCodes.push(subCode);
            });
            return reasonSubCodes;
        };
        ReasonCodesHelper.triggerItemReasonSubCodeAsyncQueue = function (reasonSubCode) {
            var asyncQueue = new Commerce.AsyncQueue();
            if (reasonSubCode.TriggerFunctionTypeValue !== Commerce.Proxy.Entities.TriggerFunctionType.Item
                || Commerce.StringExtensions.isNullOrWhitespace(reasonSubCode.TriggerCode)) {
                return asyncQueue;
            }
            var operationsManager = Commerce.Operations.OperationsManager.instance;
            var oldCartLines = Commerce.Session.instance.cart.CartLines;
            asyncQueue.enqueue(function () {
                var options = { productSaleDetails: [{ productId: reasonSubCode.ProductId, quantity: 1 }] };
                var result = operationsManager.runOperation(Commerce.Operations.RetailOperation.ItemSale, options);
                return asyncQueue.cancelOn(result);
            }).enqueue(function () {
                var cartLines = Commerce.CartLineHelper.getModifiedCartLines(oldCartLines, Commerce.Session.instance.cart.CartLines);
                var cartLine = Commerce.ArrayExtensions.firstOrUndefined(cartLines, function (c) { return c.ItemId === reasonSubCode.TriggerCode; });
                if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var result;
                switch (reasonSubCode.PriceTypeValue) {
                    case Commerce.Proxy.Entities.PriceType.Percent:
                        var lineDiscountOptions = {
                            cartLineDiscounts: [{ cartLine: cartLine, discountValue: reasonSubCode.AmountPercent }]
                        };
                        result = operationsManager.runOperation(Commerce.Operations.RetailOperation.LineDiscountPercent, lineDiscountOptions);
                        break;
                    case Commerce.Proxy.Entities.PriceType.Price:
                        var priceOverrideOptions = {
                            cartLinePrices: [{ cartLine: cartLine, price: reasonSubCode.AmountPercent }]
                        };
                        result = operationsManager.runOperation(Commerce.Operations.RetailOperation.PriceOverride, priceOverrideOptions);
                        break;
                }
                return asyncQueue.cancelOn(result);
            });
            return asyncQueue;
        };
        return ReasonCodesHelper;
    }());
    Commerce.ReasonCodesHelper = ReasonCodesHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ReceiptHelper = (function () {
        function ReceiptHelper() {
        }
        ReceiptHelper.convertToHtml = function (receiptText) {
            if (Commerce.StringExtensions.isNullOrWhitespace(receiptText)) {
                return Commerce.StringExtensions.EMPTY;
            }
            receiptText = ReceiptHelper.translateReceiptContent(receiptText);
            var endOfBoldMarkerIndex = -1;
            while (true) {
                var boldMarkerIndex = receiptText.indexOf(ReceiptHelper.TEXT_BOLD_MARKER, endOfBoldMarkerIndex + 1);
                if (boldMarkerIndex < 0) {
                    break;
                }
                var endOfLineMarkerIndex = receiptText.indexOf(ReceiptHelper.TEXT_NEW_LINE_MARKER, boldMarkerIndex);
                var nextStyleMarkerIndex = receiptText.indexOf(ReceiptHelper.TEXT_ESCAPE_MARKER, boldMarkerIndex + 1);
                endOfBoldMarkerIndex = Math.min(endOfLineMarkerIndex, nextStyleMarkerIndex);
                var entireBoldItem = receiptText.substring(boldMarkerIndex + ReceiptHelper.TEXT_BOLD_MARKER.length, endOfBoldMarkerIndex);
                var emptySpaces = Array(entireBoldItem.length + 1).join(" ");
                receiptText = (receiptText.substring(0, endOfBoldMarkerIndex) + emptySpaces + receiptText.substring(endOfBoldMarkerIndex));
            }
            while (true) {
                var boldMarkerIndex = receiptText.indexOf(ReceiptHelper.TEXT_DOUBLEZISE_BOLD_MARKER, endOfBoldMarkerIndex + 1);
                if (boldMarkerIndex < 0) {
                    break;
                }
                var endOfLineMarkerIndex = receiptText.indexOf(ReceiptHelper.TEXT_NEW_LINE_MARKER, boldMarkerIndex);
                var nextStyleMarkerIndex = receiptText.indexOf(ReceiptHelper.TEXT_ESCAPE_MARKER, boldMarkerIndex + 1);
                endOfBoldMarkerIndex = Math.min(endOfLineMarkerIndex, nextStyleMarkerIndex);
                var entireBoldItem = receiptText.substring(boldMarkerIndex + ReceiptHelper.TEXT_DOUBLEZISE_BOLD_MARKER.length, endOfBoldMarkerIndex);
                var emptySpaces = Array(entireBoldItem.length + 1).join(" ");
                receiptText = (receiptText.substring(0, endOfBoldMarkerIndex) + emptySpaces + receiptText.substring(endOfBoldMarkerIndex));
            }
            var rawReceiptText = receiptText.replace(/<L:(.+?)>/g, "").replace(/<L>/g, "");
            var formatedReceiptText = Commerce.EscapingHelper
                .escapeHtml(rawReceiptText.replace(/&#x1B;\|1C|&#x1B;\|2C|&#x1B;\|3C|&#x1B;\|4C/g, ""))
                .replace(/\r\n/g, ReceiptHelper.HTML_NEW_LINE_TAG);
            return formatedReceiptText;
        };
        ReceiptHelper.translateReceiptContent = function (receiptText) {
            var localizationStringRegEx = new RegExp("<F:(.+?)>");
            var transactionStringRegEx = new RegExp("<T:(.+?)>");
            var match = localizationStringRegEx.exec(receiptText);
            while (match) {
                var translatedString = Commerce.ViewModelAdapter.getResourceString(match[1]);
                var emptySpaces = Array(Math.abs(match[0].length - translatedString.length) + 1).join(" ");
                if (match[0].length >= translatedString.length) {
                    receiptText = receiptText.replace(match[0], translatedString + emptySpaces);
                }
                else {
                    receiptText = receiptText.replace(match[0] + emptySpaces, match[0]);
                    receiptText = receiptText.replace(match[0], translatedString);
                }
                match = localizationStringRegEx.exec(receiptText);
            }
            var translationMatch = transactionStringRegEx.exec(receiptText);
            while (translationMatch) {
                receiptText = receiptText.replace(translationMatch[0], Commerce.ViewModelAdapter.getResourceString(translationMatch[1]));
                translationMatch = transactionStringRegEx.exec(receiptText);
            }
            return receiptText;
        };
        ReceiptHelper.canSalesOrderContainGiftReceipt = function (salesOrder) {
            return Commerce.ArrayExtensions.hasElements(salesOrder.SalesLines) &&
                salesOrder.SalesLines.some(function (salesLine) {
                    return !(salesLine.IsGiftCardLine || salesLine.IsVoided || salesLine.IsCustomerAccountDeposit
                        || salesLine.IsReturnByReceipt || salesLine.IsInvoiceLine)
                        && (salesLine.Quantity > 0 && salesLine.ItemId !== Commerce.StringExtensions.EMPTY);
                });
        };
        ReceiptHelper.canReceiptBePrinted = function (receipt) {
            var canBePrinted = false;
            if (receipt != null && Commerce.ArrayExtensions.hasElements(receipt.Printers)) {
                canBePrinted = !receipt.Printers.every(function (printer) {
                    return printer.PrintBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.Never;
                });
            }
            return canBePrinted;
        };
        ReceiptHelper.getPrintableReceipts = function (receipts) {
            var printableReceiptArray = [];
            if (Commerce.ArrayExtensions.hasElements(receipts)) {
                receipts.forEach(function (receipt) {
                    var printerList = [];
                    if (Commerce.ArrayExtensions.hasElements(receipt.Printers)) {
                        printerList = receipt.Printers;
                    }
                    printerList.forEach(function (printer) {
                        var printableReceipt = new Commerce.Proxy.Entities.PrintableReceipt(receipt, printer);
                        if (printableReceipt.shouldPrint) {
                            printableReceiptArray.push(printableReceipt);
                        }
                    });
                });
            }
            return printableReceiptArray;
        };
        ReceiptHelper.getSalesLinesForGiftReceipt = function (salesLines) {
            salesLines = Commerce.ArrayExtensions.hasElements(salesLines) ? salesLines : [];
            this.logSalesLinesForGiftReceipt(false, salesLines);
            var validSalesLines = salesLines.filter(function (salesLine) {
                return !salesLine.IsVoided && !salesLine.IsGiftCardLine && !salesLine.IsInvoiceLine && salesLine.Quantity > 0;
            });
            this.logSalesLinesForGiftReceipt(true, validSalesLines);
            return validSalesLines;
        };
        ReceiptHelper.logSalesLinesForGiftReceipt = function (filtered, salesLines) {
            var itemIds = [];
            salesLines.forEach(function (salesLine) {
                itemIds.push(!Commerce.StringExtensions.isNullOrWhitespace(salesLine.ItemId) ? salesLine.ItemId : Commerce.StringExtensions.EMPTY);
            });
            var itemIdsCsv = itemIds.join(", ");
            var occurance = filtered ? "AFTER" : "BEFORE";
            Commerce.RetailLogger.receiptHelperGetSalesLinesForGiftReceiptFilter(occurance, salesLines.length, itemIdsCsv);
        };
        ReceiptHelper.TEXT_ESCAPE_MARKER = "&#x1B;";
        ReceiptHelper.TEXT_BOLD_MARKER = ReceiptHelper.TEXT_ESCAPE_MARKER + "|2C";
        ReceiptHelper.TEXT_DOUBLEZISE_BOLD_MARKER = ReceiptHelper.TEXT_ESCAPE_MARKER + "|4C";
        ReceiptHelper.TEXT_NEW_LINE_MARKER = "\r\n";
        ReceiptHelper.HTML_NEW_LINE_TAG = "<br/>";
        return ReceiptHelper;
    }());
    Commerce.ReceiptHelper = ReceiptHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var SalesOrders;
    (function (SalesOrders) {
        "use strict";
        var SalesOrderHelper = (function () {
            function SalesOrderHelper() {
            }
            SalesOrderHelper.getChangeAmount = function (salesOrder) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                    return 0;
                }
                var changeAmount = Commerce.ArrayExtensions.sum(salesOrder.TenderLines, function (tenderLine) { return -1 * (tenderLine.Amount || 0); }, function (tenderLine) { return tenderLine.IsChangeLine; });
                return changeAmount;
            };
            SalesOrderHelper.getTotalAmountPaid = function (salesOrder) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder)) {
                    return 0;
                }
                var totalAmountPaid = salesOrder.AmountPaid + SalesOrderHelper.getChangeAmount(salesOrder);
                return Commerce.NumberExtensions.roundToNDigits(totalAmountPaid, Commerce.NumberExtensions.getDecimalPrecision());
            };
            return SalesOrderHelper;
        }());
        SalesOrders.SalesOrderHelper = SalesOrderHelper;
    })(SalesOrders = Commerce.SalesOrders || (Commerce.SalesOrders = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Utilities;
    (function (Utilities) {
        "use strict";
        var SalesRepresentativeHelper = (function () {
            function SalesRepresentativeHelper() {
            }
            SalesRepresentativeHelper.getSalesRepresentativeIdWhenAddingAnItemAsync = function (product) {
                var asyncResult = new Commerce.AsyncResult();
                var askForSalesRepMode = Commerce.ApplicationContext.Instance.deviceConfiguration.AskForSalesRepresentative;
                if (askForSalesRepMode === Commerce.Proxy.Entities.SalesRepPromptType.PromptOnCartCreation
                    && !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CommissionSalesGroup)) {
                    asyncResult.resolve(Commerce.Session.instance.cart.CommissionSalesGroup);
                }
                else if (askForSalesRepMode !== Commerce.Proxy.Entities.SalesRepPromptType.PromptOnCartLineCreation) {
                    asyncResult.resolve(null);
                }
                else {
                    SalesRepresentativeHelper._getSalesRepresentativeAsync(Commerce.Activities.GetSalesRepresentativeMode.Product, Commerce.ApplicationContext.Instance.deviceConfiguration.IsSalesRepRequired, product, Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart) ? null : Commerce.Session.instance.cart.CommissionSalesGroup).done(function (commissionSalesGroup) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroup)) {
                            asyncResult.resolve(null);
                        }
                        else {
                            asyncResult.resolve(commissionSalesGroup.GroupId);
                        }
                    }).fail(function (errors) {
                        if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.NO_SALES_REPRESENTATIVES_AVAILABLE) && (errors.length === 1)) {
                            asyncResult.resolve(null);
                        }
                        else {
                            asyncResult.reject(errors);
                        }
                    });
                }
                return asyncResult;
            };
            SalesRepresentativeHelper.getSalesRepresentativeIdWhenUpdatingACartLineAsync = function (cartLine) {
                var product = null;
                var defaultCommissionSalesGroup = null;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                    product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    defaultCommissionSalesGroup = cartLine.CommissionSalesGroup;
                }
                return SalesRepresentativeHelper._getSalesRepresentativeAsync(Commerce.Activities.GetSalesRepresentativeMode.Line, false, product, defaultCommissionSalesGroup).map(function (commissionSalesGroup) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroup)) {
                        return null;
                    }
                    else {
                        return commissionSalesGroup.GroupId;
                    }
                });
            };
            SalesRepresentativeHelper.getSalesRepresentativeIdWhenCreatingATransactionAsync = function () {
                var asyncResult = new Commerce.AsyncResult();
                var askForSalesRepMode = Commerce.ApplicationContext.Instance.deviceConfiguration.AskForSalesRepresentative;
                if (askForSalesRepMode === Commerce.Proxy.Entities.SalesRepPromptType.PromptOnCartCreation) {
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration.ShouldUseDefaultCommisionSalesGroup &&
                        !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.CurrentEmployee.DefaultCommissionSalesGroup)) {
                        asyncResult.resolve(Commerce.Session.instance.CurrentEmployee.DefaultCommissionSalesGroup);
                    }
                    else if (askForSalesRepMode !== Commerce.Proxy.Entities.SalesRepPromptType.PromptOnCartCreation
                        && askForSalesRepMode !== Commerce.Proxy.Entities.SalesRepPromptType.PromptOnCartLineCreation) {
                        asyncResult.resolve(null);
                    }
                    else {
                        SalesRepresentativeHelper._getSalesRepresentativeAsync(Commerce.Activities.GetSalesRepresentativeMode.Transaction, Commerce.ApplicationContext.Instance.deviceConfiguration.IsSalesRepRequired, null, null).done(function (commissionSalesGroup) {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroup)) {
                                asyncResult.resolve(null);
                            }
                            else {
                                asyncResult.resolve(commissionSalesGroup.GroupId);
                            }
                        }).fail(function (errors) {
                            if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.NO_SALES_REPRESENTATIVES_AVAILABLE) && (errors.length === 1)) {
                                asyncResult.resolve(null);
                            }
                            else {
                                asyncResult.reject(errors);
                            }
                        });
                    }
                }
                else {
                    asyncResult.resolve(null);
                }
                return asyncResult;
            };
            SalesRepresentativeHelper.getSalesRepresentativeIdWhenUpdatingATransactionAsync = function () {
                return SalesRepresentativeHelper._getSalesRepresentativeAsync(Commerce.Activities.GetSalesRepresentativeMode.Transaction, false, null, Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.cart) ? null : Commerce.Session.instance.cart.CommissionSalesGroup).map(function (commissionSalesGroup) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroup)) {
                        return null;
                    }
                    else {
                        return commissionSalesGroup.GroupId;
                    }
                });
            };
            SalesRepresentativeHelper._getSalesRepresentativeAsync = function (mode, isRequired, product, defaultCommissionSalesGroupId) {
                var asyncQueue = new Commerce.AsyncQueue();
                var salesRepresentative;
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    asyncQueue.cancelOn(Commerce.ApplicationContext.Instance.commissionSalesGroupsForDisplay.value)
                        .done(function (results) {
                        if (results.canceled) {
                            asyncResult.resolve();
                            return;
                        }
                        if (!Commerce.ArrayExtensions.hasElements(results.data)) {
                            asyncResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NO_SALES_REPRESENTATIVES_AVAILABLE)]);
                        }
                        else {
                            asyncResult.resolve();
                        }
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncResult;
                }).enqueue(function () {
                    var getSalesRepresentativeActivityContext = {
                        mode: mode,
                        allowCancel: !isRequired,
                        product: product,
                        currentSalesRepresentative: defaultCommissionSalesGroupId
                    };
                    var activity = new Commerce.Activities.GetSalesRepresentativeActivity(getSalesRepresentativeActivityContext);
                    return activity.execute().done(function () {
                        if (!activity.response) {
                            asyncQueue.cancel();
                        }
                        else {
                            salesRepresentative = activity.response.salesRepresentative;
                        }
                    });
                });
                return asyncQueue.run().map(function (result) {
                    if (result.canceled) {
                        return null;
                    }
                    return salesRepresentative;
                });
            };
            return SalesRepresentativeHelper;
        }());
        Utilities.SalesRepresentativeHelper = SalesRepresentativeHelper;
    })(Utilities = Commerce.Utilities || (Commerce.Utilities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SerializationHelpers = (function () {
        function SerializationHelpers() {
        }
        SerializationHelpers.isSystemLittleEndian = function () {
            if (Commerce.ObjectExtensions.isNullOrUndefined(SerializationHelpers._isLittleEndian)) {
                var b = new ArrayBuffer(4);
                var a = new Uint32Array(b);
                var c = new Uint8Array(b);
                a[0] = 0xdeadbeef;
                SerializationHelpers._isLittleEndian = (c[0] === 0xef);
            }
            return SerializationHelpers._isLittleEndian;
        };
        SerializationHelpers.toBase64String = function (byteArray) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(byteArray)) {
                return null;
            }
            var len = byteArray.byteLength;
            var byteCharacterArray = [];
            for (var i = 0; i < len; i++) {
                byteCharacterArray[i] = String.fromCharCode(byteArray[i]);
            }
            var byteString = byteCharacterArray.join("");
            var encodedString = window.btoa(byteString);
            return encodedString;
        };
        SerializationHelpers.fromBase64String = function (base64String) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(base64String)) {
                return null;
            }
            var decodedString = window.atob(base64String);
            var len = decodedString.length;
            var byteArray = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                byteArray[i] = decodedString[i].charCodeAt(0);
            }
            return byteArray;
        };
        SerializationHelpers.stringifyForOffline = function (value) {
            var result;
            if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                result = "null";
            }
            else if (Array.isArray(value)) {
                result = SerializationHelpers.stringifyArrayForOffline(value);
            }
            else if (Commerce.ObjectExtensions.isObject(value)) {
                result = SerializationHelpers.stringifyObjectForOffline(value);
            }
            else {
                result = JSON.stringify(value);
            }
            return result;
        };
        SerializationHelpers.stringifyObjectForOffline = function (obj) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(obj)) {
                return "null";
            }
            if (obj instanceof Date
                || (obj.hasOwnProperty(SerializationHelpers.EDMTYPE) && obj[SerializationHelpers.EDMTYPE] === "Edm.DateTimeOffset")) {
                return JSON.stringify(obj);
            }
            var stringifiedKeyValuePairs = SerializationHelpers.getStringifiedKeyValuePairs(obj);
            var result = stringifiedKeyValuePairs.join(",");
            return "{" + result + "}";
        };
        SerializationHelpers.stringifyArrayForOffline = function (array) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(array)) {
                return "[]";
            }
            var stringifiedElements = SerializationHelpers.getStringifiedElements(array);
            var result = stringifiedElements.join(",");
            return "[" + result + "]";
        };
        SerializationHelpers.getStringifiedKeyValuePairs = function (obj) {
            var results = [];
            if (obj.hasOwnProperty(SerializationHelpers.ODATATYPE) && !Commerce.ObjectExtensions.isNullOrUndefined(obj[SerializationHelpers.ODATATYPE])) {
                var keyString = JSON.stringify(SerializationHelpers.ODATATYPE);
                var valueString = JSON.stringify(obj[SerializationHelpers.ODATATYPE]);
                results.push(keyString + ":" + valueString);
            }
            var keys = Object.keys(obj);
            keys.forEach(function (key, index, keys) {
                if (key !== SerializationHelpers.ODATATYPE && obj.hasOwnProperty(key) && !Commerce.ObjectExtensions.isNullOrUndefined(obj[key])) {
                    var keyString = JSON.stringify(key);
                    var valueString = SerializationHelpers.stringifyForOffline(obj[key]);
                    results.push(keyString + ":" + valueString);
                }
            });
            return results;
        };
        SerializationHelpers.getStringifiedElements = function (array) {
            var results = [];
            array.forEach(function (element, index, keys) { return results.push(SerializationHelpers.stringifyForOffline(element)); });
            return results;
        };
        SerializationHelpers.ODATATYPE = "@odata.type";
        SerializationHelpers.EDMTYPE = "__edmType";
        return SerializationHelpers;
    }());
    Commerce.SerializationHelpers = SerializationHelpers;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var Set = (function () {
        function Set() {
            this._dictionary = new Commerce.Dictionary();
        }
        Set.prototype.addItem = function (item) {
            this._dictionary.setItem(item, item);
        };
        Set.prototype.removeItem = function (item) {
            this._dictionary.removeItem(item);
        };
        Set.prototype.hasItem = function (item) {
            return this._dictionary.hasItem(item);
        };
        Set.prototype.hasItems = function () {
            return this.length() > 0;
        };
        Set.prototype.length = function () {
            return this._dictionary.length();
        };
        Set.prototype.getItems = function () {
            return this._dictionary.getItems();
        };
        Set.prototype.forEach = function (callback) {
            this._dictionary.forEach(function (key, item) {
                callback(item);
            });
        };
        return Set;
    }());
    Commerce.Set = Set;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShiftHelper = (function () {
        function ShiftHelper() {
        }
        ShiftHelper.saveCashDrawerOnStorageAsync = function (cashDrawerName) {
            var drawer = Commerce.ArrayExtensions.firstOrUndefined(Commerce.ApplicationContext.Instance.hardwareProfile.CashDrawers, function (c) { return Commerce.StringExtensions.compare(c.DeviceName, cashDrawerName) === 0; });
            var drawerName = Commerce.StringExtensions.EMPTY;
            var drawerType = Commerce.Proxy.Entities.PeripheralType.None.toString();
            if (drawer) {
                drawerName = drawer.DeviceName;
                drawerType = drawer.DeviceTypeValue.toString();
            }
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_NAME, drawerName);
            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_TYPE, drawerType);
            return Commerce.Peripherals.instance.cashDrawer.isOpenAsync();
        };
        ShiftHelper.getCurrentShift = function () {
            return Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Shift) ? "No shift- Non drawer mode" :
                Commerce.Session.instance.Shift.ShiftId.toString() + " : " + Commerce.Session.instance.Shift.TerminalId;
        };
        ShiftHelper.GetShiftDetailsForLogging = function (shifts) {
            var shiftDetails = new Array();
            for (var n = 0; n < shifts.length; n++) {
                var details = shifts[n].ShiftId.toString() + ":" + shifts[n].TerminalId +
                    ":" + shifts[n].StatusValue.toString();
                shiftDetails.push(details);
            }
            return shiftDetails.join(",");
        };
        ShiftHelper.getShiftIdentifier = function (shift) {
            if (shift == null) {
                return Commerce.StringExtensions.EMPTY;
            }
            return shift.ShiftId + " : " + shift.TerminalId;
        };
        return ShiftHelper;
    }());
    Commerce.ShiftHelper = ShiftHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SimpleProductHelper = (function () {
        function SimpleProductHelper() {
        }
        SimpleProductHelper.getVariantDescription = function (product) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(product)
                || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone
                || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Master
                || product.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                return Commerce.StringExtensions.EMPTY;
            }
            return SimpleProductHelper.getProductDimensionsDescription(product.Dimensions);
        };
        SimpleProductHelper.getProductDimensionsDescription = function (dimensions) {
            if (!Commerce.ArrayExtensions.hasElements(dimensions)) {
                return Commerce.StringExtensions.EMPTY;
            }
            var formatString = Commerce.ViewModelAdapter.getResourceString("string_4385");
            var dimensionValues = dimensions.map(function (dimension) {
                return Commerce.ObjectExtensions.isNullOrUndefined(dimension.DimensionValue) ? Commerce.StringExtensions.EMPTY : dimension.DimensionValue.Value;
            });
            var formattedDescription = Commerce.StringExtensions.formattedJoin(dimensionValues, formatString);
            return formattedDescription;
        };
        SimpleProductHelper.getDimensionValue = function (product, dimensionType) {
            var dimension = Commerce.ArrayExtensions.firstOrUndefined(product.Dimensions, function (d) { return d.DimensionTypeValue === dimensionType; });
            return Commerce.ObjectExtensions.isNullOrUndefined(dimension) ? Commerce.StringExtensions.EMPTY : dimension.DimensionValue.Value;
        };
        SimpleProductHelper.getProductDescription = function (product) {
            var descriptionValues = [
                product.ItemId,
                product.Name,
                SimpleProductHelper.getVariantDescription(product)
            ];
            var formatString = Commerce.ViewModelAdapter.getResourceString("string_4385");
            return Commerce.StringExtensions.formattedJoin(descriptionValues, formatString);
        };
        return SimpleProductHelper;
    }());
    Commerce.SimpleProductHelper = SimpleProductHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Utilities;
    (function (Utilities) {
        var SortingHelper = (function () {
            function SortingHelper() {
            }
            SortingHelper.mergeSort = function (array, comparer) {
                if (!Commerce.ArrayExtensions.hasElements(array) || (array.length < 2)) {
                    return array;
                }
                if (!Commerce.ObjectExtensions.isFunction(comparer)) {
                    throw "Comparer is not a function.";
                }
                var middleIndex = Math.floor(array.length / 2);
                var leftArray = array.slice(0, middleIndex);
                var rightArray = array.slice(middleIndex);
                return SortingHelper.merge(SortingHelper.mergeSort(leftArray, comparer), SortingHelper.mergeSort(rightArray, comparer), comparer);
            };
            SortingHelper.merge = function (left, right, comparer) {
                var result = [];
                var leftIndex = 0;
                var rightIndex = 0;
                while ((leftIndex < left.length) && (rightIndex < right.length)) {
                    if (comparer(left[leftIndex], right[rightIndex])) {
                        result.push(left[leftIndex++]);
                    }
                    else {
                        result.push(right[rightIndex++]);
                    }
                }
                return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
            };
            return SortingHelper;
        }());
        Utilities.SortingHelper = SortingHelper;
    })(Utilities = Commerce.Utilities || (Commerce.Utilities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var StringResourcesHelper = (function () {
        function StringResourcesHelper(availableUICultures, culturesDirectoryPath, resourcesFileName) {
            this._availableUICultures = availableUICultures || [];
            this._culturesDirectoryPath = culturesDirectoryPath;
            this._resourcesFileName = resourcesFileName;
        }
        StringResourcesHelper.prototype.loadResourcesAsync = function (uiCulture, fallbackUICulture) {
            var _this = this;
            var resolvedUICulture = uiCulture || fallbackUICulture;
            resolvedUICulture = Commerce.Host.Globalization.CultureHelper.normalizeLanguageCode(resolvedUICulture);
            resolvedUICulture = this.resolveAvailableUICulture(resolvedUICulture, fallbackUICulture);
            if (this.areCulturesEqual(resolvedUICulture, this._currentUICulture)) {
                return Promise.resolve({
                    canceled: true,
                    data: null
                });
            }
            var fullResjsonPath = this._culturesDirectoryPath + "/" + resolvedUICulture + "/" + this._resourcesFileName;
            var loadedResources = {};
            return Commerce.DataHelper.loadTextAsync(fullResjsonPath)
                .done(function (data) {
                data = _this.removeJavaScriptComments(data);
                loadedResources = JSON.parse(data);
                _this._currentUICulture = resolvedUICulture;
            }).map(function () {
                return {
                    canceled: false,
                    data: loadedResources
                };
            }).getPromise();
        };
        StringResourcesHelper.prototype.getCurrentUICulture = function () {
            return this._currentUICulture;
        };
        StringResourcesHelper.prototype.removeJavaScriptComments = function (data) {
            if (Commerce.StringExtensions.isNullOrWhitespace(data)) {
                return data;
            }
            return data.replace(StringResourcesHelper.JAVASCRIPT_COMMENT_REGEX, Commerce.StringExtensions.EMPTY);
        };
        StringResourcesHelper.prototype.resolveAvailableUICulture = function (requestedUICulture, fallbackUICulture) {
            if (this.areCulturesEqual(requestedUICulture, fallbackUICulture)) {
                return requestedUICulture;
            }
            var EXACT_MATCH = 4;
            var EXACT_NEUTRAL_MATCH = 3;
            var NEUTRAL_MATCH = 2;
            var DEFAULT_MATCH = 1;
            var NO_MATCH = 0;
            var requestedNeutralUICulture = Commerce.Host.Globalization.CultureHelper.getLanguageSubTag(requestedUICulture);
            var resolvedUICulture = fallbackUICulture;
            var resolvedUICultureMatch = DEFAULT_MATCH;
            for (var i = 0; i < this._availableUICultures.length; i++) {
                var uiCulture = this._availableUICultures[i];
                var uiCultureMatch = NO_MATCH;
                if (this.areCulturesEqual(uiCulture, requestedUICulture)) {
                    uiCultureMatch = EXACT_MATCH;
                }
                else {
                    var neutralUICulture = Commerce.Host.Globalization.CultureHelper.getLanguageSubTag(uiCulture);
                    if (this.areCulturesEqual(neutralUICulture, requestedNeutralUICulture)) {
                        if (this.areCulturesEqual(neutralUICulture, uiCulture)) {
                            uiCultureMatch = EXACT_NEUTRAL_MATCH;
                        }
                        else {
                            uiCultureMatch = NEUTRAL_MATCH;
                        }
                    }
                }
                if (uiCultureMatch >= resolvedUICultureMatch) {
                    resolvedUICultureMatch = uiCultureMatch;
                    resolvedUICulture = uiCulture;
                }
                if (resolvedUICultureMatch === EXACT_MATCH) {
                    break;
                }
            }
            return resolvedUICulture;
        };
        StringResourcesHelper.prototype.areCulturesEqual = function (culture1, culture2) {
            return (Commerce.StringExtensions.compare(culture1, culture2, true) === 0);
        };
        StringResourcesHelper.JAVASCRIPT_COMMENT_REGEX = /(\/\*([^*] |[\r\n] |(\*+([^*/] |[\r\n])))*\*+\/)|((([^:]\/\/)|(^\/\/)).*)/g;
        return StringResourcesHelper;
    }());
    Commerce.StringResourcesHelper = StringResourcesHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var TransactionSearchCriteriaConverter = (function () {
        function TransactionSearchCriteriaConverter() {
        }
        TransactionSearchCriteriaConverter.getRefiners = function (criteria, customFilters) {
            criteria = Commerce.ObjectExtensions.isNullOrUndefined(criteria) ? {} : criteria;
            customFilters = customFilters || [];
            var refiners = [];
            customFilters.forEach(function (customFilterDefinition) {
                var existingSearchFilter = Commerce.ArrayExtensions.firstOrUndefined(criteria.CustomFilters, function (customFilter) {
                    return customFilter.Key === customFilterDefinition.key;
                });
                if (customFilterDefinition.filterType === Commerce.Proxy.Entities.SearchFilterType.Text) {
                    var value = Commerce.ObjectExtensions.isNullOrUndefined(existingSearchFilter) ? undefined : existingSearchFilter.SearchValues[0].Value.StringValue;
                    var key = TransactionSearchCriteriaConverter.EXTENSION_REFINER_PREFIX + customFilterDefinition.key;
                    refiners.push(Commerce.Refiners.RefinerFactory.createTextRefiner(key, customFilterDefinition.label, value));
                }
            });
            TransactionSearchCriteriaConverter.REFINER_DEFINITIONS
                .forEach(function (definition) {
                refiners.push(definition.createRefiner(criteria));
            });
            return refiners;
        };
        TransactionSearchCriteriaConverter.getTransactionSearchCriteria = function (refiners) {
            var criteria = {};
            refiners = refiners || [];
            var refinersByRefinerId = Object.create(null);
            var extensionRefiners = [];
            refiners.forEach(function (refiner) {
                if (!Commerce.StringExtensions.beginsWith(refiner.ID, TransactionSearchCriteriaConverter.EXTENSION_REFINER_PREFIX)) {
                    refinersByRefinerId[refiner.ID] = refiner;
                }
                else if (Commerce.ArrayExtensions.hasElements(refiner.SelectedValues)) {
                    extensionRefiners.push(refiner);
                }
            });
            TransactionSearchCriteriaConverter.REFINER_DEFINITIONS.forEach(function (definition) {
                var refiner = refinersByRefinerId[definition.id];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner)) {
                    criteria = definition.updateCriteria(criteria, refiner);
                }
            });
            var customSearchFilters = [];
            extensionRefiners.forEach(function (refiner) {
                var key = refiner.ID.substr(TransactionSearchCriteriaConverter.EXTENSION_REFINER_PREFIX.length);
                if (refiner instanceof Commerce.Refiners.TextRefiner) {
                    var textValue = refiner.SelectedValue;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(textValue)) {
                        var searchFilter = {
                            Key: key,
                            FilterTypeValue: Commerce.Proxy.Entities.SearchFilterType.Text,
                            SearchValues: [{
                                    Value: { StringValue: textValue }
                                }]
                        };
                        customSearchFilters.push(searchFilter);
                    }
                }
            });
            criteria.CustomFilters = Commerce.ArrayExtensions.hasElements(customSearchFilters) ? customSearchFilters : undefined;
            return criteria;
        };
        TransactionSearchCriteriaConverter._validateStartEndDate = function (refiner) {
            var errors = [];
            if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner) && !Commerce.ObjectExtensions.isNullOrUndefined(refiner.startDate)) {
                var now = new Date();
                if (refiner.startDate > now) {
                    var startDateNotInTheFuture = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.START_DATE_NOT_IN_FUTURE);
                    errors.push(startDateNotInTheFuture);
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(refiner.endDate)
                    && refiner.startDate > refiner.endDate) {
                    var startDateNotGreaterThanEndDate = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.START_DATE_NOT_MORE_RECENT_THAN_END_DATE);
                    errors.push(startDateNotGreaterThanEndDate);
                }
            }
            return errors;
        };
        TransactionSearchCriteriaConverter.EXTENSION_REFINER_PREFIX = "posExtensionRefiner_";
        TransactionSearchCriteriaConverter.REFINER_DEFINITIONS = [
            new Commerce.Refiners.RefinerDefinition("customerNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4559"), criteria.CustomerAccountNumber);
            }, function (criteria, refiner) {
                criteria.CustomerAccountNumber = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("customerFirstName", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4557"), criteria.CustomerFirstName);
            }, function (criteria, refiner) {
                criteria.CustomerFirstName = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("customerLastName", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4558"), criteria.CustomerLastName);
            }, function (criteria, refiner) {
                criteria.CustomerLastName = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("receiptEmailAddress", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4560"), criteria.ReceiptEmailAddress);
            }, function (criteria, refiner) {
                criteria.ReceiptEmailAddress = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("receiptNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4554"), criteria.ReceiptId);
            }, function (criteria, refiner) {
                criteria.ReceiptId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("transactionNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4553"), Commerce.ArrayExtensions.hasElements(criteria.TransactionIds) ? criteria.TransactionIds[0] : null);
            }, function (criteria, refiner) {
                criteria.TransactionIds = Commerce.ArrayExtensions.hasElements(refiner.SelectedValues) ? refiner.SelectedValues : undefined;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("salesOrderNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4556"), criteria.SalesId);
            }, function (criteria, refiner) {
                criteria.SalesId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("salesOrderDate", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createDateRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4591"), criteria.StartDateTime, criteria.EndDateTime, TransactionSearchCriteriaConverter._validateStartEndDate);
            }, function (criteria, refiner) {
                criteria.StartDateTime = refiner.startDate;
                criteria.EndDateTime = refiner.endDate;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("productNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4565"), criteria.ItemId);
            }, function (criteria, refiner) {
                criteria.ItemId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("barCode", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4566"), criteria.Barcode);
            }, function (criteria, refiner) {
                criteria.Barcode = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("storeNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4561"), criteria.StoreId);
            }, function (criteria, refiner) {
                criteria.StoreId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("operatorID", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4563"), criteria.StaffId);
            }, function (criteria, refiner) {
                criteria.StaffId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("registerNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4562"), criteria.TerminalId);
            }, function (criteria, refiner) {
                criteria.TerminalId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("channelReferenceID", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4564"), criteria.ChannelReferenceId);
            }, function (criteria, refiner) {
                criteria.ChannelReferenceId = refiner.SelectedValue;
                return criteria;
            }),
            new Commerce.Refiners.RefinerDefinition("serialNumber", function (refinerId, criteria) {
                return Commerce.Refiners.RefinerFactory.createTextRefiner(refinerId, Commerce.ViewModelAdapter.getResourceString("string_4654"), criteria.SerialNumber);
            }, function (criteria, refiner) {
                criteria.SerialNumber = refiner.SelectedValue;
                return criteria;
            })
        ];
        return TransactionSearchCriteriaConverter;
    }());
    Commerce.TransactionSearchCriteriaConverter = TransactionSearchCriteriaConverter;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var UnitOfMeasureHelper = (function () {
        function UnitOfMeasureHelper() {
        }
        UnitOfMeasureHelper.isQuantityValid = function (quantity, unitOfMeasure) {
            var isValid = true;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(unitOfMeasure)) {
                isValid = Commerce.NumberExtensions.getNumberOfDecimals(quantity) <= unitOfMeasure.DecimalPrecision;
            }
            return isValid;
        };
        UnitOfMeasureHelper.roundToDisplay = function (quantity, unitOfMeasureSymbol) {
            var decimalPrecision = UnitOfMeasureHelper.getDecimalPrecision(unitOfMeasureSymbol);
            var roundedValue = Commerce.NumberExtensions.roundToNDigits(quantity, decimalPrecision);
            return Commerce.NumberExtensions.formatNumber(roundedValue, decimalPrecision);
        };
        UnitOfMeasureHelper.getDecimalPrecision = function (unitOfMeasureSymbol) {
            var decimalPrecision = 0;
            var unitOfMeasure;
            if (!Commerce.StringExtensions.isNullOrWhitespace(unitOfMeasureSymbol)) {
                unitOfMeasure = Commerce.ApplicationContext.Instance.unitsOfMeasureMap.getItem(unitOfMeasureSymbol.toLowerCase());
            }
            if (!Commerce.ObjectExtensions.isNullOrUndefined(unitOfMeasure)) {
                decimalPrecision = Math.max(0, unitOfMeasure.DecimalPrecision);
            }
            return decimalPrecision;
        };
        UnitOfMeasureHelper.getDescriptionForSymbol = function (unitOfMeasureSymbol) {
            var description = null;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(unitOfMeasureSymbol)
                && Commerce.ApplicationContext.Instance.unitsOfMeasureMap.hasItem(unitOfMeasureSymbol.toLowerCase())) {
                description = Commerce.ApplicationContext.Instance.unitsOfMeasureMap.getItem(unitOfMeasureSymbol.toLowerCase()).Description;
            }
            return description;
        };
        UnitOfMeasureHelper.getUnitOfMeasureBySymbol = function (unitOfMeasureSymbol) {
            var unitOfMeasure = null;
            if (!Commerce.StringExtensions.isNullOrWhitespace(unitOfMeasureSymbol) &&
                Commerce.ApplicationContext.Instance.unitsOfMeasureMap.hasItem(unitOfMeasureSymbol.toLowerCase())) {
                unitOfMeasure = Commerce.ApplicationContext.Instance.unitsOfMeasureMap.getItem(unitOfMeasureSymbol.toLowerCase());
            }
            return unitOfMeasure;
        };
        return UnitOfMeasureHelper;
    }());
    Commerce.UnitOfMeasureHelper = UnitOfMeasureHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var UrlHelper = (function () {
        function UrlHelper() {
        }
        UrlHelper.getWebCompartmentUrl = function (document, path) {
            if (path.indexOf(UrlHelper.PROTOCOL_SEPARATOR_WITH_COLON) !== -1) {
                throw new Error("Protocol not expected on path.");
            }
            if (path.indexOf(UrlHelper.PROTOCOL_SEPARATOR) === 0) {
                throw new Error("Host not expected on path.");
            }
            var relativePath = path.charAt(0) !== UrlHelper.PATH_SEPARATOR;
            if (relativePath) {
                var locationPath = document.location.pathname;
                var lastPathSeparatorIndex = locationPath.lastIndexOf(UrlHelper.PATH_SEPARATOR);
                if (lastPathSeparatorIndex >= 0) {
                    locationPath = locationPath.substring(0, lastPathSeparatorIndex);
                }
                path = locationPath + UrlHelper.PATH_SEPARATOR + path;
            }
            return UrlHelper.getWebAppProtocol(document) + UrlHelper.PROTOCOL_SEPARATOR + document.location.host + path;
        };
        UrlHelper.formatBaseUrl = function (baseUrl) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(baseUrl) && !Commerce.StringExtensions.isEmptyOrWhitespace(baseUrl)) {
                if (baseUrl.charAt(baseUrl.length - 1) !== UrlHelper.PATH_SEPARATOR) {
                    return baseUrl + UrlHelper.PATH_SEPARATOR;
                }
            }
            return baseUrl;
        };
        UrlHelper.isLocalAddress = function (uri) {
            return UrlHelper.LOCAL_ADDRESS_PATTERN.test(uri);
        };
        UrlHelper.getHealthCheckUrl = function (serverUrl) {
            var result = Commerce.StringExtensions.EMPTY;
            var indexOfCommerceSuffix = serverUrl.toLowerCase().lastIndexOf(UrlHelper.COMMERCE_URL_SUFFIX);
            if (indexOfCommerceSuffix < 0) {
                result = UrlHelper.assembleUrlParts(serverUrl, UrlHelper.HEALTHCHECK_URL_SUFFIX);
            }
            else {
                result = UrlHelper.assembleUrlParts(serverUrl.substring(0, indexOfCommerceSuffix), UrlHelper.HEALTHCHECK_URL_SUFFIX);
            }
            return result;
        };
        UrlHelper.isHttpsProtocol = function (url) {
            return Commerce.StringExtensions.compare(UrlHelper.getProtocol(url), UrlHelper.HTTPS_PROTOCOL, true) === 0;
        };
        UrlHelper.parseArguments = function (argumentString) {
            var argumentCollection = {};
            var argumentPairs = (argumentString || "").split(UrlHelper.ARGUMENT_SEPARATOR);
            for (var i = 0; i < argumentPairs.length; i++) {
                var pairs = argumentPairs[i].split("=");
                var key = decodeURIComponent(pairs[0] || "");
                var value = decodeURIComponent(pairs[1] || "");
                if (!Commerce.StringExtensions.isNullOrWhitespace(key)) {
                    argumentCollection[key.toLowerCase()] = value;
                    argumentCollection[key] = value;
                }
            }
            return argumentCollection;
        };
        UrlHelper.extractFileName = function (url) {
            var modifiedUrl = decodeURI(url);
            var hashStartPos = modifiedUrl.indexOf("#");
            if (hashStartPos !== -1) {
                modifiedUrl = modifiedUrl.slice(0, hashStartPos);
            }
            var queryStartPos = modifiedUrl.indexOf("?");
            if (queryStartPos !== -1) {
                modifiedUrl = modifiedUrl.slice(0, queryStartPos);
            }
            var lastSlashIndex = modifiedUrl.lastIndexOf("/");
            if (lastSlashIndex === modifiedUrl.length - 1) {
                return Commerce.StringExtensions.EMPTY;
            }
            var protocolSeparatorIndex = modifiedUrl.lastIndexOf("://");
            if ((protocolSeparatorIndex !== -1) && ((protocolSeparatorIndex + 2) === lastSlashIndex)) {
                return Commerce.StringExtensions.EMPTY;
            }
            return modifiedUrl.slice(modifiedUrl.lastIndexOf("/") + 1);
        };
        UrlHelper.getWebAppProtocol = function (document) {
            var currentProtocol = document.location.protocol || "";
            if (UrlHelper.isWWAHost(currentProtocol)) {
                return UrlHelper.WWAHOST_WEBAPP_PROTOCOL;
            }
            else {
                return currentProtocol;
            }
        };
        UrlHelper.isWWAHost = function (currentProtocol) {
            return currentProtocol.indexOf(UrlHelper.WWAHOST_APP_PROTOCOL_NOCOLON) === 0;
        };
        UrlHelper.getProtocol = function (url) {
            if (!url) {
                return "";
            }
            var anchor = document.createElement("a");
            anchor.href = url;
            return anchor.protocol;
        };
        UrlHelper.assembleUrlParts = function (baseUrl, urlSuffix) {
            var result = baseUrl;
            var urlSuffixToUse = urlSuffix;
            if (baseUrl.lastIndexOf(UrlHelper.PATH_SEPARATOR) === baseUrl.length - 1) {
                result = baseUrl.substring(0, baseUrl.length - 1);
            }
            if (urlSuffix[0] === UrlHelper.PATH_SEPARATOR) {
                urlSuffixToUse = urlSuffix.substring(1);
            }
            result += UrlHelper.PATH_SEPARATOR + urlSuffixToUse;
            return result;
        };
        UrlHelper.ARGUMENT_SEPARATOR = "&";
        UrlHelper.COMMERCE_URL_SUFFIX = "/commerce";
        UrlHelper.HEALTHCHECK_URL_SUFFIX = "healthcheck?testname=ping&ResultFormat=json";
        UrlHelper.HTTPS_PROTOCOL = "HTTPS:";
        UrlHelper.LOCAL_ADDRESS_PATTERN = /:\/\/(localhost|127\.0\.0\.1)(:\d+)?/i;
        UrlHelper.PATH_SEPARATOR = "/";
        UrlHelper.PROTOCOL_SEPARATOR = "//";
        UrlHelper.PROTOCOL_SEPARATOR_WITH_COLON = "://";
        UrlHelper.WWAHOST_APP_PROTOCOL_NOCOLON = "ms-appx";
        UrlHelper.WWAHOST_WEBAPP_PROTOCOL = "ms-appx-web:";
        return UrlHelper;
    }());
    Commerce.UrlHelper = UrlHelper;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CartValidators = (function () {
            function CartValidators() {
            }
            CartValidators.payableCart = function (cart) {
                var validationErrors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                else {
                    var hasPayableCartLine = CartValidators.hasPayableCartLine(cart);
                    var hasPayableIncomeExpenseLine = CartValidators.hasPayableIncomeExpenseLine(cart);
                    var hasPayableCustomerAccountDepositLine = CartValidators.hasPayableCustomerAccountDepositLine(cart);
                    if (!hasPayableCartLine && !hasPayableIncomeExpenseLine && !hasPayableCustomerAccountDepositLine) {
                        return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CART_IS_EMPTY)];
                    }
                    var isCustomerOrder = Commerce.CustomerOrderHelper.isCustomerOrder(cart) || Commerce.CustomerOrderHelper.isQuote(cart);
                    if (!isCustomerOrder) {
                        return validationErrors;
                    }
                    validationErrors = Operations.CustomerOrderValidators.hasCustomer(cart);
                    if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                        return validationErrors;
                    }
                    validationErrors = Operations.CustomerOrderValidators.isDeliveryModeSet(cart);
                    if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                        return validationErrors;
                    }
                }
                return validationErrors;
            };
            CartValidators.hasPayableCartLine = function (cart) {
                return (Commerce.ArrayExtensions.hasElements(cart.CartLines) && cart.CartLines.some(function (c) { return !c.IsVoided; }));
            };
            CartValidators.notAllowedOnCustomerOrderOnCreateQuotation = function (cart) {
                var errors = [];
                if (Commerce.CustomerOrderHelper.isCustomerOrder(cart) && !Commerce.CustomerOrderHelper.isQuote(cart)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_CONVERT_TO_QUOTATION_FROM_CUSTOMER_ORDER));
                }
                return errors;
            };
            CartValidators.notAllowedOnCartIfAllLinesNotValidForCustomerOrderOperations = function (cart) {
                var errors = [];
                errors = errors.concat(Commerce.CustomerOrderHelper.validateCartLinesForCustomerOrder(cart));
                return errors;
            };
            CartValidators.cartHasCustomerIfCustomerOrderOrQuote = function (cart) {
                if (Commerce.CustomerOrderHelper.isCustomerOrder(cart) || Commerce.CustomerOrderHelper.isQuote(cart)) {
                    if (!CartValidators._cartHasCustomer) {
                        return [new Commerce.Proxy.Entities.Error("string_4419")];
                    }
                }
                return [];
            };
            CartValidators.cartHasDeliveryInfoIfCustomerOrderOrQuote = function (cart) {
                if (Commerce.CustomerOrderHelper.isCustomerOrder(cart) || Commerce.CustomerOrderHelper.isQuote(cart)) {
                    if (CartValidators._cartHasCartLineWithDeliveryModeSet(cart) && !CartValidators._cartHasAllCartLinesWithDeliveryInfoSet(cart)) {
                        return [new Commerce.Proxy.Entities.Error("string_4418")];
                    }
                }
                return [];
            };
            CartValidators.cartIsReadyForCheckout = function (cart) {
                var hasLines = Commerce.ArrayExtensions.hasElements(cart.CartLines)
                    || Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines)
                    || Commerce.ArrayExtensions.hasElements(cart.CustomerAccountDepositLines);
                if (!hasLines) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CART_IS_EMPTY)];
                }
                else if (!cart.IsRequiredAmountPaid) {
                    return [new Commerce.Proxy.Entities.Error("string_29292")];
                }
                else {
                    return [];
                }
            };
            CartValidators._cartHasCartLineWithDeliveryModeSet = function (cart) {
                var cartLines = Commerce.ArrayExtensions.hasElements(cart.CartLines) ? cart.CartLines : [];
                var hasCartLineWithDeliveryModeSet = cartLines.some(function (cartLine) {
                    return !cartLine.IsVoided && cartLine.DeliveryMode != null;
                });
                return hasCartLineWithDeliveryModeSet;
            };
            CartValidators._cartHasAllCartLinesWithDeliveryInfoSet = function (cart) {
                var cartLines = Commerce.ArrayExtensions.hasElements(cart.CartLines) ? cart.CartLines : [];
                var hasCartLineWithNoAddressOrDeliveryDate = cartLines.some(function (line) {
                    return !line.IsVoided &&
                        (Commerce.ObjectExtensions.isNullOrUndefined(line.ShippingAddress) ||
                            Commerce.ObjectExtensions.isNullOrUndefined(line.ShippingAddress.RecordId) ||
                            Commerce.ObjectExtensions.isNullOrUndefined(line.RequestedDeliveryDate));
                });
                return !hasCartLineWithNoAddressOrDeliveryDate;
            };
            Object.defineProperty(CartValidators, "_cartHasCustomer", {
                get: function () {
                    return Commerce.Session.instance.isCartInProgress
                        && !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CustomerId)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Customer)
                        && !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.Customer.AccountNumber);
                },
                enumerable: true,
                configurable: true
            });
            CartValidators.hasPayableIncomeExpenseLine = function (cart) {
                return Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines);
            };
            CartValidators.hasPayableCustomerAccountDepositLine = function (cart) {
                return Commerce.ArrayExtensions.hasElements(cart.CustomerAccountDepositLines);
            };
            return CartValidators;
        }());
        Operations.CartValidators = CartValidators;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CustomerOrderValidators = (function () {
            function CustomerOrderValidators() {
            }
            CustomerOrderValidators.hasCustomer = function (cart) {
                var validationErrors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS));
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(cart.CustomerId)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error("string_4419"));
                }
                return validationErrors;
            };
            CustomerOrderValidators.isDeliveryModeSet = function (cart) {
                var validationErrors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS));
                }
                else if ((cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit
                    || cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit)) {
                    var isAnyLineNotSet = Commerce.ArrayExtensions.hasElements(cart.CartLines);
                    isAnyLineNotSet = isAnyLineNotSet && cart.CartLines.some(function (c) {
                        return !c.IsVoided
                            && (Commerce.ObjectExtensions.isNullOrUndefined(c.DeliveryMode)
                                || Commerce.ObjectExtensions.isNullOrUndefined(c.ShippingAddress)
                                || Commerce.ObjectExtensions.isNullOrUndefined(c.ShippingAddress.RecordId)
                                || Commerce.ObjectExtensions.isNullOrUndefined(c.RequestedDeliveryDate));
                    });
                    if (isAnyLineNotSet) {
                        validationErrors.push(new Commerce.Proxy.Entities.Error("string_4418"));
                    }
                }
                return validationErrors;
            };
            return CustomerOrderValidators;
        }());
        Operations.CustomerOrderValidators = CustomerOrderValidators;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var Validators = (function () {
            function Validators() {
            }
            Validators.singleCartLineOperationValidator = function (collection) {
                var validationErrors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(collection)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS));
                }
                else if (collection.length > 1) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_CART_LINES));
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ArrayExtensions.firstOrUndefined(collection))) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_CART_LINE_SELECTED));
                }
                return validationErrors;
            };
            Validators.itemAllowsPriceOverrideOperationValidator = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (!Commerce.ArrayExtensions.hasElements(validationErrors)) {
                    var cartLine = collection[0];
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                        if (product.Behavior.KeyInPriceValue === Commerce.Proxy.Entities.KeyInPriceRestriction.NotAllowed) {
                            validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PRICE_OVERRIDE_NOT_ALLOWED_FOR_PRODUCT));
                        }
                    }
                }
                return validationErrors;
            };
            Validators.nonVoidedOperationValidator = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (!Commerce.ArrayExtensions.hasElements(validationErrors) && collection[0].IsVoided === true) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_VOIDED));
                }
                return validationErrors;
            };
            Validators.notFromAGiftCertificateOperationValidator = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (!Commerce.ArrayExtensions.hasElements(validationErrors) && collection[0].IsGiftCardLine) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_GIFT_CARD));
                }
                return validationErrors;
            };
            Validators.notAVoidedSalesInvoiceLine = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (validationErrors.length === 0 && collection[0].IsInvoiceLine && collection[0].IsVoided) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_UNVOID_NOT_ALLOWED_FOR_A_VOIDED_SALES_INVOICE));
                }
                return validationErrors;
            };
            Validators.notFromAReceiptOperationValidator = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (!Commerce.ArrayExtensions.hasElements(validationErrors) && Commerce.CartLineHelper.isFromAReceipt(collection[0])) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_RECEIPT));
                }
                return validationErrors;
            };
            Validators.notHaveOverridenPrice = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (!Commerce.ArrayExtensions.hasElements(validationErrors) && collection[0].IsPriceOverridden) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRICE_IS_OVERRIDDEN));
                }
                return validationErrors;
            };
            Validators.notAllowQuantityUpdate = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (!Commerce.ArrayExtensions.hasElements(validationErrors)) {
                    var cartLine = collection[0];
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                        if (product.Behavior.KeyInQuantityValue === Commerce.Proxy.Entities.KeyInQuantityRestriction.NotAllowed) {
                            validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.UNIT_OF_MEASURE_NOT_VALID_ITEM_NOT_ALLOW_QUANTITY_UPDATE));
                        }
                    }
                }
                return validationErrors;
            };
            Validators.checkDiscountIsAllowed = function (collection) {
                var validationErrors = Validators.singleCartLineOperationValidator(collection);
                if (!Commerce.ArrayExtensions.hasElements(validationErrors)) {
                    var cartLine = collection[0];
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(product)) {
                        if (!product.Behavior.IsDiscountAllowed || !product.Behavior.IsManualDiscountAllowed) {
                            validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.DISCOUNT_NOT_ALLOWED_ON_PRODUCT));
                        }
                    }
                }
                return validationErrors;
            };
            Validators.singlePaymentLineOperationValidator = function (collection) {
                var validationErrors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(collection)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_PAYMENT_LINE_SELECTED));
                }
                else if (collection.length > 1) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_MULTIPLE_PAYMENT_LINES));
                }
                else if (collection.length === 0) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_PAYMENT_LINE_SELECTED));
                }
                return validationErrors;
            };
            Validators.noExistingCart = function () {
                var validationErrors = [];
                if (Commerce.Session.instance.isCartInProgress) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FINISH_CURRENT_TRANSACTION));
                }
                return validationErrors;
            };
            Validators.userSessionValidAndNoExistingCartLogOffValidator = function () {
                var validationErrors = [];
                if (Commerce.Session.instance.isCartInProgress && Commerce.Session.instance.isSessionStateValid) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.LOGOFF_ERROR));
                }
                return validationErrors;
            };
            Validators.existingCart = function () {
                var validationErrors = [];
                if (!Commerce.Session.instance.isCartInProgress) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_NO_CURRENT_TRANSACTION));
                }
                return validationErrors;
            };
            Validators.isCustomerOrderOrQuoteInCreateOrEditState = function () {
                var validationErrors = [];
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CustomerOrderHelper.isCustomerOrder(cart)
                    && !Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMER_ORDER_OPERATION_PICKUP_CANCEL_RETURN_NOT_SUPPORTED));
                }
                return validationErrors;
            };
            Validators.notAllowedOnNonReturnCustomerOrderOperationValidator = function () {
                var cart = Commerce.Session.instance.cart;
                var errors = [];
                if (Commerce.Session.instance.isCartInProgress && cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder) {
                    var allowReturns = cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Return ||
                        Commerce.CustomerOrderHelper.isCustomerOrderWithExchange(cart);
                    if (!allowReturns) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.ORDERS_CANNOT_INCLUDE_RETURNS));
                    }
                }
                return errors;
            };
            Validators.includeOnlyNonReturnLinesOnCustomerOrder = function (selectedCartLines) {
                var errors = [];
                var currentCart = Commerce.Session.instance.cart;
                if (!Commerce.ArrayExtensions.hasElements(selectedCartLines) || !Commerce.CustomerOrderHelper.isCustomerOrder(currentCart)) {
                    return errors;
                }
                var containsReturnLines = selectedCartLines.some(function (line) {
                    return !line.IsVoided && Commerce.CartHelper.isReturnLine(line);
                });
                if (containsReturnLines) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTCONTAINSPRODUCTSFORRETURN));
                }
                return errors;
            };
            Validators.restrictUnitOfMeasureOnCustomerOrderPickUp = function () {
                var errors = [];
                var currentCart = Commerce.Session.instance.cart;
                if (Commerce.CustomerOrderHelper.isCustomerOrderPickup(currentCart)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTCONTAINSPRODUCTSFORPICKUP));
                }
                return errors;
            };
            Validators.includeOnlyReturnLinesOnCustomerOrderExchange = function (selectedCartLines) {
                var errors = [];
                var cart = Commerce.Session.instance.cart;
                if (!Commerce.CustomerOrderHelper.isCustomerOrderWithExchange(cart) || !Commerce.ArrayExtensions.hasElements(selectedCartLines)) {
                    return errors;
                }
                var containsNonReturnLines = selectedCartLines.some(function (line) {
                    return !line.IsVoided && line.Quantity > 0;
                });
                if (containsNonReturnLines) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SELECTED_LINES_CONTAINS_POSITIVE_QUANTITY));
                }
                return errors;
            };
            Validators.containsNonReturnCartLinesOnCustomerOrder = function (cart) {
                var errors = [];
                if (!Commerce.CustomerOrderHelper.isCustomerOrder(cart)) {
                    return errors;
                }
                var containsPositiveQuantities = !Commerce.ObjectExtensions.isNullOrUndefined(cart) && Commerce.ArrayExtensions.hasElements(cart.CartLines) &&
                    cart.CartLines.some(function (line) {
                        return !line.IsVoided && line.Quantity > 0;
                    });
                if (!containsPositiveQuantities) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTCONTAINSPRODUCTSFORRETURNONLY));
                }
                return errors;
            };
            Validators.customerOrderVoidLineValidator = function (cartLines) {
                var errors = [];
                var cart = Commerce.Session.instance.cart;
                if (!Commerce.CustomerOrderHelper.isCustomerOrder(cart)) {
                    return errors;
                }
                if (!Commerce.CustomerOrderHelper.isCustomerOrderOrQuoteCreationOrEdition(cart)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCUSTOMERORDERMODEFORVOIDPRODUCTS));
                }
                else if (cartLines.some(function (line) { return Commerce.CartHelper.isReturnLine(line); })) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTCONTAINSPRODUCTSFORRETURN));
                }
                return errors;
            };
            Validators.notAllowedOnCustomerOrderOrQuotation = function () {
                var errors = [];
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CustomerOrderHelper.isCustomerOrder(cart)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_ALLOWED_IN_CUSTOMERORDER_OR_QUOTATION));
                }
                return errors;
            };
            Validators.giftCardNotAllowedOnCustomerOrderOrQuotation = function () {
                var errors = [];
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CustomerOrderHelper.isCustomerOrder(cart)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.GIFT_CARD_NOT_ALLOWED_IN_CUSTOMERORDER_OR_QUOTATION));
                }
                return errors;
            };
            Validators.checkCustomerOrderInOffline = function () {
                var validationErrors = [];
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                    var createOfflineCustomerOrders = Commerce.ApplicationContext.Instance.deviceConfiguration.CreateOfflineCustomerOrders;
                    if (!createOfflineCustomerOrders) {
                        validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE));
                    }
                }
                return validationErrors;
            };
            Validators.checkAddCustomerInOffline = function () {
                var validationErrors = [];
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                    var createOfflineAsyncCustomer = Commerce.ApplicationContext.Instance.deviceConfiguration.CreateAsyncCustomers;
                    if (!createOfflineAsyncCustomer) {
                        validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE));
                    }
                }
                return validationErrors;
            };
            Validators.notAllowedInOffline = function () {
                var validationErrors = [];
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE));
                }
                return validationErrors;
            };
            Validators.notIncomeExpenseTransaction = function () {
                var validationErrors = [];
                var cart = Commerce.Session.instance.cart;
                if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.IncomeExpense)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_INCOME_EXPENSE_TRANSACTION));
                }
                return validationErrors;
            };
            Validators.notAllowedOnVoidedCartLinesOperationValidator = function (cartLines) {
                var errors = [];
                if (cartLines.some(function (cartLine) { return cartLine.IsVoided; })) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_VOIDED));
                }
                return errors;
            };
            Validators.notAllowedOnGiftCardCartLinesOperationValidator = function (cartLines) {
                var errors = [];
                if (cartLines.some(function (cartLine) { return cartLine.IsGiftCardLine; })) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_GIFT_CARD));
                }
                return errors;
            };
            Validators.notAllowedOnSalesInvoiceLinesOperationValidator = function (cartLines) {
                var errors = [];
                if (cartLines.some(function (cartLine) { return cartLine.IsInvoiceLine; })) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_SALES_INVOICE));
                }
                return errors;
            };
            Validators.notAllowedOnSerializedProductCartLinesOperationValidator = function (cartLines) {
                var errors = [];
                cartLines.forEach(function (cartLine) {
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    var isProduct = !Commerce.ObjectExtensions.isNullOrUndefined(product);
                    if ((!Commerce.ObjectExtensions.isNullOrUndefined(cartLine.SerialNumber)
                        && !Commerce.StringExtensions.isEmptyOrWhitespace(cartLine.SerialNumber))
                        || (isProduct && product.Behavior.MustPromptForSerialNumberOnlyAtSale)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_SERIALIZED_ITEM));
                    }
                    return;
                });
                return errors;
            };
            Validators.notAllowedToKeyInQuantityOnProductCartLinesOperationValidator = function (cartLines) {
                var errors = [];
                cartLines.forEach(function (cartLine) {
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    var isProduct = !Commerce.ObjectExtensions.isNullOrUndefined(product);
                    if (isProduct
                        && product.Behavior.KeyInQuantityValue === Commerce.Proxy.Entities.KeyInQuantityRestriction.NotAllowed) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_KEY_IN_QUANTITY_NOT_ALLOWED_FOR_ITEM));
                    }
                    return;
                });
                return errors;
            };
            Validators.notAllowedOnCartWithCustomerAccountTenderLineOperationValidator = function () {
                var cart = Commerce.Session.instance.cart;
                var errors = [];
                if (Commerce.ArrayExtensions.hasElements(cart.TenderLines)) {
                    cart.TenderLines.forEach(function (tenderLine) {
                        var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
                        if (tenderType.OperationId === Commerce.Proxy.Entities.RetailOperation.PayCustomerAccount
                            && tenderLine.StatusValue !== Commerce.Proxy.Entities.TenderLineStatus.Voided) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_REMOVE_CUSTOMER_PARTIAL_ORDER));
                            return;
                        }
                    });
                }
                return errors;
            };
            Validators.notAllowedOnCartWithoutCustomerAccountOperationValidator = function () {
                var errors = [];
                if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CustomerId)) {
                    errors.push(new Commerce.Proxy.Entities.Error("string_29341"));
                }
                return errors;
            };
            Validators.notAllowedOnCartWithNonCustomerAccountDepositLines = function () {
                var cart = Commerce.Session.instance.cart;
                var errors = [];
                if (Commerce.ArrayExtensions.hasElements(cart.CartLines) || Commerce.ArrayExtensions.hasElements(cart.IncomeExpenseLines)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMERACCOUNTDEPOSIT_MULTIPLECARTLINESNOTALLOWED));
                }
                return errors;
            };
            Validators.notAllowedOnCustomerAccountDeposit = function () {
                var cart = Commerce.Session.instance.cart;
                var errors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                    Commerce.RetailLogger.coreOperationValidatorsNoCartOnCartValidator("notAllowedOnCustomerAccountDeposit");
                }
                if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.AccountDeposit)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_CUSTOMER_ACCOUNT_DEPOSIT));
                }
                return errors;
            };
            Validators.notAllowedAddCouponToEmptyCart = function () {
                var validationErrors = [];
                if (!Commerce.Session.instance.isCartInProgress) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_ADD_COUPON_TO_NO_CURRENT_TRANSACTION));
                }
                return validationErrors;
            };
            Validators.notAllowedOnCustomerAccountDepositWithNewCustomer = function (customerId) {
                var cart = Commerce.Session.instance.cart;
                var errors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                    Commerce.RetailLogger.coreOperationValidatorsNoCartOnCartValidator("notAllowedOnCustomerAccountDepositWithNewCustomer");
                }
                if (Commerce.CartHelper.isCartType(cart, Commerce.Proxy.Entities.CartType.AccountDeposit) && (!Commerce.CartHelper.isCustomerOnCart(cart, customerId))) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_CUSTOMER_ACCOUNT_DEPOSIT));
                }
                return errors;
            };
            Validators.notAllowedOnRecalledOrder = function () {
                var cart = Commerce.Session.instance.cart;
                var errors = [];
                if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                    && !Commerce.StringExtensions.isNullOrWhitespace(cart.SalesId)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTCHANGECUSTOMERIDWHENEDITINGCUSTOMERORDER));
                }
                return errors;
            };
            Validators.returnCartLinesOperationValidator = function (cartLines) {
                var errors = [];
                if (!Commerce.ArrayExtensions.hasElements(cartLines)) {
                    return errors;
                }
                errors = errors.concat(Validators.notAllowedOnVoidedCartLinesOperationValidator(cartLines), Validators.notAllowedOnGiftCardCartLinesOperationValidator(cartLines), Validators.notAllowedOnSalesInvoiceLinesOperationValidator(cartLines));
                return errors;
            };
            Validators.returnLimitsValidator = function (options) {
                var validationErrors = [];
                var totalReturnAmount = 0;
                if (Commerce.Session.instance.CurrentEmployee.Permissions.MaximumLineReturnAmount > 0) {
                    options.productReturnDetails.forEach(function (prd) {
                        var lineReturnAmount = 0;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(prd.cartLine)) {
                            lineReturnAmount = prd.cartLine.TotalAmount;
                        }
                        else if (!Commerce.ObjectExtensions.isNullOrUndefined(prd.manualReturn)) {
                            lineReturnAmount = prd.manualReturn.product.Price;
                        }
                        else if (!Commerce.ObjectExtensions.isNullOrUndefined(prd.salesLineReturn)) {
                            lineReturnAmount = prd.salesLineReturn.salesLine.TotalAmount;
                        }
                        totalReturnAmount += lineReturnAmount;
                        if (lineReturnAmount > Commerce.Session.instance.CurrentEmployee.Permissions.MaximumLineReturnAmount) {
                            validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RETURN_MAX_RETURN_LINE_AMOUNT_EXCEEDED));
                            return;
                        }
                    });
                }
                if ((Commerce.Session.instance.CurrentEmployee.Permissions.MaxTotalReturnAmount > 0)
                    && (totalReturnAmount > Commerce.Session.instance.CurrentEmployee.Permissions.MaxTotalReturnAmount)) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RETURN_MAX_RETURN_TOTAL_AMOUNT_EXCEEDED));
                }
                return validationErrors;
            };
            Validators.notAllowedInNonDrawerModeOperationValidator = function () {
                var validationErrors = [];
                if (Commerce.Session.instance.Shift.ShiftId === 0) {
                    validationErrors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NONDRAWEROPERATIONSONLY));
                }
                return validationErrors;
            };
            Validators.notAllowedInNonDrawerModeUnlessShiftIsProvidedOperationValidator = function (shift) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(shift) || Commerce.NumberExtensions.isNullOrZero(shift.ShiftId)) {
                    return Validators.notAllowedInNonDrawerModeOperationValidator();
                }
                else {
                    return [];
                }
            };
            Validators.paymentsHistoryOperationValidator = function (cart) {
                var errors = [];
                if (!Commerce.CustomerOrderHelper.isCustomerOrderEdition(cart) && !Commerce.CustomerOrderHelper.isCustomerOrderPickup(cart)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.EDIT_OR_PICKUP_CUSTOMER_ORDER_ONLY));
                }
                return errors;
            };
            Validators.notAllowedForPhone = function () {
                var errors = [];
                if (Commerce.Config.isPhone) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_SUPPORTED));
                }
                return errors;
            };
            Validators.addSerialNumberForCartLineOperationValidator = function (options) {
                var errors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(options) || !Commerce.ArrayExtensions.hasElements(options.cartLines)) {
                    return errors;
                }
                options.cartLines.forEach(function (cartLine) {
                    var product = Commerce.Session.instance.getFromProductsInCartCache(cartLine.ProductId);
                    if (!product.Behavior.HasSerialNumber) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FOR_A_NON_SERIALIZED_ITEM));
                    }
                    else if (!Commerce.StringExtensions.isNullOrWhitespace(cartLine.SerialNumber)) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERIAL_NUMBER_CANNOT_BE_CHANGED));
                    }
                });
                return errors;
            };
            Validators.notAllowedIfExpirationDateInPast = function (expirationDate) {
                var errors = [];
                if (!Commerce.DateExtensions.isTodayOrFutureDate(expirationDate)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_QUOTEMUSTHAVEVALIDQUOTATIONEXPIRYDATE));
                }
                return errors;
            };
            return Validators;
        }());
        Operations.Validators = Validators;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PaymentValidators = (function () {
            function PaymentValidators() {
            }
            PaymentValidators.payCard = function (args) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(args)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                return PaymentValidators.payableCartForOperation(args.cart, Commerce.Proxy.Entities.RetailOperation.PayCard, Commerce.ErrorTypeEnum.PAYMENT_CARD_PAYMENT_NOT_AVAILABLE);
            };
            PaymentValidators.payCashQuick = function (cart) {
                var isCustomerOrder = Commerce.CustomerOrderHelper.isCustomerOrder(cart) || Commerce.CustomerOrderHelper.isQuote(cart);
                if ((!isCustomerOrder || Commerce.CustomerOrderHelper.isCustomerOrderCreate(cart))
                    && cart.IsDiscountFullyCalculated === false
                    && Operations.CartValidators.hasPayableCartLine(cart)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CALCULATE_TOTAL_BEFORE_PAYMENT)];
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cart.HasTaxCalculationTriggered) && !cart.HasTaxCalculationTriggered) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CALCULATE_TOTAL_BEFORE_PAYMENT)];
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cart.HasChargeCalculationTriggered) && !cart.HasChargeCalculationTriggered) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CALCULATE_TOTAL_BEFORE_PAYMENT)];
                }
                return PaymentValidators.payableCartForOperation(cart, Commerce.Proxy.Entities.RetailOperation.PayCashQuick, Commerce.ErrorTypeEnum.PAYMENT_CASH_PAYMENT_NOT_AVAILABLE);
            };
            PaymentValidators.payCash = function (args) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(args)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                return PaymentValidators.payableCartForOperation(args.cart, Commerce.Proxy.Entities.RetailOperation.PayCash, Commerce.ErrorTypeEnum.PAYMENT_CASH_PAYMENT_NOT_AVAILABLE);
            };
            PaymentValidators.payCheck = function (args) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(args)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                return PaymentValidators.payableCartForOperation(args.cart, Commerce.Proxy.Entities.RetailOperation.PayCheck, Commerce.StringExtensions.EMPTY);
            };
            PaymentValidators.payCreditMemo = function (args) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(args)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                if (args.cart && args.cart.AmountDue !== Number.NaN && args.cart.AmountDue <= 0) {
                    return [new Commerce.Proxy.Entities.Error("string_29827")];
                }
                return PaymentValidators.payableCartForOperation(args.cart, Commerce.Proxy.Entities.RetailOperation.PayCreditMemo, Commerce.StringExtensions.EMPTY);
            };
            PaymentValidators.payCurrency = function (args) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(args)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(args.currency)) {
                    var currency = Commerce.ApplicationContext.Instance.currenciesMap.getItem(args.currency);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(currency)) {
                        return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_UNSUPPORTEDCURRENCY)];
                    }
                }
                return PaymentValidators.payableCartForOperation(args.cart, Commerce.Proxy.Entities.RetailOperation.PayCurrency, Commerce.ErrorTypeEnum.PAYMENT_CASH_PAYMENT_NOT_AVAILABLE);
            };
            PaymentValidators.payCustomerAccount = function (cart) {
                var validationErrors = PaymentValidators.payableCartForOperation(cart, Commerce.Proxy.Entities.RetailOperation.PayCustomerAccount, Commerce.StringExtensions.EMPTY);
                if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                    return validationErrors;
                }
                if (Commerce.ArrayExtensions.hasElements(cart.TenderLines)) {
                    var tenderType_1 = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(Commerce.Proxy.Entities.RetailOperation.PayCustomerAccount);
                    var hasCustomerAccountPayment = cart.TenderLines.some(function (t) {
                        return !t.IsHistorical && t.StatusValue !== Commerce.Proxy.Entities.TenderLineStatus.Voided && t.TenderTypeId === tenderType_1.TenderTypeId;
                    });
                    if (hasCustomerAccountPayment) {
                        return [new Commerce.Proxy.Entities.Error("string_1188")];
                    }
                }
                var orderMode = cart.CustomerOrderModeValue;
                if (orderMode === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit || orderMode === Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit) {
                    var hasCarryOutItems = cart.CartLines.some(function (c) {
                        return !c.IsVoided && c.DeliveryMode === Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode;
                    });
                    if (!hasCarryOutItems) {
                        return [new Commerce.Proxy.Entities.Error("string_29021")];
                    }
                }
                else if (orderMode === Commerce.Proxy.Entities.CustomerOrderMode.Cancellation) {
                    return [new Commerce.Proxy.Entities.Error("string_29025")];
                }
                return validationErrors;
            };
            PaymentValidators.payGiftCard = function (args) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(args)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                return PaymentValidators.payableCartForOperation(args.cart, Commerce.Proxy.Entities.RetailOperation.PayGiftCertificate, Commerce.StringExtensions.EMPTY);
            };
            PaymentValidators.payLoyalty = function (args) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(args)) {
                    return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_VALIDATION_INVALID_ARGUMENTS)];
                }
                return PaymentValidators.payableCartForOperation(args.cart, Commerce.Proxy.Entities.RetailOperation.PayGiftCertificate, Commerce.StringExtensions.EMPTY);
            };
            PaymentValidators.payableCartForOperation = function (cart, operationId, errorCodeOnPaymentTypeNotAvailable) {
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(operationId);
                if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    return [new Commerce.Proxy.Entities.Error(errorCodeOnPaymentTypeNotAvailable)];
                }
                return Operations.CartValidators.payableCart(cart);
            };
            return PaymentValidators;
        }());
        Operations.PaymentValidators = PaymentValidators;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        var LogOnRequestHandler = (function (_super) {
            __extends(LogOnRequestHandler, _super);
            function LogOnRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LogOnRequestHandler.prototype.supportedRequestType = function () {
                return Authentication.LogOnRequest;
            };
            LogOnRequestHandler.prototype.executeAsync = function (request) {
                var _this = this;
                if (LogOnRequestHandler._isLogOnInProgress) {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnCanceledBecauseLogOnInProgress(request.correlationId);
                    return Commerce.AsyncResult.createResolved({ canceled: true, data: null }).getPromise();
                }
                LogOnRequestHandler._isLogOnInProgress = true;
                var logOnQueue = new Commerce.AsyncQueue();
                Commerce.RetailLogger.posAuthentication_ProcessLogOnBegin(request.correlationId);
                if (Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode()) {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED, "true");
                    Commerce.RetailLogger.posAuthentication_AadLogonModeEnabledSoMarkAsInitiated(request.correlationId);
                }
                logOnQueue.enqueue(function () {
                    return logOnQueue.cancelOn(_this._executeTriggersAndLogOn(request.correlationId, request.operatorId, request.password, request.extendedCredentials, request.grantType, request.doNotUpdateSession));
                }).enqueue(function () {
                    return logOnQueue.cancelOn(_this._checkCurrentEmployeeForPasswordExpiringAndHandle(request.correlationId));
                });
                return logOnQueue.run()
                    .done(function () {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnSuccess(request.correlationId);
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.FIRST_TIME_USE, Commerce.StringExtensions.EMPTY);
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnDidntSucceed(request.correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                })
                    .always(function () {
                    LogOnRequestHandler._isLogOnInProgress = false;
                })
                    .map(function (queueResult) {
                    return { canceled: queueResult.canceled, data: new Authentication.LogOnResponse() };
                })
                    .getPromise();
            };
            LogOnRequestHandler.prototype._executeTriggersAndLogOn = function (correlationId, operatorId, password, extendedCredentials, grantType, doNotUpdateSession) {
                var _this = this;
                var logOnWithTriggersQueue = new Commerce.AsyncQueue();
                logOnWithTriggersQueue.enqueue(function () {
                    var options = { operatorId: operatorId };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreLogOn, options);
                    return logOnWithTriggersQueue.cancelOn(preTriggerResult);
                }).enqueue(function () {
                    return _this._logOn(correlationId, operatorId, password, extendedCredentials, grantType);
                }).enqueue(function () {
                    var options = {
                        employee: Commerce.Session.instance.CurrentEmployee
                    };
                    return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostLogOn, options);
                });
                return logOnWithTriggersQueue.run().done(function (queueResult) {
                    if (!queueResult.canceled) {
                        Commerce.UserActivityTracker.setupServerConfiguredAutoExitTimeout();
                        if (Commerce.Peripherals.instance && Commerce.Peripherals.instance.dualDisplay) {
                            Commerce.Peripherals.instance.dualDisplay.initialize();
                        }
                    }
                });
            };
            LogOnRequestHandler.prototype._logOn = function (correlationId, operatorId, password, extendedCredentials, grantType, doNotUpdateSession) {
                var _this = this;
                var userIdAndPasswordRequired = Commerce.ObjectExtensions.isNullOrUndefined(extendedCredentials)
                    && !Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode();
                if (userIdAndPasswordRequired) {
                    if ((Commerce.StringExtensions.isEmptyOrWhitespace(operatorId) || Commerce.StringExtensions.isEmptyOrWhitespace(password))) {
                        var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATOR_ID_PASSWORD_NOT_SPECIFIED)];
                        Commerce.RetailLogger.posAuthentication_ProcessLogOnArgumentsInvalid(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                }
                var deviceToken = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY);
                var deviceId = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY);
                if (deviceToken == null || deviceId == null) {
                    var errors = [
                        new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICETOKENVALIDATIONFAILED.serverErrorCode)
                    ];
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnDeviceInformationInvalid(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                var logOnQueue = new Commerce.AsyncQueue();
                logOnQueue.enqueue(function () {
                    if (Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode()) {
                        return Commerce.Utilities.LogonHelper.aadAuthenticateUser(correlationId, operatorId, password);
                    }
                    else {
                        return Commerce.Utilities.LogonHelper.resourceOwnedPasswordLogon(correlationId, operatorId, password, null, doNotUpdateSession, extendedCredentials, grantType);
                    }
                }).enqueue(function () {
                    if (Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode() &&
                        (Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED) === "true")) {
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED, "false");
                        Commerce.RetailLogger.posAuthentication_AadLogonCompletedSoClearInitiatedMarker(correlationId);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnStartSession(correlationId);
                    return Commerce.Model.Managers.Factory
                        .getManager(Commerce.Model.Managers.IAuthenticationManagerName)
                        .startSessionAsync(correlationId);
                }).enqueue(function () {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnGetAndApplyEmployeeToSession(correlationId);
                    return Commerce.Model.Managers.Factory
                        .getManager(Commerce.Model.Managers.IOperatorManagerName)
                        .getCurrentEmployeeAsync().done(function (employee) {
                        Commerce.Session.instance.CurrentEmployee = employee;
                        Commerce.Session.instance.isSessionStateValid = true;
                        Commerce.RetailLogger.posAuthentication_ProcessLogOnEmployeeAppliedToSession(correlationId, employee.StaffId);
                    });
                }).enqueue(function () {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnLoadingChannelConfiguration(correlationId);
                    return Commerce.ApplicationContextLoader.loadChannelConfigurationComponents();
                }).enqueue(function () {
                    Commerce.NotificationHelper.setBackgroundGetNotifications(correlationId);
                    return _this._setLanguageAndConfigureCart(correlationId);
                });
                if (Commerce.Peripherals.instance && Commerce.Peripherals.instance.lineDisplay) {
                    logOnQueue.enqueue(function () {
                        Commerce.RetailLogger.posAuthentication_ProcessLogOnOpenLineDisplay(correlationId);
                        return Commerce.Peripherals.instance.lineDisplay.openDevice().done(function () {
                            Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayIdleText();
                        }).recoverOnFailure(function (errors) {
                            Commerce.RetailLogger.posAuthentication_ProcessLogOnOpenLineDisplayFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                            return Commerce.NotificationHandler.displayClientErrors(errors);
                        });
                    });
                }
                return logOnQueue.run().done(function () {
                    var userSessionId = TsLogging.Utils.generateGuid();
                    TsLogging.LoggerBase.setUserSession(userSessionId, Commerce.Session.instance.CurrentEmployee.StaffId);
                    Commerce.RetailLogger.logon(userSessionId);
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        var previousAppVersion = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.APPLICATION_VERSION);
                        var currentAppVersion_1 = Commerce.ViewModelAdapter.getApplicationVersion();
                        if (previousAppVersion !== currentAppVersion_1) {
                            Commerce.Model.Managers.Factory
                                .getManager(Commerce.Model.Managers.IStoreOperationsManagerName)
                                .updateApplicationVersion(currentAppVersion_1)
                                .done(function () {
                                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.APPLICATION_VERSION, currentAppVersion_1);
                            });
                        }
                    }
                }).recoverOnFailure(function (errors) {
                    return _this._handleErrorsAndLog(errors, correlationId, operatorId).always(function () {
                        if (Commerce.Utilities.LogonHelper.isAadEmployeeLoginMode()) {
                            if (Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED) === "true") {
                                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.AAD_OPERATOR_LOGIN_INITIATED, "false");
                            }
                            var provider = Authentication.AuthenticationProviderManager.instance
                                .getImplicitGrantProvider(Authentication.AuthenticationProviderResourceType.USER);
                            provider.logoff();
                        }
                    });
                });
            };
            LogOnRequestHandler.prototype._setLanguageAndConfigureCart = function (correlationId) {
                var setAppLanguageResult;
                var setCustomUIStringsResult;
                var getProductDetailsResult;
                var getCustomerResult;
                Commerce.RetailLogger.posAuthentication_ProcessLogOnConfigureLanguageAndCart(correlationId);
                if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.CurrentEmployee.CultureName) &&
                    Commerce.Session.instance.CurrentEmployee.CultureName !== Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName) {
                    setAppLanguageResult = Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.Session.instance.CurrentEmployee.CultureName);
                }
                else {
                    setAppLanguageResult = Commerce.VoidAsyncResult.createResolved();
                }
                var uiStringsCulture = Commerce.StringExtensions.EMPTY;
                if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.CurrentEmployee.CultureName)) {
                    uiStringsCulture = Commerce.Session.instance.CurrentEmployee.CultureName;
                }
                else if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)) {
                    uiStringsCulture = Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName;
                }
                else {
                    uiStringsCulture = Commerce.ViewModelAdapter.getDefaultUILanguage();
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(uiStringsCulture)) {
                    setCustomUIStringsResult = Commerce.Model.Managers.Factory
                        .getManager(Commerce.Model.Managers.IChannelManagerName)
                        .getCustomUIStrings(uiStringsCulture)
                        .done(function (customStrings) {
                        Commerce.StringResourceManager.setCustomStringValues(customStrings);
                    });
                }
                else {
                    setCustomUIStringsResult = Commerce.VoidAsyncResult.createResolved();
                }
                var cart = Commerce.Session.instance.cart;
                if (!Commerce.StringExtensions.isNullOrWhitespace(cart.Id)) {
                    var cartLineProductIds_1 = [];
                    cart.CartLines.forEach(function (cartLine) {
                        cartLineProductIds_1.push(cartLine.ProductId);
                    });
                    var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                    getProductDetailsResult = Commerce.Model.Managers.Factory
                        .getManager(Commerce.Model.Managers.IProductManagerName)
                        .getByIdsAsync(cartLineProductIds_1, channelId)
                        .done(function (products) {
                        if (Commerce.ArrayExtensions.hasElements(products)) {
                            products.forEach(function (product, index) {
                                Commerce.Session.instance.addToProductsInCartCache(product);
                            });
                        }
                    });
                }
                else {
                    getProductDetailsResult = Commerce.VoidAsyncResult.createResolved();
                }
                if (!Commerce.StringExtensions.isNullOrWhitespace(cart.CustomerId)) {
                    getCustomerResult = Commerce.Model.Managers.Factory
                        .getManager(Commerce.Model.Managers.ICustomerManagerName)
                        .getCustomersByAccountNumbersAsync([cart.CustomerId])
                        .done(function (result) {
                        if (Commerce.ArrayExtensions.hasElements(result)) {
                            Commerce.Session.instance.Customer = result[0];
                        }
                    });
                }
                else {
                    getCustomerResult = Commerce.VoidAsyncResult.createResolved();
                }
                return Commerce.VoidAsyncResult.join([setAppLanguageResult, setCustomUIStringsResult, getProductDetailsResult, getCustomerResult])
                    .recoverOnFailure(function (errors) {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnConfigureLanguageAndCartFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createResolved();
                });
            };
            LogOnRequestHandler.prototype._checkCurrentEmployeeForPasswordExpiringAndHandle = function (correlationId) {
                if (Commerce.Session.instance.CurrentEmployee.NumberOfDaysToPasswordExpiry <= 0) {
                    return Commerce.VoidAsyncResult.createResolved();
                }
                var context = {
                    staffId: Commerce.Session.instance.CurrentEmployee.StaffId
                };
                var passwordExpiredActivity = new Commerce.Activities.NotifyPasswordExpiredActivity(context);
                return passwordExpiredActivity.execute().map(function () {
                    return {
                        canceled: !passwordExpiredActivity.response.continueProcessing
                    };
                });
            };
            LogOnRequestHandler.prototype._handleErrorsAndLog = function (errors, correlationId, operatorId) {
                if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERPASSWORDEXPIRED.serverErrorCode)) {
                    return this._logAndHandlePasswordExpired(correlationId, errors, operatorId);
                }
                else if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICETOKENVALIDATIONFAILED.serverErrorCode)) {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnDeviceTokenInvalid(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    var errorsToLog = Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors);
                    var messageToLog = Commerce.StringExtensions.format("LoginView. Errors:{0}", errorsToLog);
                    Commerce.RetailLogger.coreStorageClearInitiated(correlationId, messageToLog);
                    Commerce.ApplicationStorage.clear();
                    Commerce.Utilities.OfflineHelper.stopOffline();
                    Commerce.ViewModelAdapter.navigate(Commerce.Helpers.DeviceActivationHelper.GUIDED_ACTIVATION_VIEW_NAME);
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                else if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAUTHENTICATIONCREDENTIALS.serverErrorCode)) {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnInvalidCredentials(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                else {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
            };
            LogOnRequestHandler.prototype._logAndHandlePasswordExpired = function (correlationId, errors, currentOperatorID) {
                var displayMessageResult = new Commerce.VoidAsyncResult();
                var passwordExpiredErrors = Commerce.ErrorHelper.filterErrorsByType(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERPASSWORDEXPIRED.serverErrorCode);
                if (Commerce.ArrayExtensions.hasElements(passwordExpiredErrors)) {
                    Commerce.RetailLogger.posAuthentication_ProcessLogOnPasswordExpired(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                    var passwordExpiredException = passwordExpiredErrors[0].commerceException;
                    var staffIdFromException = !Commerce.ObjectExtensions.isNullOrUndefined(passwordExpiredException) ? passwordExpiredException.StaffId : null;
                    var passwordChangeStaffId_1 = !Commerce.StringExtensions.isEmptyOrWhitespace(staffIdFromException) ? staffIdFromException : currentOperatorID;
                    Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERPASSWORDEXPIRED.messageResource, Commerce.MessageType.Info, Commerce.MessageBoxButtons.Default).always(function () {
                        Commerce.ViewModelAdapter.navigate("ChangePasswordView", { staffId: passwordChangeStaffId_1 });
                        displayMessageResult.reject(errors);
                    });
                }
                else {
                    displayMessageResult.resolve();
                }
                return displayMessageResult;
            };
            LogOnRequestHandler._isLogOnInProgress = false;
            return LogOnRequestHandler;
        }(Commerce.RequestHandler));
        Authentication.LogOnRequestHandler = LogOnRequestHandler;
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        "use strict";
        var LogOnRequest = (function (_super) {
            __extends(LogOnRequest, _super);
            function LogOnRequest(correlationId, operatorId, password, extendedCredentials, grantType, doNotUpdateSession) {
                var _this = _super.call(this, correlationId) || this;
                _this.operatorId = operatorId;
                _this.password = password;
                _this.extendedCredentials = extendedCredentials;
                _this.grantType = grantType;
                _this.doNotUpdateSession = doNotUpdateSession;
                return _this;
            }
            return LogOnRequest;
        }(Commerce.Request));
        Authentication.LogOnRequest = LogOnRequest;
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        var LogOnResponse = (function (_super) {
            __extends(LogOnResponse, _super);
            function LogOnResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return LogOnResponse;
        }(Commerce.Response));
        Authentication.LogOnResponse = LogOnResponse;
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        var Providers;
        (function (Providers) {
            "use strict";
            var AzureActiveDirectoryUserAuthenticationProvider = (function () {
                function AzureActiveDirectoryUserAuthenticationProvider() {
                    this.mayLogoff = false;
                }
                AzureActiveDirectoryUserAuthenticationProvider.prototype.logon = function (parameters) {
                    var _this = this;
                    this.mayLogoff = true;
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.AAD_LOGOFF_INITIATED, "false");
                    return new Commerce.AsyncQueue()
                        .enqueue(function () {
                        Commerce.Host.instance.azureActiveDirectoryAdapter.setTenantId(parameters[AzureActiveDirectoryUserAuthenticationProvider.PARAMETER_TENANTID]);
                        return Commerce.Host.instance.azureActiveDirectoryAdapter.login().done(function (userDetails) {
                            _this.user = userDetails;
                        });
                    })
                        .enqueue(function () {
                        return Commerce.Host.instance.azureActiveDirectoryAdapter.acquireToken(Commerce.Config.aadRetailServerResourceId);
                    }).run().map(function (result) { return void 0; });
                };
                AzureActiveDirectoryUserAuthenticationProvider.prototype.logoff = function () {
                    if (!this.mayLogoff) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.AAD_LOGOFF_INITIATED, "true");
                    this.user = null;
                    this.mayLogoff = false;
                    return Commerce.Host.instance.azureActiveDirectoryAdapter.logout();
                };
                AzureActiveDirectoryUserAuthenticationProvider.prototype.acquireToken = function () {
                    throw new Error("Not supported.");
                };
                AzureActiveDirectoryUserAuthenticationProvider.prototype.acquireTokenWithParam = function (parameters) {
                    Commerce.Host.instance.azureActiveDirectoryAdapter.setTenantId(parameters[AzureActiveDirectoryUserAuthenticationProvider.PARAMETER_TENANTID]);
                    var token = Commerce.Host.instance.azureActiveDirectoryAdapter.retrieveAvailableToken(Commerce.Config.aadRetailServerResourceId);
                    var authenticationToken = null;
                    var currentUser = this.user;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(token)) {
                        var currentUserFullName = void 0;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(currentUser)) {
                            currentUserFullName = currentUser.fullName;
                        }
                        else {
                            currentUserFullName = Commerce.StringExtensions.EMPTY;
                            Commerce.RetailLogger.librariesAuthenticationAadUserDetailsNotInitialized();
                        }
                        authenticationToken = {
                            token: token,
                            tokenType: "bearer",
                            name: currentUserFullName
                        };
                    }
                    return Commerce.AsyncResult.createResolved(authenticationToken);
                };
                AzureActiveDirectoryUserAuthenticationProvider.prototype.restoreToken = function (token) {
                    throw new Error("Not supported.");
                };
                AzureActiveDirectoryUserAuthenticationProvider.PARAMETER_TENANTID = "TenantId";
                return AzureActiveDirectoryUserAuthenticationProvider;
            }());
            Providers.AzureActiveDirectoryUserAuthenticationProvider = AzureActiveDirectoryUserAuthenticationProvider;
        })(Providers = Authentication.Providers || (Authentication.Providers = {}));
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        var Providers;
        (function (Providers) {
            "use strict";
            var CommerceUserAuthenticationProvider = (function () {
                function CommerceUserAuthenticationProvider() {
                    this.commerceToken = null;
                }
                Object.defineProperty(CommerceUserAuthenticationProvider.prototype, "authenticationManager", {
                    get: function () {
                        return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuthenticationManagerName);
                    },
                    enumerable: true,
                    configurable: true
                });
                CommerceUserAuthenticationProvider.prototype.logon = function (userId, userPassword, scope, parameters) {
                    var _this = this;
                    var operationId = parameters[CommerceUserAuthenticationProvider.OPERATION_ID_PARAMETER_NAME];
                    var logonRequest = {
                        grant_type: parameters[CommerceUserAuthenticationProvider.GRANT_TYPE_PARAMETER_NAME] || CommerceUserAuthenticationProvider.PASSWORD_GRANT_TYPE,
                        client_id: Commerce.Config.commerceAuthenticationAudience,
                        username: userId,
                        password: userPassword,
                        credential: parameters[CommerceUserAuthenticationProvider.CREDENTIALS_PARAMETER_NAME]
                    };
                    if (!Commerce.StringExtensions.isNullOrWhitespace(operationId)) {
                        logonRequest.operation_id = operationId;
                    }
                    return this.authenticationManager.requestUserToken(logonRequest)
                        .done(function (commerceToken) {
                        if (commerceToken.token_type === "bearer") {
                            commerceToken.token_type = "id_token";
                        }
                        _this.commerceToken = commerceToken;
                    });
                };
                CommerceUserAuthenticationProvider.prototype.logoff = function () {
                    this.commerceToken = null;
                    return Commerce.VoidAsyncResult.createResolved();
                };
                CommerceUserAuthenticationProvider.prototype.acquireToken = function () {
                    var authenticationToken = null;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.commerceToken)) {
                        authenticationToken = {
                            token: this.commerceToken.id_token,
                            tokenType: this.commerceToken.token_type,
                            name: ""
                        };
                    }
                    return Commerce.AsyncResult.createResolved(authenticationToken);
                };
                CommerceUserAuthenticationProvider.prototype.restoreToken = function (token) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(token)) {
                        this.commerceToken = null;
                    }
                    else {
                        this.commerceToken = {
                            id_token: token.token,
                            access_token: "",
                            expires_in: 0,
                            token_type: token.tokenType
                        };
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                CommerceUserAuthenticationProvider.EXTENDEDLOGON_BARCODE_GRANT_TYPE = "auth://example.auth.contoso.com/barcode";
                CommerceUserAuthenticationProvider.EXTENDEDLOGON_MSR_GRANT_TYPE = "auth://example.auth.contoso.com/msr";
                CommerceUserAuthenticationProvider.EXTENDEDLOGON_ALL_GRANT_TYPE = "*";
                CommerceUserAuthenticationProvider.PASSWORD_GRANT_TYPE = "password";
                CommerceUserAuthenticationProvider.OPERATION_ID_PARAMETER_NAME = "OperationId";
                CommerceUserAuthenticationProvider.CREDENTIALS_PARAMETER_NAME = "Credentials";
                CommerceUserAuthenticationProvider.GRANT_TYPE_PARAMETER_NAME = "GrantType";
                return CommerceUserAuthenticationProvider;
            }());
            Providers.CommerceUserAuthenticationProvider = CommerceUserAuthenticationProvider;
        })(Providers = Authentication.Providers || (Authentication.Providers = {}));
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Authentication;
    (function (Authentication) {
        var Providers;
        (function (Providers) {
            "use strict";
            var DeviceAuthenticationProvider = (function () {
                function DeviceAuthenticationProvider() {
                }
                DeviceAuthenticationProvider.prototype.logon = function (userId, userPassword, scope, parameters) {
                    throw new Error("Not supported");
                };
                DeviceAuthenticationProvider.prototype.logoff = function () {
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY, Commerce.StringExtensions.EMPTY);
                    return Commerce.VoidAsyncResult.createResolved();
                };
                DeviceAuthenticationProvider.prototype.acquireToken = function () {
                    var tokenValue = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY);
                    var authenticationToken = null;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(tokenValue)) {
                        authenticationToken = {
                            token: tokenValue,
                            tokenType: "",
                            name: ""
                        };
                    }
                    return Commerce.AsyncResult.createResolved(authenticationToken);
                };
                DeviceAuthenticationProvider.prototype.restoreToken = function (token) {
                    throw new Error("Not supported.");
                };
                return DeviceAuthenticationProvider;
            }());
            Providers.DeviceAuthenticationProvider = DeviceAuthenticationProvider;
        })(Providers = Authentication.Providers || (Authentication.Providers = {}));
    })(Authentication = Commerce.Authentication || (Commerce.Authentication = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateAdvancedCashManagementTransactionClientRequestHandler = (function (_super) {
            __extends(CreateAdvancedCashManagementTransactionClientRequestHandler, _super);
            function CreateAdvancedCashManagementTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateAdvancedCashManagementTransactionClientRequest;
            };
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                var _this = this;
                var correlationId = request.correlationId;
                var title = this._getTitleString(request.transactionType);
                var amount;
                var createFromAvailableEntry;
                var availableStoreSafes;
                var availableShifts;
                var allEmployees;
                var availableEntries;
                var selectedAvailableEntry;
                var transaction;
                Commerce.RetailLogger.createAdvancedCashManagementTransactionClientRequestStarted(correlationId, request.transactionType.Name);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var getEmployeesResult = Commerce.ApplicationContext.Instance.storeEmployeeListAsync.value.done(function (operators) {
                        allEmployees = operators;
                    });
                    var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                    var getStoreSafesResult = manager.getStoreSafesAsync()
                        .done(function (storeSafes) {
                        availableStoreSafes = storeSafes;
                    }).fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                    var getShiftsResult = manager.getShiftsAsync(Commerce.Proxy.Entities.ShiftStatus.None, correlationId)
                        .done(function (shifts) {
                        availableShifts = shifts;
                    })
                        .fail(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                    });
                    var availableEntriesRequest = new Commerce.GetAvailableUnreconciledEntriesServiceRequest(correlationId, request.transactionType, request.transactionContext, request.shift, request.storeSafe);
                    var availableEntriesResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(availableEntriesRequest))
                        .map(function (result) {
                        return result.canceled ? null : result.data.shiftReconciliationLines;
                    }).done(function (transactions) {
                        availableEntries = transactions;
                    });
                    return Commerce.VoidAsyncResult.join([getEmployeesResult, getStoreSafesResult, getShiftsResult, availableEntriesResult]);
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this._executeGetCashManagementTransactionSourceActivityAsync(correlationId, title, request.transactionType, availableEntries, allEmployees, availableStoreSafes));
                }).enqueue(function (response) {
                    createFromAvailableEntry = response.data.createFromAvailableEntry;
                    if (!createFromAvailableEntry) {
                        return asyncQueue.cancelOn(_this._executeGetCashManagementTransactionAmountActivityAsync(correlationId, title, request.transactionType));
                    }
                    else {
                        selectedAvailableEntry = response.data.selectedAvailableEntry;
                        return Commerce.AsyncResult.createResolved({
                            canceled: false,
                            data: { amount: null, tenderCountingRequired: false }
                        });
                    }
                }).enqueue(function (response) {
                    if (!createFromAvailableEntry) {
                        if (!response.data.tenderCountingRequired) {
                            amount = response.data.amount;
                            return Commerce.AsyncResult.createResolved();
                        }
                        else {
                            var asyncInnerQueue_2 = new Commerce.AsyncQueue();
                            var defaultDenominationDetails_1;
                            asyncInnerQueue_2.enqueue(function () {
                                var cashDeclaration;
                                return Commerce.ApplicationContext.Instance.cashDeclarationsMapAsync.value.done(function (map) {
                                    if (map.hasItem(Commerce.ApplicationContext.Instance.deviceConfiguration.Currency)) {
                                        cashDeclaration = map.getItem(Commerce.ApplicationContext.Instance.deviceConfiguration.Currency);
                                        var denominationDetails_1 = [];
                                        cashDeclaration.forEach(function (cashDeclaration) {
                                            var denominationDetail = {};
                                            denominationDetail.Type = cashDeclaration.CashTypeValue;
                                            denominationDetail.Currency = cashDeclaration.Currency;
                                            denominationDetail.DenominationAmount = cashDeclaration.Amount;
                                            denominationDetail.QuantityDeclared = 0;
                                            denominationDetail.AmountDeclared = 0;
                                            denominationDetails_1.push(denominationDetail);
                                        });
                                        defaultDenominationDetails_1 = denominationDetails_1;
                                    }
                                });
                            }).enqueue(function () {
                                var activity = new Commerce.Activities.GetDenominationTotalsActivity({
                                    pageTitle: title,
                                    denominationDetails: defaultDenominationDetails_1,
                                    tenderTypeId: _this._getTenderTypeId(),
                                    correlationId: correlationId
                                });
                                return asyncInnerQueue_2.cancelOn(activity.execute()
                                    .done(function (result) {
                                    amount = Commerce.Helpers.CurrencyHelper.getTotalDenominationAmountDeclaredInCurrency(result.data, Commerce.ApplicationContext.Instance.deviceConfiguration.Currency);
                                }));
                            });
                            return asyncQueue.cancelOn(asyncInnerQueue_2.run());
                        }
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                }).enqueue(function () {
                    return asyncQueue.cancelOn(_this._executeCreateCashManagementTransactionActivityAsync(correlationId, title, request.transactionContext, request.transactionType, amount, request.shift, request.storeSafe, createFromAvailableEntry, selectedAvailableEntry, availableShifts, availableStoreSafes));
                }).enqueue(function (response) {
                    if (!response.canceled
                        && (!Commerce.ObjectExtensions.isNullOrUndefined(response.data.transaction))) {
                        transaction = response.data.transaction;
                        if (createFromAvailableEntry) {
                            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                            var shiftReconciliationLines = [];
                            shiftReconciliationLines.push(selectedAvailableEntry);
                            var shiftReconciliationLine = new Commerce.Proxy.Entities.ShiftReconciliationLineClass(transaction);
                            shiftReconciliationLines.push(shiftReconciliationLine);
                            return manager.reconcileLinesAsync(shiftReconciliationLines, Commerce.StringExtensions.EMPTY)
                                .fail(function (errors) {
                                Commerce.NotificationHandler.displayClientErrors(errors);
                            });
                        }
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run()
                    .map(function (result) {
                    Commerce.RetailLogger.createAdvancedCashManagementTransactionClientRequestSuccess(correlationId, request.transactionType.Name);
                    var nonSalesTransaction = result.canceled ? null : transaction;
                    var response = new CashManagement.CreateAdvancedCashManagementTransactionClientResponse(nonSalesTransaction);
                    return {
                        canceled: result.canceled,
                        data: response
                    };
                }).fail(function (errors) {
                    Commerce.RetailLogger.createAdvancedCashManagementTransactionClientRequestFailed(correlationId, request.transactionType.Name, Commerce.ErrorHelper.serializeError(errors));
                }).getPromise();
            };
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype._executeGetCashManagementTransactionSourceActivityAsync = function (correlationId, title, transactionType, availableEntries, allEmployees, storeSafes) {
                var getCashManagementTransactionSourceActivity = new Commerce.Activities.GetCashManagementTransactionSourceActivity({
                    correlationId: correlationId,
                    title: title,
                    transactionType: transactionType,
                    availableEntries: availableEntries,
                    allEmployees: allEmployees,
                    storeSafes: storeSafes
                });
                return getCashManagementTransactionSourceActivity.execute();
            };
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype._executeGetCashManagementTransactionAmountActivityAsync = function (correlationId, title, transactionType) {
                var getCashManagementTransactionAmountActivity = new Commerce.Activities.GetCashManagementTransactionAmountActivity({
                    correlationId: correlationId,
                    title: title,
                    transactionType: transactionType
                });
                return getCashManagementTransactionAmountActivity.execute();
            };
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype._executeCreateCashManagementTransactionActivityAsync = function (correlationId, title, transactionContext, transactionType, amount, contextShift, contextStoreSafe, createFromAvailableEntry, selectedAvailableEntry, availableShifts, availableStoreSafes) {
                var createCashManagementTransactionActivity = new Commerce.Activities.CreateCashManagementTransactionActivity({
                    correlationId: correlationId,
                    title: title,
                    transactionContext: transactionContext,
                    transactionType: transactionType,
                    amount: amount,
                    contextShift: contextShift,
                    contextStoreSafe: contextStoreSafe,
                    createFromAvailableEntry: createFromAvailableEntry,
                    selectedAvailableEntry: selectedAvailableEntry,
                    availableShifts: availableShifts,
                    availableStoreSafes: availableStoreSafes
                });
                return createCashManagementTransactionActivity.execute();
            };
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype._getTitleString = function (transactionType) {
                var title = null;
                if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(transactionType)) {
                    title = Commerce.ViewModelAdapter.getResourceString("string_4186");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(transactionType)) {
                    title = Commerce.ViewModelAdapter.getResourceString("string_4009");
                }
                else if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(transactionType)) {
                    title = Commerce.ViewModelAdapter.getResourceString("string_30102");
                }
                return title;
            };
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype._getTenderTypeId = function () {
                var tenderType = this._getTenderType();
                return Commerce.ObjectExtensions.isNullOrUndefined(tenderType) ? Commerce.StringExtensions.EMPTY : tenderType.TenderTypeId;
            };
            CreateAdvancedCashManagementTransactionClientRequestHandler.prototype._getTenderType = function () {
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(Commerce.Operations.RetailOperation.PayCash);
                return tenderType;
            };
            return CreateAdvancedCashManagementTransactionClientRequestHandler;
        }(Commerce.RequestHandler));
        CashManagement.CreateAdvancedCashManagementTransactionClientRequestHandler = CreateAdvancedCashManagementTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateCashManagementTransactionRequestHandlerBase = (function () {
            function CreateCashManagementTransactionRequestHandlerBase() {
            }
            CreateCashManagementTransactionRequestHandlerBase.prototype.validateAndPerformCashManagementOperationAsync = function (request, receiptTypeToPrint) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(request.amountEntered) || request.amountEntered < 0 || isNaN(request.amountEntered)) {
                    var invalidAmountErrors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.AMOUNT_IS_NOT_VALID)];
                    return Commerce.AsyncResult.createRejected(invalidAmountErrors);
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(request.shift) || request.shift.ShiftId < 1) {
                    var noShiftErrors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SHIFT_IS_NOT_VALID)];
                    return Commerce.AsyncResult.createRejected(noShiftErrors);
                }
                else {
                    var nonSalesTransaction_1;
                    var primaryCurrencyCode = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(nonSalesTransaction_1)) {
                        nonSalesTransaction_1 = { Id: "" };
                    }
                    nonSalesTransaction_1.Amount = request.amountEntered;
                    nonSalesTransaction_1.ForeignCurrency = primaryCurrencyCode;
                    nonSalesTransaction_1.Description = request.operationComment;
                    nonSalesTransaction_1.ShiftId = request.shift.ShiftId.toString();
                    nonSalesTransaction_1.ShiftTerminalId = request.shift.TerminalId;
                    nonSalesTransaction_1.DenominationDetails = !Commerce.ObjectExtensions.isNullOrUndefined(request.denominationDetails) ?
                        request.denominationDetails : [];
                    if (request.isOperationAborted) {
                        nonSalesTransaction_1.TransactionStatusValue = Commerce.Proxy.Entities.TransactionStatus.Aborted;
                    }
                    this.updateTransactionProperties(request, nonSalesTransaction_1);
                    var transaction_1;
                    var operationQueue_1 = new Commerce.AsyncQueue();
                    operationQueue_1.enqueue(function () {
                        var createNonSalesTransactionServiceRequest = new Commerce.CreateNonSalesTransactionServiceRequest(request.correlationId, nonSalesTransaction_1);
                        return operationQueue_1.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createNonSalesTransactionServiceRequest)))
                            .done(function (result) {
                            if (!result.canceled) {
                                transaction_1 = result.data.transaction;
                            }
                        });
                    });
                    if (!request.isOperationAborted) {
                        operationQueue_1.enqueue(function () {
                            var printReceiptsAsyncQueue = new Commerce.AsyncQueue();
                            printReceiptsAsyncQueue.enqueue(function () {
                                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                                return salesOrderManager.getReceiptsForPrintAsync(transaction_1.Id, false, receiptTypeToPrint, false, request.shift.ShiftId, request.shift.TerminalId, null, null, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                            }).enqueue(function (receipts) {
                                var receiptActivity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts });
                                return receiptActivity.execute().fail(function (errors) {
                                    Commerce.RetailLogger.viewsDailyOperationsCashManagementViewOperationFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                                }).recoverOnFailure(function () {
                                    return Commerce.AsyncResult.createResolved({ canceled: false });
                                });
                            });
                            return printReceiptsAsyncQueue.run();
                        });
                        operationQueue_1.enqueue(function () {
                            return _this._validateCashDrawerLimitAsync(Commerce.LoggerHelper.getNewCorrelationId())
                                .recoverOnFailure(function (errors) {
                                return Commerce.NotificationHandler.displayClientErrors(errors).recoverOnFailure(function () {
                                    return Commerce.VoidAsyncResult.createResolved();
                                });
                            });
                        });
                    }
                    return operationQueue_1.run()
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? undefined : transaction_1
                        };
                    });
                }
            };
            CreateCashManagementTransactionRequestHandlerBase.prototype._validateCashDrawerLimitAsync = function (correlationId) {
                var request = new Commerce.ValidateCashDrawerLimitClientRequest(Commerce.Session.instance.Shift.TerminalId, Commerce.Session.instance.Shift.ShiftId, correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            return CreateCashManagementTransactionRequestHandlerBase;
        }());
        CashManagement.CreateCashManagementTransactionRequestHandlerBase = CreateCashManagementTransactionRequestHandlerBase;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateFloatEntryTransactionClientRequestHandler = (function (_super) {
            __extends(CreateFloatEntryTransactionClientRequestHandler, _super);
            function CreateFloatEntryTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateFloatEntryTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateFloatEntryTransactionClientRequest;
            };
            CreateFloatEntryTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.FloatEntry)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateFloatEntryTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateFloatEntryTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateFloatEntryTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(request.fromShift)) {
                    transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                    transaction.FromShiftId = request.fromShift.ShiftId.toString();
                    transaction.FromShiftTerminalId = request.fromShift.TerminalId;
                    transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                    transaction.ToShiftId = request.shift.ShiftId.toString();
                    transaction.ToShiftTerminalId = request.shift.TerminalId;
                }
            };
            return CreateFloatEntryTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateFloatEntryTransactionClientRequestHandler = CreateFloatEntryTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeFloatEntryTransactionClientRequestHandler = (function (_super) {
            __extends(CreateSafeFloatEntryTransactionClientRequestHandler, _super);
            function CreateSafeFloatEntryTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateSafeFloatEntryTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateSafeFloatEntryTransactionClientRequest;
            };
            CreateSafeFloatEntryTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.FloatEntry)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateSafeFloatEntryTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateSafeFloatEntryTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateSafeFloatEntryTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value;
                transaction.TransactionSourceContextTypeValue = request.transactionSourceContextType;
                if (transaction.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                    transaction.FromShiftId = request.fromShiftKey.ShiftId.toString();
                    transaction.FromShiftTerminalId = request.fromShiftKey.ShiftTerminalId;
                }
                else if (transaction.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                    transaction.FromSafe = request.fromStoreSafe.SafeNumber;
                }
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                transaction.ToSafe = request.toStoreSafe.SafeNumber;
            };
            return CreateSafeFloatEntryTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateSafeFloatEntryTransactionClientRequestHandler = CreateSafeFloatEntryTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeStartingAmountTransactionClientRequestHandler = (function (_super) {
            __extends(CreateSafeStartingAmountTransactionClientRequestHandler, _super);
            function CreateSafeStartingAmountTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateSafeStartingAmountTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateSafeStartingAmountTransactionClientRequest;
            };
            CreateSafeStartingAmountTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.StartingAmount)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateSafeStartingAmountTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateSafeStartingAmountTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateSafeStartingAmountTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.Value;
                transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Bank;
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                transaction.ToSafe = request.toStoreSafe.SafeNumber;
            };
            return CreateSafeStartingAmountTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateSafeStartingAmountTransactionClientRequestHandler = CreateSafeStartingAmountTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeTenderRemovalTransactionClientRequestHandler = (function (_super) {
            __extends(CreateSafeTenderRemovalTransactionClientRequestHandler, _super);
            function CreateSafeTenderRemovalTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateSafeTenderRemovalTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateSafeTenderRemovalTransactionClientRequest;
            };
            CreateSafeTenderRemovalTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.RemoveTender)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateSafeTenderRemovalTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateSafeTenderRemovalTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateSafeTenderRemovalTransactionClientRequest.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value;
                transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                transaction.FromSafe = request.fromStoreSafe.SafeNumber;
                transaction.TransactionDestinationContextTypeValue = request.transactionDestinationContextType;
                if (transaction.TransactionDestinationContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                    transaction.ToShiftId = request.toShiftKey.ShiftId.toString();
                    transaction.ToShiftTerminalId = request.toShiftKey.ShiftTerminalId;
                }
                else if (transaction.TransactionDestinationContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                    transaction.ToSafe = request.toStoreSafe.SafeNumber;
                }
            };
            return CreateSafeTenderRemovalTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateSafeTenderRemovalTransactionClientRequestHandler = CreateSafeTenderRemovalTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftFloatEntryTransactionClientRequestHandler = (function (_super) {
            __extends(CreateShiftFloatEntryTransactionClientRequestHandler, _super);
            function CreateShiftFloatEntryTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateShiftFloatEntryTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateShiftFloatEntryTransactionClientRequest;
            };
            CreateShiftFloatEntryTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.FloatEntry)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateShiftFloatEntryTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateShiftFloatEntryTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateShiftFloatEntryTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value;
                transaction.TransactionSourceContextTypeValue = request.transactionSourceContextType;
                if (transaction.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                    transaction.FromShiftId = request.fromShiftKey.ShiftId.toString();
                    transaction.FromShiftTerminalId = request.fromShiftKey.ShiftTerminalId;
                }
                else if (transaction.TransactionSourceContextTypeValue === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                    transaction.FromSafe = request.fromStoreSafe.SafeNumber;
                }
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                transaction.ToShiftId = request.shift.ShiftId.toString();
                transaction.ToShiftTerminalId = request.shift.TerminalId;
            };
            return CreateShiftFloatEntryTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateShiftFloatEntryTransactionClientRequestHandler = CreateShiftFloatEntryTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftStartingAmountTransactionClientRequestHandler = (function (_super) {
            __extends(CreateShiftStartingAmountTransactionClientRequestHandler, _super);
            function CreateShiftStartingAmountTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateShiftStartingAmountTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateShiftStartingAmountTransactionClientRequest;
            };
            CreateShiftStartingAmountTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.StartingAmount)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateShiftStartingAmountTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateShiftStartingAmountTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateShiftStartingAmountTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.Value;
                transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                transaction.FromSafe = request.fromStoreSafe.SafeNumber;
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                transaction.ToShiftId = request.shift.ShiftId.toString();
                transaction.ToShiftTerminalId = request.shift.TerminalId;
            };
            return CreateShiftStartingAmountTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateShiftStartingAmountTransactionClientRequestHandler = CreateShiftStartingAmountTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftTenderRemovalTransactionClientRequestHandler = (function (_super) {
            __extends(CreateShiftTenderRemovalTransactionClientRequestHandler, _super);
            function CreateShiftTenderRemovalTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateShiftTenderRemovalTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateShiftTenderRemovalTransactionClientRequest;
            };
            CreateShiftTenderRemovalTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.RemoveTender)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateShiftTenderRemovalTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateShiftTenderRemovalTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateShiftTenderRemovalTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value;
                transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                transaction.FromShiftId = request.shift.ShiftId.toString();
                transaction.FromShiftTerminalId = request.shift.TerminalId;
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                transaction.ToShiftId = request.toShiftKey.ShiftId.toString();
                transaction.ToShiftTerminalId = request.toShiftKey.ShiftTerminalId;
            };
            return CreateShiftTenderRemovalTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateShiftTenderRemovalTransactionClientRequestHandler = CreateShiftTenderRemovalTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateStartingAmountTransactionClientRequestHandler = (function (_super) {
            __extends(CreateStartingAmountTransactionClientRequestHandler, _super);
            function CreateStartingAmountTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateStartingAmountTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateStartingAmountTransactionClientRequest;
            };
            CreateStartingAmountTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.StartingAmount)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateStartingAmountTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateStartingAmountTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateStartingAmountTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.Value;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(request.fromStoreSafe)) {
                    transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                    transaction.FromSafe = request.fromStoreSafe.SafeNumber;
                    transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                    transaction.ToShiftId = request.shift.ShiftId.toString();
                    transaction.ToShiftTerminalId = request.shift.TerminalId;
                }
            };
            return CreateStartingAmountTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateStartingAmountTransactionClientRequestHandler = CreateStartingAmountTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateTenderRemovalTransactionClientRequestHandler = (function (_super) {
            __extends(CreateTenderRemovalTransactionClientRequestHandler, _super);
            function CreateTenderRemovalTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateTenderRemovalTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return CashManagement.CreateTenderRemovalTransactionClientRequest;
            };
            CreateTenderRemovalTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformCashManagementOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.RemoveTender)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new CashManagement.CreateTenderRemovalTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateTenderRemovalTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateTenderRemovalTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(request.toShift)) {
                    transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                    transaction.FromShiftId = request.shift.ShiftId.toString();
                    transaction.FromShiftTerminalId = request.shift.TerminalId;
                    transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                    transaction.ToShiftId = request.toShift.ShiftId.toString();
                    transaction.ToShiftTerminalId = request.toShift.TerminalId;
                }
            };
            return CreateTenderRemovalTransactionClientRequestHandler;
        }(CashManagement.CreateCashManagementTransactionRequestHandlerBase));
        CashManagement.CreateTenderRemovalTransactionClientRequestHandler = CreateTenderRemovalTransactionClientRequestHandler;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateAdvancedCashManagementTransactionClientRequest = (function (_super) {
            __extends(CreateAdvancedCashManagementTransactionClientRequest, _super);
            function CreateAdvancedCashManagementTransactionClientRequest(correlationId, shift, transactionType, transactionContext, storeSafe) {
                var _this = _super.call(this, correlationId) || this;
                _this.transactionType = transactionType;
                _this.shift = shift || Commerce.Session.instance.Shift;
                _this.transactionContext = transactionContext || Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                _this.storeSafe = storeSafe;
                if (transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                    && Commerce.ObjectExtensions.isNullOrUndefined(storeSafe)) {
                    throw new Error("Invalid options passed to constructor of CreateAdvancedCashManagementTransactionClientRequest: "
                        + "'storeSafe' can't be null when transactionContext is Safe");
                }
                return _this;
            }
            return CreateAdvancedCashManagementTransactionClientRequest;
        }(Commerce.Request));
        CashManagement.CreateAdvancedCashManagementTransactionClientRequest = CreateAdvancedCashManagementTransactionClientRequest;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateAdvancedCashManagementTransactionClientResponse = (function (_super) {
            __extends(CreateAdvancedCashManagementTransactionClientResponse, _super);
            function CreateAdvancedCashManagementTransactionClientResponse(transaction) {
                var _this = _super.call(this, transaction) || this;
                _this.transaction = transaction;
                return _this;
            }
            return CreateAdvancedCashManagementTransactionClientResponse;
        }(Commerce.ClientResponse));
        CashManagement.CreateAdvancedCashManagementTransactionClientResponse = CreateAdvancedCashManagementTransactionClientResponse;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeFloatEntryTransactionClientRequest = (function (_super) {
            __extends(CreateSafeFloatEntryTransactionClientRequest, _super);
            function CreateSafeFloatEntryTransactionClientRequest(isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId, toStoreSafe, fromShift, fromStoreSafe) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(toStoreSafe)) {
                    throw new Error("CreateSafeFloatEntryTransactionClientRequest: 'toStoreSafe' can't be null.");
                }
                _this = _super.call(this, isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId) || this;
                _this.toStoreSafe = toStoreSafe;
                _this.fromShiftKey = fromShift;
                _this.fromStoreSafe = fromStoreSafe;
                _this.transactionSourceContextType = _this._getSourceContextType(fromShift, fromStoreSafe);
                return _this;
            }
            CreateSafeFloatEntryTransactionClientRequest.prototype._getSourceContextType = function (fromShift, fromStoreSafe) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(fromShift) && Commerce.ObjectExtensions.isNullOrUndefined(fromStoreSafe)) {
                    throw new Error("CreateSafeFloatEntryTransactionClientRequest: One of the 'fromShift' and 'fromStoreSafe' must be specified");
                }
                else if ((!Commerce.ObjectExtensions.isNullOrUndefined(fromShift)) && (!Commerce.ObjectExtensions.isNullOrUndefined(fromStoreSafe))) {
                    throw new Error("CreateSafeFloatEntryTransactionClientRequest: Only one of the 'fromShift' and 'fromStoreSafe' must be specified");
                }
                else {
                    return Commerce.ObjectExtensions.isNullOrUndefined(fromShift) ?
                        Commerce.Proxy.Entities.CashManagementTransactionContext.Safe :
                        Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                }
            };
            return CreateSafeFloatEntryTransactionClientRequest;
        }(CashManagement.CreateFloatEntryTransactionClientRequest));
        CashManagement.CreateSafeFloatEntryTransactionClientRequest = CreateSafeFloatEntryTransactionClientRequest;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeFloatEntryTransactionClientResponse = (function (_super) {
            __extends(CreateSafeFloatEntryTransactionClientResponse, _super);
            function CreateSafeFloatEntryTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateSafeFloatEntryTransactionClientResponse;
        }(CashManagement.CreateFloatEntryTransactionClientResponse));
        CashManagement.CreateSafeFloatEntryTransactionClientResponse = CreateSafeFloatEntryTransactionClientResponse;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeStartingAmountTransactionClientRequest = (function (_super) {
            __extends(CreateSafeStartingAmountTransactionClientRequest, _super);
            function CreateSafeStartingAmountTransactionClientRequest(isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId, toStoreSafe) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(toStoreSafe)) {
                    throw new Error("CreateSafeStartingAmountTransactionClientRequest: 'toStoreSafe' can't be null.");
                }
                _this = _super.call(this, isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId) || this;
                _this.toStoreSafe = toStoreSafe;
                return _this;
            }
            return CreateSafeStartingAmountTransactionClientRequest;
        }(CashManagement.CreateStartingAmountTransactionClientRequest));
        CashManagement.CreateSafeStartingAmountTransactionClientRequest = CreateSafeStartingAmountTransactionClientRequest;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeStartingAmountTransactionClientResponse = (function (_super) {
            __extends(CreateSafeStartingAmountTransactionClientResponse, _super);
            function CreateSafeStartingAmountTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateSafeStartingAmountTransactionClientResponse;
        }(CashManagement.CreateStartingAmountTransactionClientResponse));
        CashManagement.CreateSafeStartingAmountTransactionClientResponse = CreateSafeStartingAmountTransactionClientResponse;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeTenderRemovalTransactionClientRequest = (function (_super) {
            __extends(CreateSafeTenderRemovalTransactionClientRequest, _super);
            function CreateSafeTenderRemovalTransactionClientRequest(isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId, fromStoreSafe, toShift, toStoreSafe) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(fromStoreSafe)) {
                    throw new Error("CreateSafeTenderRemovalTransactionClientRequest: 'fromStoreSafe' can't be null.");
                }
                _this = _super.call(this, isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId) || this;
                _this.fromStoreSafe = fromStoreSafe;
                _this.toShiftKey = toShift;
                _this.toStoreSafe = toStoreSafe;
                _this.transactionDestinationContextType = CreateSafeTenderRemovalTransactionClientRequest._getDestinationContextType(toShift, toStoreSafe);
                return _this;
            }
            CreateSafeTenderRemovalTransactionClientRequest._getDestinationContextType = function (toShift, toStoreSafe) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(toShift) && Commerce.ObjectExtensions.isNullOrUndefined(toStoreSafe)) {
                    throw new Error("CreateSafeTenderRemovalTransactionClientRequest: One of the 'toShift' and 'toStoreSafe' must be specified");
                }
                else if ((!Commerce.ObjectExtensions.isNullOrUndefined(toShift)) && (!Commerce.ObjectExtensions.isNullOrUndefined(toStoreSafe))) {
                    throw new Error("CreateSafeTenderRemovalTransactionClientRequest: Only one of the 'toShift' and 'toStoreSafe' must be specified");
                }
                else {
                    return Commerce.ObjectExtensions.isNullOrUndefined(toShift) ?
                        Commerce.Proxy.Entities.CashManagementTransactionContext.Safe :
                        Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                }
            };
            return CreateSafeTenderRemovalTransactionClientRequest;
        }(CashManagement.CreateTenderRemovalTransactionClientRequest));
        CashManagement.CreateSafeTenderRemovalTransactionClientRequest = CreateSafeTenderRemovalTransactionClientRequest;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateSafeTenderRemovalTransactionClientResponse = (function (_super) {
            __extends(CreateSafeTenderRemovalTransactionClientResponse, _super);
            function CreateSafeTenderRemovalTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateSafeTenderRemovalTransactionClientResponse;
        }(CashManagement.CreateTenderRemovalTransactionClientResponse));
        CashManagement.CreateSafeTenderRemovalTransactionClientResponse = CreateSafeTenderRemovalTransactionClientResponse;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftFloatEntryTransactionClientRequest = (function (_super) {
            __extends(CreateShiftFloatEntryTransactionClientRequest, _super);
            function CreateShiftFloatEntryTransactionClientRequest(isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId, fromShift, fromStoreSafe) {
                var _this = _super.call(this, isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId) || this;
                _this.fromShiftKey = fromShift;
                _this.fromStoreSafe = fromStoreSafe;
                _this.transactionSourceContextType = _this._getSourceContextType(fromShift, fromStoreSafe);
                return _this;
            }
            CreateShiftFloatEntryTransactionClientRequest.prototype._getSourceContextType = function (fromShift, fromStoreSafe) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(fromShift) && Commerce.ObjectExtensions.isNullOrUndefined(fromStoreSafe)) {
                    throw new Error("CreateShiftFloatEntryTransactionClientRequest: One of the 'fromShift' and 'fromStoreSafe' must be specified");
                }
                else if ((!Commerce.ObjectExtensions.isNullOrUndefined(fromShift)) && (!Commerce.ObjectExtensions.isNullOrUndefined(fromStoreSafe))) {
                    throw new Error("CreateShiftFloatEntryTransactionClientRequest: Only one of the 'fromShift' and 'fromStoreSafe' must be specified");
                }
                else {
                    return Commerce.ObjectExtensions.isNullOrUndefined(fromShift) ?
                        Commerce.Proxy.Entities.CashManagementTransactionContext.Safe :
                        Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                }
            };
            return CreateShiftFloatEntryTransactionClientRequest;
        }(CashManagement.CreateFloatEntryTransactionClientRequest));
        CashManagement.CreateShiftFloatEntryTransactionClientRequest = CreateShiftFloatEntryTransactionClientRequest;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftFloatEntryTransactionClientResponse = (function (_super) {
            __extends(CreateShiftFloatEntryTransactionClientResponse, _super);
            function CreateShiftFloatEntryTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateShiftFloatEntryTransactionClientResponse;
        }(CashManagement.CreateFloatEntryTransactionClientResponse));
        CashManagement.CreateShiftFloatEntryTransactionClientResponse = CreateShiftFloatEntryTransactionClientResponse;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftStartingAmountTransactionClientRequest = (function (_super) {
            __extends(CreateShiftStartingAmountTransactionClientRequest, _super);
            function CreateShiftStartingAmountTransactionClientRequest(isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId, fromStoreSafe) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(fromStoreSafe)) {
                    throw new Error("CreateShiftStartingAmountTransactionClientRequest: 'fromStoreSafe' can't be null when transaction context is shift.");
                }
                _this = _super.call(this, isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId) || this;
                _this.fromStoreSafe = fromStoreSafe;
                return _this;
            }
            return CreateShiftStartingAmountTransactionClientRequest;
        }(CashManagement.CreateStartingAmountTransactionClientRequest));
        CashManagement.CreateShiftStartingAmountTransactionClientRequest = CreateShiftStartingAmountTransactionClientRequest;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftStartingAmountTransactionClientResponse = (function (_super) {
            __extends(CreateShiftStartingAmountTransactionClientResponse, _super);
            function CreateShiftStartingAmountTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateShiftStartingAmountTransactionClientResponse;
        }(CashManagement.CreateStartingAmountTransactionClientResponse));
        CashManagement.CreateShiftStartingAmountTransactionClientResponse = CreateShiftStartingAmountTransactionClientResponse;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftTenderRemovalTransactionClientRequest = (function (_super) {
            __extends(CreateShiftTenderRemovalTransactionClientRequest, _super);
            function CreateShiftTenderRemovalTransactionClientRequest(isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId, toShift) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(toShift)) {
                    throw new Error("CreateShiftTenderRemovalTransactionClientRequest: 'toShift' can't be null.");
                }
                _this = _super.call(this, isOperationAborted, amountEntered, denominationDetails, operationComment, shift, correlationId) || this;
                _this.toShiftKey = toShift;
                return _this;
            }
            return CreateShiftTenderRemovalTransactionClientRequest;
        }(CashManagement.CreateTenderRemovalTransactionClientRequest));
        CashManagement.CreateShiftTenderRemovalTransactionClientRequest = CreateShiftTenderRemovalTransactionClientRequest;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var CashManagement;
    (function (CashManagement) {
        "use strict";
        var CreateShiftTenderRemovalTransactionClientResponse = (function (_super) {
            __extends(CreateShiftTenderRemovalTransactionClientResponse, _super);
            function CreateShiftTenderRemovalTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateShiftTenderRemovalTransactionClientResponse;
        }(CashManagement.CreateTenderRemovalTransactionClientResponse));
        CashManagement.CreateShiftTenderRemovalTransactionClientResponse = CreateShiftTenderRemovalTransactionClientResponse;
    })(CashManagement = Commerce.CashManagement || (Commerce.CashManagement = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Customers;
    (function (Customers) {
        "use strict";
        var SelectCustomerClientRequestHandler = (function (_super) {
            __extends(SelectCustomerClientRequestHandler, _super);
            function SelectCustomerClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectCustomerClientRequestHandler.prototype.supportedRequestType = function () {
                return Customers.SelectCustomerClientRequest;
            };
            SelectCustomerClientRequestHandler.prototype.executeAsync = function (request) {
                var context = {
                    correlationId: request.correlationId,
                    searchText: request.searchText
                };
                var activity = new Commerce.Activities.SelectCustomerActivity(context);
                return activity.execute().map(function (result) {
                    if (result.canceled) {
                        return { canceled: true, data: null };
                    }
                    return { canceled: false, data: new Customers.SelectCustomerClientResponse(result.data) };
                }).getPromise();
            };
            return SelectCustomerClientRequestHandler;
        }(Commerce.RequestHandler));
        Customers.SelectCustomerClientRequestHandler = SelectCustomerClientRequestHandler;
    })(Customers = Commerce.Customers || (Commerce.Customers = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DualDisplay;
    (function (DualDisplay) {
        "use strict";
    })(DualDisplay = Commerce.DualDisplay || (Commerce.DualDisplay = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        "use strict";
        var GetExtensionPackagesLoadInfoClientRequest = (function (_super) {
            __extends(GetExtensionPackagesLoadInfoClientRequest, _super);
            function GetExtensionPackagesLoadInfoClientRequest() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetExtensionPackagesLoadInfoClientRequest;
        }(Commerce.Request));
        Extensibility.GetExtensionPackagesLoadInfoClientRequest = GetExtensionPackagesLoadInfoClientRequest;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Extensibility;
    (function (Extensibility) {
        "use strict";
        var GetExtensionPackagesLoadInfoClientResponse = (function (_super) {
            __extends(GetExtensionPackagesLoadInfoClientResponse, _super);
            function GetExtensionPackagesLoadInfoClientResponse(extensionPackagesLoadInfo) {
                var _this = _super.call(this) || this;
                _this.extensionPackagesLoadInfo = extensionPackagesLoadInfo;
                return _this;
            }
            return GetExtensionPackagesLoadInfoClientResponse;
        }(Commerce.Response));
        Extensibility.GetExtensionPackagesLoadInfoClientResponse = GetExtensionPackagesLoadInfoClientResponse;
    })(Extensibility = Commerce.Extensibility || (Commerce.Extensibility = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var LoadExtensionsRequest = (function (_super) {
        __extends(LoadExtensionsRequest, _super);
        function LoadExtensionsRequest() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LoadExtensionsRequest;
    }(Commerce.Request));
    Commerce.LoadExtensionsRequest = LoadExtensionsRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var LoadExtensionsResponse = (function (_super) {
        __extends(LoadExtensionsResponse, _super);
        function LoadExtensionsResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LoadExtensionsResponse;
    }(Commerce.Response));
    Commerce.LoadExtensionsResponse = LoadExtensionsResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AcknowledgeNotificationsRequestHandler = (function (_super) {
        __extends(AcknowledgeNotificationsRequestHandler, _super);
        function AcknowledgeNotificationsRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AcknowledgeNotificationsRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.AcknowledgeNotificationsRequest;
        };
        AcknowledgeNotificationsRequestHandler.prototype.executeAsync = function (request) {
            var lastPullDateTime = request.lastPullDateTime;
            var notificationManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.INotificationManagerName);
            Commerce.Session.instance.getAllFromNotifications().forEach(function (notification) {
                notification.NotificationDetails.forEach(function (notificationDetail) {
                    notificationDetail.IsNew = false;
                });
            });
            return notificationManager.acknowledgeNotificationsAsync(lastPullDateTime)
                .map(function () {
                var response = new Commerce.AcknowledgeNotificationsResponse(void 0);
                var result = {
                    canceled: false,
                    data: response
                };
                return result;
            }).getPromise();
        };
        return AcknowledgeNotificationsRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.AcknowledgeNotificationsRequestHandler = AcknowledgeNotificationsRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AddTenderLineToCartClientRequestHandler = (function (_super) {
        __extends(AddTenderLineToCartClientRequestHandler, _super);
        function AddTenderLineToCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AddTenderLineToCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.AddTenderLineToCartClientRequest;
        };
        AddTenderLineToCartClientRequestHandler.prototype.executeAsync = function (request) {
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var tenderLine = Commerce.ObjectExtensions.isNullOrUndefined(request.tenderLine) ? null : request.tenderLine;
            if (Commerce.ObjectExtensions.isNullOrUndefined(tenderLine)) {
                throw new Error("AddTenderLineToCartClientRequestHandler: tenderLine cannot be null or undefined");
            }
            var reasonCodeResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({
                tenderLines: [tenderLine]
            }, function (c) {
                return cartManager.addTenderLineToCartAsync(c.tenderLines[0]);
            }).run();
            return reasonCodeResult
                .map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.AddTenderLineToCartClientResponse(Commerce.Session.instance.cart)
                };
            }).getPromise();
        };
        return AddTenderLineToCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.AddTenderLineToCartClientRequestHandler = AddTenderLineToCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CheckoutCartClientRequestHandler = (function (_super) {
        __extends(CheckoutCartClientRequestHandler, _super);
        function CheckoutCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CheckoutCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.CheckoutCartClientRequest;
        };
        CheckoutCartClientRequestHandler.prototype.executeAsync = function (request) {
            var correlationId = request.correlationId;
            var receiptEmailAddress = request.receiptEmailAddress;
            var tokenizedPaymentCard = request.tokenizedPaymentCard;
            return this._checkoutCartAsync(correlationId, receiptEmailAddress, tokenizedPaymentCard).getPromise();
        };
        CheckoutCartClientRequestHandler.prototype._checkoutCartAsync = function (correlationId, receiptEmailAddress, tokenizedPaymentCard) {
            var finalCheckedOutCart = null;
            var checkoutCartAsyncQueue = new Commerce.AsyncQueue();
            var checkoutCartAsyncResult = checkoutCartAsyncQueue.enqueue(function () {
                return checkoutCartAsyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.revertToSelf(correlationId));
            }).enqueue(function () {
                var salesOrder;
                var previousNumberOfReasonCodeLines = Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.cart.ReasonCodeLines) ? Commerce.Session.instance.cart.ReasonCodeLines.length : 0;
                var handleReasonCodesAsyncQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: Commerce.Session.instance.cart }, function (context) {
                    var addReasonCodesAsyncQueue = new Commerce.AsyncQueue();
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    var currentNumberOfReasonCodeLines = Commerce.ArrayExtensions.hasElements(context.cart.ReasonCodeLines) ? context.cart.ReasonCodeLines.length : 0;
                    if (currentNumberOfReasonCodeLines > previousNumberOfReasonCodeLines) {
                        addReasonCodesAsyncQueue.enqueue(function () {
                            return cartManager.createOrUpdateCartAsync(context.cart);
                        });
                    }
                    addReasonCodesAsyncQueue.enqueue(function () {
                        finalCheckedOutCart = Commerce.Session.instance.cart;
                        return cartManager.checkoutCartAsync(receiptEmailAddress, tokenizedPaymentCard)
                            .done(function (result) {
                            salesOrder = result;
                        }).recoverOnFailure(function (errors) {
                            if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_GIFTCARDPAYMENTNOTSUPPORTED)) {
                                var asyncResult_5 = new Commerce.VoidAsyncResult();
                                cartManager.getCartByCartIdAsync(Commerce.Session.instance.cart.Id).always(function () {
                                    asyncResult_5.reject(errors);
                                });
                                return asyncResult_5;
                            }
                            else {
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                        });
                    });
                    return addReasonCodesAsyncQueue.run();
                }, Commerce.Proxy.Entities.ReasonCodeSourceType.EndOfTransaction);
                return checkoutCartAsyncQueue.cancelOn(handleReasonCodesAsyncQueue.run()).map(function (result) {
                    return salesOrder;
                });
            }).enqueue(function (salesOrder) {
                var response = new Commerce.CheckoutCartClientResponse({ salesOrder: salesOrder, finalCheckedOutCart: finalCheckedOutCart });
                return Commerce.AsyncResult.createResolved(response);
            }).run();
            return checkoutCartAsyncResult;
        };
        return CheckoutCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.CheckoutCartClientRequestHandler = CheckoutCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var EndTransactionClientRequestHandlerBase = (function (_super) {
        __extends(EndTransactionClientRequestHandlerBase, _super);
        function EndTransactionClientRequestHandlerBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EndTransactionClientRequestHandlerBase.prototype.executeAsync = function (request) {
            var _this = this;
            var receiptEmailAddress;
            var asyncQueue = new Commerce.AsyncQueue();
            var asyncResult = asyncQueue.enqueue(function () {
                return asyncQueue.cancelOn(_this._preEndTransactionAsync(request.correlationId))
                    .map(function (result) { return result.data; });
            }).enqueue(function (preEndTransactionResult) {
                receiptEmailAddress = preEndTransactionResult.receiptEmailAddress;
                return asyncQueue.cancelOn(_this._endTransactionAsync(request.correlationId, preEndTransactionResult.receiptEmailAddress))
                    .map(function (result) { return result.data; });
            }).enqueue(function (endTransactionResult) {
                return asyncQueue.cancelOn(_this._postEndTransactionAsync(endTransactionResult, receiptEmailAddress, request.correlationId)).map(function (result) { return result.data; });
            }).run();
            return asyncResult.map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : _this._createTransactionClientResponse(result.data.salesOrder)
                };
            }).recoverOnFailure(function (errors) {
                var failureAsyncQueue = new Commerce.AsyncQueue();
                failureAsyncQueue.enqueue(function () {
                    return _this._checkTransactionCompleteAndAutoLogoffIfConfiguredAsync().recoverOnFailure(function () { return Commerce.VoidAsyncResult.createResolved(); });
                }).enqueue(function () {
                    return Commerce.VoidAsyncResult.createRejected(errors);
                });
                return failureAsyncQueue.run();
            }).getPromise();
        };
        EndTransactionClientRequestHandlerBase.prototype._preEndTransactionAsync = function (correlationId) {
            var _this = this;
            Commerce.RetailLogger.concludeTransactionHandlerCartConcludeTransactionStarted(correlationId);
            var cancelableAsyncQueue = new Commerce.AsyncQueue();
            var asyncQueue = cancelableAsyncQueue.enqueue(function () {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart };
                var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreEndTransaction, preTriggerOptions);
                return cancelableAsyncQueue.cancelOn(preTriggerResult);
            }).enqueue(function () {
                return cancelableAsyncQueue.cancelOn(_this._captureAuthorizedCardPaymentsAsync(Commerce.Session.instance.cart, correlationId));
            }).enqueue(function () {
                return _this._getReceiptEmailAddressAsync(correlationId).recoverOnFailure(function () {
                    return Commerce.AsyncResult.createResolved(Commerce.StringExtensions.EMPTY);
                }).map(function (receiptEmailAddress) {
                    return { receiptEmailAddress: receiptEmailAddress };
                });
            });
            return asyncQueue.run();
        };
        EndTransactionClientRequestHandlerBase.prototype._postEndTransactionAsync = function (endTransactionResult, receiptEmailAddress, correlationId) {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var postTriggerOptions = {
                    cart: endTransactionResult.finalCheckedOutCart,
                    salesOrder: endTransactionResult.salesOrder
                };
                return _this._displayErrorsFromAsyncResult(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostCartCheckoutTransaction, postTriggerOptions)).recoverOnFailure(function (errors) {
                    return Commerce.VoidAsyncResult.createResolved();
                });
            }).enqueue(function () {
                if (_this._shouldOpenDrawer(endTransactionResult.salesOrder)) {
                    var cashDrawerOpenRequest = new Commerce.CashDrawerOpenRequest(correlationId);
                    return _this._displayErrorsFromAsyncResult(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashDrawerOpenRequest)))
                        .recoverOnFailure(function (errors) {
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }
                return Commerce.VoidAsyncResult.createResolved();
            }).enqueue(function () {
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                var getReceiptsForPrintAsync = salesOrderManager.getReceiptsForPrintAsync(endTransactionResult.salesOrder.Id, false, _this._getReceiptType(Commerce.Session.instance.cart), false, null, null, false, null, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                return _this._displayErrorsFromAsyncResult(getReceiptsForPrintAsync)
                    .recoverOnFailure(function (errors) {
                    return Commerce.AsyncResult.createResolved([]);
                });
            }).enqueue(function (receipts) {
                return _this._displayErrorsFromAsyncResult(_this._giveChangeBackAsync(correlationId, endTransactionResult.salesOrder, receipts))
                    .recoverOnFailure(function (errors) {
                    return Commerce.AsyncResult.createResolved(false);
                }).map(function (shouldPrintGiftReceipts) {
                    return { receipts: receipts, shouldPrintGiftReceipts: shouldPrintGiftReceipts };
                });
            }).enqueue(function (receiptInfo) {
                var printReceiptsAsyncQueue = new Commerce.AsyncQueue();
                printReceiptsAsyncQueue.enqueue(function () {
                    return _this._displayErrorsFromAsyncResult(_this._printReceiptsIfPromptOrAlwaysAsync(endTransactionResult.salesOrder, receiptInfo.receipts, receiptEmailAddress, correlationId)).map(function (printReceiptActivityResponse) {
                        return receiptInfo.shouldPrintGiftReceipts
                            || (!Commerce.ObjectExtensions.isNullOrUndefined(printReceiptActivityResponse) && printReceiptActivityResponse.printGiftReceipts);
                    }).recoverOnFailure(function (errors) {
                        return Commerce.AsyncResult.createResolved(receiptInfo.shouldPrintGiftReceipts);
                    });
                }).enqueue(function (shouldPrintGiftReceipts) {
                    if (Commerce.Peripherals.instance.lineDisplay) {
                        Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayIdleText();
                    }
                    if (shouldPrintGiftReceipts) {
                        return _this._displayErrorsFromAsyncResult(_this._printAsRequiredGiftReceiptsAsync(correlationId, endTransactionResult.salesOrder))
                            .recoverOnFailure(function (errors) {
                            Commerce.RetailLogger.printGiftReceiptFailure(correlationId);
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return printReceiptsAsyncQueue.run().map(function () { return receiptInfo.receipts; });
            }).enqueue(function (receipts) {
                return _this._displayErrorsFromAsyncResult(_this._validateCashDrawerLimitAsync(correlationId))
                    .recoverOnFailure(function (errors) {
                    return Commerce.VoidAsyncResult.createResolved();
                }).map(function () { return receipts; });
            }).enqueue(function (receipts) {
                var postTriggerOptions = { receipts: receipts };
                return _this._displayErrorsFromAsyncResult(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostEndTransaction, postTriggerOptions)).recoverOnFailure(function (errors) {
                    return Commerce.VoidAsyncResult.createResolved();
                });
            }).enqueue(function () {
                Commerce.Session.instance.clearCart();
                if (Commerce.Host.instance.application.getAppMemoryUsageLimitInMB() !== 0) {
                    Commerce.RetailLogger.coreApplicationMemoryUsage(Math.round(Commerce.Host.instance.application.getAppMemoryUsageLimitInMB()), Math.round(Commerce.Host.instance.application.getCurrentMemoryUsageInMB()));
                }
                return Commerce.Utilities.LogonHelper.exitAfterTransactionIfConfiguredAsync()
                    .recoverOnFailure(function (errors) {
                    return Commerce.VoidAsyncResult.createResolved();
                });
            });
            return asyncQueue.run().map(function () {
                return { canceled: false, data: { salesOrder: endTransactionResult.salesOrder } };
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._checkTransactionCompleteAndAutoLogoffIfConfiguredAsync = function () {
            var cartCleared = !Commerce.Session.instance.isCartInProgress;
            var cartCompleted = Commerce.Session.instance.cart.CartStatusValue === Commerce.CartStateType.Completed;
            if (cartCleared || cartCompleted) {
                return Commerce.Utilities.LogonHelper.exitAfterTransactionIfConfiguredAsync();
            }
            return Commerce.AsyncResult.createResolved();
        };
        EndTransactionClientRequestHandlerBase.prototype._validateCashDrawerLimitAsync = function (correlationId) {
            var request = new Commerce.ValidateCashDrawerLimitClientRequest(Commerce.Session.instance.Shift.TerminalId, Commerce.Session.instance.Shift.ShiftId, correlationId);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
        };
        EndTransactionClientRequestHandlerBase.prototype._getReceiptEmailAddressAsync = function (correlationId) {
            var customer = Commerce.Session.instance.Customer;
            var displayPrompt;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer) && !Commerce.StringExtensions.isNullOrWhitespace(customer.AccountNumber)) {
                displayPrompt = customer.ReceiptSettings !== Commerce.Proxy.Entities.CustomerReceiptPreferenceEnum.POS;
            }
            else {
                displayPrompt = Commerce.ApplicationContext.Instance.channelConfiguration.ReceiptSettingsValue !== Commerce.Proxy.Entities.CustomerReceiptPreferenceEnum.POS;
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.storeInformation.EmailReceiptProfileId)
                || Commerce.Session.instance.cart.CartTypeValue === Commerce.Proxy.Entities.CartType.IncomeExpense
                || !displayPrompt) {
                return Commerce.AsyncResult.createResolved(Commerce.StringExtensions.EMPTY);
            }
            var emailAddress = Commerce.StringExtensions.EMPTY;
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var getReceiptEmailAddressClientRequest = new Commerce.GetReceiptEmailAddressClientRequest(correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getReceiptEmailAddressClientRequest));
            }).enqueue(function (response) {
                if (!response.canceled) {
                    emailAddress = response.data.result.emailAddress;
                    if (response.data.result.saveEmailOnCustomer) {
                        customer.ReceiptEmail = emailAddress;
                        var updateCustomerServiceRequest = new Commerce.UpdateCustomerServiceRequest(correlationId, customer);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateCustomerServiceRequest));
                    }
                }
                return Commerce.VoidAsyncResult.createResolved();
            });
            return asyncQueue.run().map(function () {
                return emailAddress;
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._captureAuthorizedCardPaymentsAsync = function (cart, correlationId) {
            var _this = this;
            var tenderLinesToCapture = Commerce.ArrayExtensions.hasElements(cart.TenderLines) ? cart.TenderLines : [];
            tenderLinesToCapture = tenderLinesToCapture.filter(function (tenderLine) {
                return tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.PendingCommit
                    && (Commerce.CartHelper.isCreditOrDebitCard(tenderLine) || Commerce.CartHelper.isExternalGiftCard(tenderLine))
                    && tenderLine.Amount !== 0;
            });
            var asyncQueue = new Commerce.AsyncQueue();
            tenderLinesToCapture.forEach(function (tenderLine) {
                asyncQueue.enqueue(function () {
                    return asyncQueue.cancelOn(_this._captureAndUpdateTenderLineAsync(cart, tenderLine, correlationId));
                });
            });
            return asyncQueue.run();
        };
        EndTransactionClientRequestHandlerBase.prototype._captureAndUpdateTenderLineAsync = function (cart, tenderLine, correlationId) {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            var originalTenderLineCaptureFailed = false;
            asyncQueue.enqueue(function () {
                var paymentType = Commerce.CartHelper.getPeripheralPaymentType(tenderLine);
                switch (paymentType) {
                    case Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal:
                        Commerce.RetailLogger.concludeTransactionHandlerCartCapturingTenderlineFromPaymentTerminal(tenderLine.LineNumber, correlationId);
                        return _this._captureTenderLineViaPaymentTerminal(tenderLine, correlationId);
                    case Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController:
                        Commerce.RetailLogger.concludeTransactionHandlerCartCapturingTenderlineFromPaymentController(tenderLine.LineNumber, correlationId);
                        return _this._captureTenderLineViaCardPayment(tenderLine, correlationId)
                            .recoverOnFailure(function (errors) {
                            originalTenderLineCaptureFailed = true;
                            return _this._handlePaymentCaptureFailureAsync(correlationId, cart, tenderLine, errors);
                        });
                    default:
                        Commerce.RetailLogger.concludeTransactionHandlerPeripheralPaymentUnknown(tenderLine.LineNumber, correlationId);
                        return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERAL_PAYMENT_UNKNOWN_ERROR)]);
                }
            }).enqueue(function (result) {
                if (result.canceled || Commerce.ObjectExtensions.isNullOrUndefined(result.data) || !result.data.IsApproved) {
                    Commerce.RetailLogger.concludeTransactionHandlerPeripheralPaymentUnknown(tenderLine.LineNumber, correlationId);
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERAL_PAYMENT_UNKNOWN_ERROR)]);
                }
                var authorizedTenderLine = null;
                if (originalTenderLineCaptureFailed) {
                    authorizedTenderLine = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart);
                }
                else {
                    authorizedTenderLine = tenderLine;
                }
                var updatedTenderLine = Commerce.ObjectExtensions.clone(authorizedTenderLine);
                updatedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.Committed;
                return asyncQueue.cancelOn(_this._updatePreprocessedTenderLineInCartForCaptureAsync(cart, updatedTenderLine, correlationId));
            });
            return asyncQueue.run();
        };
        EndTransactionClientRequestHandlerBase.prototype._handlePaymentCaptureFailureAsync = function (correlationId, cart, tenderLine, errors) {
            var _this = this;
            if (tenderLine.ProcessingTypeValue === Commerce.Proxy.Entities.PaymentProcessingType.Deferred && tenderLine.PaymentRefRecId !== 0
                && (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_DECLINE)
                    || Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_AUTHORIZATIONEXPIRED))) {
                var amountOnTenderLine_1 = tenderLine.Amount;
                var cardTokenXml_1 = tenderLine.CardToken;
                var paymentServiceAccountId_1 = tenderLine.CardPaymentAccountId;
                var cardTypeId_1 = tenderLine.CardTypeId;
                var tenderTypeId_1 = tenderLine.TenderTypeId;
                var maskedCardNumber_1 = tenderLine.MaskedCardNumber;
                var asyncQueue_2 = new Commerce.AsyncQueue();
                asyncQueue_2.enqueue(function () {
                    Commerce.RetailLogger.posConcludeTransactionPreAuthorizedPaymentCaptureFailed(correlationId, tenderLine.PaymentRefRecId, tenderLine.LineNumber);
                    return Commerce.NotificationHandler.displayClientErrors([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_PREVIOUS_PAYMENT_CAPTURE_FAILED)])
                        .recoverOnFailure(function () {
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }).enqueue(function () {
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    var updatedTenderLine = Commerce.ObjectExtensions.clone(tenderLine);
                    updatedTenderLine.Amount = 0;
                    updatedTenderLine.CardProcessorStatusValue = Commerce.Proxy.Entities.CreditCardProcessorStatus.Declined;
                    return cartManager.updatePreprocessedTenderLineInCartAsync(updatedTenderLine)
                        .done(function () {
                        Commerce.RetailLogger.posConcludeTransactionUpdatingPreAuthorizedTenderLineSucceeded(correlationId, updatedTenderLine.PaymentRefRecId, updatedTenderLine.LineNumber);
                    })
                        .fail(function (errors) {
                        Commerce.RetailLogger.posConcludeTransactionUpdatingPreAuthorizedTenderLineFailed(correlationId, updatedTenderLine.PaymentRefRecId, updatedTenderLine.LineNumber, Commerce.ErrorHelper.serializeError(errors));
                    });
                }).enqueue(function () {
                    return asyncQueue_2.cancelOn(_this._authorizeAndCaptureUsingCardTokenAsync(correlationId, cart, amountOnTenderLine_1, cardTokenXml_1, cardTypeId_1, tenderTypeId_1, maskedCardNumber_1, paymentServiceAccountId_1))
                        .map(function (result) {
                        return result.data;
                    });
                });
                return asyncQueue_2.run();
            }
            else {
                return Commerce.VoidAsyncResult.createRejected(errors);
            }
        };
        EndTransactionClientRequestHandlerBase.prototype._authorizeAndCaptureUsingCardTokenAsync = function (correlationId, cart, amount, cardToken, cardTypeId, tenderTypeId, maskedCardNumber, paymentServiceAccountId) {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                Commerce.RetailLogger.posConcludeTransactionReauthorizingPaymentUsingCardTokenStarted(correlationId);
                return asyncQueue.cancelOn(_this._authorizeCardTokenAsync(correlationId, amount, cardToken, paymentServiceAccountId));
            }).enqueue(function (result) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(result.data) && result.data.IsApproved) {
                    Commerce.RetailLogger.posConcludeTransactionReauthorizingPaymentUsingCardTokenSucceeded(correlationId);
                    var preProcessedTenderLine_1 = {
                        Amount: result.data.ApprovedAmount,
                        CashBackAmount: result.data.CashbackAmount,
                        Authorization: result.data.PaymentSdkData,
                        CardTypeId: cardTypeId,
                        Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                        MaskedCardNumber: maskedCardNumber,
                        TenderTypeId: tenderTypeId,
                        StatusValue: Commerce.Proxy.Entities.TenderLineStatus.PendingCommit,
                        CardToken: cardToken,
                        IsVoidable: true,
                        ProcessingTypeValue: Commerce.Proxy.Entities.PaymentProcessingType.Deferred,
                        CardProcessorStatusValue: Commerce.Proxy.Entities.CreditCardProcessorStatus.Approved
                    };
                    var request = new Commerce.AddPreprocessedTenderLineToCartClientRequest(preProcessedTenderLine_1);
                    Commerce.RetailLogger.posConcludeTransactionAddingReauthorizedTenderLineToCartStarted(correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .done(function () {
                        Commerce.RetailLogger.posConcludeTransactionAddingReauthorizedTenderLineToCartSucceeded(correlationId);
                    }).recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.posConcludeTransactionAddingReauthorizedTenderLineToCartFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                        var asyncResult = new Commerce.AsyncResult();
                        _this._voidPaymentAsync(correlationId, preProcessedTenderLine_1, result.data, errors)
                            .always(function () {
                            asyncResult.reject(errors);
                        });
                        return asyncResult;
                    });
                }
                else {
                    Commerce.RetailLogger.posConcludeTransactionReauthorizingPaymentUsingCardTokenFailed(correlationId);
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_UNABLE_AUTHORIZE_OR_REFUND)]);
                }
            }).enqueue(function () {
                var authorizedTenderLine = Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart);
                Commerce.RetailLogger.posConcludeTransactionCapturingReauthorizedTenderLineStarted(correlationId, authorizedTenderLine.LineNumber);
                return asyncQueue.cancelOn(_this._captureTenderLineViaCardPayment(authorizedTenderLine, correlationId))
                    .map(function (result) {
                    Commerce.RetailLogger.posConcludeTransactionCapturingReauthorizedTenderLineSucceeded(correlationId, authorizedTenderLine.LineNumber);
                    return result.data;
                })
                    .fail(function (errors) {
                    Commerce.RetailLogger.posConcludeTransactionCapturingReauthorizedTenderLineFailed(correlationId, authorizedTenderLine.LineNumber, Commerce.ErrorHelper.serializeError(errors));
                });
            });
            return asyncQueue.run();
        };
        EndTransactionClientRequestHandlerBase.prototype._voidPaymentAsync = function (correlationId, tenderLine, paymentInfo, errors) {
            var _this = this;
            var voidPaymentCall = function () {
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
                var tenderInfo = {
                    TenderId: null,
                    CardTypeId: tenderLine.CardTypeId
                };
                var request = new Commerce.CardPaymentVoidPaymentRequest(tenderType.ConnectorId, paymentInfo.ApprovedAmount, tenderInfo, paymentInfo.PaymentSdkData, null);
                var asyncResult = new Commerce.AsyncResult();
                Commerce.RetailLogger.posConcludeTransactionVoidPaymentStarted(correlationId);
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.RetailLogger.posConcludeTransactionVoidPaymentSucceeded(correlationId);
                        var voidInfo = result.data.result;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(voidInfo) && voidInfo.IsApproved) {
                            asyncResult.resolve({ canceled: false });
                        }
                        else {
                            Commerce.RetailLogger.posConcludeTransactionVoidPaymentFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                            _this._voidPaymentFailureHandlerAsync(correlationId, voidPaymentCall, errors)
                                .done(function () {
                                asyncResult.resolve({ canceled: false });
                            })
                                .fail(function () {
                                asyncResult.reject(errors);
                            });
                        }
                    }
                    else {
                        Commerce.RetailLogger.posConcludeTransactionVoidPaymentCanceled(correlationId);
                    }
                }).fail(function (voidPaymentErrors) {
                    Commerce.RetailLogger.posConcludeTransactionVoidPaymentFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                    _this._voidPaymentFailureHandlerAsync(correlationId, voidPaymentCall, voidPaymentErrors)
                        .done(function () {
                        asyncResult.resolve({ canceled: false });
                    })
                        .fail(function () {
                        asyncResult.reject(errors.concat(voidPaymentErrors));
                    });
                }).map(function (result) {
                    return { canceled: result.canceled, data: result.canceled ? null : result.data.result };
                });
                return asyncResult;
            };
            return voidPaymentCall();
        };
        EndTransactionClientRequestHandlerBase.prototype._voidPaymentFailureHandlerAsync = function (correlationId, voidPaymentCall, errors) {
            var asyncResult = new Commerce.VoidAsyncResult();
            Commerce.ViewModelAdapter.displayMessage(Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED, Commerce.MessageType.Info, Commerce.MessageBoxButtons.RetryNo, "string_4909")
                .done(function (result) {
                if (result === Commerce.DialogResult.Yes) {
                    Commerce.RetailLogger.posConcludeTransactionUserSelectedToRetryVoid(correlationId);
                    voidPaymentCall().done(function () {
                        asyncResult.resolve();
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                }
                else {
                    asyncResult.resolve();
                }
            })
                .fail(function (errors) {
                Commerce.RetailLogger.posConcludeTransactionRetryVoidPaymentUserPromptFailedToRender(correlationId, Commerce.ErrorHelper.serializeError(errors));
                asyncResult.reject(errors);
            });
            return asyncResult;
        };
        EndTransactionClientRequestHandlerBase.prototype._authorizeCardTokenAsync = function (correlationId, amount, cardTokenXml, paymentServiceAccountId) {
            var request = new Commerce.Peripherals.CardPaymentAuthorizeCardTokenPeripheralRequest(correlationId, amount, cardTokenXml, paymentServiceAccountId);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                .map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : result.data.result
                };
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._captureTenderLineViaPaymentTerminal = function (tenderLine, correlationId) {
            var request = new Commerce.PaymentTerminalCapturePaymentRequest(tenderLine.Amount, tenderLine.Authorization, null, correlationId);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                .map(function (result) {
                return { canceled: result.canceled, data: result.data.result };
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._captureTenderLineViaCardPayment = function (tenderLine, correlationId) {
            var request = new Commerce.CardPaymentCapturePaymentRequest(tenderLine.Amount, tenderLine.Authorization, null, correlationId, tenderLine.CardPaymentAccountId);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                .map(function (result) {
                return { canceled: result.canceled, data: result.data.result };
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._updatePreprocessedTenderLineInCartForCaptureAsync = function (cart, tenderLine, correlationId) {
            var _this = this;
            return Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: cart, tenderLines: [tenderLine] }, function (c) {
                return _this._updatePreprocessedTenderLineInCartForCaptureInternalAsync(correlationId, c.cart, c.tenderLines[0]);
            }).run().done(function (result) {
                if (!result.canceled) {
                    Commerce.RetailLogger.concludeTransactionHandlerCartTenderLineUpdated(tenderLine.LineNumber, tenderLine.StatusValue, correlationId);
                    var updatedTenderLineId_1 = tenderLine.TenderLineId;
                    Commerce.PaymentHelper.clearSensitiveDataOnTenderLine(Commerce.Session.instance.cart.TenderLines.filter(function (currentTenderLine) {
                        return currentTenderLine.TenderLineId === updatedTenderLineId_1;
                    })[0]);
                }
            }).fail(function (errors) {
                Commerce.RetailLogger.concludeTransactionHandlerCartTenderLineUpdateFailure(tenderLine.LineNumber, tenderLine.StatusValue, Commerce.ErrorHelper.getErrorResourceIds(errors), correlationId);
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._printReceiptsIfPromptOrAlwaysAsync = function (salesOrder, receipts, receiptEmailAddress, correlationId) {
            var printableReceipts = this._filterReceiptsForPrinting(receipts, receiptEmailAddress);
            if (!Commerce.ArrayExtensions.hasElements(printableReceipts)) {
                return Commerce.VoidAsyncResult.createResolved();
            }
            var activity = new Commerce.Activities.PrintReceiptActivity({
                receipts: printableReceipts,
                notifyOnNoPrintableReceipts: true,
                associatedOrder: salesOrder,
                isCopyOfReceipt: false,
                ignoreShouldPrompt: false
            });
            return activity.execute().map(function () {
                return activity.response;
            }).fail(function (errors) {
                Commerce.RetailLogger.concludeTransactionHandlerShowPrintDialogFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]), correlationId);
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._giveChangeBackAsync = function (correlationId, salesOrder, receipts) {
            var showChangeDueClientRequest = new Commerce.ShowChangeDueAndPromptForGiftReceiptsClientRequest(correlationId, salesOrder, receipts);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(showChangeDueClientRequest))
                .map(function (showChangeDueResult) {
                if (!showChangeDueResult.canceled && showChangeDueResult.data instanceof Commerce.ShowChangeDueAndPromptForGiftReceiptsClientResponse) {
                    return Commerce.ArrayExtensions.hasElements(showChangeDueResult.data.receipts);
                }
                else {
                    return false;
                }
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._printAsRequiredGiftReceiptsAsync = function (correlationId, salesOrder) {
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var validSalesLines = Commerce.ReceiptHelper.getSalesLinesForGiftReceipt(salesOrder.SalesLines);
                if (!Commerce.ArrayExtensions.hasElements(validSalesLines)) {
                    return Commerce.AsyncResult.createResolved([]);
                }
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var productIds = validSalesLines.map(function (line) { return line.ProductId; });
                var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                return productManager.getByIdsAsync(productIds, channelId);
            }).enqueue(function (products) {
                var getGiftReceiptsClientRequest = new Commerce.SalesOrders.GetGiftReceiptsClientRequest(correlationId, salesOrder, products, false, false);
                return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getGiftReceiptsClientRequest)));
            }).enqueue(function (result) {
                var printReceiptsRequest = new Commerce.PrintReceiptsClientRequest(Commerce.ReceiptHelper.getPrintableReceipts(result.data.result.receipts), salesOrder, false, correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(printReceiptsRequest));
            });
            return asyncQueue.run();
        };
        EndTransactionClientRequestHandlerBase.prototype._filterReceiptsForPrinting = function (receipts, receiptEmailAddress) {
            var printableReceipts = [];
            if ((Commerce.ApplicationContext.Instance.channelConfiguration.ReceiptSettingsValue === Commerce.Proxy.Entities.CustomerReceiptPreferenceEnum.Email &&
                Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Customer)) ||
                (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Customer) &&
                    Commerce.Session.instance.Customer.ReceiptSettings === Commerce.Proxy.Entities.CustomerReceiptPreferenceEnum.Email)) {
                receipts.forEach(function (receipt) {
                    if (receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.SalesReceipt &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.CardReceiptForCustomer &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.CardReceiptForCustomerReturn &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.CustomerAccountReceiptForCustomer &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.CustomerAccountReceiptForCustomerReturn &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.CustomerAccountDeposit &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.SalesOrderReceipt &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.QuotationReceipt &&
                        receipt.ReceiptTypeValue !== Commerce.Proxy.Entities.ReceiptType.PickupReceipt) {
                        printableReceipts.push(receipt);
                    }
                    else if (Commerce.StringExtensions.isNullOrWhitespace(receiptEmailAddress)) {
                        printableReceipts.push(receipt);
                    }
                });
            }
            else {
                printableReceipts = receipts;
            }
            return printableReceipts;
        };
        EndTransactionClientRequestHandlerBase.prototype._shouldOpenDrawer = function (salesOrder) {
            if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()) {
                return false;
            }
            if (Commerce.ObjectExtensions.isNullOrUndefined(salesOrder) || !Commerce.ArrayExtensions.hasElements(salesOrder.TenderLines)) {
                return false;
            }
            var tenderLinesWithOpenDrawerSet;
            tenderLinesWithOpenDrawerSet = salesOrder.TenderLines.filter(function (tenderLine) {
                if (tenderLine.IsHistorical || tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.Voided) {
                    return false;
                }
                var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderLine.TenderTypeId);
                return !Commerce.ObjectExtensions.isNullOrUndefined(tenderType) && tenderType.OpenDrawer;
            });
            return Commerce.ArrayExtensions.hasElements(tenderLinesWithOpenDrawerSet);
        };
        EndTransactionClientRequestHandlerBase.prototype._updatePreprocessedTenderLineInCartForCaptureInternalAsync = function (correlationId, cart, tenderLine, lineNumber) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(lineNumber)) {
                lineNumber = 0;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cart) && Commerce.ArrayExtensions.hasElements(cart.TenderLines)) {
                    var cartTenderLines = cart.TenderLines;
                    for (var i = 0; i < cartTenderLines.length; i++) {
                        if (Commerce.StringExtensions.compare(cartTenderLines[i].TenderLineId, tenderLine.TenderLineId) === 0) {
                            lineNumber = i + 1;
                            break;
                        }
                    }
                }
            }
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            return cartManager.updatePreprocessedTenderLineInCartAsync(tenderLine)
                .recoverOnFailure(function (errors) {
                if (!Commerce.ErrorHelper.isRetryable(errors)) {
                    return _this._handleUpdatePreprocessedTenderLineForCaptureInternalErrors(errors, lineNumber);
                }
                Commerce.RetailLogger.concludeTransactionHandlerCartTenderLineUpdatePreprocessedTenderLineConnectivityError(tenderLine.LineNumber, tenderLine.StatusValue, Commerce.ErrorHelper.getErrorResourceIds(errors), correlationId);
                var recoveryAsyncQueue = new Commerce.AsyncQueue();
                recoveryAsyncQueue.enqueue(function () {
                    return Commerce.ViewModelAdapter.displayMessage("string_29702", Commerce.MessageType.Error, Commerce.MessageBoxButtons.YesNo, null, 0, lineNumber).recoverOnFailure(function () { return Commerce.AsyncResult.createResolved(Commerce.DialogResult.No); });
                }).enqueue(function (result) {
                    if (result === Commerce.DialogResult.Yes) {
                        return _this._updatePreprocessedTenderLineInCartForCaptureInternalAsync(correlationId, cart, tenderLine, lineNumber);
                    }
                    else {
                        return _this._handleUpdatePreprocessedTenderLineForCaptureInternalErrors(errors, lineNumber);
                    }
                });
                return recoveryAsyncQueue.run();
            });
        };
        EndTransactionClientRequestHandlerBase.prototype._handleUpdatePreprocessedTenderLineForCaptureInternalErrors = function (errors, lineNumber) {
            if (!Commerce.ErrorHelper.areAllHandled(errors)) {
                var error_3 = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CAPTURED_PAYMENT_COULD_NOT_BE_UPDATED_ON_SERVER, false, null, null, lineNumber);
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return Commerce.NotificationHandler.displayClientErrors([error_3]).recoverOnFailure(function () {
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }).enqueue(function () {
                    Commerce.ErrorHelper.markHandled(errors);
                    return Commerce.VoidAsyncResult.createRejected(errors);
                });
                return asyncQueue.run();
            }
            else {
                return Commerce.VoidAsyncResult.createRejected(errors);
            }
        };
        EndTransactionClientRequestHandlerBase.prototype._getReceiptType = function (cart) {
            if (cart.CartTypeValue === Commerce.Proxy.Entities.CartType.CustomerOrder
                && cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup) {
                return Commerce.Proxy.Entities.ReceiptType.PickupReceipt;
            }
            else {
                return Commerce.Proxy.Entities.ReceiptType.Unknown;
            }
        };
        EndTransactionClientRequestHandlerBase.prototype._displayErrorsFromAsyncResult = function (asyncResult) {
            return asyncResult.recoverOnFailure(function (errors) {
                return new Commerce.AsyncQueue().enqueue(function () {
                    return Commerce.NotificationHandler.displayClientErrors(errors).recoverOnFailure(function () {
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }).enqueue(function () {
                    return Commerce.AsyncResult.createRejected(errors);
                }).run().map(function () { return void 0; });
            });
        };
        return EndTransactionClientRequestHandlerBase;
    }(Commerce.RequestHandler));
    Commerce.EndTransactionClientRequestHandlerBase = EndTransactionClientRequestHandlerBase;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ConcludeTransactionClientRequestHandler = (function (_super) {
        __extends(ConcludeTransactionClientRequestHandler, _super);
        function ConcludeTransactionClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConcludeTransactionClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ConcludeTransactionClientRequest;
        };
        ConcludeTransactionClientRequestHandler.prototype.executeAsync = function (request) {
            var validationErrors = [];
            validationErrors = validationErrors.concat(Commerce.Operations.Validators.notAllowedInNonDrawerModeOperationValidator());
            validationErrors = validationErrors.concat(Commerce.Operations.Validators.existingCart());
            validationErrors = validationErrors.concat(Commerce.Operations.CartValidators.cartIsReadyForCheckout(Commerce.Session.instance.cart));
            validationErrors = validationErrors.concat(Commerce.Operations.CartValidators.cartHasCustomerIfCustomerOrderOrQuote(Commerce.Session.instance.cart));
            validationErrors = validationErrors.concat(Commerce.Operations.CartValidators.cartHasDeliveryInfoIfCustomerOrderOrQuote(Commerce.Session.instance.cart));
            if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                return Promise.reject([validationErrors[0]]);
            }
            return _super.prototype.executeAsync.call(this, request);
        };
        ConcludeTransactionClientRequestHandler.prototype._endTransactionAsync = function (correlationId, receiptEmailAddress) {
            var _this = this;
            var authorizationOptions;
            var cancelableAsyncQueue = new Commerce.AsyncQueue();
            if (!Commerce.CustomerOrderHelper.hasValidDeliveryDates(Commerce.Session.instance.cart)) {
                cancelableAsyncQueue.enqueue(function () {
                    return cancelableAsyncQueue.cancelOn(_this._updateInvalidShippingDateOnCartLinesAsync());
                });
            }
            cancelableAsyncQueue.enqueue(function () {
                if (Commerce.CustomerOrderHelper.canAuthorizeShippingAmount(Commerce.Session.instance.cart)) {
                    return cancelableAsyncQueue.cancelOn(_this._promptUserForAuthorizationChoice(correlationId))
                        .done(function (result) {
                        authorizationOptions = result.data;
                    });
                }
                else {
                    authorizationOptions = { tokenize: false };
                    return Commerce.AsyncResult.createResolved();
                }
            }).enqueue(function () {
                if (authorizationOptions.tokenize) {
                    var request = new Commerce.Payments.TokenizePaymentCardClientRequest(correlationId);
                    return cancelableAsyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)))
                        .map(function (result) {
                        return result.canceled ? null : result.data.result;
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved(null);
                }
            }).enqueue(function (tokenizedPaymentCard) {
                if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()
                    || !Commerce.ApplicationContext.Instance.channelConfiguration.EnableOmniChannelPayments) {
                    Commerce.RetailLogger.posAuthorizationOfCardTokenSkipped(correlationId, Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive(), Commerce.ApplicationContext.Instance.channelConfiguration.EnableOmniChannelPayments);
                    return Commerce.AsyncResult.createResolved(tokenizedPaymentCard);
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(authorizationOptions.tenderLineToAuthorize)) {
                    return cancelableAsyncQueue.cancelOn(_this._authorizeCardTokenAndAddToCartAsync(correlationId, tokenizedPaymentCard, authorizationOptions.tenderLineToAuthorize)).map(function (result) {
                        return null;
                    });
                }
                else if (!Commerce.ObjectExtensions.isNullOrUndefined(tokenizedPaymentCard)) {
                    return cancelableAsyncQueue.cancelOn(_this._authorizeCardTokenAndAddToCartAsync(correlationId, tokenizedPaymentCard)).map(function (result) {
                        return null;
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved(null);
                }
            }).enqueue(function (tokenizedPaymentCard) {
                return cancelableAsyncQueue.cancelOn(_this._checkoutCartAsync(correlationId, receiptEmailAddress, tokenizedPaymentCard))
                    .done(function (result) {
                    if (!result.canceled) {
                        Commerce.RetailLogger.concludeTransactionHandlerCartCheckoutSuccessful(correlationId);
                    }
                    else {
                        Commerce.RetailLogger.concludeTransactionHandlerCartCheckoutCancel(correlationId);
                    }
                }).fail(function (errors) {
                    Commerce.RetailLogger.concludeTransactionHandlerCartCheckoutFailure(correlationId);
                }).map(function (result) {
                    return result.data;
                });
            });
            return cancelableAsyncQueue.run();
        };
        ConcludeTransactionClientRequestHandler.prototype._createTransactionClientResponse = function (salesOrder) {
            return new Commerce.ConcludeTransactionClientResponse(salesOrder);
        };
        ConcludeTransactionClientRequestHandler.prototype._promptUserForAuthorizationChoice = function (correlationId) {
            var request = new Commerce.Payments.GetAuthorizationOptionsClientRequest(correlationId);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                .map(function (response) {
                return {
                    canceled: response.canceled,
                    data: response.canceled ? null : response.data.result
                };
            });
        };
        ConcludeTransactionClientRequestHandler.prototype._checkoutCartAsync = function (correlationId, receiptEmailAddress, tokenizedPaymentCard) {
            var request = new Commerce.CheckoutCartClientRequest(correlationId, receiptEmailAddress, tokenizedPaymentCard);
            var checkoutCartAsyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                .map(function (result) {
                if (result.canceled) {
                    return { canceled: true, data: null };
                }
                var checkoutCartResult = result.data.result;
                return {
                    canceled: false,
                    data: {
                        salesOrder: checkoutCartResult.salesOrder,
                        finalCheckedOutCart: checkoutCartResult.finalCheckedOutCart
                    }
                };
            });
            return checkoutCartAsyncResult;
        };
        ConcludeTransactionClientRequestHandler.prototype._authorizeCardTokenAndAddToCartAsync = function (correlationId, tokenizedPaymentCard, existingTenderLine) {
            var cardToken = Commerce.ObjectExtensions.isNullOrUndefined(existingTenderLine)
                ? tokenizedPaymentCard.CardTokenInfo.CardToken : existingTenderLine.CardToken;
            var cardTypeId = Commerce.ObjectExtensions.isNullOrUndefined(existingTenderLine)
                ? null : existingTenderLine.CardTypeId;
            var tenderTypeId = Commerce.ObjectExtensions.isNullOrUndefined(existingTenderLine)
                ? tokenizedPaymentCard.TenderType : existingTenderLine.TenderTypeId;
            var maskedCardNumber = Commerce.ObjectExtensions.isNullOrUndefined(existingTenderLine)
                ? tokenizedPaymentCard.CardTokenInfo.MaskedCardNumber : existingTenderLine.MaskedCardNumber;
            var paymentServiceAccountId = Commerce.ObjectExtensions.isNullOrUndefined(existingTenderLine)
                ? null : existingTenderLine.CardPaymentAccountId;
            var request = new Commerce.Payments.AuthorizeCardTokenAndAddToCartClientRequest(correlationId, cardToken, cardTypeId, tenderTypeId, maskedCardNumber, paymentServiceAccountId);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
        };
        ConcludeTransactionClientRequestHandler.prototype._updateInvalidShippingDateOnCartLinesAsync = function () {
            var updateShippingDateQueue = new Commerce.AsyncQueue();
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            updateShippingDateQueue
                .enqueue(function () {
                return Commerce.NotificationHandler
                    .displayErrorMessage(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSHIPPINGDATE);
            })
                .enqueue(function () {
                var cartLinesToUpdate = Commerce.Session.instance.cart.CartLines.filter(function (cartLine) {
                    return !cartLine.IsInvoiceLine && !Commerce.DateExtensions.isTodayOrFutureDate(cartLine.RequestedDeliveryDate);
                }).map(function (cartLine) {
                    return new Commerce.Proxy.Entities.CartLineClass(cartLine);
                });
                var originalDeliveryDate = Commerce.DeliveryHelper.getDeliveryDate(Commerce.Session.instance.cart, cartLinesToUpdate);
                var getShippingDateActivity = new Commerce.Activities.GetShippingDateActivity({
                    originalShippingDate: originalDeliveryDate,
                    deliveryMethodDescription: Commerce.StringExtensions.EMPTY
                });
                getShippingDateActivity.responseHandler = function (response) {
                    cartLinesToUpdate.forEach(function (cartLine) {
                        cartLine.RequestedDeliveryDate = response.requestedShippingDate;
                    });
                    return cartManager.updateCartLinesOnCartAsync(cartLinesToUpdate);
                };
                return getShippingDateActivity.execute().done(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(getShippingDateActivity.response)) {
                        updateShippingDateQueue.cancel();
                    }
                });
            });
            return updateShippingDateQueue.run();
        };
        return ConcludeTransactionClientRequestHandler;
    }(Commerce.EndTransactionClientRequestHandlerBase));
    Commerce.ConcludeTransactionClientRequestHandler = ConcludeTransactionClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CreateCustomerServiceRequestHandler = (function (_super) {
        __extends(CreateCustomerServiceRequestHandler, _super);
        function CreateCustomerServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreateCustomerServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.CreateCustomerServiceRequest;
        };
        CreateCustomerServiceRequestHandler.prototype.executeAsync = function (request) {
            var asyncQueue = new Commerce.AsyncQueue();
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            var createdCustomer;
            if (Commerce.ObjectExtensions.isNullOrUndefined(request.customer.CustomerTypeValue) ||
                Commerce.StringExtensions.isNullOrWhitespace(request.customer.CustomerGroup) ||
                Commerce.StringExtensions.isNullOrWhitespace(request.customer.Language) ||
                Commerce.StringExtensions.isNullOrWhitespace(request.customer.CurrencyCode)) {
                asyncQueue.enqueue(function () {
                    var defaultCustomerId = Commerce.ApplicationContext.Instance.storeInformation.DefaultCustomerAccount;
                    var getDefaultCustomerClientRequest = new Commerce.GetCustomerClientRequest(defaultCustomerId, request.correlationId);
                    return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getDefaultCustomerClientRequest)))
                        .done(function (customerResponse) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(request.customer.CustomerTypeValue)) {
                            request.customer.CustomerTypeValue = customerResponse.data.result.CustomerTypeValue;
                        }
                        if (Commerce.StringExtensions.isNullOrWhitespace(request.customer.CustomerGroup)) {
                            request.customer.CustomerGroup = customerResponse.data.result.CustomerGroup;
                        }
                        if (Commerce.StringExtensions.isNullOrWhitespace(request.customer.Language)) {
                            request.customer.Language = customerResponse.data.result.Language;
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(request.customer.ReceiptSettings)) {
                            request.customer.ReceiptSettings = customerResponse.data.result.ReceiptSettings;
                        }
                        if (Commerce.StringExtensions.isNullOrWhitespace(request.customer.CurrencyCode)) {
                            request.customer.CurrencyCode = customerResponse.data.result.CurrencyCode;
                        }
                    });
                });
            }
            asyncQueue.enqueue(function () {
                var errors = Commerce.CustomerHelper.validateCustomer(request.customer);
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                return Commerce.VoidAsyncResult.createResolved();
            }).enqueue(function () {
                return customerManager.addNewCustomerAsync(request.customer).done(function (customer) {
                    createdCustomer = customer;
                });
            });
            return asyncQueue.run().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.CreateCustomerServiceResponse(createdCustomer)
                };
            }).getPromise();
        };
        return CreateCustomerServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.CreateCustomerServiceRequestHandler = CreateCustomerServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CreateEmptyCartServiceRequestHandler = (function (_super) {
        __extends(CreateEmptyCartServiceRequestHandler, _super);
        function CreateEmptyCartServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreateEmptyCartServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.CreateEmptyCartServiceRequest;
        };
        CreateEmptyCartServiceRequestHandler.prototype.executeAsync = function (request) {
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            if (!Commerce.Session.instance.isCartInProgress) {
                var asyncQueue_3 = new Commerce.AsyncQueue();
                asyncQueue_3.enqueue(function () {
                    return asyncQueue_3.cancelOn(Commerce.ActivityHelper.getStartOfTransactionReasonCodesAsyncQueue(Commerce.Session.instance.cart).run());
                }).enqueue(function () {
                    if (!Commerce.Session.instance.isCartInProgress) {
                        return cartManager.createEmptyCartAsync();
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                });
                return asyncQueue_3.run().map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? null : new Commerce.CreateEmptyCartServiceResponse(Commerce.Session.instance.cart)
                    };
                }).getPromise();
            }
            else {
                var error = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.OPERATION_NOT_ALLOWED_FINISH_CURRENT_TRANSACTION);
                Commerce.RetailLogger.createEmptyCartServiceRequestValidationFailed(request.correlationId, Commerce.ErrorHelper.formatErrorMessage(error));
                return Promise.reject([error]);
            }
        };
        return CreateEmptyCartServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.CreateEmptyCartServiceRequestHandler = CreateEmptyCartServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CreateNonSalesTransactionServiceRequestHandler = (function (_super) {
        __extends(CreateNonSalesTransactionServiceRequestHandler, _super);
        function CreateNonSalesTransactionServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreateNonSalesTransactionServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.CreateNonSalesTransactionServiceRequest;
        };
        CreateNonSalesTransactionServiceRequestHandler.prototype.executeAsync = function (request) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(request.transaction)) {
                return Promise.reject(new Error("CreateNonSalesTransactionServiceRequestHandler: The non-sales transaction cannot be null or undefined"));
            }
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
            return manager.createNonSalesTransaction(request.transaction)
                .map(function (transaction) {
                return {
                    canceled: false,
                    data: new Commerce.CreateNonSalesTransactionServiceResponse(transaction)
                };
            }).getPromise();
        };
        return CreateNonSalesTransactionServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.CreateNonSalesTransactionServiceRequestHandler = CreateNonSalesTransactionServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DeclareStartingAmountClientRequestHandler = (function (_super) {
        __extends(DeclareStartingAmountClientRequestHandler, _super);
        function DeclareStartingAmountClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DeclareStartingAmountClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.DeclareStartingAmountClientRequest;
        };
        DeclareStartingAmountClientRequestHandler.prototype.executeAsync = function (request) {
            var nonSalesTransaction = { Id: "" };
            nonSalesTransaction.Amount = request.startingAmount;
            nonSalesTransaction.ForeignCurrency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
            nonSalesTransaction.TransactionTypeValue = Commerce.Client.Entities.ExtensibleTransactionType.StartingAmount.Value;
            nonSalesTransaction.Description = Commerce.ObjectExtensions.isNullOrUndefined(request.comment) ? Commerce.StringExtensions.EMPTY : request.comment;
            nonSalesTransaction.ShiftId = Commerce.Session.instance.Shift.ShiftId.toString();
            nonSalesTransaction.ShiftTerminalId = Commerce.Session.instance.Shift.TerminalId;
            var createNonSalesTransactionServiceRequest = new Commerce.CreateNonSalesTransactionServiceRequest(request.correlationId, nonSalesTransaction);
            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createNonSalesTransactionServiceRequest))
                .map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.DeclareStartingAmountClientResponse(result.data.transaction)
                };
            }).getPromise();
        };
        return DeclareStartingAmountClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.DeclareStartingAmountClientRequestHandler = DeclareStartingAmountClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetAddressPurposesServiceRequestHandler = (function (_super) {
        __extends(GetAddressPurposesServiceRequestHandler, _super);
        function GetAddressPurposesServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetAddressPurposesServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetAddressPurposesServiceRequest;
        };
        GetAddressPurposesServiceRequestHandler.prototype.executeAsync = function (request) {
            if (Commerce.ArrayExtensions.hasElements(Commerce.ApplicationContext.Instance.addressPurposes)) {
                return Promise.resolve({
                    canceled: false,
                    data: new Commerce.GetAddressPurposesServiceResponse(Commerce.ApplicationContext.Instance.addressPurposes)
                });
            }
            else {
                var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                return channelManager.getAddressPurposesAsync().getPromise()
                    .then(function (addressPurposes) {
                    Commerce.ApplicationContext.Instance.addressPurposes = addressPurposes;
                    return Promise.resolve({
                        canceled: false,
                        data: new Commerce.GetAddressPurposesServiceResponse(addressPurposes)
                    });
                });
            }
        };
        return GetAddressPurposesServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetAddressPurposesServiceRequestHandler = GetAddressPurposesServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetApplicationVersionClientRequestHandler = (function (_super) {
        __extends(GetApplicationVersionClientRequestHandler, _super);
        function GetApplicationVersionClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetApplicationVersionClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetApplicationVersionClientRequest;
        };
        GetApplicationVersionClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetApplicationVersionClientResponse(Commerce.ViewModelAdapter.getApplicationVersion());
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetApplicationVersionClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetApplicationVersionClientRequestHandler = GetApplicationVersionClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetAuthenticationTokenClientRequestHandler = (function (_super) {
        __extends(GetAuthenticationTokenClientRequestHandler, _super);
        function GetAuthenticationTokenClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetAuthenticationTokenClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetAuthenticationTokenClientRequest;
        };
        GetAuthenticationTokenClientRequestHandler.prototype.executeAsync = function (request) {
            return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.USER)
                .map(function (authToken) {
                return {
                    canceled: false, data: new Commerce.GetAuthenticationTokenClientResponse(authToken)
                };
            }).getPromise();
        };
        return GetAuthenticationTokenClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetAuthenticationTokenClientRequestHandler = GetAuthenticationTokenClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetAvailableUnreconciledEntriesServiceRequestHandler = (function (_super) {
        __extends(GetAvailableUnreconciledEntriesServiceRequestHandler, _super);
        function GetAvailableUnreconciledEntriesServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetAvailableUnreconciledEntriesServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetAvailableUnreconciledEntriesServiceRequest;
        };
        GetAvailableUnreconciledEntriesServiceRequestHandler.prototype.executeAsync = function (request) {
            var searchCriteria = this._getSearchCriteria(request);
            if (Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria)) {
                return Promise.resolve({ canceled: false, data: new Commerce.GetAvailableUnreconciledEntriesServiceResponse(null) });
            }
            else {
                var storeOperationsManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                return storeOperationsManager.getShiftReconciliationLinesAsync(searchCriteria)
                    .map(function (shiftReconciliationLines) {
                    return {
                        canceled: false,
                        data: new Commerce.GetAvailableUnreconciledEntriesServiceResponse(shiftReconciliationLines)
                    };
                }).getPromise();
            }
        };
        GetAvailableUnreconciledEntriesServiceRequestHandler.prototype._getSearchCriteria = function (request) {
            var searchCriteria = new Commerce.Proxy.Entities.ShiftReconciliationLineRetrievalCriteriaClass();
            searchCriteria.ShiftReconciliationLineStatusValue = Commerce.Proxy.Entities.ShiftReconciliationLineStatus.Pending.valueOf();
            searchCriteria.TransactionTypeValues = [];
            searchCriteria.Shifts = [];
            if (request.transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                switch (request.transactionType) {
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry:
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value);
                        searchCriteria.DestinationShift = this._getShiftKey(request.shift);
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender:
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value);
                        searchCriteria.Shifts.push(this._getShiftKey(request.shift));
                        searchCriteria.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount:
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value);
                        searchCriteria.DestinationShift = this._getShiftKey(request.shift);
                        searchCriteria.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop:
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value);
                        searchCriteria.Shifts.push(this._getShiftKey(request.shift));
                        searchCriteria.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                        break;
                    default:
                        searchCriteria = null;
                }
            }
            else if (request.transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe) {
                switch (request.transactionType) {
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry:
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.Value);
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.Value);
                        searchCriteria.DestinationSafe = request.storeSafe.SafeNumber;
                        break;
                    case Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender:
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.Value);
                        searchCriteria.TransactionTypeValues.push(Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.Value);
                        searchCriteria.SourceSafe = request.storeSafe.SafeNumber;
                        break;
                    default:
                        searchCriteria = null;
                }
            }
            else {
                searchCriteria = null;
            }
            return searchCriteria;
        };
        GetAvailableUnreconciledEntriesServiceRequestHandler.prototype._getShiftKey = function (shift) {
            var shiftKey = {
                ShiftId: shift.ShiftId,
                ShiftTerminalId: shift.TerminalId,
                Store: shift.StoreId
            };
            return shiftKey;
        };
        return GetAvailableUnreconciledEntriesServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetAvailableUnreconciledEntriesServiceRequestHandler = GetAvailableUnreconciledEntriesServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetChannelConfigurationClientRequestHandler = (function (_super) {
        __extends(GetChannelConfigurationClientRequestHandler, _super);
        function GetChannelConfigurationClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetChannelConfigurationClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetChannelConfigurationClientRequest;
        };
        GetChannelConfigurationClientRequestHandler.prototype.executeAsync = function (request) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.channelConfiguration)) {
                var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                return channelManager.getChannelConfigurationAsync().map(function (channelConfiguration) {
                    Commerce.ApplicationContext.Instance.channelConfiguration = channelConfiguration;
                    return { canceled: false, data: new Commerce.GetChannelConfigurationClientResponse(channelConfiguration) };
                }).getPromise();
            }
            var response = new Commerce.GetChannelConfigurationClientResponse(Commerce.ApplicationContext.Instance.channelConfiguration);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetChannelConfigurationClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetChannelConfigurationClientRequestHandler = GetChannelConfigurationClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetCommissionSalesGroupsServiceRequestHandler = (function (_super) {
        __extends(GetCommissionSalesGroupsServiceRequestHandler, _super);
        function GetCommissionSalesGroupsServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetCommissionSalesGroupsServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetCommissionSalesGroupsServiceRequest;
        };
        GetCommissionSalesGroupsServiceRequestHandler.prototype.executeAsync = function (request) {
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            return channelManager.getCommissionSalesGroupsAsync()
                .map(function (commissionSalesGroups) {
                return {
                    canceled: false,
                    data: new Commerce.GetCommissionSalesGroupsServiceResponse(commissionSalesGroups)
                };
            }).getPromise();
        };
        return GetCommissionSalesGroupsServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetCommissionSalesGroupsServiceRequestHandler = GetCommissionSalesGroupsServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetConnectionStatusClientRequestHandler = (function (_super) {
        __extends(GetConnectionStatusClientRequestHandler, _super);
        function GetConnectionStatusClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetConnectionStatusClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetConnectionStatusClientRequest;
        };
        GetConnectionStatusClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetConnectionStatusClientResponse(Commerce.Session.instance.connectionStatus);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetConnectionStatusClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetConnectionStatusClientRequestHandler = GetConnectionStatusClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetCurrenciesServiceRequestHandler = (function (_super) {
        __extends(GetCurrenciesServiceRequestHandler, _super);
        function GetCurrenciesServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetCurrenciesServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetCurrenciesServiceRequest;
        };
        GetCurrenciesServiceRequestHandler.prototype.executeAsync = function (request) {
            if (Commerce.ArrayExtensions.hasElements(Commerce.ApplicationContext.Instance.Currencies)) {
                return Promise.resolve({ canceled: false, data: new Commerce.GetCurrenciesServiceResponse(Commerce.ApplicationContext.Instance.Currencies) });
            }
            else {
                var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                return channelManager.getCurrenciesAsync()
                    .done(function (currencies) {
                    Commerce.ApplicationContext.Instance.Currencies = currencies;
                })
                    .map(function (currencies) {
                    return {
                        canceled: false,
                        data: new Commerce.GetCurrenciesServiceResponse(currencies)
                    };
                }).getPromise();
            }
        };
        return GetCurrenciesServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetCurrenciesServiceRequestHandler = GetCurrenciesServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetCurrentCartClientRequestHandler = (function (_super) {
        __extends(GetCurrentCartClientRequestHandler, _super);
        function GetCurrentCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetCurrentCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetCurrentCartClientRequest;
        };
        GetCurrentCartClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetCurrentCartClientResponse(Commerce.Session.instance.cart);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetCurrentCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetCurrentCartClientRequestHandler = GetCurrentCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetCurrentShiftClientRequestHandler = (function (_super) {
        __extends(GetCurrentShiftClientRequestHandler, _super);
        function GetCurrentShiftClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetCurrentShiftClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetCurrentShiftClientRequest;
        };
        GetCurrentShiftClientRequestHandler.prototype.executeAsync = function (request) {
            var currentShift = Commerce.Session.instance.Shift;
            var clonedCurrentShift = Commerce.ObjectExtensions.clone(currentShift);
            var response = new Commerce.GetCurrentShiftClientResponse(clonedCurrentShift);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetCurrentShiftClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetCurrentShiftClientRequestHandler = GetCurrentShiftClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetCustomerClientRequestHandler = (function (_super) {
        __extends(GetCustomerClientRequestHandler, _super);
        function GetCustomerClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetCustomerClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetCustomerClientRequest;
        };
        GetCustomerClientRequestHandler.prototype.executeAsync = function (request) {
            var result;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Customer) && Commerce.Session.instance.Customer.AccountNumber === request.customerId) {
                result = Promise.resolve({
                    canceled: false,
                    data: new Commerce.GetCustomerClientResponse(Commerce.Session.instance.Customer)
                });
            }
            else {
                var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
                result = manager.getCustomersByAccountNumbersAsync([request.customerId]).getPromise()
                    .then(function (customers) {
                    return Commerce.ArrayExtensions.hasElements(customers) ? customers[0] : null;
                }).then(function (customer) {
                    return Promise.resolve({
                        canceled: false,
                        data: new Commerce.GetCustomerClientResponse(customer)
                    });
                });
            }
            return result;
        };
        return GetCustomerClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetCustomerClientRequestHandler = GetCustomerClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetDenominationTotalsClientRequestHandler = (function (_super) {
        __extends(GetDenominationTotalsClientRequestHandler, _super);
        function GetDenominationTotalsClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetDenominationTotalsClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetDenominationTotalsClientRequest;
        };
        GetDenominationTotalsClientRequestHandler.prototype.executeAsync = function (request) {
            var activity = new Commerce.Activities.GetDenominationTotalsActivity({
                pageTitle: Commerce.StringExtensions.EMPTY,
                denominationDetails: request.denominationDetails,
                tenderTypeId: request.tenderTypeId,
                currencyCode: request.currencyCode,
                correlationId: request.correlationId
            });
            return activity.execute().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.GetDenominationTotalsClientResponse(result.data)
                };
            }).getPromise();
        };
        return GetDenominationTotalsClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetDenominationTotalsClientRequestHandler = GetDenominationTotalsClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetDeviceConfigurationClientRequestHandler = (function (_super) {
        __extends(GetDeviceConfigurationClientRequestHandler, _super);
        function GetDeviceConfigurationClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetDeviceConfigurationClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetDeviceConfigurationClientRequest;
        };
        GetDeviceConfigurationClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetDeviceConfigurationClientResponse(Commerce.ApplicationContext.Instance.deviceConfiguration);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetDeviceConfigurationClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetDeviceConfigurationClientRequestHandler = GetDeviceConfigurationClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetExtensionProfileClientRequestHandler = (function (_super) {
        __extends(GetExtensionProfileClientRequestHandler, _super);
        function GetExtensionProfileClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetExtensionProfileClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetExtensionProfileClientRequest;
        };
        GetExtensionProfileClientRequestHandler.prototype.executeAsync = function (request) {
            if (GetExtensionProfileClientRequestHandler._extensionProfile) {
                return Promise.resolve({
                    canceled: false,
                    data: new Commerce.GetExtensionProfileClientResponse(GetExtensionProfileClientRequestHandler._extensionProfile)
                });
            }
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            return channelManager.getExtensionProfile().map(function (result) {
                GetExtensionProfileClientRequestHandler._extensionProfile = result;
                return {
                    canceled: false,
                    data: new Commerce.GetExtensionProfileClientResponse(GetExtensionProfileClientRequestHandler._extensionProfile)
                };
            }).getPromise();
        };
        return GetExtensionProfileClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetExtensionProfileClientRequestHandler = GetExtensionProfileClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetHardwareProfileClientRequestHandler = (function (_super) {
        __extends(GetHardwareProfileClientRequestHandler, _super);
        function GetHardwareProfileClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetHardwareProfileClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetHardwareProfileClientRequest;
        };
        GetHardwareProfileClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetHardwareProfileClientResponse(Commerce.ApplicationContext.Instance.hardwareProfile);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetHardwareProfileClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetHardwareProfileClientRequestHandler = GetHardwareProfileClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetKeyedInPriceClientRequestHandler = (function (_super) {
        __extends(GetKeyedInPriceClientRequestHandler, _super);
        function GetKeyedInPriceClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetKeyedInPriceClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetKeyedInPriceClientRequest;
        };
        GetKeyedInPriceClientRequestHandler.prototype.executeAsync = function (request) {
            var getProductsByIdsClientRequest = new Commerce.Products.GetProductsByIdsClientRequest([request.productId]);
            return Commerce.Runtime.executeAsync(getProductsByIdsClientRequest)
                .then(function (result) {
                if (!result.canceled && !Commerce.ObjectExtensions.isNullOrUndefined(result.data) && Commerce.ArrayExtensions.hasElements(result.data.products)) {
                    var product = result.data.products[0];
                    var activity_3 = new Commerce.Activities.GetProductKeyInPriceActivity({
                        product: product,
                        minPrice: request.minPrice,
                        maxPrice: request.maxPrice,
                        minPriceInclusive: request.isMinPriceInclusive,
                        maxPriceInclusive: request.isMaxPriceInclusive
                    });
                    activity_3.responseHandler = function (response) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration.MaximumPrice)
                            && (Commerce.ApplicationContext.Instance.deviceConfiguration.MaximumPrice !== 0)
                            && (Commerce.ApplicationContext.Instance.deviceConfiguration.MaximumPrice < response.keyInPrice)) {
                            var validationError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MUSTKEYIN_PRICE_EXCEEDS_MAXIMUM_DEVICE_PRICE);
                            return Commerce.VoidAsyncResult.createRejected([validationError]);
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    };
                    return activity_3.execute().map(function () {
                        var hasActivityResponse = !Commerce.ObjectExtensions.isNullOrUndefined(activity_3.response);
                        var response = null;
                        if (hasActivityResponse) {
                            response = new Commerce.GetKeyedInPriceClientResponse(activity_3.response.keyInPrice);
                        }
                        return { canceled: !hasActivityResponse, data: response };
                    }).getPromise();
                }
                else {
                    return Promise.resolve({
                        canceled: true,
                        data: null
                    });
                }
            });
        };
        return GetKeyedInPriceClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetKeyedInPriceClientRequestHandler = GetKeyedInPriceClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetLoggedOnEmployeeClientRequestHandler = (function (_super) {
        __extends(GetLoggedOnEmployeeClientRequestHandler, _super);
        function GetLoggedOnEmployeeClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetLoggedOnEmployeeClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetLoggedOnEmployeeClientRequest;
        };
        GetLoggedOnEmployeeClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetLoggedOnEmployeeClientResponse(Commerce.Session.instance.CurrentEmployee);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetLoggedOnEmployeeClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetLoggedOnEmployeeClientRequestHandler = GetLoggedOnEmployeeClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetNotificationsRequestHandler = (function (_super) {
        __extends(GetNotificationsRequestHandler, _super);
        function GetNotificationsRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetNotificationsRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetNotificationsRequest;
        };
        GetNotificationsRequestHandler.prototype.executeAsync = function (request) {
            Commerce.RetailLogger.getAllNotificationsStarted(request.correlationId);
            var notificationManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.INotificationManagerName);
            return notificationManager.getNotificationsAsync([])
                .map(function (notificationItems) {
                Commerce.RetailLogger.getAllNotificationsCompleted(request.correlationId);
                var notifications = [];
                var pulledDate = Commerce.DateExtensions.now;
                notificationItems.forEach(function (notificationItem) {
                    var notification = {
                        Action: notificationItem.Action,
                        ActionName: notificationItem.ActionName,
                        NotificationDetails: [],
                        ExtensionProperties: notificationItem.ExtensionProperties,
                        lastPullDateTime: pulledDate
                    };
                    if (notificationItem.NotificationDetails.length === 0) {
                        notification.NotificationDetails = Commerce.NotificationHelper.getNotificationError(notification).NotificationDetails;
                    }
                    else {
                        notification.NotificationDetails = notificationItem.NotificationDetails;
                        notification.NotificationDetails.forEach(function (notificationDetail) {
                            if (notificationDetail.IsNew) {
                                Commerce.Session.instance.newNotificationStatus = true;
                                return;
                            }
                        });
                    }
                    Commerce.Session.instance.addToNotifications(notification);
                    notifications.push(notification);
                });
                Commerce.Session.instance.isGetNotificationsSuccessful = true;
                Commerce.Session.instance.lastPullDateTime = Commerce.DateExtensions.now;
                Commerce.Session.instance.recentlyPulledNotificationsStatus = true;
                var response = new Commerce.GetNotificationsResponse(notifications);
                var result = {
                    canceled: false,
                    data: response
                };
                return result;
            }).fail(function (errors) {
                Commerce.RetailLogger.getNotificationsFailed(0, errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                if (Commerce.Session.instance.notifications.length() === 0) {
                    Commerce.Session.instance.notifications.setItem(Commerce.StringExtensions.EMPTY, Commerce.NotificationHelper.getNotificationError());
                }
                else {
                    Commerce.Session.instance.getAllFromNotifications().forEach(function (notification) {
                        notification = Commerce.NotificationHelper.getNotificationError(notification);
                    });
                    Commerce.Session.instance.isGetNotificationsSuccessful = true;
                }
                Commerce.Session.instance.lastPullDateTime = Commerce.DateExtensions.now;
                Commerce.Session.instance.recentlyPulledNotificationsStatus = true;
            }).getPromise();
        };
        return GetNotificationsRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetNotificationsRequestHandler = GetNotificationsRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetOfflinePendingTransactionCountClientRequestHandler = (function (_super) {
        __extends(GetOfflinePendingTransactionCountClientRequestHandler, _super);
        function GetOfflinePendingTransactionCountClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetOfflinePendingTransactionCountClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetOfflinePendingTransactionCountClientRequest;
        };
        GetOfflinePendingTransactionCountClientRequestHandler.prototype.executeAsync = function (request) {
            var storeOperationsManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
            if (Commerce.Session.instance.isOfflineAvailable && Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                return storeOperationsManager.getOfflinePendingTransactionCount()
                    .map(function (count) {
                    var result = {
                        canceled: false,
                        data: new Commerce.GetOfflinePendingTransactionCountClientResponse(count)
                    };
                    return result;
                })
                    .getPromise();
            }
            return Promise.resolve({
                canceled: false,
                data: new Commerce.GetOfflinePendingTransactionCountClientResponse(0)
            });
        };
        return GetOfflinePendingTransactionCountClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetOfflinePendingTransactionCountClientRequestHandler = GetOfflinePendingTransactionCountClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetOrgUnitConfigurationClientRequestHandler = (function (_super) {
        __extends(GetOrgUnitConfigurationClientRequestHandler, _super);
        function GetOrgUnitConfigurationClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetOrgUnitConfigurationClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetOrgUnitConfigurationClientRequest;
        };
        GetOrgUnitConfigurationClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetOrgUnitConfigurationClientResponse(Commerce.ApplicationContext.Instance.channelConfiguration);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetOrgUnitConfigurationClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetOrgUnitConfigurationClientRequestHandler = GetOrgUnitConfigurationClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetOrgUnitTenderTypesClientRequestHandler = (function (_super) {
        __extends(GetOrgUnitTenderTypesClientRequestHandler, _super);
        function GetOrgUnitTenderTypesClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetOrgUnitTenderTypesClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetOrgUnitTenderTypesClientRequest;
        };
        GetOrgUnitTenderTypesClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetOrgUnitTenderTypesClientResponse(Commerce.ApplicationContext.Instance.tenderTypes);
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetOrgUnitTenderTypesClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetOrgUnitTenderTypesClientRequestHandler = GetOrgUnitTenderTypesClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetPickupDateClientRequestHandler = (function (_super) {
        __extends(GetPickupDateClientRequestHandler, _super);
        function GetPickupDateClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetPickupDateClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetPickupDateClientRequest;
        };
        GetPickupDateClientRequestHandler.prototype.executeAsync = function (request) {
            var activity = new Commerce.Activities.GetDateActivity({
                minYear: Commerce.DateExtensions.getDate().getFullYear(),
                title: Commerce.ViewModelAdapter.getResourceString("string_2505"),
                subTitle: Commerce.ViewModelAdapter.getResourceString("string_2507")
            });
            return activity.execute().map(function () {
                var hasActivityResponse = !Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                var response = null;
                if (hasActivityResponse) {
                    response = new Commerce.GetPickupDateClientResponse(activity.response.date);
                }
                return { canceled: !hasActivityResponse, data: response };
            }).getPromise();
        };
        return GetPickupDateClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetPickupDateClientRequestHandler = GetPickupDateClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetReasonCodeLinesClientRequestHandler = (function (_super) {
        __extends(GetReasonCodeLinesClientRequestHandler, _super);
        function GetReasonCodeLinesClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetReasonCodeLinesClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetReasonCodeLinesClientRequest;
        };
        GetReasonCodeLinesClientRequestHandler.prototype.executeAsync = function (request) {
            if (request.reasonCodeIds.some(function (id) { return Commerce.StringExtensions.isNullOrWhitespace(id); })) {
                throw new Error("GetReasonCodeLinesClientRequestHandler: at least one reason code identifier is null or whitespace.");
            }
            var uniqueReasonCodesById = new Commerce.Dictionary();
            var uniqueIds = new Commerce.Dictionary();
            request.reasonCodeIds.forEach(function (id) { return uniqueIds.setItem(id, id); });
            var storeOperationsManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
            var asyncQueue = new Commerce.AsyncQueue();
            uniqueIds.forEach(function (key, id) {
                asyncQueue.enqueue(function () {
                    return storeOperationsManager.getReasonCodesByIdAsync(id).done(function (reasonCodes) {
                        uniqueReasonCodesById.setItems(reasonCodes, function (reasonCode) { return reasonCode.ReasonCodeId; });
                    });
                });
            });
            var activity;
            asyncQueue.enqueue(function () {
                activity = new Commerce.Activities.GetReasonCodeLinesActivity({ reasonCodes: uniqueReasonCodesById.getItems(), reasonCodesContainer: null });
                return activity.execute();
            }).cancel(function () { return Commerce.ObjectExtensions.isNullOrUndefined(activity.response); });
            return asyncQueue.run().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.GetReasonCodeLinesClientResponse(activity.response.reasonCodeLines)
                };
            }).getPromise();
        };
        return GetReasonCodeLinesClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetReasonCodeLinesClientRequestHandler = GetReasonCodeLinesClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetReceiptEmailAddressClientRequestHandler = (function (_super) {
        __extends(GetReceiptEmailAddressClientRequestHandler, _super);
        function GetReceiptEmailAddressClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetReceiptEmailAddressClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetReceiptEmailAddressClientRequest;
        };
        GetReceiptEmailAddressClientRequestHandler.prototype.executeAsync = function (request) {
            var customer = Commerce.Session.instance.Customer;
            var receiptEmailAddress = Commerce.StringExtensions.EMPTY;
            var defaultReceiptEmailAddress = Commerce.StringExtensions.EMPTY;
            if (!Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                defaultReceiptEmailAddress = !Commerce.StringExtensions.isNullOrWhitespace(customer.ReceiptEmail) ? customer.ReceiptEmail : customer.Email;
            }
            var activity = new Commerce.Activities.GetEmailForReceiptActivity({
                emailAddress: defaultReceiptEmailAddress
            });
            var saveEmailOnCustomer;
            activity.responseHandler = function (response) {
                Commerce.RetailLogger.concludeTransactionHandlerCartEmailSetForReceipt(request.correlationId);
                if (Commerce.StringExtensions.isNullOrWhitespace(response.emailAddress)) {
                    var errors = [];
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.RECEIPT_EMAIL_IS_EMPTY));
                    return Commerce.AsyncResult.createRejected(errors);
                }
                if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                    receiptEmailAddress = Commerce.StringExtensions.EMPTY;
                    var errors = [];
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.EMAIL_RECEIPT_NOT_ALLOWED_IN_OFFLINE_STATE));
                    return Commerce.NotificationHandler.displayClientErrors(errors);
                }
                else {
                    receiptEmailAddress = response.emailAddress;
                    saveEmailOnCustomer = response.saveEmailOnCustomer;
                    return Commerce.VoidAsyncResult.createResolved();
                }
            };
            return activity.execute()
                .map(function () {
                var canceled = Commerce.StringExtensions.isNullOrWhitespace(receiptEmailAddress);
                return {
                    canceled: canceled,
                    data: canceled
                        ? null
                        : new Commerce.GetReceiptEmailAddressClientResponse({ emailAddress: receiptEmailAddress, saveEmailOnCustomer: saveEmailOnCustomer })
                };
            }).getPromise();
        };
        return GetReceiptEmailAddressClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetReceiptEmailAddressClientRequestHandler = GetReceiptEmailAddressClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetReceiptsClientRequestHandler = (function (_super) {
        __extends(GetReceiptsClientRequestHandler, _super);
        function GetReceiptsClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetReceiptsClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetReceiptsClientRequest;
        };
        GetReceiptsClientRequestHandler.prototype.executeAsync = function (request) {
            var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
            return salesOrderManager.getReceiptsForPrintAsync(request.salesOrderId, request.retrievalCriteria.IsCopy, request.retrievalCriteria.ReceiptTypeValue, request.retrievalCriteria.IsRemoteTransaction, request.retrievalCriteria.ShiftId, request.retrievalCriteria.ShiftTerminalId, request.retrievalCriteria.IsPreview, request.retrievalCriteria.QueryBySalesId, request.retrievalCriteria.HardwareProfileId).map(function (receipts) {
                var result = {
                    canceled: false,
                    data: new Commerce.GetReceiptsClientResponse(receipts)
                };
                return result;
            }).getPromise();
        };
        return GetReceiptsClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetReceiptsClientRequestHandler = GetReceiptsClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetSalesOrderDetailsByTransactionIdClientRequestHandler = (function (_super) {
        __extends(GetSalesOrderDetailsByTransactionIdClientRequestHandler, _super);
        function GetSalesOrderDetailsByTransactionIdClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetSalesOrderDetailsByTransactionIdClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetSalesOrderDetailsByTransactionIdClientRequest;
        };
        GetSalesOrderDetailsByTransactionIdClientRequestHandler.prototype.executeAsync = function (request) {
            var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
            return salesOrderManager.getSalesOrderDetailsByTransactionIdAsync(request.transactionId, request.searchLocation).map(function (salesOrder) {
                var result = {
                    canceled: false,
                    data: new Commerce.GetSalesOrderDetailsByTransactionIdClientResponse(salesOrder)
                };
                return result;
            }).getPromise();
        };
        return GetSalesOrderDetailsByTransactionIdClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetSalesOrderDetailsByTransactionIdClientRequestHandler = GetSalesOrderDetailsByTransactionIdClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetSalesOrdersWithNoFiscalTransactionsRequestHandler = (function (_super) {
        __extends(GetSalesOrdersWithNoFiscalTransactionsRequestHandler, _super);
        function GetSalesOrdersWithNoFiscalTransactionsRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetSalesOrdersWithNoFiscalTransactionsRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetSalesOrdersWithNoFiscalTransactionsRequest;
        };
        GetSalesOrdersWithNoFiscalTransactionsRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFiscalRegisterManagerName);
            return manager.getSalesOrdersWithNoFiscalTransactions(request.storeNumber, request.terminalId)
                .map(function (salesOrders) {
                return {
                    canceled: false, data: new Commerce.GetSalesOrdersWithNoFiscalTransactionsResponse(salesOrders)
                };
            })
                .getPromise();
        };
        return GetSalesOrdersWithNoFiscalTransactionsRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetSalesOrdersWithNoFiscalTransactionsRequestHandler = GetSalesOrdersWithNoFiscalTransactionsRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetScanResultClientRequestHandler = (function (_super) {
        __extends(GetScanResultClientRequestHandler, _super);
        function GetScanResultClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetScanResultClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetScanResultClientRequest;
        };
        GetScanResultClientRequestHandler.prototype.executeAsync = function (request) {
            var scanText = request.scanText;
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            return cartManager.getScanResult(scanText).map(function (scanData) {
                var response = new Commerce.GetScanResultClientResponse(scanData);
                var result = {
                    canceled: false,
                    data: response
                };
                return result;
            }).getPromise();
        };
        return GetScanResultClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetScanResultClientRequestHandler = GetScanResultClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetSessionInfoClientRequestHandler = (function (_super) {
        __extends(GetSessionInfoClientRequestHandler, _super);
        function GetSessionInfoClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetSessionInfoClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetSessionInfoClientRequest;
        };
        GetSessionInfoClientRequestHandler.prototype.executeAsync = function (request) {
            var response = new Commerce.GetSessionInfoClientResponse({
                appSessionId: Microsoft.Dynamics.Diagnostics.TypeScriptCore.LoggerBase.getAppSessionId(),
                userSessionId: Microsoft.Dynamics.Diagnostics.TypeScriptCore.LoggerBase.getUserSessionId()
            });
            return Promise.resolve({ canceled: false, data: response });
        };
        return GetSessionInfoClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetSessionInfoClientRequestHandler = GetSessionInfoClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetShippingChargeClientRequestHandler = (function (_super) {
        __extends(GetShippingChargeClientRequestHandler, _super);
        function GetShippingChargeClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetShippingChargeClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetShippingChargeClientRequest;
        };
        GetShippingChargeClientRequestHandler.prototype.executeAsync = function (request) {
            var originalShippingCharge = Commerce.DeliveryHelper.calculateDeliveryCharges(Commerce.Session.instance.cart, request.cartLines);
            var shippingChargeActivityParameters = {
                originalShippingCharge: originalShippingCharge,
                deliveryMethodDescription: request.shippingMethod.Description
            };
            var getShippingChargeActivity = new Commerce.Activities.GetShippingChargeActivity(shippingChargeActivityParameters);
            return getShippingChargeActivity.execute().map(function () {
                var activityResponse = getShippingChargeActivity.response;
                if (Commerce.ObjectExtensions.isNullOrUndefined(activityResponse)) {
                    return { canceled: true, data: null };
                }
                return { canceled: false, data: new Commerce.GetShippingChargeClientResponse(activityResponse.shippingChargeAmount) };
            }).getPromise();
        };
        return GetShippingChargeClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetShippingChargeClientRequestHandler = GetShippingChargeClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetShippingDateClientRequestHandler = (function (_super) {
        __extends(GetShippingDateClientRequestHandler, _super);
        function GetShippingDateClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetShippingDateClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetShippingDateClientRequest;
        };
        GetShippingDateClientRequestHandler.prototype.executeAsync = function (request) {
            var activity = new Commerce.Activities.GetShippingDateActivity({
                originalShippingDate: request.originalDeliveryDate,
                deliveryMethodDescription: request.deliveryMethod.Description
            });
            return activity.execute().map(function () {
                var hasActivityResponse = !Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                var response = null;
                if (hasActivityResponse) {
                    response = new Commerce.GetShippingDateClientResponse(activity.response.requestedShippingDate);
                }
                return { canceled: !hasActivityResponse, data: response };
            }).getPromise();
        };
        return GetShippingDateClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetShippingDateClientRequestHandler = GetShippingDateClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Reports;
    (function (Reports) {
        "use strict";
        var GetSrsReportDataSetServiceRequestHandler = (function (_super) {
            __extends(GetSrsReportDataSetServiceRequestHandler, _super);
            function GetSrsReportDataSetServiceRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetSrsReportDataSetServiceRequestHandler.prototype.supportedRequestType = function () {
                return Reports.GetSrsReportDataSetServiceRequest;
            };
            GetSrsReportDataSetServiceRequestHandler.prototype.executeAsync = function (request) {
                var reportManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IReportManagerName);
                return reportManager.getSrsReportsDataAsync(request.reportId, request.parameters)
                    .map(function (reportDataSet) {
                    var srsReportResponse = new Reports.GetSrsReportDataSetServiceResponse(reportDataSet);
                    return { canceled: false, data: srsReportResponse };
                })
                    .getPromise();
            };
            return GetSrsReportDataSetServiceRequestHandler;
        }(Commerce.RequestHandler));
        Reports.GetSrsReportDataSetServiceRequestHandler = GetSrsReportDataSetServiceRequestHandler;
    })(Reports = Commerce.Reports || (Commerce.Reports = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetTaxOverridesServiceRequestHandler = (function (_super) {
        __extends(GetTaxOverridesServiceRequestHandler, _super);
        function GetTaxOverridesServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetTaxOverridesServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetTaxOverridesServiceRequest;
        };
        GetTaxOverridesServiceRequestHandler.prototype.executeAsync = function (request) {
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            return cartManager.getTaxOverrides(request.taxOverrideType)
                .map(function (result) {
                return {
                    canceled: false,
                    data: new Commerce.GetTaxOverridesServiceResponse(result)
                };
            }).getPromise();
        };
        return GetTaxOverridesServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetTaxOverridesServiceRequestHandler = GetTaxOverridesServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetTenderDetailsClientRequestHandler = (function (_super) {
        __extends(GetTenderDetailsClientRequestHandler, _super);
        function GetTenderDetailsClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetTenderDetailsClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetTenderDetailsClientRequest;
        };
        GetTenderDetailsClientRequestHandler.prototype.executeAsync = function (request) {
            var tenderDetail = [];
            var response = new Commerce.GetTenderDetailsClientResponse(tenderDetail);
            return Promise.resolve({
                canceled: false,
                data: response
            });
        };
        return GetTenderDetailsClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetTenderDetailsClientRequestHandler = GetTenderDetailsClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetTransferOrderHeaderClientRequestHandler = (function (_super) {
        __extends(GetTransferOrderHeaderClientRequestHandler, _super);
        function GetTransferOrderHeaderClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GetTransferOrderHeaderClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.GetTransferOrderHeaderClientRequest;
        };
        GetTransferOrderHeaderClientRequestHandler.prototype.executeAsync = function (request) {
            var asyncQueue = new Commerce.AsyncQueue();
            var warehouseManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IWarehouseManagerName);
            var inventLocationFrom = new Commerce.Proxy.Entities.WarehouseClass();
            if (!Commerce.StringExtensions.isEmpty(request.transferOrder.InventLocationIdFrom)) {
                asyncQueue.enqueue(function () {
                    return warehouseManager.getWarehouseByIdAsync(request.transferOrder.InventLocationIdFrom)
                        .done(function (result) {
                        inventLocationFrom = result;
                    });
                });
            }
            var inventLocationTo = new Commerce.Proxy.Entities.WarehouseClass();
            if (!Commerce.StringExtensions.isEmpty(request.transferOrder.InventLocationIdTo)) {
                asyncQueue.enqueue(function () {
                    return warehouseManager.getWarehouseByIdAsync(request.transferOrder.InventLocationIdTo)
                        .done(function (result) {
                        inventLocationTo = result;
                    });
                });
            }
            var activityResponse;
            asyncQueue.enqueue(function () {
                var activity = new Commerce.Activities.SetTransferOrderHeaderActivity({
                    transferOrderHeader: request.transferOrder,
                    inventLocationFrom: inventLocationFrom,
                    inventLocationTo: inventLocationTo,
                    mode: request.actionType
                });
                return activity.execute().done(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                        asyncQueue.cancel();
                    }
                    activityResponse = activity.response;
                });
            });
            return asyncQueue.run().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.GetTransferOrderHeaderClientResponse(activityResponse.transferOrderHeader)
                };
            }).getPromise();
        };
        return GetTransferOrderHeaderClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.GetTransferOrderHeaderClientRequestHandler = GetTransferOrderHeaderClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var InvalidShiftErrorHandlingClientRequestHandler = (function (_super) {
        __extends(InvalidShiftErrorHandlingClientRequestHandler, _super);
        function InvalidShiftErrorHandlingClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InvalidShiftErrorHandlingClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.InvalidShiftErrorHandlingClientRequest;
        };
        InvalidShiftErrorHandlingClientRequestHandler.prototype.executeAsync = function (request) {
            var errors = request.errors;
            if (Commerce.ObjectExtensions.isNullOrUndefined(errors)) {
                return Promise.resolve({
                    canceled: true,
                    data: null
                });
            }
            return Commerce.NotificationHandler.displayClientErrors(errors).done(function () {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.LogOffOperationRequest(correlationId)));
            }).map(function (value) {
                return { canceled: false, data: new Commerce.InvalidShiftErrorHandlingClientResponse(value) };
            }).getPromise();
        };
        return InvalidShiftErrorHandlingClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.InvalidShiftErrorHandlingClientRequestHandler = InvalidShiftErrorHandlingClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IssueCreditMemoClientRequestHandler = (function (_super) {
        __extends(IssueCreditMemoClientRequestHandler, _super);
        function IssueCreditMemoClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IssueCreditMemoClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.IssueCreditMemoClientRequest;
        };
        IssueCreditMemoClientRequestHandler.prototype.executeAsync = function (request) {
            return _super.prototype.executeAsync.call(this, request);
        };
        IssueCreditMemoClientRequestHandler.prototype._endTransactionAsync = function (correlationId, receiptEmailAddress) {
            return this._issueCreditMemoAsync(receiptEmailAddress)
                .done(function (result) {
                if (!result.canceled) {
                    Commerce.RetailLogger.concludeTransactionHandlerMemoIssuedAndCartCheckoutSuccessful(correlationId);
                }
                else {
                    Commerce.RetailLogger.concludeTransactionHandlerMemoIssuedAndCartCheckoutCancel(correlationId);
                }
            }).fail(function (errors) {
                Commerce.RetailLogger.concludeTransactionHandlerMemoIssuedAndCartCheckoutFailure(correlationId);
            });
        };
        IssueCreditMemoClientRequestHandler.prototype._createTransactionClientResponse = function (salesOrder) {
            return new Commerce.IssueCreditMemoClientResponse(salesOrder);
        };
        IssueCreditMemoClientRequestHandler.prototype._issueCreditMemoAsync = function (recipientEmailAddress) {
            var options = { recipientEmailAddress: recipientEmailAddress };
            var result = Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.IssueCreditMemo, options);
            return result.map(function (operationResult) {
                return {
                    canceled: false,
                    data: { salesOrder: operationResult.data.salesOrder, finalCheckedOutCart: operationResult.data.finalCheckedOutCart }
                };
            });
        };
        return IssueCreditMemoClientRequestHandler;
    }(Commerce.EndTransactionClientRequestHandlerBase));
    Commerce.IssueCreditMemoClientRequestHandler = IssueCreditMemoClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IssueLoyaltyCardServiceRequestHandler = (function (_super) {
        __extends(IssueLoyaltyCardServiceRequestHandler, _super);
        function IssueLoyaltyCardServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IssueLoyaltyCardServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.IssueLoyaltyCardServiceRequest;
        };
        IssueLoyaltyCardServiceRequestHandler.prototype.executeAsync = function (request) {
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            var loyaltyCard = request.loyaltyCard;
            return customerManager.issueLoyaltyCardAsync(loyaltyCard).getPromise()
                .then(function (loyaltyCardIssued) {
                return Promise.resolve({
                    canceled: false,
                    data: new Commerce.IssueLoyaltyCardServiceResponse(loyaltyCardIssued)
                });
            });
        };
        return IssueLoyaltyCardServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.IssueLoyaltyCardServiceRequestHandler = IssueLoyaltyCardServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OverrideHeaderChargeClientRequestHandler = (function (_super) {
        __extends(OverrideHeaderChargeClientRequestHandler, _super);
        function OverrideHeaderChargeClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OverrideHeaderChargeClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.OverrideHeaderChargeClientRequest;
        };
        OverrideHeaderChargeClientRequestHandler.prototype.executeAsync = function (request) {
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var overrideHeaderChargeActivityContext = {
                    chargeLine: request.chargeLine
                };
                request.chargeLine.ReasonCodeLines = [];
                var overrideHeaderChargeActivity = new Commerce.Activities.OverrideHeaderChargeActivity(overrideHeaderChargeActivityContext);
                return overrideHeaderChargeActivity.execute().map(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(overrideHeaderChargeActivity.response)) {
                        asyncQueue.cancel();
                        return null;
                    }
                    return overrideHeaderChargeActivity.response;
                });
            }).enqueue(function (activityResponse) {
                var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ chargeLines: [request.chargeLine] }, function (c) {
                    return cartManager.overrideChargeAsync(activityResponse.chargeLineId, activityResponse.newAmount, request.chargeLine.ReasonCodeLines);
                }, Commerce.Proxy.Entities.ReasonCodeSourceType.ManualCharge).run();
                return asyncQueue.cancelOn(result);
            });
            return asyncQueue.run().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.OverrideHeaderChargeClientResponse(Commerce.Session.instance.cart)
                };
            }).getPromise();
        };
        return OverrideHeaderChargeClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.OverrideHeaderChargeClientRequestHandler = OverrideHeaderChargeClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OverrideLineChargeClientRequestHandler = (function (_super) {
        __extends(OverrideLineChargeClientRequestHandler, _super);
        function OverrideLineChargeClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OverrideLineChargeClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.OverrideLineChargeClientRequest;
        };
        OverrideLineChargeClientRequestHandler.prototype.executeAsync = function (request) {
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var overrideLineChargeActivityContext = {
                    cartLine: request.cartLine,
                    chargeLine: request.chargeLine
                };
                request.chargeLine.ReasonCodeLines = [];
                var overrideLineChargeActivity = new Commerce.Activities.OverrideLineChargeActivity(overrideLineChargeActivityContext);
                return overrideLineChargeActivity.execute().map(function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(overrideLineChargeActivity.response)) {
                        asyncQueue.cancel();
                        return null;
                    }
                    return overrideLineChargeActivity.response;
                });
            }).enqueue(function (activityResponse) {
                var result = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ chargeLines: [request.chargeLine] }, function (c) {
                    return cartManager.overrideCartLineChargeAsync(request.cartLine.LineId, activityResponse.chargeLineId, activityResponse.newAmount, request.chargeLine.ReasonCodeLines);
                }, Commerce.Proxy.Entities.ReasonCodeSourceType.ManualCharge).run();
                return asyncQueue.cancelOn(result);
            });
            return asyncQueue.run().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.OverrideLineChargeClientResponse(Commerce.Session.instance.cart)
                };
            }).getPromise();
        };
        return OverrideLineChargeClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.OverrideLineChargeClientRequestHandler = OverrideLineChargeClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrintDeclinedOrVoidedCardReceiptsClientRequestHandler = (function (_super) {
        __extends(PrintDeclinedOrVoidedCardReceiptsClientRequestHandler, _super);
        function PrintDeclinedOrVoidedCardReceiptsClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PrintDeclinedOrVoidedCardReceiptsClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.PrintDeclinedOrVoidedCardReceiptsClientRequest;
        };
        PrintDeclinedOrVoidedCardReceiptsClientRequestHandler.prototype.executeAsync = function (request) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                throw new Error("The executeAsync method for the PrintDeclinedOrVoidedCardReceiptsClientRequestHandler received a null or undefined request.");
            }
            var asyncQueue = new Commerce.AsyncQueue();
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            asyncQueue.enqueue(function () {
                var preprocessedTenderLineRequest = new Commerce.Payments.CreatePreProcessedTenderLineClientRequest(request.correlationId, request.cardTypeId, request.currencyCode, request.isRefundOperation, request.paymentInfo, request.tenderType);
                return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(preprocessedTenderLineRequest)));
            }).enqueue(function (result) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(result.data) || Commerce.ObjectExtensions.isNullOrUndefined(result.data.result)) {
                    asyncQueue.cancel();
                    Commerce.RetailLogger.printDeclinedOrVoidedCardPaymentReceiptsCancelledDueToInvalidTenderLine(request.correlationId);
                    return Commerce.AsyncResult.createResolved(null);
                }
                else {
                    return cartManager.getDeclinedOrVoidedCardReceipts(request.correlationId, result.data.result, false, Commerce.Proxy.Entities.ReceiptType.CardTerminationReceiptForCustomer, request.hardwareProfileId);
                }
            }).enqueue(function (receipts) {
                var printableReceipts = Commerce.ReceiptHelper.getPrintableReceipts(receipts);
                if (!Commerce.ArrayExtensions.hasElements(printableReceipts)) {
                    Commerce.RetailLogger.printDeclinedOrVoidedCardPaymentReceiptsSkipped(request.correlationId);
                    return Commerce.VoidAsyncResult.createResolved();
                }
                else {
                    return Commerce.Peripherals.instance.printer.printAsync(printableReceipts);
                }
            });
            return asyncQueue.run()
                .map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.PrintDeclinedOrVoidedCardReceiptsClientResponse(null)
                };
            }).getPromise();
        };
        return PrintDeclinedOrVoidedCardReceiptsClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.PrintDeclinedOrVoidedCardReceiptsClientRequestHandler = PrintDeclinedOrVoidedCardReceiptsClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrintReceiptsClientRequestHandler = (function (_super) {
        __extends(PrintReceiptsClientRequestHandler, _super);
        function PrintReceiptsClientRequestHandler() {
            var _this = _super.call(this) || this;
            _this._salesOrderManager = new Commerce.Lazy(function () {
                return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
            });
            return _this;
        }
        PrintReceiptsClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.PrintReceiptsClientRequest;
        };
        PrintReceiptsClientRequestHandler.prototype.executeAsync = function (request) {
            return this._printPrintableReceipts(request.printableReceipts, request.associatedOrder, request.isCopyOfReceipt)
                .map(function (value) {
                return {
                    canceled: value.canceled,
                    data: value.canceled ? null : new Commerce.PrintReceiptsClientResponse()
                };
            }).getPromise();
        };
        PrintReceiptsClientRequestHandler.prototype._printPrintableReceipts = function (printableReceipts, associatedOrder, isCopyOfReceipt) {
            var _this = this;
            if (!Commerce.ArrayExtensions.hasElements(printableReceipts)) {
                return Commerce.AsyncResult.createResolved({ canceled: false });
            }
            var receiptsToPrint = printableReceipts.filter(function (printableReceipt) {
                return printableReceipt.shouldPrint;
            });
            var containsSalesReceipt = receiptsToPrint.some(function (receipt) {
                return receipt.receiptTypeValue === Commerce.Proxy.Entities.ReceiptType.SalesReceipt;
            });
            var shouldValidatePrintReceiptCopyEvent = containsSalesReceipt &&
                Commerce.Proxy.Entities.EmployeePermissionsAllowPrintingReceiptCopy[Commerce.Session.instance.CurrentEmployee.Permissions.AllowPrintingReceiptCopy] !==
                    Commerce.Proxy.Entities.EmployeePermissionsAllowPrintingReceiptCopy.Always;
            var printingQueue = new Commerce.AsyncQueue();
            if (isCopyOfReceipt && shouldValidatePrintReceiptCopyEvent) {
                printingQueue.enqueue(function () {
                    return _this.salesOrderManager.validatePrintReceiptCopyAllowed(associatedOrder)
                        .recoverOnFailure(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        printingQueue.cancel();
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                });
            }
            if (isCopyOfReceipt) {
                printingQueue.enqueue(function () {
                    var preTriggerOptions = {
                        salesOrder: associatedOrder,
                        receiptAndPrinterPairs: receiptsToPrint
                    };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PrePrintReceiptCopy, preTriggerOptions);
                    return printingQueue.cancelOn(preTriggerResult);
                });
            }
            printingQueue.enqueue(function () {
                return Commerce.Peripherals.instance.printer.printAsync(receiptsToPrint);
            });
            var shouldSavePrintReceiptCopyEvent = containsSalesReceipt &&
                Commerce.ApplicationContext.Instance.deviceConfiguration.AuditEnabled;
            if (isCopyOfReceipt && shouldSavePrintReceiptCopyEvent) {
                printingQueue.enqueue(function () {
                    var registerReceiptCopyEventRequest = new Commerce.RegisterPrintReceiptCopyEventRequest(associatedOrder, PrintReceiptsClientRequestHandler.PRINT_RECEIPT_COPY_SOURCE);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(registerReceiptCopyEventRequest));
                });
            }
            return printingQueue.run();
        };
        Object.defineProperty(PrintReceiptsClientRequestHandler.prototype, "salesOrderManager", {
            get: function () {
                return this._salesOrderManager.value;
            },
            enumerable: true,
            configurable: true
        });
        PrintReceiptsClientRequestHandler.PRINT_RECEIPT_COPY_SOURCE = "ReceiptManager.registerPrintReceiptCopyEvent";
        return PrintReceiptsClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.PrintReceiptsClientRequestHandler = PrintReceiptsClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RecallOrderServiceRequestHandler = (function (_super) {
        __extends(RecallOrderServiceRequestHandler, _super);
        function RecallOrderServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecallOrderServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.RecallOrderServiceRequest;
        };
        RecallOrderServiceRequestHandler.prototype.executeAsync = function (request) {
            return Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                var preTriggerOptions = { cart: Commerce.Session.instance.cart, salesOrderId: request.salesOrderId };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreRecallCustomerOrder, preTriggerOptions);
            }, function () {
                var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                return cartManager.recallCustomerOrder(request.salesOrderId);
            }, function () {
                var postTriggerOptions = { cart: Commerce.Session.instance.cart };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostRecallCustomerOrder, postTriggerOptions);
            })
                .map(function (result) { return { canceled: result.canceled, data: new Commerce.RecallOrderServiceResponse(Commerce.Session.instance.cart) }; })
                .getPromise();
        };
        return RecallOrderServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.RecallOrderServiceRequestHandler = RecallOrderServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RefreshCartClientRequestHandler = (function (_super) {
        __extends(RefreshCartClientRequestHandler, _super);
        function RefreshCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RefreshCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.RefreshCartClientRequest;
        };
        RefreshCartClientRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            if (!Commerce.Session.instance.isCartInProgress) {
                return Promise.reject([new Commerce.Proxy.Entities.Error("string_29981")]);
            }
            var cartId = Commerce.Session.instance.cart.Id;
            return manager.getCartByCartIdAsync(cartId)
                .map(function () {
                return { canceled: false, data: new Commerce.RefreshCartClientResponse(Commerce.Session.instance.cart) };
            })
                .getPromise();
        };
        return RefreshCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.RefreshCartClientRequestHandler = RefreshCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RefreshNotificationRequestHandler = (function (_super) {
        __extends(RefreshNotificationRequestHandler, _super);
        function RefreshNotificationRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RefreshNotificationRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.RefreshNotificationRequest;
        };
        RefreshNotificationRequestHandler.prototype.executeAsync = function (request) {
            var notification = request.notification;
            var notificationManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.INotificationManagerName);
            return notificationManager.getNotificationsAsync([notification.Action])
                .map(function (notificationItems) {
                Commerce.RetailLogger.getNotificationsSucceeded(notification.Action);
                var pulledDate = Commerce.DateExtensions.now;
                notificationItems.forEach(function (notificationItem) {
                    notification.lastPullDateTime = pulledDate;
                    notification.ExtensionProperties = notificationItem.ExtensionProperties;
                    if (notificationItem.NotificationDetails.length === 0) {
                        notification.NotificationDetails = Commerce.NotificationHelper.getNotificationError(notification).NotificationDetails;
                    }
                    else {
                        notification.NotificationDetails = notificationItem.NotificationDetails;
                    }
                });
                Commerce.Session.instance.addToNotifications(notification);
                var response = new Commerce.RefreshNotificationResponse(notification);
                var result = {
                    canceled: false,
                    data: response
                };
                return result;
            }).fail(function (errors) {
                Commerce.RetailLogger.getNotificationsFailed(notification.Action, errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                Commerce.Session.instance.addToNotifications(Commerce.NotificationHelper.getNotificationError(notification));
            }).getPromise();
        };
        return RefreshNotificationRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.RefreshNotificationRequestHandler = RefreshNotificationRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterCustomAuditEventClientRequestHandler = (function (_super) {
        __extends(RegisterCustomAuditEventClientRequestHandler, _super);
        function RegisterCustomAuditEventClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RegisterCustomAuditEventClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.RegisterCustomAuditEventClientRequest;
        };
        RegisterCustomAuditEventClientRequestHandler.prototype.executeAsync = function (request) {
            var auditEvent = {
                Channel: request.channelId,
                Store: request.storeId,
                Terminal: request.terminalId,
                Source: request.source,
                EventMessage: request.message,
                LogLevel: Commerce.Proxy.Entities.AuditLogTraceLevel[request.logLevel],
                Staff: request.staff,
                AuditEventTypeValue: request.auditEventTypeValue,
                ExtensionProperties: request.extensionProperties
            };
            if (!Commerce.ObjectExtensions.isNullOrUndefined(request.transactionReference)) {
                auditEvent.ReferenceId = window.performance.now();
                auditEvent.RefChannel = request.transactionReference.Channel;
                auditEvent.RefStore = request.transactionReference.Store;
                auditEvent.RefTerminal = request.transactionReference.Terminal;
                auditEvent.RefTransactionId = request.transactionReference.TransactionId;
            }
            return Commerce.Runtime.executeAsync(new Commerce.AuditEvent.RegisterAndGetAuditEventServiceRequest(auditEvent))
                .then(function (response) {
                return {
                    canceled: response.canceled,
                    data: new Commerce.RegisterCustomAuditEventClientResponse(void 0)
                };
            });
        };
        return RegisterCustomAuditEventClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.RegisterCustomAuditEventClientRequestHandler = RegisterCustomAuditEventClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterPrintReceiptCopyEventRequestHandler = (function (_super) {
        __extends(RegisterPrintReceiptCopyEventRequestHandler, _super);
        function RegisterPrintReceiptCopyEventRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RegisterPrintReceiptCopyEventRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.RegisterPrintReceiptCopyEventRequest;
        };
        RegisterPrintReceiptCopyEventRequestHandler.prototype.executeAsync = function (request) {
            var auditEventmanager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuditEventManagerName);
            var auditEvent = {
                AuditEventTypeValue: Commerce.ExtensibleEnumerations.ExtensibleAuditEventType.PrintReceiptCopy.Value,
                Source: request.source,
                EventMessage: Commerce.StringExtensions.format(RegisterPrintReceiptCopyEventRequestHandler.PRINT_RECEIPT_COPY_EVENT_MSG, request.salesOrderToPrint.Id),
                LogLevel: Commerce.Proxy.Entities.AuditLogTraceLevel[Commerce.Proxy.Entities.AuditLogTraceLevel.Trace],
                ReferenceId: window.performance.now(),
                RefChannel: request.salesOrderToPrint.ChannelId,
                RefStore: request.salesOrderToPrint.StoreId,
                RefTerminal: request.salesOrderToPrint.TerminalId,
                RefTransactionId: request.salesOrderToPrint.Id
            };
            return auditEventmanager.registerAuditEvent(auditEvent)
                .map(function () {
                return {
                    canceled: false, data: new Commerce.RegisterPrintReceiptCopyEventResponse(void 0)
                };
            })
                .getPromise();
        };
        RegisterPrintReceiptCopyEventRequestHandler.PRINT_RECEIPT_COPY_EVENT_MSG = "Receipt copy is printed for transaction '{0}'";
        return RegisterPrintReceiptCopyEventRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.RegisterPrintReceiptCopyEventRequestHandler = RegisterPrintReceiptCopyEventRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ResumeSuspendedCartClientRequestHandler = (function (_super) {
        __extends(ResumeSuspendedCartClientRequestHandler, _super);
        function ResumeSuspendedCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ResumeSuspendedCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ResumeSuspendedCartClientRequest;
        };
        ResumeSuspendedCartClientRequestHandler.prototype.executeAsync = function (request) {
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var validationErrors = this._validateResumeSuspendedCartRequestCriteria();
            if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                return Promise.reject(validationErrors);
            }
            var asyncResult = new Commerce.AsyncResult();
            cartManager.resumeCartAsync(request.cartId, null)
                .done(function () {
                asyncResult.resolve({ canceled: false, data: new Commerce.ResumeSuspendedCartClientResponse(Commerce.Session.instance.cart) });
            })
                .fail(function (errors) {
                if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ITEMDISCONTINUEDFROMCHANNEL)) {
                    cartManager.getCartByCartIdAsync(request.cartId).done(function () {
                        asyncResult.reject(errors);
                    }).fail(function (getCartByIdErrors) {
                        asyncResult.reject(getCartByIdErrors);
                    });
                }
                else {
                    asyncResult.reject(errors);
                }
            });
            return asyncResult.getPromise();
        };
        ResumeSuspendedCartClientRequestHandler.prototype._validateResumeSuspendedCartRequestCriteria = function () {
            var validationErrors = [];
            Array.prototype.push.apply(validationErrors, Commerce.Operations.Validators.noExistingCart());
            Array.prototype.push.apply(validationErrors, Commerce.Operations.Validators.notAllowedInNonDrawerModeOperationValidator());
            Array.prototype.push.apply(validationErrors, Commerce.Operations.Validators.notAllowedOnCustomerAccountDeposit());
            return validationErrors;
        };
        return ResumeSuspendedCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.ResumeSuspendedCartClientRequestHandler = ResumeSuspendedCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SaveAttributesOnCartClientRequestHandler = (function (_super) {
        __extends(SaveAttributesOnCartClientRequestHandler, _super);
        function SaveAttributesOnCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SaveAttributesOnCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SaveAttributesOnCartClientRequest;
        };
        SaveAttributesOnCartClientRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var attributes = Commerce.ObjectExtensions.isNullOrUndefined(request.attributes) ? [] : request.attributes;
            attributes = attributes.filter(function (value) { return !Commerce.ObjectExtensions.isNullOrUndefined(value); });
            return manager.saveAttributesOnCart(attributes)
                .map(function () {
                return {
                    canceled: false,
                    data: new Commerce.SaveAttributesOnCartClientResponse(Commerce.Session.instance.cart)
                };
            })
                .getPromise();
        };
        return SaveAttributesOnCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SaveAttributesOnCartClientRequestHandler = SaveAttributesOnCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SaveAttributesOnCartLinesClientRequestHandler = (function (_super) {
        __extends(SaveAttributesOnCartLinesClientRequestHandler, _super);
        function SaveAttributesOnCartLinesClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SaveAttributesOnCartLinesClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SaveAttributesOnCartLinesClientRequest;
        };
        SaveAttributesOnCartLinesClientRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var attributesOnCartLines = Commerce.ObjectExtensions.isNullOrUndefined(request.attributesOnCartLines) ? [] : request.attributesOnCartLines;
            return manager.saveAttributesOnCartLines(attributesOnCartLines)
                .map(function () {
                return {
                    canceled: false,
                    data: new Commerce.SaveAttributesOnCartLinesClientResponse(Commerce.Session.instance.cart)
                };
            })
                .getPromise();
        };
        return SaveAttributesOnCartLinesClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SaveAttributesOnCartLinesClientRequestHandler = SaveAttributesOnCartLinesClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SaveExtensionPropertiesOnCartClientRequestHandler = (function (_super) {
        __extends(SaveExtensionPropertiesOnCartClientRequestHandler, _super);
        function SaveExtensionPropertiesOnCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SaveExtensionPropertiesOnCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SaveExtensionPropertiesOnCartClientRequest;
        };
        SaveExtensionPropertiesOnCartClientRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var extensionProperties = Commerce.ObjectExtensions.isNullOrUndefined(request.extensionProperties) ? [] : request.extensionProperties;
            return manager.saveExtensionPropertiesOnCart(extensionProperties)
                .map(function () {
                return {
                    canceled: false,
                    data: new Commerce.SaveExtensionPropertiesOnCartClientResponse(Commerce.Session.instance.cart)
                };
            })
                .getPromise();
        };
        return SaveExtensionPropertiesOnCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SaveExtensionPropertiesOnCartClientRequestHandler = SaveExtensionPropertiesOnCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SaveExtensionPropertiesOnCartLinesClientRequestHandler = (function (_super) {
        __extends(SaveExtensionPropertiesOnCartLinesClientRequestHandler, _super);
        function SaveExtensionPropertiesOnCartLinesClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SaveExtensionPropertiesOnCartLinesClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SaveExtensionPropertiesOnCartLinesClientRequest;
        };
        SaveExtensionPropertiesOnCartLinesClientRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var extensionPropertiesOnCartLines = Commerce.ObjectExtensions.isNullOrUndefined(request.extensionPropertiesOnCartLines) ? [] : request.extensionPropertiesOnCartLines;
            return manager.saveExtensionPropertiesOnCartLines(extensionPropertiesOnCartLines)
                .map(function () {
                return {
                    canceled: false,
                    data: new Commerce.SaveExtensionPropertiesOnCartLinesClientResponse(Commerce.Session.instance.cart)
                };
            })
                .getPromise();
        };
        return SaveExtensionPropertiesOnCartLinesClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SaveExtensionPropertiesOnCartLinesClientRequestHandler = SaveExtensionPropertiesOnCartLinesClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SaveFiscalTransactionClientRequestHandler = (function (_super) {
        __extends(SaveFiscalTransactionClientRequestHandler, _super);
        function SaveFiscalTransactionClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SaveFiscalTransactionClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SaveFiscalTransactionClientRequest;
        };
        SaveFiscalTransactionClientRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFiscalRegisterManagerName);
            return manager.saveFiscalTransaction(request.fiscalTransaction)
                .map(function () {
                return {
                    canceled: false, data: new Commerce.SaveFiscalTransactionClientResponse(void 0)
                };
            })
                .getPromise();
        };
        return SaveFiscalTransactionClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SaveFiscalTransactionClientRequestHandler = SaveFiscalTransactionClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SaveReasonCodeLinesOnCartClientRequestHandler = (function (_super) {
        __extends(SaveReasonCodeLinesOnCartClientRequestHandler, _super);
        function SaveReasonCodeLinesOnCartClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SaveReasonCodeLinesOnCartClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SaveReasonCodeLinesOnCartClientRequest;
        };
        SaveReasonCodeLinesOnCartClientRequestHandler.prototype.executeAsync = function (request) {
            if (request.reasonCodeLines.some(function (reasonCodeLine) { return Commerce.ObjectExtensions.isNullOrUndefined(reasonCodeLine); })) {
                throw new Error("SaveReasonCodeLinesOnCartClientRequestHandler: at least one reason code line is null or undefined.");
            }
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var cart = Commerce.Session.instance.cart;
            cart.ReasonCodeLines = request.reasonCodeLines.concat(cart.ReasonCodeLines || []);
            var reasonCodeResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cart: cart }, function (c) { return cartManager.createOrUpdateCartAsync(c.cart); }).run();
            return reasonCodeResult.map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.SaveReasonCodeLinesOnCartClientResponse(Commerce.Session.instance.cart)
                };
            }).getPromise();
        };
        return SaveReasonCodeLinesOnCartClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SaveReasonCodeLinesOnCartClientRequestHandler = SaveReasonCodeLinesOnCartClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SaveReasonCodeLinesOnCartLinesClientRequestHandler = (function (_super) {
        __extends(SaveReasonCodeLinesOnCartLinesClientRequestHandler, _super);
        function SaveReasonCodeLinesOnCartLinesClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SaveReasonCodeLinesOnCartLinesClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SaveReasonCodeLinesOnCartLinesClientRequest;
        };
        SaveReasonCodeLinesOnCartLinesClientRequestHandler.prototype.executeAsync = function (request) {
            var hasInvalidItem = request.reasonCodeLinesOnCartLines.some(function (reasonCodeLineOnCartLine) { return Commerce.ObjectExtensions.isNullOrUndefined(reasonCodeLineOnCartLine); });
            if (hasInvalidItem) {
                throw new Error("SaveReasonCodeLinesOnCartLinesClientRequestHandler: at least one item in the collection is null or undefined.");
            }
            var cart = Commerce.Session.instance.cart;
            var cartLinesById = new Commerce.Dictionary();
            cartLinesById.setItems(cart.CartLines || [], function (c) { return c.LineId; });
            var orphanLines = request.reasonCodeLinesOnCartLines
                .map(function (reasonCodeLineOnCartLine) { return reasonCodeLineOnCartLine.cartLineId; })
                .filter(function (lineId) { return !cartLinesById.hasItem(lineId); });
            if (Commerce.ArrayExtensions.hasElements(orphanLines)) {
                throw new Error("SaveReasonCodeLinesOnCartLinesClientRequestHandler: some cart line identifiers could not be found: "
                    + JSON.stringify(orphanLines) + ".");
            }
            var cartLinesToUpdate = [];
            request.reasonCodeLinesOnCartLines.forEach(function (reasonCodeLineOnCartLine) {
                var cartLine = new Commerce.Proxy.Entities.CartLineClass(cartLinesById.getItem(reasonCodeLineOnCartLine.cartLineId));
                cartLine.ReasonCodeLines = (cartLine.ReasonCodeLines || []).concat(reasonCodeLineOnCartLine.reasonCodeLines);
                cartLinesToUpdate.push(cartLine);
            });
            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var reasonCodeResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ cartLines: cartLinesToUpdate }, function (c) { return cartManager.updateCartLinesOnCartAsync(c.cartLines); }).run();
            return reasonCodeResult.map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.SaveReasonCodeLinesOnCartLinesClientResponse(Commerce.Session.instance.cart)
                };
            }).getPromise();
        };
        return SaveReasonCodeLinesOnCartLinesClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SaveReasonCodeLinesOnCartLinesClientRequestHandler = SaveReasonCodeLinesOnCartLinesClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SearchCommissionSalesGroupsServiceRequestHandler = (function (_super) {
        __extends(SearchCommissionSalesGroupsServiceRequestHandler, _super);
        function SearchCommissionSalesGroupsServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SearchCommissionSalesGroupsServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SearchCommissionSalesGroupsServiceRequest;
        };
        SearchCommissionSalesGroupsServiceRequestHandler.prototype.executeAsync = function (request) {
            var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
            return channelManager.searchCommissionSalesGroupsAsync(request.searchText, request.pageSize, request.skip)
                .map(function (commissionSalesGroups) {
                return {
                    canceled: false,
                    data: new Commerce.SearchCommissionSalesGroupsServiceResponse(commissionSalesGroups)
                };
            }).getPromise();
        };
        return SearchCommissionSalesGroupsServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SearchCommissionSalesGroupsServiceRequestHandler = SearchCommissionSalesGroupsServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SelectSalesLinesForPickUpClientRequestHandler = (function (_super) {
        __extends(SelectSalesLinesForPickUpClientRequestHandler, _super);
        function SelectSalesLinesForPickUpClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectSalesLinesForPickUpClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SelectSalesLinesForPickUpClientRequest;
        };
        SelectSalesLinesForPickUpClientRequestHandler.prototype.executeAsync = function (request) {
            if (Commerce.StringExtensions.isNullOrWhitespace(request.salesId)) {
                return Promise.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SALES_ORDER_ID_CANNOT_BE_EMPTY)]);
            }
            var activity = new Commerce.Activities.SelectSalesLinesForPickUpActivity({
                salesId: request.salesId
            });
            return activity.execute().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? undefined : new Commerce.SelectSalesLinesForPickUpClientResponse(Commerce.Session.instance.cart)
                };
            }).getPromise();
        };
        return SelectSalesLinesForPickUpClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SelectSalesLinesForPickUpClientRequestHandler = SelectSalesLinesForPickUpClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SelectZipCodeInfoClientRequestHandler = (function (_super) {
        __extends(SelectZipCodeInfoClientRequestHandler, _super);
        function SelectZipCodeInfoClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectZipCodeInfoClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SelectZipCodeInfoClientRequest;
        };
        SelectZipCodeInfoClientRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var listInputDialogItems = [];
            if (Commerce.ArrayExtensions.hasElements(request.zipCodeInfos)) {
                request.zipCodeInfos.forEach(function (zipCodeInfo) {
                    var displayLabel = _this._generateAddressDetail(zipCodeInfo);
                    var item = {
                        label: displayLabel,
                        value: zipCodeInfo.CityName
                    };
                    listInputDialogItems.push(item);
                });
            }
            var options = {
                items: listInputDialogItems,
                title: Commerce.ViewModelAdapter.getResourceString("string_1316"),
                subTitle: Commerce.ViewModelAdapter.getResourceString("string_4842")
            };
            var showListInputDialogClientRequest = new Commerce.ShowListInputDialogClientRequest(options);
            return Commerce.Runtime.executeAsync(showListInputDialogClientRequest)
                .then(function (listInputDialogResult) {
                if (listInputDialogResult.canceled) {
                    return Promise.resolve({
                        canceled: true,
                        data: null
                    });
                }
                else {
                    return Promise.resolve({
                        canceled: false,
                        data: new Commerce.SelectZipCodeInfoClientResponse(Commerce.ArrayExtensions.firstOrUndefined(request.zipCodeInfos, function (element) {
                            return Commerce.StringExtensions.compare(element.CityName, listInputDialogResult.data.result.value.value) === 0;
                        }))
                    });
                }
            });
        };
        SelectZipCodeInfoClientRequestHandler.prototype._generateAddressDetail = function (zipCodeInfo) {
            var displayLabel = Commerce.StringExtensions.EMPTY;
            var arrayLabel = [];
            if (zipCodeInfo.CityAlias !== Commerce.StringExtensions.EMPTY) {
                arrayLabel.push(zipCodeInfo.CityAlias);
            }
            if (zipCodeInfo.CountyId !== Commerce.StringExtensions.EMPTY) {
                arrayLabel.push(zipCodeInfo.CountyId);
            }
            if (zipCodeInfo.StateId !== Commerce.StringExtensions.EMPTY) {
                arrayLabel.push(zipCodeInfo.StateId);
            }
            if (arrayLabel.length === 3) {
                displayLabel = Commerce.ViewModelAdapter.getResourceString("string_1375");
                displayLabel = Commerce.StringExtensions.format(displayLabel, (arrayLabel[0]), (arrayLabel[1]), (arrayLabel[2]));
            }
            if (arrayLabel.length === 2) {
                displayLabel = Commerce.ViewModelAdapter.getResourceString("string_1376");
                displayLabel = Commerce.StringExtensions.format(displayLabel, (arrayLabel[0]), (arrayLabel[1]));
            }
            if (arrayLabel.length === 1) {
                displayLabel = arrayLabel[0];
            }
            return displayLabel;
        };
        return SelectZipCodeInfoClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SelectZipCodeInfoClientRequestHandler = SelectZipCodeInfoClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SetCartAttributesClientRequestHandler = (function (_super) {
        __extends(SetCartAttributesClientRequestHandler, _super);
        function SetCartAttributesClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SetCartAttributesClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SetCartAttributesClientRequest;
        };
        SetCartAttributesClientRequestHandler.prototype.executeAsync = function (request) {
            var manager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
            var attributeValues = Commerce.ObjectExtensions.isNullOrUndefined(request.attributeValues) ? [] : request.attributeValues;
            return manager.setCartAttributes(attributeValues)
                .map(function () {
                return {
                    canceled: false, data: new Commerce.SetCartAttributesClientResponse(Commerce.Session.instance.cart)
                };
            })
                .getPromise();
        };
        return SetCartAttributesClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SetCartAttributesClientRequestHandler = SetCartAttributesClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Features;
    (function (Features) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var ShipCartLinesRequestHandler = (function (_super) {
                __extends(ShipCartLinesRequestHandler, _super);
                function ShipCartLinesRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ShipCartLinesRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.ShipCartLinesRequest;
                };
                ShipCartLinesRequestHandler.prototype.executeAsync = function (request) {
                    var isShipAll = Commerce.CartHelper.areAllCartLinesSelected(request.cart, request.cartLines);
                    var operationId = isShipAll ? Commerce.Operations.RetailOperation.ShipAllProducts : Commerce.Operations.RetailOperation.ShipSelectedProducts;
                    var operationShipSelectedOptions = {
                        cart: request.cart,
                        cartLines: request.cartLines,
                        shipDate: request.shipDate,
                        customerAddress: request.customerAddress,
                        deliveryModeCode: request.deliveryModeCode,
                        chargeAmount: request.chargeAmount,
                        fulfilmentStoreId: request.fulfillmentStoreId
                    };
                    return Commerce.Operations.OperationsManager.instance.runOperation(operationId, operationShipSelectedOptions)
                        .map(function (result) {
                        return { canceled: result.canceled, data: new Commerce.ShipCartLinesResponse() };
                    }).getPromise();
                };
                return ShipCartLinesRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ShipCartLinesRequestHandler = ShipCartLinesRequestHandler;
        })(Handlers = Features.Handlers || (Features.Handlers = {}));
    })(Features = Commerce.Features || (Commerce.Features = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowChangeDueClientRequestHandler = (function (_super) {
        __extends(ShowChangeDueClientRequestHandler, _super);
        function ShowChangeDueClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShowChangeDueClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ShowChangeDueClientRequest;
        };
        ShowChangeDueClientRequestHandler.prototype.executeAsync = function (request) {
            var requiredReceipts = [];
            var isPromptForGiftReceiptsClientRequest = false;
            if (request instanceof Commerce.ShowChangeDueAndPromptForGiftReceiptsClientRequest) {
                requiredReceipts = this._getGiftReceiptsOfAsRequired(request.receipts);
                isPromptForGiftReceiptsClientRequest = true;
            }
            var activity = new Commerce.Activities.GiveChangeBackActivity({
                amountDue: request.salesOrder.AmountDue + request.salesOrder.AmountPaid,
                changeAmount: Commerce.SalesOrders.SalesOrderHelper.getChangeAmount(request.salesOrder),
                salesPaymentDifference: request.salesOrder.SalesPaymentDifference,
                totalAmountPaid: Commerce.SalesOrders.SalesOrderHelper.getTotalAmountPaid(request.salesOrder),
                tenderTypeName: this._getTenderTypeName(request.salesOrder),
                offerToPrintGiftReceipts: Commerce.ArrayExtensions.hasElements(requiredReceipts)
            });
            var asyncResult = new Commerce.AsyncResult();
            activity.execute().done(function () {
                var hasActivityResponse = !Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                var response = null;
                if (hasActivityResponse && isPromptForGiftReceiptsClientRequest) {
                    if (activity.response.printGiftReceipts) {
                        response = new Commerce.ShowChangeDueAndPromptForGiftReceiptsClientResponse(requiredReceipts);
                    }
                    else {
                        response = new Commerce.ShowChangeDueAndPromptForGiftReceiptsClientResponse([]);
                    }
                }
                asyncResult.resolve({ canceled: !hasActivityResponse, data: response });
            }).fail(function (errors) { asyncResult.reject(errors); });
            return asyncResult.getPromise();
        };
        ShowChangeDueClientRequestHandler.prototype._getTenderTypeName = function (salesOrder) {
            var changeTenderLines = salesOrder.TenderLines.filter(function (tenderLine) { return tenderLine.IsChangeLine; });
            if (Commerce.ArrayExtensions.hasElements(changeTenderLines)) {
                return Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(changeTenderLines[changeTenderLines.length - 1].TenderTypeId).Name;
            }
            else {
                return Commerce.StringExtensions.EMPTY;
            }
        };
        ShowChangeDueClientRequestHandler.prototype._getGiftReceiptsOfAsRequired = function (receipts) {
            if (!Commerce.ObjectExtensions.isNullOrUndefined(receipts)) {
                return receipts.filter(function (receipt) {
                    return receipt.ReceiptTypeValue === Commerce.Proxy.Entities.ReceiptType.GiftReceipt &&
                        receipt.Printers.some(function (printer) {
                            return printer.PrintBehaviorValue === Commerce.Proxy.Entities.PrintBehavior.AsRequired;
                        });
                });
            }
            else {
                return [];
            }
        };
        return ShowChangeDueClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.ShowChangeDueClientRequestHandler = ShowChangeDueClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowMessageDialogClientRequestHandler = (function (_super) {
        __extends(ShowMessageDialogClientRequestHandler, _super);
        function ShowMessageDialogClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShowMessageDialogClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ShowMessageDialogClientRequest;
        };
        ShowMessageDialogClientRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                var dialogContext = null;
                var requestHasButtons = false;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(request.options)) {
                    dialogContext = {
                        title: request.options.title,
                        subTitle: request.options.subTitle,
                        message: request.options.message,
                        showCloseX: request.options.showCloseX
                    };
                    requestHasButtons = !Commerce.ObjectExtensions.isNullOrUndefined(request.options.button1) ||
                        !Commerce.ObjectExtensions.isNullOrUndefined(request.options.button2);
                    if (requestHasButtons) {
                        dialogContext.buttons = [];
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(request.options.button1)) {
                            dialogContext.buttons.push(_this._createMessageDialogButton(request.options.button1));
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(request.options.button2)) {
                            dialogContext.buttons.push(_this._createMessageDialogButton(request.options.button2));
                        }
                    }
                }
                var displayMessageActivity = new Commerce.Activities.DisplayMessageActivity(dialogContext);
                displayMessageActivity.execute().done(function (result) {
                    var response;
                    if (!requestHasButtons &&
                        displayMessageActivity.response.operationId === "3") {
                        displayMessageActivity.response.operationId = "OK";
                    }
                    if (!result.canceled) {
                        response = new Commerce.ShowMessageDialogClientResponse({
                            dialogResult: displayMessageActivity.response.operationId
                        });
                    }
                    else {
                        response = null;
                    }
                    resolve({
                        canceled: result.canceled,
                        data: response
                    });
                }).fail(function (errors) { reject(errors); });
            });
            return promise;
        };
        ShowMessageDialogClientRequestHandler.prototype._createMessageDialogButton = function (dialogButton) {
            var messageDialogButton = {
                id: dialogButton.id,
                label: dialogButton.label,
                ariaLabel: dialogButton.ariaLabel,
                operationId: dialogButton.result,
                isPrimary: dialogButton.isPrimary
            };
            return messageDialogButton;
        };
        return ShowMessageDialogClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.ShowMessageDialogClientRequestHandler = ShowMessageDialogClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var Managers = Commerce.Model.Managers;
    var SyncAllStockCountJournalsClientRequestHandler = (function (_super) {
        __extends(SyncAllStockCountJournalsClientRequestHandler, _super);
        function SyncAllStockCountJournalsClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SyncAllStockCountJournalsClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.SyncAllStockCountJournalsClientRequest;
        };
        SyncAllStockCountJournalsClientRequestHandler.prototype.executeAsync = function (request) {
            var stockCountJournalManager = Managers.Factory.getManager(Managers.IStockCountJournalManagerName);
            return stockCountJournalManager.syncAllStockCountJournalsAsync().
                map(function (journals) {
                var syncAllStockCountJournalsClientResponse = new Commerce.SyncAllStockCountJournalsClientResponse(journals);
                return { canceled: false, data: syncAllStockCountJournalsClientResponse };
            }).getPromise();
        };
        return SyncAllStockCountJournalsClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.SyncAllStockCountJournalsClientRequestHandler = SyncAllStockCountJournalsClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var UpdateCustomerServiceRequestHandler = (function (_super) {
        __extends(UpdateCustomerServiceRequestHandler, _super);
        function UpdateCustomerServiceRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UpdateCustomerServiceRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.UpdateCustomerServiceRequest;
        };
        UpdateCustomerServiceRequestHandler.prototype.executeAsync = function (request) {
            var asyncQueue = new Commerce.AsyncQueue();
            var customerManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICustomerManagerName);
            var updatedCustomer;
            if (Commerce.ArrayExtensions.hasElements(request.customer.Addresses)) {
                request.customer.Addresses.forEach(function (address) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(address.LogisticsLocationRoleRecordId)) {
                        asyncQueue.enqueue(function () {
                            var getAddressRequest = new Commerce.GetAddressPurposesServiceRequest(request.correlationId);
                            return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getAddressRequest)))
                                .done(function (addressPurposesResult) {
                                var addressTypeValue = address.AddressTypeValue;
                                if (Commerce.ObjectExtensions.isNullOrUndefined(addressTypeValue)) {
                                    if (request.customer.CustomerTypeValue === Commerce.Proxy.Entities.CustomerType.Organization) {
                                        addressTypeValue = Commerce.Client.Entities.ExtensibleAddressType.Business.Value;
                                    }
                                    else {
                                        addressTypeValue = Commerce.Client.Entities.ExtensibleAddressType.Home.Value;
                                    }
                                }
                                var addressPurpose = Commerce.ArrayExtensions.firstOrUndefined(addressPurposesResult.data.addressPurposes, function (purpose) {
                                    return purpose.AddressType === addressTypeValue;
                                });
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(addressPurpose)) {
                                    address.LogisticsLocationRoleRecordId = addressPurpose.RecordId;
                                }
                            });
                        });
                    }
                });
            }
            asyncQueue.enqueue(function () {
                var errors = Commerce.CustomerHelper.validateCustomer(request.customer);
                if (Commerce.ArrayExtensions.hasElements(request.customer.Addresses)) {
                    request.customer.Addresses.forEach(function (address) {
                        var addressErrors = Commerce.AddressHelper.validateAddress(address);
                        if (Commerce.ArrayExtensions.hasElements(addressErrors)) {
                            errors = errors.concat(addressErrors);
                        }
                    });
                }
                if (Commerce.ArrayExtensions.hasElements(errors)) {
                    return Commerce.VoidAsyncResult.createRejected(errors);
                }
                return Commerce.VoidAsyncResult.createResolved();
            }).enqueue(function () {
                return customerManager.updateCustomerAsync(request.customer).done(function (customer) {
                    updatedCustomer = customer;
                });
            });
            return asyncQueue.run().map(function (result) {
                return {
                    canceled: result.canceled,
                    data: result.canceled ? null : new Commerce.UpdateCustomerServiceResponse(updatedCustomer)
                };
            }).getPromise();
        };
        return UpdateCustomerServiceRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.UpdateCustomerServiceRequestHandler = UpdateCustomerServiceRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ValidateCashDrawerLimitClientRequestHandler = (function (_super) {
        __extends(ValidateCashDrawerLimitClientRequestHandler, _super);
        function ValidateCashDrawerLimitClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateCashDrawerLimitClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.ValidateCashDrawerLimitClientRequest;
        };
        ValidateCashDrawerLimitClientRequestHandler.prototype.executeAsync = function (request) {
            var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
            var asyncResult = this._validateCashDrawerLimitAsync(request);
            Commerce.RetailLogger.validateCashDrawerLimitStarted(correlationId);
            return asyncResult.map(function () {
                var response = new Commerce.ValidateCashDrawerLimitClientResponse();
                return {
                    canceled: false,
                    data: response
                };
            }).done(function () {
                Commerce.RetailLogger.validateCashDrawerLimitSuccessfully(correlationId);
            }).fail(function (errors) {
                if (errors[0].ErrorCode.toUpperCase() ===
                    Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CASHDRAWERLIMITEXCEEDED.serverErrorCode) {
                    Commerce.RetailLogger.validateCashDrawerLimitCashDrawerLimitExceeded(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors), correlationId);
                }
                else {
                    Commerce.RetailLogger.validateCashDrawerLimitFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors), correlationId);
                }
            }).getPromise();
        };
        ValidateCashDrawerLimitClientRequestHandler.prototype._validateCashDrawerLimitAsync = function (request) {
            var anyCashDrawerLimitEnabledTender = Commerce.ApplicationContext.Instance.tenderTypes.some(function (tenderType) {
                return tenderType.CashDrawerLimitEnabled;
            });
            if (anyCashDrawerLimitEnabledTender) {
                var storeOperationsManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                return storeOperationsManager.validateCashDrawerLimitAsync(request.terminalId, request.shiftId);
            }
            return Commerce.VoidAsyncResult.createResolved();
        };
        return ValidateCashDrawerLimitClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.ValidateCashDrawerLimitClientRequestHandler = ValidateCashDrawerLimitClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AcknowledgeNotificationsResponse = (function (_super) {
        __extends(AcknowledgeNotificationsResponse, _super);
        function AcknowledgeNotificationsResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AcknowledgeNotificationsResponse;
    }(Commerce.ClientResponse));
    Commerce.AcknowledgeNotificationsResponse = AcknowledgeNotificationsResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var AcknowledgeNotificationsRequest = (function (_super) {
        __extends(AcknowledgeNotificationsRequest, _super);
        function AcknowledgeNotificationsRequest(lastPullDateTime, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.lastPullDateTime = lastPullDateTime;
            return _this;
        }
        return AcknowledgeNotificationsRequest;
    }(Commerce.ClientRequest));
    Commerce.AcknowledgeNotificationsRequest = AcknowledgeNotificationsRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CheckoutCartClientResponse = (function (_super) {
        __extends(CheckoutCartClientResponse, _super);
        function CheckoutCartClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CheckoutCartClientResponse;
    }(Commerce.ClientResponse));
    Commerce.CheckoutCartClientResponse = CheckoutCartClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CheckoutCartClientRequest = (function (_super) {
        __extends(CheckoutCartClientRequest, _super);
        function CheckoutCartClientRequest(correlationId, receiptEmailAddress, tokenizedPaymentCard) {
            var _this = _super.call(this, correlationId) || this;
            _this.receiptEmailAddress = receiptEmailAddress;
            _this.tokenizedPaymentCard = tokenizedPaymentCard;
            return _this;
        }
        return CheckoutCartClientRequest;
    }(Commerce.ClientRequest));
    Commerce.CheckoutCartClientRequest = CheckoutCartClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetAddressPurposesServiceResponse = (function (_super) {
        __extends(GetAddressPurposesServiceResponse, _super);
        function GetAddressPurposesServiceResponse(addressPurposes) {
            var _this = _super.call(this) || this;
            _this.addressPurposes = addressPurposes;
            return _this;
        }
        return GetAddressPurposesServiceResponse;
    }(Commerce.ServiceResponse));
    Commerce.GetAddressPurposesServiceResponse = GetAddressPurposesServiceResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetAddressPurposesServiceRequest = (function (_super) {
        __extends(GetAddressPurposesServiceRequest, _super);
        function GetAddressPurposesServiceRequest(correlationId) {
            return _super.call(this, correlationId) || this;
        }
        return GetAddressPurposesServiceRequest;
    }(Commerce.ServiceRequest));
    Commerce.GetAddressPurposesServiceRequest = GetAddressPurposesServiceRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetAvailableUnreconciledEntriesServiceRequest = (function (_super) {
        __extends(GetAvailableUnreconciledEntriesServiceRequest, _super);
        function GetAvailableUnreconciledEntriesServiceRequest(correlationId, transactionType, transactionContext, shift, storeSafe) {
            var _this = _super.call(this, correlationId) || this;
            if (!Commerce.ExtensibleEnumerations.ExtensibleTransactionType.RemoveTender.equals(transactionType)
                && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.FloatEntry.equals(transactionType)
                && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.StartingAmount.equals(transactionType)
                && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.equals(transactionType)
                && !Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.equals(transactionType)) {
                throw new Error("Invalid parameters for the GetAvailableUnreconciledEntriesServiceRequest constructor: transactionType is not supported.");
            }
            if (transactionContext !== Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                && transactionContext !== Commerce.Proxy.Entities.CashManagementTransactionContext.Shift) {
                throw new Error("Invalid parameters for the GetAvailableUnreconciledEntriesServiceRequest constructor: transactionContext is not supported.");
            }
            if (transactionContext === Commerce.Proxy.Entities.CashManagementTransactionContext.Safe
                && Commerce.ObjectExtensions.isNullOrUndefined(storeSafe)) {
                throw new Error("Invalid parameters for the GetAvailableUnreconciledEntriesServiceRequest constructor:"
                    + "storeSafe can't be null when context is safe.");
            }
            _this.transactionType = transactionType;
            _this.transactionContext = transactionContext;
            _this.shift = shift;
            _this.storeSafe = storeSafe;
            return _this;
        }
        return GetAvailableUnreconciledEntriesServiceRequest;
    }(Commerce.ServiceRequest));
    Commerce.GetAvailableUnreconciledEntriesServiceRequest = GetAvailableUnreconciledEntriesServiceRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetAvailableUnreconciledEntriesServiceResponse = (function (_super) {
        __extends(GetAvailableUnreconciledEntriesServiceResponse, _super);
        function GetAvailableUnreconciledEntriesServiceResponse(shiftReconciliationLines) {
            var _this = _super.call(this) || this;
            _this.shiftReconciliationLines = shiftReconciliationLines;
            return _this;
        }
        return GetAvailableUnreconciledEntriesServiceResponse;
    }(Commerce.ServiceResponse));
    Commerce.GetAvailableUnreconciledEntriesServiceResponse = GetAvailableUnreconciledEntriesServiceResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetNotificationsResponse = (function (_super) {
        __extends(GetNotificationsResponse, _super);
        function GetNotificationsResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return GetNotificationsResponse;
    }(Commerce.ClientResponse));
    Commerce.GetNotificationsResponse = GetNotificationsResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetNotificationsRequest = (function (_super) {
        __extends(GetNotificationsRequest, _super);
        function GetNotificationsRequest(correlationId) {
            return _super.call(this, correlationId) || this;
        }
        return GetNotificationsRequest;
    }(Commerce.ClientRequest));
    Commerce.GetNotificationsRequest = GetNotificationsRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var InvalidShiftErrorHandlingClientRequest = (function (_super) {
        __extends(InvalidShiftErrorHandlingClientRequest, _super);
        function InvalidShiftErrorHandlingClientRequest(errors, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.errors = errors;
            return _this;
        }
        return InvalidShiftErrorHandlingClientRequest;
    }(Commerce.ClientRequest));
    Commerce.InvalidShiftErrorHandlingClientRequest = InvalidShiftErrorHandlingClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var InvalidShiftErrorHandlingClientResponse = (function (_super) {
        __extends(InvalidShiftErrorHandlingClientResponse, _super);
        function InvalidShiftErrorHandlingClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return InvalidShiftErrorHandlingClientResponse;
    }(Commerce.ClientResponse));
    Commerce.InvalidShiftErrorHandlingClientResponse = InvalidShiftErrorHandlingClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IssueLoyaltyCardServiceRequest = (function (_super) {
        __extends(IssueLoyaltyCardServiceRequest, _super);
        function IssueLoyaltyCardServiceRequest(correlationId, loyaltyCard) {
            var _this = _super.call(this, correlationId) || this;
            _this.loyaltyCard = loyaltyCard;
            return _this;
        }
        return IssueLoyaltyCardServiceRequest;
    }(Commerce.ServiceRequest));
    Commerce.IssueLoyaltyCardServiceRequest = IssueLoyaltyCardServiceRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IssueLoyaltyCardServiceResponse = (function (_super) {
        __extends(IssueLoyaltyCardServiceResponse, _super);
        function IssueLoyaltyCardServiceResponse(loyaltyCard) {
            var _this = _super.call(this) || this;
            _this.loyaltyCard = loyaltyCard;
            return _this;
        }
        return IssueLoyaltyCardServiceResponse;
    }(Commerce.ServiceResponse));
    Commerce.IssueLoyaltyCardServiceResponse = IssueLoyaltyCardServiceResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OverrideHeaderChargeClientResponse = (function (_super) {
        __extends(OverrideHeaderChargeClientResponse, _super);
        function OverrideHeaderChargeClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return OverrideHeaderChargeClientResponse;
    }(Commerce.ClientResponse));
    Commerce.OverrideHeaderChargeClientResponse = OverrideHeaderChargeClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OverrideHeaderChargeClientRequest = (function (_super) {
        __extends(OverrideHeaderChargeClientRequest, _super);
        function OverrideHeaderChargeClientRequest(correlationId, chargeLine) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                throw new Error("Invalid option passed to OverrideHeaderChargeClientRequest: correlationId cannot be null or empty string.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(chargeLine)) {
                throw new Error("Invalid option passed to OverrideHeaderChargeClientRequest: chargeLine cannot be null or undefined.");
            }
            _this = _super.call(this, correlationId) || this;
            _this.chargeLine = chargeLine;
            return _this;
        }
        return OverrideHeaderChargeClientRequest;
    }(Commerce.ClientRequest));
    Commerce.OverrideHeaderChargeClientRequest = OverrideHeaderChargeClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OverrideLineChargeClientResponse = (function (_super) {
        __extends(OverrideLineChargeClientResponse, _super);
        function OverrideLineChargeClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return OverrideLineChargeClientResponse;
    }(Commerce.ClientResponse));
    Commerce.OverrideLineChargeClientResponse = OverrideLineChargeClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OverrideLineChargeClientRequest = (function (_super) {
        __extends(OverrideLineChargeClientRequest, _super);
        function OverrideLineChargeClientRequest(correlationId, cartLine, chargeLine) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                throw new Error("Invalid option passed to OverrideLineChargeClientRequest: correlationId cannot be null or empty string.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                throw new Error("Invalid option passed to OverrideLineChargeClientRequest: cartLine cannot be null or undefined.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(chargeLine)) {
                throw new Error("Invalid option passed to OverrideLineChargeClientRequest: chargeLine cannot be null or undefined.");
            }
            _this = _super.call(this, correlationId) || this;
            _this.cartLine = cartLine;
            _this.chargeLine = chargeLine;
            return _this;
        }
        return OverrideLineChargeClientRequest;
    }(Commerce.ClientRequest));
    Commerce.OverrideLineChargeClientRequest = OverrideLineChargeClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrintDeclinedOrVoidedCardReceiptsClientRequest = (function (_super) {
        __extends(PrintDeclinedOrVoidedCardReceiptsClientRequest, _super);
        function PrintDeclinedOrVoidedCardReceiptsClientRequest(correlationId, cardTypeId, currencyCode, hardwareProfileId, isRefundOperation, paymentInfo, tenderType) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: correlationId is null or empty.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(cardTypeId)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: cardTypeId is invalid.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(currencyCode)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: currencyCode is invalid.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(isRefundOperation)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: isRefundOperation is invalid.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(hardwareProfileId)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: hardwareProfileId is invalid.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(paymentInfo)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: paymentInfo is invalid.");
            }
            else if (Commerce.StringExtensions.isNullOrWhitespace(paymentInfo.PaymentSdkData)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: PaymentSdkData cannot be invalid.");
            }
            else if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                throw new Error("Invalid option passed to constructor for PrintDeclinedOrVoidedCardReceiptsClientRequest: tenderType cannot be invalid.");
            }
            _this = _super.call(this, correlationId) || this;
            _this.cardTypeId = cardTypeId;
            _this.currencyCode = currencyCode;
            _this.isRefundOperation = isRefundOperation;
            _this.hardwareProfileId = hardwareProfileId;
            _this.paymentInfo = paymentInfo;
            _this.tenderType = tenderType;
            return _this;
        }
        return PrintDeclinedOrVoidedCardReceiptsClientRequest;
    }(Commerce.ClientRequest));
    Commerce.PrintDeclinedOrVoidedCardReceiptsClientRequest = PrintDeclinedOrVoidedCardReceiptsClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrintDeclinedOrVoidedCardReceiptsClientResponse = (function (_super) {
        __extends(PrintDeclinedOrVoidedCardReceiptsClientResponse, _super);
        function PrintDeclinedOrVoidedCardReceiptsClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PrintDeclinedOrVoidedCardReceiptsClientResponse;
    }(Commerce.ClientResponse));
    Commerce.PrintDeclinedOrVoidedCardReceiptsClientResponse = PrintDeclinedOrVoidedCardReceiptsClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrintReceiptsClientRequest = (function (_super) {
        __extends(PrintReceiptsClientRequest, _super);
        function PrintReceiptsClientRequest(printableReceipts, associatedOrder, isCopyOfReceipt, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.printableReceipts = printableReceipts;
            _this.associatedOrder = associatedOrder;
            _this.isCopyOfReceipt = isCopyOfReceipt;
            return _this;
        }
        return PrintReceiptsClientRequest;
    }(Commerce.ClientRequest));
    Commerce.PrintReceiptsClientRequest = PrintReceiptsClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrintReceiptsClientResponse = (function (_super) {
        __extends(PrintReceiptsClientResponse, _super);
        function PrintReceiptsClientResponse() {
            return _super.call(this, undefined) || this;
        }
        return PrintReceiptsClientResponse;
    }(Commerce.ClientResponse));
    Commerce.PrintReceiptsClientResponse = PrintReceiptsClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RecallOrderServiceRequest = (function (_super) {
        __extends(RecallOrderServiceRequest, _super);
        function RecallOrderServiceRequest(correlationId, salesOrderId) {
            var _this = _super.call(this, correlationId) || this;
            _this.salesOrderId = salesOrderId;
            return _this;
        }
        return RecallOrderServiceRequest;
    }(Commerce.ServiceRequest));
    Commerce.RecallOrderServiceRequest = RecallOrderServiceRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RecallOrderServiceResponse = (function (_super) {
        __extends(RecallOrderServiceResponse, _super);
        function RecallOrderServiceResponse(cart) {
            var _this = _super.call(this) || this;
            _this.cart = cart;
            return _this;
        }
        return RecallOrderServiceResponse;
    }(Commerce.ServiceResponse));
    Commerce.RecallOrderServiceResponse = RecallOrderServiceResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RefreshNotificationResponse = (function (_super) {
        __extends(RefreshNotificationResponse, _super);
        function RefreshNotificationResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RefreshNotificationResponse;
    }(Commerce.ClientResponse));
    Commerce.RefreshNotificationResponse = RefreshNotificationResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RefreshNotificationRequest = (function (_super) {
        __extends(RefreshNotificationRequest, _super);
        function RefreshNotificationRequest(notification, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.notification = notification;
            return _this;
        }
        return RefreshNotificationRequest;
    }(Commerce.ClientRequest));
    Commerce.RefreshNotificationRequest = RefreshNotificationRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShipCartLinesRequest = (function (_super) {
        __extends(ShipCartLinesRequest, _super);
        function ShipCartLinesRequest(cart, cartLines, deliveryModeCode, shipDate, chargeAmount, customerAddress, fulfillmentStoreId, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.cart = cart;
            _this.cartLines = cartLines;
            _this.chargeAmount = chargeAmount;
            _this.customerAddress = customerAddress;
            _this.deliveryModeCode = deliveryModeCode;
            _this.fulfillmentStoreId = fulfillmentStoreId;
            _this.shipDate = shipDate;
            return _this;
        }
        return ShipCartLinesRequest;
    }(Commerce.Request));
    Commerce.ShipCartLinesRequest = ShipCartLinesRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShipCartLinesResponse = (function (_super) {
        __extends(ShipCartLinesResponse, _super);
        function ShipCartLinesResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ShipCartLinesResponse;
    }(Commerce.Response));
    Commerce.ShipCartLinesResponse = ShipCartLinesResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ValidateCashDrawerLimitClientRequest = (function (_super) {
        __extends(ValidateCashDrawerLimitClientRequest, _super);
        function ValidateCashDrawerLimitClientRequest(terminalId, shiftId, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.terminalId = terminalId;
            _this.shiftId = shiftId;
            _this.correlationId = correlationId;
            return _this;
        }
        return ValidateCashDrawerLimitClientRequest;
    }(Commerce.Request));
    Commerce.ValidateCashDrawerLimitClientRequest = ValidateCashDrawerLimitClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ValidateCashDrawerLimitClientResponse = (function (_super) {
        __extends(ValidateCashDrawerLimitClientResponse, _super);
        function ValidateCashDrawerLimitClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ValidateCashDrawerLimitClientResponse;
    }(Commerce.Response));
    Commerce.ValidateCashDrawerLimitClientResponse = ValidateCashDrawerLimitClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Activities;
        (function (Activities) {
            "use strict";
            var SelectFiscalRegistrationErrorActionTypeActivity = (function (_super) {
                __extends(SelectFiscalRegistrationErrorActionTypeActivity, _super);
                function SelectFiscalRegistrationErrorActionTypeActivity() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return SelectFiscalRegistrationErrorActionTypeActivity;
            }(Commerce.Activities.Activity));
            Activities.SelectFiscalRegistrationErrorActionTypeActivity = SelectFiscalRegistrationErrorActionTypeActivity;
        })(Activities = FiscalIntegration.Activities || (FiscalIntegration.Activities = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Entities;
        (function (Entities) {
            "use strict";
            var FiscalRegistrationErrorActionType;
            (function (FiscalRegistrationErrorActionType) {
                FiscalRegistrationErrorActionType[FiscalRegistrationErrorActionType["None"] = 0] = "None";
                FiscalRegistrationErrorActionType[FiscalRegistrationErrorActionType["Retry"] = 1] = "Retry";
                FiscalRegistrationErrorActionType[FiscalRegistrationErrorActionType["Skip"] = 2] = "Skip";
                FiscalRegistrationErrorActionType[FiscalRegistrationErrorActionType["MarkAsRegistered"] = 3] = "MarkAsRegistered";
                FiscalRegistrationErrorActionType[FiscalRegistrationErrorActionType["Cancel"] = 4] = "Cancel";
            })(FiscalRegistrationErrorActionType = Entities.FiscalRegistrationErrorActionType || (Entities.FiscalRegistrationErrorActionType = {}));
        })(Entities = FiscalIntegration.Entities || (FiscalIntegration.Entities = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var GetFiscalIntegrationRegistrationProcessServiceRequestHandler = (function (_super) {
                __extends(GetFiscalIntegrationRegistrationProcessServiceRequestHandler, _super);
                function GetFiscalIntegrationRegistrationProcessServiceRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetFiscalIntegrationRegistrationProcessServiceRequestHandler.prototype.supportedRequestType = function () {
                    return FiscalIntegration.GetFiscalIntegrationRegistrationProcessServiceRequest;
                };
                GetFiscalIntegrationRegistrationProcessServiceRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(GetFiscalIntegrationRegistrationProcessServiceRequestHandler._fiscalIntegrationRegistrationProcess)) {
                        return Promise.resolve(this._getFiscalIntegrationRegistrationProcessDataResult());
                    }
                    else {
                        var fiscalIntegrationManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFiscalIntegrationManagerName);
                        return fiscalIntegrationManager.getFiscalIntegrationRegistrationProcessAsync()
                            .map(function (result) {
                            GetFiscalIntegrationRegistrationProcessServiceRequestHandler._fiscalIntegrationRegistrationProcess = result;
                            return _this._getFiscalIntegrationRegistrationProcessDataResult();
                        }).getPromise();
                    }
                };
                GetFiscalIntegrationRegistrationProcessServiceRequestHandler.prototype._getFiscalIntegrationRegistrationProcessDataResult = function () {
                    return {
                        canceled: false,
                        data: new FiscalIntegration.GetFiscalIntegrationRegistrationProcessServiceResponse(GetFiscalIntegrationRegistrationProcessServiceRequestHandler._fiscalIntegrationRegistrationProcess)
                    };
                };
                GetFiscalIntegrationRegistrationProcessServiceRequestHandler._fiscalIntegrationRegistrationProcess = null;
                return GetFiscalIntegrationRegistrationProcessServiceRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetFiscalIntegrationRegistrationProcessServiceRequestHandler = GetFiscalIntegrationRegistrationProcessServiceRequestHandler;
        })(Handlers = FiscalIntegration.Handlers || (FiscalIntegration.Handlers = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var InitializeFiscalPeripheralsClientRequestHandler = (function (_super) {
                __extends(InitializeFiscalPeripheralsClientRequestHandler, _super);
                function InitializeFiscalPeripheralsClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InitializeFiscalPeripheralsClientRequestHandler.prototype.supportedRequestType = function () {
                    return FiscalIntegration.InitializeFiscalPeripheralsClientRequest;
                };
                Object.defineProperty(InitializeFiscalPeripheralsClientRequestHandler.prototype, "fiscalIntegrationManager", {
                    get: function () {
                        return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFiscalIntegrationManagerName);
                    },
                    enumerable: true,
                    configurable: true
                });
                InitializeFiscalPeripheralsClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    Commerce.RetailLogger.fiscalIntegrationInitializeFiscalPeripheralsClientRequestStarted(request.correlationId);
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return FiscalIntegration.Helpers.RegistrationProcessHelper.getRegistrationProcessAsync(request.correlationId);
                    }).enqueue(function (registrationProcess) {
                        return _this._initializeFiscalPeripheralsSequentiallyAsync(registrationProcess, request.correlationId)
                            .done(function () {
                            Commerce.RetailLogger.fiscalIntegrationInitializeFiscalPeripheralsClientRequestSucceeded(request.correlationId);
                        }).recoverOnFailure(function (errors) {
                            Commerce.RetailLogger.fiscalIntegrationInitializeFiscalPeripheralsClientRequestFailed(Commerce.ErrorHelper.getErrorMessages(errors), request.correlationId);
                            return Commerce.NotificationHandler.displayClientErrors(errors);
                        })
                            .map(function () { return void 0; });
                    }).run().map(function (result) {
                        return {
                            canceled: false,
                            data: new FiscalIntegration.InitializeFiscalPeripheralsClientResponse()
                        };
                    }).getPromise();
                };
                InitializeFiscalPeripheralsClientRequestHandler.prototype._initializeFiscalPeripheralsSequentiallyAsync = function (registrationProcess, correlationId) {
                    var _this = this;
                    if (!FiscalIntegration.FiscalIntegrationValidators.hasProcessLines(registrationProcess)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    registrationProcess.RegistrationProcessLines.forEach(function (processLine) {
                        asyncQueue.enqueue(function () {
                            return _this._initializeFiscalPeripheral(processLine)
                                .recoverOnFailure(function (errors) {
                                Commerce.RetailLogger.fiscalIntegrationFiscalPeripheralInitializationFailed(processLine.SequenceNumber, processLine.Priority, Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                                return Commerce.NotificationHandler.displayClientErrors(errors);
                            })
                                .map(function () { return void 0; });
                        });
                    });
                    return asyncQueue.run();
                };
                InitializeFiscalPeripheralsClientRequestHandler.prototype._initializeFiscalPeripheral = function (processLine) {
                    var _this = this;
                    var hardwareProfileId = Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId;
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _this.fiscalIntegrationManager.getFiscalIntegrationFiscalServiceSetupDocumentAsync(hardwareProfileId, processLine.FunctionalityProfileGroupId);
                    }).enqueue(function (setupDocument) {
                        var error = FiscalIntegration.FiscalIntegrationValidators.assertDocumentGenerationSucceeded(setupDocument);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                            return Commerce.AsyncResult.createRejected([error]);
                        }
                        var initializationDocument;
                        if (FiscalIntegration.FiscalIntegrationValidators.isRegistrationRequired(setupDocument)) {
                            initializationDocument = setupDocument;
                        }
                        else {
                            initializationDocument = _this._getDefaultInitializationDocument(setupDocument.FiscalConnectorTechnicalProfile);
                        }
                        return _this._initializeFiscalPeripheralWithSetupDocument(initializationDocument, processLine)
                            .map(function () { return void 0; });
                    }).run();
                };
                InitializeFiscalPeripheralsClientRequestHandler.prototype._getDefaultInitializationDocument = function (fiscalConnectorTechnicalProfile) {
                    return {
                        Document: Commerce.StringExtensions.EMPTY,
                        FiscalConnectorTechnicalProfile: fiscalConnectorTechnicalProfile
                    };
                };
                InitializeFiscalPeripheralsClientRequestHandler.prototype._initializeFiscalPeripheralWithSetupDocument = function (setupDocument, processLine) {
                    var technicalProfile = setupDocument.FiscalConnectorTechnicalProfile;
                    var fiscalPeripheralInfo = {
                        DeviceName: technicalProfile.ConnectorName,
                        DeviceProperties: technicalProfile.TechnicalProfile
                    };
                    var asyncResult = new Commerce.VoidAsyncResult();
                    this._runFiscalPeripheralActionWithRetry(function () { return Commerce.Peripherals.instance.fiscalPeripheral.initialize(setupDocument.Document, fiscalPeripheralInfo); }, processLine, setupDocument.FiscalConnectorTechnicalProfile).done(function (response) {
                        var error = FiscalIntegration.FiscalIntegrationValidators.assertPeripheralActionSucceeded(setupDocument.FiscalConnectorTechnicalProfile, response);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                            asyncResult.reject([error]);
                        }
                        else {
                            asyncResult.resolve();
                        }
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncResult;
                };
                InitializeFiscalPeripheralsClientRequestHandler.prototype._runFiscalPeripheralActionWithRetry = function (action, processLine, technicalProfile) {
                    var _this = this;
                    Commerce.ThrowIf.argumentIsNotFunction(action, "action");
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return action();
                    }).enqueue(function (response) {
                        var error = FiscalIntegration.FiscalIntegrationValidators.assertPeripheralActionSucceeded(technicalProfile, response);
                        if (Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                            return Commerce.AsyncResult.createResolved(response);
                        }
                        else {
                            return _this._handleFiscalPeripheralError(action, processLine, technicalProfile, response, error);
                        }
                    }).run().map(function (value) {
                        return value.data;
                    });
                };
                InitializeFiscalPeripheralsClientRequestHandler.prototype._handleFiscalPeripheralError = function (action, processLine, technicalProfile, response, error) {
                    var _this = this;
                    var failureDetails = response.FailureDetails;
                    var errorHandlingOptions = {
                        allowRetry: failureDetails.IsRetryAllowed,
                        allowCancel: true
                    };
                    var activityContext = {
                        title: Commerce.ViewModelAdapter.getResourceString("string_4909"),
                        message: error.message,
                        options: errorHandlingOptions
                    };
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return FiscalIntegration.Helpers.RegistrationProcessHelper.displayFiscalRegistrationErrorDialogAsync(activityContext);
                    }).enqueue(function (actionType) {
                        switch (actionType) {
                            case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Cancel:
                                return Commerce.AsyncResult.createResolved({
                                    CommunicationResultType: FiscalIntegration.Peripherals.FiscalPeripheralCommunicationResultType.None,
                                    Response: Commerce.StringExtensions.EMPTY
                                });
                            case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Retry:
                                return _this._runFiscalPeripheralActionWithRetry(action, processLine, technicalProfile);
                            default:
                                throw new Error("Unexpected action type: " + FiscalIntegration.Entities.FiscalRegistrationErrorActionType[actionType]);
                        }
                    }).run().map(function (value) { return value.data; });
                };
                return InitializeFiscalPeripheralsClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.InitializeFiscalPeripheralsClientRequestHandler = InitializeFiscalPeripheralsClientRequestHandler;
        })(Handlers = FiscalIntegration.Handlers || (FiscalIntegration.Handlers = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var RegisterFiscalEventClientRequestHandler = (function (_super) {
                __extends(RegisterFiscalEventClientRequestHandler, _super);
                function RegisterFiscalEventClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RegisterFiscalEventClientRequestHandler.prototype.supportedRequestType = function () {
                    return FiscalIntegration.RegisterFiscalEventClientRequest;
                };
                RegisterFiscalEventClientRequestHandler.prototype.executeAsync = function (request) {
                    var shift = Commerce.Session.instance.Shift;
                    var documentRetrievalCriteria = this._createDocumentRetrievalCriteria(request.eventType, shift, request.transactionId, request.fiscalDocumentContext);
                    Commerce.RetailLogger.fiscalIntegrationRegisterFiscalEventClientRequestStarted(request.correlationId);
                    return this._executeRegistrationProcessAsync(request.correlationId, request.eventType, documentRetrievalCriteria)
                        .done(function () {
                        Commerce.RetailLogger.fiscalIntegrationRegisterFiscalEventClientRequestSucceeded(request.correlationId);
                    }).recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.fiscalIntegrationRegisterFiscalEventClientRequestFailed(Commerce.ErrorHelper.getErrorMessages(errors), request.correlationId);
                        return Commerce.NotificationHandler.displayClientErrors(errors);
                    }).map(function () {
                        return {
                            canceled: false,
                            data: new FiscalIntegration.RegisterFiscalEventClientResponse()
                        };
                    }).getPromise();
                };
                RegisterFiscalEventClientRequestHandler.prototype._createDocumentRetrievalCriteria = function (eventType, shift, transactionId, documentContext) {
                    return {
                        FiscalRegistrationEventTypeValue: eventType,
                        IsRemoteTransaction: false,
                        QueryBySalesId: false,
                        ShiftId: shift.ShiftId,
                        ShiftTerminalId: shift.TerminalId,
                        TransactionId: transactionId,
                        DocumentContext: documentContext
                    };
                };
                RegisterFiscalEventClientRequestHandler.prototype._executeRegistrationProcessAsync = function (correlationId, eventType, documentRetrievalCriteria) {
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(FiscalIntegration.Workflow.RegistrationProcessManager.completePendingRegistrationProcessAsync(correlationId));
                    }).enqueue(function () {
                        return FiscalIntegration.Workflow.RegistrationProcessManager.startRegistrationProcessAsync(correlationId, eventType, documentRetrievalCriteria);
                    });
                    return asyncQueue.run();
                };
                return RegisterFiscalEventClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.RegisterFiscalEventClientRequestHandler = RegisterFiscalEventClientRequestHandler;
        })(Handlers = FiscalIntegration.Handlers || (FiscalIntegration.Handlers = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcess;
            (function (RegistrationProcess) {
                "use strict";
                var RegistrationProcessStateType;
                (function (RegistrationProcessStateType) {
                    RegistrationProcessStateType[RegistrationProcessStateType["None"] = 0] = "None";
                    RegistrationProcessStateType[RegistrationProcessStateType["Started"] = 1] = "Started";
                    RegistrationProcessStateType[RegistrationProcessStateType["Completed"] = 2] = "Completed";
                    RegistrationProcessStateType[RegistrationProcessStateType["Failed"] = 3] = "Failed";
                })(RegistrationProcessStateType = RegistrationProcess.RegistrationProcessStateType || (RegistrationProcess.RegistrationProcessStateType = {}));
            })(RegistrationProcess = Workflow.RegistrationProcess || (Workflow.RegistrationProcess = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Helpers;
        (function (Helpers) {
            "use strict";
            var RegistrationProcessHelper = (function () {
                function RegistrationProcessHelper() {
                }
                RegistrationProcessHelper.getRegistrationProcessAsync = function (correlationId) {
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new FiscalIntegration.GetFiscalIntegrationRegistrationProcessServiceRequest(correlationId))).map(function (result) {
                        return result.data.fiscalIntegrationRegistrationProcess;
                    });
                };
                RegistrationProcessHelper.findRegistrationProcessLine = function (registrationProcess, sequenceNumber, priority) {
                    var processLines = registrationProcess.RegistrationProcessLines
                        .filter(function (line) {
                        return line.SequenceNumber === sequenceNumber &&
                            line.Priority === priority;
                    });
                    return processLines[0];
                };
                RegistrationProcessHelper.isEventTypeSupported = function (registrationProcessLine, eventType, isFiscalEvent) {
                    var supportedEventTypes = isFiscalEvent ?
                        registrationProcessLine.SupportedFiscalEventTypes :
                        registrationProcessLine.SupportedNonFiscalEventTypes;
                    return Commerce.ArrayExtensions.hasElement(supportedEventTypes, eventType);
                };
                RegistrationProcessHelper.findNextRegistrationProcessLine = function (registrationProcess, currentProcessLine) {
                    var processLines = registrationProcess.RegistrationProcessLines
                        .sort(this._sortBySequenceNumberAndPriority);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(currentProcessLine)) {
                        processLines = processLines.filter(function (line) {
                            return line.SequenceNumber > currentProcessLine.SequenceNumber;
                        });
                    }
                    return processLines[0];
                };
                RegistrationProcessHelper.findBackupFiscalRegistrationProcessLine = function (registrationProcess, currentProcessLine, eventType, isFiscalEvent) {
                    var processLines = registrationProcess.RegistrationProcessLines
                        .filter(this._getFilterBySupportedEventType(eventType, isFiscalEvent))
                        .sort(this._sortBySequenceNumberAndPriority)
                        .filter(function (line) {
                        return line.SequenceNumber === currentProcessLine.SequenceNumber &&
                            line.Priority > currentProcessLine.Priority;
                    });
                    return processLines[0];
                };
                RegistrationProcessHelper.displayFiscalRegistrationErrorDialogAsync = function (activityContext) {
                    var activity = new FiscalIntegration.Activities.SelectFiscalRegistrationErrorActionTypeActivity(activityContext);
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return activity.execute();
                    }).enqueue(function () {
                        return Commerce.AsyncResult.createResolved(activity.response.action);
                    }).run().map(function (result) { return result.data; });
                };
                RegistrationProcessHelper.createRegistrationResult = function (eventType, document, documentRetrievalCriteria, peripheralResponse, registrationStatus) {
                    return {
                        FiscalRegistrationEventTypeValue: eventType,
                        TransactionID: documentRetrievalCriteria.TransactionId,
                        SubmittedDocument: Commerce.ObjectExtensions.isNullOrUndefined(document) ? Commerce.StringExtensions.EMPTY : document.Document,
                        RegisterInfo: Commerce.ObjectExtensions.isNullOrUndefined(peripheralResponse) ? Commerce.StringExtensions.EMPTY : peripheralResponse.FiscalPeripheralInfo,
                        Response: Commerce.ObjectExtensions.isNullOrUndefined(peripheralResponse) ? Commerce.StringExtensions.EMPTY : peripheralResponse.Response,
                        RegistrationStatusValue: registrationStatus,
                        DocumentAdjustment: Commerce.ObjectExtensions.isNullOrUndefined(document) ? null : document.DocumentAdjustment
                    };
                };
                RegistrationProcessHelper._sortBySequenceNumberAndPriority = function (line1, line2) {
                    return line1.SequenceNumber !== line2.SequenceNumber ?
                        line1.SequenceNumber - line2.SequenceNumber :
                        line1.Priority - line2.Priority;
                };
                RegistrationProcessHelper._getFilterBySupportedEventType = function (eventType, isFiscalEvent) {
                    var _this = this;
                    return function (registrationProcessLine) {
                        return _this.isEventTypeSupported(registrationProcessLine, eventType, isFiscalEvent);
                    };
                };
                return RegistrationProcessHelper;
            }());
            Helpers.RegistrationProcessHelper = RegistrationProcessHelper;
        })(Helpers = FiscalIntegration.Helpers || (FiscalIntegration.Helpers = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var CompletePendingRegistrationProcessInterceptor = (function () {
                function CompletePendingRegistrationProcessInterceptor() {
                    this.operations = [
                        Commerce.Operations.RetailOperation.ItemSale,
                        Commerce.Operations.RetailOperation.PayCash,
                        Commerce.Operations.RetailOperation.PayCashQuick,
                        Commerce.Operations.RetailOperation.PayCheck,
                        Commerce.Operations.RetailOperation.PayCreditMemo,
                        Commerce.Operations.RetailOperation.PayCurrency,
                        Commerce.Operations.RetailOperation.PayCustomerAccount,
                        Commerce.Operations.RetailOperation.PayGiftCertificate,
                        Commerce.Operations.RetailOperation.PayLoyalty,
                    ];
                }
                CompletePendingRegistrationProcessInterceptor.prototype.onInterceptingAsync = function (request) {
                    if (Commerce.ArrayExtensions.hasElement(this.operations, request.operationId)) {
                        return FiscalIntegration.Workflow.RegistrationProcessManager.completePendingRegistrationProcessAsync(request.correlationId).getPromise();
                    }
                    else {
                        return Promise.resolve({ canceled: false });
                    }
                };
                return CompletePendingRegistrationProcessInterceptor;
            }());
            Interceptors.CompletePendingRegistrationProcessInterceptor = CompletePendingRegistrationProcessInterceptor;
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var InitializeFiscalPeripheralsRequestInterceptor = (function () {
                function InitializeFiscalPeripheralsRequestInterceptor() {
                }
                InitializeFiscalPeripheralsRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    if (result instanceof Array) {
                        return Promise.resolve();
                    }
                    var fiscalIntegrationInitializer = new FiscalIntegration.FiscalIntegrationInitializer();
                    return fiscalIntegrationInitializer.isFiscalIntegrationEnabledAsync(request.correlationId).getPromise().then(function (enabled) {
                        if (enabled) {
                            return fiscalIntegrationInitializer.initializeAsync(request.correlationId).getPromise().then(function () {
                                return Commerce.Runtime.executeAsync(new FiscalIntegration.InitializeFiscalPeripheralsClientRequest(request.correlationId));
                            }).then(function () { return void 0; });
                        }
                        else {
                            return Promise.resolve();
                        }
                    }).then(function () { return void 0; });
                };
                return InitializeFiscalPeripheralsRequestInterceptor;
            }());
            Interceptors.InitializeFiscalPeripheralsRequestInterceptor = InitializeFiscalPeripheralsRequestInterceptor;
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var RegisterFiscalEventForAuditEventRequestInterceptor = (function () {
                function RegisterFiscalEventForAuditEventRequestInterceptor() {
                }
                RegisterFiscalEventForAuditEventRequestInterceptor.prototype.supportedFiscalIntegrationEventTypes = function () {
                    return [
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.AuditEvent
                    ];
                };
                RegisterFiscalEventForAuditEventRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    if (result instanceof Array) {
                        return Promise.resolve();
                    }
                    var eventType = Commerce.Proxy.Entities.FiscalIntegrationEventType.AuditEvent;
                    var auditEvent = result.data.result;
                    var registerFiscalEventClientRequest = new FiscalIntegration.RegisterFiscalEventClientRequest(request.correlationId, eventType, Commerce.StringExtensions.EMPTY, {
                        AuditEvent: auditEvent
                    });
                    return Commerce.Runtime.executeAsync(registerFiscalEventClientRequest).then(function () { return void 0; });
                };
                return RegisterFiscalEventForAuditEventRequestInterceptor;
            }());
            Interceptors.RegisterFiscalEventForAuditEventRequestInterceptor = RegisterFiscalEventForAuditEventRequestInterceptor;
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var RegisterFiscalEventForOperationRequestInterceptor = (function () {
                function RegisterFiscalEventForOperationRequestInterceptor() {
                }
                RegisterFiscalEventForOperationRequestInterceptor.prototype.supportedFiscalIntegrationEventTypes = function () {
                    return [
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.ZReport,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.XReport,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.CloseShift,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.BankDrop,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.TenderDeclaration,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.RemoveTender,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.FloatEntry,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.SafeDrop,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.StartingAmount,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.CreditMemo,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.DepositOverride,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.OpenDrawer
                    ];
                };
                RegisterFiscalEventForOperationRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    if (result instanceof Array) {
                        return Promise.resolve();
                    }
                    var eventType = this._getFiscalIntegrationEventType(request.operationId);
                    if (eventType === Commerce.Proxy.Entities.FiscalIntegrationEventType.None) {
                        return Promise.resolve();
                    }
                    var registerFiscalEventClientRequest = new FiscalIntegration.RegisterFiscalEventClientRequest(request.correlationId, eventType, Commerce.Session.instance.cart.Id);
                    return Commerce.Runtime.executeAsync(registerFiscalEventClientRequest).then(function () { return void 0; });
                };
                RegisterFiscalEventForOperationRequestInterceptor.prototype._getFiscalIntegrationEventType = function (operationId) {
                    switch (operationId) {
                        case Commerce.Proxy.Entities.RetailOperation.PrintZ:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.ZReport;
                        case Commerce.Proxy.Entities.RetailOperation.PrintX:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.XReport;
                        case Commerce.Proxy.Entities.RetailOperation.CloseShift:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.CloseShift;
                        case Commerce.Proxy.Entities.RetailOperation.BankDrop:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.BankDrop;
                        case Commerce.Proxy.Entities.RetailOperation.TenderDeclaration:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.TenderDeclaration;
                        case Commerce.Proxy.Entities.RetailOperation.TenderRemoval:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.RemoveTender;
                        case Commerce.Proxy.Entities.RetailOperation.FloatEntry:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.FloatEntry;
                        case Commerce.Proxy.Entities.RetailOperation.SafeDrop:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.SafeDrop;
                        case Commerce.Proxy.Entities.RetailOperation.DeclareStartAmount:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.StartingAmount;
                        case Commerce.Proxy.Entities.RetailOperation.IssueCreditMemo:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.CreditMemo;
                        case Commerce.Proxy.Entities.RetailOperation.DepositOverride:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.DepositOverride;
                        case Commerce.Proxy.Entities.RetailOperation.OpenDrawer:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.OpenDrawer;
                        default:
                            return Commerce.Proxy.Entities.FiscalIntegrationEventType.None;
                    }
                };
                return RegisterFiscalEventForOperationRequestInterceptor;
            }());
            Interceptors.RegisterFiscalEventForOperationRequestInterceptor = RegisterFiscalEventForOperationRequestInterceptor;
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var RegisterFiscalEventForPackingSlipRequestInterceptor = (function () {
                function RegisterFiscalEventForPackingSlipRequestInterceptor() {
                }
                RegisterFiscalEventForPackingSlipRequestInterceptor.prototype.supportedFiscalIntegrationEventTypes = function () {
                    return [
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.PackingSlip
                    ];
                };
                RegisterFiscalEventForPackingSlipRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    if (result instanceof Array) {
                        return Promise.resolve();
                    }
                    var registerFiscalEventClientRequest = new FiscalIntegration.RegisterFiscalEventClientRequest(request.correlationId, Commerce.Proxy.Entities.FiscalIntegrationEventType.PackingSlip, Commerce.StringExtensions.EMPTY);
                    return Commerce.Runtime.executeAsync(registerFiscalEventClientRequest).then(function () { return void 0; });
                };
                return RegisterFiscalEventForPackingSlipRequestInterceptor;
            }());
            Interceptors.RegisterFiscalEventForPackingSlipRequestInterceptor = RegisterFiscalEventForPackingSlipRequestInterceptor;
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var RegisterFiscalEventForSaleRequestInterceptor = (function () {
                function RegisterFiscalEventForSaleRequestInterceptor() {
                }
                RegisterFiscalEventForSaleRequestInterceptor.prototype.supportedFiscalIntegrationEventTypes = function () {
                    return [
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.Sale,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.CustomerAccountDeposit,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.CreateCustomerOrder,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.EditCustomerOrder
                    ];
                };
                RegisterFiscalEventForSaleRequestInterceptor.prototype.onInterceptingAsync = function (request) {
                    this._fiscalEventTypeToRegister = this._getFiscalEventType(Commerce.Session.instance.cart);
                    return FiscalIntegration.Workflow.RegistrationProcessManager.completePendingRegistrationProcessAsync(request.correlationId).getPromise();
                };
                RegisterFiscalEventForSaleRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    if (result instanceof Array) {
                        return Promise.resolve();
                    }
                    if (this._fiscalEventTypeToRegister !== Commerce.Proxy.Entities.FiscalIntegrationEventType.None) {
                        var salesOrder = result.data.result.salesOrder;
                        var salesOrderId = Commerce.ObjectExtensions.isNullOrUndefined(salesOrder) ? Commerce.StringExtensions.EMPTY : salesOrder.Id;
                        var registerFiscalEventClientRequest = new FiscalIntegration.RegisterFiscalEventClientRequest(request.correlationId, this._fiscalEventTypeToRegister, salesOrderId);
                        return Commerce.Runtime.executeAsync(registerFiscalEventClientRequest).then(function () { return void 0; });
                    }
                    else {
                        return Promise.resolve();
                    }
                };
                RegisterFiscalEventForSaleRequestInterceptor.prototype._getFiscalEventType = function (cart) {
                    Commerce.ThrowIf.argumentIsNotObject(cart, "cart");
                    var fiscalEventType = Commerce.Proxy.Entities.FiscalIntegrationEventType.None;
                    if (FiscalIntegration.FiscalIntegrationValidators.isFiscalSale(cart)) {
                        fiscalEventType = Commerce.Proxy.Entities.FiscalIntegrationEventType.Sale;
                    }
                    else if (FiscalIntegration.FiscalIntegrationValidators.isCustomerAccountDeposit(cart)) {
                        fiscalEventType = Commerce.Proxy.Entities.FiscalIntegrationEventType.CustomerAccountDeposit;
                    }
                    else if (Commerce.CustomerOrderHelper.isCustomerOrderCreate(cart)) {
                        fiscalEventType = Commerce.Proxy.Entities.FiscalIntegrationEventType.CreateCustomerOrder;
                    }
                    else if (Commerce.CustomerOrderHelper.isCustomerOrderEdition(cart)) {
                        fiscalEventType = Commerce.Proxy.Entities.FiscalIntegrationEventType.EditCustomerOrder;
                    }
                    else if (Commerce.CustomerOrderHelper.isCustomerOrderCancellation(cart)) {
                        fiscalEventType = Commerce.Proxy.Entities.FiscalIntegrationEventType.CancelCustomerOrder;
                    }
                    return fiscalEventType;
                };
                return RegisterFiscalEventForSaleRequestInterceptor;
            }());
            Interceptors.RegisterFiscalEventForSaleRequestInterceptor = RegisterFiscalEventForSaleRequestInterceptor;
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var RegisterFiscalEventsForReceiptPrintingRequestInterceptor = (function () {
                function RegisterFiscalEventsForReceiptPrintingRequestInterceptor() {
                }
                RegisterFiscalEventsForReceiptPrintingRequestInterceptor.prototype.supportedFiscalIntegrationEventTypes = function () {
                    return [
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.PrintReceiptCopy,
                        Commerce.Proxy.Entities.FiscalIntegrationEventType.GiftReceipt
                    ];
                };
                RegisterFiscalEventsForReceiptPrintingRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    var _this = this;
                    if (result instanceof Array) {
                        return Promise.resolve();
                    }
                    var receiptsToPrint = request.printableReceipts
                        .filter(function (printableReceipt) {
                        return printableReceipt.shouldPrint;
                    });
                    var printingQueue = new Commerce.AsyncQueue();
                    if (request.isCopyOfReceipt) {
                        printingQueue.enqueue(function () {
                            return _this._registerFiscalEvent(Commerce.Proxy.Entities.FiscalIntegrationEventType.PrintReceiptCopy, request.correlationId);
                        });
                    }
                    var containsGiftReceipt = receiptsToPrint.some(function (receipt) {
                        return receipt.receiptTypeValue === Commerce.Proxy.Entities.ReceiptType.GiftReceipt;
                    });
                    if (containsGiftReceipt) {
                        printingQueue.enqueue(function () {
                            return _this._registerFiscalEvent(Commerce.Proxy.Entities.FiscalIntegrationEventType.GiftReceipt, request.correlationId);
                        });
                    }
                    return printingQueue.run().map(function () { return void 0; }).getPromise();
                };
                RegisterFiscalEventsForReceiptPrintingRequestInterceptor.prototype._registerFiscalEvent = function (fiscalEventType, correlationId) {
                    var registerFiscalEventClientRequest = new FiscalIntegration.RegisterFiscalEventClientRequest(correlationId, fiscalEventType, Commerce.StringExtensions.EMPTY);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(registerFiscalEventClientRequest));
                };
                return RegisterFiscalEventsForReceiptPrintingRequestInterceptor;
            }());
            Interceptors.RegisterFiscalEventsForReceiptPrintingRequestInterceptor = RegisterFiscalEventsForReceiptPrintingRequestInterceptor;
        })(Interceptors = FiscalIntegration.Interceptors || (FiscalIntegration.Interceptors = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var GetFiscalIntegrationRegistrationProcessServiceResponse = (function (_super) {
            __extends(GetFiscalIntegrationRegistrationProcessServiceResponse, _super);
            function GetFiscalIntegrationRegistrationProcessServiceResponse(fiscalIntegrationRegistrationProcess) {
                var _this = _super.call(this) || this;
                _this.fiscalIntegrationRegistrationProcess = fiscalIntegrationRegistrationProcess;
                return _this;
            }
            return GetFiscalIntegrationRegistrationProcessServiceResponse;
        }(Commerce.Response));
        FiscalIntegration.GetFiscalIntegrationRegistrationProcessServiceResponse = GetFiscalIntegrationRegistrationProcessServiceResponse;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var GetFiscalIntegrationRegistrationProcessServiceRequest = (function (_super) {
            __extends(GetFiscalIntegrationRegistrationProcessServiceRequest, _super);
            function GetFiscalIntegrationRegistrationProcessServiceRequest() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetFiscalIntegrationRegistrationProcessServiceRequest;
        }(Commerce.Request));
        FiscalIntegration.GetFiscalIntegrationRegistrationProcessServiceRequest = GetFiscalIntegrationRegistrationProcessServiceRequest;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var InitializeFiscalPeripheralsClientResponse = (function (_super) {
            __extends(InitializeFiscalPeripheralsClientResponse, _super);
            function InitializeFiscalPeripheralsClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return InitializeFiscalPeripheralsClientResponse;
        }(Commerce.Response));
        FiscalIntegration.InitializeFiscalPeripheralsClientResponse = InitializeFiscalPeripheralsClientResponse;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var InitializeFiscalPeripheralsClientRequest = (function (_super) {
            __extends(InitializeFiscalPeripheralsClientRequest, _super);
            function InitializeFiscalPeripheralsClientRequest() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return InitializeFiscalPeripheralsClientRequest;
        }(Commerce.Request));
        FiscalIntegration.InitializeFiscalPeripheralsClientRequest = InitializeFiscalPeripheralsClientRequest;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var RegisterFiscalEventClientResponse = (function (_super) {
            __extends(RegisterFiscalEventClientResponse, _super);
            function RegisterFiscalEventClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RegisterFiscalEventClientResponse;
        }(Commerce.Response));
        FiscalIntegration.RegisterFiscalEventClientResponse = RegisterFiscalEventClientResponse;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        "use strict";
        var RegisterFiscalEventClientRequest = (function (_super) {
            __extends(RegisterFiscalEventClientRequest, _super);
            function RegisterFiscalEventClientRequest(correlationId, eventType, transactionId, fiscalDocumentContext) {
                if (fiscalDocumentContext === void 0) { fiscalDocumentContext = {}; }
                var _this = _super.call(this, correlationId) || this;
                _this.eventType = eventType;
                _this.transactionId = transactionId;
                _this.fiscalDocumentContext = fiscalDocumentContext;
                return _this;
            }
            return RegisterFiscalEventClientRequest;
        }(Commerce.Request));
        FiscalIntegration.RegisterFiscalEventClientRequest = RegisterFiscalEventClientRequest;
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Operations;
        (function (Operations) {
            "use strict";
        })(Operations = FiscalIntegration.Operations || (FiscalIntegration.Operations = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Operations;
        (function (Operations) {
            "use strict";
            var MarkFiscalEventRegisteredOperationHandler = (function (_super) {
                __extends(MarkFiscalEventRegisteredOperationHandler, _super);
                function MarkFiscalEventRegisteredOperationHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                MarkFiscalEventRegisteredOperationHandler.prototype.execute = function (options) {
                    Commerce.ThrowIf.argumentIsNotObject(options, "options");
                    var registrationResult = FiscalIntegration.Helpers.RegistrationProcessHelper.createRegistrationResult(options.eventType, options.document, options.documentRetrievalCriteria, options.peripheralResponse, Commerce.Proxy.Entities.FiscalIntegrationRegistrationStatus.MarkedAsRegistered);
                    var asyncQueue = new Commerce.AsyncQueue();
                    return asyncQueue.enqueue(function () {
                        if (Commerce.StringExtensions.isNullOrWhitespace(options.reasonCodeId)) {
                            return Commerce.AsyncResult.createResolved();
                        }
                        var reasonCodeHelperQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesByReasonCodeIdAsyncQueue({ fiscalRegistrationResult: registrationResult }, null, options.reasonCodeId);
                        return asyncQueue.cancelOn(reasonCodeHelperQueue.run());
                    }).enqueue(function () {
                        return Commerce.AsyncResult.createResolved(registrationResult);
                    }).run();
                };
                return MarkFiscalEventRegisteredOperationHandler;
            }(Commerce.Operations.OperationHandlerBase));
            Operations.MarkFiscalEventRegisteredOperationHandler = MarkFiscalEventRegisteredOperationHandler;
        })(Operations = FiscalIntegration.Operations || (FiscalIntegration.Operations = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Operations;
        (function (Operations) {
            "use strict";
            var PrintFiscalXOperationHandler = (function (_super) {
                __extends(PrintFiscalXOperationHandler, _super);
                function PrintFiscalXOperationHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                PrintFiscalXOperationHandler.prototype.execute = function (options) {
                    options = options || { correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                    var registerFiscalEventClientRequest = new FiscalIntegration.RegisterFiscalEventClientRequest(options.correlationId, Commerce.Proxy.Entities.FiscalIntegrationEventType.FiscalXReport, Commerce.StringExtensions.EMPTY);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(registerFiscalEventClientRequest));
                };
                return PrintFiscalXOperationHandler;
            }(Commerce.Operations.OperationHandlerBase));
            Operations.PrintFiscalXOperationHandler = PrintFiscalXOperationHandler;
        })(Operations = FiscalIntegration.Operations || (FiscalIntegration.Operations = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Operations;
        (function (Operations) {
            "use strict";
            var PrintFiscalZOperationHandler = (function (_super) {
                __extends(PrintFiscalZOperationHandler, _super);
                function PrintFiscalZOperationHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                PrintFiscalZOperationHandler.prototype.execute = function (options) {
                    options = options || { correlationId: Commerce.LoggerHelper.getNewCorrelationId() };
                    var registerFiscalEventClientRequest = new FiscalIntegration.RegisterFiscalEventClientRequest(options.correlationId, Commerce.Proxy.Entities.FiscalIntegrationEventType.FiscalZReport, Commerce.StringExtensions.EMPTY);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(registerFiscalEventClientRequest));
                };
                return PrintFiscalZOperationHandler;
            }(Commerce.Operations.OperationHandlerBase));
            Operations.PrintFiscalZOperationHandler = PrintFiscalZOperationHandler;
        })(Operations = FiscalIntegration.Operations || (FiscalIntegration.Operations = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Operations;
        (function (Operations) {
            "use strict";
            var SkipFiscalRegistrationOperationHandler = (function (_super) {
                __extends(SkipFiscalRegistrationOperationHandler, _super);
                function SkipFiscalRegistrationOperationHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SkipFiscalRegistrationOperationHandler.prototype.execute = function (options) {
                    Commerce.ThrowIf.argumentIsNotObject(options, "options");
                    var registrationResult = FiscalIntegration.Helpers.RegistrationProcessHelper.createRegistrationResult(options.eventType, options.document, options.documentRetrievalCriteria, options.peripheralResponse, Commerce.Proxy.Entities.FiscalIntegrationRegistrationStatus.Skipped);
                    var asyncQueue = new Commerce.AsyncQueue();
                    return asyncQueue.enqueue(function () {
                        if (Commerce.StringExtensions.isNullOrWhitespace(options.reasonCodeId)) {
                            return Commerce.AsyncResult.createResolved();
                        }
                        var reasonCodeHelperQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesByReasonCodeIdAsyncQueue({ fiscalRegistrationResult: registrationResult }, null, options.reasonCodeId);
                        return asyncQueue.cancelOn(reasonCodeHelperQueue.run());
                    }).enqueue(function () {
                        return Commerce.AsyncResult.createResolved(registrationResult);
                    }).run();
                };
                return SkipFiscalRegistrationOperationHandler;
            }(Commerce.Operations.OperationHandlerBase));
            Operations.SkipFiscalRegistrationOperationHandler = SkipFiscalRegistrationOperationHandler;
        })(Operations = FiscalIntegration.Operations || (FiscalIntegration.Operations = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Peripherals;
        (function (Peripherals) {
            "use strict";
            var FiscalPeripheralCommunicationResultType;
            (function (FiscalPeripheralCommunicationResultType) {
                FiscalPeripheralCommunicationResultType[FiscalPeripheralCommunicationResultType["None"] = 0] = "None";
                FiscalPeripheralCommunicationResultType[FiscalPeripheralCommunicationResultType["Succeeded"] = 1] = "Succeeded";
                FiscalPeripheralCommunicationResultType[FiscalPeripheralCommunicationResultType["Failed"] = 2] = "Failed";
            })(FiscalPeripheralCommunicationResultType = Peripherals.FiscalPeripheralCommunicationResultType || (Peripherals.FiscalPeripheralCommunicationResultType = {}));
        })(Peripherals = FiscalIntegration.Peripherals || (FiscalIntegration.Peripherals = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Peripherals;
        (function (Peripherals) {
            "use strict";
            var FiscalPeripheralFailureType;
            (function (FiscalPeripheralFailureType) {
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["None"] = 0] = "None";
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["Busy"] = 1] = "Busy";
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["NotAvailable"] = 2] = "NotAvailable";
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["PaperOut"] = 3] = "PaperOut";
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["SubmissionFailed"] = 4] = "SubmissionFailed";
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["Other"] = 5] = "Other";
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["BadResponse"] = 6] = "BadResponse";
                FiscalPeripheralFailureType[FiscalPeripheralFailureType["Timeout"] = 7] = "Timeout";
            })(FiscalPeripheralFailureType = Peripherals.FiscalPeripheralFailureType || (Peripherals.FiscalPeripheralFailureType = {}));
        })(Peripherals = FiscalIntegration.Peripherals || (FiscalIntegration.Peripherals = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Peripherals;
        (function (Peripherals) {
            "use strict";
        })(Peripherals = FiscalIntegration.Peripherals || (FiscalIntegration.Peripherals = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Peripherals;
        (function (Peripherals) {
            "use strict";
        })(Peripherals = FiscalIntegration.Peripherals || (FiscalIntegration.Peripherals = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Peripherals;
        (function (Peripherals) {
            "use strict";
        })(Peripherals = FiscalIntegration.Peripherals || (FiscalIntegration.Peripherals = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Peripherals;
        (function (Peripherals) {
            "use strict";
        })(Peripherals = FiscalIntegration.Peripherals || (FiscalIntegration.Peripherals = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Peripherals;
        (function (Peripherals) {
            "use strict";
        })(Peripherals = FiscalIntegration.Peripherals || (FiscalIntegration.Peripherals = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            "use strict";
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            "use strict";
            var RegistrationContextBase = (function () {
                function RegistrationContextBase(correlationId, eventType, documentRetrievalCriteria) {
                    this.correlationId = correlationId;
                    this.eventType = eventType;
                    this.documentRetrievalCriteria = documentRetrievalCriteria;
                    this._contextUpdateListeners = [];
                }
                Object.defineProperty(RegistrationContextBase.prototype, "state", {
                    get: function () {
                        return this._state;
                    },
                    set: function (value) {
                        this._state = value;
                        this._notifyContextUpdated();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RegistrationContextBase.prototype, "lastErrors", {
                    get: function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(this._lastErrors)) {
                            this._lastErrors = [];
                        }
                        return this._lastErrors;
                    },
                    set: function (value) {
                        this._lastErrors = value;
                        this._notifyContextUpdated();
                    },
                    enumerable: true,
                    configurable: true
                });
                RegistrationContextBase.prototype.dispose = function () {
                    this._contextUpdateListeners = [];
                };
                RegistrationContextBase.prototype.startAsync = function () {
                    return this.state.startAsync();
                };
                RegistrationContextBase.prototype.continueWithAsync = function (stateType) {
                    this.state = this._getStateByStateType(stateType);
                    return this.startAsync();
                };
                RegistrationContextBase.prototype.onContextUpdated = function (callback) {
                    Commerce.ThrowIf.argumentIsNotFunction(callback, "callback");
                    this._contextUpdateListeners.push(callback);
                };
                RegistrationContextBase.prototype._notifyContextUpdated = function () {
                    var _this = this;
                    this._contextUpdateListeners.forEach(function (callback) {
                        callback(_this);
                    });
                };
                RegistrationContextBase.prototype._getStateByStateType = function (stateType) {
                    throw new Error("Not implemented.");
                };
                return RegistrationContextBase;
            }());
            Workflow.RegistrationContextBase = RegistrationContextBase;
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            "use strict";
            var RegistrationProcessManager = (function () {
                function RegistrationProcessManager() {
                }
                RegistrationProcessManager.hasPendingRegistrationProcess = function () {
                    return Workflow.RegistrationProcessStatePersister.hasSavedData();
                };
                RegistrationProcessManager.completePendingRegistrationProcessAsync = function (correlationId) {
                    var _this = this;
                    if (!this.hasPendingRegistrationProcess()) {
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    return asyncQueue.enqueue(function () {
                        return FiscalIntegration.Helpers.RegistrationProcessHelper.getRegistrationProcessAsync(correlationId);
                    }).enqueue(function (registrationProcess) {
                        var context = _this._getPendingRegistrationProcessContext(correlationId, registrationProcess);
                        if (Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        return asyncQueue.cancelOn(_this._startRegistrationProcessInternalAsync(context));
                    }).run();
                };
                RegistrationProcessManager.startRegistrationProcessAsync = function (correlationId, eventType, documentRetrievalCriteria) {
                    var _this = this;
                    var asyncQueue = new Commerce.AsyncQueue();
                    return asyncQueue.enqueue(function () {
                        return FiscalIntegration.Helpers.RegistrationProcessHelper.getRegistrationProcessAsync(correlationId);
                    }).enqueue(function (registrationProcess) {
                        var context = _this._createRegistrationProcessContext(correlationId, eventType, documentRetrievalCriteria, registrationProcess);
                        return asyncQueue.cancelOn(_this._startRegistrationProcessInternalAsync(context));
                    }).run();
                };
                RegistrationProcessManager._startRegistrationProcessInternalAsync = function (context) {
                    if (RegistrationProcessManager._isBusy) {
                        return Commerce.AsyncResult.createResolved({ canceled: true });
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    return asyncQueue.enqueue(function () {
                        RegistrationProcessManager._isBusy = true;
                        return context.startAsync();
                    }).enqueue(function () {
                        if (!FiscalIntegration.FiscalIntegrationValidators.isCompleted(context)) {
                            asyncQueue.cancel();
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).run().always(function () {
                        RegistrationProcessManager._isBusy = false;
                        context.dispose();
                    });
                };
                RegistrationProcessManager._getPendingRegistrationProcessContext = function (correlationId, registrationProcess) {
                    var context = Workflow.RegistrationProcessStatePersister.restore(correlationId, registrationProcess);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                        return null;
                    }
                    context.onContextUpdated(this._persistPendingRegistrationProcessContext);
                    return context;
                };
                RegistrationProcessManager._createRegistrationProcessContext = function (correlationId, eventType, documentRetrievalCriteria, registrationProcess) {
                    var context = new Workflow.RegistrationProcess.RegistrationProcessContext(correlationId, eventType, documentRetrievalCriteria, registrationProcess);
                    Workflow.RegistrationProcessStatePersister.save(context);
                    context.onContextUpdated(this._persistPendingRegistrationProcessContext);
                    return context;
                };
                RegistrationProcessManager._persistPendingRegistrationProcessContext = function (context) {
                    if (!FiscalIntegration.FiscalIntegrationValidators.isCompleted(context)) {
                        Workflow.RegistrationProcessStatePersister.save(context);
                    }
                    else {
                        Workflow.RegistrationProcessStatePersister.clear();
                    }
                };
                RegistrationProcessManager._isBusy = false;
                return RegistrationProcessManager;
            }());
            Workflow.RegistrationProcessManager = RegistrationProcessManager;
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            "use strict";
            var RegistrationProcessStatePersister = (function () {
                function RegistrationProcessStatePersister() {
                }
                RegistrationProcessStatePersister.save = function (context) {
                    var registrationProcessContextData = {
                        stateType: context.state.stateType,
                        eventType: context.eventType,
                        documentRetrievalCriteria: context.documentRetrievalCriteria,
                        currentProcessLineContextData: null
                    };
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(context.currentProcessLineContext)) {
                        registrationProcessContextData.currentProcessLineContextData = {
                            stateType: context.currentProcessLineContext.state.stateType,
                            processLinePriority: context.currentProcessLineContext.processLine.Priority,
                            processLineSequenceNumber: context.currentProcessLineContext.processLine.SequenceNumber,
                            isFiscalEvent: context.currentProcessLineContext.isFiscalEvent,
                            document: context.currentProcessLineContext.document,
                            documentSubmitted: context.currentProcessLineContext.documentSubmitted,
                            peripheralResponse: context.currentProcessLineContext.peripheralResponse,
                            registrationResult: context.currentProcessLineContext.registrationResult
                        };
                    }
                    var registrationProcessContextDataSerialized = JSON.stringify(registrationProcessContextData);
                    Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CURRENT_FISCAL_REGISTRATION_PROCESS, registrationProcessContextDataSerialized);
                };
                RegistrationProcessStatePersister.restore = function (correlationId, registrationProcess) {
                    var registrationProcessContextDataSerialized = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CURRENT_FISCAL_REGISTRATION_PROCESS);
                    var registrationProcessContextData = JSON.parse(registrationProcessContextDataSerialized);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(registrationProcessContextData)) {
                        return null;
                    }
                    var processLineContext = this._restoreProcessLineContext(correlationId, registrationProcess, registrationProcessContextData);
                    var registrationProcessContext = this._restoreRegistrationProcessContext(correlationId, registrationProcessContextData, registrationProcess, processLineContext);
                    return registrationProcessContext;
                };
                RegistrationProcessStatePersister.hasSavedData = function () {
                    var registrationProcessContextDataSerialized = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CURRENT_FISCAL_REGISTRATION_PROCESS);
                    return !Commerce.ObjectExtensions.isNullOrUndefined(registrationProcessContextDataSerialized) &&
                        registrationProcessContextDataSerialized !== "null";
                };
                RegistrationProcessStatePersister.clear = function () {
                    Commerce.ApplicationStorage.removeItem(Commerce.ApplicationStorageIDs.CURRENT_FISCAL_REGISTRATION_PROCESS);
                };
                RegistrationProcessStatePersister._restoreRegistrationProcessContext = function (correlationId, registrationProcessContextData, registrationProcess, currentProcessLineContext) {
                    var registrationProcessContext = new Workflow.RegistrationProcess.RegistrationProcessContext(correlationId, registrationProcessContextData.eventType, registrationProcessContextData.documentRetrievalCriteria, registrationProcess, registrationProcessContextData.stateType, currentProcessLineContext);
                    return registrationProcessContext;
                };
                RegistrationProcessStatePersister._restoreProcessLineContext = function (correlationId, registrationProcess, registrationProcessContextData) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(registrationProcessContextData.currentProcessLineContextData)) {
                        return null;
                    }
                    var processLine = FiscalIntegration.Helpers.RegistrationProcessHelper.findRegistrationProcessLine(registrationProcess, registrationProcessContextData.currentProcessLineContextData.processLineSequenceNumber, registrationProcessContextData.currentProcessLineContextData.processLinePriority);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(processLine)) {
                        return null;
                    }
                    var processLineContext = new Workflow.RegistrationProcessLine.ProcessLineContext(correlationId, registrationProcessContextData.eventType, registrationProcessContextData.documentRetrievalCriteria, registrationProcess, processLine, registrationProcessContextData.currentProcessLineContextData.isFiscalEvent, registrationProcessContextData.currentProcessLineContextData.stateType, registrationProcessContextData.currentProcessLineContextData.document, registrationProcessContextData.currentProcessLineContextData.documentSubmitted, registrationProcessContextData.currentProcessLineContextData.peripheralResponse, registrationProcessContextData.currentProcessLineContextData.registrationResult);
                    return processLineContext;
                };
                return RegistrationProcessStatePersister;
            }());
            Workflow.RegistrationProcessStatePersister = RegistrationProcessStatePersister;
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            "use strict";
            var GetFulfillmentLineQuantityDialogError = (function (_super) {
                __extends(GetFulfillmentLineQuantityDialogError, _super);
                function GetFulfillmentLineQuantityDialogError(errorMessage, newDialogValue) {
                    var _this = _super.call(this, errorMessage, newDialogValue) || this;
                    _this.__proto__ = Entities.ShowAlphanumericInputDialogError.prototype;
                    return _this;
                }
                return GetFulfillmentLineQuantityDialogError;
            }(Client.Entities.ShowInputDialogError));
            Entities.GetFulfillmentLineQuantityDialogError = GetFulfillmentLineQuantityDialogError;
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            var Dialogs;
            (function (Dialogs) {
                "use strict";
            })(Dialogs = Entities.Dialogs || (Entities.Dialogs = {}));
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            var Dialogs;
            (function (Dialogs) {
                "use strict";
            })(Dialogs = Entities.Dialogs || (Entities.Dialogs = {}));
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var Entities;
        (function (Entities) {
            var Dialogs;
            (function (Dialogs) {
                "use strict";
            })(Dialogs = Entities.Dialogs || (Entities.Dialogs = {}));
        })(Entities = Client.Entities || (Client.Entities = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PrintPackingSlipClientRequestHandler = (function (_super) {
        __extends(PrintPackingSlipClientRequestHandler, _super);
        function PrintPackingSlipClientRequestHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PrintPackingSlipClientRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.PrintPackingSlipClientRequest;
        };
        PrintPackingSlipClientRequestHandler.prototype.executeAsync = function (request) {
            var receiptsToPrint = Commerce.ReceiptHelper.getPrintableReceipts(request.packingSlips);
            return Commerce.Peripherals.instance.printer.printAsync(receiptsToPrint).getPromise();
        };
        return PrintPackingSlipClientRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.PrintPackingSlipClientRequestHandler = PrintPackingSlipClientRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetFulfillmentLineQuantityDialogClientResponse = (function (_super) {
        __extends(GetFulfillmentLineQuantityDialogClientResponse, _super);
        function GetFulfillmentLineQuantityDialogClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return GetFulfillmentLineQuantityDialogClientResponse;
    }(Commerce.ClientResponse));
    Commerce.GetFulfillmentLineQuantityDialogClientResponse = GetFulfillmentLineQuantityDialogClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetFulfillmentLineQuantityDialogClientRequest = (function (_super) {
        __extends(GetFulfillmentLineQuantityDialogClientRequest, _super);
        function GetFulfillmentLineQuantityDialogClientRequest(options, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                throw new Error("GetFulfillmentLineQuantityDialogClientRequest: required parameter options is null or undefined.");
            }
            _this.options = options;
            return _this;
        }
        return GetFulfillmentLineQuantityDialogClientRequest;
    }(Commerce.ClientRequest));
    Commerce.GetFulfillmentLineQuantityDialogClientRequest = GetFulfillmentLineQuantityDialogClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SelectPackingSlipIdClientResponse = (function (_super) {
        __extends(SelectPackingSlipIdClientResponse, _super);
        function SelectPackingSlipIdClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SelectPackingSlipIdClientResponse;
    }(Commerce.ClientResponse));
    Commerce.SelectPackingSlipIdClientResponse = SelectPackingSlipIdClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var SelectPackingSlipIdClientRequest = (function (_super) {
        __extends(SelectPackingSlipIdClientRequest, _super);
        function SelectPackingSlipIdClientRequest(salesId, packingSlipsData, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.salesId = salesId;
            _this.packingSlipsData = packingSlipsData;
            return _this;
        }
        return SelectPackingSlipIdClientRequest;
    }(Commerce.ClientRequest));
    Commerce.SelectPackingSlipIdClientRequest = SelectPackingSlipIdClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        var Globalization;
        (function (Globalization) {
            "use strict";
            var CultureHelper = (function () {
                function CultureHelper() {
                }
                CultureHelper.getLanguageByCode = function (languageCode) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(languageCode)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    languageCode = CultureHelper.normalizeLanguageCode(languageCode);
                    var languageResourceKey = CultureHelper.LANGUAGE_RESOURCE_ID + languageCode;
                    var languageName = Commerce.ViewModelAdapter.getResourceString(languageResourceKey);
                    var isExactLanguageNameFound = !Commerce.StringExtensions.isNullOrWhitespace(languageName) && (languageResourceKey !== languageName);
                    if (isExactLanguageNameFound) {
                        return languageName;
                    }
                    else {
                        var languageSubTag = CultureHelper.getLanguageSubTag(languageCode);
                        var regionSubTag = CultureHelper.getRegionSubTag(languageCode);
                        languageResourceKey = CultureHelper.LANGUAGE_RESOURCE_ID + languageSubTag;
                        languageName = Commerce.ViewModelAdapter.getResourceString(languageResourceKey);
                        var isLanguageNameFound = !Commerce.StringExtensions.isNullOrWhitespace(languageName) && (languageResourceKey !== languageName);
                        var regionResourceKey = CultureHelper.REGION_RESOURCE_ID + regionSubTag;
                        var regionName = Commerce.ViewModelAdapter.getResourceString(regionResourceKey);
                        var isRegionNameFound = !Commerce.StringExtensions.isNullOrWhitespace(regionName) && (regionResourceKey !== regionName);
                        if (isLanguageNameFound && isRegionNameFound) {
                            return Commerce.StringExtensions.format(CultureHelper.DEFAULT_COMPLEX_LANGUAGE_TEMPLATE, languageName, regionName);
                        }
                        else {
                            return languageCode;
                        }
                    }
                };
                CultureHelper.normalizeLanguageCode = function (languageCode) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(languageCode)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    return languageCode
                        .replace(CultureHelper.LANGUAGE_CODE_REGEX, function (s) { return s.toLowerCase(); })
                        .replace(CultureHelper.LANGUAGE_SCRIPT_REGEX, function (s, language, script, rest) {
                        return language + script.charAt(0).toUpperCase() + script.slice(1).toLowerCase() + rest;
                    })
                        .replace(CultureHelper.REGION_CODE_REGEX, function (s) { return s.toUpperCase(); });
                };
                CultureHelper.getLanguageSubTag = function (cultureCode) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(cultureCode)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    var result = cultureCode.match(CultureHelper.LANGUAGE_CODE_REGEX);
                    return Commerce.ArrayExtensions.hasElements(result) ?
                        result[0].replace(CultureHelper.SUBTAG_REGEX, Commerce.StringExtensions.EMPTY) :
                        Commerce.StringExtensions.EMPTY;
                };
                CultureHelper.getRegionSubTag = function (cultureCode) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(cultureCode)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    var result = cultureCode.match(CultureHelper.REGION_CODE_REGEX);
                    return Commerce.ArrayExtensions.hasElements(result) ?
                        result[0].replace(CultureHelper.SUBTAG_REGEX, Commerce.StringExtensions.EMPTY) :
                        Commerce.StringExtensions.EMPTY;
                };
                CultureHelper.overrideDefaultCultureInfo = function () {
                    Globalize.addCultureInfo("en-us", "default", {
                        numberFormat: {
                            currency: {
                                pattern: ["($n)", "$n"]
                            }
                        },
                        calendars: {
                            standard: {
                                patterns: {
                                    d: "MM/dd/yyyy"
                                }
                            }
                        }
                    });
                };
                CultureHelper.LANGUAGE_CODE_REGEX = /^([a-zA-Z]{2,8})(?:-|$)/i;
                CultureHelper.LANGUAGE_SCRIPT_REGEX = /^([a-zA-Z]{2,8}-)([a-zA-Z]{4})(-.+|$)/i;
                CultureHelper.REGION_CODE_REGEX = /-([a-zA-Z]{2}|\d{3})(?:[-]|$)/i;
                CultureHelper.DEFAULT_COMPLEX_LANGUAGE_TEMPLATE = "{0} ({1})";
                CultureHelper.SUBTAG_REGEX = /[-]/g;
                CultureHelper.REGION_RESOURCE_ID = "/territories/";
                CultureHelper.LANGUAGE_RESOURCE_ID = "/languages/";
                return CultureHelper;
            }());
            Globalization.CultureHelper = CultureHelper;
        })(Globalization = Host.Globalization || (Host.Globalization = {}));
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        var Globalization;
        (function (Globalization) {
            "use strict";
            var DateTimeFormat = (function () {
                function DateTimeFormat() {
                }
                DateTimeFormat.DATE_TIME = "datetime";
                DateTimeFormat.SHORT_DATE = "shortdate";
                DateTimeFormat.SHORT_TIME = "shorttime";
                DateTimeFormat.LONG_TIME = "longtime";
                DateTimeFormat.MONTH_FULL = "month.full";
                return DateTimeFormat;
            }());
            Globalization.DateTimeFormat = DateTimeFormat;
        })(Globalization = Host.Globalization || (Host.Globalization = {}));
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        var Globalization;
        (function (Globalization) {
            "use strict";
            var GlobalizationBase = (function () {
                function GlobalizationBase() {
                }
                GlobalizationBase.prototype.getApplicationLanguage = function () {
                    throw "Abstract method. Not implemented";
                };
                GlobalizationBase.prototype.setApplicationLanguageAsync = function (languageTag) {
                    throw "Abstract method. Not implemented";
                };
                GlobalizationBase.prototype.getDefaultLanguageTag = function () {
                    throw "Abstract method. Not implemented";
                };
                GlobalizationBase.prototype.getLanguageByTag = function (languageTag) {
                    var displayName = Commerce.Host.Globalization.CultureHelper.getLanguageByCode(languageTag);
                    return { displayName: displayName };
                };
                GlobalizationBase.prototype.getDateTimeFormatter = function (format) {
                    var currentChannelTimeZone;
                    if (Commerce.ApplicationContext.Instance && Commerce.ApplicationContext.Instance.channelConfiguration) {
                        currentChannelTimeZone = Commerce.ApplicationContext.Instance.channelConfiguration.TimeZoneInfoId;
                    }
                    var cultureName = Commerce.ArrayExtensions.firstOrUndefined([this.getStoreLanguage(), this.getCompanyLanguage(), this.getApplicationLanguage()], function (s) { return !Commerce.StringExtensions.isNullOrWhitespace(s); });
                    return new Globalization.TimeZoneDateTimeFormatter(format, cultureName, currentChannelTimeZone);
                };
                GlobalizationBase.prototype.getDateTimeFormatterWithoutChannelTimeZone = function (format) {
                    var cultureName = Commerce.ArrayExtensions.firstOrUndefined([this.getStoreLanguage(), this.getCompanyLanguage(), this.getApplicationLanguage()], function (s) { return !Commerce.StringExtensions.isNullOrWhitespace(s); });
                    return new Globalization.TimeZoneDateTimeFormatter(format, cultureName, null);
                };
                GlobalizationBase.prototype.getCompanyLanguage = function () {
                    var language;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.channelConfiguration)) {
                        language = Commerce.ApplicationContext.Instance.channelConfiguration.DefaultLanguageId;
                    }
                    return language;
                };
                GlobalizationBase.prototype.getStoreLanguage = function () {
                    var language;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance)
                        && !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration)) {
                        language = Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName;
                    }
                    return language;
                };
                return GlobalizationBase;
            }());
            Globalization.GlobalizationBase = GlobalizationBase;
        })(Globalization = Host.Globalization || (Host.Globalization = {}));
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        "use strict";
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        var Globalization;
        (function (Globalization) {
            "use strict";
            var TimeZoneDateTimeFormatter = (function () {
                function TimeZoneDateTimeFormatter(format, locale, timeZoneId) {
                    this._formatter = this.createGlobalizeFormatter(format);
                    this._locale = locale || Commerce.Host.instance.globalization.getApplicationLanguage();
                    if (!Commerce.StringExtensions.isNullOrWhitespace(this._locale)) {
                        this._locale = this._locale.toLowerCase();
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(timeZoneId)) {
                        timeZoneId = timeZoneId.toUpperCase();
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(TimeZoneDateTimeFormatter._timeZoneMap)) {
                        TimeZoneDateTimeFormatter._timeZoneMap = TimeZoneDateTimeFormatter.getTimezoneMap();
                    }
                    this._timeZone = TimeZoneDateTimeFormatter._timeZoneMap.getItem(timeZoneId);
                    if (!Commerce.StringExtensions.isNullOrWhitespace(timeZoneId) && !TimeZoneDateTimeFormatter._timeZoneMap.hasItem(timeZoneId)) {
                        Commerce.RetailLogger.coreTimezoneMappingNotFound(timeZoneId);
                    }
                }
                TimeZoneDateTimeFormatter.prototype.format = function (value, ianaId) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                        return Commerce.StringExtensions.EMPTY;
                    }
                    var momentDate = moment(value);
                    if (!Commerce.StringExtensions.isNullOrWhitespace(ianaId)) {
                        momentDate = momentDate.tz(ianaId);
                    }
                    else if (this._timeZone) {
                        momentDate = momentDate.tz(this._timeZone.ianaId);
                    }
                    var timezoneDate = new Date(momentDate.year(), momentDate.month(), momentDate.date(), momentDate.hours(), momentDate.minutes(), momentDate.seconds());
                    return this._formatter(timezoneDate);
                };
                TimeZoneDateTimeFormatter.getTimezoneMap = function () {
                    var map = new Commerce.Dictionary();
                    map.setItems([
                        { windowsId: "DATELINE STANDARD TIME", ianaId: "Etc/GMT+12" },
                        { windowsId: "UTC-11", ianaId: "Etc/GMT+11" },
                        { windowsId: "HAWAIIAN STANDARD TIME", ianaId: "Pacific/Honolulu" },
                        { windowsId: "ALASKAN STANDARD TIME", ianaId: "America/Anchorage" },
                        { windowsId: "PACIFIC STANDARD TIME (MEXICO)", ianaId: "America/Santa_Isabel" },
                        { windowsId: "PACIFIC STANDARD TIME", ianaId: "America/Los_Angeles" },
                        { windowsId: "US MOUNTAIN STANDARD TIME", ianaId: "America/Phoenix" },
                        { windowsId: "MOUNTAIN STANDARD TIME (MEXICO)", ianaId: "America/Chihuahua" },
                        { windowsId: "MOUNTAIN STANDARD TIME", ianaId: "America/Denver" },
                        { windowsId: "CENTRAL AMERICA STANDARD TIME", ianaId: "America/Guatemala" },
                        { windowsId: "CENTRAL STANDARD TIME", ianaId: "America/Chicago" },
                        { windowsId: "CENTRAL STANDARD TIME (MEXICO)", ianaId: "America/Mexico_City" },
                        { windowsId: "CANADA CENTRAL STANDARD TIME", ianaId: "America/Regina" },
                        { windowsId: "SA PACIFIC STANDARD TIME", ianaId: "America/Bogota" },
                        { windowsId: "EASTERN STANDARD TIME", ianaId: "America/New_York" },
                        { windowsId: "US EASTERN STANDARD TIME", ianaId: "America/Indiana/Indianapolis" },
                        { windowsId: "VENEZUELA STANDARD TIME", ianaId: "America/Caracas" },
                        { windowsId: "PARAGUAY STANDARD TIME", ianaId: "America/Asuncion" },
                        { windowsId: "ATLANTIC STANDARD TIME", ianaId: "America/Halifax" },
                        { windowsId: "CENTRAL BRAZILIAN STANDARD TIME", ianaId: "America/Cuiaba" },
                        { windowsId: "SA WESTERN STANDARD TIME", ianaId: "America/La_Paz" },
                        { windowsId: "PACIFIC SA STANDARD TIME", ianaId: "America/Santiago" },
                        { windowsId: "NEWFOUNDLAND STANDARD TIME", ianaId: "America/St_Johns" },
                        { windowsId: "E. SOUTH AMERICA STANDARD TIME", ianaId: "America/Sao_Paulo" },
                        { windowsId: "ARGENTINA STANDARD TIME", ianaId: "America/Argentina/Buenos_Aires" },
                        { windowsId: "SA EASTERN STANDARD TIME", ianaId: "America/Cayenne" },
                        { windowsId: "GREENLAND STANDARD TIME", ianaId: "America/Godthab" },
                        { windowsId: "MONTEVIDEO STANDARD TIME", ianaId: "America/Montevideo" },
                        { windowsId: "BAHIA STANDARD TIME", ianaId: "America/Bahia" },
                        { windowsId: "UTC-02", ianaId: "Etc/GMT+2" },
                        { windowsId: "MID-ATLANTIC STANDARD TIME", ianaId: "Etc/GMT+2" },
                        { windowsId: "AZORES STANDARD TIME", ianaId: "Atlantic/Azores" },
                        { windowsId: "CAPE VERDE STANDARD TIME", ianaId: "Atlantic/Cape_Verde" },
                        { windowsId: "MOROCCO STANDARD TIME", ianaId: "Africa/Casablanca" },
                        { windowsId: "UTC", ianaId: "Etc/UTC" },
                        { windowsId: "GMT STANDARD TIME", ianaId: "Europe/London" },
                        { windowsId: "GREENWICH STANDARD TIME", ianaId: "Atlantic/Reykjavik" },
                        { windowsId: "W. EUROPE STANDARD TIME", ianaId: "Europe/Berlin" },
                        { windowsId: "CENTRAL EUROPE STANDARD TIME", ianaId: "Europe/Budapest" },
                        { windowsId: "ROMANCE STANDARD TIME", ianaId: "Europe/Paris" },
                        { windowsId: "CENTRAL EUROPEAN STANDARD TIME", ianaId: "Europe/Warsaw" },
                        { windowsId: "W. CENTRAL AFRICA STANDARD TIME", ianaId: "Africa/Lagos" },
                        { windowsId: "NAMIBIA STANDARD TIME", ianaId: "Africa/Windhoek" },
                        { windowsId: "JORDAN STANDARD TIME", ianaId: "Asia/Amman" },
                        { windowsId: "GTB STANDARD TIME", ianaId: "Europe/Bucharest" },
                        { windowsId: "MIDDLE EAST STANDARD TIME", ianaId: "Asia/Beirut" },
                        { windowsId: "EGYPT STANDARD TIME", ianaId: "Africa/Cairo" },
                        { windowsId: "SYRIA STANDARD TIME", ianaId: "Asia/Damascus" },
                        { windowsId: "E. EUROPE STANDARD TIME", ianaId: "Europe/Istanbul" },
                        { windowsId: "SOUTH AFRICA STANDARD TIME", ianaId: "Africa/Johannesburg" },
                        { windowsId: "FLE STANDARD TIME", ianaId: "Europe/Kiev" },
                        { windowsId: "TURKEY STANDARD TIME", ianaId: "Europe/Istanbul" },
                        { windowsId: "ISRAEL STANDARD TIME", ianaId: "Asia/Jerusalem" },
                        { windowsId: "KALININGRAD STANDARD TIME", ianaId: "Europe/Kaliningrad" },
                        { windowsId: "LIBYA STANDARD TIME", ianaId: "Africa/Tripoli" },
                        { windowsId: "ARABIC STANDARD TIME", ianaId: "Asia/Baghdad" },
                        { windowsId: "ARAB STANDARD TIME", ianaId: "Asia/Riyadh" },
                        { windowsId: "BELARUS STANDARD TIME", ianaId: "Europe/Moscow" },
                        { windowsId: "RUSSIAN STANDARD TIME", ianaId: "Europe/Moscow" },
                        { windowsId: "E. AFRICA STANDARD TIME", ianaId: "Africa/Nairobi" },
                        { windowsId: "IRAN STANDARD TIME", ianaId: "Asia/Tehran" },
                        { windowsId: "ARABIAN STANDARD TIME", ianaId: "Asia/Dubai" },
                        { windowsId: "AZERBAIJAN STANDARD TIME", ianaId: "Asia/Baku" },
                        { windowsId: "RUSSIA TIME ZONE 3", ianaId: "Asia/Baku" },
                        { windowsId: "MAURITIUS STANDARD TIME", ianaId: "Indian/Mauritius" },
                        { windowsId: "GEORGIAN STANDARD TIME", ianaId: "Asia/Tbilisi" },
                        { windowsId: "ARMENIAN STANDARD TIME", ianaId: "Asia/Yerevan" },
                        { windowsId: "CAUCASUS STANDARD TIME", ianaId: "Asia/Yerevan" },
                        { windowsId: "AFGHANISTAN STANDARD TIME", ianaId: "Asia/Kabul" },
                        { windowsId: "WEST ASIA STANDARD TIME", ianaId: "Asia/Tashkent" },
                        { windowsId: "EKATERINBURG STANDARD TIME", ianaId: "Asia/Yekaterinburg" },
                        { windowsId: "PAKISTAN STANDARD TIME", ianaId: "Asia/Karachi" },
                        { windowsId: "INDIA STANDARD TIME", ianaId: "Asia/Kolkata" },
                        { windowsId: "SRI LANKA STANDARD TIME", ianaId: "Asia/Colombo" },
                        { windowsId: "NEPAL STANDARD TIME", ianaId: "Asia/Kathmandu" },
                        { windowsId: "CENTRAL ASIA STANDARD TIME", ianaId: "Asia/Almaty" },
                        { windowsId: "BANGLADESH STANDARD TIME", ianaId: "Asia/Dhaka" },
                        { windowsId: "N. CENTRAL ASIA STANDARD TIME", ianaId: "Asia/Novosibirsk" },
                        { windowsId: "MYANMAR STANDARD TIME", ianaId: "Asia/Rangoon" },
                        { windowsId: "SE ASIA STANDARD TIME", ianaId: "Asia/Bangkok" },
                        { windowsId: "NORTH ASIA STANDARD TIME", ianaId: "Asia/Krasnoyarsk" },
                        { windowsId: "CHINA STANDARD TIME", ianaId: "Asia/Shanghai" },
                        { windowsId: "NORTH ASIA EAST STANDARD TIME", ianaId: "Asia/Irkutsk" },
                        { windowsId: "SINGAPORE STANDARD TIME", ianaId: "Asia/Singapore" },
                        { windowsId: "W. AUSTRALIA STANDARD TIME", ianaId: "Australia/Perth" },
                        { windowsId: "TAIPEI STANDARD TIME", ianaId: "Asia/Taipei" },
                        { windowsId: "ULAANBAATAR STANDARD TIME", ianaId: "Asia/Ulaanbaatar" },
                        { windowsId: "TOKYO STANDARD TIME", ianaId: "Asia/Tokyo" },
                        { windowsId: "KOREA STANDARD TIME", ianaId: "Asia/Seoul" },
                        { windowsId: "YAKUTSK STANDARD TIME", ianaId: "Asia/Yakutsk" },
                        { windowsId: "CEN. AUSTRALIA STANDARD TIME", ianaId: "Australia/Adelaide" },
                        { windowsId: "AUS CENTRAL STANDARD TIME", ianaId: "Australia/Darwin" },
                        { windowsId: "E. AUSTRALIA STANDARD TIME", ianaId: "Australia/Brisbane" },
                        { windowsId: "AUS EASTERN STANDARD TIME", ianaId: "Australia/Sydney" },
                        { windowsId: "WEST PACIFIC STANDARD TIME", ianaId: "Pacific/Port_Moresby" },
                        { windowsId: "TASMANIA STANDARD TIME", ianaId: "Australia/Hobart" },
                        { windowsId: "MAGADAN STANDARD TIME", ianaId: "Asia/Magadan" },
                        { windowsId: "VLADIVOSTOK STANDARD TIME", ianaId: "Asia/Vladivostok" },
                        { windowsId: "RUSSIA TIME ZONE 10", ianaId: "Pacific/Guadalcanal" },
                        { windowsId: "CENTRAL PACIFIC STANDARD TIME", ianaId: "Pacific/Guadalcanal" },
                        { windowsId: "RUSSIA TIME ZONE 11", ianaId: "Pacific/Auckland" },
                        { windowsId: "NEW ZEALAND STANDARD TIME", ianaId: "Pacific/Auckland" },
                        { windowsId: "UTC+12", ianaId: "Etc/GMT-12" },
                        { windowsId: "FIJI STANDARD TIME", ianaId: "Pacific/Fiji" },
                        { windowsId: "KAMCHATKA STANDARD TIME", ianaId: "Etc/GMT-12" },
                        { windowsId: "TONGA STANDARD TIME", ianaId: "Pacific/Tongatapu" },
                        { windowsId: "SAMOA STANDARD TIME", ianaId: "Pacific/Apia" },
                        { windowsId: "LINE ISLANDS STANDARD TIME", ianaId: "Pacific/Kiritimati" }
                    ], function (mapItem) { return mapItem.windowsId; });
                    return map;
                };
                TimeZoneDateTimeFormatter.prototype.createGlobalizeFormatter = function (format) {
                    var _this = this;
                    switch (format) {
                        case Globalization.DateTimeFormat.SHORT_DATE:
                            return function (date) {
                                return Globalize.format(date, "d", _this._locale);
                            };
                        case Globalization.DateTimeFormat.DATE_TIME:
                            return function (date) {
                                return Commerce.StringExtensions.format("{0} {1}", Globalize.format(date, "d", _this._locale), Globalize.format(date, "t", _this._locale));
                            };
                        case Globalization.DateTimeFormat.SHORT_TIME:
                            return function (date) {
                                return Globalize.format(date, "t", _this._locale);
                            };
                        case Globalization.DateTimeFormat.LONG_TIME:
                            return function (date) {
                                return Globalize.format(date, "T", _this._locale);
                            };
                        case Globalization.DateTimeFormat.MONTH_FULL:
                            return function (date) {
                                return Globalize.format(date, "MMMM", _this._locale);
                            };
                        default:
                            throw new Error("The format is not supported.");
                    }
                };
                TimeZoneDateTimeFormatter._timeZoneMap = null;
                return TimeZoneDateTimeFormatter;
            }());
            Globalization.TimeZoneDateTimeFormatter = TimeZoneDateTimeFormatter;
        })(Globalization = Host.Globalization || (Host.Globalization = {}));
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        var Messages;
        (function (Messages) {
            "use strict";
            var UpdateTelemetryOnHostResponse = (function (_super) {
                __extends(UpdateTelemetryOnHostResponse, _super);
                function UpdateTelemetryOnHostResponse(statusText) {
                    var _this = _super.call(this) || this;
                    _this.statusText = statusText;
                    return _this;
                }
                return UpdateTelemetryOnHostResponse;
            }(Commerce.Response));
            Messages.UpdateTelemetryOnHostResponse = UpdateTelemetryOnHostResponse;
        })(Messages = Host.Messages || (Host.Messages = {}));
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Host;
    (function (Host) {
        var Messages;
        (function (Messages) {
            "use strict";
            var UpdateTelemetryOnHostRequest = (function (_super) {
                __extends(UpdateTelemetryOnHostRequest, _super);
                function UpdateTelemetryOnHostRequest(correlationId, environmentId, instrumentationKey) {
                    var _this = _super.call(this, correlationId) || this;
                    _this.environmentId = environmentId;
                    _this.instrumentationKey = instrumentationKey;
                    return _this;
                }
                return UpdateTelemetryOnHostRequest;
            }(Commerce.Request));
            Messages.UpdateTelemetryOnHostRequest = UpdateTelemetryOnHostRequest;
        })(Messages = Host.Messages || (Host.Messages = {}));
    })(Host = Commerce.Host || (Commerce.Host = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
            var HttpHeaders = (function () {
                function HttpHeaders() {
                }
                HttpHeaders.CONTENT_TYPE = "Content-Type";
                return HttpHeaders;
            }());
            Common.HttpHeaders = HttpHeaders;
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
            var HttpStatusCodes = (function () {
                function HttpStatusCodes() {
                }
                HttpStatusCodes.isSuccessful = function (statucCode) {
                    return statucCode >= HttpStatusCodes.OK && statucCode <= 299;
                };
                HttpStatusCodes.OK = 200;
                HttpStatusCodes.NO_CONTENT = 204;
                return HttpStatusCodes;
            }());
            Common.HttpStatusCodes = HttpStatusCodes;
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
            var HttpVerbs = (function () {
                function HttpVerbs() {
                }
                HttpVerbs.GET = "GET";
                HttpVerbs.POST = "POST";
                HttpVerbs.PATCH = "PATCH";
                HttpVerbs.DELETE = "DELETE";
                return HttpVerbs;
            }());
            Common.HttpVerbs = HttpVerbs;
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
            var MimeTypes = (function () {
                function MimeTypes() {
                }
                MimeTypes.areSame = function (type1, type2) {
                    return Commerce.StringExtensions.compare(type1, type2, true) === 0;
                };
                MimeTypes.APPLICATION_JSON = "application/json";
                return MimeTypes;
            }());
            Common.MimeTypes = MimeTypes;
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
            var XmlHttpRequestFactory = (function () {
                function XmlHttpRequestFactory() {
                }
                XmlHttpRequestFactory.getXmlHttpRequestClass = function () {
                    return new XMLHttpRequest();
                };
                XmlHttpRequestFactory.getXmlHttpRequest = function () {
                    return XmlHttpRequestFactory.getXmlHttpRequestClass();
                };
                return XmlHttpRequestFactory;
            }());
            Common.XmlHttpRequestFactory = XmlHttpRequestFactory;
            var XmlHttpRequestHelper = (function () {
                function XmlHttpRequestHelper() {
                }
                XmlHttpRequestHelper.SetupAjaxParameters = function () {
                    $.support.cors = true;
                    $.ajaxSetup({
                        cache: true
                    });
                };
                XmlHttpRequestHelper.parseXmlHttpResponseHeaders = function (headerString) {
                    var responseHeaders = (headerString || "").split(/\r?\n/);
                    var headers = {};
                    responseHeaders.forEach(function (value) {
                        if (value) {
                            var pair = value.split(": ");
                            headers[pair[0]] = pair[1];
                        }
                    });
                    return headers;
                };
                XmlHttpRequestHelper.executeRequest = function (request, success, error) {
                    var xhr = XmlHttpRequestFactory.getXmlHttpRequest();
                    xhr.ontimeout = function () {
                        if (xhr != null) {
                            xhr.abort();
                            xhr = null;
                            var statusText = "Request Timeout";
                            var response = {
                                requestUri: request.requestUri,
                                statusCode: 408,
                                statusText: statusText,
                                headers: {},
                                body: ""
                            };
                            var errorResult = {
                                message: statusText,
                                request: request,
                                response: response
                            };
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(request.headers)) {
                                var requestId = request.headers[XmlHttpRequestHelper.REQUEST_ID_HEADER_NAME];
                                Commerce.RetailLogger.coreLogXmlHttpRequestTimeout(request.requestUri, requestId);
                            }
                            error(errorResult);
                        }
                    };
                    xhr.onloadend = function () {
                        if (xhr === null) {
                            return;
                        }
                        var response = XmlHttpRequestHelper.getResponse(request, xhr);
                        xhr = null;
                        if (Common.HttpStatusCodes.isSuccessful(response.statusCode)) {
                            success(response);
                        }
                        else {
                            var errorResult = {
                                message: response.statusText,
                                request: request,
                                response: response
                            };
                            error(errorResult);
                        }
                    };
                    try {
                        xhr.open(request.method || "GET", request.requestUri, true);
                    }
                    catch (exception) {
                        var errorResult = {
                            message: XmlHttpRequestHelper.getErrorMessage(exception),
                            request: request,
                            response: XmlHttpRequestHelper.getResponse(request, xhr)
                        };
                        error(errorResult);
                        return;
                    }
                    xhr.withCredentials = request.useCrossDomainCookies || false;
                    if (request.headers) {
                        Commerce.ObjectExtensions.forEachKeyValuePair(request.headers, function (headerName, headerValue) {
                            xhr.setRequestHeader(headerName, headerValue);
                        });
                    }
                    if (Commerce.Config.connectionTimeout > 0) {
                        xhr.timeout = Commerce.Config.connectionTimeout * 1000;
                    }
                    try {
                        xhr.send(request.body);
                    }
                    catch (error) {
                        Commerce.RetailLogger.coreLogXmlHttpRequestError(request.requestUri, XmlHttpRequestHelper.getErrorMessage(error));
                    }
                };
                XmlHttpRequestHelper.SetupODataParameters = function () {
                    OData.jsonHandler.accept = "application/json;odata=nometadata";
                    OData.defaultHttpClient = {
                        request: XmlHttpRequestHelper.executeRequest
                    };
                };
                XmlHttpRequestHelper.getErrorMessage = function (error) {
                    var errorMessage = "Failed to send http request.";
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(error) && !Commerce.ObjectExtensions.isNullOrUndefined(error.message)) {
                        errorMessage = error.message;
                    }
                    return errorMessage;
                };
                XmlHttpRequestHelper.getResponse = function (request, xhr) {
                    var statusText = xhr.statusText;
                    var statusCode = xhr.status;
                    if (statusCode === 1223) {
                        statusCode = Commerce.Proxy.Common.HttpStatusCodes.NO_CONTENT;
                        statusText = "No Content";
                    }
                    return {
                        requestUri: request.requestUri,
                        statusCode: statusCode,
                        statusText: statusText,
                        headers: XmlHttpRequestHelper.parseXmlHttpResponseHeaders(xhr.getAllResponseHeaders()),
                        body: xhr.responseText
                    };
                };
                XmlHttpRequestHelper.REQUEST_ID_HEADER_NAME = "RequestId";
                return XmlHttpRequestHelper;
            }());
            Common.XmlHttpRequestHelper = XmlHttpRequestHelper;
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Context;
        (function (Context) {
            var CommerceAuthenticationContext = (function () {
                function CommerceAuthenticationContext(requestFactory) {
                    this.requestFactory = requestFactory;
                }
                Object.defineProperty(CommerceAuthenticationContext.prototype, "locale", {
                    get: function () {
                        return "";
                    },
                    enumerable: true,
                    configurable: true
                });
                CommerceAuthenticationContext.prototype.token = function (logonRequest) {
                    return this.createRequest("token", logonRequest);
                };
                CommerceAuthenticationContext.prototype.enrollUserCredentials = function (request) {
                    return this.createRequest("enrollUserCredentials", request, Proxy.Common.MimeTypes.APPLICATION_JSON);
                };
                CommerceAuthenticationContext.prototype.disenrollUserCredentials = function (request) {
                    return this.createRequest("unenrollUserCredentials", request, Proxy.Common.MimeTypes.APPLICATION_JSON);
                };
                CommerceAuthenticationContext.prototype.changePassword = function (request) {
                    return this.createRequest("changePassword", request, Proxy.Common.MimeTypes.APPLICATION_JSON);
                };
                CommerceAuthenticationContext.prototype.resetPassword = function (request) {
                    return this.createRequest("resetPassword", request, Proxy.Common.MimeTypes.APPLICATION_JSON);
                };
                CommerceAuthenticationContext.prototype.createRequest = function (action, data, dataType) {
                    var query = {
                        entityType: "Authentication",
                        action: action,
                        data: data,
                        dataType: dataType
                    };
                    return this.requestFactory.create(query);
                };
                return CommerceAuthenticationContext;
            }());
            Context.CommerceAuthenticationContext = CommerceAuthenticationContext;
        })(Context = Proxy.Context || (Proxy.Context = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var DataServiceQuery = Proxy.Common.DataServiceQuery;
        var ODataOperationParameters = Proxy.Common.ODataOperationParameters;
        var CommerceContext = (function () {
            function CommerceContext(dataServiceRequestFactory) {
                this._dataServiceRequestFactory = dataServiceRequestFactory;
            }
            Object.defineProperty(CommerceContext.prototype, "dataServiceRequestFactory", {
                get: function () {
                    return this._dataServiceRequestFactory;
                },
                set: function (dataServiceRequestFactory) {
                    this._dataServiceRequestFactory = dataServiceRequestFactory;
                },
                enumerable: true,
                configurable: true
            });
            CommerceContext.prototype.storeOperations = function () {
                return new StoreOperationsDataServiceQuery(this._dataServiceRequestFactory);
            };
            CommerceContext.prototype.categories = function (recordId) {
                var key = (recordId) ? { RecordId: recordId } : null;
                return new CategoriesDataServiceQuery(this._dataServiceRequestFactory, "Categories", "Category", Proxy.Entities.CategoryClass, key);
            };
            CommerceContext.prototype.carts = function (id) {
                var key = (id) ? { Id: id } : null;
                return new CartsDataServiceQuery(this._dataServiceRequestFactory, "Carts", "Cart", Proxy.Entities.CartClass, key);
            };
            CommerceContext.prototype.customers = function (accountNumber) {
                var key = (accountNumber) ? { AccountNumber: accountNumber } : null;
                return new CustomersDataServiceQuery(this._dataServiceRequestFactory, "Customers", "Customer", Proxy.Entities.CustomerClass, key);
            };
            CommerceContext.prototype.employees = function (staffId) {
                var key = (staffId) ? { StaffId: staffId } : null;
                return new EmployeesDataServiceQuery(this._dataServiceRequestFactory, "Employees", "Employee", Proxy.Entities.EmployeeClass, key);
            };
            CommerceContext.prototype.salesOrders = function (id) {
                var key = (id) ? { Id: id } : null;
                return new SalesOrdersDataServiceQuery(this._dataServiceRequestFactory, "SalesOrders", "SalesOrder", Proxy.Entities.SalesOrderClass, key);
            };
            CommerceContext.prototype.shifts = function (shiftId, terminalId) {
                var key = (shiftId && terminalId) ? { ShiftId: shiftId, TerminalId: terminalId } : null;
                return new ShiftsDataServiceQuery(this._dataServiceRequestFactory, "Shifts", "Shift", Proxy.Entities.ShiftClass, key);
            };
            CommerceContext.prototype.stockCountJournals = function (journalId) {
                var key = (journalId) ? { JournalId: journalId } : null;
                return new StockCountJournalsDataServiceQuery(this._dataServiceRequestFactory, "StockCountJournals", "StockCountJournal", Proxy.Entities.StockCountJournalClass, key);
            };
            CommerceContext.prototype.orgUnits = function (orgUnitNumber) {
                var key = (orgUnitNumber) ? { OrgUnitNumber: orgUnitNumber } : null;
                return new OrgUnitsDataServiceQuery(this._dataServiceRequestFactory, "OrgUnits", "OrgUnit", Proxy.Entities.OrgUnitClass, key);
            };
            CommerceContext.prototype.products = function (recordId) {
                var key = (recordId) ? { RecordId: recordId } : null;
                return new ProductsDataServiceQuery(this._dataServiceRequestFactory, "Products", "Product", Proxy.Entities.ProductClass, key);
            };
            CommerceContext.prototype.catalogs = function (recordId) {
                var key = (recordId) ? { RecordId: recordId } : null;
                return new CatalogsDataServiceQuery(this._dataServiceRequestFactory, "Catalogs", "ProductCatalog", Proxy.Entities.ProductCatalogClass, key);
            };
            CommerceContext.prototype.commerceLists = function (id) {
                var key = (id) ? { Id: id } : null;
                return new CommerceListsDataServiceQuery(this._dataServiceRequestFactory, "CommerceLists", "CommerceList", Proxy.Entities.CommerceListClass, key);
            };
            CommerceContext.prototype.transferOrders = function (orderId) {
                var key = (orderId) ? { OrderId: orderId } : null;
                return new TransferOrdersDataServiceQuery(this._dataServiceRequestFactory, "TransferOrders", "TransferOrder", Proxy.Entities.TransferOrderClass, key);
            };
            CommerceContext.prototype.purchaseOrders = function (orderId) {
                var key = (orderId) ? { OrderId: orderId } : null;
                return new PurchaseOrdersDataServiceQuery(this._dataServiceRequestFactory, "PurchaseOrders", "PurchaseOrder", Proxy.Entities.PurchaseOrderClass, key);
            };
            CommerceContext.prototype.pickingLists = function (orderId) {
                var key = (orderId) ? { OrderId: orderId } : null;
                return new PickingListsDataServiceQuery(this._dataServiceRequestFactory, "PickingLists", "PickingList", Proxy.Entities.PickingListClass, key);
            };
            CommerceContext.prototype.warehouses = function (inventLocation) {
                var key = (inventLocation) ? { InventLocation: inventLocation } : null;
                return new WarehousesDataServiceQuery(this._dataServiceRequestFactory, "Warehouses", "Warehouse", Proxy.Entities.WarehouseClass, key);
            };
            CommerceContext.prototype.scanResults = function (scannedText) {
                var key = (scannedText) ? { ScannedText: scannedText } : null;
                return new DataServiceQuery(this._dataServiceRequestFactory, "ScanResults", "ScanResult", Proxy.Entities.ScanResultClass, key);
            };
            CommerceContext.prototype.orderShipments = function (salesId) {
                var key = (salesId) ? { SalesId: salesId } : null;
                return new DataServiceQuery(this._dataServiceRequestFactory, "OrderShipments", "OrderShipments", Proxy.Entities.OrderShipmentsClass, key);
            };
            CommerceContext.prototype.suspendedCarts = function (id) {
                var key = (id) ? { Id: id } : null;
                return new SuspendedCartsDataServiceQuery(this._dataServiceRequestFactory, "SuspendedCarts", "SuspendedCart", Proxy.Entities.SuspendedCartClass, key);
            };
            CommerceContext.ApiVersion = "7.3";
            CommerceContext.DoNotLogTransactionId = "-1";
            return CommerceContext;
        }());
        Proxy.CommerceContext = CommerceContext;
        var StoreOperationsDataServiceQuery = (function (_super) {
            __extends(StoreOperationsDataServiceQuery, _super);
            function StoreOperationsDataServiceQuery(dataServiceRequestFactory) {
                return _super.call(this, dataServiceRequestFactory) || this;
            }
            StoreOperationsDataServiceQuery.prototype.roundAmountByTenderType = function (amount, tenderTypeId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { amount: amount, tenderTypeId: tenderTypeId };
                return this.createDataServiceRequestForOperation('RoundAmountByTenderType', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.voidSuspendedTransactions = function (suspendedCartIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { suspendedCartIds: suspendedCartIds };
                return this.createDataServiceRequestForOperation('VoidSuspendedTransactions', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getMerchantPropertiesByServiceAccountId = function (serviceAccountIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { serviceAccountIds: serviceAccountIds };
                return this.createDataServiceRequestForOperation('GetMerchantPropertiesByServiceAccountId', true, Proxy.Entities.PaymentMerchantInformationClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getStoreSafes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetStoreSafes', true, Proxy.Entities.StoreSafeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getShiftReconciliationLines = function (shiftReconciliationLineRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftReconciliationLineRetrievalCriteria: shiftReconciliationLineRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetShiftReconciliationLines', true, Proxy.Entities.ShiftReconciliationLineClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.reconcileLines = function (shiftReconciliationLines, Description) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftReconciliationLines: shiftReconciliationLines, Description: Description };
                return this.createDataServiceRequestForOperation('ReconcileLines', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.undoReconciliation = function (shiftReconciliationLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftReconciliationLines: shiftReconciliationLines };
                return this.createDataServiceRequestForOperation('UndoReconciliation', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReceiptMasks = function (receiptTransactionType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptTransactionType: receiptTransactionType };
                return this.createDataServiceRequestForOperation('GetReceiptMasks', true, Proxy.Entities.ReceiptMaskClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.startSession = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('StartSession', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.endSession = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('EndSession', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.activateDevice = function (deviceNumber, terminalId, deviceId, forceActivate, deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceNumber: deviceNumber, terminalId: terminalId, deviceId: deviceId, forceActivate: forceActivate, deviceType: deviceType };
                return this.createDataServiceRequestForOperation('ActivateDevice', true, Proxy.Entities.DeviceActivationResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.massActivateDevice = function (deviceNumber, terminalId, deviceId, deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceNumber: deviceNumber, terminalId: terminalId, deviceId: deviceId, deviceType: deviceType };
                return this.createDataServiceRequestForOperation('MassActivateDevice', true, Proxy.Entities.DeviceActivationResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.deactivateDevice = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('DeactivateDevice', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.createHardwareStationToken = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('CreateHardwareStationToken', true, Proxy.Entities.CreateHardwareStationTokenResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.validateHardwareStationToken = function (deviceNumber, hardwareStationToken) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceNumber: deviceNumber, hardwareStationToken: hardwareStationToken };
                return this.createDataServiceRequestForOperation('ValidateHardwareStationToken', true, Proxy.Entities.ValidateHardwareStationTokenResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getBarcodeById = function (barcodeId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { barcodeId: barcodeId };
                return this.createDataServiceRequestForOperation('GetBarcodeById', true, Proxy.Entities.BarcodeClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGridById = function (buttonGridId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { buttonGridId: buttonGridId };
                return this.createDataServiceRequestForOperation('GetButtonGridById', true, Proxy.Entities.ButtonGridClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGridsByIds = function (getButtonGridsByIdsCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { getButtonGridsByIdsCriteria: getButtonGridsByIdsCriteria };
                return this.createDataServiceRequestForOperation('GetButtonGridsByIds', true, Proxy.Entities.ButtonGridClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCardTypes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCardTypes', true, Proxy.Entities.CardTypeInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getSupportedPaymentCardTypes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetSupportedPaymentCardTypes', true, '', 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCities = function (countryRegionId, stateProvinceId, countyId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId };
                return this.createDataServiceRequestForOperation('GetCities', true, Proxy.Entities.CityInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCountryRegionsByLanguageId = function (languageId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { languageId: languageId };
                return this.createDataServiceRequestForOperation('GetCountryRegionsByLanguageId', true, Proxy.Entities.CountryRegionInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCounties = function (countryRegionId, stateProvinceId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId };
                return this.createDataServiceRequestForOperation('GetCounties', true, Proxy.Entities.CountyInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCreditMemoById = function (creditMemoId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { creditMemoId: creditMemoId };
                return this.createDataServiceRequestForOperation('GetCreditMemoById', true, Proxy.Entities.CreditMemoClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDownloadInterval = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetDownloadInterval', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getTerminalDataStoreName = function (terminalId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { terminalId: terminalId };
                return this.createDataServiceRequestForOperation('GetTerminalDataStoreName', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDownloadLink = function (dataStoreName, downloadSessionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName, downloadSessionId: downloadSessionId };
                return this.createDataServiceRequestForOperation('GetDownloadLink', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDownloadSessions = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetDownloadSessions', true, Proxy.Entities.DownloadSessionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getInitialDownloadSessions = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetInitialDownloadSessions', true, Proxy.Entities.DownloadSessionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getUploadJobDefinitions = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetUploadJobDefinitions', true, '', 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getUploadInterval = function (dataStoreName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dataStoreName: dataStoreName };
                return this.createDataServiceRequestForOperation('GetUploadInterval', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.postOfflineTransactions = function (offlineTransactionForMPOS) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { offlineTransactionForMPOS: offlineTransactionForMPOS };
                return this.createDataServiceRequestForOperation('PostOfflineTransactions', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getRetailTrialPlanOffer = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetRetailTrialPlanOffer', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLatestNumberSequence = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLatestNumberSequence', true, Proxy.Entities.NumberSequenceSeedDataClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLoyaltyRewardPointActivityTimeline = function (cardNumber, rewardPointId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardNumber: cardNumber, rewardPointId: rewardPointId };
                return this.createDataServiceRequestForOperation('GetLoyaltyRewardPointActivityTimeline', true, Proxy.Entities.LoyaltyRewardPointActivityClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLoyaltyRewardPointActivityTimelineForExpiredPoints = function (cardNumber, rewardPointId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardNumber: cardNumber, rewardPointId: rewardPointId };
                return this.createDataServiceRequestForOperation('GetLoyaltyRewardPointActivityTimelineForExpiredPoints', true, Proxy.Entities.LoyaltyRewardPointActivityClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.calculateTotalCurrencyAmount = function (currenciesAmount) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { currenciesAmount: currenciesAmount };
                return this.createDataServiceRequestForOperation('CalculateTotalCurrencyAmount', true, Proxy.Entities.CurrencyAmountClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCode = function (discountCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { discountCode: discountCode };
                return this.createDataServiceRequestForOperation('GetDiscountCode', true, Proxy.Entities.DiscountCodeClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCodesByOfferId = function (offerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { offerId: offerId };
                return this.createDataServiceRequestForOperation('GetDiscountCodesByOfferId', true, Proxy.Entities.DiscountCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCodesByKeyword = function (keyword, activeDate) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { keyword: keyword, activeDate: activeDate };
                return this.createDataServiceRequestForOperation('GetDiscountCodesByKeyword', true, Proxy.Entities.DiscountCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDistricts = function (countryRegionId, stateProvinceId, countyId, cityName) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId, cityName: cityName };
                return this.createDataServiceRequestForOperation('GetDistricts', true, Proxy.Entities.DistrictInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getHardwareStationProfiles = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetHardwareStationProfiles', true, Proxy.Entities.HardwareStationProfileClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getHardwareProfileById = function (hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetHardwareProfileById', true, Proxy.Entities.HardwareProfileClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLocalizedStrings = function (languageId, textId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { languageId: languageId, textId: textId };
                return this.createDataServiceRequestForOperation('GetLocalizedStrings', true, Proxy.Entities.LocalizedStringClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOperationPermissionById = function (operationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { operationId: operationId };
                return this.createDataServiceRequestForOperation('GetOperationPermissionById', true, Proxy.Entities.OperationPermissionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReasonCodesById = function (reasonCodeGroupId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reasonCodeGroupId: reasonCodeGroupId };
                return this.createDataServiceRequestForOperation('GetReasonCodesById', true, Proxy.Entities.ReasonCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.searchReportDataSet = function (reportId, parameters) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reportId: reportId, parameters: parameters };
                return this.createDataServiceRequestForOperation('SearchReportDataSet', true, Proxy.Entities.ReportDataSetClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReportDataSetById = function (reportId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reportId: reportId };
                return this.createDataServiceRequestForOperation('GetReportDataSetById', true, Proxy.Entities.ReportDataSetClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getSrsReportDataSet = function (reportId, parameters) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reportId: reportId, parameters: parameters };
                return this.createDataServiceRequestForOperation('GetSrsReportDataSet', true, Proxy.Entities.ReportDataSetClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getIncomeExpenseAccounts = function (incomeExpenseAccountType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { incomeExpenseAccountType: incomeExpenseAccountType };
                return this.createDataServiceRequestForOperation('GetIncomeExpenseAccounts', true, Proxy.Entities.IncomeExpenseAccountClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getStateProvinces = function (countryRegionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId };
                return this.createDataServiceRequestForOperation('GetStateProvinces', true, Proxy.Entities.StateProvinceInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getZipCodes = function (countryRegionId, stateProvinceId, countyId, cityName, district) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, stateProvinceId: stateProvinceId, countyId: countyId, cityName: cityName, district: district };
                return this.createDataServiceRequestForOperation('GetZipCodes', true, Proxy.Entities.ZipCodeInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAddressFromZipCode = function (countryRegionId, zipPostalCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { countryRegionId: countryRegionId, zipPostalCode: zipPostalCode };
                return this.createDataServiceRequestForOperation('GetAddressFromZipCode', true, Proxy.Entities.ZipCodeInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.disassembleKitTransactions = function (kitTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { kitTransaction: kitTransaction };
                return this.createDataServiceRequestForOperation('DisassembleKitTransactions', true, Proxy.Entities.KitTransactionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.issueLoyaltyCard = function (loyaltyCard) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { loyaltyCard: loyaltyCard };
                return this.createDataServiceRequestForOperation('IssueLoyaltyCard', true, Proxy.Entities.LoyaltyCardClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLoyaltyCard = function (cardNumber) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardNumber: cardNumber };
                return this.createDataServiceRequestForOperation('GetLoyaltyCard', true, Proxy.Entities.LoyaltyCardClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCustomerLoyaltyCards = function (accountNumber) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { accountNumber: accountNumber };
                return this.createDataServiceRequestForOperation('GetCustomerLoyaltyCards', true, Proxy.Entities.LoyaltyCardClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLoyaltyCardTransactions = function (cardNumber, rewardPointId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardNumber: cardNumber, rewardPointId: rewardPointId };
                return this.createDataServiceRequestForOperation('GetLoyaltyCardTransactions', true, Proxy.Entities.LoyaltyCardTransactionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLoyaltyRewardPointsExpiringSoon = function (cardNumber, rewardPointId, daysToExpiry) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardNumber: cardNumber, rewardPointId: rewardPointId, daysToExpiry: daysToExpiry };
                return this.createDataServiceRequestForOperation('GetLoyaltyRewardPointsExpiringSoon', true, Proxy.Entities.LoyaltyRewardPointActivityClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.searchJournalTransactions = function (searchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { searchCriteria: searchCriteria };
                return this.createDataServiceRequestForOperation('SearchJournalTransactions', true, Proxy.Entities.TransactionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getGiftCard = function (giftCardId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId };
                return this.createDataServiceRequestForOperation('GetGiftCard', true, Proxy.Entities.GiftCardClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getGiftCardInquiry = function (giftCardId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId };
                return this.createDataServiceRequestForOperation('GetGiftCardInquiry', true, Proxy.Entities.GiftCardClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getNonSalesTransactions = function (shiftId, shiftTerminalId, nonSalesTenderTypeValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftId: shiftId, shiftTerminalId: shiftTerminalId, nonSalesTenderTypeValue: nonSalesTenderTypeValue };
                return this.createDataServiceRequestForOperation('GetNonSalesTransactions', true, Proxy.Entities.NonSalesTransactionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.createNonSalesTransaction = function (nonSalesTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { nonSalesTransaction: nonSalesTransaction };
                return this.createDataServiceRequestForOperation('CreateNonSalesTransaction', true, Proxy.Entities.NonSalesTransactionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.createDropAndDeclareTransaction = function (dropAndDeclareTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { dropAndDeclareTransaction: dropAndDeclareTransaction };
                return this.createDataServiceRequestForOperation('CreateDropAndDeclareTransaction', true, Proxy.Entities.DropAndDeclareTransactionClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getTaxOverrides = function (overrideBy) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { overrideBy: overrideBy };
                return this.createDataServiceRequestForOperation('GetTaxOverrides', true, Proxy.Entities.TaxOverrideClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCustomerBalance = function (accountNumber, invoiceAccountNumber) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { accountNumber: accountNumber, invoiceAccountNumber: invoiceAccountNumber };
                return this.createDataServiceRequestForOperation('GetCustomerBalance', true, Proxy.Entities.CustomerBalancesClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.initiateLinkToExistingCustomer = function (email, ActivationToken, emailTemplateId, emailProperties) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { email: email, ActivationToken: ActivationToken, emailTemplateId: emailTemplateId, emailProperties: emailProperties };
                return this.createDataServiceRequestForOperation('InitiateLinkToExistingCustomer', true, Proxy.Entities.LinkToExistingCustomerResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.finalizeLinkToExistingCustomer = function (email, ActivationToken) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { email: email, ActivationToken: ActivationToken };
                return this.createDataServiceRequestForOperation('FinalizeLinkToExistingCustomer', true, Proxy.Entities.LinkToExistingCustomerResultClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.unlinkFromExistingCustomer = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('UnlinkFromExistingCustomer', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOfflineSyncStatus = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOfflineSyncStatus', true, Proxy.Entities.OfflineSyncStatsLineClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOfflinePendingTransactionCount = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOfflinePendingTransactionCount', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.updateDownloadSession = function (downloadSession) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { downloadSession: downloadSession };
                return this.createDataServiceRequestForOperation('UpdateDownloadSession', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.updateApplicationVersion = function (appVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { appVersion: appVersion };
                return this.createDataServiceRequestForOperation('UpdateApplicationVersion', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getStorageAccessTokenForUpload = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetStorageAccessTokenForUpload', true, Proxy.Entities.StorageAccessTokenClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getBusinessProcessModelLibraries = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetBusinessProcessModelLibraries', true, Proxy.Entities.FrameworkClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getBusinessProcessModelLibrary = function (businessProcessModelFrameworkLineId, hierarchyDepth) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { businessProcessModelFrameworkLineId: businessProcessModelFrameworkLineId, hierarchyDepth: hierarchyDepth };
                return this.createDataServiceRequestForOperation('GetBusinessProcessModelLibrary', true, Proxy.Entities.FrameworkClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.searchTaskGuidesByTitle = function (businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { businessProcessModelFrameworkLineId: businessProcessModelFrameworkLineId, taskGuideSearchText: taskGuideSearchText, queryTypeValue: queryTypeValue };
                return this.createDataServiceRequestForOperation('SearchTaskGuidesByTitle', true, Proxy.Entities.TaskGuidesSearchResultClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateBusinessProcessModelPackage = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateBusinessProcessModelPackage', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.downloadRecording = function (businessProcessModelLineId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { businessProcessModelLineId: businessProcessModelLineId };
                return this.createDataServiceRequestForOperation('DownloadRecording', true, Proxy.Entities.RecordingClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.loadRecordingFromFile = function (recordingUrl) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { recordingUrl: recordingUrl };
                return this.createDataServiceRequestForOperation('LoadRecordingFromFile', true, Proxy.Entities.RecordingClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateRecordingFile = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateRecordingFile', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateTrainingDocument = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateTrainingDocument', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.generateRecordingBundle = function (taskRecording) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording };
                return this.createDataServiceRequestForOperation('GenerateRecordingBundle', true, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.uploadRecording = function (taskRecording, businessProcessModelLineId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { taskRecording: taskRecording, businessProcessModelLineId: businessProcessModelLineId };
                return this.createDataServiceRequestForOperation('UploadRecording', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAttributeDefinitions = function (attributeDefinitionCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { attributeDefinitionCriteria: attributeDefinitionCriteria };
                return this.createDataServiceRequestForOperation('GetAttributeDefinitions', true, Proxy.Entities.AttributeDefinitionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAttributeGroupDefinitions = function (attributeGroupDefinitionCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { attributeGroupDefinitionCriteria: attributeGroupDefinitionCriteria };
                return this.createDataServiceRequestForOperation('GetAttributeGroupDefinitions', true, Proxy.Entities.AttributeGroupDefinitionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.saveFiscalTransaction = function (fiscalTransaction) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { fiscalTransaction: fiscalTransaction };
                return this.createDataServiceRequestForOperation('SaveFiscalTransaction', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.validatePrintReceiptCopyAllowed = function (salesOrderToPrint) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesOrderToPrint: salesOrderToPrint };
                return this.createDataServiceRequestForOperation('ValidatePrintReceiptCopyAllowed', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.registerAuditEvent = function (auditEvent) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { auditEvent: auditEvent };
                return this.createDataServiceRequestForOperation('RegisterAuditEvent', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.registerAndGetAuditEvent = function (auditEvent) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { auditEvent: auditEvent };
                return this.createDataServiceRequestForOperation('RegisterAndGetAuditEvent', true, Proxy.Entities.AuditEventClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getInventoryAvailableToPromise = function (productId, itemId, inventLocationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productId: productId, itemId: itemId, inventLocationId: inventLocationId };
                return this.createDataServiceRequestForOperation('GetInventoryAvailableToPromise', true, Proxy.Entities.InventoryAvailableToPromiseClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getSalesOrdersWithNoFiscalTransactions = function (storeNumber, terminalId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { storeNumber: storeNumber, terminalId: terminalId };
                return this.createDataServiceRequestForOperation('GetSalesOrdersWithNoFiscalTransactions', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getNotifications = function (subscribedOperations) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { subscribedOperations: subscribedOperations };
                return this.createDataServiceRequestForOperation('GetNotifications', true, Proxy.Entities.NotificationItemClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.acknowledgeNotifications = function (lastPullDateTime) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lastPullDateTime: lastPullDateTime };
                return this.createDataServiceRequestForOperation('AcknowledgeNotifications', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getFiscalIntegrationFiscalDocument = function (hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria: fiscalIntegrationDocumentRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetFiscalIntegrationFiscalDocument', true, Proxy.Entities.FiscalIntegrationDocumentClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getFiscalIntegrationNonFiscalDocument = function (hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria: fiscalIntegrationDocumentRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetFiscalIntegrationNonFiscalDocument', true, Proxy.Entities.FiscalIntegrationDocumentClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getFiscalIntegrationFiscalServiceSetupDocument = function (hardwareProfileId, functionalityProfileGroupId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId };
                return this.createDataServiceRequestForOperation('GetFiscalIntegrationFiscalServiceSetupDocument', true, Proxy.Entities.FiscalIntegrationDocumentClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getFiscalIntegrationFiscalServiceReadDataDocument = function (hardwareProfileId, functionalityProfileGroupId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId };
                return this.createDataServiceRequestForOperation('GetFiscalIntegrationFiscalServiceReadDataDocument', true, Proxy.Entities.FiscalIntegrationDocumentClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.processFiscalIntegrationFiscalServiceReadDataResult = function (hardwareProfileId, functionalityProfileGroupId, documentToProcess) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, documentToProcess: documentToProcess };
                return this.createDataServiceRequestForOperation('ProcessFiscalIntegrationFiscalServiceReadDataResult', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.saveFiscalIntegrationRegistrationResult = function (hardwareProfileId, functionalityProfileGroupId, registrationResult) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId, functionalityProfileGroupId: functionalityProfileGroupId, registrationResult: registrationResult };
                return this.createDataServiceRequestForOperation('SaveFiscalIntegrationRegistrationResult', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getFiscalIntegrationRegistrationProcess = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetFiscalIntegrationRegistrationProcess', true, Proxy.Entities.FiscalIntegrationRegistrationProcessClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getChannelSupportedFiscalIntegrationEventsByGroup = function (functionalityProfileGroupId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { functionalityProfileGroupId: functionalityProfileGroupId };
                return this.createDataServiceRequestForOperation('GetChannelSupportedFiscalIntegrationEventsByGroup', true, Proxy.Entities.FiscalIntegrationSupportedEventsClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getFiscalIntegrationTechnicalProfiles = function (hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetFiscalIntegrationTechnicalProfiles', true, Proxy.Entities.FiscalIntegrationTechnicalProfileClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGrids = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetButtonGrids', false, Proxy.Entities.ButtonGridClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getButtonGridsByScreenSize = function (height, width) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { height: height, width: width };
                return this.createDataServiceRequestForOperation('GetButtonGridsByScreenSize', false, Proxy.Entities.ButtonGridClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCashDeclarations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCashDeclarations', false, Proxy.Entities.CashDeclarationClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCountryRegions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCountryRegions', false, Proxy.Entities.CountryRegionInfoClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCustomerGroups = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCustomerGroups', false, Proxy.Entities.CustomerGroupClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDeliveryOptions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeliveryOptions', false, Proxy.Entities.DeliveryOptionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getEnvironmentConfiguration = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetEnvironmentConfiguration', false, Proxy.Entities.EnvironmentConfigurationClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getExtensionProfile = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetExtensionProfile', false, Proxy.Entities.ExtensionProfileClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDeviceConfiguration = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeviceConfiguration', false, Proxy.Entities.DeviceConfigurationClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getLanguages = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLanguages', false, Proxy.Entities.SupportedLanguageClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAffiliations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetAffiliations', false, Proxy.Entities.AffiliationClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOperationPermissions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOperationPermissions', false, Proxy.Entities.OperationPermissionClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReasonCodes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetReasonCodes', false, Proxy.Entities.ReasonCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getReturnOrderReasonCodes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetReturnOrderReasonCodes', false, Proxy.Entities.ReasonCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getSalesTaxGroups = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetSalesTaxGroups', false, Proxy.Entities.SalesTaxGroupClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getTenderTypes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTenderTypes', false, Proxy.Entities.TenderTypeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getUnitsOfMeasure = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetUnitsOfMeasure', false, Proxy.Entities.UnitOfMeasureClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getDiscountCodes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDiscountCodes', false, Proxy.Entities.DiscountCodeClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCurrencies = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCurrencies', false, Proxy.Entities.CurrencyClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCurrenciesAmount = function (currencyCode, amount) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { currencyCode: currencyCode, amount: amount };
                return this.createDataServiceRequestForOperation('GetCurrenciesAmount', false, Proxy.Entities.CurrencyAmountClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getCommissionSalesGroups = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCommissionSalesGroups', false, Proxy.Entities.CommissionSalesGroupClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.searchCommissionSalesGroups = function (searchText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { searchText: searchText };
                return this.createDataServiceRequestForOperation('SearchCommissionSalesGroups', false, Proxy.Entities.CommissionSalesGroupClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getPaymentMerchantInformation = function (hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetPaymentMerchantInformation', false, Proxy.Entities.PaymentMerchantInformationClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getPaymentPropertiesIfModified = function (hardwareProfileId, merchantInformationHash) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { hardwareProfileId: hardwareProfileId, merchantInformationHash: merchantInformationHash };
                return this.createDataServiceRequestForOperation('GetPaymentPropertiesIfModified', false, Proxy.Entities.PaymentMerchantInformationClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getOnlineChannelPublishStatus = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOnlineChannelPublishStatus', false, '', 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.setOnlineChannelPublishStatus = function (publishingStatus, statusMessage) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { publishingStatus: publishingStatus, statusMessage: statusMessage };
                return this.createDataServiceRequestForOperation('SetOnlineChannelPublishStatus', true, '', '', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAvailableDevices = function (deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceType: deviceType };
                return this.createDataServiceRequestForOperation('GetAvailableDevices', false, Proxy.Entities.DeviceClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getImageBlob = function (imageId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { imageId: imageId };
                return this.createDataServiceRequestForOperation('GetImageBlob', false, Proxy.Entities.MediaBlobClass, 'false', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getExtensibleEnumerations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetExtensibleEnumerations', false, Proxy.Entities.ExtensibleEnumerationContainerClass, 'true', oDataOperationParameters);
            };
            StoreOperationsDataServiceQuery.prototype.getAddressPurposes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetAddressPurposes', false, Proxy.Entities.AddressPurposeClass, 'true', oDataOperationParameters);
            };
            return StoreOperationsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.StoreOperationsDataServiceQuery = StoreOperationsDataServiceQuery;
        var CategoriesDataServiceQuery = (function (_super) {
            __extends(CategoriesDataServiceQuery, _super);
            function CategoriesDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CategoriesDataServiceQuery.prototype.getCategories = function (channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId };
                return this.createDataServiceRequestForOperation('GetCategories', true, Proxy.Entities.CategoryClass, 'true', oDataOperationParameters);
            };
            CategoriesDataServiceQuery.prototype.getAttributes = function (categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { categoryId: categoryId };
                return this.createDataServiceRequestForOperation('GetAttributes', false, Proxy.Entities.AttributeCategoryClass, 'true', oDataOperationParameters);
            };
            CategoriesDataServiceQuery.prototype.getChildren = function (channelId, categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, categoryId: categoryId };
                return this.createDataServiceRequestForOperation('GetChildren', true, Proxy.Entities.CategoryClass, 'true', oDataOperationParameters);
            };
            return CategoriesDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CategoriesDataServiceQuery = CategoriesDataServiceQuery;
        var CartsDataServiceQuery = (function (_super) {
            __extends(CartsDataServiceQuery, _super);
            function CartsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CartsDataServiceQuery.prototype.checkout = function (receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptEmail: receiptEmail, tokenizedPaymentCard: tokenizedPaymentCard, receiptNumberSequence: receiptNumberSequence, cartTenderLines: cartTenderLines, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('Checkout', true, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getMaxLoyaltyPointsToRedeemForTransactionBalance = function (loyaltyCardId, currencyCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { loyaltyCardId: loyaltyCardId, currencyCode: currencyCode };
                return this.createDataServiceRequestForOperation('GetMaxLoyaltyPointsToRedeemForTransactionBalance', true, Proxy.Entities.LoyaltyPointRedemptionEstimateClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getPaymentsHistory = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPaymentsHistory', true, Proxy.Entities.TenderLineClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getLineDeliveryOptionsByChannelId = function (lineShippingAddresses, channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lineShippingAddresses: lineShippingAddresses, channelId: channelId };
                return this.createDataServiceRequestForOperation('GetLineDeliveryOptionsByChannelId', true, Proxy.Entities.SalesLineDeliveryOptionClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getLineDeliveryOptions = function (lineShippingAddresses) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lineShippingAddresses: lineShippingAddresses };
                return this.createDataServiceRequestForOperation('GetLineDeliveryOptions', true, Proxy.Entities.SalesLineDeliveryOptionClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getDeliveryPreferences = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeliveryPreferences', true, Proxy.Entities.CartDeliveryPreferencesClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getDeliveryOptions = function (shippingAddress) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shippingAddress: shippingAddress };
                return this.createDataServiceRequestForOperation('GetDeliveryOptions', true, Proxy.Entities.DeliveryOptionClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateLineDeliverySpecifications = function (lineDeliverySpecifications) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { lineDeliverySpecifications: lineDeliverySpecifications };
                return this.createDataServiceRequestForOperation('UpdateLineDeliverySpecifications', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateDeliverySpecification = function (deliverySpecification) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deliverySpecification: deliverySpecification };
                return this.createDataServiceRequestForOperation('UpdateDeliverySpecification', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addCharge = function (moduleTypeValue, chargeCode, amount) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { moduleTypeValue: moduleTypeValue, chargeCode: chargeCode, amount: amount };
                return this.createDataServiceRequestForOperation('AddCharge', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.overrideCharge = function (chargeLineId, amount, reasonCodeLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { chargeLineId: chargeLineId, amount: amount, reasonCodeLines: reasonCodeLines };
                return this.createDataServiceRequestForOperation('OverrideCharge', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addCartLineCharge = function (cartLineId, moduleTypeValue, chargeCode, amount) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLineId: cartLineId, moduleTypeValue: moduleTypeValue, chargeCode: chargeCode, amount: amount };
                return this.createDataServiceRequestForOperation('AddCartLineCharge', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.overrideCartLineCharge = function (cartLineId, chargeLineId, amount, reasonCodeLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLineId: cartLineId, chargeLineId: chargeLineId, amount: amount, reasonCodeLines: reasonCodeLines };
                return this.createDataServiceRequestForOperation('OverrideCartLineCharge', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.void = function (reasonCodeLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { reasonCodeLines: reasonCodeLines };
                return this.createDataServiceRequestForOperation('Void', true, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addCartLines = function (cartLines, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLines: cartLines, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('AddCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateCartLines = function (cartLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLines: cartLines };
                return this.createDataServiceRequestForOperation('UpdateCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.voidCartLines = function (cartLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLines: cartLines };
                return this.createDataServiceRequestForOperation('VoidCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.removeCartLines = function (cartLineIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLineIds: cartLineIds };
                return this.createDataServiceRequestForOperation('RemoveCartLines', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addTenderLine = function (cartTenderLine, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartTenderLine: cartTenderLine, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('AddTenderLine', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addPreprocessedTenderLine = function (preprocessedTenderLine, cartVersion) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { preprocessedTenderLine: preprocessedTenderLine, cartVersion: cartVersion };
                return this.createDataServiceRequestForOperation('AddPreprocessedTenderLine', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.validateTenderLineForAdd = function (tenderLine) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { tenderLine: tenderLine };
                return this.createDataServiceRequestForOperation('ValidateTenderLineForAdd', true, '', '', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateTenderLineSignature = function (tenderLineId, signatureData) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { tenderLineId: tenderLineId, signatureData: signatureData };
                return this.createDataServiceRequestForOperation('UpdateTenderLineSignature', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getDeclinedOrVoidedCardReceipts = function (preprocessedTenderLine, receiptRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { preprocessedTenderLine: preprocessedTenderLine, receiptRetrievalCriteria: receiptRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetDeclinedOrVoidedCardReceipts', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.copy = function (targetCartType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { targetCartType: targetCartType };
                return this.createDataServiceRequestForOperation('Copy', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addInvoicedSalesLinesToCart = function (transactionId, invoicedSalesLinesIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, invoicedSalesLinesIds: invoicedSalesLinesIds };
                return this.createDataServiceRequestForOperation('AddInvoicedSalesLinesToCart', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.voidTenderLine = function (tenderLineId, reasonCodeLines, isPreprocessed, forceVoid) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { tenderLineId: tenderLineId, reasonCodeLines: reasonCodeLines, isPreprocessed: isPreprocessed, forceVoid: forceVoid };
                return this.createDataServiceRequestForOperation('VoidTenderLine', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.issueGiftCard = function (giftCardId, amount, currencyCode, lineDescription) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription };
                return this.createDataServiceRequestForOperation('IssueGiftCard', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.refillGiftCard = function (giftCardId, amount, currencyCode, lineDescription) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription };
                return this.createDataServiceRequestForOperation('RefillGiftCard', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.cashOutGiftCard = function (giftCardId, amount, currencyCode, lineDescription) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { giftCardId: giftCardId, amount: amount, currencyCode: currencyCode, lineDescription: lineDescription };
                return this.createDataServiceRequestForOperation('CashOutGiftCard', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.suspend = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Suspend', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.suspendWithJournal = function (journalCartId, receiptNumberSequence) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { journalCartId: journalCartId, receiptNumberSequence: receiptNumberSequence };
                return this.createDataServiceRequestForOperation('SuspendWithJournal', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.resume = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Resume', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.resumeFromReceiptId = function (receiptId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptId: receiptId };
                return this.createDataServiceRequestForOperation('ResumeFromReceiptId', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.removeDiscountCodes = function (discountCodes) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { discountCodes: discountCodes };
                return this.createDataServiceRequestForOperation('RemoveDiscountCodes', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getSuspended = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetSuspended', true, Proxy.Entities.CartClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.search = function (cartSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartSearchCriteria: cartSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.CartClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.overrideCartLinePrice = function (cartLineId, price) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cartLineId: cartLineId, price: price };
                return this.createDataServiceRequestForOperation('OverrideCartLinePrice', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getCardPaymentAcceptPoint = function (cardPaymentAcceptSettings) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cardPaymentAcceptSettings: cardPaymentAcceptSettings };
                return this.createDataServiceRequestForOperation('GetCardPaymentAcceptPoint', true, Proxy.Entities.CardPaymentAcceptPointClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.retrieveCardPaymentAcceptResult = function (resultAccessCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { resultAccessCode: resultAccessCode };
                return this.createDataServiceRequestForOperation('RetrieveCardPaymentAcceptResult', true, Proxy.Entities.CardPaymentAcceptResultClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recallOrder = function (transactionId, salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, salesId: salesId };
                return this.createDataServiceRequestForOperation('RecallOrder', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recallQuote = function (transactionId, quoteId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, quoteId: quoteId };
                return this.createDataServiceRequestForOperation('RecallQuote', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recalculateOrder = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('RecalculateOrder', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.resetAllCharges = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('ResetAllCharges', false, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getPromotions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPromotions', true, Proxy.Entities.CartPromotionsClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.recallSalesInvoice = function (transactionId, invoiceId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, invoiceId: invoiceId };
                return this.createDataServiceRequestForOperation('RecallSalesInvoice', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addOrderInvoice = function (invoiceId, lineDescription) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { invoiceId: invoiceId, lineDescription: lineDescription };
                return this.createDataServiceRequestForOperation('AddOrderInvoice', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addInvoices = function (invoiceIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { invoiceIds: invoiceIds };
                return this.createDataServiceRequestForOperation('AddInvoices', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.updateCommissionSalesGroup = function (transactionId, cartLineId, commissionSalesGroup, isUserInitiated) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, cartLineId: cartLineId, commissionSalesGroup: commissionSalesGroup, isUserInitiated: isUserInitiated };
                return this.createDataServiceRequestForOperation('UpdateCommissionSalesGroup', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addCoupons = function (couponCodes, isLegacyDiscountCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { couponCodes: couponCodes, isLegacyDiscountCode: isLegacyDiscountCode };
                return this.createDataServiceRequestForOperation('AddCoupons', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.removeCoupons = function (couponCodes) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { couponCodes: couponCodes };
                return this.createDataServiceRequestForOperation('RemoveCoupons', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.getChargeCodes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetChargeCodes', false, Proxy.Entities.ChargeCodeClass, 'true', oDataOperationParameters);
            };
            CartsDataServiceQuery.prototype.addDiscountCode = function (discountCode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { discountCode: discountCode };
                return this.createDataServiceRequestForOperation('AddDiscountCode', true, Proxy.Entities.CartClass, 'false', oDataOperationParameters);
            };
            return CartsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CartsDataServiceQuery = CartsDataServiceQuery;
        var CustomersDataServiceQuery = (function (_super) {
            __extends(CustomersDataServiceQuery, _super);
            function CustomersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CustomersDataServiceQuery.prototype.search = function (customerSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerSearchCriteria: customerSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.GlobalCustomerClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.searchByFields = function (CustomerSearchByFieldCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { CustomerSearchByFieldCriteria: CustomerSearchByFieldCriteria };
                return this.createDataServiceRequestForOperation('SearchByFields', true, Proxy.Entities.GlobalCustomerClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getByAccountNumbers = function (accountNumbers, searchLocationValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { accountNumbers: accountNumbers, searchLocationValue: searchLocationValue };
                return this.createDataServiceRequestForOperation('GetByAccountNumbers', true, Proxy.Entities.CustomerClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getOrderHistory = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOrderHistory', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getOrderShipmentsHistory = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOrderShipmentsHistory', true, Proxy.Entities.OrderShipmentsClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.postNonTransactionalActivityLoyaltyPoints = function (loyaltyCardId, channelId, affiliationId, activityTypeId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { loyaltyCardId: loyaltyCardId, channelId: channelId, affiliationId: affiliationId, activityTypeId: activityTypeId };
                return this.createDataServiceRequestForOperation('PostNonTransactionalActivityLoyaltyPoints', true, '', '', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getPurchaseHistory = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPurchaseHistory', false, Proxy.Entities.PurchaseHistoryClass, 'true', oDataOperationParameters);
            };
            CustomersDataServiceQuery.prototype.getCustomerSearchFields = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCustomerSearchFields', false, Proxy.Entities.CustomerSearchFieldClass, 'true', oDataOperationParameters);
            };
            return CustomersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CustomersDataServiceQuery = CustomersDataServiceQuery;
        var EmployeesDataServiceQuery = (function (_super) {
            __extends(EmployeesDataServiceQuery, _super);
            function EmployeesDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            EmployeesDataServiceQuery.prototype.getActivities = function (employeeActivitySearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { employeeActivitySearchCriteria: employeeActivitySearchCriteria };
                return this.createDataServiceRequestForOperation('GetActivities', true, Proxy.Entities.EmployeeActivityClass, 'true', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getManagerActivityView = function (employeeActivitySearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { employeeActivitySearchCriteria: employeeActivitySearchCriteria };
                return this.createDataServiceRequestForOperation('GetManagerActivityView', true, Proxy.Entities.EmployeeActivityClass, 'true', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.registerActivity = function (employeeActivityType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { employeeActivityType: employeeActivityType };
                return this.createDataServiceRequestForOperation('RegisterActivity', true, '', 'false', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getAccessibleOrgUnits = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetAccessibleOrgUnits', true, Proxy.Entities.OrgUnitClass, 'true', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getLatestActivity = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLatestActivity', true, Proxy.Entities.EmployeeActivityClass, 'false', oDataOperationParameters);
            };
            EmployeesDataServiceQuery.prototype.getCurrentEmployee = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetCurrentEmployee', false, Proxy.Entities.EmployeeClass, 'false', oDataOperationParameters);
            };
            return EmployeesDataServiceQuery;
        }(DataServiceQuery));
        Proxy.EmployeesDataServiceQuery = EmployeesDataServiceQuery;
        var SalesOrdersDataServiceQuery = (function (_super) {
            __extends(SalesOrdersDataServiceQuery, _super);
            function SalesOrdersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            SalesOrdersDataServiceQuery.prototype.searchSalesTransactionsByReceiptId = function (receiptId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptId: receiptId };
                return this.createDataServiceRequestForOperation('SearchSalesTransactionsByReceiptId', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.search = function (salesOrderSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesOrderSearchCriteria: salesOrderSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.searchOrders = function (orderSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { orderSearchCriteria: orderSearchCriteria };
                return this.createDataServiceRequestForOperation('SearchOrders', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getReceipts = function (receiptRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptRetrievalCriteria: receiptRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetReceipts', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getGiftReceipts = function (SalesLineNumbers, receiptRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { SalesLineNumbers: SalesLineNumbers, receiptRetrievalCriteria: receiptRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetGiftReceipts', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getByReceiptId = function (receiptId, orderStoreNumber, orderTerminalId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { receiptId: receiptId, orderStoreNumber: orderStoreNumber, orderTerminalId: orderTerminalId };
                return this.createDataServiceRequestForOperation('GetByReceiptId', true, Proxy.Entities.SalesOrderClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getSalesOrderDetailsByTransactionId = function (transactionId, searchLocationValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, searchLocationValue: searchLocationValue };
                return this.createDataServiceRequestForOperation('GetSalesOrderDetailsByTransactionId', false, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getSalesOrderDetailsBySalesId = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('GetSalesOrderDetailsBySalesId', false, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getSalesOrderDetailsByQuotationId = function (quotationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { quotationId: quotationId };
                return this.createDataServiceRequestForOperation('GetSalesOrderDetailsByQuotationId', false, Proxy.Entities.SalesOrderClass, 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.shipFulfillmentLines = function (ShipFulfillmentLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { ShipFulfillmentLines: ShipFulfillmentLines };
                return this.createDataServiceRequestForOperation('ShipFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.acceptFulfillmentLines = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('AcceptFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.pickFulfillmentLines = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('PickFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.packFulfillmentLines = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('PackFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.markFulfillmentLinesAsPacked = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('MarkFulfillmentLinesAsPacked', true, '', 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.markAsPicked = function (FulfillmentLineParameter) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { FulfillmentLineParameter: FulfillmentLineParameter };
                return this.createDataServiceRequestForOperation('MarkAsPicked', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentPickingLists = function (pickingListFulfillmentLine, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { pickingListFulfillmentLine: pickingListFulfillmentLine, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetFulfillmentPickingLists', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentLines = function (fulfillmentLineSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { fulfillmentLineSearchCriteria: fulfillmentLineSearchCriteria };
                return this.createDataServiceRequestForOperation('GetFulfillmentLines', true, Proxy.Entities.FulfillmentLineClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentPackingSlips = function (packFulfillmentLines, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { packFulfillmentLines: packFulfillmentLines, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetFulfillmentPackingSlips', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getFulfillmentPackingSlipsById = function (salesId, PackingSlipId, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId, PackingSlipId: PackingSlipId, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetFulfillmentPackingSlipsById', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.rejectFulfillmentLines = function (RejectFulfillmentLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { RejectFulfillmentLines: RejectFulfillmentLines };
                return this.createDataServiceRequestForOperation('RejectFulfillmentLines', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getInvoicesBySalesId = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('GetInvoicesBySalesId', true, Proxy.Entities.SalesInvoiceClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getOrderInvoices = function (customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerId: customerId };
                return this.createDataServiceRequestForOperation('GetOrderInvoices', true, Proxy.Entities.OrderInvoiceClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getInvoices = function (invoiceSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { invoiceSearchCriteria: invoiceSearchCriteria };
                return this.createDataServiceRequestForOperation('GetInvoices', true, Proxy.Entities.OrderInvoiceClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getInvoicedSalesLinesBySalesIds = function (salesIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesIds: salesIds };
                return this.createDataServiceRequestForOperation('GetInvoicedSalesLinesBySalesIds', true, Proxy.Entities.SalesLineClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.createPickingList = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('CreatePickingList', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.createPickingListForItems = function (salesId, pickAndPackSalesLineParameters) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId, pickAndPackSalesLineParameters: pickAndPackSalesLineParameters };
                return this.createDataServiceRequestForOperation('CreatePickingListForItems', true, '', 'false', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getPickingLists = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetPickingLists', false, Proxy.Entities.PickingListClass, 'true', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.createPackingSlip = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('CreatePackingSlip', true, '', '', oDataOperationParameters);
            };
            SalesOrdersDataServiceQuery.prototype.getPackingSlipsData = function (salesId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { salesId: salesId };
                return this.createDataServiceRequestForOperation('GetPackingSlipsData', false, Proxy.Entities.PackingSlipDataClass, 'true', oDataOperationParameters);
            };
            return SalesOrdersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.SalesOrdersDataServiceQuery = SalesOrdersDataServiceQuery;
        var ShiftsDataServiceQuery = (function (_super) {
            __extends(ShiftsDataServiceQuery, _super);
            function ShiftsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            ShiftsDataServiceQuery.prototype.upsertShifts = function (shifts) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shifts: shifts };
                return this.createDataServiceRequestForOperation('UpsertShifts', true, '', 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.upsertAndValidateShifts = function (shiftId, terminalId, shifts) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftId: shiftId, terminalId: terminalId, shifts: shifts };
                return this.createDataServiceRequestForOperation('UpsertAndValidateShifts', true, '', 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.deleteShifts = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('DeleteShifts', true, '', 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.open = function (shiftId, cashDrawer, isShared) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftId: shiftId, cashDrawer: cashDrawer, isShared: isShared };
                return this.createDataServiceRequestForOperation('Open', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.close = function (transactionId, forceClose) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, forceClose: forceClose };
                return this.createDataServiceRequestForOperation('Close', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getSuspendedCartsByShift = function (shiftTerminalId, shiftId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftTerminalId: shiftTerminalId, shiftId: shiftId };
                return this.createDataServiceRequestForOperation('GetSuspendedCartsByShift', true, Proxy.Entities.SuspendedCartClass, 'true', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.voidSuspendedCarts = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('VoidSuspendedCarts', true, '', '', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.blindClose = function (transactionId, forceClose) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, forceClose: forceClose };
                return this.createDataServiceRequestForOperation('BlindClose', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.forceDelete = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('ForceDelete', true, '', '', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.resume = function (cashDrawer) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { cashDrawer: cashDrawer };
                return this.createDataServiceRequestForOperation('Resume', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.use = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Use', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.suspend = function (transactionId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId };
                return this.createDataServiceRequestForOperation('Suspend', true, Proxy.Entities.ShiftClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getByStatus = function (statusValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { statusValue: statusValue };
                return this.createDataServiceRequestForOperation('GetByStatus', false, Proxy.Entities.ShiftClass, 'true', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getByStatusFilterByUserRole = function (statusValue, filterByUserRole) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { statusValue: statusValue, filterByUserRole: filterByUserRole };
                return this.createDataServiceRequestForOperation('GetByStatusFilterByUserRole', false, Proxy.Entities.ShiftClass, 'true', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getXReport = function (transactionId, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetXReport', false, Proxy.Entities.ReceiptClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.getZReport = function (transactionId, hardwareProfileId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transactionId: transactionId, hardwareProfileId: hardwareProfileId };
                return this.createDataServiceRequestForOperation('GetZReport', false, Proxy.Entities.ReceiptClass, 'false', oDataOperationParameters);
            };
            ShiftsDataServiceQuery.prototype.validateCashDrawerLimit = function (shiftTerminalId, shiftId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { shiftTerminalId: shiftTerminalId, shiftId: shiftId };
                return this.createDataServiceRequestForOperation('ValidateCashDrawerLimit', true, '', '', oDataOperationParameters);
            };
            return ShiftsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.ShiftsDataServiceQuery = ShiftsDataServiceQuery;
        var StockCountJournalsDataServiceQuery = (function (_super) {
            __extends(StockCountJournalsDataServiceQuery, _super);
            function StockCountJournalsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            StockCountJournalsDataServiceQuery.prototype.sync = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Sync', true, Proxy.Entities.StockCountJournalClass, 'true', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.syncTransactions = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('SyncTransactions', true, Proxy.Entities.StockCountJournalTransactionClass, 'true', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeJournal = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('RemoveJournal', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeTransaction = function (itemId, inventSizeId, inventColorId, inventStyleId, configurationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemId: itemId, inventSizeId: inventSizeId, inventColorId: inventColorId, inventStyleId: inventStyleId, configurationId: configurationId };
                return this.createDataServiceRequestForOperation('RemoveTransaction', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeStockCountLineByLineId = function (stockCountLineId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { stockCountLineId: stockCountLineId };
                return this.createDataServiceRequestForOperation('RemoveStockCountLineByLineId', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.removeStockCountLineByProductRecId = function (productId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productId: productId };
                return this.createDataServiceRequestForOperation('RemoveStockCountLineByProductRecId', true, '', '', oDataOperationParameters);
            };
            StockCountJournalsDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            return StockCountJournalsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.StockCountJournalsDataServiceQuery = StockCountJournalsDataServiceQuery;
        var OrgUnitsDataServiceQuery = (function (_super) {
            __extends(OrgUnitsDataServiceQuery, _super);
            function OrgUnitsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            OrgUnitsDataServiceQuery.prototype.getTillLayout = function (height, width) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { height: height, width: width };
                return this.createDataServiceRequestForOperation('GetTillLayout', true, Proxy.Entities.TillLayoutClass, 'false', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.search = function (storeSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { storeSearchCriteria: storeSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.OrgUnitClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getOrgUnitLocationsByArea = function (searchArea) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { searchArea: searchArea };
                return this.createDataServiceRequestForOperation('GetOrgUnitLocationsByArea', true, Proxy.Entities.OrgUnitLocationClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.searchOrgUnitLocations = function (orgUnitLocationSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { orgUnitLocationSearchCriteria: orgUnitLocationSearchCriteria };
                return this.createDataServiceRequestForOperation('SearchOrgUnitLocations', true, Proxy.Entities.OrgUnitLocationClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getOrgUnitConfiguration = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetOrgUnitConfiguration', true, Proxy.Entities.ChannelConfigurationClass, 'false', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getStoreHours = function (storeNumber) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { storeNumber: storeNumber };
                return this.createDataServiceRequestForOperation('GetStoreHours', false, Proxy.Entities.StoreHoursClass, 'false', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getAvailableInventory = function (itemId, variantId, barcode) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemId: itemId, variantId: variantId, barcode: barcode };
                return this.createDataServiceRequestForOperation('GetAvailableInventory', true, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getAvailableInventoryNearby = function (itemIds, searchArea) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemIds: itemIds, searchArea: searchArea };
                return this.createDataServiceRequestForOperation('GetAvailableInventoryNearby', true, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getProductAvailabilityByDimensions = function (inventLocationIds, productId, productDimensionCombinations) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { inventLocationIds: inventLocationIds, productId: productId, productDimensionCombinations: productDimensionCombinations };
                return this.createDataServiceRequestForOperation('GetProductAvailabilityByDimensions', true, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.searchProductAvailability = function (productId, orgUnitAvailabilitySearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productId: productId, orgUnitAvailabilitySearchCriteria: orgUnitAvailabilitySearchCriteria };
                return this.createDataServiceRequestForOperation('SearchProductAvailability', true, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getTerminalInfo = function (deviceType) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { deviceType: deviceType };
                return this.createDataServiceRequestForOperation('GetTerminalInfo', false, Proxy.Entities.TerminalInfoClass, 'true', oDataOperationParameters);
            };
            OrgUnitsDataServiceQuery.prototype.getProductAvailability = function (productId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productId: productId };
                return this.createDataServiceRequestForOperation('GetProductAvailability', false, Proxy.Entities.OrgUnitAvailabilityClass, 'true', oDataOperationParameters);
            };
            return OrgUnitsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.OrgUnitsDataServiceQuery = OrgUnitsDataServiceQuery;
        var ProductsDataServiceQuery = (function (_super) {
            __extends(ProductsDataServiceQuery, _super);
            function ProductsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            ProductsDataServiceQuery.prototype.getDimensionValues = function (channelId, dimension, matchingDimensionValues, kitVariantResolutionContext) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, dimension: dimension, matchingDimensionValues: matchingDimensionValues, kitVariantResolutionContext: kitVariantResolutionContext };
                return this.createDataServiceRequestForOperation('GetDimensionValues', true, Proxy.Entities.ProductDimensionValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getVariantsByDimensionValues = function (channelId, matchingDimensionValues) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, matchingDimensionValues: matchingDimensionValues };
                return this.createDataServiceRequestForOperation('GetVariantsByDimensionValues', true, Proxy.Entities.SimpleProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getVariantsByComponentsInSlots = function (channelId, matchingSlotToComponentRelationship) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, matchingSlotToComponentRelationship: matchingSlotToComponentRelationship };
                return this.createDataServiceRequestForOperation('GetVariantsByComponentsInSlots', true, Proxy.Entities.SimpleProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getByIds = function (channelId, productIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, productIds: productIds };
                return this.createDataServiceRequestForOperation('GetByIds', true, Proxy.Entities.SimpleProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.compare = function (channelId, catalogId, productIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, productIds: productIds };
                return this.createDataServiceRequestForOperation('Compare', true, Proxy.Entities.ProductComparisonLineClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRecommendedProducts = function (productIds, customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productIds: productIds, customerId: customerId };
                return this.createDataServiceRequestForOperation('GetRecommendedProducts', true, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.refineSearchByCategory = function (channelId, catalogId, categoryId, refinementCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, categoryId: categoryId, refinementCriteria: refinementCriteria };
                return this.createDataServiceRequestForOperation('RefineSearchByCategory', true, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.refineSearchByText = function (channelId, catalogId, searchText, refinementCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, searchText: searchText, refinementCriteria: refinementCriteria };
                return this.createDataServiceRequestForOperation('RefineSearchByText', true, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.search = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('Search', true, Proxy.Entities.ProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefiners = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('GetRefiners', true, Proxy.Entities.ProductRefinerClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.changes = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('Changes', true, Proxy.Entities.ProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.beginReadChangedProducts = function (changedProductSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { changedProductSearchCriteria: changedProductSearchCriteria };
                return this.createDataServiceRequestForOperation('BeginReadChangedProducts', true, Proxy.Entities.ReadChangedProductsSessionClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.readChangedProducts = function (productSearchCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { productSearchCriteria: productSearchCriteria };
                return this.createDataServiceRequestForOperation('ReadChangedProducts', true, Proxy.Entities.ProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDeletedListings = function (catalogId, skip, top) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, skip: skip, top: top };
                return this.createDataServiceRequestForOperation('GetDeletedListings', true, Proxy.Entities.DeletedListingsResultClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDeletedCatalogs = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeletedCatalogs', false, '', 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDeletedLanguages = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetDeletedLanguages', false, '', 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.deleteListingsByCatalogs = function (catalogIds) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogIds: catalogIds };
                return this.createDataServiceRequestForOperation('DeleteListingsByCatalogs', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.deleteListingsByLanguages = function (languages) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { languages: languages };
                return this.createDataServiceRequestForOperation('DeleteListingsByLanguages', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.endReadChangedProducts = function (session) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { session: session };
                return this.createDataServiceRequestForOperation('EndReadChangedProducts', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.updateListingPublishingStatus = function (publishingStatuses) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { publishingStatuses: publishingStatuses };
                return this.createDataServiceRequestForOperation('UpdateListingPublishingStatus', true, '', '', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getPrices = function (itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemId: itemId, inventoryDimensionId: inventoryDimensionId, barcode: barcode, customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol, quantity: quantity };
                return this.createDataServiceRequestForOperation('GetPrices', true, Proxy.Entities.ProductPriceClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getProductAvailabilities = function (itemIds, channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { itemIds: itemIds, channelId: channelId };
                return this.createDataServiceRequestForOperation('GetProductAvailabilities', true, Proxy.Entities.ProductAvailableQuantityClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getActivePrices = function (projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { projectDomain: projectDomain, productIds: productIds, activeDate: activeDate, customerId: customerId, affiliationLoyaltyTiers: affiliationLoyaltyTiers };
                return this.createDataServiceRequestForOperation('GetActivePrices', true, Proxy.Entities.ProductPriceClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getFilteredSlotComponents = function (channelId, slotId, selectedComponents) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, slotId: slotId, selectedComponents: selectedComponents };
                return this.createDataServiceRequestForOperation('GetFilteredSlotComponents', true, Proxy.Entities.ProductComponentClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getComponentByProductSlotRelation = function (channelId, componentRelation) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, componentRelation: componentRelation };
                return this.createDataServiceRequestForOperation('GetComponentByProductSlotRelation', true, Proxy.Entities.ProductComponentClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.searchByCategory = function (channelId, catalogId, categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, categoryId: categoryId };
                return this.createDataServiceRequestForOperation('SearchByCategory', false, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.searchByText = function (channelId, catalogId, searchText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, searchText: searchText };
                return this.createDataServiceRequestForOperation('SearchByText', false, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getSearchSuggestions = function (channelId, catalogId, searchText, hitPrefix, hitSuffix) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, searchText: searchText, hitPrefix: hitPrefix, hitSuffix: hitSuffix };
                return this.createDataServiceRequestForOperation('GetSearchSuggestions', false, Proxy.Entities.SearchSuggestionClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinersByCategory = function (catalogId, categoryId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, categoryId: categoryId };
                return this.createDataServiceRequestForOperation('GetRefinersByCategory', false, Proxy.Entities.ProductRefinerClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinersByText = function (catalogId, searchText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, searchText: searchText };
                return this.createDataServiceRequestForOperation('GetRefinersByText', false, Proxy.Entities.ProductRefinerClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinerValuesByCategory = function (catalogId, categoryId, refinerId, refinerSourceValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, categoryId: categoryId, refinerId: refinerId, refinerSourceValue: refinerSourceValue };
                return this.createDataServiceRequestForOperation('GetRefinerValuesByCategory', false, Proxy.Entities.ProductRefinerValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRefinerValuesByText = function (catalogId, searchText, refinerId, refinerSourceValue) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { catalogId: catalogId, searchText: searchText, refinerId: refinerId, refinerSourceValue: refinerSourceValue };
                return this.createDataServiceRequestForOperation('GetRefinerValuesByText', false, Proxy.Entities.ProductRefinerValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getChannelProductAttributes = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetChannelProductAttributes', false, Proxy.Entities.AttributeProductClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getById = function (channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId };
                return this.createDataServiceRequestForOperation('GetById', false, Proxy.Entities.SimpleProductClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getAttributeValues = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetAttributeValues', false, Proxy.Entities.AttributeValueClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getMediaLocations = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetMediaLocations', false, Proxy.Entities.MediaLocationClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getMediaBlobs = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetMediaBlobs', false, Proxy.Entities.MediaBlobClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getDefaultComponents = function (channelId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId };
                return this.createDataServiceRequestForOperation('GetDefaultComponents', false, Proxy.Entities.ProductComponentClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getSlotComponents = function (channelId, slotId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, slotId: slotId };
                return this.createDataServiceRequestForOperation('GetSlotComponents', false, Proxy.Entities.ProductComponentClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRelationTypes = function (channelId, catalogId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId };
                return this.createDataServiceRequestForOperation('GetRelationTypes', false, Proxy.Entities.ProductRelationTypeClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getRelatedProducts = function (channelId, catalogId, relationTypeId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, catalogId: catalogId, relationTypeId: relationTypeId };
                return this.createDataServiceRequestForOperation('GetRelatedProducts', false, Proxy.Entities.ProductSearchResultClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getUnitsOfMeasure = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetUnitsOfMeasure', false, Proxy.Entities.UnitOfMeasureClass, 'true', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.getPrice = function (customerAccountNumber, unitOfMeasureSymbol) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol };
                return this.createDataServiceRequestForOperation('GetPrice', false, Proxy.Entities.ProductPriceClass, 'false', oDataOperationParameters);
            };
            ProductsDataServiceQuery.prototype.calculateProductPrice = function (customerAccountNumber, unitOfMeasureSymbol, loyaltyCardId, affiliationLoyaltyTiers) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerAccountNumber: customerAccountNumber, unitOfMeasureSymbol: unitOfMeasureSymbol, loyaltyCardId: loyaltyCardId, affiliationLoyaltyTiers: affiliationLoyaltyTiers };
                return this.createDataServiceRequestForOperation('CalculateProductPrice', true, Proxy.Entities.ProductPriceClass, 'false', oDataOperationParameters);
            };
            return ProductsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.ProductsDataServiceQuery = ProductsDataServiceQuery;
        var CatalogsDataServiceQuery = (function (_super) {
            __extends(CatalogsDataServiceQuery, _super);
            function CatalogsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CatalogsDataServiceQuery.prototype.getCatalogs = function (channelId, activeOnly) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { channelId: channelId, activeOnly: activeOnly };
                return this.createDataServiceRequestForOperation('GetCatalogs', true, Proxy.Entities.ProductCatalogClass, 'true', oDataOperationParameters);
            };
            return CatalogsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CatalogsDataServiceQuery = CatalogsDataServiceQuery;
        var CommerceListsDataServiceQuery = (function (_super) {
            __extends(CommerceListsDataServiceQuery, _super);
            function CommerceListsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            CommerceListsDataServiceQuery.prototype.getByCustomer = function (customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { customerId: customerId };
                return this.createDataServiceRequestForOperation('GetByCustomer', true, Proxy.Entities.CommerceListClass, 'true', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.addLines = function (commerceListLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines };
                return this.createDataServiceRequestForOperation('AddLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.updateLines = function (commerceListLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines };
                return this.createDataServiceRequestForOperation('UpdateLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.removeLines = function (commerceListLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines };
                return this.createDataServiceRequestForOperation('RemoveLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.moveLines = function (commerceListLines, destinationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines, destinationId: destinationId };
                return this.createDataServiceRequestForOperation('MoveLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.copyLines = function (commerceListLines, destinationId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListLines: commerceListLines, destinationId: destinationId };
                return this.createDataServiceRequestForOperation('CopyLines', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.addContributors = function (commerceListContributors) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListContributors: commerceListContributors };
                return this.createDataServiceRequestForOperation('AddContributors', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.removeContributors = function (commerceListContributors) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListContributors: commerceListContributors };
                return this.createDataServiceRequestForOperation('RemoveContributors', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.createInvitations = function (commerceListInvitations) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { commerceListInvitations: commerceListInvitations };
                return this.createDataServiceRequestForOperation('CreateInvitations', true, Proxy.Entities.CommerceListClass, 'false', oDataOperationParameters);
            };
            CommerceListsDataServiceQuery.prototype.acceptInvitation = function (invitationToken, customerId) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { invitationToken: invitationToken, customerId: customerId };
                return this.createDataServiceRequestForOperation('AcceptInvitation', true, '', '', oDataOperationParameters);
            };
            return CommerceListsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.CommerceListsDataServiceQuery = CommerceListsDataServiceQuery;
        var TransferOrdersDataServiceQuery = (function (_super) {
            __extends(TransferOrdersDataServiceQuery, _super);
            function TransferOrdersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            TransferOrdersDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferOrderLines = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.createTransferOrderLines = function (transferOrderLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transferOrderLines: transferOrderLines };
                return this.createDataServiceRequestForOperation('CreateTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.updateTransferOrderLines = function (transferOrderLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transferOrderLines: transferOrderLines };
                return this.createDataServiceRequestForOperation('UpdateTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferOrderComments = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTransferOrderComments', true, Proxy.Entities.CommentClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.addTransferOrderComment = function (AuthorStaffId, CommentText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { AuthorStaffId: AuthorStaffId, CommentText: CommentText };
                return this.createDataServiceRequestForOperation('AddTransferOrderComment', true, Proxy.Entities.CommentClass, 'false', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.deleteTransferOrderLines = function (transferOrderLines) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { transferOrderLines: transferOrderLines };
                return this.createDataServiceRequestForOperation('DeleteTransferOrderLines', true, Proxy.Entities.TransferOrderLineClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferOrderJournals = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetTransferOrderJournals', true, Proxy.Entities.TransferOrderJournalClass, 'true', oDataOperationParameters);
            };
            TransferOrdersDataServiceQuery.prototype.getTransferPackingSlip = function (voucherId, receiptRetrievalCriteria) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { voucherId: voucherId, receiptRetrievalCriteria: receiptRetrievalCriteria };
                return this.createDataServiceRequestForOperation('GetTransferPackingSlip', true, Proxy.Entities.ReceiptClass, 'true', oDataOperationParameters);
            };
            return TransferOrdersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.TransferOrdersDataServiceQuery = TransferOrdersDataServiceQuery;
        var PurchaseOrdersDataServiceQuery = (function (_super) {
            __extends(PurchaseOrdersDataServiceQuery, _super);
            function PurchaseOrdersDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            PurchaseOrdersDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            return PurchaseOrdersDataServiceQuery;
        }(DataServiceQuery));
        Proxy.PurchaseOrdersDataServiceQuery = PurchaseOrdersDataServiceQuery;
        var PickingListsDataServiceQuery = (function (_super) {
            __extends(PickingListsDataServiceQuery, _super);
            function PickingListsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            PickingListsDataServiceQuery.prototype.commit = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('Commit', true, '', '', oDataOperationParameters);
            };
            return PickingListsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.PickingListsDataServiceQuery = PickingListsDataServiceQuery;
        var WarehousesDataServiceQuery = (function (_super) {
            __extends(WarehousesDataServiceQuery, _super);
            function WarehousesDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            WarehousesDataServiceQuery.prototype.getWarehouseById = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetWarehouseById', false, Proxy.Entities.WarehouseClass, 'false', oDataOperationParameters);
            };
            WarehousesDataServiceQuery.prototype.searchWarehouses = function (searchText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { searchText: searchText };
                return this.createDataServiceRequestForOperation('SearchWarehouses', false, Proxy.Entities.WarehouseClass, 'true', oDataOperationParameters);
            };
            WarehousesDataServiceQuery.prototype.getLocations = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetLocations', false, Proxy.Entities.WarehouseLocationClass, 'true', oDataOperationParameters);
            };
            WarehousesDataServiceQuery.prototype.searchLocations = function (searchText) {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = { searchText: searchText };
                return this.createDataServiceRequestForOperation('SearchLocations', false, Proxy.Entities.WarehouseLocationClass, 'true', oDataOperationParameters);
            };
            return WarehousesDataServiceQuery;
        }(DataServiceQuery));
        Proxy.WarehousesDataServiceQuery = WarehousesDataServiceQuery;
        var SuspendedCartsDataServiceQuery = (function (_super) {
            __extends(SuspendedCartsDataServiceQuery, _super);
            function SuspendedCartsDataServiceQuery(dataServiceRequestFactory, entitySet, entityType, returnType, key) {
                return _super.call(this, dataServiceRequestFactory, entitySet, entityType, returnType, key) || this;
            }
            SuspendedCartsDataServiceQuery.prototype.getAllSuspendedCarts = function () {
                var oDataOperationParameters = new ODataOperationParameters();
                oDataOperationParameters.parameters = {};
                return this.createDataServiceRequestForOperation('GetAllSuspendedCarts', true, Proxy.Entities.SuspendedCartClass, 'true', oDataOperationParameters);
            };
            return SuspendedCartsDataServiceQuery;
        }(DataServiceQuery));
        Proxy.SuspendedCartsDataServiceQuery = SuspendedCartsDataServiceQuery;
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var ErrorHandling;
        (function (ErrorHandling) {
            "use strict";
            var CommerceExceptionTypes = (function () {
                function CommerceExceptionTypes() {
                }
                CommerceExceptionTypes.COMMERCE_EXCEPTION_TYPE = "CommerceException";
                CommerceExceptionTypes.DATA_VALIDATION_EXCEPTION_TYPE = "DataValidationException";
                CommerceExceptionTypes.CART_VALIDATION_EXCEPTION_TYPE = "CartValidationException";
                CommerceExceptionTypes.ITEM_DISCONTINUED_EXCEPTION_TYPE = "ItemDiscontinuedException";
                CommerceExceptionTypes.STORAGE_EXCEPTION_TYPE = "StorageException";
                CommerceExceptionTypes.USER_AUTHENTICATION_EXCEPTION_TYPE = "UserAuthenticationException";
                CommerceExceptionTypes.DEVICE_AUTHENTICATION_EXCEPTION_TYPE = "DeviceAuthenticationException";
                CommerceExceptionTypes.MISSING_REQUIRED_REASON_CODE_EXCEPTION = "MissingRequiredReasonCodeException";
                CommerceExceptionTypes.INSUFFICIENT_CREDENTIAL_LENGTH_EXCEPTION = "InsufficientCredentialLengthException";
                CommerceExceptionTypes.STAFF_PASSWORD_EXPIRED_EXCEPTION = "StaffPasswordExpiredException";
                CommerceExceptionTypes.TENDER_VALIDATION_EXCEPTION = "TenderValidationException";
                return CommerceExceptionTypes;
            }());
            ErrorHandling.CommerceExceptionTypes = CommerceExceptionTypes;
        })(ErrorHandling = Proxy.ErrorHandling || (Proxy.ErrorHandling = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Context;
        (function (Context) {
            "use strict";
            var ErrorParser = (function () {
                function ErrorParser() {
                }
                ErrorParser.parseErrorMessage = function (response) {
                    var errors = [];
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response)) {
                        var handled = true;
                        Commerce.RetailLogger.modelManagersServerResponseStatusCode(response.statusCode);
                        switch (response.statusCode) {
                            case 306:
                                var redirectUrl = ErrorParser._getHeaderValue(response.headers, "Location");
                                errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.RETAIL_SERVER_REDIRECT_ERROR, false, response.statusText, redirectUrl));
                                break;
                            case 0:
                            case 404:
                                var extraData = null;
                                if (ErrorParser._isPossibleLoopbackBlocked(response)) {
                                    extraData = {
                                        additionalInfo: Commerce.ErrorTypeEnum.POSSIBLE_LOOPBACK_BLOCKED
                                    };
                                }
                                errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE, false, response.statusText, extraData));
                                break;
                            case 408:
                                errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVER_TIMEOUT, false, response.statusText));
                                break;
                            case 500:
                                errors = ErrorParser._parseError(response);
                                if (!Commerce.ArrayExtensions.hasElements(errors) || errors[0].ErrorCode === Commerce.ErrorTypeEnum.SERVER_INTERNAL_ERROR) {
                                    errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVER_INTERNAL_ERROR));
                                }
                                break;
                            case 502:
                                var responseText = response.body;
                                if (!Commerce.StringExtensions.isNullOrWhitespace(responseText)) {
                                    responseText = responseText.toUpperCase();
                                }
                                if (responseText.indexOf(Commerce.ErrorHelper.HTTPRESPONSE_DNS) >= 0 &&
                                    responseText.indexOf(Commerce.ErrorHelper.HTTPRESPONSE_FAILED) >= 0) {
                                    errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_DNS_LOOKUP_FAILED.serverErrorCode));
                                }
                                else if (responseText.indexOf(Commerce.ErrorHelper.HTTPRESPONSE_TIMED) >= 0
                                    && responseText.indexOf(Commerce.ErrorHelper.HTTPRESPONSE_OUT) >= 0) {
                                    errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_SERVER_TIMED_OUT.serverErrorCode, true));
                                }
                                else if (responseText.indexOf(Commerce.ErrorHelper.HTTPRESPONSE_FIREWALL) >= 0) {
                                    errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_FIREWALL_BLOCKED.serverErrorCode));
                                }
                                else {
                                    errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_ERROR.serverErrorCode, true));
                                }
                                break;
                            case 503:
                            case 504:
                                if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                                    Commerce.RetailLogger.modelManagersErrorParserRetailServerUnavailable(response.statusText);
                                }
                                errors.push(new Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE, true));
                                break;
                            default:
                                handled = false;
                                break;
                        }
                        if (!handled) {
                            errors = ErrorParser._parseError(response);
                        }
                    }
                    if ((!errors) || (!errors.length)) {
                        Commerce.RetailLogger.modelManagersErrorParserInternalServerError();
                        errors = [new Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVER_INTERNAL_ERROR)];
                    }
                    return errors;
                };
                ErrorParser.parseHardwareStationErrorMessage = function (error) {
                    var errors;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                        try {
                            var response = error.responseText;
                            if (response) {
                                var jsonResponse = JSON.parse(response);
                                if (jsonResponse) {
                                    errors = new Array();
                                    var paymentException_1 = ErrorParser._retrievePaymentExceptionFromParsedJsonResponse(jsonResponse);
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentException_1) && Commerce.ArrayExtensions.hasElements(paymentException_1.PaymentSdkErrors)) {
                                        paymentException_1.PaymentSdkErrors.forEach(function (sdkError) {
                                            var code = Commerce.ObjectExtensions.isNullOrUndefined(sdkError.Code)
                                                ? Commerce.PaymentErrorTypeEnum[Commerce.PaymentErrorHelper.GENERAL_EXCEPTION_ERROR_CODE]
                                                : Commerce.PaymentErrorTypeEnum[sdkError.Code.toString()];
                                            var isLocalized = Commerce.ObjectExtensions.isNullOrUndefined(sdkError.IsLocalized) ? false : sdkError.IsLocalized;
                                            var errorResourceId = Commerce.PaymentErrorHelper.PAYMENT_EXCEPTION_NAMESPACE
                                                + (Commerce.ObjectExtensions.isNullOrUndefined(code) ? sdkError.Code : code);
                                            var jsonResMissingAttribute = Commerce.ObjectExtensions.isNullOrUndefined(sdkError.Code)
                                                || Commerce.ObjectExtensions.isNullOrUndefined(sdkError.Message);
                                            var externalLocalizedErrorMsg = jsonResMissingAttribute
                                                ? Commerce.ViewModelAdapter.getResourceString("string_29000")
                                                : sdkError.Message;
                                            var paymentInfo = paymentException_1.PaymentInfo;
                                            if (isLocalized) {
                                                errors.push(new Commerce.Client.Entities.HardwareStationLocalizedError(errorResourceId.toUpperCase(), undefined, externalLocalizedErrorMsg, paymentInfo));
                                            }
                                            else {
                                                errors.push(new Proxy.Entities.Error(errorResourceId.toUpperCase(), undefined, externalLocalizedErrorMsg, paymentInfo));
                                            }
                                        });
                                    }
                                    else {
                                        Commerce.RetailLogger.modelManagersErrorParserHardwareStationError(error.responseText);
                                        errors = [ErrorParser._createHardwareStationError(jsonResponse)];
                                    }
                                }
                                else {
                                    Commerce.RetailLogger.modelManagerErrorParserHardwareStationCommunicatonFailed();
                                    errors = [new Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED)];
                                }
                            }
                            else {
                                Commerce.RetailLogger.modelManagerErrorParserHardwareStationCommunicatonFailed();
                                errors = [new Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED)];
                            }
                        }
                        catch (ex) {
                            Commerce.RetailLogger.applicationFailedToParseError(ex.toString());
                        }
                    }
                    if ((!errors) || (!errors.length)) {
                        Commerce.RetailLogger.modelManagerErrorParserHardwareStationCommunicatonFailed();
                        errors = [new Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED)];
                    }
                    return errors;
                };
                ErrorParser.parseJSONError = function (errorString) {
                    var commerceErrors;
                    try {
                        var deserializedError = JSON.parse(errorString);
                        if (deserializedError != null) {
                            var exceptionType = deserializedError.TypeName;
                            var serializedException = deserializedError.Exception;
                            if (exceptionType != null && serializedException != null) {
                                var commerceException = JSON.parse(serializedException) || {};
                                commerceErrors = ErrorParser._convertExceptionToErrors(commerceException, exceptionType);
                            }
                            else {
                                throw new Error("Server exception is not in expected format.");
                            }
                        }
                        else {
                            throw new Error("Server exception is not in expected format.");
                        }
                    }
                    catch (ex) {
                        Commerce.RetailLogger.applicationFailedToParseErrorInvalidJson(ex.toString());
                    }
                    if (!Commerce.ArrayExtensions.hasElements(commerceErrors)) {
                        commerceErrors = [new Proxy.Entities.Error(Commerce.ErrorTypeEnum.GENERICERRORMESSAGE)];
                    }
                    return commerceErrors;
                };
                ErrorParser._convertExceptionToErrors = function (serverException, exceptionTypeName) {
                    var errors = [];
                    switch (exceptionTypeName) {
                        case Proxy.ErrorHandling.CommerceExceptionTypes.ITEM_DISCONTINUED_EXCEPTION_TYPE:
                            var itemDiscontinuedException = serverException;
                            var itemDiscontinuedError = new Proxy.Entities.Error(itemDiscontinuedException.ErrorResourceId, false, itemDiscontinuedException.LocalizedMessage, null, itemDiscontinuedException.RemovedUnavailableItemIds);
                            itemDiscontinuedError.commerceException = itemDiscontinuedException;
                            errors.push(itemDiscontinuedError);
                            break;
                        case Proxy.ErrorHandling.CommerceExceptionTypes.DATA_VALIDATION_EXCEPTION_TYPE:
                        case Proxy.ErrorHandling.CommerceExceptionTypes.CART_VALIDATION_EXCEPTION_TYPE:
                            var dataValidation = serverException;
                            errors = ErrorParser._getErrorsFromDataValidationFailures(dataValidation.ValidationResults);
                            var dataValidationError = new Proxy.Entities.Error(dataValidation.ErrorResourceId, false, dataValidation.LocalizedMessage);
                            if (Commerce.ErrorHelper.hasError([dataValidationError], Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSION.serverErrorCode)) {
                                dataValidationError.handled = true;
                            }
                            errors.push(dataValidationError);
                            break;
                        case Proxy.ErrorHandling.CommerceExceptionTypes.MISSING_REQUIRED_REASON_CODE_EXCEPTION:
                            var exception = serverException;
                            var error = new Proxy.Entities.Error(exception.ErrorResourceId, false, exception.LocalizedMessage);
                            var exceptionType = ErrorParser.EXCEPTION_CLASS_BY_TYPE_NAME[exceptionTypeName];
                            error.commerceException = new exceptionType(exception);
                            errors.push(error);
                            break;
                        case Commerce.Client.ErrorHandling.HardwareStationExceptionTypes.PAYMENT_EXCEPTION_TYPE:
                            var paymentException = serverException;
                            var paymentError = new Proxy.Entities.Error(paymentException.ErrorResourceId, false, paymentException.LocalizedMessage);
                            paymentError.commerceException = paymentException;
                            errors.push(paymentError);
                            break;
                        case Proxy.ErrorHandling.CommerceExceptionTypes.INSUFFICIENT_CREDENTIAL_LENGTH_EXCEPTION:
                            var credentialLengthEx = serverException;
                            var credentialLengthError = new Proxy.Entities.Error(credentialLengthEx.ErrorResourceId, false, Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_11013"), credentialLengthEx.ActualLength, credentialLengthEx.MinLength));
                            errors.push(credentialLengthError);
                            break;
                        case Proxy.ErrorHandling.CommerceExceptionTypes.STAFF_PASSWORD_EXPIRED_EXCEPTION:
                            var userAuthEx = serverException;
                            var userAuthError = new Proxy.Entities.Error(userAuthEx.ErrorResourceId, false, userAuthEx.LocalizedMessage);
                            userAuthError.commerceException = userAuthEx;
                            errors.push(userAuthError);
                            break;
                        case Proxy.ErrorHandling.CommerceExceptionTypes.TENDER_VALIDATION_EXCEPTION:
                            var tenderValidationException = serverException;
                            var exceedsMaximumDifferenceAmountError = new Proxy.Entities.Error(tenderValidationException.ErrorResourceId, false, tenderValidationException.LocalizedMessage, null, false, tenderValidationException.TenderTypeId);
                            exceedsMaximumDifferenceAmountError.commerceException = tenderValidationException;
                            errors.push(exceedsMaximumDifferenceAmountError);
                            break;
                        case Proxy.ErrorHandling.CommerceExceptionTypes.COMMERCE_EXCEPTION_TYPE:
                        default:
                            var commerceException = serverException;
                            errors.push(new Proxy.Entities.Error(commerceException.ErrorResourceId, false, commerceException.LocalizedMessage));
                            break;
                    }
                    for (var i = 0; i < errors.length; i++) {
                        errors[i].commerceExceptionType = exceptionTypeName;
                    }
                    return errors;
                };
                ErrorParser._getErrorsFromDataValidationFailures = function (failures) {
                    var errors = [];
                    failures = failures || [];
                    for (var i = 0; i < failures.length; i++) {
                        var failure = failures[i];
                        Commerce.RetailLogger.modelManagersErrorParserDataValidationFailure(failure.ErrorContext);
                        var extraData = ErrorParser._getExtraDataFromDataValidationFailure(failure);
                        errors.push(new Proxy.Entities.Error(failure.ErrorResourceId, false, failure.LocalizedMessage, extraData));
                    }
                    return errors;
                };
                ErrorParser._getExtraDataFromDataValidationFailure = function (failure) {
                    var extraData = undefined;
                    var memberNames = failure.MemberNames;
                    if (Commerce.ArrayExtensions.hasElements(memberNames)) {
                        extraData = {
                            additionalInfo: memberNames.join(", ")
                        };
                    }
                    return extraData;
                };
                ErrorParser._parseError = function (response) {
                    var errors = [];
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(response.body)) {
                        var contentType = ErrorParser._getHeaderValue(response.headers, Proxy.Common.HttpHeaders.CONTENT_TYPE);
                        var bodyString = response.body;
                        if (contentType.toLowerCase().indexOf(Proxy.Common.MimeTypes.APPLICATION_JSON) !== -1) {
                            errors = ErrorParser.parseJSONError(bodyString);
                        }
                        else {
                            Commerce.RetailLogger.modelManagersErrorParserUnsupportedContentType(contentType);
                        }
                    }
                    if (!Commerce.ArrayExtensions.hasElements(errors) || errors[0].ErrorCode === Commerce.ErrorTypeEnum.GENERICERRORMESSAGE) {
                        errors = [Commerce.ErrorHelper.MapResponseStatusCodeToError(response.statusText, response.statusCode)];
                    }
                    return errors;
                };
                ErrorParser._isPossibleLoopbackBlocked = function (response) {
                    var requestUri = response ? response.requestUri : null;
                    return Commerce.UrlHelper.isLocalAddress(requestUri);
                };
                ErrorParser._getHeaderValue = function (headers, headerName) {
                    return (headers[headerName] || headers[headerName.toLowerCase()]) || Commerce.StringExtensions.EMPTY;
                };
                ErrorParser._createHardwareStationError = function (jsonResponse) {
                    var resourceId = jsonResponse.ErrorResourceId
                        ? jsonResponse.ErrorResourceId
                        : Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(jsonResponse.LocalizedMessage)) {
                        return new Commerce.Client.Entities.HardwareStationLocalizedError(resourceId, false, jsonResponse.LocalizedMessage);
                    }
                    return new Proxy.Entities.Error(resourceId, false, jsonResponse.Message || Commerce.StringExtensions.EMPTY);
                };
                ErrorParser._retrievePaymentExceptionFromParsedJsonResponse = function (jsonResponse) {
                    var result = null;
                    while (!Commerce.ObjectExtensions.isNullOrUndefined(jsonResponse)) {
                        var exceptionName = jsonResponse.ClassName;
                        var hasInnerException = !Commerce.ObjectExtensions.isNullOrUndefined(jsonResponse.InnerException);
                        if (!Commerce.StringExtensions.isNullOrWhitespace(exceptionName)
                            && exceptionName.indexOf(Commerce.Client.ErrorHandling.HardwareStationExceptionTypes.PAYMENT_EXCEPTION_TYPE) < 0) {
                            jsonResponse = hasInnerException ? jsonResponse.InnerException : null;
                        }
                        else {
                            result = jsonResponse;
                            break;
                        }
                    }
                    return result;
                };
                ErrorParser.EXCEPTION_CLASS_BY_TYPE_NAME = {
                    "MissingRequiredReasonCodeException": Proxy.Entities.MissingRequiredReasonCodeExceptionClass
                };
                return ErrorParser;
            }());
            Context.ErrorParser = ErrorParser;
        })(Context = Proxy.Context || (Proxy.Context = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Client;
    (function (Client) {
        var ErrorHandling;
        (function (ErrorHandling) {
            "use strict";
            var HardwareStationExceptionTypes = (function () {
                function HardwareStationExceptionTypes() {
                }
                HardwareStationExceptionTypes.PAYMENT_EXCEPTION_TYPE = "PaymentException";
                HardwareStationExceptionTypes.PERIPHERAL_EXCEPTION_TYPE = "PeripheralException";
                return HardwareStationExceptionTypes;
            }());
            ErrorHandling.HardwareStationExceptionTypes = HardwareStationExceptionTypes;
        })(ErrorHandling = Client.ErrorHandling || (Client.ErrorHandling = {}));
    })(Client = Commerce.Client || (Commerce.Client = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var ChainedRequest = (function () {
                function ChainedRequest(onlineDataServiceRequestFactory, offlineDataServiceRequestFactory, chainedRequestFactory, query) {
                    this._query = query;
                    this._onlineDataServiceRequestFactory = onlineDataServiceRequestFactory;
                    this._offlineDataServiceRequestFactory = offlineDataServiceRequestFactory;
                    this._chainedRequestFactory = chainedRequestFactory;
                    this._correlationId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                    this._retryCountToOffline =
                        Commerce.ObjectExtensions.isNumber(Commerce.ApplicationContext.Instance.deviceConfiguration.RetryCountToOffline) ?
                            Commerce.ApplicationContext.Instance.deviceConfiguration.RetryCountToOffline : 1;
                    this._currentRetryCountToOffline = 0;
                    this.onlineDictionary = new Commerce.Dictionary();
                    this.onlineDictionary.setItem("GetTerminalDataStoreName", true);
                    this.onlineDictionary.setItem("GetDownloadInterval", true);
                    this.onlineDictionary.setItem("GetDownloadSessions", true);
                    this.onlineDictionary.setItem("GetInitialDownloadSessions", true);
                    this.onlineDictionary.setItem("GetDownloadLink", true);
                    this.onlineDictionary.setItem("UpdateDownloadSession", true);
                    this.onlineDictionary.setItem("GetUploadJobDefinitions", true);
                    this.onlineDictionary.setItem("GetUploadInterval", true);
                    this.onlineDictionary.setItem("PostOfflineTransactions", true);
                    this.onlineDictionary.setItem("changePassword", true);
                    this.offlineDictionary = new Commerce.Dictionary();
                    this.offlineDictionary.setItem("GetOfflineSyncStatus", true);
                    this.offlineDictionary.setItem("GetOfflinePendingTransactionCount", true);
                    if (this._query.isForOffline) {
                        this.offlineDictionary.setItem(this._query.action, true);
                    }
                    this.offlineSyncDownloadDictionary = new Commerce.Dictionary();
                    this.offlineSyncDownloadDictionary.setItem("GetTerminalDataStoreName", true);
                    this.offlineSyncDownloadDictionary.setItem("GetDownloadInterval", true);
                    this.offlineSyncDownloadDictionary.setItem("GetDownloadSessions", true);
                    this.offlineSyncDownloadDictionary.setItem("GetInitialDownloadSessions", true);
                    this.offlineSyncDownloadDictionary.setItem("GetDownloadLink", true);
                    this.offlineSyncDownloadDictionary.setItem("UpdateDownloadSession", true);
                }
                ChainedRequest.prototype.id = function () {
                    return this._request.id();
                };
                ChainedRequest.prototype.execute = function () {
                    var _this = this;
                    var asyncResult;
                    var result;
                    if (this.isOfflineRequest()) {
                        return this.executeOfflineRequest();
                    }
                    var queue = new Commerce.AsyncQueue();
                    queue.enqueue(function () {
                        if (Commerce.Session.instance.isLoggedOn &&
                            _this._query.entityType !== ChainedRequest.AUTHENTICATION_ENTITY_TYPE &&
                            _this._query.action !== ChainedRequest.STARTSESSION_API_NAME &&
                            !_this.isOfflineSyncDownloadRequest()) {
                            return _this._chainedRequestFactory.switchConnectionToOnlineIfDue();
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    queue.enqueue(function () {
                        if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online && !_this.isOnlineRequest()
                            && !_this.isLogOnRequest()) {
                            asyncResult = _this.executeOfflineRequest(true);
                        }
                        else {
                            asyncResult = new Commerce.AsyncResult();
                            var isLogOnRequest_1 = _this.isLogOnRequest();
                            if (ChainedRequest.isPromptOnSeamlessOfflineDialogOpen) {
                                Commerce.RetailLogger.modelManagersChainedRequestFactoryRequestQueuedByLockedDialog(_this._correlationId);
                                ChainedRequest.dialogResultToGoOffline.done(function (shouldGoOffline) {
                                    Commerce.RetailLogger.modelManagersChainedRequestFactorySeamlessOfflineDialogResultForQueuedRequest(_this._correlationId, shouldGoOffline);
                                    return _this.execute();
                                }).fail(function (errors) { asyncResult.reject(errors); });
                            }
                            else {
                                _this.executeOnlineRequest()
                                    .done(function (result) {
                                    if ((isLogOnRequest_1 || (_this.isLogOffRequest() && Commerce.Session.instance.isOfflineAvailable))
                                        && Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.onlineDatabase)) {
                                        if (isLogOnRequest_1) {
                                            if (Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                                                _this.incrementTransactionIdOnRequest();
                                                _this.executeOfflineLogonRequest().always(function () {
                                                    asyncResult.resolve(result);
                                                });
                                            }
                                            else {
                                                asyncResult.resolve(result);
                                            }
                                        }
                                        else {
                                            _this.incrementTransactionIdOnRequest();
                                            _this.executeOfflineRequest()
                                                .done(function (result) {
                                                if (!_this.offlineDictionary.getItem(_this._query.action)) {
                                                    Commerce.Session.instance.isOfflineAvailable = true;
                                                    Commerce.RetailLogger.modelManagersChainedRequestFactoryExecuteOfflineAvailable();
                                                }
                                            }).fail(function (error) {
                                                Commerce.Session.instance.isOfflineAvailable = false;
                                                Commerce.RetailLogger.modelManagersChainedRequestFactoryExecuteOfflineUnAvailable();
                                            });
                                            asyncResult.resolve(result);
                                        }
                                    }
                                    else {
                                        asyncResult.resolve(result);
                                    }
                                }).fail(function (errors) {
                                    var error = Commerce.ArrayExtensions.firstOrUndefined(errors);
                                    if (error && error.ErrorCode === Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE
                                        && Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online
                                        && _this.isLogOnRequest()) {
                                        _this.executeOfflineRequest(true)
                                            .done(function (result) {
                                            asyncResult.resolve(result);
                                        }).fail(function (errors) {
                                            asyncResult.reject(errors);
                                        });
                                    }
                                    else if (error && error.ErrorCode === Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE
                                        && Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                                        var promptOnSeamlessOffline = Commerce.ObjectExtensions.isNullOrUndefined(Commerce.ApplicationContext.Instance.deviceConfiguration.PromptOnSeamlessOffline) ?
                                            false : Commerce.ApplicationContext.Instance.deviceConfiguration.PromptOnSeamlessOffline;
                                        if (_this.isOnlineRequest()) {
                                            asyncResult.reject(errors);
                                        }
                                        else if (!Commerce.Session.instance.isLoggedOn && !_this.isLogOnRequest()) {
                                            if (Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                                                _this.executeOfflineRequest(true).done(function (result) {
                                                    asyncResult.resolve(result);
                                                }).fail(function (offlineRequestErrors) {
                                                    asyncResult.reject(offlineRequestErrors);
                                                });
                                            }
                                            else {
                                                asyncResult.reject(errors);
                                            }
                                        }
                                        else if (promptOnSeamlessOffline && !_this.isTokenRequest()) {
                                            if (ChainedRequest.isPromptOnSeamlessOfflineDialogOpen) {
                                                Commerce.RetailLogger.modelManagersChainedRequestFactoryFailedRequestQueuedByLockedDialog(_this._correlationId);
                                                ChainedRequest.dialogResultToGoOffline.done(function (shouldGoOffline) {
                                                    Commerce.RetailLogger.modelManagersChainedRequestFactorySeamlessOfflineDialogResultForFailedQueuedRequest(_this._correlationId, shouldGoOffline);
                                                    if (!shouldGoOffline) {
                                                        _this.executeOnlineRequest().done(function (result) { asyncResult.resolve(result); });
                                                    }
                                                    else {
                                                        _this.retryInOfflineMode(isLogOnRequest_1).done(function (result) { asyncResult.resolve(result); });
                                                    }
                                                }).fail(function (errors) { asyncResult.reject(errors); });
                                            }
                                            else {
                                                Commerce.RetailLogger.modelManagersChainedRequestFactoryLockingAndPromptingSeamlessOfflineDialog(_this._correlationId);
                                                ChainedRequest.isPromptOnSeamlessOfflineDialogOpen = true;
                                                _this.promptDialogToRetryInOnlineOrOfflineMode(isLogOnRequest_1).done(function (result) {
                                                    asyncResult.resolve(result);
                                                }).fail(function (errors) { asyncResult.reject(errors); });
                                            }
                                        }
                                        else {
                                            if (!_this.isTokenRequest()) {
                                                Commerce.RetailLogger.modelManagersChainedRequestFactoryPromptOnSeamlessOfflineNotSet(_this._correlationId);
                                            }
                                            _this.retryInOfflineMode(isLogOnRequest_1).done(function (result) { return asyncResult.resolve(result); })
                                                .fail(function (errors) { return asyncResult.reject(errors); });
                                        }
                                    }
                                    else {
                                        asyncResult.reject(errors);
                                    }
                                });
                            }
                        }
                        return asyncResult
                            .done(function (asyncResult) { result = asyncResult; });
                    });
                    return queue.run().map(function () {
                        return result;
                    });
                };
                ChainedRequest.prototype.executeBatch = function (requests) {
                    var batchRequests = [];
                    var factory = this._onlineDataServiceRequestFactory;
                    if (Commerce.Session.instance.connectionStatus !== Commerce.Client.Entities.ConnectionStatusType.Online) {
                        factory = this._offlineDataServiceRequestFactory;
                    }
                    requests.forEach(function (request) {
                        request._request = factory.create(request._query);
                        batchRequests.push(request._request);
                    });
                    return this._request.executeBatch(batchRequests);
                };
                ChainedRequest.prototype.promptDialogToRetryInOnlineOrOfflineMode = function (isLogOnRequest) {
                    var _this = this;
                    var asyncQueue = new Commerce.AsyncQueue();
                    var shouldGoOffline;
                    var result;
                    asyncQueue.enqueue(function () {
                        return _this.shouldGoOffline().done(function (result) {
                            shouldGoOffline = result;
                            Commerce.RetailLogger.modelManagersChainedRequestFactoryShouldGoOfflineResultFromSeamlessOfflineDialog(_this._correlationId, result);
                        });
                    });
                    asyncQueue.enqueue(function () {
                        if (!shouldGoOffline) {
                            return _this.executeOnlineRequest().done(function (data) { result = data; });
                        }
                        else {
                            return _this.retryInOfflineMode(isLogOnRequest).done(function (data) { result = data; });
                        }
                    });
                    return asyncQueue.run().map(function () {
                        ChainedRequest.isPromptOnSeamlessOfflineDialogOpen = false;
                        ChainedRequest.dialogResultToGoOffline.resolve(shouldGoOffline);
                        ChainedRequest.dialogResultToGoOffline.clear();
                        return result;
                    }).recoverOnFailure(function (errors) {
                        if (!shouldGoOffline) {
                            Commerce.RetailLogger.modelManagersChainedRequestFactoryRetryFailedInOnlineMode(_this._correlationId);
                            return _this.promptDialogToRetryInOnlineOrOfflineMode(isLogOnRequest);
                        }
                        else {
                            Commerce.NotificationHandler.displayClientErrors(errors);
                            ChainedRequest.isPromptOnSeamlessOfflineDialogOpen = false;
                            ChainedRequest.dialogResultToGoOffline.reject(errors);
                            ChainedRequest.dialogResultToGoOffline.clear();
                            return Commerce.AsyncResult.createRejected(errors);
                        }
                    });
                };
                ChainedRequest.prototype.shouldGoOffline = function () {
                    var itemClicked;
                    var retryButton = {
                        id: Commerce.Activities.DisplayMessageOperationIds.OK,
                        label: Commerce.ViewModelAdapter.getResourceString("string_6639"),
                        operationId: Commerce.Activities.DisplayMessageOperationIds.OK,
                        isPrimary: true
                    };
                    var offlineButton = {
                        id: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                        label: Commerce.ViewModelAdapter.getResourceString("string_6640"),
                        operationId: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                        isPrimary: false
                    };
                    var displayMessageActivityContext = {
                        title: Commerce.ViewModelAdapter.getResourceString("string_6600"),
                        subTitle: Commerce.ViewModelAdapter.getResourceString("string_6641"),
                        message: Commerce.ViewModelAdapter.getResourceString("string_6642"),
                        buttons: [retryButton, offlineButton]
                    };
                    var displayMessageActivity = new Commerce.Activities.DisplayMessageActivity(displayMessageActivityContext);
                    return displayMessageActivity.execute().map(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(displayMessageActivity.response) &&
                            !Commerce.StringExtensions.isEmptyOrWhitespace(displayMessageActivity.response.operationId)) {
                            itemClicked = displayMessageActivity.response.operationId;
                            if (itemClicked === "OK" || itemClicked === Commerce.DialogResult.Yes.toString()) {
                                return false;
                            }
                            return true;
                        }
                        return true;
                    });
                };
                ChainedRequest.prototype.retryInOfflineMode = function (isLogOnRequest) {
                    var _this = this;
                    var asyncQueue = new Commerce.AsyncQueue();
                    var result;
                    if (!isLogOnRequest) {
                        asyncQueue.enqueue(function () {
                            return _this._chainedRequestFactory.switchConnection(Commerce.Client.Entities.ConnectionStatusType.SeamlessOffline, false).done(function () {
                                Commerce.RetailLogger.modelManagersChainedRequestFactoryRequestThatCausedSwitchToSeamlessOffline(_this._request.id(), _this._correlationId);
                            });
                        });
                    }
                    asyncQueue.enqueue(function () {
                        if (!_this.isOnlineRequest() && Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                            return _this.executeOfflineRequest(true)
                                .done(function (data) {
                                if (!_this.offlineDictionary.getItem(_this._query.action)) {
                                    Commerce.Session.instance.isOfflineAvailable = true;
                                    Commerce.RetailLogger.modelManagersChainedRequestFactoryExecuteFailOfflineAvailable(_this._correlationId);
                                }
                                result = data;
                            }).fail(function (errors) {
                                if (errors.length > 0) {
                                    Commerce.RetailLogger.modelManagersChainedRequestFactoryExecuteFailOfflineUnAvailable(_this._correlationId, errors[0].ExternalLocalizedErrorMessage);
                                }
                            });
                        }
                        else {
                            return Commerce.VoidAsyncResult.createRejected();
                        }
                    });
                    if (this.isStartSessionRequest()) {
                        asyncQueue.enqueue(function () {
                            return _this._chainedRequestFactory.switchConnection(Commerce.Client.Entities.ConnectionStatusType.SeamlessOffline, false).done(function () {
                                Commerce.RetailLogger.modelManagersChainedRequestFactorySessionRequestThatCausedSwitchToSeamlessOffline(_this._request.id(), _this._correlationId);
                            });
                        });
                    }
                    return asyncQueue.run().map(function () { return result; });
                };
                ChainedRequest.prototype.executeOnlineRequest = function () {
                    this._request = this._onlineDataServiceRequestFactory.create(this._query);
                    this._currentRetryCountToOffline = 0;
                    return this._executeOnlineRequestWithRetry();
                };
                ChainedRequest.prototype._executeOnlineRequestWithRetry = function () {
                    var _this = this;
                    return this._request.execute()
                        .recoverOnFailure(function (errors) {
                        var error = Commerce.ArrayExtensions.firstOrUndefined(errors);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(error) &&
                            error.ErrorCode === Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE &&
                            !_this.isLogOnRequest() &&
                            _this._currentRetryCountToOffline < _this._retryCountToOffline) {
                            ++_this._currentRetryCountToOffline;
                            Commerce.RetailLogger.modelManagersChainedRequestFactoryRetryCountForOnlineRequest(_this._correlationId, _this._currentRetryCountToOffline, _this._retryCountToOffline);
                            return _this._executeOnlineRequestWithRetry();
                        }
                        else {
                            return Commerce.AsyncResult.createRejected(errors);
                        }
                    });
                };
                ChainedRequest.prototype.executeOfflineRequest = function (keepRequestInstance) {
                    var request = this._offlineDataServiceRequestFactory.create(this._query);
                    if (keepRequestInstance) {
                        this._request = request;
                    }
                    return request.execute();
                };
                ChainedRequest.prototype.isStartSessionRequest = function () {
                    return (Commerce.ObjectExtensions.isNullOrUndefined(this._query.entitySet)
                        && (this._query.action.toLowerCase() === "startsession"));
                };
                ChainedRequest.prototype.isTokenRequest = function () {
                    return (Commerce.ObjectExtensions.isNullOrUndefined(this._query.entitySet)
                        && (this._query.action.toLowerCase() === ChainedRequest.TOKEN_API_NAME));
                };
                ChainedRequest.prototype.isLogOnRequest = function () {
                    return (this.isStartSessionRequest() || this.isTokenRequest());
                };
                ChainedRequest.prototype.isLogOffRequest = function () {
                    return (Commerce.ObjectExtensions.isNullOrUndefined(this._query.entitySet) && (this._query.action.toLowerCase() === "endsession"));
                };
                ChainedRequest.prototype.isOnlineRequest = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._query.entitySet)) {
                        if (this._query.entitySet.toLowerCase() === ChainedRequest.SHIFT_ENTITY_NAME
                            && (this._query.action.toLowerCase() === ChainedRequest.CLOSESHIFT_API_NAME
                                || this._query.action.toLowerCase() === ChainedRequest.BLINDCLOSESHIFT_API_NAME ||
                                this._query.action.toLowerCase() === ChainedRequest.SUSPENDSHIFT_API_NAME
                                || this._query.action.toLowerCase() === ChainedRequest.RESUMESHIFT_API_NAME)) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        if (this.onlineDictionary.getItem(this._query.action)) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                };
                ChainedRequest.prototype.isOfflineRequest = function () {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._query.entitySet)) {
                        return false;
                    }
                    var isOffline = false;
                    if (this.offlineDictionary.getItem(this._query.action)) {
                        isOffline = true;
                    }
                    return isOffline;
                };
                ChainedRequest.prototype.isOfflineSyncDownloadRequest = function () {
                    return (Commerce.ObjectExtensions.isNullOrUndefined(this._query.entitySet) && (this.offlineSyncDownloadDictionary.getItem(this._query.action)));
                };
                ChainedRequest.prototype.executeOfflineLogonRequest = function () {
                    var _this = this;
                    return this.executeOfflineRequest()
                        .done(function (result) {
                        if (!_this.offlineDictionary.getItem(_this._query.action)) {
                            Commerce.Session.instance.isOfflineAvailable = true;
                            Commerce.RetailLogger.modelManagersChainedRequestFactoryExecuteOfflineLogonRequestAvailable();
                        }
                    }).fail(function (error) {
                        Commerce.Session.instance.isOfflineAvailable = false;
                        Commerce.RetailLogger.modelManagersChainedRequestFactoryExecuteOfflineLogonRequestUnAvailable();
                    });
                };
                ChainedRequest.prototype.incrementTransactionIdOnRequest = function () {
                    if (this._query.data && this._query.data.parameters && this._query.data.parameters.transactionId) {
                        this._query.data.parameters.transactionId = Commerce.NumberSequence.GetNextTransactionId();
                    }
                };
                ChainedRequest.TOKEN_API_NAME = "token";
                ChainedRequest.AUTHENTICATION_ENTITY_TYPE = "Authentication";
                ChainedRequest.STARTSESSION_API_NAME = "StartSession";
                ChainedRequest.SHIFT_ENTITY_NAME = "shifts";
                ChainedRequest.CLOSESHIFT_API_NAME = "close";
                ChainedRequest.BLINDCLOSESHIFT_API_NAME = "blindclose";
                ChainedRequest.SUSPENDSHIFT_API_NAME = "suspend";
                ChainedRequest.RESUMESHIFT_API_NAME = "resume";
                ChainedRequest.isPromptOnSeamlessOfflineDialogOpen = false;
                ChainedRequest.dialogResultToGoOffline = new Commerce.AsyncResult();
                return ChainedRequest;
            }());
            Requests.ChainedRequest = ChainedRequest;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var ChainedRequestFactory = (function () {
                function ChainedRequestFactory(onlineDataServiceRequestFactory, offlineDataServiceRequestFactory) {
                    this._onlineScanGraceInterval = 1;
                    this._defaultRetryInterval = 5;
                    this._nextOnlineScan = 0;
                    this._onlineDataServiceRequestFactory = onlineDataServiceRequestFactory;
                    this._offlineDataServiceRequestFactory = offlineDataServiceRequestFactory;
                    this.setNextOnlineScanInterval(0);
                }
                ChainedRequestFactory.prototype.create = function (dataServiceQuery) {
                    return new Requests.ChainedRequest(this._onlineDataServiceRequestFactory, this._offlineDataServiceRequestFactory, this, dataServiceQuery);
                };
                ChainedRequestFactory.prototype.switchConnection = function (newConnectionStatus, manualSwitchToOnline, correlationId) {
                    var _this = this;
                    var currentConnectionStatus = Commerce.Session.instance.connectionStatus;
                    correlationId = Commerce.StringExtensions.isNullOrWhitespace(correlationId) ? Commerce.LoggerHelper.getNewCorrelationId() : correlationId;
                    if (currentConnectionStatus === newConnectionStatus) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var asyncResult = new Commerce.VoidAsyncResult(this);
                    switch (newConnectionStatus) {
                        case Commerce.Client.Entities.ConnectionStatusType.Online:
                            if (Commerce.Session.instance.isCartInProgress) {
                                this.setNextOnlineScanInterval(this._onlineScanGraceInterval);
                                if (manualSwitchToOnline) {
                                    Commerce.RetailLogger.modelManagersChainedRequestFactoryOnlineDetectedButManualSwitchRequired();
                                    asyncResult.reject([new Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_SWITCH_ONLINE_CART_IN_PROGRESS)]);
                                }
                                else {
                                    Commerce.RetailLogger.modelManagersChainedRequestFactoryOnlineDetectedButOfflineCartInProgress();
                                    asyncResult.resolve();
                                }
                            }
                            else {
                                var correlationId_2 = Commerce.LoggerHelper.getNewCorrelationId();
                                Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOnline(correlationId_2);
                                this.transferShiftsToOnline(correlationId_2)
                                    .done(function () {
                                    Commerce.Session.instance.connectionStatus = newConnectionStatus;
                                    asyncResult.resolve();
                                    _this.forceStartOfflineUpload();
                                    Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOnlineSucceeded(correlationId_2);
                                })
                                    .fail(function (errors) {
                                    if (errors[0].ErrorCode.toUpperCase() === Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE.toUpperCase()) {
                                        _this.setNextOnlineScanInterval();
                                        if (manualSwitchToOnline) {
                                            Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOnlineFailedManualSwitchUnavailableService(correlationId_2);
                                            asyncResult.reject([new Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE)]);
                                        }
                                        else {
                                            Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOnlineFailedUnavailableService(correlationId_2);
                                            asyncResult.resolve();
                                        }
                                    }
                                    else if (errors[0].ErrorCode.toUpperCase()
                                        === Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHENTICATIONFAILED.serverErrorCode) {
                                        if (currentConnectionStatus === Commerce.Client.Entities.ConnectionStatusType.ManualOffline) {
                                            Commerce.Session.instance.connectionStatus = Commerce.Client.Entities.ConnectionStatusType.SeamlessOffline;
                                            Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOnlineAuthenticationFailedManualOffline(correlationId_2);
                                        }
                                        else {
                                            Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOnlineAuthenticationFailed(correlationId_2);
                                        }
                                        asyncResult.resolve();
                                    }
                                    else if (errors[0].ErrorCode.toUpperCase() === Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_INVALIDSHIFT.serverErrorCode) {
                                        Commerce.Session.instance.connectionStatus = newConnectionStatus;
                                        var request = new Commerce.InvalidShiftErrorHandlingClientRequest(errors);
                                        asyncResult.resolveOrRejectOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)));
                                    }
                                    else {
                                        Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOnlineFailedShift(correlationId_2);
                                        asyncResult.reject([new Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_TRANSFER_SHIFT_TO_ONLINE)]);
                                    }
                                });
                            }
                            break;
                        case Commerce.Client.Entities.ConnectionStatusType.SeamlessOffline:
                        case Commerce.Client.Entities.ConnectionStatusType.ManualOffline:
                            if (!Commerce.Session.instance.isOfflineAvailable || Commerce.Session.instance.offlineParameters.offlineModeDisabled) {
                                Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOfflineNotAvailable(Commerce.Client.Entities.ConnectionStatusType[newConnectionStatus]);
                                asyncResult.reject([new Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_SWITCH_OFFLINE_REQUIRE_RELOGIN)]);
                            }
                            else {
                                var asyncQueue = new Commerce.AsyncQueue();
                                asyncQueue.enqueue(function () { return _this.transferShifts(_this._offlineDataServiceRequestFactory, correlationId); });
                                asyncQueue.enqueue(function () { return _this.transferCartToOffline(); });
                                asyncQueue.run()
                                    .done(function () {
                                    Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOffline();
                                    Commerce.Session.instance.connectionStatus = newConnectionStatus;
                                    _this.setNextOnlineScanInterval();
                                    asyncResult.resolve();
                                })
                                    .fail(function (errors) {
                                    Commerce.RetailLogger.modelManagersChainedRequestFactorySwitchingToOfflineFailed();
                                    asyncResult.reject(errors);
                                });
                            }
                            break;
                    }
                    return asyncResult;
                };
                ChainedRequestFactory.prototype.switchConnectionToOnlineIfDue = function () {
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.SeamlessOffline
                        && this._nextOnlineScan
                        && this._nextOnlineScan <= Date.now()) {
                        return this.switchConnection(Commerce.Client.Entities.ConnectionStatusType.Online, false);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                ChainedRequestFactory.prototype.transferShiftsToOnline = function (correlationId) {
                    var _this = this;
                    if (Commerce.Session.instance.OpenedShifts.length > 0) {
                        Commerce.Session.instance.AddToOrUpdateOpenedShifts(Commerce.Session.instance.Shift);
                        var shiftTransferToOnlineQuery_1 = new Proxy.CommerceContext(this._onlineDataServiceRequestFactory).shifts();
                        var shifts = Commerce.Session.instance.OpenedShifts;
                        var shiftsToUpsert_1 = Commerce.ShiftHelper.GetShiftDetailsForLogging(shifts);
                        Commerce.RetailLogger.upsertShiftsCalled(shiftsToUpsert_1, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                        var currentShiftId_1 = Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Shift)
                            ? null : Commerce.Session.instance.Shift.ShiftId;
                        var currentTerminalId_1 = Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Shift)
                            ? null : Commerce.Session.instance.Shift.TerminalId;
                        var asyncQueue = new Commerce.AsyncQueue()
                            .enqueue(function () {
                            return shiftTransferToOnlineQuery_1.upsertAndValidateShifts(currentShiftId_1, currentTerminalId_1, Commerce.Session.instance.OpenedShifts).execute()
                                .done(function (transferedShift) {
                                Commerce.RetailLogger.upsertShiftsSucceeded(shiftsToUpsert_1, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                            })
                                .fail(function (errors) {
                                if (errors[0].ErrorCode.toUpperCase() !== Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE.toUpperCase()) {
                                    Commerce.RetailLogger.modelManagersChainedRequestFactoryShiftTransferToOnlineCreateFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                                    Commerce.RetailLogger.upsertShiftsFailed(shiftsToUpsert_1, Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                                }
                            });
                        });
                        asyncQueue
                            .enqueue(function () {
                            return _this.deleteShifts(shiftsToUpsert_1, correlationId);
                        });
                        return asyncQueue.run()
                            .recoverOnFailure(function (errors) {
                            if (errors[0].ErrorCode.toUpperCase() === Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_INVALIDSHIFT.serverErrorCode) {
                                var asyncResult_6 = new Commerce.VoidAsyncResult();
                                _this.deleteShifts(shiftsToUpsert_1, correlationId)
                                    .fail(function (deleteShiftErrors) {
                                    asyncResult_6.reject(deleteShiftErrors);
                                })
                                    .done(function () {
                                    asyncResult_6.reject(errors);
                                });
                                return asyncResult_6;
                            }
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        });
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                ChainedRequestFactory.prototype.deleteShifts = function (shiftsToUpsert, correlationId) {
                    var shiftTransferToOfflineQuery = new Proxy.CommerceContext(this._offlineDataServiceRequestFactory).shifts();
                    Commerce.RetailLogger.deleteShiftsCalled(shiftsToUpsert, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                    return shiftTransferToOfflineQuery.deleteShifts().execute()
                        .done(function (transferedShift) {
                        Commerce.RetailLogger.deleteShiftsSucceeded(shiftsToUpsert, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.modelManagersChainedRequestFactoryShiftTransferToOnlineDeleteFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        Commerce.RetailLogger.deleteShiftsFailed(shiftsToUpsert, Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                    });
                };
                ChainedRequestFactory.prototype.transferShifts = function (targetFactory, correlationId) {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (Commerce.Session.instance.OpenedShifts.length > 0) {
                        Commerce.Session.instance.AddToOrUpdateOpenedShifts(Commerce.Session.instance.Shift);
                        var shiftTransferQuery = new Proxy.CommerceContext(targetFactory).shifts();
                        var shifts = Commerce.Session.instance.OpenedShifts;
                        var shiftsToUpsert_2 = Commerce.ShiftHelper.GetShiftDetailsForLogging(shifts);
                        Commerce.RetailLogger.upsertShiftsCalled(shiftsToUpsert_2, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                        shiftTransferQuery.upsertShifts(Commerce.Session.instance.OpenedShifts).execute()
                            .done(function (transferdShift) {
                            Commerce.RetailLogger.upsertShiftsSucceeded(shiftsToUpsert_2, Commerce.ShiftHelper.getCurrentShift(), correlationId);
                            asyncResult.resolve();
                        })
                            .fail(function (errors) {
                            var currentState = Commerce.Session.instance.connectionStatusAsString();
                            Commerce.RetailLogger.modelManagersChainedRequestFactoryShiftTransferFailed(currentState, errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                            Commerce.RetailLogger.upsertShiftsFailed(shiftsToUpsert_2, Commerce.ShiftHelper.getCurrentShift(), Commerce.ErrorHelper.getErrorMessages(errors), correlationId);
                            asyncResult.reject([new Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_SWITCH_TRANSFER_FAILED)]);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                ChainedRequestFactory.prototype.transferCartToOffline = function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    if (Commerce.Session.instance.isCartInProgress) {
                        var cartToTransfer_1 = Commerce.ObjectExtensions.clone(Commerce.Session.instance.cart);
                        var cartTransferQuery = new Proxy.CommerceContext(this._offlineDataServiceRequestFactory).carts();
                        cartTransferQuery.create(cartToTransfer_1).execute()
                            .done(function (transferedCart) {
                            Commerce.Session.instance.cart = cartToTransfer_1;
                            asyncResult.resolve();
                        })
                            .fail(function (errors) {
                            Commerce.RetailLogger.modelManagersChainedRequestFactoryCartTransferToOfflineFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                            asyncResult.reject([new Proxy.Entities.Error(Commerce.ErrorTypeEnum.CANNOT_SWITCH_TRANSFER_FAILED)]);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                ChainedRequestFactory.prototype.setNextOnlineScanInterval = function (interval) {
                    if (Commerce.ApplicationContext.Instance.deviceConfiguration) {
                        var configuredInterval = Commerce.ApplicationContext.Instance.deviceConfiguration.ReconnectToOnlineInterval;
                        if (configuredInterval > 0) {
                            this._nextOnlineScan = Date.now() + ((interval >= 0 ? interval : configuredInterval) * 60 * 1000);
                        }
                        else {
                            this._nextOnlineScan = Date.now() + this._defaultRetryInterval * 60 * 1000;
                        }
                    }
                };
                ChainedRequestFactory.prototype.forceStartOfflineUpload = function () {
                    var asyncService = Commerce.AsyncService.instance;
                    clearTimeout(Commerce.Session.instance.offlineParameters.syncUploadOfflineData);
                    Commerce.Session.instance.offlineParameters.syncUploadOfflineData = 0;
                    asyncService.executeUpload();
                };
                return ChainedRequestFactory;
            }());
            Requests.ChainedRequestFactory = ChainedRequestFactory;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var CommerceAuthenticationRequest = (function () {
                function CommerceAuthenticationRequest(endpointUri, dataServiceQuery) {
                    this.endpointUri = endpointUri;
                    this.apiName = dataServiceQuery.action;
                    this.data = dataServiceQuery.data || {};
                    this.dataType = dataServiceQuery.dataType;
                }
                CommerceAuthenticationRequest.prototype.id = function () {
                    throw new Error("Not supported.");
                };
                CommerceAuthenticationRequest.prototype.execute = function () {
                    var _this = this;
                    var url = Commerce.StringExtensions.format("{0}/{1}", this.endpointUri, this.apiName);
                    var headers = {};
                    var data = null;
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.DEVICE)
                            .done(function (authenticationToken) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(authenticationToken)) {
                                headers[CommerceAuthenticationRequest.DEVICE_TOKEN_NAME] = authenticationToken.token;
                            }
                        });
                    }).enqueue(function () {
                        if (_this.apiName.toLowerCase() !== CommerceAuthenticationRequest.TOKEN_API_NAME
                            || !Commerce.StringExtensions.isNullOrWhitespace(_this.data[CommerceAuthenticationRequest.OPERATION_ID_NAME])) {
                            return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.USER)
                                .done(function (token) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(token) && !Commerce.StringExtensions.isNullOrWhitespace(token.token)) {
                                    headers[CommerceAuthenticationRequest.AUTHENTICATION_TOKEN_NAME] = Commerce.StringExtensions.format("{0} {1}", token.tokenType, token.token);
                                }
                            });
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(_this.dataType)) {
                            headers[Proxy.Common.HttpHeaders.CONTENT_TYPE] = _this.dataType;
                        }
                        headers[CommerceAuthenticationRequest.HTTP_ACCEPT_LANGUAGE_HEADER_NAME] = Commerce.RequestHelper.getRequestLocaleFromConfiguration();
                        var result = new Commerce.VoidAsyncResult();
                        var body = _this.getRequestBody();
                        var request = {
                            requestUri: url,
                            body: body,
                            headers: headers,
                            method: Proxy.Common.HttpVerbs.POST
                        };
                        Proxy.Common.XmlHttpRequestHelper.executeRequest(request, function (response) {
                            if (response.statusCode !== Proxy.Common.HttpStatusCodes.NO_CONTENT) {
                                data = JSON.parse(response.body);
                            }
                            result.resolve();
                        }, function (httpError) {
                            var errors = Proxy.Context.ErrorParser.parseErrorMessage(httpError.response);
                            var error = Commerce.ArrayExtensions.firstOrUndefined(errors);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                                var errorMessage = Commerce.ErrorHelper.getErrorMessages(errors);
                                if ((error.commerceExceptionType !== Proxy.ErrorHandling.CommerceExceptionTypes.USER_AUTHENTICATION_EXCEPTION_TYPE) &&
                                    (error.ErrorCode !== Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE ||
                                        Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online)) {
                                    Commerce.RetailLogger.coreLogOriginalUnauthorizedRetailServerResponse(correlationId, error.ErrorCode, errorMessage);
                                }
                            }
                            Commerce.ErrorHandler.authenticationErrorHandler(correlationId, errors);
                            result.reject(errors);
                        });
                        return result;
                    }).run().map(function () {
                        return data;
                    });
                };
                CommerceAuthenticationRequest.prototype.executeBatch = function (requests) {
                    throw new Error("Not supported.");
                };
                CommerceAuthenticationRequest.prototype.getRequestBody = function () {
                    if (Proxy.Common.MimeTypes.areSame(Proxy.Common.MimeTypes.APPLICATION_JSON, this.dataType)) {
                        return this.convertToJson(this.data);
                    }
                    else {
                        return this.convertToFormUrlEncoded(this.data);
                    }
                };
                CommerceAuthenticationRequest.prototype.convertToJson = function (data) {
                    return JSON.stringify(data);
                };
                CommerceAuthenticationRequest.prototype.convertToFormUrlEncoded = function (data) {
                    var bodyParameters = [];
                    Commerce.ObjectExtensions.forEachKeyValuePair(data, function (key, value) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(value)) {
                            bodyParameters.push(Commerce.StringExtensions.format("{0}{1}{2}", key, CommerceAuthenticationRequest.PARAMETER_KEY_VALUE_SEPARATOR, value));
                        }
                    });
                    var body = bodyParameters.join(CommerceAuthenticationRequest.PARAMETER_SEPARATOR);
                    return body;
                };
                CommerceAuthenticationRequest.DEVICE_TOKEN_NAME = "DeviceToken";
                CommerceAuthenticationRequest.AUTHENTICATION_TOKEN_NAME = "Authorization";
                CommerceAuthenticationRequest.PARAMETER_SEPARATOR = "&";
                CommerceAuthenticationRequest.PARAMETER_KEY_VALUE_SEPARATOR = "=";
                CommerceAuthenticationRequest.TOKEN_API_NAME = "token";
                CommerceAuthenticationRequest.OPERATION_ID_NAME = "operation_id";
                CommerceAuthenticationRequest.HTTP_ACCEPT_LANGUAGE_HEADER_NAME = "Accept-Language";
                return CommerceAuthenticationRequest;
            }());
            Requests.CommerceAuthenticationRequest = CommerceAuthenticationRequest;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var CommerceAuthenticationRequestFactory = (function () {
                function CommerceAuthenticationRequestFactory(endpointUri) {
                    this.setEndpointUrl(endpointUri);
                }
                CommerceAuthenticationRequestFactory.prototype.create = function (dataServiceQuery) {
                    return new Requests.CommerceAuthenticationRequest(this.endpointUri, dataServiceQuery);
                };
                CommerceAuthenticationRequestFactory.prototype.setEndpointUrl = function (serverUrl) {
                    var baseAuthEndpointUrl = (serverUrl || "").replace(/(\/)?(Commerce)?(\/)?$/i, "");
                    this.endpointUri = Commerce.StringExtensions.format("{0}/{1}", baseAuthEndpointUrl, CommerceAuthenticationRequestFactory.AUTH_ENDPOINT_NAME);
                };
                CommerceAuthenticationRequestFactory.AUTH_ENDPOINT_NAME = "Auth";
                return CommerceAuthenticationRequestFactory;
            }());
            Requests.CommerceAuthenticationRequestFactory = CommerceAuthenticationRequestFactory;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var CommerceRuntimeRequest = (function () {
                function CommerceRuntimeRequest(connectionUri, query) {
                    this._connectionUri = connectionUri;
                    this._query = query;
                    var formatedParameters = this.formatParameters(this._query);
                    this._uri = Commerce.StringExtensions.format("{0}/{1}Manager/{2}{3}", this._connectionUri, this._query.entityType || "StoreOperations", this._query.action, formatedParameters ? "?" + formatedParameters : "");
                }
                CommerceRuntimeRequest.prototype.id = function () {
                    return this._id;
                };
                CommerceRuntimeRequest.prototype.execute = function () {
                    var _this = this;
                    var result = null;
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _this.populateAuthenticationParameters();
                    }).enqueue(function () {
                        return _this.executeRequest().done(function (executionResult) {
                            result = executionResult;
                        });
                    }).enqueue(function () {
                        return _this.postExecuteRequest(result);
                    }).run().map(function () {
                        return result;
                    });
                };
                CommerceRuntimeRequest.prototype.executeBatch = function (requests) {
                    var asyncResult = new Commerce.AsyncResult();
                    var requestId = 1;
                    var responses = new Array();
                    var errors = [];
                    Commerce.Utilities.AsyncExecutionHelper.forEachAsync(requests, function (request, next) {
                        request._id = requestId++;
                        request.execute()
                            .done(function (result) {
                            responses[request._id] = result;
                            next();
                        })
                            .fail(function (errorResults) {
                            errors = errors.concat(errorResults);
                            next();
                        });
                    }, function () {
                        if (errors.length === 0) {
                            asyncResult.resolve(responses);
                        }
                        else {
                            asyncResult.reject(errors);
                        }
                    });
                    return asyncResult;
                };
                CommerceRuntimeRequest.encodeParameters = function (parameters) {
                    var formattedParameters = [];
                    Commerce.ObjectExtensions.forEachKeyValuePair(parameters, function (propertyName, propertyValue) {
                        formattedParameters.push(propertyName + "=" +
                            (Commerce.ObjectExtensions.isUndefined(propertyValue)
                                ? ""
                                : encodeURIComponent(Commerce.SerializationHelpers.stringifyForOffline(propertyValue))));
                    });
                    return formattedParameters;
                };
                CommerceRuntimeRequest.acquireToken = function (tokenType) {
                    return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(tokenType);
                };
                CommerceRuntimeRequest.isAuthenticationRequest = function (query) {
                    return query.entityType === CommerceRuntimeRequest.AUTHENTICATION_REQUEST_TYPE;
                };
                CommerceRuntimeRequest.prototype.executeRequest = function () {
                    var _this = this;
                    var asyncResult = new Commerce.AsyncResult();
                    var self = this;
                    var timeoutHandle = 0;
                    var executionCompleted = false;
                    var requestId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                    var requestUri = this._uri.split("?")[0];
                    Commerce.RetailLogger.modelManagersCommerceRuntimeRequestStarted(requestId, requestUri);
                    var performanceLogger = Commerce.PerformanceLogger.markStart("CommerceRuntimeRequest.executeRequest");
                    var handleTimeout = function () {
                        if (!executionCompleted) {
                            performanceLogger.markEnd();
                            executionCompleted = true;
                            var errors = [
                                new Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVER_TIMEOUT)
                            ];
                            Commerce.RetailLogger.modelManagersCommerceRuntimeRequestError(requestId, requestUri, requestUri + " timed out");
                            asyncResult.reject(errors);
                        }
                    };
                    var resolveOrRejectResult = function (response, isSuccess) {
                        if (isSuccess === void 0) { isSuccess = false; }
                        if (!executionCompleted) {
                            performanceLogger.markEnd();
                            executionCompleted = true;
                            clearTimeout(timeoutHandle);
                            if (isSuccess) {
                                _this.parseResponse(asyncResult, response, self._query.returnType);
                                Commerce.RetailLogger.modelManagersCommerceRuntimeRequestFinished(requestId, requestUri);
                            }
                            else {
                                var errors = Proxy.Context.ErrorParser.parseJSONError(response);
                                if (Commerce.ErrorHandler.shouldHandleCartVersionError()) {
                                    Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                                }
                                asyncResult.reject(errors);
                                if (errors[0].ErrorCode.toUpperCase() !==
                                    Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICENOTSUPPORTED.serverErrorCode) {
                                    Commerce.RetailLogger.modelManagersCommerceRuntimeRequestError(requestId, requestUri, response);
                                }
                            }
                        }
                    };
                    try {
                        Microsoft.Dynamics.Commerce.ClientBroker.CommerceRuntimeRequest.executeAsync(this._uri, requestId)
                            .done(function (response) {
                            var isSuccess = response.indexOf(CommerceRuntimeRequest.COMMERCE_RUNTIME_REQUEST_RESPONSE_PREFIX) === 0;
                            if (isSuccess) {
                                response = response.substr(CommerceRuntimeRequest.COMMERCE_RUNTIME_REQUEST_RESPONSE_PREFIX.length);
                            }
                            else if (response.indexOf(CommerceRuntimeRequest.COMMERCE_RUNTIME_REQUEST_ERROR_PREFIX) === 0) {
                                response = response.substr(CommerceRuntimeRequest.COMMERCE_RUNTIME_REQUEST_ERROR_PREFIX.length);
                            }
                            resolveOrRejectResult(response, isSuccess);
                        }, function (error) {
                            resolveOrRejectResult(error);
                        });
                    }
                    catch (error) {
                        resolveOrRejectResult(error);
                    }
                    if (Commerce.Config.connectionTimeout > 0) {
                        timeoutHandle = setTimeout(handleTimeout, Commerce.Config.connectionTimeout * 1000);
                    }
                    return asyncResult;
                };
                CommerceRuntimeRequest.prototype.populateAuthenticationParameters = function () {
                    var _this = this;
                    if (this._query.action !== CommerceRuntimeRequest.SET_AUTHENTICATION_TOKENS_ACTION) {
                        var deviceToken_1;
                        var userToken_1;
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return Commerce.VoidAsyncResult.join([
                                CommerceRuntimeRequest.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.DEVICE)
                                    .done(function (token) {
                                    deviceToken_1 = Commerce.ObjectExtensions.isNullOrUndefined(token) ? null : token.token;
                                }),
                                CommerceRuntimeRequest.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.USER)
                                    .done(function (token) {
                                    if (Commerce.ObjectExtensions.isNullOrUndefined(token) || Commerce.StringExtensions.isNullOrWhitespace(token.token)) {
                                        userToken_1 = null;
                                    }
                                    else if (token.tokenType === CommerceRuntimeRequest.COMMERCE_RUNTIME_TOKEN_TYPE) {
                                        userToken_1 = token.token;
                                    }
                                    else {
                                        userToken_1 = CommerceRuntimeRequest.currentCrtUserToken;
                                    }
                                })
                            ]);
                        }).enqueue(function () {
                            if (CommerceRuntimeRequest.currentDeviceToken !== deviceToken_1 || CommerceRuntimeRequest.currentCrtUserToken !== userToken_1) {
                                return (new CommerceRuntimeRequest(_this._connectionUri, {
                                    entityType: CommerceRuntimeRequest.AUTHENTICATION_REQUEST_TYPE,
                                    action: CommerceRuntimeRequest.SET_AUTHENTICATION_TOKENS_ACTION,
                                    data: {
                                        userToken: userToken_1,
                                        deviceToken: deviceToken_1
                                    }
                                })).execute();
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        }).enqueue(function () {
                            CommerceRuntimeRequest.currentDeviceToken = deviceToken_1;
                            CommerceRuntimeRequest.currentCrtUserToken = userToken_1;
                            return Commerce.VoidAsyncResult.createResolved();
                        }).run();
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                CommerceRuntimeRequest.prototype.postExecuteRequest = function (result) {
                    if (this._query.action.toLowerCase() === CommerceRuntimeRequest.TOKEN_ACTION_NAME) {
                        var commerceRuntimeToken = result;
                        var commerceToken = result;
                        commerceToken.id_token = commerceRuntimeToken.Token;
                        commerceToken.token_type = commerceRuntimeToken.SchemeName;
                        CommerceRuntimeRequest.currentCrtUserToken = commerceToken.id_token;
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                CommerceRuntimeRequest.prototype.formatParameters = function (query) {
                    var result = null;
                    var formattedParameters = [];
                    if (query.isReturnTypeACollection) {
                        formattedParameters.push("queryResultSettings=" + encodeURIComponent(JSON.stringify(query.resultSettings)));
                    }
                    if (query.key && query.action !== "Update") {
                        Commerce.ObjectExtensions.forEachKeyValuePair(query.key, function (propertyName, propertyValue) {
                            formattedParameters.push(propertyName + "=" + encodeURIComponent(JSON.stringify(propertyValue)));
                        });
                    }
                    if (query.data) {
                        if (query.data instanceof Proxy.Common.ODataOperationParameters) {
                            formattedParameters = formattedParameters.concat(CommerceRuntimeRequest.encodeParameters(query.data.parameters));
                        }
                        else if (CommerceRuntimeRequest.isAuthenticationRequest(query)) {
                            formattedParameters = formattedParameters.concat(CommerceRuntimeRequest.encodeParameters(query.data));
                        }
                        else {
                            formattedParameters.push("entity=" + encodeURIComponent(Commerce.SerializationHelpers.stringifyForOffline(query.data)));
                        }
                    }
                    formattedParameters.push("$locale=" + Commerce.RequestHelper.getRequestLocaleInternal(query));
                    if (formattedParameters.length > 0) {
                        result = formattedParameters.join("&");
                    }
                    return result;
                };
                CommerceRuntimeRequest.prototype.parseResponse = function (asyncResult, response, returnType) {
                    var jsonObject;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.StringExtensions.isEmptyOrWhitespace(response)) {
                        if (returnType === "string") {
                            jsonObject = Commerce.StringExtensions.EMPTY;
                        }
                        else {
                            jsonObject = null;
                        }
                    }
                    else {
                        jsonObject = JSON.parse(response);
                    }
                    asyncResult.resolve(Requests.ODataRequestBase.parseODataResult(jsonObject, returnType));
                };
                CommerceRuntimeRequest.AUTHENTICATION_REQUEST_TYPE = "Authentication";
                CommerceRuntimeRequest.SET_AUTHENTICATION_TOKENS_ACTION = "SetAuthenticationTokens";
                CommerceRuntimeRequest.TOKEN_ACTION_NAME = "token";
                CommerceRuntimeRequest.COMMERCE_RUNTIME_REQUEST_ERROR_PREFIX = "CommerceRuntimeRequestError_";
                CommerceRuntimeRequest.COMMERCE_RUNTIME_REQUEST_RESPONSE_PREFIX = "CommerceRuntimeRequestResponse_";
                CommerceRuntimeRequest.COMMERCE_RUNTIME_TOKEN_TYPE = "commerceruntime_token";
                CommerceRuntimeRequest.currentCrtUserToken = null;
                CommerceRuntimeRequest.currentDeviceToken = null;
                return CommerceRuntimeRequest;
            }());
            Requests.CommerceRuntimeRequest = CommerceRuntimeRequest;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var CommerceRuntimeRequestFactory = (function () {
                function CommerceRuntimeRequestFactory(connectionUri) {
                    this._connectionUri = connectionUri;
                }
                CommerceRuntimeRequestFactory.prototype.create = function (dataServiceQuery) {
                    return new Requests.CommerceRuntimeRequest(this._connectionUri, dataServiceQuery);
                };
                return CommerceRuntimeRequestFactory;
            }());
            Requests.CommerceRuntimeRequestFactory = CommerceRuntimeRequestFactory;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DataService;
    (function (DataService) {
        var DataServiceRequestHandler = (function (_super) {
            __extends(DataServiceRequestHandler, _super);
            function DataServiceRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DataServiceRequestHandler.prototype.supportedRequestType = function () {
                return DataService.DataServiceRequest;
            };
            DataServiceRequestHandler.prototype.executeAsync = function (request) {
                var dataServiceQuery = new Commerce.Proxy.Common.DataServiceQuery(Commerce.Model.Managers.Factory.getDataServiceRequestFactory(), request.entitySet, request.entityType, request.returnType, request.keys);
                var operationParameters = new Commerce.Proxy.Common.ODataOperationParameters();
                operationParameters.parameters = request.parameters;
                var dataServiceRequest = dataServiceQuery.createDataServiceRequestForOperation(request.method, request.isAction, request.returnType, request.isReturnTypeCollection ? request.isReturnTypeCollection.toString() : null, operationParameters);
                if (request.top) {
                    dataServiceQuery.top(request.top);
                }
                if (request.skip) {
                    dataServiceQuery.skip(request.skip);
                }
                if (request.inlineCount) {
                    dataServiceQuery.inlineCount();
                }
                if (request.locale) {
                    dataServiceQuery.locale(request.locale);
                }
                return dataServiceRequest.execute()
                    .map(function (value) {
                    return { canceled: false, data: { result: value } };
                }).getPromise();
            };
            return DataServiceRequestHandler;
        }(Commerce.RequestHandler));
        DataService.DataServiceRequestHandler = DataServiceRequestHandler;
    })(DataService = Commerce.DataService || (Commerce.DataService = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Common;
        (function (Common) {
            "use strict";
        })(Common = Proxy.Common || (Proxy.Common = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var ODataRequestBase = (function () {
                function ODataRequestBase(serverUri, query) {
                    this._serverUri = serverUri;
                    this.query = query;
                    this._hasOperationName = false;
                    this.enableCrossDomainCookies = true;
                    switch (query.action) {
                        case "Read":
                        case "ReadAll":
                            this._method = Proxy.Common.HttpVerbs.GET;
                            break;
                        case "Create":
                            this._method = Proxy.Common.HttpVerbs.POST;
                            break;
                        case "Update":
                            this._method = Proxy.Common.HttpVerbs.PATCH;
                            break;
                        case "Delete":
                            this._method = Proxy.Common.HttpVerbs.DELETE;
                            break;
                        default:
                            if (query.isAction) {
                                this._method = Proxy.Common.HttpVerbs.POST;
                            }
                            else {
                                this._method = Proxy.Common.HttpVerbs.GET;
                            }
                            this._hasOperationName = true;
                            break;
                    }
                    this._requestUri = this.getRequestUri();
                }
                Object.defineProperty(ODataRequestBase.prototype, "requestUri", {
                    get: function () {
                        return this._requestUri;
                    },
                    enumerable: true,
                    configurable: true
                });
                ODataRequestBase.parseODataResult = function (data, resultType) {
                    var result = data;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(data)) {
                        var resultSet = Commerce.ObjectExtensions.isNullOrUndefined(data.value) ? data.Results : data.value;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(resultSet)) {
                            if (Commerce.ObjectExtensions.isNumber(resultSet) || Commerce.ObjectExtensions.isString(resultSet)
                                || Commerce.ObjectExtensions.isBoolean(resultSet)) {
                                return resultSet;
                            }
                            var totalCount = data[ODataRequestBase.ODATA_TOTAL_COUNT_PROPERTY] || data.TotalCount;
                            var hasNextPage = data[ODataRequestBase.ODATA_HAS_NEXT_PAGE_PROPERTY] || data.HasNextPage;
                            if (Commerce.ObjectExtensions.isUndefined(hasNextPage)) {
                                hasNextPage = false;
                            }
                            if (resultType) {
                                if (Object.prototype.toString.call(resultSet) === "[object Array]") {
                                    for (var i = 0; i < resultSet.length; i++) {
                                        resultSet[i] = new resultType(resultSet[i]);
                                    }
                                }
                            }
                            resultSet.totalCount = totalCount;
                            resultSet.hasNextPage = hasNextPage;
                            result = resultSet;
                        }
                        else {
                            if (resultType) {
                                result = new resultType(result);
                            }
                        }
                    }
                    return result;
                };
                ODataRequestBase.prototype.id = function () {
                    return this._id;
                };
                ODataRequestBase.prototype.execute = function () {
                    var _this = this;
                    var requestHeaders;
                    var result;
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _this.getRequestHeaders().done(function (headers) {
                            requestHeaders = headers;
                        });
                    }).enqueue(function () {
                        var asyncResult = new Commerce.AsyncResult();
                        var request = {
                            requestUri: _this.getRequestUri(),
                            method: _this._method,
                            data: _this.toJson(_this.query.data),
                            headers: requestHeaders,
                            useCrossDomainCookies: _this.enableCrossDomainCookies
                        };
                        var performanceLogger = Commerce.PerformanceLogger.markStart("ODataRequestBase.execute", false, request.requestUri);
                        _this.responseStatusCode = -1;
                        OData.request(request, function (data, response) {
                            performanceLogger.markEnd();
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(response)) {
                                _this.responseStatusCode = response.statusCode;
                            }
                            asyncResult.resolve(ODataRequestBase.parseODataResult(data, _this.query.returnType));
                        }, function (errorResult) {
                            performanceLogger.markEnd();
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(errorResult) && !Commerce.ObjectExtensions.isNullOrUndefined(errorResult.response)) {
                                _this.responseStatusCode = errorResult.response.statusCode;
                            }
                            asyncResult.reject(_this.parseErrorResponse(errorResult));
                        }, OData.jsonHandler);
                        return asyncResult.done(function (response) {
                            result = response;
                        });
                    }).run().map(function () {
                        return result;
                    });
                };
                ODataRequestBase.prototype.executeBatch = function (requests) {
                    var _this = this;
                    var batchRequestUri = this._serverUri + ODataRequestBase.BATCH_ENDPOINT_POSTFIX;
                    var batchRequest;
                    var result = null;
                    var performanceLogger = Commerce.PerformanceLogger.markStart("ODataRequestBase.executeBatch");
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _this.buildBatchRequest(batchRequestUri, requests).done(function (_batchRequest) {
                            batchRequest = _batchRequest;
                        });
                    }).enqueue(function () {
                        var asyncResult = new Commerce.AsyncResult();
                        _this.responseStatusCode = -1;
                        OData.request(batchRequest, function (data, response) {
                            performanceLogger.markEnd();
                            var responses = new Array();
                            var errors = _this.parseBatchResponses(data.__batchResponses, requests, responses);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(response)) {
                                _this.responseStatusCode = response.statusCode;
                            }
                            if (errors.length === 0) {
                                Commerce.RetailLogger.modelManagersODataExecuteBatchSuccess(batchRequestUri);
                                asyncResult.resolve(responses);
                            }
                            else {
                                Commerce.RetailLogger.modelManagersODataExecuteBatchFailed(batchRequestUri, errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                                asyncResult.reject(errors);
                            }
                        }, function (error) {
                            performanceLogger.markEnd();
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(error) && !Commerce.ObjectExtensions.isNullOrUndefined(error.response)) {
                                _this.responseStatusCode = error.response.statusCode;
                            }
                            Commerce.RetailLogger.modelManagersODataExecuteBatchFailed(batchRequestUri, null, null);
                            asyncResult.reject(_this.parseErrorResponse(error));
                        }, OData.batchHandler);
                        return asyncResult.done(function (_result) {
                            result = _result;
                        });
                    }).run().map(function () {
                        return result;
                    });
                };
                ODataRequestBase.prototype.parseErrorResponse = function (errorResponse) {
                    return Proxy.Context.ErrorParser.parseErrorMessage(errorResponse.response);
                };
                ODataRequestBase.prototype.getRequestHeaders = function () {
                    var headers = {};
                    var headerNames = Object.keys(this.query.headers);
                    for (var i = 0; i < headerNames.length; i++) {
                        var headerName = headerNames[i];
                        var headerValue = this.query.headers[headerName];
                        if (!Commerce.StringExtensions.isNullOrWhitespace(headerValue)) {
                            headers[headerName] = headerValue;
                        }
                    }
                    headers[ODataRequestBase.HTTP_ACCEPT_LANGUAGE_HEADER_NAME] = Commerce.RequestHelper.getRequestLocaleInternal(this.query);
                    return Commerce.AsyncResult.createResolved(headers);
                };
                ODataRequestBase.prototype.addParameter = function (requestUri, key, value) {
                    if (value) {
                        var parameterSeparator = "?";
                        if (requestUri.indexOf(parameterSeparator) > -1) {
                            parameterSeparator = "&";
                        }
                        return requestUri + parameterSeparator + key + "=" + value;
                    }
                    else {
                        return requestUri;
                    }
                };
                ODataRequestBase.prototype.getRequestUri = function () {
                    var requestUri = this._serverUri;
                    requestUri += this.getEntityName();
                    requestUri += this.getOperationName();
                    requestUri += this.getQueryString();
                    return requestUri;
                };
                ODataRequestBase.prototype.getEntityName = function () {
                    return this.query.entitySet
                        ? "/" + this.query.entitySet + (this.query.key
                            ? "(" + this.formatKey(this.query.key) + ")"
                            : Commerce.StringExtensions.EMPTY)
                        : Commerce.StringExtensions.EMPTY;
                };
                ODataRequestBase.prototype.getOperationName = function () {
                    var operationName = Commerce.StringExtensions.EMPTY;
                    if (this._hasOperationName) {
                        operationName += "/" + this.query.action;
                        if (!this.query.isAction && this.query.data instanceof Proxy.Common.ODataOperationParameters) {
                            operationName += "(" + this.formatFunctionParameter(this.query.data.parameters) + ")";
                        }
                    }
                    return operationName;
                };
                ODataRequestBase.prototype.getQueryString = function () {
                    var _this = this;
                    var queryString = Commerce.StringExtensions.EMPTY;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(this.query.filterSettings)) {
                        queryString = this.addParameter(queryString, "$filter", this.query.filterSettings);
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this.query.resultSettings)) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(this.query.resultSettings.Paging)) {
                            var paging = this.query.resultSettings.Paging;
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(paging.Top)) {
                                queryString = this.addParameter(queryString, "$top", paging.Top);
                            }
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(paging.Skip)) {
                                queryString = this.addParameter(queryString, "$skip", paging.Skip);
                            }
                        }
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(this.query.resultSettings.Sorting)
                            && Commerce.ArrayExtensions.hasElements(this.query.resultSettings.Sorting.Columns)) {
                            this.query.resultSettings.Sorting.Columns.forEach(function (column) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(column)
                                    && !Commerce.StringExtensions.isNullOrWhitespace(column.ColumnName)) {
                                    var orderByColumn = Commerce.StringExtensions.format("{0}%20{1}", column.ColumnName, column.IsDescending ? "desc" : "asc");
                                    queryString = _this.addParameter(queryString, "$orderby", orderByColumn);
                                }
                            });
                        }
                    }
                    if (this.query.inlineCount) {
                        queryString = this.addParameter(queryString, "$inlinecount", "allpages");
                    }
                    if (Commerce.ArrayExtensions.hasElements(this._queryStringParams)) {
                        this._queryStringParams.forEach(function (param) {
                            queryString = _this.addParameter(queryString, param.alias, "'" + param.value + "'");
                        });
                    }
                    return queryString;
                };
                ODataRequestBase.prototype.buildBatchRequest = function (batchRequestUri, requests) {
                    var _this = this;
                    var requestId = 1;
                    var requestHeaders;
                    var odataBatchRequest;
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _this.getRequestHeaders().done(function (headers) {
                            requestHeaders = headers;
                        });
                    }).enqueue(function () {
                        odataBatchRequest = {
                            requestUri: batchRequestUri,
                            method: Proxy.Common.HttpVerbs.POST,
                            data: { __batchRequests: [] },
                            headers: requestHeaders
                        };
                        var batchRequests = odataBatchRequest.data.__batchRequests;
                        var changeRequests;
                        requests.forEach(function (request) {
                            request._id = requestId++;
                            var odataRequest = {
                                requestUri: request.requestUri,
                                method: request._method,
                                data: _this.toJson(request.query.data),
                                headers: { "Content-ID": request.id(), "Prefer": "return=representation" }
                            };
                            if (request._method === Proxy.Common.HttpVerbs.GET) {
                                batchRequests.push(odataRequest);
                            }
                            else {
                                if (!changeRequests) {
                                    changeRequests = [];
                                    batchRequests.push({ __changeRequests: changeRequests });
                                }
                                changeRequests.push(odataRequest);
                            }
                        });
                        return Commerce.VoidAsyncResult.createResolved();
                    }).run().map(function () {
                        return odataBatchRequest;
                    });
                };
                ODataRequestBase.prototype.parseBatchResponses = function (batchResponses, requests, responses) {
                    var _this = this;
                    var errors = new Array();
                    batchResponses.forEach(function (response) {
                        if (response.__changeResponses) {
                            errors = errors.concat(_this.parseBatchResponses(response.__changeResponses, requests, responses));
                        }
                        else {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(response.message)) {
                                var requestId = parseInt(response.headers["Content-ID"], 10);
                                responses[requestId] = ODataRequestBase.parseODataResult(response.data, requests[requestId - 1].query.returnType);
                            }
                            else {
                                errors = errors.concat(_this.parseErrorResponse(response.response));
                            }
                        }
                    });
                    return errors;
                };
                ODataRequestBase.prototype.toJson = function (data, parent, modifyDataInPlace) {
                    var _this = this;
                    if (modifyDataInPlace === void 0) { modifyDataInPlace = false; }
                    var clone = data;
                    if (data === null) {
                        return null;
                    }
                    else if (typeof data === "undefined") {
                        return data;
                    }
                    else if (typeof (data) !== "object") {
                        return data;
                    }
                    if (data instanceof Proxy.Common.ODataOperationParameters) {
                        data = data.parameters;
                        parent = null;
                    }
                    else {
                        parent = data;
                    }
                    if (!modifyDataInPlace) {
                        clone = $.extend({}, data);
                    }
                    var originalKeys = Object.keys(data);
                    Object.keys(clone).forEach(function (propertyName) {
                        if (originalKeys.indexOf(propertyName) === -1) {
                            delete clone[propertyName];
                            return;
                        }
                        var property = clone[propertyName];
                        var isUndefined = Commerce.ObjectExtensions.isUndefined(property);
                        if (!isUndefined) {
                            var value = void 0;
                            var isNull = Commerce.ObjectExtensions.isNull(property);
                            var isObject = Commerce.ObjectExtensions.isObject(property);
                            if (isNull) {
                                value = null;
                            }
                            else if (isObject) {
                                if (property instanceof Array) {
                                    value = _this.arrayToJson(property, parent, modifyDataInPlace);
                                }
                                else if (property instanceof Date) {
                                    value = _this.toDateTimeOffset(property);
                                }
                                else {
                                    value = _this.toJson(property, clone, modifyDataInPlace);
                                }
                            }
                            else {
                                value = property;
                            }
                            clone[propertyName] = value;
                        }
                    });
                    return clone;
                };
                ODataRequestBase.prototype.arrayToJson = function (array, parent, modifyDataInPlace) {
                    if (modifyDataInPlace === void 0) { modifyDataInPlace = false; }
                    var data = [];
                    for (var i = 0; i < array.length; i++) {
                        data[i] = this.toJson(array[i], array, modifyDataInPlace);
                    }
                    return data;
                };
                ODataRequestBase.prototype.toDateTimeOffset = function (dateTime) {
                    if (!dateTime[ODataRequestBase.ODATA_METADATA_EDM_PROPERTY_NAME]
                        || !dateTime[ODataRequestBase.ODATA_METADATA_OFFSET_PROPERTY_NAME]) {
                        var pad = function (val) { return val < 10 ? "0" + val : val.toString(); };
                        var sign = (dateTime.getTimezoneOffset() > 0) ? "-" : "+";
                        var offset = Math.abs(dateTime.getTimezoneOffset());
                        var hours = pad(Math.floor(offset / 60));
                        var minutes = pad(offset % 60);
                        dateTime[ODataRequestBase.ODATA_METADATA_EDM_PROPERTY_NAME] = "Edm.DateTimeOffset";
                        dateTime[ODataRequestBase.ODATA_METADATA_OFFSET_PROPERTY_NAME] = sign + hours + ":" + minutes;
                    }
                    return dateTime;
                };
                ODataRequestBase.prototype.formatFunctionParameter = function (parameters) {
                    var _this = this;
                    var result = Commerce.StringExtensions.EMPTY;
                    var paramAliasCount = 1;
                    if (parameters) {
                        this._queryStringParams = new Array();
                        Object.keys(parameters).forEach(function (parameter) {
                            var paramName = parameter;
                            var paramValue = parameters[paramName];
                            if (!Commerce.StringExtensions.isEmpty(result)) {
                                result += ",";
                            }
                            if (Commerce.ObjectExtensions.isUndefined(paramValue)) {
                                return;
                            }
                            else if (typeof paramValue === "string") {
                                var paramAlias = _this.getParameterAlias(paramAliasCount++);
                                result += paramName + "=" + paramAlias;
                                _this._queryStringParams.push({ alias: paramAlias, value: _this.encodeODataURIParameterValue(paramValue) });
                            }
                            else {
                                result += paramName + "=" + _this.encodeODataURIParameterValue(paramValue);
                            }
                        });
                    }
                    return result;
                };
                ODataRequestBase.prototype.getParameterAlias = function (position) {
                    return Commerce.StringExtensions.format("@p{0}", position);
                };
                ODataRequestBase.prototype.encodeODataURIParameterValue = function (literal) {
                    return encodeURIComponent(literal)
                        .replace(ODataRequestBase.SINGLE_QUOTE_REGEX, "\'\'")
                        .replace(ODataRequestBase.ADDITIONAL_RFC3986_RESERVED_CHAR_REGEX, function (ch) {
                        return "%" + ch.charCodeAt(0).toString(ODataRequestBase.HEXDECIMAL_RADIX);
                    });
                };
                ODataRequestBase.prototype.formatKey = function (key) {
                    var result = null;
                    if (key) {
                        var formattedKey = [];
                        var propertyName = void 0;
                        for (var property in key) {
                            if (key.hasOwnProperty(property)) {
                                propertyName = property;
                                if (typeof key[propertyName] === "string") {
                                    formattedKey.push(propertyName + "='" + this.encodeODataURIParameterValue(key[propertyName]) + "'");
                                }
                                else {
                                    formattedKey.push(propertyName + "=" + this.encodeODataURIParameterValue(key[propertyName]));
                                }
                            }
                        }
                        if (formattedKey.length === 1) {
                            if (typeof key[propertyName] === "string") {
                                result = "'" + this.encodeODataURIParameterValue(key[propertyName]) + "'";
                            }
                            else {
                                result = this.encodeODataURIParameterValue(key[propertyName]);
                            }
                        }
                        else {
                            result = formattedKey.join();
                        }
                    }
                    return result;
                };
                ODataRequestBase.ODATA_TOTAL_COUNT_PROPERTY = "@odata.count";
                ODataRequestBase.ODATA_HAS_NEXT_PAGE_PROPERTY = "@odata.nextLink";
                ODataRequestBase.ODATA_METADATA_EDM_PROPERTY_NAME = "__edmType";
                ODataRequestBase.ODATA_METADATA_OFFSET_PROPERTY_NAME = "__offset";
                ODataRequestBase.HTTP_ACCEPT_LANGUAGE_HEADER_NAME = "Accept-Language";
                ODataRequestBase.BATCH_ENDPOINT_POSTFIX = "/$batch";
                ODataRequestBase.HEXDECIMAL_RADIX = 16;
                ODataRequestBase.SINGLE_QUOTE_REGEX = /\'/g;
                ODataRequestBase.ADDITIONAL_RFC3986_RESERVED_CHAR_REGEX = /[!()*]/g;
                return ODataRequestBase;
            }());
            Requests.ODataRequestBase = ODataRequestBase;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var LocatorServiceRequest = (function (_super) {
                __extends(LocatorServiceRequest, _super);
                function LocatorServiceRequest(serverUri, query) {
                    var _this = _super.call(this, serverUri, query) || this;
                    _this.enableCrossDomainCookies = false;
                    return _this;
                }
                LocatorServiceRequest.prototype.execute = function () {
                    var _this = this;
                    this.activityId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                    Commerce.RetailLogger.modelManagersLocatorServiceRequestStarted(this.requestUri, this.activityId);
                    return _super.prototype.execute.call(this).done(function () {
                        Commerce.RetailLogger.modelManagersLocatorServiceRequestFinished(_this.activityId);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.modelManagersLocatorServiceRequestException(Commerce.ErrorHelper.getErrorMessages(errors), _this.activityId);
                    });
                };
                LocatorServiceRequest.prototype.getRequestHeaders = function () {
                    var _this = this;
                    var headers;
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _super.prototype.getRequestHeaders.call(_this).done(function (headersResponse) {
                            headers = headersResponse;
                        });
                    }).enqueue(function () {
                        headers[LocatorServiceRequest.ACTIVITY_ID_HEADER_NAME] = _this.activityId;
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.LOCATOR_SERVICE)
                            .done(function (authenticationToken) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(authenticationToken)) {
                                headers[LocatorServiceRequest.AUTHENTICATION_HEADER_NAME] = Commerce.StringExtensions.format(LocatorServiceRequest.AUTHENTICATION_TOKEN_FORMAT, authenticationToken.tokenType, authenticationToken.token);
                            }
                        });
                    }).run().map(function () {
                        return headers;
                    });
                };
                LocatorServiceRequest.ACTIVITY_ID_HEADER_NAME = "ActivityId";
                LocatorServiceRequest.AUTHENTICATION_HEADER_NAME = "Authorization";
                LocatorServiceRequest.AUTHENTICATION_TOKEN_FORMAT = "{0} {1}";
                return LocatorServiceRequest;
            }(Requests.ODataRequestBase));
            Requests.LocatorServiceRequest = LocatorServiceRequest;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var LocatorServiceRequestFactory = (function () {
                function LocatorServiceRequestFactory(serverUri) {
                    this.serverUri = serverUri;
                }
                LocatorServiceRequestFactory.prototype.create = function (dataServiceQuery) {
                    return new Requests.LocatorServiceRequest(this.serverUri, dataServiceQuery);
                };
                return LocatorServiceRequestFactory;
            }());
            Requests.LocatorServiceRequestFactory = LocatorServiceRequestFactory;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var RetailServerRequest = (function (_super) {
                __extends(RetailServerRequest, _super);
                function RetailServerRequest(serverUri, query) {
                    return _super.call(this, serverUri, query) || this;
                }
                RetailServerRequest.prototype.execute = function () {
                    var _this = this;
                    if (Commerce.ArrayExtensions.hasElement(["elevateuser", "reverttoself"], this.query.action.toLowerCase())) {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                    var asyncResult = new Commerce.AsyncResult();
                    if (!this.query.isReturnTypeACollection || this.query.resultSettings.Paging.Top >= 0) {
                        this.loadPage(asyncResult);
                    }
                    else {
                        this.getAllPages(asyncResult, 0);
                    }
                    return asyncResult.recoverOnFailure(function (errors) { return _this.handleRedirection(errors); });
                };
                RetailServerRequest.prototype.parseErrorResponse = function (errorResponse) {
                    var errors = _super.prototype.parseErrorResponse.call(this, errorResponse);
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    if (this.query.action.toLowerCase() !== "endsession") {
                        Commerce.ErrorHandler.authenticationErrorHandler(correlationId, errors);
                        if (Commerce.ErrorHandler.shouldHandleCartVersionError()) {
                            Commerce.ErrorHandler.cartVersionErrorHandler(errors, true);
                        }
                    }
                    return errors;
                };
                RetailServerRequest.prototype.getRequestHeaders = function () {
                    var _this = this;
                    var headers;
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _super.prototype.getRequestHeaders.call(_this).done(function (headersResponse) {
                            headers = headersResponse;
                        });
                    }).enqueue(function () {
                        headers[RetailServerRequest.PREFER_HEADER_NAME] = "return=representation";
                        headers[RetailServerRequest.REQUEST_ID_HEADER_NAME] = _this.requestId;
                        headers[RetailServerRequest.APP_SESSION_ID_HEADER_NAME] = Microsoft.Dynamics.Diagnostics.TypeScriptCore.LoggerBase.getAppSessionId();
                        headers[RetailServerRequest.USER_SESSION_ID_HEADER_NAME] = Microsoft.Dynamics.Diagnostics.TypeScriptCore.LoggerBase.getUserSessionId();
                        return Commerce.VoidAsyncResult.createResolved();
                    }).enqueue(function () {
                        return _this.addAuthenticationTokenToHeader(headers, RetailServerRequest.AUTHENTICATION_TOKEN_NAME, RetailServerRequest.AUTHENTICATION_TOKEN_FORMAT, Commerce.Authentication.AuthenticationProviderResourceType.USER);
                    }).enqueue(function () {
                        return _this.addAuthenticationTokenToHeader(headers, RetailServerRequest.DEVICE_TOKEN_NAME, RetailServerRequest.DEVICE_TOKEN_FORMAT, Commerce.Authentication.AuthenticationProviderResourceType.DEVICE);
                    }).run().map(function () {
                        return headers;
                    });
                };
                RetailServerRequest.prototype.getRequestUri = function () {
                    var requestUri = _super.prototype.getRequestUri.call(this);
                    if (Commerce.ArrayExtensions.hasElements(this.query.expands)) {
                        requestUri = this.addParameter(requestUri, "$expand", this.query.expands.join());
                    }
                    if (!Commerce.StringExtensions.isNullOrWhitespace(Proxy.CommerceContext.ApiVersion)) {
                        requestUri = this.addParameter(requestUri, "api-version", Proxy.CommerceContext.ApiVersion);
                    }
                    return requestUri;
                };
                RetailServerRequest.prototype.loadPage = function (asyncResult, skip) {
                    var _this = this;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                        this.query.resultSettings.Paging.Skip = skip;
                    }
                    if (this.query.isReturnTypeACollection) {
                        this.query.resultSettings.Paging.Top = this.query.resultSettings.Paging.Top || Commerce.Config.defaultPageSize;
                    }
                    this.requestId = Microsoft.Dynamics.Diagnostics.TypeScriptCore.Utils.generateGuid();
                    Commerce.RetailLogger.modelManagersRetailServerRequestStarted(this.requestId, this.requestUri);
                    _super.prototype.execute.call(this).done(function (result) {
                        Commerce.RetailLogger.modelManagersRetailServerRequestFinished(_this.requestId, _this.requestUri, _this.responseStatusCode);
                        asyncResult.resolve(result);
                    }).fail(function (errors) {
                        if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online
                            || _this.requestUri.search(RetailServerRequest.OFFLINE_SYNC_API_NAME) === -1) {
                            var errorsBySeverity = Commerce.ErrorHelper.getErrorsBySeverity(errors);
                            if ((errorsBySeverity.errorsOfSeverityError && Commerce.ArrayExtensions.hasElements(errorsBySeverity.errorsOfSeverityError)) ||
                                (errorsBySeverity.errorsOfSeverityInformational && Commerce.ArrayExtensions.hasElements(errorsBySeverity.errorsOfSeverityInformational))) {
                                if (Commerce.ArrayExtensions.hasElements(errorsBySeverity.errorsOfSeverityError)) {
                                    Commerce.RetailLogger.modelManagersRetailServerRequestError(_this.requestId, _this.requestUri, Commerce.ErrorHelper.getErrorMessages(errorsBySeverity.errorsOfSeverityError), _this.responseStatusCode);
                                }
                                if (Commerce.ArrayExtensions.hasElements(errorsBySeverity.errorsOfSeverityInformational)) {
                                    Commerce.RetailLogger.modelManagersRetailServerRequestErrorAsInformational(_this.requestId, _this.requestUri, Commerce.ErrorHelper.getErrorMessages(errorsBySeverity.errorsOfSeverityInformational), _this.responseStatusCode);
                                }
                            }
                            else {
                                Commerce.RetailLogger.modelManagersRetailServerRequestError(_this.requestId, _this.requestUri, Commerce.ErrorHelper.getErrorMessages(errors), _this.responseStatusCode);
                            }
                        }
                        asyncResult.reject(errors);
                    });
                };
                RetailServerRequest.prototype.getAllPages = function (asyncResult, skip, results) {
                    var _this = this;
                    skip = skip || 0;
                    var top = Commerce.Config.defaultPageSize;
                    var getPageAsyncResult = new Commerce.AsyncResult();
                    this.query.resultSettings.Paging.Top = top;
                    results = results || [];
                    getPageAsyncResult.done(function (pageResult) {
                        if (pageResult) {
                            if (typeof pageResult.length === "number") {
                                results = results.concat(pageResult);
                                if (pageResult.length > top) {
                                    asyncResult.resolve(results);
                                }
                                else if (pageResult.length < top) {
                                    if (pageResult.hasNextPage) {
                                        skip += pageResult.length;
                                        _this.getAllPages(asyncResult, skip, results);
                                    }
                                    else {
                                        asyncResult.resolve(results);
                                    }
                                }
                                else {
                                    skip += top;
                                    _this.getAllPages(asyncResult, skip, results);
                                }
                            }
                            else {
                                results.push(pageResult);
                                asyncResult.resolve(results);
                            }
                        }
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    this.loadPage(getPageAsyncResult, skip);
                };
                RetailServerRequest.prototype.addAuthenticationTokenToHeader = function (header, headerName, headerValueFormat, authenticationResourceType) {
                    return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(authenticationResourceType)
                        .done(function (token) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(token) && !Commerce.StringExtensions.isNullOrWhitespace(token.token)
                            && token.tokenType !== RetailServerRequest.COMMERCE_RUNTIME_TOKEN_TYPE) {
                            header[headerName] = Commerce.StringExtensions.format(headerValueFormat, token.tokenType, token.token);
                        }
                    });
                };
                RetailServerRequest.prototype.handleRedirection = function (errors) {
                    if (Commerce.ArrayExtensions.hasElements(errors) && !Commerce.StringExtensions.compare(errors[0].ErrorCode, Commerce.ErrorTypeEnum.RETAIL_SERVER_REDIRECT_ERROR)) {
                        var redirectUrl = errors[0].extraData;
                        Commerce.RetailLogger.retailServerRequestRedirection(redirectUrl);
                        Commerce.ApplicationContext.updateServerUrl(redirectUrl);
                        return new RetailServerRequest(redirectUrl, this.query).execute();
                    }
                    return null;
                };
                RetailServerRequest.PREFER_HEADER_NAME = "Prefer";
                RetailServerRequest.REQUEST_ID_HEADER_NAME = "RequestId";
                RetailServerRequest.APP_SESSION_ID_HEADER_NAME = "AppSessionId";
                RetailServerRequest.USER_SESSION_ID_HEADER_NAME = "UserSessionId";
                RetailServerRequest.AUTHENTICATION_TOKEN_NAME = "Authorization";
                RetailServerRequest.AUTHENTICATION_TOKEN_FORMAT = "{0} {1}";
                RetailServerRequest.DEVICE_TOKEN_NAME = "DeviceToken";
                RetailServerRequest.DEVICE_TOKEN_FORMAT = "{1}";
                RetailServerRequest.COMMERCE_RUNTIME_TOKEN_TYPE = "commerceruntime_token";
                RetailServerRequest.OFFLINE_SYNC_API_NAME = "GetTerminalDataStoreName";
                return RetailServerRequest;
            }(Requests.ODataRequestBase));
            Requests.RetailServerRequest = RetailServerRequest;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Proxy;
    (function (Proxy) {
        var Requests;
        (function (Requests) {
            "use strict";
            var RetailServerRequestFactory = (function () {
                function RetailServerRequestFactory(serverUri) {
                    this._serverUri = serverUri;
                }
                RetailServerRequestFactory.prototype.create = function (dataServiceQuery) {
                    return new Requests.RetailServerRequest(this._serverUri, dataServiceQuery);
                };
                return RetailServerRequestFactory;
            }());
            Requests.RetailServerRequestFactory = RetailServerRequestFactory;
        })(Requests = Proxy.Requests || (Proxy.Requests = {}));
    })(Proxy = Commerce.Proxy || (Commerce.Proxy = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var AsyncServiceManager = (function () {
                    function AsyncServiceManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    AsyncServiceManager.prototype.getDownloadIntervalAsync = function (dataStoreName) {
                        var request = this._commerceContext.storeOperations().getDownloadInterval(dataStoreName);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.getDownloadLinkAsync = function (dataStoreName, downloadSessionId) {
                        var request = this._commerceContext.storeOperations().getDownloadLink(dataStoreName, downloadSessionId);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.getDownloadSessionsAsync = function (dataStoreName) {
                        var request = this._commerceContext.storeOperations()
                            .getDownloadSessions(dataStoreName);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.getInitialDownloadSessionsAsync = function (dataStoreName) {
                        var request = this._commerceContext.storeOperations()
                            .getInitialDownloadSessions(dataStoreName);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.getTerminalDataStoreNameAsync = function (dataStoreName) {
                        var request = this._commerceContext.storeOperations().getTerminalDataStoreName(dataStoreName);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.getUploadJobDefinitionsAsync = function (dataStoreName) {
                        var request = this._commerceContext.storeOperations().getUploadJobDefinitions(dataStoreName);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.getUploadIntervalAsync = function (dataStoreName) {
                        var request = this._commerceContext.storeOperations().getUploadInterval(dataStoreName);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.syncOfflineTransactionAsync = function (offlineTransactionData) {
                        var request = this._commerceContext.storeOperations()
                            .postOfflineTransactions(offlineTransactionData);
                        return request.execute();
                    };
                    AsyncServiceManager.prototype.updateDownloadSessionAsync = function (downloadSession) {
                        var request = this._commerceContext.storeOperations().updateDownloadSession(downloadSession);
                        return request.execute();
                    };
                    return AsyncServiceManager;
                }());
                RetailServer.AsyncServiceManager = AsyncServiceManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var AuditEventManager = (function () {
                    function AuditEventManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    AuditEventManager.prototype.registerAuditEvent = function (auditEvent) {
                        var request = this._commerceContext.storeOperations().registerAndGetAuditEvent(auditEvent);
                        return request.execute();
                    };
                    return AuditEventManager;
                }());
                RetailServer.AuditEventManager = AuditEventManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var AuthenticateManager = (function () {
                    function AuthenticateManager(commerceContext, commerceAuthenticationContext) {
                        this._commerceContext = null;
                        this.commerceAuthenticationContext = null;
                        this._commerceContext = commerceContext;
                        this.commerceAuthenticationContext = commerceAuthenticationContext;
                    }
                    AuthenticateManager.prototype.checkServerConnectivityAsync = function (url) {
                        var asyncResult = new Commerce.VoidAsyncResult(null);
                        var regex = new RegExp("\/+$");
                        url = url.replace(regex, Commerce.StringExtensions.EMPTY);
                        OData.request({
                            requestUri: url,
                            method: Commerce.Proxy.Common.HttpVerbs.GET,
                            data: undefined
                        }, function (data) {
                            asyncResult.resolve();
                        }, function (error) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(error) && !Commerce.ObjectExtensions.isNullOrUndefined(error.response) &&
                                !Commerce.ObjectExtensions.isNullOrUndefined(error.response.statusCode)) {
                                var statusCode = error.response.statusCode;
                                if (Commerce.Proxy.Common.HttpStatusCodes.isSuccessful(statusCode)) {
                                    asyncResult.resolve();
                                }
                                else {
                                    asyncResult.reject(Commerce.Proxy.Context.ErrorParser.parseErrorMessage(error.response));
                                }
                            }
                            else if (!Commerce.ObjectExtensions.isNullOrUndefined(error) && !Commerce.ObjectExtensions.isNullOrUndefined(error.response)) {
                                asyncResult.reject(Commerce.Proxy.Context.ErrorParser.parseErrorMessage(error.response));
                            }
                            else {
                                asyncResult.reject(Commerce.Proxy.Context.ErrorParser.parseErrorMessage(error));
                            }
                        }, OData.jsonHandler);
                        return asyncResult;
                    };
                    AuthenticateManager.prototype.checkServerHealthAsync = function (url) {
                        var asyncResult = new Commerce.AsyncResult();
                        var healthCheckUrl = Commerce.UrlHelper.getHealthCheckUrl(url);
                        Commerce.RetailLogger.corePingHealthCheckUrl(Commerce.StringExtensions.format(healthCheckUrl));
                        var request = {
                            requestUri: healthCheckUrl,
                            body: Commerce.StringExtensions.EMPTY
                        };
                        var healthCheckResponseError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_HEALTH_CHECK_FAILED.serverErrorCode);
                        var successMethod = function (response) {
                            var healthCheckParser = new Commerce.HealthCheckParser();
                            if (!healthCheckParser.isValidHttpResponse(response)) {
                                asyncResult.reject([healthCheckResponseError]);
                            }
                            else {
                                var jsonResponse = response.body;
                                var healthCheckResults = void 0;
                                try {
                                    healthCheckResults = JSON.parse(jsonResponse);
                                    asyncResult.resolve(healthCheckResults);
                                }
                                catch (error) {
                                    asyncResult.reject([healthCheckResponseError]);
                                }
                            }
                        };
                        var errorMethod = function (errorDetails) {
                            asyncResult.reject(Commerce.Proxy.Context.ErrorParser.parseErrorMessage(errorDetails.response));
                        };
                        Commerce.Proxy.Common.XmlHttpRequestHelper.executeRequest(request, successMethod, errorMethod);
                        return asyncResult;
                    };
                    AuthenticateManager.prototype.activateDeviceAsync = function (deviceNumber, terminalId, deviceId, forceActivate) {
                        var request = this._commerceContext.storeOperations()
                            .activateDevice(deviceNumber, terminalId, deviceId, forceActivate, Commerce.Host.instance.application.getApplicationType());
                        return request.execute();
                    };
                    AuthenticateManager.prototype.massActivateDeviceAsync = function (deviceNumber, terminalId, deviceId) {
                        var request = this._commerceContext.storeOperations()
                            .massActivateDevice(deviceNumber, terminalId, deviceId, Commerce.Host.instance.application.getApplicationType());
                        return request.execute();
                    };
                    AuthenticateManager.prototype.deactivateDeviceAsync = function () {
                        var request = this._commerceContext.storeOperations()
                            .deactivateDevice(Commerce.NumberSequence.GetNextTransactionId());
                        return request.execute();
                    };
                    AuthenticateManager.prototype.requestUserToken = function (logonRequest) {
                        var request = this.commerceAuthenticationContext.token(logonRequest);
                        return request.execute();
                    };
                    AuthenticateManager.prototype.enrollUserCredentials = function (request) {
                        return this.commerceAuthenticationContext.enrollUserCredentials(request).execute();
                    };
                    AuthenticateManager.prototype.disenrollUserCredentials = function (request) {
                        return this.commerceAuthenticationContext.disenrollUserCredentials(request).execute();
                    };
                    AuthenticateManager.prototype.createHardwareStationToken = function () {
                        var request = this._commerceContext.storeOperations().createHardwareStationToken();
                        return request.execute();
                    };
                    AuthenticateManager.prototype.changePassword = function (request) {
                        return this.commerceAuthenticationContext.changePassword(request).execute();
                    };
                    AuthenticateManager.prototype.resetPassword = function (request) {
                        return this.commerceAuthenticationContext.resetPassword(request).execute();
                    };
                    AuthenticateManager.prototype.startSessionAsync = function (correlationId) {
                        Commerce.RetailLogger.posAuthentication_StartSessionBegin(correlationId);
                        var startSessionRequest = this._commerceContext.storeOperations().startSession(Commerce.NumberSequence.GetNextTransactionId());
                        return startSessionRequest.execute()
                            .fail(function (errors) {
                            Commerce.RetailLogger.posAuthentication_StartSessionFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        }).done(function () {
                            Commerce.RetailLogger.posAuthentication_StartSessionSuccess(correlationId);
                        });
                    };
                    AuthenticateManager.prototype.endSessionAsync = function (correlationId) {
                        if (!Commerce.ApplicationContext.Instance.isDeviceActivated) {
                            Commerce.RetailLogger.posAuthentication_EndSessionCanceledDeviceNotActivated(correlationId);
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        return this._commerceContext.storeOperations().endSession(Commerce.NumberSequence.GetNextTransactionId()).execute()
                            .fail(function (errors) {
                            Commerce.RetailLogger.posAuthentication_EndSessionFailed(correlationId, Commerce.ErrorHelper.getErrorResourceIds(errors), Commerce.ErrorHelper.getErrorMessages(errors));
                        }).done(function () {
                            Commerce.RetailLogger.posAuthentication_EndSessionSuccess(correlationId);
                        });
                    };
                    return AuthenticateManager;
                }());
                RetailServer.AuthenticateManager = AuthenticateManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var CartManager = (function () {
                    function CartManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    CartManager.prototype.createEmptyCartAsync = function () {
                        return this.createCartAsync();
                    };
                    CartManager.prototype.createOrUpdateCartAsync = function (newCart) {
                        if (Commerce.Session.instance.isCartInProgress) {
                            return this.saveCartAsync(Commerce.Session.instance.cart.Id, newCart);
                        }
                        else {
                            return this.createCartAsync(newCart);
                        }
                    };
                    CartManager.prototype.getCartByCartIdAsync = function (cartId) {
                        var request = this._commerceContext.carts(cartId).read();
                        return request.execute()
                            .done(function (data) {
                            Commerce.Session.instance.cart = data;
                        });
                    };
                    CartManager.prototype.getCartByCartIdWithNoSessionUpdateAsync = function (cartId) {
                        var request = this._commerceContext.carts(cartId).read();
                        return request.execute();
                    };
                    CartManager.prototype.addAffiliationToCartAsync = function (affiliations) {
                        var cart = Commerce.Session.instance.cart;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(cart.AffiliationLines)) {
                            var affiliationReasonCodeDictionary_1 = this.createAffiliationReasonCodeDictionary(affiliations);
                            var cartAffiliationReasonCodeDictionary = this.createAffiliationReasonCodeDictionary(cart.AffiliationLines);
                            cartAffiliationReasonCodeDictionary.forEach(function (affiliationReasonCodeKey, cartReasonCodeLine) {
                                if (affiliationReasonCodeDictionary_1.hasItem(affiliationReasonCodeKey)) {
                                    affiliationReasonCodeDictionary_1.getItem(affiliationReasonCodeKey).IsChanged = true;
                                    affiliationReasonCodeDictionary_1.getItem(affiliationReasonCodeKey).LineId = cartReasonCodeLine.LineId;
                                }
                            });
                        }
                        var newCart = {
                            Id: cart.Id,
                            CustomerId: cart.CustomerId,
                            AffiliationLines: affiliations
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.addCartLinesToCartAsync = function (cartLines) {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        if (!Commerce.Session.instance.isCartInProgress) {
                            asyncQueue.enqueue(function () { return _this.createCartAsync(); });
                        }
                        return asyncQueue.enqueue(function () {
                            return _this.addCartLinesToCartAsyncImpl(Commerce.Session.instance.cart.Id, cartLines, Commerce.Session.instance.cart.Version);
                        }).run();
                    };
                    CartManager.prototype.updateCartLinesOnCartAsync = function (cartLines) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.updateCartLines(cartLines).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        });
                    };
                    CartManager.prototype.voidCartLinesOnCartAsync = function (cartLines) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.voidCartLines(cartLines).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        });
                    };
                    CartManager.prototype.addReasonCodeLinesToCartAsync = function (reasonCodeLines) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = { Id: cart.Id, ReasonCodeLines: reasonCodeLines };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.addCustomerToCartAsync = function (customerId, cartAffiliations) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = {
                            Id: cart.Id,
                            CustomerId: customerId,
                            AffiliationLines: cartAffiliations,
                            ReasonCodeLines: cart.ReasonCodeLines
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.addCustomerAccountDepositLinesToCartAsync = function (customerAccountDepositLines) {
                        if (!Commerce.ArrayExtensions.hasElements(customerAccountDepositLines)) {
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.INVALID_CUSTOMER_ACCOUNT_DEPOSIT_LINE_COLLECTION)]);
                        }
                        var cart = Commerce.Session.instance.cart;
                        var updatedCart = {
                            Id: cart.Id,
                            CartTypeValue: Commerce.Proxy.Entities.CartType.AccountDeposit,
                            CustomerAccountDepositLines: customerAccountDepositLines
                        };
                        return this.createOrUpdateCartAsync(updatedCart);
                    };
                    CartManager.prototype.addIncomeExpenseLinesToCartAsync = function (incomeExpenseLines) {
                        if (!Commerce.ArrayExtensions.hasElements(incomeExpenseLines)) {
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.INVALID_INCOME_EXPENSE_LINE_COLLECTION)]);
                        }
                        var cart = Commerce.Session.instance.cart;
                        var updatedCart = {
                            Id: cart.Id,
                            CartTypeValue: Commerce.Proxy.Entities.CartType.IncomeExpense,
                            IncomeExpenseLines: incomeExpenseLines,
                            ReasonCodeLines: cart.ReasonCodeLines
                        };
                        return this.createOrUpdateCartAsync(updatedCart);
                    };
                    CartManager.prototype.addTenderLineToCartAsync = function (tenderLine) {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        if (!Commerce.Session.instance.isCartInProgress) {
                            asyncQueue.enqueue(function () { return _this.createCartAsync(); });
                        }
                        return asyncQueue.enqueue(function () {
                            return _this.addTenderLineToCartAsyncImpl(Commerce.Session.instance.cart.Id, tenderLine, Commerce.Session.instance.cart.Version);
                        }).run();
                    };
                    CartManager.prototype.addPreprocessedTenderLineToCartAsync = function (tenderLine) {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        if (!Commerce.Session.instance.isCartInProgress) {
                            asyncQueue.enqueue(function () { return _this.createCartAsync(); });
                        }
                        return asyncQueue.enqueue(function () {
                            return _this.addUpdatePreprocessedTenderLineToCartAsyncImpl(tenderLine, Commerce.Session.instance.cart.Version);
                        }).run();
                    };
                    CartManager.prototype.updatePreprocessedTenderLineInCartAsync = function (tenderLine) {
                        if (!CartManager.isTenderLineInCart(Commerce.Session.instance.cart, tenderLine)) {
                            Commerce.RetailLogger.modelManagersCartManagerTenderLineCollectionNotAllExistInCart();
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                        }
                        return this.addUpdatePreprocessedTenderLineToCartAsyncImpl(tenderLine, Commerce.Session.instance.cart.Version);
                    };
                    CartManager.prototype.updateTenderLinesInCartAsync = function (tenderLines) {
                        var cart = Commerce.Session.instance.cart;
                        if (!CartManager.areTenderLinesInCart(cart, tenderLines)) {
                            Commerce.RetailLogger.modelManagersCartManagerTenderLineCollectionNotAllExistInCart();
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                        }
                        var newCart = { Id: cart.Id, TenderLines: tenderLines };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.validateTenderLineForAddAsync = function (tenderLine) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.validateTenderLineForAdd(tenderLine).execute();
                    };
                    CartManager.prototype.addShippingAddressToCartAsync = function (shippingAddress, deliveryMode) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = {
                            Id: cart.Id,
                            ShippingAddress: shippingAddress,
                            DeliveryMode: deliveryMode
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.updateOverriddenDepositAmountForCartAsync = function (overriddenDepositAmount) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = {
                            Id: cart.Id,
                            OverriddenDepositWithoutCarryoutAmount: overriddenDepositAmount
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.addLoyaltyCardToCartAsync = function (loyaltyCardId, cartAffiliations, reasonCodeLines) {
                        if (!Commerce.ArrayExtensions.hasElements(reasonCodeLines)) {
                            reasonCodeLines = [];
                        }
                        var cart = Commerce.Session.instance.cart;
                        var newCart = {
                            Id: cart.Id,
                            LoyaltyCardId: loyaltyCardId,
                            AffiliationLines: cartAffiliations,
                            ReasonCodeLines: reasonCodeLines
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.saveAttributesOnCart = function (attributes) {
                        var asyncResult;
                        if (Commerce.ArrayExtensions.hasElements(attributes)) {
                            var newCart = void 0;
                            var existingAttributes = void 0;
                            if (Commerce.Session.instance.isCartInProgress) {
                                newCart = { Id: Commerce.Session.instance.cart.Id };
                                existingAttributes = Commerce.Session.instance.cart.AttributeValues;
                            }
                            else {
                                newCart = { Id: Commerce.StringExtensions.EMPTY };
                                existingAttributes = [];
                            }
                            newCart.AttributeValues = Commerce.AttributeHelper.mergeAttributes(existingAttributes, attributes);
                            asyncResult = this.createOrUpdateCartAsync(newCart);
                        }
                        else {
                            asyncResult = Commerce.VoidAsyncResult.createResolved();
                        }
                        return asyncResult;
                    };
                    CartManager.prototype.saveAttributesOnCartLines = function (attributesOnCartLines) {
                        attributesOnCartLines = Commerce.ObjectExtensions.isNullOrUndefined(attributesOnCartLines) ? [] : attributesOnCartLines;
                        var cartLineIds = attributesOnCartLines.map(function (attributesOnCartLine) {
                            return attributesOnCartLine.cartLineId;
                        });
                        var cartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, cartLineIds);
                        var result;
                        if (cartLines.length === attributesOnCartLines.length) {
                            for (var i = 0; i < cartLines.length; i++) {
                                if (Commerce.ArrayExtensions.hasElements(attributesOnCartLines[i].attributes)) {
                                    cartLines[i].AttributeValues =
                                        Commerce.AttributeHelper.mergeAttributes(cartLines[i].AttributeValues, attributesOnCartLines[i].attributes);
                                }
                            }
                            result = this.updateCartLinesOnCartAsync(cartLines);
                        }
                        else {
                            var invalidCartLineIds = this.getCartLineIdsWithNoMatchingCartLines(cartLineIds, cartLines);
                            var cartId = Commerce.Session.instance.isCartInProgress ? Commerce.Session.instance.cart.Id : Commerce.StringExtensions.EMPTY;
                            Commerce.RetailLogger.modelManagersCartManagerFailedSaveAttributesOnCartLinesInvalidCartLineId(JSON.stringify(invalidCartLineIds), cartId);
                            result = Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                        }
                        return result;
                    };
                    CartManager.prototype.saveExtensionPropertiesOnCart = function (extensionProperties) {
                        var asyncResult;
                        if (Commerce.ArrayExtensions.hasElements(extensionProperties)) {
                            var newCart = { Id: Commerce.Session.instance.isCartInProgress ? Commerce.Session.instance.cart.Id : Commerce.StringExtensions.EMPTY };
                            newCart.ExtensionProperties = extensionProperties;
                            asyncResult = this.createOrUpdateCartAsync(newCart);
                        }
                        else {
                            asyncResult = Commerce.VoidAsyncResult.createResolved();
                        }
                        return asyncResult;
                    };
                    CartManager.prototype.saveExtensionPropertiesOnCartLines = function (extensionPropertiesOnCartLines) {
                        extensionPropertiesOnCartLines = Commerce.ObjectExtensions.isNullOrUndefined(extensionPropertiesOnCartLines) ? [] : extensionPropertiesOnCartLines;
                        var cartLineIds = extensionPropertiesOnCartLines.map(function (extensionPropertiesOnCartLine) {
                            return extensionPropertiesOnCartLine.cartLineId;
                        });
                        var cartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, cartLineIds);
                        var result;
                        if (cartLines.length === extensionPropertiesOnCartLines.length) {
                            for (var i = 0; i < cartLines.length; i++) {
                                if (Commerce.ArrayExtensions.hasElements(extensionPropertiesOnCartLines[i].extensionProperties)) {
                                    cartLines[i].ExtensionProperties = extensionPropertiesOnCartLines[i].extensionProperties;
                                }
                            }
                            result = this.updateCartLinesOnCartAsync(cartLines);
                        }
                        else {
                            var invalidCartLineIds = this.getCartLineIdsWithNoMatchingCartLines(cartLineIds, cartLines);
                            var cartId = Commerce.Session.instance.isCartInProgress ? Commerce.Session.instance.cart.Id : Commerce.StringExtensions.EMPTY;
                            Commerce.RetailLogger.modelManagersCartManagerFailedSaveExtensionPropertiesOnCartLinesInvalidCartLineId(JSON.stringify(invalidCartLineIds), cartId);
                            result = Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                        }
                        return result;
                    };
                    CartManager.prototype.setCartAttributes = function (attributeValues) {
                        var newCart = {
                            Id: Commerce.Session.instance.isCartInProgress ? Commerce.Session.instance.cart.Id : Commerce.StringExtensions.EMPTY,
                            AttributeValues: attributeValues
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.setCustomerOrderModeAsync = function (mode) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = {
                            Id: cart.Id,
                            CustomerOrderModeValue: mode,
                            CartTypeValue: Commerce.Proxy.Entities.CartType.CustomerOrder
                        };
                        if (mode === Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit) {
                            newCart.QuotationExpiryDate = cart.QuotationExpiryDate;
                        }
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.setRetailTransactionTypeAsync = function () {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = {
                            Id: cart.Id,
                            CustomerOrderModeValue: Commerce.Proxy.Entities.CustomerOrderMode.None,
                            CartTypeValue: Commerce.Proxy.Entities.CartType.Shopping
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.checkoutCartAsync = function (recipientEmailAddress, tokenizedPaymentCard) {
                        var _this = this;
                        this.maskCardNumber(tokenizedPaymentCard);
                        var emailAddress = recipientEmailAddress ? recipientEmailAddress : Commerce.StringExtensions.EMPTY;
                        var receiptMasks;
                        var receiptId;
                        var salesOrder;
                        var asyncQueue = new Commerce.AsyncQueue()
                            .enqueue(function () {
                            return Commerce.ApplicationContext.Instance.receiptMasksAsync.value.done(function (result) { return receiptMasks = result; });
                        }).enqueue(function () {
                            receiptId = Commerce.NumberSequence.GetNextReceiptId(Commerce.Session.instance.cart, receiptMasks);
                            var request = _this._commerceContext.carts(Commerce.Session.instance.cart.Id)
                                .checkout(emailAddress, tokenizedPaymentCard, receiptId, null, Commerce.Session.instance.cart.Version);
                            return request.execute().done(function (result) {
                                salesOrder = result;
                                Commerce.Session.instance.clearCart();
                            });
                        });
                        return asyncQueue.run().map(function () { return salesOrder; });
                    };
                    CartManager.prototype.voidCartAsync = function (cartId, reasonCodeLines) {
                        var request = this._commerceContext.carts(cartId).void(reasonCodeLines);
                        return request.execute();
                    };
                    CartManager.prototype.suspendCartAsync = function (cartId, journalCartId) {
                        var _this = this;
                        var receiptMasks;
                        var receiptId;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return Commerce.ApplicationContext.Instance.receiptMasksAsync.value.done(function (result) { return receiptMasks = result; });
                        }).enqueue(function () {
                            var cart = Commerce.ObjectExtensions.clone(Commerce.Session.instance.cart);
                            cart.Id = journalCartId;
                            receiptId = Commerce.NumberSequence.GetNextReceiptId(cart, receiptMasks);
                            var request = _this._commerceContext.carts(cartId)
                                .suspendWithJournal(journalCartId, receiptId);
                            return request.execute();
                        });
                        return asyncQueue.run().map(function (result) {
                            return result.data;
                        });
                    };
                    CartManager.prototype.resumeCartAsync = function (cartId, customerId) {
                        var request = this._commerceContext.carts(cartId).resume();
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.getChargeCodesAsync = function (pageSize, skip) {
                        var query = this._commerceContext.carts();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getChargeCodes().execute();
                    };
                    CartManager.prototype.resumeFromReceiptIdAsync = function (receiptId) {
                        var request = this._commerceContext.carts().resumeFromReceiptId(receiptId);
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.getAffiliationsAsync = function () {
                        var request = this._commerceContext.storeOperations().getAffiliations();
                        return request.execute();
                    };
                    CartManager.prototype.voidTenderLineAsync = function (tenderLineId, reasonCodeLines, isPreprocessed, forceVoid) {
                        if (forceVoid === void 0) { forceVoid = false; }
                        var request = this._commerceContext.carts(Commerce.Session.instance.cart.Id)
                            .voidTenderLine(tenderLineId, reasonCodeLines, isPreprocessed, forceVoid);
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.updateTenderLineSignature = function (tenderLineId, signatureData) {
                        var request = this._commerceContext.carts(Commerce.Session.instance.cart.Id)
                            .updateTenderLineSignature(tenderLineId, signatureData);
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.addCartCommentAsync = function (comment) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = { Id: cart.Id, Comment: comment };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.addInvoiceCommentAsync = function (comment) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = { Id: cart.Id, InvoiceComment: comment };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.addDiscountCodeToCartAsync = function (discountCode) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.addDiscountCode(discountCode).execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.recallCustomerOrder = function (salesId) {
                        var transactionId = Commerce.NumberSequence.GetNextTransactionId();
                        var request = this._commerceContext.carts().recallOrder(transactionId, salesId);
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.recallCustomerQuote = function (quoteId) {
                        var transactionId = Commerce.NumberSequence.GetNextTransactionId();
                        var request = this._commerceContext.carts().recallQuote(transactionId, quoteId);
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.recalculateOrderAsync = function (orderId) {
                        var request = this._commerceContext.carts(orderId).recalculateOrder();
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.resetAllChargesAsync = function (cartId) {
                        var request = this._commerceContext.carts(cartId).resetAllCharges();
                        return request.execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.recallSalesInvoice = function (salesId) {
                        var transactionId = Commerce.NumberSequence.GetNextTransactionId();
                        var request = this._commerceContext.carts().recallSalesInvoice(transactionId, salesId);
                        return request.execute();
                    };
                    CartManager.prototype.addInvoicesToCartAsync = function (invoiceIds) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.addInvoices(invoiceIds).execute()
                            .done(function (updatedCart) { Commerce.Session.instance.cart = updatedCart; });
                    };
                    CartManager.prototype.updateCommissionSalesGroup = function (cartId, cartLineId, commissionSalesGroup, isUserInitiated) {
                        var request = this._commerceContext.carts().updateCommissionSalesGroup(cartId, cartLineId, commissionSalesGroup, isUserInitiated);
                        return request.execute().done(function (data) {
                            Commerce.Session.instance.cart = data;
                        });
                    };
                    CartManager.prototype.getPaymentsHistoryAsync = function (cartId) {
                        var request = this._commerceContext.carts(cartId).getPaymentsHistory();
                        return request.execute();
                    };
                    CartManager.prototype.getDeliveryModesByChannelId = function (lineShippingAddresses, channelId, cartLineIds) {
                        var request = this._commerceContext.carts(Commerce.Session.instance.cart.Id)
                            .getLineDeliveryOptionsByChannelId(lineShippingAddresses, channelId);
                        return request.execute();
                    };
                    CartManager.prototype.getTaxOverrides = function (overrideBy) {
                        var request = this._commerceContext.storeOperations().getTaxOverrides(overrideBy.toString());
                        return request.execute();
                    };
                    CartManager.prototype.updateCancellationChargeAsync = function (chargeAmount) {
                        var cart = Commerce.Session.instance.cart;
                        var newCart = {
                            Id: cart.Id,
                            CancellationChargeAmount: chargeAmount
                        };
                        return this.createOrUpdateCartAsync(newCart);
                    };
                    CartManager.prototype.issueGiftCardToCartAsync = function (giftCardId, amount, currency, lineDescription) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.issueGiftCard(giftCardId, amount, currency, lineDescription).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        });
                    };
                    CartManager.prototype.refillGiftCardAsync = function (giftCardId, amount, currency, lineDescription) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.refillGiftCard(giftCardId, amount, currency, lineDescription).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        });
                    };
                    CartManager.prototype.cashOutGiftCardAsync = function (giftCardId, amount, currency, lineDescription) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.cashOutGiftCard(giftCardId, amount, currency, lineDescription).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        });
                    };
                    CartManager.prototype.priceOverrideAsync = function (cartLine) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                            Commerce.RetailLogger.modelManagersCartManagerFailedToOverridePriceNoCartLinesProvided();
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)
                            || Commerce.ObjectExtensions.isNullOrUndefined(cartLine.LineId)
                            || Commerce.ObjectExtensions.isNullOrUndefined(cartLine.Price)) {
                            Commerce.RetailLogger.modelManagersCartManagerFailedToOverridePriceNoCartLineOrPriceProvided();
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                        }
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.overrideCartLinePrice(cartLine.LineId, cartLine.Price).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        });
                    };
                    CartManager.prototype.getCardPaymentAcceptPoint = function (cardPaymentEnabled, cardTokenizationEnabled) {
                        var _this = this;
                        var cardPaymentAcceptPoint;
                        return new Commerce.AsyncQueue()
                            .enqueue(function () {
                            var cart = Commerce.Session.instance.cart;
                            var hostPageOrigin = window.location.protocol + "//" + window.location.host;
                            var adaptorPath = undefined;
                            var applicationType = Commerce.Host.instance.application.getApplicationType();
                            if (Commerce.ApplicationHelper.isWebApplicationType(applicationType)) {
                                adaptorPath = hostPageOrigin + "/Connectors/";
                            }
                            var cardPaymentAcceptSettings = {
                                HostPageOrigin: hostPageOrigin,
                                AdaptorPath: adaptorPath,
                                CardPaymentEnabled: cardPaymentEnabled,
                                PaymentAmount: (cardPaymentEnabled ? cart.AmountDue : undefined),
                                CardTokenizationEnabled: cardTokenizationEnabled
                            };
                            var request = _this._commerceContext.carts(cart.Id).getCardPaymentAcceptPoint(cardPaymentAcceptSettings);
                            return request.execute()
                                .done(function (result) {
                                cardPaymentAcceptPoint = result;
                            });
                        }).run().map(function (result) {
                            return cardPaymentAcceptPoint;
                        });
                    };
                    CartManager.prototype.retrieveCardPaymentAcceptResult = function (resultAccessCode) {
                        var request = this._commerceContext.carts().retrieveCardPaymentAcceptResult(resultAccessCode);
                        return request.execute();
                    };
                    CartManager.prototype.getScanResult = function (scanDataLabel) {
                        var query = this._commerceContext.scanResults(scanDataLabel);
                        query.expand(Commerce.Proxy.Entities.ScanResultClass.customerPropertyName);
                        return query.read().execute();
                    };
                    CartManager.prototype.addCouponsToCartAsync = function (couponCodes, isLegacyDiscountCode) {
                        if (isLegacyDiscountCode === void 0) { isLegacyDiscountCode = false; }
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.addCoupons(couponCodes, isLegacyDiscountCode).execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.removeCouponsFromCartAsync = function (couponCodes) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.removeCoupons(couponCodes).execute()
                            .done(function (cart) { Commerce.Session.instance.cart = cart; });
                    };
                    CartManager.prototype.addChargeAsync = function (moduleTypeValue, chargeCode, amount) {
                        var request = this._commerceContext.carts(Commerce.Session.instance.cart.Id).addCharge(moduleTypeValue, chargeCode, amount);
                        return request.execute()
                            .done(function (cart) {
                            Commerce.Session.instance.cart = cart;
                        });
                    };
                    CartManager.prototype.addCartLineChargeAsync = function (cartLineId, moduleTypeValue, chargeCode, amount) {
                        var request = this._commerceContext.carts(Commerce.Session.instance.cart.Id).addCartLineCharge(cartLineId, moduleTypeValue, chargeCode, amount);
                        return request.execute()
                            .done(function (cart) {
                            Commerce.Session.instance.cart = cart;
                        });
                    };
                    CartManager.prototype.getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync = function (loyaltyCardId, currencyCode) {
                        var request = this._commerceContext.carts(Commerce.Session.instance.cart.Id).getMaxLoyaltyPointsToRedeemForTransactionBalance(loyaltyCardId, currencyCode);
                        return request.execute();
                    };
                    CartManager.prototype.overrideChargeAsync = function (chargeLineId, newAmount, reasonCodeLines) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.overrideCharge(chargeLineId, newAmount, reasonCodeLines).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        }).map(function () { return void 0; });
                    };
                    CartManager.prototype.overrideCartLineChargeAsync = function (cartLineId, chargeLineId, newAmount, reasonCodeLines) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        return query.overrideCartLineCharge(cartLineId, chargeLineId, newAmount, reasonCodeLines).execute()
                            .done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        }).map(function () { return void 0; });
                    };
                    CartManager.prototype.getDeclinedOrVoidedCardReceipts = function (correlationId, preprocessedTenderLine, isDuplicate, receiptType, hardwareProfileId) {
                        var cartId = Commerce.Session.instance.cart.Id;
                        var query = this._commerceContext.carts(cartId);
                        var criteria = new Commerce.Proxy.Entities.ReceiptRetrievalCriteriaClass({
                            IsCopy: isDuplicate,
                            ReceiptTypeValue: receiptType,
                            IsRemoteTransaction: false,
                            ShiftId: 0,
                            ShiftTerminalId: Commerce.StringExtensions.EMPTY,
                            IsPreview: false,
                            QueryBySalesId: false,
                            HardwareProfileId: hardwareProfileId
                        });
                        Commerce.RetailLogger.modelManagersCartManagerGetDeclinedOrVoidedCardReceiptsStarted(correlationId, cartId, receiptType);
                        return query.getDeclinedOrVoidedCardReceipts(preprocessedTenderLine, criteria).execute()
                            .done(function (result) {
                            var receiptIds = Commerce.StringExtensions.EMPTY;
                            result.forEach(function (receipt) {
                                receiptIds += receipt.ReceiptId + ";";
                            });
                            Commerce.RetailLogger.modelManagersCartManagerGetDeclinedOrVoidedCardReceiptsSucceeded(correlationId, cartId, receiptType, receiptIds);
                        });
                    };
                    CartManager.prototype.addInvoicedSalesLinesToCartAsync = function (invoicedSalesLineIds) {
                        var transactionId = Commerce.NumberSequence.GetNextTransactionId();
                        var request = this._commerceContext.carts().addInvoicedSalesLinesToCart(transactionId, invoicedSalesLineIds);
                        return request.execute();
                    };
                    CartManager.areTenderLinesInCart = function (cart, tenderLines) {
                        var someNotPresent = tenderLines.some(function (t) { return !CartManager.isTenderLineInCart(cart, t); });
                        return someNotPresent === false;
                    };
                    CartManager.isTenderLineInCart = function (cart, tenderLine) {
                        return cart.TenderLines.some(function (t) { return t.TenderLineId === tenderLine.TenderLineId; });
                    };
                    CartManager.prototype.createCartAsync = function (cart) {
                        var _this = this;
                        if (!cart) {
                            cart = new Commerce.Proxy.Entities.CartClass();
                        }
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            var triggerOptions = { cart: cart };
                            return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.BeginTransaction, triggerOptions);
                        }).enqueue(function () {
                            if (Commerce.StringExtensions.isNullOrWhitespace(cart.Id)) {
                                cart.Id = Commerce.NumberSequence.GetNextTransactionId();
                            }
                            var request = _this._commerceContext.carts().create(cart);
                            return request.execute()
                                .done(function (data) { Commerce.Session.instance.cart = data; });
                        });
                        return asyncQueue.run();
                    };
                    CartManager.prototype.saveCartAsync = function (cartId, newCart) {
                        newCart.Id = cartId;
                        var request = this._commerceContext.carts(cartId).update(newCart);
                        return request.execute()
                            .done(function (data) {
                            Commerce.Session.instance.cart = data;
                            Commerce.RetailLogger.modelManagersCartManagerUpdateCartSuccess(cartId);
                        }).fail(function (errors) {
                            Commerce.RetailLogger.modelManagersCartManagerUpdateCartFailure(cartId, Commerce.ErrorHelper.getErrorResourceIds(errors));
                        });
                    };
                    CartManager.prototype.addCartLinesToCartAsyncImpl = function (cartId, cartLines, cartVersion) {
                        var query = this._commerceContext.carts(cartId);
                        return query.addCartLines(cartLines, cartVersion).execute().done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                        });
                    };
                    CartManager.prototype.addTenderLineToCartAsyncImpl = function (cartId, tenderLine, cartVersion) {
                        var _this = this;
                        var query = this._commerceContext.carts(cartId);
                        return query.addTenderLine(tenderLine, cartVersion).execute().done(function (updatedCart) {
                            Commerce.Session.instance.cart = updatedCart;
                            Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayBalance(updatedCart.TotalAmount, updatedCart.AmountDue);
                        }).recoverOnFailure(function (errors) {
                            var errorsBySeverity = Commerce.ErrorHelper.getErrorsBySeverity(errors);
                            if (Commerce.ArrayExtensions.hasElements(errorsBySeverity.errorsOfSeverityError)) {
                                Commerce.RetailLogger.modelManagersCartManagerAddTenderLineToCartFailed(errorsBySeverity.errorsOfSeverityError[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errorsBySeverity.errorsOfSeverityError[0]));
                            }
                            if (Commerce.ArrayExtensions.hasElements(errorsBySeverity.errorsOfSeverityInformational)) {
                                Commerce.RetailLogger.modelManagersCartManagerAddTenderLineToCartFailedAsInformational(errorsBySeverity.errorsOfSeverityInformational[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errorsBySeverity.errorsOfSeverityInformational[0]));
                            }
                            var originalTenderLineCollectionLength = Commerce.Session.instance.cart.TenderLines.length;
                            if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.SERVER_TIMEOUT)
                                || Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE)) {
                                var asyncResult_7 = new Commerce.AsyncResult();
                                _this.getCartByCartIdAsync(cartId).always(function () {
                                    var newCart = Commerce.Session.instance.cart;
                                    if (originalTenderLineCollectionLength < newCart.TenderLines.length) {
                                        asyncResult_7.resolve(newCart);
                                    }
                                    else {
                                        asyncResult_7.reject(errors);
                                    }
                                });
                                return asyncResult_7;
                            }
                            return Commerce.AsyncResult.createRejected(errors);
                        });
                    };
                    CartManager.prototype.addUpdatePreprocessedTenderLineToCartAsyncImpl = function (tenderLine, cartVersion) {
                        var query = this._commerceContext.carts(Commerce.Session.instance.cart.Id);
                        tenderLine.MaskedCardNumber = Commerce.PaymentHelper.getMaskedNumber(tenderLine.MaskedCardNumber);
                        return query.addPreprocessedTenderLine(tenderLine, cartVersion).execute().done(function (updatedCart) {
                            Commerce.Peripherals.instance.paymentTerminal.doSessionCartUpdateWithDisplayTransaction(updatedCart, function (cart) { return Commerce.Session.instance.cart = cart; });
                            Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayBalance(updatedCart.TotalAmount, updatedCart.AmountDue);
                        });
                    };
                    CartManager.prototype.createAffiliationReasonCodeDictionary = function (affiliations) {
                        var affiliationReasonCodeDictionary = new Commerce.Dictionary();
                        affiliations.forEach(function (affiliationLoyaltyTier) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(affiliationLoyaltyTier.ReasonCodeLines)) {
                                affiliationLoyaltyTier.ReasonCodeLines.forEach(function (affiliationReasonCodeLine) {
                                    affiliationReasonCodeDictionary.setItem(affiliationLoyaltyTier.AffiliationId + "_" + affiliationReasonCodeLine.ReasonCodeId, affiliationReasonCodeLine);
                                });
                            }
                        });
                        return affiliationReasonCodeDictionary;
                    };
                    CartManager.prototype.maskCardNumber = function (tokenizedPaymentCard) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(tokenizedPaymentCard)
                            && !Commerce.ObjectExtensions.isNullOrUndefined(tokenizedPaymentCard.CardTokenInfo)) {
                            tokenizedPaymentCard.CardTokenInfo.MaskedCardNumber = Commerce.PaymentHelper.getMaskedNumber(tokenizedPaymentCard.CardTokenInfo.MaskedCardNumber);
                        }
                    };
                    CartManager.prototype.getCartLineIdsWithNoMatchingCartLines = function (cartLineIds, cartLines) {
                        return cartLineIds.filter(function (cartLineId) {
                            return !cartLines.some(function (cartLine) {
                                return cartLine.LineId === cartLineId;
                            });
                        });
                    };
                    return CartManager;
                }());
                RetailServer.CartManager = CartManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var ChannelManager = (function () {
                    function ChannelManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    ChannelManager.prototype.getChannelConfigurationAsync = function () {
                        var request = this._commerceContext.orgUnits().getOrgUnitConfiguration();
                        return request.execute();
                    };
                    ChannelManager.prototype.getEnvironmentConfiguration = function () {
                        var request = this._commerceContext.storeOperations().getEnvironmentConfiguration();
                        return request.execute();
                    };
                    ChannelManager.prototype.getExtensionProfile = function () {
                        var request = this._commerceContext.storeOperations().getExtensionProfile();
                        return request.execute();
                    };
                    ChannelManager.prototype.getDeviceConfigurationAsync = function () {
                        var request = this._commerceContext.storeOperations().getDeviceConfiguration();
                        return request.execute();
                    };
                    ChannelManager.prototype.getHardwareProfileAsync = function (profileId) {
                        var request = this._commerceContext.storeOperations().getHardwareProfileById(profileId);
                        return request.execute();
                    };
                    ChannelManager.prototype.getPaymentMerchantInformationAsync = function (profileId) {
                        var request = this._commerceContext.storeOperations().getPaymentMerchantInformation(profileId);
                        return request.execute();
                    };
                    ChannelManager.prototype.getPaymentPropertiesIfModifiedAsync = function (profileId, merchantPropertiesHash) {
                        var request = this._commerceContext.storeOperations().getPaymentPropertiesIfModified(profileId, merchantPropertiesHash);
                        return request.execute();
                    };
                    ChannelManager.prototype.getCountryRegionsAsync = function (languageId) {
                        var request = this._commerceContext.storeOperations().getCountryRegionsByLanguageId(languageId);
                        return request.execute();
                    };
                    ChannelManager.prototype.getStateProvincesAsync = function (countryId) {
                        var request = this._commerceContext.storeOperations().getStateProvinces(countryId);
                        return request.execute();
                    };
                    ChannelManager.prototype.getCurrenciesAsync = function () {
                        var request = this._commerceContext.storeOperations().getCurrencies();
                        return request.execute();
                    };
                    ChannelManager.prototype.getCashDeclarationAsync = function () {
                        var request = this._commerceContext.storeOperations().getCashDeclarations();
                        return request.execute();
                    };
                    ChannelManager.prototype.getDeliveryOptionsAsync = function () {
                        var request = this._commerceContext.storeOperations().getDeliveryOptions();
                        return request.execute();
                    };
                    ChannelManager.prototype.getLanguagesAsync = function () {
                        var request = this._commerceContext.storeOperations().getLanguages();
                        return request.execute();
                    };
                    ChannelManager.prototype.getOperationsAsync = function () {
                        var request = this._commerceContext.storeOperations().getOperationPermissions();
                        return request.execute();
                    };
                    ChannelManager.prototype.getTenderTypesAsync = function () {
                        var request = this._commerceContext.storeOperations().getTenderTypes();
                        return request.execute();
                    };
                    ChannelManager.prototype.getUnitsOfMeasureAsync = function () {
                        var request = this._commerceContext.storeOperations().getUnitsOfMeasure();
                        return request.execute();
                    };
                    ChannelManager.prototype.getCardTypesAsync = function () {
                        var request = this._commerceContext.storeOperations().getCardTypes();
                        return request.execute();
                    };
                    ChannelManager.prototype.getCommissionSalesGroupsAsync = function () {
                        var query = this._commerceContext.storeOperations();
                        var request = query.getCommissionSalesGroups();
                        return request.execute();
                    };
                    ChannelManager.prototype.searchCommissionSalesGroupsAsync = function (searchText, pageSize, skip) {
                        var query = this._commerceContext.storeOperations();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.searchCommissionSalesGroups(searchText).execute();
                    };
                    ChannelManager.prototype.getLoyaltyTransactionsAsync = function (loyaltyCardNumber, rewardPointId, pageSize, skip) {
                        var query = this._commerceContext.storeOperations();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getLoyaltyRewardPointActivityTimeline(loyaltyCardNumber, rewardPointId)
                            .execute();
                    };
                    ChannelManager.prototype.getLoyaltyRewardPointsExpiringSoonAsync = function (loyaltyCardNumber, rewardPointId, daysToExpiry, pageSize, skip) {
                        var query = this._commerceContext.storeOperations();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getLoyaltyRewardPointsExpiringSoon(loyaltyCardNumber, rewardPointId, daysToExpiry)
                            .execute();
                    };
                    ChannelManager.prototype.getHardwareStationProfileAsync = function () {
                        var request = this._commerceContext.storeOperations().getHardwareStationProfiles();
                        return request.execute();
                    };
                    ChannelManager.prototype.getCustomUIStrings = function (languageId) {
                        var query = this._commerceContext.storeOperations();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee)) {
                            query.locale(Commerce.Session.instance.CurrentEmployee.CultureName);
                        }
                        var request = query.getLocalizedStrings(languageId, null);
                        return request.execute();
                    };
                    ChannelManager.prototype.getAvailableStoresAsync = function () {
                        var request = this._commerceContext.orgUnits().read();
                        return request.execute();
                    };
                    ChannelManager.prototype.searchOrgUnitLocationsAsync = function (searchCriteria, pageSize, skip) {
                        var query = this._commerceContext.orgUnits();
                        query.top(pageSize).skip(skip);
                        return query.searchOrgUnitLocations(searchCriteria).execute();
                    };
                    ChannelManager.prototype.getStoreLocationByArea = function (searchArea) {
                        var request = this._commerceContext.orgUnits().getOrgUnitLocationsByArea(searchArea);
                        return request.execute();
                    };
                    ChannelManager.prototype.getStoreDetailsAsync = function (storeId) {
                        var request = this._commerceContext.orgUnits(storeId).read();
                        return request.execute();
                    };
                    ChannelManager.prototype.getStoreHoursAsync = function (storeId) {
                        var query = this._commerceContext.orgUnits();
                        return query.getStoreHours(storeId).execute();
                    };
                    ChannelManager.prototype.getSalesTaxGroups = function () {
                        var request = this._commerceContext.storeOperations().getSalesTaxGroups();
                        return request.execute();
                    };
                    ChannelManager.prototype.getReturnOrderReasonCodesAsync = function () {
                        var query = this._commerceContext.storeOperations();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee)) {
                            query.locale(Commerce.Session.instance.CurrentEmployee.CultureName);
                        }
                        var request = query.getReturnOrderReasonCodes();
                        return request.execute();
                    };
                    ChannelManager.prototype.getOnlineLatestNumberSequence = function () {
                        return this._commerceContext.storeOperations().getLatestNumberSequence().execute();
                    };
                    ChannelManager.prototype.getOfflineLatestNumberSequence = function () {
                        return this._commerceContext.storeOperations().offline().getLatestNumberSequence()
                            .execute();
                    };
                    ChannelManager.prototype.getRetailTrialPlanOfferAsync = function () {
                        return this._commerceContext.storeOperations().getRetailTrialPlanOffer().execute();
                    };
                    ChannelManager.prototype.getCountiesAsync = function (countryId, stateId) {
                        var request = this._commerceContext.storeOperations().getCounties(countryId, stateId);
                        return request.execute();
                    };
                    ChannelManager.prototype.getCitiesAsync = function (countryId, stateId, countyId) {
                        var request = this._commerceContext.storeOperations().getCities(countryId, stateId, countyId);
                        return request.execute();
                    };
                    ChannelManager.prototype.getDistrictsAsync = function (countryId, stateId, countyId, cityName) {
                        var request = this._commerceContext.storeOperations().getDistricts(countryId, stateId, countyId, cityName);
                        return request.execute();
                    };
                    ChannelManager.prototype.getAddressFromZipCodeAsync = function (countryId, zipCode) {
                        var request = this._commerceContext.storeOperations().getAddressFromZipCode(countryId, zipCode);
                        return request.execute();
                    };
                    ChannelManager.prototype.getTerminalInfoAsync = function (orgUnitNumber, deviceType) {
                        var request = this._commerceContext.orgUnits(orgUnitNumber).getTerminalInfo(deviceType);
                        return request.execute();
                    };
                    ChannelManager.prototype.getAddressPurposesAsync = function () {
                        var request = this._commerceContext.storeOperations().getAddressPurposes();
                        return request.execute();
                    };
                    return ChannelManager;
                }());
                RetailServer.ChannelManager = ChannelManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var CustomerManager = (function () {
                    function CustomerManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    CustomerManager.prototype.addNewCustomerAsync = function (customer) {
                        this.updateFullAddresses(customer.Addresses);
                        var request = this._commerceContext.customers().create(customer);
                        return request.execute();
                    };
                    CustomerManager.prototype.getCustomerDetailsAsync = function (accountNumber) {
                        var request = this._commerceContext.customers(accountNumber).read();
                        var asyncQueue = new Commerce.AsyncQueue();
                        var customer;
                        asyncQueue.enqueue(function () {
                            return request.execute()
                                .done(function (result) {
                                customer = result;
                            });
                        }).enqueue(function () {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(customer)) {
                                var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CUSTOMER_NOT_FOUND, false, null, null, [accountNumber])];
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                        return asyncQueue.run().map(function (value) {
                            var primaryAddress = null;
                            if (Commerce.ArrayExtensions.hasElements(customer.Addresses)) {
                                for (var index = 0; index < customer.Addresses.length; index++) {
                                    if (customer.Addresses[index].IsPrimary) {
                                        primaryAddress = customer.Addresses[index];
                                        break;
                                    }
                                }
                            }
                            return { customer: customer, primaryAddress: primaryAddress };
                        });
                    };
                    CustomerManager.prototype.getCustomersByAccountNumbersAsync = function (accountNumbers) {
                        var request = this._commerceContext.customers().getByAccountNumbers(accountNumbers, Commerce.Proxy.Entities.SearchLocation.Local);
                        return request.execute();
                    };
                    CustomerManager.prototype.getRecordsPage = function (searchCriteria, pageSize, skip) {
                        if (searchCriteria) {
                            var query = this._commerceContext.customers();
                            query.top(pageSize).skip(skip);
                            return query.search(searchCriteria).execute();
                        }
                        return Commerce.AsyncResult.createResolved([]);
                    };
                    CustomerManager.prototype.getRecordsPageByFieldsAsync = function (customerSearchByFieldCriteria, pageSize, skip) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(customerSearchByFieldCriteria) && Commerce.ArrayExtensions.hasElements(customerSearchByFieldCriteria.Criteria)) {
                            var query = this._commerceContext.customers();
                            query.top(pageSize).skip(skip);
                            return query.searchByFields(customerSearchByFieldCriteria).execute();
                        }
                        return Commerce.AsyncResult.createResolved([]);
                    };
                    CustomerManager.prototype.getCustomerTypesAsync = function () {
                        var customerTypes = [
                            { Code: Commerce.Proxy.Entities.CustomerType.Person, Name: Commerce.ViewModelAdapter.getResourceString("string_303") },
                            { Code: Commerce.Proxy.Entities.CustomerType.Organization, Name: Commerce.ViewModelAdapter.getResourceString("string_304") }
                        ];
                        return Commerce.AsyncResult.createResolved(customerTypes);
                    };
                    CustomerManager.prototype.getCustomerGroupsAsync = function () {
                        var request = this._commerceContext.storeOperations().getCustomerGroups();
                        return request.execute()
                            .map(function (customerGroups) {
                            customerGroups.forEach(function (cg) {
                                if (Commerce.StringExtensions.isEmptyOrWhitespace(cg.CustomerGroupName)) {
                                    cg.CustomerGroupName = cg.CustomerGroupNumber;
                                }
                            });
                            return customerGroups;
                        });
                    };
                    CustomerManager.prototype.getCustomerAttributeDefinitionsAsync = function () {
                        var attributeDefinitionCriteria = new Commerce.Proxy.Entities.AttributeDefinitionCriteriaClass();
                        attributeDefinitionCriteria.AttributeGroupIdentifier = Commerce.ApplicationContext.Instance.channelConfiguration.CustomerAttributeGroupId;
                        var result;
                        if (attributeDefinitionCriteria.AttributeGroupIdentifier > 0) {
                            var request = this._commerceContext.storeOperations().getAttributeDefinitions(attributeDefinitionCriteria);
                            result = request.execute()
                                .map(function (attributeDefinitions) {
                                attributeDefinitions.forEach(function (attributeDefinition) {
                                    if (Commerce.ObjectExtensions.isNullOrUndefined(attributeDefinition.TranslationDetails)) {
                                        attributeDefinition.TranslationDetails = [];
                                    }
                                });
                                return attributeDefinitions.filter(function (attributeDefinition) {
                                    return attributeDefinition.DataTypeValue === Commerce.Proxy.Entities.AttributeDataType.Decimal
                                        || attributeDefinition.DataTypeValue === Commerce.Proxy.Entities.AttributeDataType.Integer
                                        || attributeDefinition.DataTypeValue === Commerce.Proxy.Entities.AttributeDataType.Text
                                        || attributeDefinition.DataTypeValue === Commerce.Proxy.Entities.AttributeDataType.TrueFalse;
                                });
                            });
                        }
                        else {
                            result = Commerce.AsyncResult.createResolved([]);
                        }
                        return result;
                    };
                    CustomerManager.prototype.updateCustomerAsync = function (customer) {
                        this.updateFullAddresses(customer.Addresses);
                        var request = this._commerceContext.customers(customer.AccountNumber).update(customer);
                        return request.execute().done(function (customer) {
                            Commerce.RetailLogger.modelManagersCustomerManagerCustomerUpdated(customer.CreatedDateTime.toDateString());
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.Customer) &&
                                Commerce.Session.instance.Customer.AccountNumber === customer.AccountNumber) {
                                Commerce.Session.instance.Customer = customer;
                            }
                        }).fail(function (errors) {
                            Commerce.RetailLogger.modelManagersCustomerManagerCustomerUpdateFailure(customer.CreatedDateTime.toDateString(), Commerce.ErrorHelper.getErrorResourceIds(errors));
                        });
                    };
                    CustomerManager.prototype.searchCustomersAsync = function (keyword, pageSize, skip) {
                        if (pageSize === void 0) { pageSize = Commerce.Config.defaultPageSize; }
                        if (skip === void 0) { skip = 0; }
                        if (Commerce.StringExtensions.isNullOrWhitespace(keyword)) {
                            return Commerce.AsyncResult.createResolved([]);
                        }
                        var query = this._commerceContext.customers();
                        var searchCriteria = {
                            Keyword: keyword,
                            DataLevelValue: 4
                        };
                        query.top(pageSize).skip(skip).inlineCount();
                        return query.search(searchCriteria).execute();
                    };
                    CustomerManager.prototype.getCustomerSearchFieldsAsync = function () {
                        var query = this._commerceContext.customers();
                        return query.getCustomerSearchFields().execute();
                    };
                    CustomerManager.prototype.getWishListsByCustomerIdAsync = function (customerId) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(customerId) || Commerce.StringExtensions.isEmptyOrWhitespace(customerId)) {
                            Commerce.RetailLogger.modelManagersCustomerManagerCustomerIsNull();
                        }
                        var query = this._commerceContext.commerceLists();
                        return query.getByCustomer(customerId).execute();
                    };
                    CustomerManager.prototype.issueLoyaltyCardAsync = function (loyaltyCard) {
                        var request = this._commerceContext.storeOperations().issueLoyaltyCard(loyaltyCard);
                        return request.execute();
                    };
                    CustomerManager.prototype.getLoyaltyCardAsync = function (cardNumber) {
                        var request = this._commerceContext.storeOperations().getLoyaltyCard(cardNumber);
                        return request.execute();
                    };
                    CustomerManager.prototype.getCustomerLoyaltyCardsAsync = function (accountNumber) {
                        var request = this._commerceContext.storeOperations().getCustomerLoyaltyCards(accountNumber);
                        return request.execute();
                    };
                    CustomerManager.prototype.getCustomerBalanceAsync = function (accountNumber, invoiceAccountNumber) {
                        var request = this._commerceContext.storeOperations().getCustomerBalance(accountNumber, invoiceAccountNumber);
                        return request.execute();
                    };
                    CustomerManager.prototype.getPurchaseHistoryAsync = function (accountNumber, pageSize, skip) {
                        var query = this._commerceContext.customers(accountNumber);
                        query.top(pageSize).skip(skip);
                        return query.getPurchaseHistory().execute();
                    };
                    CustomerManager.prototype.updateFullAddresses = function (customerAddresses) {
                        if (Commerce.ArrayExtensions.hasElements(customerAddresses)) {
                            for (var i = 0; i < customerAddresses.length; i++) {
                                this.updateFullAddress(customerAddresses[i]);
                            }
                        }
                    };
                    CustomerManager.prototype.updateFullAddress = function (customerAddress) {
                        customerAddress.FullAddress = customerAddress.Street + "\n"
                            + customerAddress.City + ", "
                            + customerAddress.State + " "
                            + customerAddress.ZipCode + "\n"
                            + customerAddress.ThreeLetterISORegionName;
                    };
                    return CustomerManager;
                }());
                RetailServer.CustomerManager = CustomerManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var FiscalIntegrationManager = (function () {
                    function FiscalIntegrationManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    FiscalIntegrationManager.prototype.getFiscalIntegrationFiscalDocumentAsync = function (hardwareProfileId, functionalityProfileGroupId, documentRetrievalCriteria) {
                        var request = this._commerceContext.storeOperations()
                            .getFiscalIntegrationFiscalDocument(hardwareProfileId, functionalityProfileGroupId, documentRetrievalCriteria);
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.getFiscalIntegrationNonFiscalDocumentAsync = function (hardwareProfileId, functionalityProfileGroupId, documentRetrievalCriteria) {
                        var request = this._commerceContext.storeOperations()
                            .getFiscalIntegrationNonFiscalDocument(hardwareProfileId, functionalityProfileGroupId, documentRetrievalCriteria);
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.getFiscalIntegrationFiscalServiceSetupDocumentAsync = function (hardwareProfileId, functionalityProfileGroupId) {
                        var request = this._commerceContext.storeOperations()
                            .getFiscalIntegrationFiscalServiceSetupDocument(hardwareProfileId, functionalityProfileGroupId);
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.getFiscalIntegrationFiscalServiceReadDataDocumentAsync = function (hardwareProfileId, functionalityProfileGroupId) {
                        var request = this._commerceContext.storeOperations()
                            .getFiscalIntegrationFiscalServiceReadDataDocument(hardwareProfileId, functionalityProfileGroupId);
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.processFiscalIntegrationFiscalServiceReadDataResultAsync = function (hardwareProfileId, functionalityProfileGroupId, document) {
                        var request = this._commerceContext.storeOperations()
                            .processFiscalIntegrationFiscalServiceReadDataResult(hardwareProfileId, functionalityProfileGroupId, document);
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.saveFiscalIntegrationRegistrationResultAsync = function (hardwareProfileId, functionalityProfileGroupId, registrationResult) {
                        var request = this._commerceContext.storeOperations()
                            .saveFiscalIntegrationRegistrationResult(hardwareProfileId, functionalityProfileGroupId, registrationResult);
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.getFiscalIntegrationRegistrationProcessAsync = function () {
                        var request = this._commerceContext.storeOperations()
                            .getFiscalIntegrationRegistrationProcess();
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.getChannelSupportedFiscalIntegrationEventsByGroupAsync = function (functionalityProfileGroupId) {
                        var request = this._commerceContext.storeOperations()
                            .getChannelSupportedFiscalIntegrationEventsByGroup(functionalityProfileGroupId);
                        return request.execute();
                    };
                    FiscalIntegrationManager.prototype.getFiscalIntegrationTechnicalProfilesAsync = function (hardwareProfileId) {
                        var request = this._commerceContext.storeOperations()
                            .getFiscalIntegrationTechnicalProfiles(hardwareProfileId);
                        return request.execute();
                    };
                    return FiscalIntegrationManager;
                }());
                RetailServer.FiscalIntegrationManager = FiscalIntegrationManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var FiscalRegisterManager = (function () {
                    function FiscalRegisterManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    FiscalRegisterManager.prototype.saveFiscalTransaction = function (fiscalTransaction) {
                        var request = this._commerceContext.storeOperations().saveFiscalTransaction(fiscalTransaction);
                        return request.execute();
                    };
                    FiscalRegisterManager.prototype.getSalesOrdersWithNoFiscalTransactions = function (storeNumber, terminalId) {
                        var request = this._commerceContext.storeOperations()
                            .getSalesOrdersWithNoFiscalTransactions(storeNumber, terminalId);
                        return request.execute();
                    };
                    return FiscalRegisterManager;
                }());
                RetailServer.FiscalRegisterManager = FiscalRegisterManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var FulfillmentManager = (function () {
                    function FulfillmentManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    FulfillmentManager.prototype.shipLinesAsync = function (fulfillmentLines) {
                        var request = this._commerceContext.salesOrders().shipFulfillmentLines(fulfillmentLines);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.acceptLinesAsync = function (fulfillmentLines) {
                        var request = this._commerceContext.salesOrders().acceptFulfillmentLines(fulfillmentLines);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.getFulfillmentPackingSlipsAsync = function (packFulfillmentLines, hardwareProfileId) {
                        var request = this._commerceContext.salesOrders().getFulfillmentPackingSlips(packFulfillmentLines, hardwareProfileId);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.getFulfillmentPackingSlipsByIdAsync = function (salesId, packingSlipId, hardwareProfileId) {
                        var request = this._commerceContext.salesOrders().getFulfillmentPackingSlipsById(salesId, packingSlipId, hardwareProfileId);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.getFulfillmentPickingListsAsync = function (pickingListFulfillmentLine, hardwareProfileId) {
                        var request = this._commerceContext.salesOrders().getFulfillmentPickingLists(pickingListFulfillmentLine, hardwareProfileId);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.getFulfillmentLinesAsync = function (fulfillmentSearchCriteria, sortColumn, pageSize, skip) {
                        var query = this._commerceContext.salesOrders();
                        query.top(pageSize).skip(skip).orderByColumn(sortColumn);
                        return query.getFulfillmentLines(fulfillmentSearchCriteria).execute();
                    };
                    FulfillmentManager.prototype.pickLinesAsync = function (fulfillmentLines) {
                        var request = this._commerceContext.salesOrders().pickFulfillmentLines(fulfillmentLines);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.packFulfillmentLinesAsync = function (fulfillmentLines) {
                        var request = this._commerceContext.salesOrders().packFulfillmentLines(fulfillmentLines);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.markFulfillmentLinesAsPackedAsync = function (fulfillmentLines) {
                        var request = this._commerceContext.salesOrders().markFulfillmentLinesAsPacked(fulfillmentLines);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.markAsPickedAsync = function (pickedFulfillmentLines) {
                        var request = this._commerceContext.salesOrders().markAsPicked(pickedFulfillmentLines);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.rejectLinesAsync = function (fulfillmentLines) {
                        var request = this._commerceContext.salesOrders().rejectFulfillmentLines(fulfillmentLines);
                        return request.execute();
                    };
                    FulfillmentManager.prototype.getPackingSlipsDataAsync = function (salesId) {
                        var request = this._commerceContext.salesOrders().getPackingSlipsData(salesId);
                        return request.execute();
                    };
                    return FulfillmentManager;
                }());
                RetailServer.FulfillmentManager = FulfillmentManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var InventoryManager = (function () {
                    function InventoryManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    InventoryManager.prototype.getProductPricesAsync = function (productId, inventoryDimId, barcode, customerId, unitOfMeasure, quantity) {
                        var query = this._commerceContext.products().getPrices(productId, inventoryDimId, barcode, customerId, unitOfMeasure, quantity);
                        return query.execute();
                    };
                    InventoryManager.prototype.getPurchaseOrdersAsync = function () {
                        var query = this._commerceContext.purchaseOrders().read();
                        return query.execute();
                    };
                    InventoryManager.prototype.getPurchaseOrderDetailsAsync = function (orderId) {
                        var query = this._commerceContext.purchaseOrders(orderId).read();
                        return query.execute();
                    };
                    InventoryManager.prototype.updatePurchaseOrderAsync = function (purchaseOrder) {
                        var request = this._commerceContext.purchaseOrders(purchaseOrder.OrderId)
                            .update(purchaseOrder);
                        return request.execute();
                    };
                    InventoryManager.prototype.commitPurchaseOrderAsync = function (purchaseOrderId) {
                        var request = this._commerceContext.purchaseOrders(purchaseOrderId).commit();
                        return request.execute();
                    };
                    InventoryManager.prototype.getTransferOrdersAsync = function () {
                        var query = this._commerceContext.transferOrders().read();
                        return query.execute();
                    };
                    InventoryManager.prototype.getPickingListsAsync = function () {
                        var query = this._commerceContext.pickingLists().read();
                        return query.execute();
                    };
                    InventoryManager.prototype.getTransferOrderDetailsAsync = function (orderId) {
                        var query = this._commerceContext.transferOrders(orderId).read();
                        return query.execute();
                    };
                    InventoryManager.prototype.getPickingListDetailsAsync = function (pickingListId) {
                        var query = this._commerceContext.pickingLists(pickingListId).read();
                        return query.execute();
                    };
                    InventoryManager.prototype.updateTransferOrderAsync = function (transferOrder) {
                        var request = this._commerceContext.transferOrders(transferOrder.OrderId)
                            .update(transferOrder);
                        return request.execute();
                    };
                    InventoryManager.prototype.updatePickingListAsync = function (pickingList) {
                        var request = this._commerceContext.pickingLists(pickingList.OrderId).update(pickingList);
                        return request.execute();
                    };
                    InventoryManager.prototype.commitTransferOrderAsync = function (transferOrderId) {
                        var request = this._commerceContext.transferOrders(transferOrderId).commit();
                        return request.execute();
                    };
                    InventoryManager.prototype.commitPickingListAsync = function (pickingListId) {
                        var request = this._commerceContext.pickingLists(pickingListId).commit();
                        return request.execute();
                    };
                    InventoryManager.prototype.saveKitTransactionAsync = function (trans) {
                        trans.Id = Commerce.NumberSequence.GetNextTransactionId();
                        var request = this._commerceContext.storeOperations().disassembleKitTransactions(trans);
                        return request.execute();
                    };
                    InventoryManager.prototype.getPickAndReceiveOrdersAsync = function () {
                        var pickingsListsRequest = this._commerceContext.pickingLists().read();
                        var purchaseOrdersRequest = this._commerceContext.purchaseOrders().read();
                        var transferOrdersRequest = this._commerceContext.transferOrders().read();
                        var pickingListsResult;
                        var transferOrdersResult;
                        var purchaseOrdersResult;
                        var pickingListAsyncResult = pickingsListsRequest.execute()
                            .done(function (result) {
                            pickingListsResult = result;
                        });
                        var transferOrderAsyncResult = transferOrdersRequest.execute()
                            .done(function (result) {
                            transferOrdersResult = result;
                        });
                        var purchaseOrderAsyncResult = purchaseOrdersRequest.execute()
                            .done(function (result) {
                            purchaseOrdersResult = result;
                        });
                        var asyncResults = [pickingListAsyncResult, transferOrderAsyncResult, purchaseOrderAsyncResult];
                        return Commerce.VoidAsyncResult.join(asyncResults).map(function () {
                            var orders = {
                                pickingLists: pickingListsResult,
                                transferOrders: transferOrdersResult,
                                purchaseOrders: purchaseOrdersResult
                            };
                            return orders;
                        });
                    };
                    InventoryManager.prototype.createTransferOrderAsync = function (transferOrder) {
                        var request = this._commerceContext.transferOrders().create(transferOrder);
                        return request.execute();
                    };
                    InventoryManager.prototype.getTransferOrderCommentsAsync = function (transferOrderId) {
                        var request = this._commerceContext.transferOrders(transferOrderId).getTransferOrderComments();
                        return request.execute();
                    };
                    InventoryManager.prototype.addTransferOrderCommentAsync = function (transferOrderId, commentedBy, commentText) {
                        var request = this._commerceContext.transferOrders(transferOrderId).addTransferOrderComment(commentedBy, commentText);
                        return request.execute();
                    };
                    InventoryManager.prototype.deleteTransferOrderAsync = function (transferOrderId) {
                        var request = this._commerceContext.transferOrders(transferOrderId).delete(transferOrderId);
                        return request.execute();
                    };
                    InventoryManager.prototype.createTransferOrderLinesAsync = function (transferOrderId, transferOrderLines) {
                        var request;
                        request = this._commerceContext.transferOrders(transferOrderId).createTransferOrderLines(transferOrderLines);
                        return request.execute();
                    };
                    InventoryManager.prototype.updateTransferOrderLinesAsync = function (transferOrderId, transferOrderLines) {
                        var request;
                        request = this._commerceContext.transferOrders(transferOrderId).updateTransferOrderLines(transferOrderLines);
                        return request.execute();
                    };
                    InventoryManager.prototype.deleteTransferOrderLinesAsync = function (transferOrderId, transferOrderLines) {
                        var request;
                        request = this._commerceContext.transferOrders(transferOrderId).deleteTransferOrderLines(transferOrderLines);
                        return request.execute();
                    };
                    InventoryManager.prototype.getTransferOrderLinesAsync = function (transferOrderId) {
                        var request = this._commerceContext.transferOrders(transferOrderId).getTransferOrderLines();
                        return request.execute();
                    };
                    InventoryManager.prototype.getTransferOrderJournalsAsync = function (transferOrderId) {
                        var request = this._commerceContext.transferOrders(transferOrderId).getTransferOrderJournals();
                        return request.execute();
                    };
                    InventoryManager.prototype.getTransferPackingSlipAsync = function (transferOrderJournal, isPreview, isCopy) {
                        var receiptCriteria = {
                            ReceiptTypeValue: Commerce.Proxy.Entities.ReceiptType.PackingSlip,
                            IsCopy: false,
                            IsPreview: isPreview,
                            QueryBySalesId: true,
                            IsRemoteTransaction: true,
                            HardwareProfileId: Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId
                        };
                        var request = this._commerceContext.transferOrders(transferOrderJournal.OrderId).getTransferPackingSlip(transferOrderJournal.VoucherId, receiptCriteria);
                        return request.execute();
                    };
                    return InventoryManager;
                }());
                RetailServer.InventoryManager = InventoryManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var NotificationManager = (function () {
                    function NotificationManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    NotificationManager.prototype.getNotificationsAsync = function (subscribedOperations) {
                        var request = this._commerceContext.storeOperations().getNotifications(subscribedOperations);
                        return request.execute();
                    };
                    NotificationManager.prototype.acknowledgeNotificationsAsync = function (lastPullDateTime) {
                        var request = this._commerceContext.storeOperations().acknowledgeNotifications(lastPullDateTime);
                        return request.execute();
                    };
                    return NotificationManager;
                }());
                RetailServer.NotificationManager = NotificationManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var OperatorManager = (function () {
                    function OperatorManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    OperatorManager.prototype.getEmployeesAsync = function () {
                        var request = this._commerceContext.employees().read();
                        return request.execute();
                    };
                    OperatorManager.prototype.getEmployeeAsync = function (employeeId) {
                        var request = this._commerceContext.employees(employeeId).read();
                        return request.execute();
                    };
                    OperatorManager.prototype.getCurrentEmployeeAsync = function () {
                        var request = this._commerceContext.employees().getCurrentEmployee();
                        return request.execute();
                    };
                    return OperatorManager;
                }());
                RetailServer.OperatorManager = OperatorManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var PaymentManager = (function () {
                    function PaymentManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    PaymentManager.prototype.calculateTotalCurrencyAmount = function (currencyRequests) {
                        var request = this._commerceContext.storeOperations().calculateTotalCurrencyAmount(currencyRequests);
                        return request.execute();
                    };
                    PaymentManager.prototype.getCurrenciesAmount = function (currencyCode, amount) {
                        var request = this._commerceContext.storeOperations().getCurrenciesAmount(currencyCode, amount);
                        return request.execute();
                    };
                    PaymentManager.prototype.getCreditMemoById = function (creditMemoId) {
                        var request = this._commerceContext.storeOperations().getCreditMemoById(creditMemoId);
                        return request.execute();
                    };
                    PaymentManager.prototype.getGiftCardById = function (giftCardId) {
                        var request = this._commerceContext.storeOperations().getGiftCard(giftCardId);
                        return request.execute();
                    };
                    PaymentManager.prototype.roundAmountByTenderType = function (amount, tenderTypeId) {
                        var request = this._commerceContext.storeOperations().roundAmountByTenderType(amount, tenderTypeId);
                        return request.execute().map(function (result) { return parseFloat(result); });
                    };
                    return PaymentManager;
                }());
                RetailServer.PaymentManager = PaymentManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var ProductDataManager = (function () {
                    function ProductDataManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    ProductDataManager.prototype.getRecommendedProductsAsync = function (productIds, customerAccountNumber, pageSize, skip) {
                        if (!Commerce.ApplicationContext.Instance.channelConfiguration.EnableProductRecommendations) {
                            return Commerce.AsyncResult.createResolved([]);
                        }
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getRecommendedProducts(productIds, customerAccountNumber).execute()
                            .fail(function (errors) {
                            Commerce.RetailLogger.modelManagersProductManagerGetRecommendedProductsFailedUnknownError(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        });
                    };
                    return ProductDataManager;
                }());
                RetailServer.ProductDataManager = ProductDataManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var ProductManager = (function () {
                    function ProductManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    ProductManager.prototype.getCategoriesAsync = function (channelId, skip, take) {
                        var query = this._commerceContext.categories();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(take) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(take).skip(skip);
                        }
                        return query.getCategories(channelId).execute();
                    };
                    ProductManager.prototype.getChildCategoriesAsync = function (channelId, parentCategoryId, skip, take) {
                        var query = this._commerceContext.categories();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(take) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(take).skip(skip).inlineCount();
                        }
                        return query.getChildren(channelId, parentCategoryId).execute();
                    };
                    ProductManager.prototype.getCatalogsAsync = function (channelId) {
                        var request = this._commerceContext.catalogs().getCatalogs(channelId, true);
                        return request.execute();
                    };
                    ProductManager.prototype.getAvailableInventoriesFromKeywordAsync = function (keyword) {
                        return this._commerceContext.orgUnits().getAvailableInventory("", "", keyword).execute();
                    };
                    ProductManager.prototype.getProductAvailabilityAsync = function (productId) {
                        var query = this._commerceContext.orgUnits();
                        return query.getProductAvailability(productId).execute();
                    };
                    ProductManager.prototype.searchProductAvailabilityAsync = function (productId, searchCriteria, pageSize, skip) {
                        var query = this._commerceContext.orgUnits();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.searchProductAvailability(productId, searchCriteria).execute();
                    };
                    ProductManager.prototype.getProductAvailabilityByDimensionsAsync = function (inventLocationIds, productId, productDimensionCombinations) {
                        var query = this._commerceContext.orgUnits();
                        return query.getProductAvailabilityByDimensions(inventLocationIds, productId, productDimensionCombinations)
                            .execute();
                    };
                    ProductManager.prototype.getInventoryAvailableToPromiseAsync = function (productId, itemId, inventoryLocationId) {
                        return this._commerceContext.storeOperations().getInventoryAvailableToPromise(productId, itemId, inventoryLocationId).execute();
                    };
                    ProductManager.prototype.getRecommendedProductsAsync = function (productIds, customerAccountNumber, pageSize, skip, correlationId) {
                        var request = new Commerce.GetRecommendedProductsRequest(correlationId, productIds, customerAccountNumber, pageSize, skip);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                            .map(function (result) {
                            if (!result.canceled) {
                                return result.data.recommendedProducts;
                            }
                            else {
                                return new Array();
                            }
                        });
                    };
                    ProductManager.prototype.searchByTextAsync = function (searchText, channelId, catalogId, pageSize, skip) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                            return Commerce.AsyncResult.createResolved([]);
                        }
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.searchByText(channelId, catalogId, searchText).execute();
                    };
                    ProductManager.prototype.searchByCategoryAsync = function (categoryId, channelId, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.searchByCategory(channelId, catalogId, categoryId).execute();
                    };
                    ProductManager.prototype.getRefinersByTextAsync = function (searchText, catalogId, pageSize, skip) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                            return Commerce.AsyncResult.createResolved([]);
                        }
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getRefinersByText(catalogId, searchText).execute();
                    };
                    ProductManager.prototype.getRefinerValuesByTextAsync = function (searchText, refinerId, refinerSourceValue, catalogId, pageSize, skip) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                            return Commerce.AsyncResult.createResolved([]);
                        }
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getRefinerValuesByText(catalogId, searchText, refinerId, refinerSourceValue).execute();
                    };
                    ProductManager.prototype.refineSearchByTextAsync = function (searchText, refinerValues, channelId, catalogId, pageSize, skip) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(searchText)) {
                            return Commerce.AsyncResult.createResolved([]);
                        }
                        var query = this._commerceContext.products();
                        query.top(pageSize).skip(skip);
                        return query.refineSearchByText(channelId, catalogId, searchText, refinerValues).execute();
                    };
                    ProductManager.prototype.getRefinersByCategoryAsync = function (categoryId, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getRefinersByCategory(catalogId, categoryId).execute();
                    };
                    ProductManager.prototype.getRefinerValuesByCategoryAsync = function (categoryId, refinerId, refinerSourceValue, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getRefinerValuesByCategory(catalogId, categoryId, refinerId, refinerSourceValue).execute();
                    };
                    ProductManager.prototype.refineSearchByCategoryAsync = function (categoryId, refinerValues, channelId, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products();
                        query.top(pageSize).skip(skip);
                        return query.refineSearchByCategory(channelId, catalogId, categoryId, refinerValues).execute();
                    };
                    ProductManager.prototype.getMediaLocationsAsync = function (productId, channelId, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getMediaLocations(channelId, catalogId).execute();
                    };
                    ProductManager.prototype.getMediaBlobsAsync = function (productId, channelId, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getMediaBlobs(channelId, catalogId).execute();
                    };
                    ProductManager.prototype.getAttributeValuesAsync = function (productId, channelId, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getAttributeValues(channelId, catalogId).execute();
                    };
                    ProductManager.prototype.getSearchTextSuggestionsAsync = function (channelId, catalogId, partialSearchText, hitPreTag, hitPostTag, pageSize, skip) {
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        var result = query.getSearchSuggestions(channelId, catalogId, partialSearchText, hitPreTag, hitPostTag).execute();
                        return result;
                    };
                    ProductManager.prototype.getByIdAsync = function (productId, channelId) {
                        var query = this._commerceContext.products(productId);
                        return query.getById(channelId).execute();
                    };
                    ProductManager.prototype.getProductComparisonLinesAsync = function (channelId, catalogId, productIds, pageSize, skip) {
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.compare(channelId, catalogId, productIds).execute();
                    };
                    ProductManager.prototype.getByIdsAsync = function (productIds, channelId, pageSize, skip) {
                        var query = this._commerceContext.products();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getByIds(channelId, productIds).execute();
                    };
                    ProductManager.prototype.getDimensionValuesAsync = function (productId, channelId, dimensionType, selectedDimensions, kitVariantResolutionContext, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getDimensionValues(channelId, dimensionType, selectedDimensions, kitVariantResolutionContext).execute();
                    };
                    ProductManager.prototype.getVariantsByDimensionValuesAsync = function (productId, channelId, selectedDimensions, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getVariantsByDimensionValues(channelId, selectedDimensions).execute();
                    };
                    ProductManager.prototype.getUnitsOfMeasureAsync = function (productId, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getUnitsOfMeasure().execute();
                    };
                    ProductManager.prototype.getDefaultComponentsAsync = function (productId, channelId, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getDefaultComponents(channelId).execute();
                    };
                    ProductManager.prototype.getVariantsByComponentsInSlotsAsync = function (productId, channelId, componentSlotRelations, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getVariantsByComponentsInSlots(channelId, componentSlotRelations).execute();
                    };
                    ProductManager.prototype.getActivePricesAsync = function (projectionDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers) {
                        var query = this._commerceContext.products().getActivePrices(projectionDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers);
                        return query.execute();
                    };
                    ProductManager.prototype.getDiscountedProductPriceAsync = function (productId, customerId, unitOfMeasureSymbol, loyaltyCardId, affiliationLoyaltyTiers) {
                        if (Commerce.NumberExtensions.isNullNaNOrZero(productId) || productId <= 0 ||
                            Commerce.StringExtensions.isNullOrWhitespace(unitOfMeasureSymbol)) {
                            return Commerce.AsyncResult.createResolved(null);
                        }
                        else if (Commerce.StringExtensions.isNullOrWhitespace(customerId)) {
                            customerId = Commerce.StringExtensions.EMPTY;
                        }
                        var query = this._commerceContext.products(productId);
                        return query.calculateProductPrice(customerId, unitOfMeasureSymbol, loyaltyCardId, affiliationLoyaltyTiers).execute();
                    };
                    ProductManager.prototype.getRelationTypesAsync = function (productId, channelId, catalogId, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getRelationTypes(channelId, catalogId).execute();
                    };
                    ProductManager.prototype.getRelatedProductsAsync = function (productId, channelId, catalogId, relationTypeId, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getRelatedProducts(channelId, catalogId, relationTypeId).execute();
                    };
                    ProductManager.prototype.getFilteredSlotComponentsAsync = function (productId, channelId, slotId, selectedComponents, pageSize, skip) {
                        var query = this._commerceContext.products(productId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getFilteredSlotComponents(channelId, slotId, selectedComponents).execute();
                    };
                    ProductManager.prototype.getComponentByProductSlotRelationAsync = function (channelId, componentInSlot) {
                        var query = this._commerceContext.products();
                        return query.getComponentByProductSlotRelation(channelId, componentInSlot).execute();
                    };
                    return ProductManager;
                }());
                RetailServer.ProductManager = ProductManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var RecordingManager = (function () {
                    function RecordingManager(commerceContext) {
                        this._commerceContext = commerceContext;
                    }
                    RecordingManager.prototype.generateRecordingFile = function (recording) {
                        var request = this._commerceContext.storeOperations().generateRecordingFile(recording);
                        return request.execute();
                    };
                    RecordingManager.prototype.generateTrainingDocument = function (recording) {
                        var request = this._commerceContext.storeOperations().generateTrainingDocument(recording);
                        return request.execute();
                    };
                    RecordingManager.prototype.generateBusinessProcessModelPackage = function (recording) {
                        var request = this._commerceContext.storeOperations().generateBusinessProcessModelPackage(recording);
                        return request.execute();
                    };
                    RecordingManager.prototype.generateRecordingBundle = function (recording) {
                        var request = this._commerceContext.storeOperations().generateRecordingBundle(recording);
                        return request.execute();
                    };
                    RecordingManager.prototype.getBusinessProcessModelLibraries = function () {
                        var request = this._commerceContext.storeOperations().getBusinessProcessModelLibraries();
                        return request.execute();
                    };
                    RecordingManager.prototype.getBusinessProcessModelLibrary = function (businessProcessModelFrameworkLineId, hierarchyDepth) {
                        var request = this._commerceContext.storeOperations().getBusinessProcessModelLibrary(businessProcessModelFrameworkLineId, hierarchyDepth);
                        return request.execute();
                    };
                    RecordingManager.prototype.searchTaskGuidesByTitle = function (businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue) {
                        var request = this._commerceContext.storeOperations().searchTaskGuidesByTitle(businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue);
                        return request.execute();
                    };
                    RecordingManager.prototype.downloadRecording = function (businessProcessModelLineId) {
                        var request = this.getDownloadRecordingRequest(businessProcessModelLineId);
                        return request.execute();
                    };
                    RecordingManager.prototype.getStorageAccessTokenForUpload = function () {
                        var request = this._commerceContext.storeOperations().getStorageAccessTokenForUpload();
                        return request.execute();
                    };
                    RecordingManager.prototype.uploadRecording = function (recording, businessProcessModelLineId) {
                        var request = this._commerceContext.storeOperations().uploadRecording(recording, businessProcessModelLineId);
                        return request.execute();
                    };
                    RecordingManager.prototype.loadRecordingFromFile = function (recordingUrl) {
                        var request = this._commerceContext.storeOperations().loadRecordingFromFile(recordingUrl);
                        return request.execute();
                    };
                    RecordingManager.prototype.getDownloadRecordingRequest = function (businessProcessModelLineId) {
                        var oDataOperationParameters = new Commerce.Proxy.Common.ODataOperationParameters();
                        oDataOperationParameters.parameters = { businessProcessModelLineId: businessProcessModelLineId };
                        return this._commerceContext.storeOperations().createDataServiceRequestForOperation("DownloadRecording", true, Commerce.Proxy.Entities.TaskRecorderRecordingClass, "false", oDataOperationParameters);
                    };
                    return RecordingManager;
                }());
                RetailServer.RecordingManager = RecordingManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var ReportManager = (function () {
                    function ReportManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    ReportManager.prototype.getListOfReportsAsync = function (locale) {
                        var request = this.getReportsDataServiceQuery(locale).searchReportDataSet("ALL", null);
                        return request.execute();
                    };
                    ReportManager.prototype.getReportsDataAsync = function (reportId, parameters, locale) {
                        if (!Commerce.ArrayExtensions.hasElements(parameters)) {
                            reportId = "ALL";
                        }
                        var request = this.getReportsDataServiceQuery(locale).searchReportDataSet(reportId, parameters);
                        return request.execute();
                    };
                    ReportManager.prototype.getSrsReportsDataAsync = function (reportId, parameters) {
                        var request = this._commerceContext.storeOperations().getSrsReportDataSet(reportId, parameters);
                        return request.execute();
                    };
                    ReportManager.prototype.getReportsDataServiceQuery = function (locale) {
                        var query = this._commerceContext.storeOperations();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(locale)) {
                            query.locale(locale);
                        }
                        return query;
                    };
                    return ReportManager;
                }());
                RetailServer.ReportManager = ReportManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var SalesOrderManager = (function () {
                    function SalesOrderManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    SalesOrderManager.prototype.getPagedJournalTransactions = function (searchCriteria, pageSize, skip) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria)) {
                            var query = this._commerceContext.storeOperations();
                            query.top(pageSize).skip(skip);
                            return query.searchJournalTransactions(searchCriteria).execute();
                        }
                        return Commerce.AsyncResult.createResolved([]);
                    };
                    SalesOrderManager.prototype.getPagedSalesOrders = function (searchCriteria, pageSize, skip) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria)) {
                            var query = this._commerceContext.salesOrders();
                            query.top(pageSize).skip(skip);
                            return query.search(searchCriteria).execute();
                        }
                        return Commerce.AsyncResult.createResolved([]);
                    };
                    SalesOrderManager.prototype.getPagedOrders = function (searchCriteria, pageSize, skip) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(searchCriteria)) {
                            var query = this._commerceContext.salesOrders();
                            query.top(pageSize).skip(skip);
                            return query.searchOrders(searchCriteria).execute();
                        }
                        return Commerce.AsyncResult.createResolved([]);
                    };
                    SalesOrderManager.prototype.getPagedSalesOrdersByCustomerIdAsync = function (customerId, pageSize, skip) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(customerId)) {
                            var query = this._commerceContext.customers(customerId);
                            query.top(pageSize).skip(skip);
                            return query.getOrderHistory().execute();
                        }
                        return Commerce.AsyncResult.createResolved([]);
                    };
                    SalesOrderManager.prototype.getSalesOrdersByCustomerIdAsync = function (customerId, desiredResultCount) {
                        var query = this._commerceContext.customers(customerId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(desiredResultCount)) {
                            query.top(desiredResultCount);
                        }
                        return query.getOrderHistory().execute();
                    };
                    SalesOrderManager.prototype.getOrdersByReceiptIdAsync = function (receiptId, orderStoreNumber, orderTerminalId, transactionTypeValues) {
                        var searchCriteria = {
                            StoreId: orderStoreNumber,
                            TerminalId: orderTerminalId,
                            ReceiptId: receiptId,
                            IncludeDetails: true
                        };
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(transactionTypeValues)) {
                            searchCriteria.SalesTransactionTypeValues = transactionTypeValues;
                        }
                        var request = this._commerceContext.salesOrders().search(searchCriteria);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getReasonCodeAsync = function (reasonCodeId) {
                        return this.getReasonCodesByIdAsync(reasonCodeId).map(function (reasonCodes) {
                            var reasonCode = null;
                            if (Commerce.ArrayExtensions.hasElements(reasonCodes)) {
                                reasonCode = reasonCodes[0];
                            }
                            return reasonCode;
                        });
                    };
                    SalesOrderManager.prototype.getReasonCodesByIdAsync = function (reasonCodeId) {
                        var query = this._commerceContext.storeOperations();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee)) {
                            query.locale(Commerce.Session.instance.CurrentEmployee.CultureName);
                        }
                        return query.getReasonCodesById(reasonCodeId).execute();
                    };
                    SalesOrderManager.prototype.getReceiptMasks = function (receiptTransactionType) {
                        return this._commerceContext.storeOperations().getReceiptMasks(receiptTransactionType).execute();
                    };
                    SalesOrderManager.prototype.getReceiptsForPrintAsync = function (id, isCopy, receiptTypeId, isRemoteOrder, shiftId, shiftTerminalId, isPreview, queryBySalesId, hardwareProfileId) {
                        var receiptShiftId = shiftId ? shiftId : 0;
                        var receiptShiftTerminalId = Commerce.StringExtensions.isNullOrWhitespace(shiftTerminalId) ? Commerce.StringExtensions.EMPTY : shiftTerminalId;
                        var receiptIsPreview = isPreview ? isPreview : false;
                        var receiptQueryBySalesId = queryBySalesId ? queryBySalesId : false;
                        var criteria = new Commerce.Proxy.Entities.ReceiptRetrievalCriteriaClass({
                            IsCopy: isCopy,
                            ReceiptTypeValue: receiptTypeId,
                            IsRemoteTransaction: isRemoteOrder,
                            ShiftId: receiptShiftId,
                            ShiftTerminalId: receiptShiftTerminalId,
                            IsPreview: receiptIsPreview,
                            QueryBySalesId: receiptQueryBySalesId,
                            HardwareProfileId: hardwareProfileId
                        });
                        var request = this._commerceContext.salesOrders(id).getReceipts(criteria);
                        return request.execute()
                            .done(function (result) {
                            result = result || [];
                            var receiptIds = Commerce.StringExtensions.EMPTY;
                            result.forEach(function (receipt) {
                                receiptIds += receipt.ReceiptId + " ";
                            });
                            Commerce.RetailLogger.modelManagersSalesOrderGetReceiptSuccess(receiptIds);
                        });
                    };
                    SalesOrderManager.prototype.getGiftReceiptsForPrintAsync = function (id, salesLineNumbers, isCopy, isPreview, queryBySalesId, hardwareProfileId) {
                        var criteria = new Commerce.Proxy.Entities.ReceiptRetrievalCriteriaClass({
                            IsCopy: isCopy,
                            ReceiptTypeValue: Commerce.Proxy.Entities.ReceiptType.GiftReceipt,
                            IsRemoteTransaction: queryBySalesId,
                            ShiftId: 0,
                            ShiftTerminalId: Commerce.StringExtensions.EMPTY,
                            IsPreview: isPreview,
                            QueryBySalesId: queryBySalesId,
                            HardwareProfileId: hardwareProfileId
                        });
                        var request = this._commerceContext.salesOrders(id).getGiftReceipts(salesLineNumbers, criteria);
                        return request.execute()
                            .done(function (result) {
                            var receiptIds = Commerce.StringExtensions.EMPTY;
                            result.forEach(function (receipt) {
                                receiptIds += receipt.ReceiptId + " ";
                            });
                            Commerce.RetailLogger.modelManagersSalesOrderGetReceiptSuccess(receiptIds);
                        });
                    };
                    SalesOrderManager.prototype.getSalesOrderBySearchCriteriaAsync = function (searchCriteria) {
                        var originalTransactionIds = searchCriteria.TransactionIds;
                        if (Commerce.ArrayExtensions.hasElements(originalTransactionIds)) {
                            searchCriteria.TransactionIds = originalTransactionIds.filter(function (id) { return !Commerce.StringExtensions.isNullOrWhitespace(id); });
                        }
                        var request = this._commerceContext.salesOrders().search(searchCriteria);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getSalesOrderDetailsByTransactionIdAsync = function (transactionId, searchLocationValue) {
                        var request = this._commerceContext.salesOrders().getSalesOrderDetailsByTransactionId(transactionId, searchLocationValue);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getSalesOrderDetailsBySalesIdAsync = function (salesId) {
                        var request = this._commerceContext.salesOrders().getSalesOrderDetailsBySalesId(salesId);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getSalesOrderDetailsByQuotationIdAsync = function (quotationId) {
                        var request = this._commerceContext.salesOrders().getSalesOrderDetailsByQuotationId(quotationId);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.createPickingList = function (salesId) {
                        var request = this._commerceContext.salesOrders().createPickingList(salesId);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.createPackingSlip = function (salesId) {
                        var request = this._commerceContext.salesOrders().createPackingSlip(salesId);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getSalesInvoicesBySalesIdAsync = function (salesId) {
                        var request = this._commerceContext.salesOrders().getInvoicesBySalesId(salesId);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getInvoicesAsync = function (invoiceSearchCriteria) {
                        var request = this._commerceContext.salesOrders().getInvoices(invoiceSearchCriteria);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.searchSalesTransactionsByReceiptIdAsync = function (receiptId) {
                        var request = this._commerceContext.salesOrders().searchSalesTransactionsByReceiptId(receiptId);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.validatePrintReceiptCopyAllowed = function (associatedOrder) {
                        var request = this._commerceContext.storeOperations().validatePrintReceiptCopyAllowed(associatedOrder);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getAttributeGroupDefinitions = function (attributeGroupIds) {
                        var attributeGroupDefinitionCriteria = new Commerce.Proxy.Entities.AttributeGroupDefinitionCriteriaClass();
                        attributeGroupDefinitionCriteria.AttributeGroupIdentifiers = attributeGroupIds;
                        var request = this._commerceContext.storeOperations().getAttributeGroupDefinitions(attributeGroupDefinitionCriteria);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getAttributeDefinitions = function (attributeGroupId) {
                        var attributeDefinitionCriteria = new Commerce.Proxy.Entities.AttributeDefinitionCriteriaClass();
                        attributeDefinitionCriteria.AttributeGroupIdentifier = attributeGroupId;
                        var request = this._commerceContext.storeOperations().getAttributeDefinitions(attributeDefinitionCriteria);
                        return request.execute();
                    };
                    SalesOrderManager.prototype.getInvoicedSalesLinesBySalesIdsAsync = function (salesIds, pageSize, skip) {
                        var query = this._commerceContext.salesOrders();
                        query.top(pageSize).skip(skip).inlineCount();
                        return query.getInvoicedSalesLinesBySalesIds(salesIds).execute();
                    };
                    return SalesOrderManager;
                }());
                RetailServer.SalesOrderManager = SalesOrderManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var StockCountJournalManager = (function () {
                    function StockCountJournalManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    StockCountJournalManager.prototype.createStockCountJournalAsync = function (stockCountJournal) {
                        var request = this._commerceContext.stockCountJournals().create(stockCountJournal);
                        return request.execute();
                    };
                    StockCountJournalManager.prototype.updateStockCountJournalAsync = function (stockCountJournal) {
                        var request = this._commerceContext.stockCountJournals(stockCountJournal.JournalId).update(stockCountJournal);
                        return request.execute();
                    };
                    StockCountJournalManager.prototype.commitStockCountJournalAsync = function (journalId) {
                        var request = this._commerceContext.stockCountJournals(journalId).commit();
                        return request.execute();
                    };
                    StockCountJournalManager.prototype.syncStockCountJournalAsync = function (journalId) {
                        var request = this._commerceContext.stockCountJournals(journalId).syncTransactions();
                        return request.execute();
                    };
                    StockCountJournalManager.prototype.getStockCountJournalDetailsAsync = function (journalId) {
                        var request = this._commerceContext.stockCountJournals(journalId).read();
                        return request.execute();
                    };
                    StockCountJournalManager.prototype.getStockCountJournalsAsync = function (pageSize, skip) {
                        var query = this._commerceContext.stockCountJournals();
                        if (pageSize && skip) {
                            query.top(pageSize).skip(skip).inlineCount();
                        }
                        return query.read().execute();
                    };
                    StockCountJournalManager.prototype.syncAllStockCountJournalsAsync = function () {
                        var request = this._commerceContext.stockCountJournals().sync();
                        return request.execute();
                    };
                    StockCountJournalManager.prototype.deleteStockCountJournalsAsync = function (journalIds) {
                        var requests = [];
                        var deleteRequest;
                        for (var i = 0; i < journalIds.length; i++) {
                            deleteRequest = this._commerceContext.stockCountJournals(journalIds[i]).removeJournal();
                            requests.push(deleteRequest);
                        }
                        return deleteRequest.executeBatch(requests);
                    };
                    StockCountJournalManager.prototype.deleteStockCountJournalTransactionByProductRecIdAsync = function (journalId, productRecordId) {
                        var request = this._commerceContext.stockCountJournals(journalId)
                            .removeStockCountLineByProductRecId(productRecordId);
                        return request.execute();
                    };
                    StockCountJournalManager.prototype.deleteStockCountJournalTransactionByLineIdAsync = function (journalId, lineRecordId) {
                        var request = this._commerceContext.stockCountJournals(journalId)
                            .removeStockCountLineByLineId(lineRecordId);
                        return request.execute();
                    };
                    return StockCountJournalManager;
                }());
                RetailServer.StockCountJournalManager = StockCountJournalManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var StoreOperationsManager = (function () {
                    function StoreOperationsManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    StoreOperationsManager.prototype.createNonSalesTransaction = function (nonSalesTransaction) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(nonSalesTransaction.Id)) {
                            nonSalesTransaction.Id = Commerce.NumberSequence.GetNextTransactionId();
                        }
                        var request = this._commerceContext.storeOperations().createNonSalesTransaction(nonSalesTransaction);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.createDropAndDeclareTransaction = function (dropAndDeclareTransaction) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(dropAndDeclareTransaction.Id)) {
                            dropAndDeclareTransaction.Id = Commerce.NumberSequence.GetNextTransactionId();
                        }
                        var request = this._commerceContext.storeOperations().createDropAndDeclareTransaction(dropAndDeclareTransaction);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getNonSalesTenderOperationTransactions = function (nonSalesTenderType, shiftId, shiftTerminalId) {
                        var request = this._commerceContext.storeOperations()
                            .getNonSalesTransactions(shiftId, shiftTerminalId, nonSalesTenderType);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.openShiftAsync = function (cashDrawer, isShared, correlationId) {
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        var batchId = Commerce.NumberSequence.GetNextValue(Commerce.Proxy.Entities.NumberSequenceSeedType.BatchId);
                        Commerce.RetailLogger.openShiftCalled(batchId, cashDrawer, String(isShared), correlationId);
                        var request = this._commerceContext.shifts()
                            .open(batchId, cashDrawer, isShared);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.closeShiftAsync = function (terminalId, shiftId, forceClose, correlationId) {
                        if (forceClose === void 0) { forceClose = false; }
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        Commerce.RetailLogger.closeShiftCalled(shiftId + " : " + terminalId, correlationId);
                        var request = this._commerceContext.shifts(shiftId, terminalId)
                            .close(Commerce.NumberSequence.GetNextTransactionId(), forceClose);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.blindCloseShiftAsync = function (terminalId, shiftId, correlationId, forceClose) {
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        if (forceClose === void 0) { forceClose = true; }
                        Commerce.RetailLogger.blindCloseShiftCalled(shiftId + " : " + terminalId, correlationId);
                        var request = this._commerceContext.shifts(shiftId, terminalId)
                            .blindClose(Commerce.NumberSequence.GetNextTransactionId(), forceClose);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.forceDeleteShiftAsync = function (terminalId, shiftId, correlationId) {
                        Commerce.RetailLogger.forceDeleteShiftCalled(shiftId + " : " + terminalId, correlationId);
                        var request = this._commerceContext.shifts(shiftId, terminalId)
                            .forceDelete(Commerce.NumberSequence.GetNextTransactionId());
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.suspendShiftAsync = function (terminalId, shiftId, correlationId) {
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        Commerce.RetailLogger.suspendShiftCalled(shiftId + " : " + terminalId, correlationId);
                        var request = this._commerceContext.shifts(shiftId, terminalId)
                            .suspend(Commerce.NumberSequence.GetNextTransactionId());
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.resumeShiftAsync = function (terminalId, shiftId, cashDrawer, correlationId) {
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        Commerce.RetailLogger.resumeShiftCalled(shiftId + " : " + terminalId, cashDrawer, correlationId);
                        var request = this._commerceContext.shifts(shiftId, terminalId).resume(cashDrawer);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.useShiftAsync = function (terminalId, shiftId, correlationId) {
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        Commerce.RetailLogger.useShiftCalled(shiftId + " : " + terminalId, correlationId);
                        var request = this._commerceContext.shifts(shiftId, terminalId).use();
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getShiftsAsync = function (shiftStatus, correlationId) {
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        Commerce.RetailLogger.getShiftsCalled(shiftStatus.toString(), "true", Commerce.ShiftHelper.getCurrentShift(), correlationId);
                        var request = this._commerceContext.shifts().getByStatus(shiftStatus);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getShiftsFilterByUserRoleAsync = function (shiftStatus, filterByUserRole, correlationId) {
                        if (correlationId === void 0) { correlationId = Commerce.StringExtensions.EMPTY; }
                        Commerce.RetailLogger.getShiftsCalled(shiftStatus.toString(), String(filterByUserRole), Commerce.ShiftHelper.getCurrentShift(), correlationId);
                        var request = this._commerceContext.shifts().getByStatusFilterByUserRole(shiftStatus, filterByUserRole);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getCurrentTimeRegistrationStatus = function () {
                        var request = this._commerceContext.employees().getLatestActivity();
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.performTimeRegistration = function (staffId, activityType) {
                        var request = this._commerceContext.employees(staffId).registerActivity(activityType);
                        return request.execute()
                            .map(function (result) {
                            return OData.jsonLightReadStringPropertyValue(result, "Edm.DateTimeOffset", false);
                        });
                    };
                    StoreOperationsManager.prototype.getTimeRegistrations = function (searchCriteria) {
                        var request = this._commerceContext.employees().getActivities(searchCriteria);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getTimeRegistrationsForManager = function (searchCriteria) {
                        var request = this._commerceContext.employees().getManagerActivityView(searchCriteria);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getEmployeeStores = function () {
                        var request = this._commerceContext.employees().getAccessibleOrgUnits();
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getIncomeExpenseAccounts = function (accountType) {
                        var request = this._commerceContext.storeOperations().getIncomeExpenseAccounts(accountType);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getXReport = function (shiftId, terminalId, hardwareProfileId) {
                        var transactionId = Commerce.NumberSequence.GetNextTransactionId();
                        var request = this._commerceContext.shifts(shiftId, terminalId).getXReport(transactionId, hardwareProfileId);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getZReport = function (hardwareProfileId) {
                        var transactionId = Commerce.NumberSequence.GetNextTransactionId();
                        var request = this._commerceContext.shifts().getZReport(transactionId, hardwareProfileId);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getOfflineSyncStatus = function () {
                        var request = this._commerceContext.storeOperations().getOfflineSyncStatus();
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.validateCashDrawerLimitAsync = function (terminalId, shiftId) {
                        var request = this._commerceContext.shifts().validateCashDrawerLimit(terminalId, shiftId);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getOfflinePendingTransactionCount = function () {
                        var request = this._commerceContext.storeOperations().getOfflinePendingTransactionCount();
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.updateApplicationVersion = function (appVersion) {
                        var request = this._commerceContext.storeOperations().updateApplicationVersion(appVersion);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getAvailableDevices = function (deviceType) {
                        var request = this._commerceContext.storeOperations().getAvailableDevices(deviceType);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getImageBlob = function (imageId) {
                        var request = this._commerceContext.storeOperations().getImageBlob(imageId);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getExtensibleEnumerationsAsync = function () {
                        var request = this._commerceContext.storeOperations().getExtensibleEnumerations();
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getMerchantPropertiesByServiceAccountIdAsync = function (serviceAccountIds) {
                        var request = this._commerceContext.storeOperations().getMerchantPropertiesByServiceAccountId(serviceAccountIds);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getStoreSafesAsync = function () {
                        var request = this._commerceContext.storeOperations().getStoreSafes();
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.getShiftReconciliationLinesAsync = function (retrievalCriteria) {
                        var request = this._commerceContext.storeOperations()
                            .getShiftReconciliationLines(retrievalCriteria);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.reconcileLinesAsync = function (shiftReconciliationLines, description) {
                        var request = this._commerceContext.storeOperations()
                            .reconcileLines(shiftReconciliationLines, description);
                        return request.execute();
                    };
                    StoreOperationsManager.prototype.undoReconcileLinesAsync = function (shiftReconciliationLines) {
                        var request = this._commerceContext.storeOperations()
                            .undoReconciliation(shiftReconciliationLines);
                        return request.execute();
                    };
                    return StoreOperationsManager;
                }());
                RetailServer.StoreOperationsManager = StoreOperationsManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var SuspendedCartManager = (function () {
                    function SuspendedCartManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    SuspendedCartManager.prototype.getSuspendedCartsAsync = function () {
                        var query = this._commerceContext.suspendedCarts();
                        query.expand(Commerce.Proxy.Entities.SuspendedCartClass.cartPropertyName);
                        return query.getAllSuspendedCarts().execute();
                    };
                    SuspendedCartManager.prototype.getSuspendedCartsByShiftAsync = function (shiftTerminalId, shiftId) {
                        var query = this._commerceContext.shifts();
                        query.expand(Commerce.Proxy.Entities.SuspendedCartClass.cartPropertyName);
                        return query.getSuspendedCartsByShift(shiftTerminalId, shiftId).execute();
                    };
                    SuspendedCartManager.prototype.voidSuspendedTransactionsFromShiftAsync = function (shiftTerminalId, shiftId) {
                        var request = this._commerceContext.shifts(shiftId, shiftTerminalId).voidSuspendedCarts();
                        return request.execute();
                    };
                    SuspendedCartManager.prototype.voidSuspendedTransactionsAsync = function (suspendedCartIds) {
                        var request = this._commerceContext.storeOperations().voidSuspendedTransactions(suspendedCartIds);
                        return request.execute();
                    };
                    return SuspendedCartManager;
                }());
                RetailServer.SuspendedCartManager = SuspendedCartManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var TillLayoutManager = (function () {
                    function TillLayoutManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    TillLayoutManager.prototype.getButtonGridsAsync = function (height, width) {
                        var request = this._commerceContext.storeOperations().getButtonGridsByScreenSize(height, width);
                        return request.execute();
                    };
                    TillLayoutManager.prototype.getTillLayoutAsync = function () {
                        var tillLayoutProxy;
                        var buttonGrids;
                        var dimensions = Commerce.CSSHelpers.getApplicationDimensions();
                        var tillLayoutRequest = this._commerceContext.orgUnits().getTillLayout(dimensions.height, dimensions.width);
                        var tillLayoutResult = tillLayoutRequest.execute().done(function (tillLayout) {
                            tillLayoutProxy = new Commerce.Proxy.Entities.TillLayoutProxy(tillLayout);
                        });
                        var buttonGridsResult = this.getButtonGridsAsync(dimensions.height, dimensions.width).done(function (grids) {
                            buttonGrids = grids;
                        });
                        return Commerce.VoidAsyncResult.join([tillLayoutResult, buttonGridsResult]).map(function () {
                            if (Commerce.ArrayExtensions.hasElements(tillLayoutProxy.getButtonGridZones())) {
                                tillLayoutProxy.setButtonGrids(buttonGrids);
                            }
                            return tillLayoutProxy;
                        });
                    };
                    return TillLayoutManager;
                }());
                RetailServer.TillLayoutManager = TillLayoutManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Model;
    (function (Model) {
        var Managers;
        (function (Managers) {
            var RetailServer;
            (function (RetailServer) {
                "use strict";
                var WarehouseManager = (function () {
                    function WarehouseManager(commerceContext) {
                        this._commerceContext = null;
                        this._commerceContext = commerceContext;
                    }
                    WarehouseManager.prototype.getWarehouseLocationsAsync = function (inventLocationId, pageSize, skip) {
                        var query = this._commerceContext.warehouses(inventLocationId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.getLocations().execute();
                    };
                    WarehouseManager.prototype.getWarehouseByIdAsync = function (inventLocationId) {
                        var query = this._commerceContext.warehouses(inventLocationId);
                        return query.getWarehouseById().execute();
                    };
                    WarehouseManager.prototype.searchWarehousesAsync = function (searchText, pageSize, skip) {
                        var query = this._commerceContext.warehouses();
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.searchWarehouses(searchText).execute();
                    };
                    WarehouseManager.prototype.searchLocationsAsync = function (inventLocationId, searchText, pageSize, skip) {
                        var query = this._commerceContext.warehouses(inventLocationId);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(pageSize) && !Commerce.ObjectExtensions.isNullOrUndefined(skip)) {
                            query.top(pageSize).skip(skip);
                        }
                        return query.searchLocations(searchText).execute();
                    };
                    return WarehouseManager;
                }());
                RetailServer.WarehouseManager = WarehouseManager;
            })(RetailServer = Managers.RetailServer || (Managers.RetailServer = {}));
        })(Managers = Model.Managers || (Model.Managers = {}));
    })(Model = Commerce.Model || (Commerce.Model = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Offline;
    (function (Offline) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var ToggleConnectionRequestHandler = (function (_super) {
                __extends(ToggleConnectionRequestHandler, _super);
                function ToggleConnectionRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ToggleConnectionRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.ToggleConnectionRequest;
                };
                ToggleConnectionRequestHandler.prototype.executeAsync = function (request) {
                    var asyncQueue = new Commerce.AsyncQueue();
                    if (Commerce.Session.instance.connectionStatus === Commerce.Client.Entities.ConnectionStatusType.Online) {
                        asyncQueue.enqueue(function () {
                            var okButton = {
                                id: Commerce.Activities.DisplayMessageOperationIds.OK,
                                label: Commerce.ViewModelAdapter.getResourceString("string_6640"),
                                operationId: Commerce.Activities.DisplayMessageOperationIds.OK,
                                isPrimary: true
                            };
                            var closeButton = {
                                id: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                                label: Commerce.ViewModelAdapter.getResourceString("string_80"),
                                operationId: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                                isPrimary: false
                            };
                            var displayMessageActivityContext = {
                                title: Commerce.ViewModelAdapter.getResourceString("string_6600"),
                                subTitle: Commerce.ViewModelAdapter.getResourceString("string_6640"),
                                message: Commerce.ViewModelAdapter.getResourceString("string_6644"),
                                buttons: [okButton, closeButton]
                            };
                            var displayMessageActivity = new Commerce.Activities.DisplayMessageActivity(displayMessageActivityContext);
                            return displayMessageActivity.execute().done(function () {
                                if (Commerce.ObjectExtensions.isNullOrUndefined(displayMessageActivity.response) ||
                                    Commerce.StringExtensions.isEmptyOrWhitespace(displayMessageActivity.response.operationId) ||
                                    displayMessageActivity.response.operationId === Commerce.DialogResult.Close.toString() ||
                                    displayMessageActivity.response.operationId === Commerce.DialogResult.No.toString() ||
                                    displayMessageActivity.response.operationId === Commerce.DialogResult.Cancel.toString()) {
                                    asyncQueue.cancel();
                                }
                            });
                        });
                    }
                    asyncQueue.enqueue(function () {
                        var managerFactory = Commerce.Model.Managers.Factory;
                        return managerFactory.toggleConnection();
                    });
                    return asyncQueue.run()
                        .map(function (result) {
                        return { canceled: result.canceled, data: new Commerce.ToggleConnectionResponse() };
                    }).getPromise();
                };
                return ToggleConnectionRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ToggleConnectionRequestHandler = ToggleConnectionRequestHandler;
        })(Handlers = Offline.Handlers || (Offline.Handlers = {}));
    })(Offline = Commerce.Offline || (Commerce.Offline = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ToggleConnectionResponse = (function (_super) {
        __extends(ToggleConnectionResponse, _super);
        function ToggleConnectionResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ToggleConnectionResponse;
    }(Commerce.Response));
    Commerce.ToggleConnectionResponse = ToggleConnectionResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ToggleConnectionRequest = (function (_super) {
        __extends(ToggleConnectionRequest, _super);
        function ToggleConnectionRequest() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ToggleConnectionRequest;
    }(Commerce.Request));
    Commerce.ToggleConnectionRequest = ToggleConnectionRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DeviceActivationOperationBase = (function () {
            function DeviceActivationOperationBase(stateOperation) {
                this.stateOperation = stateOperation;
            }
            DeviceActivationOperationBase.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_OPERATIONBASE_NAME;
            };
            DeviceActivationOperationBase.prototype.processingStatusName = function () {
                return Commerce.StringExtensions.EMPTY;
            };
            DeviceActivationOperationBase.prototype.errorStatusName = function () {
                return Commerce.StringExtensions.EMPTY;
            };
            DeviceActivationOperationBase.prototype.operationProcess = function (correlationId) {
                return function () {
                    return Commerce.VoidAsyncResult.createResolved();
                };
            };
            DeviceActivationOperationBase.prototype.preOperation = function () {
                var _this = this;
                return function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.stateOperation)) {
                        return Commerce.VoidAsyncResult.createRejected(_this.createRejectResponseForMissingProperties(DeviceActivationOperationBase.STATE_OPERATION_NAME));
                    }
                    _this.stateOperation.currentOperationStep(_this.stateOperation.currentOperationStep() + 1);
                    _this.stateOperation.currentOperation(_this);
                    return Commerce.VoidAsyncResult.createResolved();
                };
            };
            DeviceActivationOperationBase.prototype.validateState = function () {
                var _this = this;
                return function () {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(_this.stateOperation)) {
                        return Commerce.VoidAsyncResult.createRejected(_this.createRejectResponseForMissingProperties(DeviceActivationOperationBase.STATE_OPERATION_NAME));
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
            };
            DeviceActivationOperationBase.prototype.createRejectResponseForMissingProperties = function (missingProperty) {
                Commerce.RetailLogger.corePropertyMissingInDeviceActivationSequence(missingProperty, this.operationName());
                return [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.DEVICE_ACTIVATION_DETAILS_NOT_SPECIFIED)];
            };
            DeviceActivationOperationBase.STATE_OPERATION_NAME = "stateOperation";
            return DeviceActivationOperationBase;
        }());
        Operations.DeviceActivationOperationBase = DeviceActivationOperationBase;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AADLogonOperation = (function (_super) {
            __extends(AADLogonOperation, _super);
            function AADLogonOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            AADLogonOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.AAD_LOGON_OPERATION_NAME;
            };
            AADLogonOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8043");
            };
            AADLogonOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8044");
            };
            AADLogonOperation.prototype.operationProcess = function () {
                return function () {
                    var provider = Commerce.Authentication.AuthenticationProviderManager.instance
                        .getImplicitGrantProvider(Commerce.Authentication.AuthenticationProviderResourceType.USER);
                    return new Commerce.AsyncQueue().enqueue(function () {
                        var tenantId = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.RETAILSERVER_TENANT_ID);
                        if (Commerce.StringExtensions.isEmptyOrWhitespace(tenantId) || Commerce.StringExtensions.compare(tenantId, TsLogging.Utils.emptyGuid(), false) === 0) {
                            tenantId = AADLogonOperation.AAD_COMMON_AUTHORITY;
                            Commerce.RetailLogger.viewModelLoginTenantIdEmptyOrNotFound(Commerce.ApplicationStorageIDs.RETAILSERVER_TENANT_ID.toString(), tenantId);
                        }
                        var logonRequestParameters = {};
                        logonRequestParameters[Commerce.Authentication.Providers.AzureActiveDirectoryUserAuthenticationProvider.PARAMETER_TENANTID] = tenantId;
                        return provider.logon(logonRequestParameters);
                    }).enqueue(function () {
                        return Commerce.Utilities.LogonHelper.updateSessionWithUserTokenInformation();
                    }).run().fail(function (errors) {
                        Commerce.RetailLogger.viewModelLoginRetrieveUserAuthenticationTokenFailed(Commerce.Config.aadRetailServerResourceId, Commerce.ErrorHelper.getErrorMessages(errors));
                    });
                };
            };
            AADLogonOperation.AAD_COMMON_AUTHORITY = "common";
            return AADLogonOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.AADLogonOperation = AADLogonOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AnonymousLogonOperation = (function (_super) {
            __extends(AnonymousLogonOperation, _super);
            function AnonymousLogonOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            AnonymousLogonOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.ANONYMOUS_LOGON_OPERATION_NAME;
            };
            AnonymousLogonOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8043");
            };
            AnonymousLogonOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8044");
            };
            AnonymousLogonOperation.prototype.operationProcess = function (correlationId) {
                var _this = this;
                return function () {
                    return Commerce.Utilities.LogonHelper.resourceOwnedPasswordLogon(correlationId, _this.stateOperation.operatorId, _this.stateOperation.password);
                };
            };
            AnonymousLogonOperation.prototype.validateState = function () {
                var _this = this;
                return function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    _super.prototype.validateState.call(_this)().done(function () {
                        if (Commerce.StringExtensions.isNullOrWhitespace(_this.stateOperation.operatorId)) {
                            asyncResult.reject(_this.createRejectResponseForMissingProperties("operatorId"));
                        }
                        if (Commerce.StringExtensions.isNullOrWhitespace(_this.stateOperation.password)) {
                            asyncResult.reject(_this.createRejectResponseForMissingProperties("password"));
                        }
                        asyncResult.resolve();
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncResult;
                };
            };
            return AnonymousLogonOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.AnonymousLogonOperation = AnonymousLogonOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CheckServerConnectivityOperation = (function (_super) {
            __extends(CheckServerConnectivityOperation, _super);
            function CheckServerConnectivityOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            CheckServerConnectivityOperation.operationProcessImpl = function (serviceUrl) {
                var asyncResult = new Commerce.AsyncResult();
                var authManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuthenticationManagerName);
                authManager.checkServerHealthAsync(serviceUrl)
                    .done(function (healthCheckStatuses) {
                    var parser = new Commerce.HealthCheckParser();
                    if (parser.isValidEntity(healthCheckStatuses)) {
                        asyncResult.resolve(healthCheckStatuses);
                    }
                    else {
                        var healthCheckResponseError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_HEALTH_CHECK_METADATA_FAILED.serverErrorCode);
                        asyncResult.reject([healthCheckResponseError]);
                    }
                }).fail(function (errors) {
                    authManager.checkServerConnectivityAsync(serviceUrl)
                        .done(function () {
                        var healthCheckResponseError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_HEALTH_CHECK_FAILED.serverErrorCode);
                        asyncResult.reject([healthCheckResponseError]);
                    }).fail(function (errors) {
                        if (Commerce.ArrayExtensions.hasElements(errors) && (errors[0].ErrorCode === Commerce.ErrorTypeEnum.SERVICE_UNAVAILABLE
                            || errors[0].ErrorCode === Commerce.ErrorTypeEnum.BAD_REQUEST || errors[0].ErrorCode === Commerce.ErrorTypeEnum.NOT_AUTHORIZED)) {
                            errors[0] = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_SERVERCONNECTIVITYCHECK_ERROR.serverErrorCode);
                        }
                        asyncResult.reject(errors);
                    });
                });
                return asyncResult;
            };
            CheckServerConnectivityOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.CHECK_SERVER_CONNECTIVITY_OPERATION_NAME;
            };
            CheckServerConnectivityOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8041");
            };
            CheckServerConnectivityOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8042");
            };
            CheckServerConnectivityOperation.prototype.operationProcess = function () {
                var _this = this;
                return function () {
                    return CheckServerConnectivityOperation.operationProcessImpl(_this.stateOperation.serviceUrl);
                };
            };
            CheckServerConnectivityOperation.prototype.validateState = function () {
                var _this = this;
                return function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    _super.prototype.validateState.call(_this)().done(function () {
                        var serverUrl = _this.stateOperation.serviceUrl;
                        if (Commerce.StringExtensions.isNullOrWhitespace(serverUrl)) {
                            asyncResult.reject(_this.createRejectResponseForMissingProperties("serviceUrl"));
                        }
                        else {
                            asyncResult.resolve();
                        }
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncResult;
                };
            };
            return CheckServerConnectivityOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.CheckServerConnectivityOperation = CheckServerConnectivityOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DeviceActivationOperation = (function (_super) {
            __extends(DeviceActivationOperation, _super);
            function DeviceActivationOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            DeviceActivationOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.DEVICE_ACTIVATION_OPERATION_NAME;
            };
            DeviceActivationOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8045");
            };
            DeviceActivationOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8046");
            };
            DeviceActivationOperation.prototype.operationProcess = function (correlationId) {
                var _this = this;
                return function () {
                    var authManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuthenticationManagerName);
                    var activationResult;
                    var massActivate = Commerce.Helpers.DeviceActivationHelper.isMassActivationAllowed();
                    if (massActivate) {
                        activationResult = authManager.massActivateDeviceAsync(_this.stateOperation.deviceId, _this.stateOperation.registerId, Commerce.Config.appHardwareId);
                    }
                    else {
                        activationResult = authManager.activateDeviceAsync(_this.stateOperation.deviceId, _this.stateOperation.registerId, Commerce.Config.appHardwareId, _this.stateOperation.forceActivate);
                    }
                    Commerce.RetailLogger.deviceActivating(_this.stateOperation.deviceId, Commerce.Config.appHardwareId, _this.stateOperation.registerId, _this.stateOperation.forceActivate, massActivate, correlationId);
                    return activationResult.done(function (deviceActivationResult) {
                        try {
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY, deviceActivationResult.Device.TerminalId);
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.STORE_ID_KEY, deviceActivationResult.Device.ChannelName);
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY, deviceActivationResult.Device.Token);
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY, deviceActivationResult.Device.DeviceNumber);
                            TsLogging.LoggerBase.setDeviceInfo(Commerce.Config.appHardwareId, deviceActivationResult.Device.DeviceNumber, deviceActivationResult.Device.TerminalId);
                            Commerce.RetailLogger.deviceActivated(deviceActivationResult.Device.ActivationStatusValue.toString(), _this.stateOperation.deviceId, Commerce.Config.appHardwareId, _this.stateOperation.registerId, _this.stateOperation.forceActivate, correlationId);
                        }
                        catch (err) {
                            Commerce.RetailLogger.operationDeviceActivationUnhandledError(err.toString(), correlationId);
                            throw err;
                        }
                    }).fail(function (errors) {
                        var serializedErrors = Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors);
                        Commerce.RetailLogger.deviceActivationFailed(serializedErrors, _this.stateOperation.deviceId, Commerce.Config.appHardwareId, _this.stateOperation.registerId, _this.stateOperation.forceActivate, correlationId);
                    });
                };
            };
            DeviceActivationOperation.prototype.validateState = function () {
                var _this = this;
                return function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    _super.prototype.validateState.call(_this)()
                        .done(function () {
                        asyncResult.resolve();
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncResult;
                };
            };
            return DeviceActivationOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.DeviceActivationOperation = DeviceActivationOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DiagnosticsOperation = (function (_super) {
            __extends(DiagnosticsOperation, _super);
            function DiagnosticsOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            DiagnosticsOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.DIAGNOSTICS_OPERATION_NAME;
            };
            DiagnosticsOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8081");
            };
            DiagnosticsOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8082");
            };
            DiagnosticsOperation.prototype.operationProcess = function () {
                return function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    Commerce.Host.instance.azureActiveDirectoryAdapter.login().done(function (user) {
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.TENANT_ID, user.tenantId);
                        asyncResult.resolve();
                    });
                    return asyncResult;
                };
            };
            return DiagnosticsOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.DiagnosticsOperation = DiagnosticsOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetDeviceConfigurationOperation = (function (_super) {
            __extends(GetDeviceConfigurationOperation, _super);
            function GetDeviceConfigurationOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            GetDeviceConfigurationOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.GET_DEVICE_CONFIGURATION_OPERATION_NAME;
            };
            GetDeviceConfigurationOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8053");
            };
            GetDeviceConfigurationOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8054");
            };
            GetDeviceConfigurationOperation.prototype.operationProcess = function () {
                return function () {
                    var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                    var queue = new Commerce.AsyncQueue();
                    queue.enqueue(function () {
                        var getDeviceConfigurationResult = new Commerce.VoidAsyncResult();
                        channelManager.getDeviceConfigurationAsync().done(function (deviceConfiguration) {
                            try {
                                Commerce.ApplicationContext.Instance.deviceConfiguration = deviceConfiguration;
                                if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)) {
                                    Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName = Commerce.ViewModelAdapter.getDefaultUILanguage();
                                }
                                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.DEVICE_CONFIGURATION_KEY, JSON.stringify(deviceConfiguration));
                                getDeviceConfigurationResult.resolve();
                            }
                            catch (exception) {
                                var storageError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_STORE_FAILED_TO_SAVE_DEVICE_CONFIGURATION);
                                getDeviceConfigurationResult.reject([storageError]);
                            }
                        }).fail(function (errors) {
                            getDeviceConfigurationResult.reject(errors);
                        });
                        return getDeviceConfigurationResult;
                    });
                    queue.enqueue(function () {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)) {
                            return Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName);
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    return queue.run();
                };
            };
            return GetDeviceConfigurationOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.GetDeviceConfigurationOperation = GetDeviceConfigurationOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetEmployeesOperation = (function (_super) {
            __extends(GetEmployeesOperation, _super);
            function GetEmployeesOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            GetEmployeesOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.GET_EMPLOYEES_OPERATION_NAME;
            };
            GetEmployeesOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8061");
            };
            GetEmployeesOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8062");
            };
            GetEmployeesOperation.prototype.operationProcess = function () {
                return function () {
                    var operatorManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IOperatorManagerName);
                    return operatorManager.getEmployeesAsync()
                        .done(function (employeeList) {
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.EMPLOYEE_LIST_KEY, JSON.stringify(employeeList));
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.INITIAL_SYNC_COMPLETED_KEY, "true");
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.FIRST_TIME_USE, "true");
                    });
                };
            };
            return GetEmployeesOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.GetEmployeesOperation = GetEmployeesOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetHardwareProfileOperation = (function (_super) {
            __extends(GetHardwareProfileOperation, _super);
            function GetHardwareProfileOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            GetHardwareProfileOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.GET_HARDWARE_PROFILE_OPERATION_NAME;
            };
            GetHardwareProfileOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8057");
            };
            GetHardwareProfileOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8058");
            };
            GetHardwareProfileOperation.prototype.operationProcess = function () {
                var _this = this;
                return function () {
                    var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                    return channelManager.getHardwareProfileAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.HardwareProfile)
                        .done(function (hardwareProfile) {
                        _this.stateOperation.hardwareProfile = hardwareProfile;
                    }).recoverOnFailure(function (errors) {
                        var currentHardwareProfile = JSON.parse(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_PROFILE_KEY));
                        if (Commerce.ObjectExtensions.isNullOrUndefined(currentHardwareProfile)) {
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        }
                        _this.stateOperation.skipEncryptionOperation = true;
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                };
            };
            return GetHardwareProfileOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.GetHardwareProfileOperation = GetHardwareProfileOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetLatestNumberSequenceOperation = (function (_super) {
            __extends(GetLatestNumberSequenceOperation, _super);
            function GetLatestNumberSequenceOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            GetLatestNumberSequenceOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.GET_LATEST_NUMBER_SEQUENCE_OPERATION_NAME;
            };
            GetLatestNumberSequenceOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8051");
            };
            GetLatestNumberSequenceOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8052");
            };
            GetLatestNumberSequenceOperation.prototype.operationProcess = function (correlationId) {
                var _this = this;
                return function () {
                    var authenticationManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuthenticationManagerName);
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return _this._getLatestNumberSequence(correlationId)
                            .done(function (numberSequences) {
                            Commerce.NumberSequence.update(numberSequences, correlationId);
                        });
                    }).enqueue(function () {
                        return authenticationManager.startSessionAsync(correlationId);
                    }).run();
                };
            };
            GetLatestNumberSequenceOperation.prototype._getLatestNumberSequence = function (correlationId) {
                var asyncResult = new Commerce.AsyncResult();
                var responses = { Channel: [], Offline: [] };
                var asyncQueue = new Commerce.AsyncQueue();
                var ignoreErrors = false;
                var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                asyncQueue.enqueue(function () {
                    return channelManager.getOnlineLatestNumberSequence()
                        .done(function (result) {
                        responses.Channel = result;
                    });
                });
                if (Commerce.Utilities.OfflineHelper.isOfflineEnabled()) {
                    asyncQueue.enqueue(function () {
                        return channelManager.getOfflineLatestNumberSequence()
                            .done(function (result) {
                            if (Commerce.ArrayExtensions.hasElements(result)) {
                                responses.Offline = result;
                            }
                        }).fail(function (errors) {
                            ignoreErrors = true;
                        });
                    });
                }
                asyncQueue.run().done(function () {
                    asyncResult.resolve(responses);
                }).fail(function (errors) {
                    if (ignoreErrors) {
                        var errorsString = Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors);
                        Commerce.RetailLogger.operationGetLatestNumberSequenceOfflineErrorsIgnored(correlationId, errorsString);
                        asyncResult.resolve(responses);
                    }
                    else {
                        asyncResult.reject(errors);
                    }
                });
                return asyncResult;
            };
            return GetLatestNumberSequenceOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.GetLatestNumberSequenceOperation = GetLatestNumberSequenceOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetLocalizationOperation = (function (_super) {
            __extends(GetLocalizationOperation, _super);
            function GetLocalizationOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            GetLocalizationOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.GET_LOCALIZATION_OPERATION_NAME;
            };
            GetLocalizationOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8055");
            };
            GetLocalizationOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8056");
            };
            GetLocalizationOperation.prototype.operationProcess = function () {
                return function () {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)) {
                        var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                        return channelManager.getCustomUIStrings(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)
                            .done(function (customStrings) {
                            Commerce.StringResourceManager.setCustomStringValues(customStrings);
                            if (Commerce.ArrayExtensions.hasElements(customStrings)) {
                                Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CUSTOM_UI_STRINGS_KEY, JSON.stringify(customStrings));
                            }
                        });
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
            };
            return GetLocalizationOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.GetLocalizationOperation = GetLocalizationOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var LogoffOperation = (function (_super) {
            __extends(LogoffOperation, _super);
            function LogoffOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            LogoffOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.LOGOFF_OPERATION_NAME;
            };
            LogoffOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8047");
            };
            LogoffOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8048");
            };
            LogoffOperation.prototype.operationProcess = function (correlationId) {
                return function () {
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuthenticationManagerName)
                            .endSessionAsync(correlationId)
                            .recoverOnFailure(function (errors) {
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                    }).enqueue(function () {
                        return Commerce.Utilities.LogonHelper.logoffAuthenticationProviderAsync(true);
                    }).enqueue(function () {
                        var options = { employee: Commerce.Session.instance.CurrentEmployee, wasSilent: true };
                        return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostLogOff, options);
                    }).enqueue(function () {
                        var userSessionId = TsLogging.LoggerBase.getUserSessionId();
                        Commerce.RetailLogger.logoff(userSessionId);
                        TsLogging.LoggerBase.clearUserSession();
                        if (!Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)) {
                            return Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName)
                                .done(function () {
                                var serializedStoreCustomUIStrings = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CUSTOM_UI_STRINGS_KEY);
                                if (!Commerce.StringExtensions.isNullOrWhitespace(serializedStoreCustomUIStrings)) {
                                    Commerce.StringResourceManager.setCustomStringValues(JSON.parse(serializedStoreCustomUIStrings));
                                }
                            });
                        }
                        else {
                            return Commerce.ViewModelAdapter.setApplicationLanguageAsync(Commerce.ViewModelAdapter.getDefaultUILanguage())
                                .done(function () {
                                Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName)
                                    .getCustomUIStrings(Commerce.ViewModelAdapter.getDefaultUILanguage())
                                    .done(function (customStrings) {
                                    Commerce.StringResourceManager.setCustomStringValues(customStrings);
                                });
                            });
                        }
                    });
                    return asyncQueue.run();
                };
            };
            return LogoffOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.LogoffOperation = LogoffOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var LogonWithDeviceTokenOperation = (function (_super) {
            __extends(LogonWithDeviceTokenOperation, _super);
            function LogonWithDeviceTokenOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            LogonWithDeviceTokenOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.LOGON_WITH_DEVICE_TOKEN_OPERATION_NAME;
            };
            LogonWithDeviceTokenOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8049");
            };
            LogonWithDeviceTokenOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8050");
            };
            LogonWithDeviceTokenOperation.prototype.operationProcess = function (correlationId) {
                var _this = this;
                return function () {
                    return Commerce.Utilities.LogonHelper.resourceOwnedPasswordLogon(correlationId, _this.stateOperation.operatorId, _this.stateOperation.password);
                };
            };
            LogonWithDeviceTokenOperation.prototype.validateState = function () {
                var _this = this;
                return function () {
                    var asyncResult = new Commerce.VoidAsyncResult();
                    _super.prototype.validateState.call(_this)().done(function () {
                        if (Commerce.StringExtensions.isNullOrWhitespace(_this.stateOperation.operatorId)) {
                            asyncResult.reject(_this.createRejectResponseForMissingProperties("operatorId"));
                        }
                        if (Commerce.StringExtensions.isNullOrWhitespace(_this.stateOperation.password)) {
                            asyncResult.reject(_this.createRejectResponseForMissingProperties("password"));
                        }
                        if (Commerce.StringExtensions.isNullOrWhitespace(_this.stateOperation.deviceId)) {
                            asyncResult.reject(_this.createRejectResponseForMissingProperties("deviceId"));
                        }
                        asyncResult.resolve();
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncResult;
                };
            };
            return LogonWithDeviceTokenOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.LogonWithDeviceTokenOperation = LogonWithDeviceTokenOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var DeviceActivationSequence = (function () {
            function DeviceActivationSequence(operationState, lastOperationName) {
                this.operationState = operationState;
                this.lastOperationName = lastOperationName;
                this.isDeviceActivated = !Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_TOKEN_KEY));
                this.isInitialDataSynced = !Commerce.StringExtensions.isNullOrWhitespace(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.INITIAL_SYNC_COMPLETED_KEY));
            }
            DeviceActivationSequence.prototype.constructActivationSequence = function () {
                var activationSequence = [];
                if (Commerce.Config.aadEnabled) {
                    activationSequence = activationSequence.concat(this.constructAADActivationSequence());
                }
                else {
                    activationSequence = activationSequence.concat(this.constructNonAADActivationSequence());
                }
                activationSequence = activationSequence.concat(this.constructInitialSyncDataSequence());
                activationSequence = activationSequence.concat(this.constructLogoffSequence());
                return activationSequence;
            };
            DeviceActivationSequence.prototype.constructAADActivationSequence = function () {
                var logonSequence = [];
                if (this.isDeviceActivated && this.isInitialDataSynced) {
                    return logonSequence;
                }
                var checkConnectivityOperation = new Operations.CheckServerConnectivityOperation(this.operationState);
                if (this.isConnectivityCheckRequired()) {
                    logonSequence.push(checkConnectivityOperation);
                }
                if (!Commerce.Utilities.LogonHelper.isLoggedOn()) {
                    logonSequence.push(new Operations.GetEnvironmentConfiguration(this.operationState));
                    logonSequence.push(new Operations.AADLogonOperation(this.operationState));
                }
                logonSequence.push(new Operations.DiagnosticsOperation(this.operationState));
                if (!this.isDeviceActivated) {
                    logonSequence.push(new Operations.DeviceActivationOperation(this.operationState));
                }
                return logonSequence;
            };
            DeviceActivationSequence.prototype.constructNonAADActivationSequence = function () {
                var logonSequence = [];
                if (this.isDeviceActivated && this.isInitialDataSynced) {
                    return logonSequence;
                }
                if (this.isConnectivityCheckRequired()) {
                    logonSequence.push(new Operations.CheckServerConnectivityOperation(this.operationState));
                }
                if (!this.isDeviceActivated) {
                    logonSequence.push(new Operations.AnonymousLogonOperation(this.operationState));
                    logonSequence.push(new Operations.DeviceActivationOperation(this.operationState));
                }
                logonSequence.push(new Operations.LogonWithDeviceTokenOperation(this.operationState));
                return logonSequence;
            };
            DeviceActivationSequence.prototype.constructInitialSyncDataSequence = function () {
                var syncDataSequence = [];
                if (this.isDeviceActivated && this.isInitialDataSynced) {
                    return syncDataSequence;
                }
                else if (!this.isDeviceActivated) {
                    this.lastOperationName = Commerce.StringExtensions.EMPTY;
                }
                syncDataSequence.splice(0, 0, new Operations.GetEmployeesOperation(this.operationState));
                if (this.lastOperationName === Commerce.Helpers.DeviceActivationHelper.GET_EMPLOYEES_OPERATION_NAME) {
                    return syncDataSequence;
                }
                syncDataSequence.splice(0, 0, new Operations.GetHardwareProfileOperation(this.operationState), new Operations.GetPaymentMerchantInformationOperation(this.operationState));
                if (this.lastOperationName === Commerce.Helpers.DeviceActivationHelper.GET_HARDWARE_PROFILE_OPERATION_NAME ||
                    this.lastOperationName === Commerce.Helpers.DeviceActivationHelper.GET_PAYMENT_MERCHANT_INFORMATION_OPERATION_NAME) {
                    return syncDataSequence;
                }
                syncDataSequence.splice(0, 0, new Operations.GetLocalizationOperation(this.operationState));
                if (this.lastOperationName === Commerce.Helpers.DeviceActivationHelper.GET_LOCALIZATION_OPERATION_NAME) {
                    return syncDataSequence;
                }
                syncDataSequence.splice(0, 0, new Operations.GetLatestNumberSequenceOperation(this.operationState));
                if (this.lastOperationName === Commerce.Helpers.DeviceActivationHelper.GET_LATEST_NUMBER_SEQUENCE_OPERATION_NAME) {
                    return syncDataSequence;
                }
                syncDataSequence.splice(0, 0, new Operations.GetDeviceConfigurationOperation(this.operationState));
                if (this.lastOperationName === Commerce.Helpers.DeviceActivationHelper.GET_DEVICE_CONFIGURATION_OPERATION_NAME) {
                    return syncDataSequence;
                }
                if (!Commerce.ApplicationHelper.isWebApplicationType(Commerce.Host.instance.application.getApplicationType())) {
                    syncDataSequence.splice(0, 0, new Operations.GetEnvironmentConfiguration(this.operationState));
                }
                return syncDataSequence;
            };
            DeviceActivationSequence.prototype.constructLogoffSequence = function () {
                var logoffSequence = [];
                if (this.isDeviceActivated && this.isInitialDataSynced) {
                    return logoffSequence;
                }
                logoffSequence.push(new Operations.LogoffOperation(this.operationState));
                return logoffSequence;
            };
            DeviceActivationSequence.prototype.isConnectivityCheckRequired = function () {
                if ((!Commerce.Config.aadEnabled && !Commerce.StringExtensions.isNullOrWhitespace(Commerce.Config.onlineDatabase)) ||
                    this.operationState.skipConnectivityOperation) {
                    return false;
                }
                return true;
            };
            return DeviceActivationSequence;
        }());
        Operations.DeviceActivationSequence = DeviceActivationSequence;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetEnvironmentConfiguration = (function (_super) {
            __extends(GetEnvironmentConfiguration, _super);
            function GetEnvironmentConfiguration(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            GetEnvironmentConfiguration.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.GET_ENVIRONMENT_CONFIGURATION_OPERATION_NAME;
            };
            GetEnvironmentConfiguration.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8086");
            };
            GetEnvironmentConfiguration.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8087");
            };
            GetEnvironmentConfiguration.prototype.operationProcess = function () {
                return function () {
                    var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                    var queue = new Commerce.AsyncQueue();
                    queue.enqueue(function () {
                        return channelManager.getEnvironmentConfiguration()
                            .done(function (environmentConfiguration) {
                            Commerce.InstrumentationHelper.setEnvironmentInfo(environmentConfiguration);
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.RETAILSERVER_TENANT_ID, environmentConfiguration.TenantId);
                        }).fail(function (errors) {
                            Commerce.RetailLogger.applicationLoadEnvironmentConfigurationServerLoadFailed(Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        });
                    });
                    return queue.run();
                };
            };
            return GetEnvironmentConfiguration;
        }(Operations.DeviceActivationOperationBase));
        Operations.GetEnvironmentConfiguration = GetEnvironmentConfiguration;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GetPaymentMerchantInformationOperation = (function (_super) {
            __extends(GetPaymentMerchantInformationOperation, _super);
            function GetPaymentMerchantInformationOperation(stateActivity) {
                return _super.call(this, stateActivity) || this;
            }
            GetPaymentMerchantInformationOperation.prototype.operationName = function () {
                return Commerce.Helpers.DeviceActivationHelper.GET_PAYMENT_MERCHANT_INFORMATION_OPERATION_NAME;
            };
            GetPaymentMerchantInformationOperation.prototype.processingStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8083");
            };
            GetPaymentMerchantInformationOperation.prototype.errorStatusName = function () {
                return Commerce.ViewModelAdapter.getResourceString("string_8084");
            };
            GetPaymentMerchantInformationOperation.prototype.operationProcess = function (correlationId) {
                var _this = this;
                return function () {
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(new Commerce.Payments.SaveMerchantInformationClientRequest(correlationId, _this.stateOperation.hardwareProfile)));
                };
            };
            return GetPaymentMerchantInformationOperation;
        }(Operations.DeviceActivationOperationBase));
        Operations.GetPaymentMerchantInformationOperation = GetPaymentMerchantInformationOperation;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var AddAffiliationOperationRequestHandler = (function (_super) {
                __extends(AddAffiliationOperationRequestHandler, _super);
                function AddAffiliationOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AddAffiliationOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.AddAffiliationOperationRequest;
                };
                AddAffiliationOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        affiliationNames: request.affiliationNames,
                        affiliations: request.affiliations
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.AddAffiliation, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.AddAffiliationOperationResponse(result.canceled ? null : Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return AddAffiliationOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AddAffiliationOperationRequestHandler = AddAffiliationOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var AddCouponsOperationRequestHandler = (function (_super) {
                __extends(AddCouponsOperationRequestHandler, _super);
                function AddCouponsOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AddCouponsOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.AddCouponsOperationRequest;
                };
                AddCouponsOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        couponCode: request.couponCode,
                        isLegacyDiscountCode: false
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(request.operationId, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.AddCouponsOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return AddCouponsOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AddCouponsOperationRequestHandler = AddCouponsOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var AddItemToCartOperationRequestHandler = (function (_super) {
                __extends(AddItemToCartOperationRequestHandler, _super);
                function AddItemToCartOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AddItemToCartOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.AddItemToCartOperationRequest;
                };
                AddItemToCartOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        productSaleDetails: request.productSaleDetails,
                        correlationId: request.correlationId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.ItemSale, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.AddItemToCartOperationResponse(result.canceled ? null : Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return AddItemToCartOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AddItemToCartOperationRequestHandler = AddItemToCartOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CalculateTotalOperationRequestHandler = (function (_super) {
                __extends(CalculateTotalOperationRequestHandler, _super);
                function CalculateTotalOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CalculateTotalOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CalculateTotalOperationRequest;
                };
                CalculateTotalOperationRequestHandler.prototype.executeAsync = function (request) {
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(request.operationId, null)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.CalculateTotalOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return CalculateTotalOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CalculateTotalOperationRequestHandler = CalculateTotalOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CarryoutSelectedProductsOperationRequestHandler = (function (_super) {
                __extends(CarryoutSelectedProductsOperationRequestHandler, _super);
                function CarryoutSelectedProductsOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CarryoutSelectedProductsOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CarryoutSelectedProductsOperationRequest;
                };
                CarryoutSelectedProductsOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cart: Commerce.Session.instance.cart,
                        cartLines: request.cartLines,
                        correlationId: request.correlationId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(request.operationId, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.CarryoutSelectedProductsOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return CarryoutSelectedProductsOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CarryoutSelectedProductsOperationRequestHandler = CarryoutSelectedProductsOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var ChangeCartLineUnitOfMeasureOperationRequestHandler = (function (_super) {
                __extends(ChangeCartLineUnitOfMeasureOperationRequestHandler, _super);
                function ChangeCartLineUnitOfMeasureOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ChangeCartLineUnitOfMeasureOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.ChangeCartLineUnitOfMeasureOperationRequest;
                };
                ChangeCartLineUnitOfMeasureOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartLine = Commerce.CartHelper.getCartLineByLineId(Commerce.Session.instance.cart, request.cartLineId);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(cartLine)) {
                        return Promise.reject([new Commerce.Proxy.Entities.Error("string_29858")]);
                    }
                    var options = {
                        cartLineUnitOfMeasures: [{ cartLine: cartLine, unitOfMeasure: request.unitOfMeasure }]
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.ChangeUnitOfMeasure, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.ChangeCartLineUnitOfMeasureOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return ChangeCartLineUnitOfMeasureOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ChangeCartLineUnitOfMeasureOperationRequestHandler = ChangeCartLineUnitOfMeasureOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CloseShiftOperationRequestHandler = (function (_super) {
                __extends(CloseShiftOperationRequestHandler, _super);
                function CloseShiftOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CloseShiftOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CloseShiftOperationRequest;
                };
                CloseShiftOperationRequestHandler.prototype.executeAsync = function (request) {
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.CloseShift, {})
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.CloseShiftOperationResponse()
                        };
                    }).getPromise();
                };
                return CloseShiftOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CloseShiftOperationRequestHandler = CloseShiftOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CreateCustomerOrderOperationRequestHandler = (function (_super) {
                __extends(CreateCustomerOrderOperationRequestHandler, _super);
                function CreateCustomerOrderOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreateCustomerOrderOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CreateCustomerOrderOperationRequest;
                };
                CreateCustomerOrderOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cart: Commerce.Session.instance.cart
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.CreateCustomerOrder, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.CreateCustomerOrderOperationResponse(result.canceled ? null : Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return CreateCustomerOrderOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CreateCustomerOrderOperationRequestHandler = CreateCustomerOrderOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CreateCustomerQuoteOperationRequestHandler = (function (_super) {
                __extends(CreateCustomerQuoteOperationRequestHandler, _super);
                function CreateCustomerQuoteOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreateCustomerQuoteOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CreateCustomerQuoteOperationRequest;
                };
                CreateCustomerQuoteOperationRequestHandler.prototype.executeAsync = function (request) {
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(request.quotationExpirationDate)) {
                            return Commerce.AsyncResult.createResolved({ canceled: false, data: request.quotationExpirationDate });
                        }
                        else {
                            return Commerce.CustomerOrderHelper.getQuotationExpirationDate()
                                .map(function (result) {
                                return { canceled: false, data: result };
                            });
                        }
                    }).enqueue(function (quotationExpirationDate) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(quotationExpirationDate.data)) {
                            var options = {
                                cart: Commerce.Session.instance.cart,
                                quotationExpirationDate: quotationExpirationDate.data
                            };
                            return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.CreateQuotation, options);
                        }
                        else {
                            return Commerce.AsyncResult.createResolved({ canceled: true, data: undefined });
                        }
                    });
                    return asyncQueue.run().map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.CreateCustomerQuoteOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return CreateCustomerQuoteOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CreateCustomerQuoteOperationRequestHandler = CreateCustomerQuoteOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CustomerAccountDepositOperationRequestHandler = (function (_super) {
                __extends(CustomerAccountDepositOperationRequestHandler, _super);
                function CustomerAccountDepositOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CustomerAccountDepositOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CustomerAccountDepositOperationRequest;
                };
                CustomerAccountDepositOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        accountDepositAmount: request.accountDepositAmount
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(request.operationId, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.CustomerAccountDepositOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return CustomerAccountDepositOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CustomerAccountDepositOperationRequestHandler = CustomerAccountDepositOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var DepositOverrideOperationRequestHandler = (function (_super) {
                __extends(DepositOverrideOperationRequestHandler, _super);
                function DepositOverrideOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                DepositOverrideOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.DepositOverrideOperationRequest;
                };
                DepositOverrideOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        depositOverrideAmount: request.depositOverrideAmount
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.DepositOverride, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.DepositOverrideOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return DepositOverrideOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.DepositOverrideOperationRequestHandler = DepositOverrideOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var EditCustomerOrderOperationRequestHandler = (function (_super) {
                __extends(EditCustomerOrderOperationRequestHandler, _super);
                function EditCustomerOrderOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                EditCustomerOrderOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.EditCustomerOrderOperationRequest;
                };
                EditCustomerOrderOperationRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(request.salesId)) {
                        return Promise.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SALES_ORDER_ID_CANNOT_BE_EMPTY)]);
                    }
                    var options = {
                        operationType: Commerce.Proxy.Entities.CustomerOrderOperations.Edit,
                        parameters: {
                            UpdateParameter: {
                                salesId: request.salesId,
                                CustomerOrderModeValue: Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit
                            }
                        }
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.EditCustomerOrder, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? undefined : new Commerce.EditCustomerOrderOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return EditCustomerOrderOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.EditCustomerOrderOperationRequestHandler = EditCustomerOrderOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetInventoryAvailableToPromiseResponse = (function (_super) {
        __extends(GetInventoryAvailableToPromiseResponse, _super);
        function GetInventoryAvailableToPromiseResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return GetInventoryAvailableToPromiseResponse;
    }(Commerce.Response));
    Commerce.GetInventoryAvailableToPromiseResponse = GetInventoryAvailableToPromiseResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetInventoryAvailableToPromiseRequest = (function (_super) {
        __extends(GetInventoryAvailableToPromiseRequest, _super);
        function GetInventoryAvailableToPromiseRequest() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return GetInventoryAvailableToPromiseRequest;
    }(Commerce.Request));
    Commerce.GetInventoryAvailableToPromiseRequest = GetInventoryAvailableToPromiseRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var GetInventoryAvailableToPromiseRequestHandler = (function (_super) {
                __extends(GetInventoryAvailableToPromiseRequestHandler, _super);
                function GetInventoryAvailableToPromiseRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetInventoryAvailableToPromiseRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.GetInventoryAvailableToPromiseRequest;
                };
                GetInventoryAvailableToPromiseRequestHandler.prototype.executeAsync = function (request) {
                    return this.getAvailableToPromiseAsync(request)
                        .map(function (result) {
                        var response = new Commerce.GetInventoryAvailableToPromiseResponse();
                        var canceled = false;
                        response.availabilities = result.data;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(result)) {
                            canceled = result.canceled;
                        }
                        return { canceled: canceled, data: response };
                    }).getPromise();
                };
                GetInventoryAvailableToPromiseRequestHandler.prototype.getAvailableToPromiseAsync = function (request) {
                    this._productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                    return this._productManager.getInventoryAvailableToPromiseAsync(request.product.RecordId, request.product.ItemId, request.location.InventoryLocationId)
                        .map(function (stores) {
                        return { canceled: false, data: stores };
                    });
                };
                return GetInventoryAvailableToPromiseRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetInventoryAvailableToPromiseRequestHandler = GetInventoryAvailableToPromiseRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetRecommendedProductsResponse = (function (_super) {
        __extends(GetRecommendedProductsResponse, _super);
        function GetRecommendedProductsResponse(recommendedProducts) {
            var _this = _super.call(this) || this;
            _this.recommendedProducts = recommendedProducts;
            return _this;
        }
        return GetRecommendedProductsResponse;
    }(Commerce.Response));
    Commerce.GetRecommendedProductsResponse = GetRecommendedProductsResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var GetRecommendedProductsRequest = (function (_super) {
        __extends(GetRecommendedProductsRequest, _super);
        function GetRecommendedProductsRequest(correlationId, inputProductIds, customerAccountNumber, pageSize, skip) {
            var _this = _super.call(this, correlationId) || this;
            _this.inputProductIds = inputProductIds;
            _this.customerAccountNumber = customerAccountNumber;
            _this.pageSize = pageSize;
            _this.skip = skip;
            return _this;
        }
        return GetRecommendedProductsRequest;
    }(Commerce.Request));
    Commerce.GetRecommendedProductsRequest = GetRecommendedProductsRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var GetRecommendedProductsRequestHandler = (function (_super) {
                __extends(GetRecommendedProductsRequestHandler, _super);
                function GetRecommendedProductsRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetRecommendedProductsRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.GetRecommendedProductsRequest;
                };
                GetRecommendedProductsRequestHandler.prototype.executeAsync = function (request) {
                    return this.getRecommendedProductsAsync(request)
                        .map(function (results) {
                        var response = new Commerce.GetRecommendedProductsResponse(results);
                        return { canceled: false, data: response };
                    }).getPromise();
                };
                GetRecommendedProductsRequestHandler.prototype.getRecommendedProductsAsync = function (request) {
                    this._productDataManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductDataManagerName);
                    return this._productDataManager.getRecommendedProductsAsync(request.inputProductIds, request.customerAccountNumber, request.pageSize, request.skip);
                };
                return GetRecommendedProductsRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetRecommendedProductsRequestHandler = GetRecommendedProductsRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var InventoryLookupOperationRequestHandler = (function (_super) {
                __extends(InventoryLookupOperationRequestHandler, _super);
                function InventoryLookupOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InventoryLookupOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.InventoryLookupOperationRequest;
                };
                InventoryLookupOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        productRecordId: request.productRecordId,
                        criteria: request.criteria
                    };
                    var operationsManager = Operations.OperationsManager.instance;
                    return operationsManager
                        .runOperationWithoutPermissionsCheck(Operations.RetailOperation.InventoryLookup, options)
                        .map(function (operationResult) {
                        var response = new Commerce.InventoryLookupOperationResponse(operationResult.data);
                        return { canceled: operationResult.canceled, data: response };
                    }).getPromise();
                };
                return InventoryLookupOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.InventoryLookupOperationRequestHandler = InventoryLookupOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var LegacyOperationResponse = (function (_super) {
        __extends(LegacyOperationResponse, _super);
        function LegacyOperationResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LegacyOperationResponse;
    }(Commerce.Response));
    Commerce.LegacyOperationResponse = LegacyOperationResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var LegacyOperationRequest = (function (_super) {
        __extends(LegacyOperationRequest, _super);
        function LegacyOperationRequest(operationId, correlationId) {
            return _super.call(this, operationId, correlationId) || this;
        }
        return LegacyOperationRequest;
    }(Commerce.OperationRequest));
    Commerce.LegacyOperationRequest = LegacyOperationRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var LegacyOperationPipeline = (function () {
        function LegacyOperationPipeline() {
            this._operationsMap = Object.create(null);
        }
        Object.defineProperty(LegacyOperationPipeline, "instance", {
            get: function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(LegacyOperationPipeline._instance)) {
                    LegacyOperationPipeline._instance = new LegacyOperationPipeline();
                }
                return LegacyOperationPipeline._instance;
            },
            enumerable: true,
            configurable: true
        });
        LegacyOperationPipeline.prototype.registerOperation = function (operation) {
            if (Commerce.ObjectExtensions.isNullOrUndefined(operation)
                || Commerce.ObjectExtensions.isNullOrUndefined(operation.id)
                || Commerce.ObjectExtensions.isNullOrUndefined(operation.handler)) {
                throw "The operation is invalid.";
            }
            this._operationsMap[operation.id] = operation;
        };
        LegacyOperationPipeline.prototype.getOperation = function (operationId) {
            var operation = this._operationsMap[operationId];
            if (!operation) {
                Commerce.RetailLogger.coreRetailOperationHandlerNotFound(Commerce.Proxy.Entities.RetailOperation[operationId], operationId);
                throw "Couldn't find an operation handler for the ID: " + operationId + ".";
            }
            return operation;
        };
        LegacyOperationPipeline.prototype.hasHandler = function (operationId) {
            return !Commerce.ObjectExtensions.isNullOrUndefined(this._operationsMap[operationId]);
        };
        LegacyOperationPipeline.prototype.executePreHandlersAsync = function (request) {
            var _this = this;
            return new Commerce.AsyncQueue().enqueue(function () {
                var operation = _this.getOperation(request.operationId);
                if (operation.preHandler !== undefined) {
                    return operation.preHandler(request.options);
                }
                return Commerce.AsyncResult.createResolved({ canceled: false });
            }).cancel(function (args) {
                return args.canceled;
            }).run().map(function (result) {
                return { canceled: result.canceled };
            });
        };
        LegacyOperationPipeline.prototype.executePostHandlersAsync = function (request, response) {
            var operation = this.getOperation(request.operationId);
            if (Commerce.ObjectExtensions.isNullOrUndefined(operation.postHandler)) {
                return Commerce.VoidAsyncResult.createResolved();
            }
            return operation.postHandler(response.data);
        };
        LegacyOperationPipeline.prototype.validateOptions = function (operationId, options) {
            var operation = this.getOperation(operationId);
            var errors = [];
            if (Commerce.ArrayExtensions.hasElements(operation.validators)) {
                operation.validators.forEach(function (current) {
                    if (!current.validatorFunctions) {
                        return;
                    }
                    var data = current.dataAccessor ? current.dataAccessor(options) : null;
                    current.validatorFunctions.forEach(function (validatorFunction) {
                        var validationErrors = validatorFunction(data);
                        if (Commerce.ArrayExtensions.hasElements(validationErrors)) {
                            errors.push.apply(errors, validationErrors);
                        }
                    });
                });
            }
            return errors;
        };
        LegacyOperationPipeline._instance = null;
        return LegacyOperationPipeline;
    }());
    Commerce.LegacyOperationPipeline = LegacyOperationPipeline;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var LegacyOperationRequestHandler = (function (_super) {
                __extends(LegacyOperationRequestHandler, _super);
                function LegacyOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LegacyOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.LegacyOperationRequest;
                };
                LegacyOperationRequestHandler.prototype.executeAsync = function (request) {
                    var operationId = request.operationId;
                    var operation = Commerce.LegacyOperationPipeline.instance.getOperation(operationId);
                    var asyncResult;
                    try {
                        asyncResult = operation.handler.execute(request.options);
                    }
                    catch (error) {
                        var errorMessage = "Operation " + operation.id + " terminated unexpectedly. " + (error || "");
                        Commerce.RetailLogger.coreRetailOperationFailed(request.correlationId, Commerce.Proxy.Entities.RetailOperation[operationId], operationId, errorMessage);
                        asyncResult = Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.APPLICATION_ERROR)]);
                    }
                    return asyncResult.map(function (result) {
                        var response = new Commerce.LegacyOperationResponse();
                        var canceled = false;
                        if (result !== null && typeof result !== "undefined") {
                            response.data = result.data;
                            canceled = result.canceled;
                        }
                        return { canceled: canceled, data: response };
                    }).getPromise();
                };
                return LegacyOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.LegacyOperationRequestHandler = LegacyOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var LineDiscountAmountOperationRequestHandler = (function (_super) {
                __extends(LineDiscountAmountOperationRequestHandler, _super);
                function LineDiscountAmountOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LineDiscountAmountOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.LineDiscountAmountOperationRequest;
                };
                LineDiscountAmountOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cartLineDiscounts: request.cartLineDiscounts
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.LineDiscountAmount, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.LineDiscountAmountOperationResponse(result.canceled ? null : Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return LineDiscountAmountOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.LineDiscountAmountOperationRequestHandler = LineDiscountAmountOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var LineDiscountPercentOperationRequestHandler = (function (_super) {
                __extends(LineDiscountPercentOperationRequestHandler, _super);
                function LineDiscountPercentOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LineDiscountPercentOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.LineDiscountPercentOperationRequest;
                };
                LineDiscountPercentOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cartLineDiscounts: request.cartLineDiscounts
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.LineDiscountPercent, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.LineDiscountPercentOperationResponse(result.canceled ? null : Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return LineDiscountPercentOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.LineDiscountPercentOperationRequestHandler = LineDiscountPercentOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var LogOffOperationRequestHandler = (function (_super) {
                __extends(LogOffOperationRequestHandler, _super);
                function LogOffOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LogOffOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.LogOffOperationRequest;
                };
                LogOffOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        correlationId: request.correlationId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.LogOff, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.LogOffOperationResponse()
                        };
                    }).getPromise();
                };
                return LogOffOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.LogOffOperationRequestHandler = LogOffOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var LoyaltyCardPointsBalanceOperationRequestHandler = (function (_super) {
                __extends(LoyaltyCardPointsBalanceOperationRequestHandler, _super);
                function LoyaltyCardPointsBalanceOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LoyaltyCardPointsBalanceOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.LoyaltyCardPointsBalanceOperationRequest;
                };
                LoyaltyCardPointsBalanceOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        loyaltyCardId: request.loyaltyCardId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(request.operationId, options)
                        .map(function (result) {
                        if (result.canceled) {
                            return { canceled: true, data: undefined };
                        }
                        else {
                            var currentCart = Commerce.Session.instance.isCartInProgress ? Commerce.Session.instance.cart : undefined;
                            return {
                                canceled: false,
                                data: new Commerce.LoyaltyCardPointsBalanceOperationResponse(result.data, currentCart)
                            };
                        }
                    }).getPromise();
                };
                return LoyaltyCardPointsBalanceOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.LoyaltyCardPointsBalanceOperationRequestHandler = LoyaltyCardPointsBalanceOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var OverrideLineTaxFromListOperationRequestHandler = (function (_super) {
                __extends(OverrideLineTaxFromListOperationRequestHandler, _super);
                function OverrideLineTaxFromListOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                OverrideLineTaxFromListOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.OverrideLineTaxFromListOperationRequest;
                };
                OverrideLineTaxFromListOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartLine = Commerce.CartHelper.getCartLineByLineId(Commerce.Session.instance.cart, request.cartLineId);
                    var options = {
                        cartLine: cartLine
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.OverrideTaxLineList, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.OverrideLineTaxFromListOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return OverrideLineTaxFromListOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.OverrideLineTaxFromListOperationRequestHandler = OverrideLineTaxFromListOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var OverrideLineTaxOperationRequestHandler = (function (_super) {
                __extends(OverrideLineTaxOperationRequestHandler, _super);
                function OverrideLineTaxOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                OverrideLineTaxOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.OverrideLineTaxOperationRequest;
                };
                OverrideLineTaxOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartLine = Commerce.CartHelper.getCartLineByLineId(Commerce.Session.instance.cart, request.cartLineId);
                    var options = {
                        cartLine: cartLine,
                        taxOverride: { Code: request.taxOverrideCode }
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.OverrideTaxLine, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.OverrideLineTaxOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return OverrideLineTaxOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.OverrideLineTaxOperationRequestHandler = OverrideLineTaxOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var OverrideTransactionTaxOperationRequestHandler = (function (_super) {
                __extends(OverrideTransactionTaxOperationRequestHandler, _super);
                function OverrideTransactionTaxOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                OverrideTransactionTaxOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.OverrideTransactionTaxOperationRequest;
                };
                OverrideTransactionTaxOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cart: Commerce.Session.instance.cart,
                        taxOverride: new Commerce.Proxy.Entities.TaxOverrideClass({ Code: request.taxOverrideCode }),
                        correlationId: request.correlationId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.OverrideTaxTransaction, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.OverrideTransactionTaxOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return OverrideTransactionTaxOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.OverrideTransactionTaxOperationRequestHandler = OverrideTransactionTaxOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var PickupAllOperationRequestHandler = (function (_super) {
                __extends(PickupAllOperationRequestHandler, _super);
                function PickupAllOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                PickupAllOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.PickupAllOperationRequest;
                };
                PickupAllOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cart: Commerce.Session.instance.cart,
                        pickupDate: request.pickupDate,
                        storeAddress: undefined,
                        storeNumber: request.orgUnitNumber,
                        correlationId: request.correlationId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.PickupAllProducts, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.PickupAllOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return PickupAllOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.PickupAllOperationRequestHandler = PickupAllOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var PriceOverrideOperationRequestHandler = (function (_super) {
                __extends(PriceOverrideOperationRequestHandler, _super);
                function PriceOverrideOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                PriceOverrideOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.PriceOverrideOperationRequest;
                };
                PriceOverrideOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, [request.cartLineId]);
                    if (cartLines.length !== 1) {
                        return Promise.reject([new Commerce.Proxy.Entities.Error("string_29858")]);
                    }
                    var options = {
                        cartLinePrices: [{
                                cartLine: cartLines[0],
                                price: request.price
                            }]
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.PriceOverride, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.PriceOverrideOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return PriceOverrideOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.PriceOverrideOperationRequestHandler = PriceOverrideOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var RecalculateChargesOperationRequestHandler = (function (_super) {
                __extends(RecalculateChargesOperationRequestHandler, _super);
                function RecalculateChargesOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RecalculateChargesOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.RecalculateChargesOperationRequest;
                };
                RecalculateChargesOperationRequestHandler.prototype.executeAsync = function (request) {
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(request.operationId, null)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.RecalculateChargesOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return RecalculateChargesOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.RecalculateChargesOperationRequestHandler = RecalculateChargesOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterLegacyOperationRequest = (function (_super) {
        __extends(RegisterLegacyOperationRequest, _super);
        function RegisterLegacyOperationRequest(correlationId, operation) {
            var _this = _super.call(this, correlationId) || this;
            _this.operation = operation;
            return _this;
        }
        return RegisterLegacyOperationRequest;
    }(Commerce.Request));
    Commerce.RegisterLegacyOperationRequest = RegisterLegacyOperationRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var RegisterLegacyOperationRequestHandler = (function (_super) {
                __extends(RegisterLegacyOperationRequestHandler, _super);
                function RegisterLegacyOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RegisterLegacyOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.RegisterLegacyOperationRequest;
                };
                RegisterLegacyOperationRequestHandler.prototype.executeAsync = function (request) {
                    Commerce.LegacyOperationPipeline.instance.registerOperation(request.operation);
                    return Commerce.AsyncResult.createResolved({ canceled: false, data: new Commerce.Response() }).getPromise();
                };
                return RegisterLegacyOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.RegisterLegacyOperationRequestHandler = RegisterLegacyOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RestoreStaffTokenRequest = (function (_super) {
        __extends(RestoreStaffTokenRequest, _super);
        function RestoreStaffTokenRequest() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RestoreStaffTokenRequest;
    }(Commerce.Request));
    Commerce.RestoreStaffTokenRequest = RestoreStaffTokenRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var OperationPipeline = (function () {
        function OperationPipeline() {
            this._operationStackCount = 0;
            this._operationStackCountDuringElevation = -1;
            this._operationIdRequiringElevation = -1;
            this._staffToken = null;
        }
        Object.defineProperty(OperationPipeline, "instance", {
            get: function () {
                if (Commerce.ObjectExtensions.isNullOrUndefined(OperationPipeline._instance)) {
                    OperationPipeline._instance = new OperationPipeline();
                }
                return OperationPipeline._instance;
            },
            enumerable: true,
            configurable: true
        });
        OperationPipeline.prototype.onExecutingAsync = function (request) {
            var _this = this;
            var operationId = request.operationId;
            var operationName = this._getOperationName(operationId);
            var correlationId = request.correlationId;
            var asyncQueue = new Commerce.AsyncQueue();
            Commerce.RetailLogger.coreRetailOperationStarted(correlationId, operationName, operationId);
            Commerce.RetailLogger.coreRetailOperationOnExecutingStarted(correlationId, operationName, operationId);
            this._operationStackCount++;
            return asyncQueue.enqueue(function () {
                return _this._validateDrawerStatusForOperationAsync(request);
            }).enqueue(function () {
                return _this.restoreStaffTokenQueue().run();
            }).cancel(function (args) {
                return args.canceled;
            }).enqueue(function () {
                return _this.preTriggerQueue(request).run();
            }).cancel(function (args) {
                return args.canceled;
            }).run().map(function (result) {
                return { canceled: result.canceled };
            }).done(function (result) {
                if (result.canceled) {
                    Commerce.RetailLogger.coreRetailOperationOnExecutingCanceled(correlationId, operationName, operationId);
                    Commerce.RetailLogger.coreRetailOperationCanceled(correlationId, operationName, operationId);
                }
                else {
                    Commerce.RetailLogger.coreRetailOperationOnExecutingCompleted(correlationId, operationName, operationId);
                }
            }).fail(function (errors) {
                Commerce.RetailLogger.coreRetailOperationOnExecutingFailed(correlationId, operationName, operationId, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                Commerce.RetailLogger.coreRetailOperationFailed(correlationId, operationName, operationId, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
            });
        };
        OperationPipeline.prototype.onExecutedAsync = function (request, result) {
            var _this = this;
            var operationId = request.operationId;
            var operationName = this._getOperationName(operationId);
            var correlationId = request.correlationId;
            var outerQueueResult = new Commerce.VoidAsyncResult();
            var outerQueue = new Commerce.AsyncQueue();
            var innerQueueErrors;
            var innerQueueCanceled;
            outerQueue.enqueue(function () {
                var innerQueue = new Commerce.AsyncQueue();
                if (result instanceof Array) {
                    innerQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected(result);
                    });
                }
                else if (result instanceof Error) {
                    innerQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected([result]);
                    });
                }
                else if (typeof result === "string") {
                    var error_4 = new Error(result);
                    innerQueue.enqueue(function () {
                        return Commerce.VoidAsyncResult.createRejected([error_4]);
                    });
                }
                else {
                    innerQueue.cancel(function () {
                        return result.canceled;
                    }).enqueue(function () {
                        return _this._postTriggerQueue(request, result.data).run();
                    });
                }
                return innerQueue.run().recoverOnFailure(function (errors) {
                    var asyncResult = new Commerce.AsyncResult();
                    var triggerOptions = { operationRequest: request, errors: errors };
                    Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.OperationFailure, triggerOptions)
                        .always(function () {
                        innerQueueErrors = errors;
                        return asyncResult.resolve({ canceled: false });
                    });
                    return asyncResult;
                }).done(function (result) {
                    if (result.canceled) {
                        innerQueueCanceled = true;
                    }
                    else {
                        innerQueueCanceled = false;
                    }
                });
            }).enqueue(function () {
                return _this.restoreStaffTokenQueue().run().recoverOnFailure(function (errors) {
                    Commerce.RetailLogger.coreRetailOperationFailed(correlationId, operationName, operationId, Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                    return Commerce.VoidAsyncResult.createResolved();
                });
            });
            outerQueue.run().always(function () {
                _this._operationStackCount--;
                if (Commerce.ArrayExtensions.hasElements(innerQueueErrors)) {
                    Commerce.RetailLogger.coreRetailOperationFailed(correlationId, operationName, operationId, Commerce.ErrorHelper.serializeErrorsForRetailLogger(innerQueueErrors));
                    outerQueueResult.reject(innerQueueErrors);
                }
                else {
                    if (innerQueueCanceled) {
                        Commerce.RetailLogger.coreRetailOperationCanceled(correlationId, operationName, operationId);
                    }
                    else {
                        Commerce.RetailLogger.coreRetailOperationCompleted(correlationId, operationName, operationId);
                    }
                    outerQueueResult.resolve();
                }
            });
            return outerQueueResult;
        };
        OperationPipeline.prototype.restoreStaffTokenQueue = function () {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            if ((this._operationStackCount <= this._operationStackCountDuringElevation) && this._operationIdRequiringElevation !== -1) {
                asyncQueue.enqueue(function () {
                    Commerce.RetailLogger.coreOperationManagerRevertToSelf();
                    var authenticationProvider;
                    authenticationProvider = Commerce.Authentication.AuthenticationProviderManager.instance.getResourceOwnerPasswordGrantProvider(Commerce.Authentication.AuthenticationProviderResourceType.USER);
                    return authenticationProvider.restoreToken(_this._staffToken).done(function () {
                        _this._operationStackCountDuringElevation = -1;
                        _this._operationIdRequiringElevation = -1;
                        _this._staffToken = null;
                        Commerce.Operations.OperationsManager.instance.isManagerLoggedOn = false;
                    });
                });
            }
            return asyncQueue;
        };
        OperationPipeline.prototype.managerOverrideQueue = function (request) {
            var _this = this;
            var asyncQueue = new Commerce.AsyncQueue();
            if (request.skipManagerPermissionChecks) {
                return asyncQueue;
            }
            var operationId = request.operationId;
            if (!this._isCurrentEmployeeAllowed(operationId)) {
                asyncQueue.enqueue(function () {
                    if (operationId === Commerce.Proxy.Entities.RetailOperation.ChangePassword) {
                        return Commerce.AsyncResult.createRejected([
                            new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CHANGE_PASSWORD_NOT_ALLOWED_PERMISSION_DENIED_MANAGER_OVERRIDE_NOT_ALLOWED)
                        ]);
                    }
                    return Commerce.AsyncResult.createResolved();
                }).enqueue(function () {
                    Commerce.RetailLogger.coreRetailOperationManagerOverride(Commerce.Proxy.Entities.RetailOperation[operationId], operationId);
                    var activityCanceled = false;
                    var asyncResult = new Commerce.AsyncResult();
                    var activity = new Commerce.Activities.GetLoginActivity({});
                    activity.responseHandler = function (loginDialogResponse) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(loginDialogResponse)) {
                            activityCanceled = true;
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        return _this._getOperationPermissionAsyncQueue(request.correlationId, loginDialogResponse.regularLogOnParameters.staffId, loginDialogResponse.regularLogOnParameters.password, operationId, loginDialogResponse.extendedLogOnParameters.extendedCredentials, loginDialogResponse.extendedLogOnParameters.grantType).run().done(function (result) {
                            activityCanceled = result.canceled;
                        });
                    };
                    activity.execute().done(function () {
                        asyncResult.resolve({ canceled: (!activity.response || activityCanceled) });
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncQueue.cancelOn(asyncResult).done(function (result) {
                        if (!result.canceled) {
                            _this._operationStackCountDuringElevation = _this._operationStackCount;
                            _this._operationIdRequiringElevation = operationId;
                        }
                    });
                });
            }
            return asyncQueue;
        };
        OperationPipeline.prototype._validateDrawerStatusForOperationAsync = function (request) {
            var operationId = request.operationId;
            var asyncQueue = new Commerce.AsyncQueue();
            var errors = [];
            var drawerOpenStatus = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_OPEN_STATUS) === "true";
            if (operationId !== Commerce.Proxy.Entities.RetailOperation.CloseShift
                && operationId !== Commerce.Proxy.Entities.RetailOperation.BlindCloseShift
                && operationId !== Commerce.Proxy.Entities.RetailOperation.TenderDeclaration
                && operationId !== Commerce.Proxy.Entities.RetailOperation.BankDrop
                && operationId !== Commerce.Proxy.Entities.RetailOperation.SafeDrop
                && operationId !== Commerce.Proxy.Entities.RetailOperation.PrintZ
                && Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()
                && !Commerce.Session.instance.Shift.IsShared
                && drawerOpenStatus) {
                asyncQueue.enqueue(function () {
                    Commerce.RetailLogger.coreRetailCheckOpenDrawerStatusExecutionStart();
                    return Commerce.Peripherals.instance.cashDrawer.isOpenAsync()
                        .done(function (isDrawerOpen) {
                        if (isDrawerOpen) {
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_CASHDRAWER_ALREADY_OPENED));
                        }
                        Commerce.RetailLogger.coreRetailCheckOpenDrawerStatusExecutionCompleted();
                    }).recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.coreRetailCheckOpenDrawerStatusExecutionFailed(errors[0].ErrorCode, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                }).enqueue(function () {
                    if (Commerce.ArrayExtensions.hasElements(errors)) {
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                });
            }
            return asyncQueue.run();
        };
        OperationPipeline.prototype.preTriggerQueue = function (request) {
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var triggerOptions = { operationRequest: request };
                return asyncQueue.cancelOn(Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreOperation, triggerOptions));
            });
            return asyncQueue;
        };
        OperationPipeline.prototype._getOperationPermissionAsyncQueue = function (correlationId, userName, password, operationId, extendedCredentials, grantType) {
            var _this = this;
            var operationPermissionAsyncQueue = new Commerce.AsyncQueue();
            operationPermissionAsyncQueue.enqueue(function () {
                return Commerce.Authentication.AuthenticationProviderManager.instance.acquireToken(Commerce.Authentication.AuthenticationProviderResourceType.USER)
                    .done(function (token) {
                    _this._staffToken = token;
                });
            });
            operationPermissionAsyncQueue.enqueue(function () {
                return Commerce.Utilities.LogonHelper.resourceOwnedPasswordLogon(correlationId, userName, password, operationId, true, extendedCredentials, grantType);
            }).enqueue(function () {
                var operatorManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IOperatorManagerName);
                var result = operatorManager.getEmployeeAsync(userName);
                return result.done(function (employee) {
                    Commerce.Operations.OperationsManager.instance.isManagerLoggedOn = true;
                });
            });
            return operationPermissionAsyncQueue;
        };
        OperationPipeline.prototype._postTriggerQueue = function (request, response) {
            var asyncQueue = new Commerce.AsyncQueue();
            asyncQueue.enqueue(function () {
                var triggerOptions = { operationRequest: request, operationResponse: response };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostOperation, triggerOptions);
            });
            return asyncQueue;
        };
        OperationPipeline.prototype._isCurrentEmployeeAllowed = function (operationId) {
            var isLoggedOn = !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.CurrentEmployee);
            if (!isLoggedOn) {
                return true;
            }
            var employeePermissions = Commerce.Session.instance.CurrentEmployee.Permissions;
            if (employeePermissions.Roles.some(function (role) { return role === OperationPipeline.MANAGER_PRIVILEGES; })) {
                return true;
            }
            var operationPermissions = this._getOperationPermissions(operationId);
            if (Commerce.ObjectExtensions.isNullOrUndefined(operationPermissions)) {
                return false;
            }
            if (!operationPermissions.CheckUserAccess || !Commerce.ArrayExtensions.hasElements(operationPermissions.Permissions)) {
                return true;
            }
            if (operationId === Commerce.Proxy.Entities.RetailOperation.PriceOverride &&
                employeePermissions.AllowPriceOverride === Commerce.Proxy.Entities.EmployeePriceOverrideType.NotAllowed) {
                return false;
            }
            return operationPermissions.Permissions.reduce(function (isAllowed, operationPermission) {
                return isAllowed && employeePermissions.Roles.some(function (role) { return role === operationPermission; });
            }, true);
        };
        OperationPipeline.prototype._getOperationPermissions = function (operationId) {
            var operationPermissions = Commerce.ApplicationContext.Instance.operationPermissions;
            for (var index = 0; index < operationPermissions.length; index++) {
                if (operationId === operationPermissions[index].OperationId) {
                    return operationPermissions[index];
                }
            }
            return null;
        };
        OperationPipeline.prototype._getOperationName = function (operationId) {
            var operationName;
            var operationPermission = Commerce.ArrayExtensions.firstOrUndefined(Commerce.ApplicationContext.Instance.operationPermissions, function (operationPermission) { return operationPermission.OperationId === operationId; });
            if (operationPermission) {
                operationName = operationPermission.OperationName;
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(operationName)) {
                operationName = "Custom operation";
            }
            return operationName;
        };
        OperationPipeline._instance = null;
        OperationPipeline.MANAGER_PRIVILEGES = "MANAGERPRIVILEGES";
        return OperationPipeline;
    }());
    Commerce.OperationPipeline = OperationPipeline;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var RestoreStaffTokenRequestHandler = (function (_super) {
                __extends(RestoreStaffTokenRequestHandler, _super);
                function RestoreStaffTokenRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RestoreStaffTokenRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.RestoreStaffTokenRequest;
                };
                RestoreStaffTokenRequestHandler.prototype.executeAsync = function (request) {
                    return Commerce.OperationPipeline.instance.restoreStaffTokenQueue().run()
                        .map(function (result) {
                        return { canceled: result.canceled, data: new Commerce.Response() };
                    }).getPromise();
                };
                return RestoreStaffTokenRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.RestoreStaffTokenRequestHandler = RestoreStaffTokenRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SafeDropOperationRequestHandler = (function (_super) {
                __extends(SafeDropOperationRequestHandler, _super);
                function SafeDropOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SafeDropOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.SafeDropOperationRequest;
                };
                SafeDropOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {};
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.SafeDrop, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.SafeDropOperationResponse(result.data)
                        };
                    }).getPromise();
                };
                return SafeDropOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SafeDropOperationRequestHandler = SafeDropOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SetCartLineCommentOperationRequestHandler = (function (_super) {
                __extends(SetCartLineCommentOperationRequestHandler, _super);
                function SetCartLineCommentOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SetCartLineCommentOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.SetCartLineCommentOperationRequest;
                };
                SetCartLineCommentOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, [request.cartLineId]);
                    if (cartLines.length !== 1) {
                        return Promise.reject([new Commerce.Proxy.Entities.Error("string_29858")]);
                    }
                    var options = {
                        cart: Commerce.Session.instance.cart,
                        cartLineComments: [{
                                cartLine: cartLines[0],
                                comment: request.comment
                            }],
                        customerAccountDepositLineComment: undefined
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.ItemComment, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.SetCartLineCommentOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return SetCartLineCommentOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SetCartLineCommentOperationRequestHandler = SetCartLineCommentOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SetCartLineQuantityOperationRequestHandler = (function (_super) {
                __extends(SetCartLineQuantityOperationRequestHandler, _super);
                function SetCartLineQuantityOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SetCartLineQuantityOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.SetCartLineQuantityOperationRequest;
                };
                SetCartLineQuantityOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartLine = Commerce.CartHelper.getCartLineByLineId(Commerce.Session.instance.cart, request.cartLineId);
                    var options = {
                        cartLineQuantities: [{ cartLine: cartLine, quantity: request.quantity }],
                        correlationId: request.correlationId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.SetQuantity, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.SetCartLineQuantityOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return SetCartLineQuantityOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SetCartLineQuantityOperationRequestHandler = SetCartLineQuantityOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SetCustomerOnCartOperationRequestHandler = (function (_super) {
                __extends(SetCustomerOnCartOperationRequestHandler, _super);
                function SetCustomerOnCartOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SetCustomerOnCartOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.SetCustomerOnCartOperationRequest;
                };
                SetCustomerOnCartOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        customer: undefined,
                        customerId: request.customerAccountNumber,
                        cartAffiliations: undefined,
                        correlationId: request.correlationId
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.SetCustomer, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.SetCustomerOnCartOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return SetCustomerOnCartOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SetCustomerOnCartOperationRequestHandler = SetCustomerOnCartOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SetTransactionCommentOperationRequestHandler = (function (_super) {
                __extends(SetTransactionCommentOperationRequestHandler, _super);
                function SetTransactionCommentOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SetTransactionCommentOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.SetTransactionCommentOperationRequest;
                };
                SetTransactionCommentOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cart: Commerce.Session.instance.cart,
                        comment: request.comment
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.TransactionComment, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled
                                ? undefined
                                : new Commerce.SetTransactionCommentOperationResponse(Commerce.Session.instance.cart)
                        };
                    })
                        .getPromise();
                };
                return SetTransactionCommentOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SetTransactionCommentOperationRequestHandler = SetTransactionCommentOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SuspendCurrentCartOperationRequestHandler = (function (_super) {
                __extends(SuspendCurrentCartOperationRequestHandler, _super);
                function SuspendCurrentCartOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SuspendCurrentCartOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.SuspendCurrentCartOperationRequest;
                };
                SuspendCurrentCartOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartToSuspend = Commerce.ObjectExtensions.clone(Commerce.Session.instance.cart);
                    var options = {
                        correlationId: request.correlationId,
                        cart: cartToSuspend
                    };
                    return Operations.OperationsManager.instance.runOperation(Operations.RetailOperation.SuspendTransaction, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.SuspendCurrentCartOperationResponse(cartToSuspend)
                        };
                    }).getPromise();
                };
                return SuspendCurrentCartOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SuspendCurrentCartOperationRequestHandler = SuspendCurrentCartOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var TenderDeclarationOperationRequestHandler = (function (_super) {
                __extends(TenderDeclarationOperationRequestHandler, _super);
                function TenderDeclarationOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                TenderDeclarationOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.TenderDeclarationOperationRequest;
                };
                TenderDeclarationOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {};
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.TenderDeclaration, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.TenderDeclarationOperationResponse(result.data)
                        };
                    }).getPromise();
                };
                return TenderDeclarationOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.TenderDeclarationOperationRequestHandler = TenderDeclarationOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var TenderRemovalOperationRequestHandler = (function (_super) {
                __extends(TenderRemovalOperationRequestHandler, _super);
                function TenderRemovalOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                TenderRemovalOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.TenderRemovalOperationRequest;
                };
                TenderRemovalOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {};
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.TenderRemoval, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Commerce.TenderRemovalOperationResponse(result.data)
                        };
                    }).getPromise();
                };
                return TenderRemovalOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.TenderRemovalOperationRequestHandler = TenderRemovalOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var TotalDiscountAmountOperationRequestHandler = (function (_super) {
                __extends(TotalDiscountAmountOperationRequestHandler, _super);
                function TotalDiscountAmountOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                TotalDiscountAmountOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.TotalDiscountAmountOperationRequest;
                };
                TotalDiscountAmountOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cart: request.cart,
                        discountValue: request.discountValue
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.TotalDiscountAmount, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.TotalDiscountAmountOperationResponse(result.canceled ? null : Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return TotalDiscountAmountOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.TotalDiscountAmountOperationRequestHandler = TotalDiscountAmountOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var TotalDiscountPercentOperationRequestHandler = (function (_super) {
                __extends(TotalDiscountPercentOperationRequestHandler, _super);
                function TotalDiscountPercentOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                TotalDiscountPercentOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.TotalDiscountPercentOperationRequest;
                };
                TotalDiscountPercentOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = {
                        cart: request.cart,
                        discountValue: request.discountValue
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Operations.RetailOperation.TotalDiscountPercent, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.TotalDiscountPercentOperationResponse(result.canceled ? null : Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return TotalDiscountPercentOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.TotalDiscountPercentOperationRequestHandler = TotalDiscountPercentOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var VoidCartLineOperationRequestHandler = (function (_super) {
                __extends(VoidCartLineOperationRequestHandler, _super);
                function VoidCartLineOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                VoidCartLineOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.VoidCartLineOperationRequest;
                };
                VoidCartLineOperationRequestHandler.prototype.executeAsync = function (request) {
                    var cartLines = Commerce.CartHelper.getCartLinesByLineIds(Commerce.Session.instance.cart, [request.cartLineId]);
                    var options = { cartLines: cartLines };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.VoidItem, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.VoidCartLineOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return VoidCartLineOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.VoidCartLineOperationRequestHandler = VoidCartLineOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var VoidTenderLineOperationRequestHandler = (function (_super) {
                __extends(VoidTenderLineOperationRequestHandler, _super);
                function VoidTenderLineOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                VoidTenderLineOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.VoidTenderLineOperationRequest;
                };
                VoidTenderLineOperationRequestHandler.prototype.executeAsync = function (request) {
                    var tenderLines = Commerce.CartHelper.getTenderLineByTenderLineIds(Commerce.Session.instance.cart, [request.tenderLineId]);
                    var options = { tenderLines: tenderLines, correlationId: request.correlationId };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.VoidPayment, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.VoidTenderLineOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return VoidTenderLineOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.VoidTenderLineOperationRequestHandler = VoidTenderLineOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var VoidTransactionOperationRequestHandler = (function (_super) {
                __extends(VoidTransactionOperationRequestHandler, _super);
                function VoidTransactionOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                VoidTransactionOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.VoidTransactionOperationRequest;
                };
                VoidTransactionOperationRequestHandler.prototype.executeAsync = function (request) {
                    var options = { cart: Commerce.Session.instance.cart, promptConfirmation: request.promptConfirmation };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.VoidTransaction, options)
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.VoidTransactionOperationResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                return VoidTransactionOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.VoidTransactionOperationRequestHandler = VoidTransactionOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var LegacyOperationRequestInterceptor = (function () {
                function LegacyOperationRequestInterceptor() {
                }
                LegacyOperationRequestInterceptor.prototype.onInterceptingAsync = function (request) {
                    return new Commerce.AsyncQueue().enqueue(function () {
                        return Commerce.LegacyOperationPipeline.instance.executePreHandlersAsync(request);
                    }).cancel(function (args) {
                        return args.canceled;
                    }).enqueue(function () {
                        var validationErrors = Commerce.LegacyOperationPipeline.instance.validateOptions(request.operationId, request.options);
                        return Commerce.ArrayExtensions.hasElements(validationErrors) ? Commerce.AsyncResult.createRejected(validationErrors) : Commerce.AsyncResult.createResolved();
                    }).run().map(function (result) { return { canceled: result.canceled }; }).getPromise();
                };
                LegacyOperationRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    if (result instanceof Array || result.canceled) {
                        return Promise.resolve();
                    }
                    else {
                        return Commerce.LegacyOperationPipeline.instance.executePostHandlersAsync(request, result.data).getPromise();
                    }
                };
                return LegacyOperationRequestInterceptor;
            }());
            Interceptors.LegacyOperationRequestInterceptor = LegacyOperationRequestInterceptor;
        })(Interceptors = Operations.Interceptors || (Operations.Interceptors = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var ManagerOverrideOperationRequestHandlerInterceptor = (function () {
                function ManagerOverrideOperationRequestHandlerInterceptor() {
                }
                ManagerOverrideOperationRequestHandlerInterceptor.prototype.onInterceptingAsync = function (request) {
                    return Commerce.OperationPipeline.instance.managerOverrideQueue(request).run().getPromise();
                };
                return ManagerOverrideOperationRequestHandlerInterceptor;
            }());
            Interceptors.ManagerOverrideOperationRequestHandlerInterceptor = ManagerOverrideOperationRequestHandlerInterceptor;
        })(Interceptors = Operations.Interceptors || (Operations.Interceptors = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Interceptors;
        (function (Interceptors) {
            "use strict";
            var OperationRequestInterceptor = (function () {
                function OperationRequestInterceptor() {
                }
                OperationRequestInterceptor.prototype.onInterceptingAsync = function (request) {
                    return Commerce.OperationPipeline.instance.onExecutingAsync(request).getPromise();
                };
                OperationRequestInterceptor.prototype.onInterceptedAsync = function (request, result) {
                    return Commerce.OperationPipeline.instance.onExecutedAsync(request, result).getPromise();
                };
                return OperationRequestInterceptor;
            }());
            Interceptors.OperationRequestInterceptor = OperationRequestInterceptor;
        })(Interceptors = Operations.Interceptors || (Operations.Interceptors = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IssueCreditMemoClientRequest = (function (_super) {
        __extends(IssueCreditMemoClientRequest, _super);
        function IssueCreditMemoClientRequest() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IssueCreditMemoClientRequest;
    }(Commerce.EndTransactionClientRequestBase));
    Commerce.IssueCreditMemoClientRequest = IssueCreditMemoClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var IssueCreditMemoClientResponse = (function (_super) {
        __extends(IssueCreditMemoClientResponse, _super);
        function IssueCreditMemoClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return IssueCreditMemoClientResponse;
    }(Commerce.EndTransactionClientResponseBase));
    Commerce.IssueCreditMemoClientResponse = IssueCreditMemoClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RecalculateChargesOperationResponse = (function (_super) {
        __extends(RecalculateChargesOperationResponse, _super);
        function RecalculateChargesOperationResponse(cart) {
            var _this = _super.call(this) || this;
            _this.cart = cart;
            return _this;
        }
        return RecalculateChargesOperationResponse;
    }(Commerce.Response));
    Commerce.RecalculateChargesOperationResponse = RecalculateChargesOperationResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RecalculateChargesOperationRequest = (function (_super) {
        __extends(RecalculateChargesOperationRequest, _super);
        function RecalculateChargesOperationRequest(correlationId) {
            return _super.call(this, Commerce.Proxy.Entities.RetailOperation.RecalculateCharges, correlationId) || this;
        }
        return RecalculateChargesOperationRequest;
    }(Commerce.OperationRequest));
    Commerce.RecalculateChargesOperationRequest = RecalculateChargesOperationRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowChangeDueAndPromptForGiftReceiptsClientRequest = (function (_super) {
        __extends(ShowChangeDueAndPromptForGiftReceiptsClientRequest, _super);
        function ShowChangeDueAndPromptForGiftReceiptsClientRequest(correlationId, salesOrder, receipts) {
            var _this = _super.call(this, correlationId, salesOrder) || this;
            _this.receipts = receipts;
            return _this;
        }
        return ShowChangeDueAndPromptForGiftReceiptsClientRequest;
    }(Commerce.ShowChangeDueClientRequest));
    Commerce.ShowChangeDueAndPromptForGiftReceiptsClientRequest = ShowChangeDueAndPromptForGiftReceiptsClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var ShowChangeDueAndPromptForGiftReceiptsClientResponse = (function (_super) {
        __extends(ShowChangeDueAndPromptForGiftReceiptsClientResponse, _super);
        function ShowChangeDueAndPromptForGiftReceiptsClientResponse(receipts) {
            var _this = _super.call(this) || this;
            _this.receipts = receipts;
            return _this;
        }
        return ShowChangeDueAndPromptForGiftReceiptsClientResponse;
    }(Commerce.Response));
    Commerce.ShowChangeDueAndPromptForGiftReceiptsClientResponse = ShowChangeDueAndPromptForGiftReceiptsClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ClearCommissionSalesGroupOnLineHandler = (function (_super) {
            __extends(ClearCommissionSalesGroupOnLineHandler, _super);
            function ClearCommissionSalesGroupOnLineHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ClearCommissionSalesGroupOnLineHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cartLines: null };
                if (!Commerce.ArrayExtensions.hasElements(options.cartLines)) {
                    throw "ClearCommissionSalesGroupOnLineHandler:execute - The parameter value options. CartLines cannot be null or empty";
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var cartLine = options.cartLines[0];
                asyncQueue.enqueue(function () {
                    return _this.cartManager.updateCommissionSalesGroup(Commerce.Session.instance.cart.Id, cartLine.LineId, null, true);
                });
                return asyncQueue.run();
            };
            return ClearCommissionSalesGroupOnLineHandler;
        }(Operations.OperationHandlerBase));
        Operations.ClearCommissionSalesGroupOnLineHandler = ClearCommissionSalesGroupOnLineHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var ClearCommissionSalesGroupOnTransactionHandler = (function (_super) {
            __extends(ClearCommissionSalesGroupOnTransactionHandler, _super);
            function ClearCommissionSalesGroupOnTransactionHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ClearCommissionSalesGroupOnTransactionHandler.prototype.execute = function (options) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    return _this.cartManager.updateCommissionSalesGroup(Commerce.Session.instance.cart.Id, null, null, true);
                });
                return asyncQueue.run();
            };
            return ClearCommissionSalesGroupOnTransactionHandler;
        }(Operations.OperationHandlerBase));
        Operations.ClearCommissionSalesGroupOnTransactionHandler = ClearCommissionSalesGroupOnTransactionHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SetCommissionSalesGroupOnLineHandler = (function (_super) {
            __extends(SetCommissionSalesGroupOnLineHandler, _super);
            function SetCommissionSalesGroupOnLineHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SetCommissionSalesGroupOnLineHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { cartLines: null };
                if (!Commerce.ArrayExtensions.hasElements(options.cartLines)) {
                    throw "SetCommissionSalesGroupOnLineHandler:execute - The parameter value options. CartLines cannot be null or empty";
                }
                var asyncQueue = new Commerce.AsyncQueue();
                var cartLine = options.cartLines[0];
                var salesRepresentativeId;
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult();
                    Commerce.Utilities.SalesRepresentativeHelper.getSalesRepresentativeIdWhenUpdatingACartLineAsync(cartLine)
                        .done(function (commissionSalesGroupId) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroupId)) {
                            asyncResult.resolve({ canceled: true });
                        }
                        else {
                            salesRepresentativeId = commissionSalesGroupId;
                            asyncResult.resolve({ canceled: false });
                        }
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncQueue.cancelOn(asyncResult);
                }).enqueue(function () {
                    return _this.cartManager.updateCommissionSalesGroup(Commerce.Session.instance.cart.Id, cartLine.LineId, salesRepresentativeId, true);
                });
                return asyncQueue.run();
            };
            return SetCommissionSalesGroupOnLineHandler;
        }(Operations.OperationHandlerBase));
        Operations.SetCommissionSalesGroupOnLineHandler = SetCommissionSalesGroupOnLineHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var SetCommissionSalesGroupOnTransactionHandler = (function (_super) {
            __extends(SetCommissionSalesGroupOnTransactionHandler, _super);
            function SetCommissionSalesGroupOnTransactionHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SetCommissionSalesGroupOnTransactionHandler.prototype.execute = function (options) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var salesRepresentativeId;
                asyncQueue.enqueue(function () {
                    var asyncResult = new Commerce.AsyncResult();
                    Commerce.Utilities.SalesRepresentativeHelper.getSalesRepresentativeIdWhenUpdatingATransactionAsync()
                        .done(function (commissionSalesGroupId) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(commissionSalesGroupId)) {
                            asyncResult.resolve({ canceled: true });
                        }
                        else {
                            salesRepresentativeId = commissionSalesGroupId;
                            asyncResult.resolve({ canceled: false });
                        }
                    }).fail(function (errors) {
                        asyncResult.reject(errors);
                    });
                    return asyncQueue.cancelOn(asyncResult);
                }).enqueue(function () {
                    return _this.cartManager.updateCommissionSalesGroup(Commerce.Session.instance.cart.Id, null, salesRepresentativeId, true);
                });
                return asyncQueue.run();
            };
            return SetCommissionSalesGroupOnTransactionHandler;
        }(Operations.OperationHandlerBase));
        Operations.SetCommissionSalesGroupOnTransactionHandler = SetCommissionSalesGroupOnTransactionHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var AddPaymentActivity = (function (_super) {
            __extends(AddPaymentActivity, _super);
            function AddPaymentActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AddPaymentActivity;
        }(Activities.Activity));
        Activities.AddPaymentActivity = AddPaymentActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ApprovePartialAmountActivity = (function (_super) {
            __extends(ApprovePartialAmountActivity, _super);
            function ApprovePartialAmountActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ApprovePartialAmountActivity;
        }(Activities.Activity));
        Activities.ApprovePartialAmountActivity = ApprovePartialAmountActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var DisplayPaymentMessageDialogActivity = (function (_super) {
            __extends(DisplayPaymentMessageDialogActivity, _super);
            function DisplayPaymentMessageDialogActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DisplayPaymentMessageDialogActivity.prototype.execute = function () {
                throw "DisplayPaymentMessageDialogActivity method execute not implemented.";
            };
            return DisplayPaymentMessageDialogActivity;
        }(Activities.Activity));
        Activities.DisplayPaymentMessageDialogActivity = DisplayPaymentMessageDialogActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetGiftCardActivity = (function (_super) {
            __extends(GetGiftCardActivity, _super);
            function GetGiftCardActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetGiftCardActivity;
        }(Activities.Activity));
        Activities.GetGiftCardActivity = GetGiftCardActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetGiftCardDetailsActivity = (function (_super) {
            __extends(GetGiftCardDetailsActivity, _super);
            function GetGiftCardDetailsActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetGiftCardDetailsActivity;
        }(Activities.Activity));
        Activities.GetGiftCardDetailsActivity = GetGiftCardDetailsActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetGiftReceiptActivity = (function (_super) {
            __extends(GetGiftReceiptActivity, _super);
            function GetGiftReceiptActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetGiftReceiptActivity;
        }(Activities.Activity));
        Activities.GetGiftReceiptActivity = GetGiftReceiptActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetPaymentInfoActivity = (function (_super) {
            __extends(GetPaymentInfoActivity, _super);
            function GetPaymentInfoActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetPaymentInfoActivity;
        }(Activities.Activity));
        Activities.GetPaymentInfoActivity = GetPaymentInfoActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetPaymentOptionActivity = (function (_super) {
            __extends(GetPaymentOptionActivity, _super);
            function GetPaymentOptionActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetPaymentOptionActivity;
        }(Activities.Activity));
        Activities.GetPaymentOptionActivity = GetPaymentOptionActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetSignatureActivity = (function (_super) {
            __extends(GetSignatureActivity, _super);
            function GetSignatureActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSignatureActivity;
        }(Activities.Activity));
        Activities.GetSignatureActivity = GetSignatureActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetSignatureFromDeviceActivity = (function (_super) {
            __extends(GetSignatureFromDeviceActivity, _super);
            function GetSignatureFromDeviceActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSignatureFromDeviceActivity;
        }(Activities.Activity));
        Activities.GetSignatureFromDeviceActivity = GetSignatureFromDeviceActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var GetSignatureFromPOSActivity = (function (_super) {
            __extends(GetSignatureFromPOSActivity, _super);
            function GetSignatureFromPOSActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSignatureFromPOSActivity;
        }(Activities.Activity));
        Activities.GetSignatureFromPOSActivity = GetSignatureFromPOSActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectCardTypeActivity = (function (_super) {
            __extends(SelectCardTypeActivity, _super);
            function SelectCardTypeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectCardTypeActivity;
        }(Activities.Activity));
        Activities.SelectCardTypeActivity = SelectCardTypeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectPaymentOptionActivity = (function (_super) {
            __extends(SelectPaymentOptionActivity, _super);
            function SelectPaymentOptionActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectPaymentOptionActivity;
        }(Activities.Activity));
        Activities.SelectPaymentOptionActivity = SelectPaymentOptionActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SelectTenderTypeActivity = (function (_super) {
            __extends(SelectTenderTypeActivity, _super);
            function SelectTenderTypeActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectTenderTypeActivity;
        }(Activities.Activity));
        Activities.SelectTenderTypeActivity = SelectTenderTypeActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var TokenizePaymentCardActivity = (function (_super) {
            __extends(TokenizePaymentCardActivity, _super);
            function TokenizePaymentCardActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TokenizePaymentCardActivity.prototype.execute = function () {
                throw "TokenizePaymentCardActivity method execute not implemented.";
            };
            return TokenizePaymentCardActivity;
        }(Activities.Activity));
        Activities.TokenizePaymentCardActivity = TokenizePaymentCardActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ValidateSignatureActivity = (function (_super) {
            __extends(ValidateSignatureActivity, _super);
            function ValidateSignatureActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ValidateSignatureActivity;
        }(Activities.Activity));
        Activities.ValidateSignatureActivity = ValidateSignatureActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var ValidateSignatureInPOSActivity = (function (_super) {
            __extends(ValidateSignatureInPOSActivity, _super);
            function ValidateSignatureInPOSActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ValidateSignatureInPOSActivity;
        }(Activities.Activity));
        Activities.ValidateSignatureInPOSActivity = ValidateSignatureInPOSActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var WaitForSignatureActivity = (function (_super) {
            __extends(WaitForSignatureActivity, _super);
            function WaitForSignatureActivity() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WaitForSignatureActivity;
        }(Activities.Activity));
        Activities.WaitForSignatureActivity = WaitForSignatureActivity;
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var PaymentTransactionReferenceContainer = (function () {
            function PaymentTransactionReferenceContainer() {
            }
            return PaymentTransactionReferenceContainer;
        }());
        Payments.PaymentTransactionReferenceContainer = PaymentTransactionReferenceContainer;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SignatureActivityResult;
        (function (SignatureActivityResult) {
            SignatureActivityResult[SignatureActivityResult["OK"] = 0] = "OK";
            SignatureActivityResult[SignatureActivityResult["Cancelled"] = 1] = "Cancelled";
            SignatureActivityResult[SignatureActivityResult["Recapture"] = 2] = "Recapture";
        })(SignatureActivityResult = Activities.SignatureActivityResult || (Activities.SignatureActivityResult = {}));
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Activities;
    (function (Activities) {
        "use strict";
        var SignatureActivityResultEnum;
        (function (SignatureActivityResultEnum) {
            SignatureActivityResultEnum[SignatureActivityResultEnum["OK"] = 0] = "OK";
            SignatureActivityResultEnum[SignatureActivityResultEnum["Skipped"] = 1] = "Skipped";
            SignatureActivityResultEnum[SignatureActivityResultEnum["Cancelled"] = 2] = "Cancelled";
            SignatureActivityResultEnum[SignatureActivityResultEnum["ActivityCancelled"] = 3] = "ActivityCancelled";
        })(SignatureActivityResultEnum = Activities.SignatureActivityResultEnum || (Activities.SignatureActivityResultEnum = {}));
    })(Activities = Commerce.Activities || (Commerce.Activities = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var TransactionReferenceAllowedActions;
        (function (TransactionReferenceAllowedActions) {
            TransactionReferenceAllowedActions[TransactionReferenceAllowedActions["Any"] = 0] = "Any";
            TransactionReferenceAllowedActions[TransactionReferenceAllowedActions["Read"] = 1] = "Read";
            TransactionReferenceAllowedActions[TransactionReferenceAllowedActions["Remove"] = 2] = "Remove";
        })(TransactionReferenceAllowedActions = Payments.TransactionReferenceAllowedActions || (Payments.TransactionReferenceAllowedActions = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var ActivateHardwareStationClientRequestHandler = (function (_super) {
                __extends(ActivateHardwareStationClientRequestHandler, _super);
                function ActivateHardwareStationClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ActivateHardwareStationClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.ActivateHardwareStationClientRequest;
                };
                ActivateHardwareStationClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to ActivateHardwareStationClientRequestHandler execute: request cannot be null or undefined");
                    }
                    var hardwareStationProfile = request.hardwareStationProfile;
                    var hardwareStationUrl = Commerce.Peripherals.HardwareStation.HardwareStationContext.getHardwareStationUrlFromProfile(hardwareStationProfile);
                    var hardwareStation = {
                        recordId: hardwareStationProfile.RecordId,
                        hostName: hardwareStationProfile.HardwareStationHostName,
                        description: hardwareStationProfile.HardwareStationDescription,
                        url: hardwareStationUrl,
                        isActive: true,
                        isPaired: true,
                        profileId: hardwareStationProfile.HardwareProfileId,
                        eftTerminalId: hardwareStationProfile.HardwareStationEftTerminalId,
                        hardwareConfigurations: hardwareStationProfile.HardwareConfigurations
                    };
                    Commerce.HardwareStationEndpointStorage.setActiveHardwareStation(request.correlationId, hardwareStation);
                    return Promise.resolve({
                        canceled: false,
                        data: new Payments.ActivateHardwareStationClientResponse(void 0)
                    });
                };
                return ActivateHardwareStationClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ActivateHardwareStationClientRequestHandler = ActivateHardwareStationClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var AddPreAuthorizedPaymentsToCartClientRequestHandler = (function (_super) {
                __extends(AddPreAuthorizedPaymentsToCartClientRequestHandler, _super);
                function AddPreAuthorizedPaymentsToCartClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AddPreAuthorizedPaymentsToCartClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.AddPreAuthorizedPaymentsToCartClientRequest;
                };
                AddPreAuthorizedPaymentsToCartClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to the AddPreAuthorizedPaymentsToCartClientRequestHandler executeAsync: "
                            + "request cannot be null or undefined.");
                    }
                    Commerce.RetailLogger.posAddPreAuthorizedPaymentsStarted(request.correlationId);
                    var cartTenderLines = Commerce.Session.instance.cart.TenderLines;
                    var authorizedTenderLines = cartTenderLines.filter(function (tenderLine) {
                        return tenderLine.ProcessingTypeValue === Commerce.Proxy.Entities.PaymentProcessingType.Deferred
                            && tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.PendingCommit;
                    });
                    var unauthorizedTenderLine = Commerce.ArrayExtensions.firstOrUndefined(cartTenderLines, function (tenderLine) {
                        return tenderLine.ProcessingTypeValue === Commerce.Proxy.Entities.PaymentProcessingType.Deferred
                            && tenderLine.StatusValue === Commerce.Proxy.Entities.TenderLineStatus.NotProcessed;
                    });
                    if (!Commerce.CustomerOrderHelper.isCustomerOrderPickup(Commerce.Session.instance.cart)
                        || !Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()
                        || !(Commerce.ArrayExtensions.hasElements(authorizedTenderLines) || !Commerce.ObjectExtensions.isNullOrUndefined(unauthorizedTenderLine))
                        || Commerce.Session.instance.cart.AmountDue <= 0) {
                        Commerce.RetailLogger.posAddPreAuthorizedPaymentsNotApplicable(request.correlationId, Commerce.CustomerOrderHelper.isCustomerOrderPickup(Commerce.Session.instance.cart), Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive(), authorizedTenderLines.length, !Commerce.ObjectExtensions.isNullOrUndefined(unauthorizedTenderLine));
                        return Commerce.AsyncResult.createResolved({
                            canceled: false,
                            data: new Payments.AddPreAuthorizedPaymentsToCartClientResponse(Commerce.Session.instance.cart)
                        }).getPromise();
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        var useAvailablePaymentOption = {
                            key: "UseAvailablePayment",
                            primaryText: Commerce.ViewModelAdapter.getResourceString("string_3443"),
                            iconClass: "iconPaymentCard"
                        };
                        var useDifferentPaymentOption = {
                            key: "UseDifferentPayment",
                            primaryText: Commerce.ViewModelAdapter.getResourceString("string_3444"),
                            iconClass: "iconBulletedList"
                        };
                        var activity = new Commerce.Activities.GetPaymentOptionActivity({
                            title: Commerce.ViewModelAdapter.getResourceString("string_3441"),
                            description: Commerce.ViewModelAdapter.getResourceString("string_3442"),
                            paymentOptions: [useAvailablePaymentOption, useDifferentPaymentOption],
                            isCancelAllowed: false
                        });
                        return activity.execute()
                            .done(function () {
                            if (activity.response.paymentOption.key === useDifferentPaymentOption.key) {
                                Commerce.RetailLogger.posAddPreAuthorizedPaymentsCancelled(request.correlationId);
                                asyncQueue.cancel();
                            }
                        });
                    });
                    authorizedTenderLines.forEach(function (tenderLine) {
                        asyncQueue.enqueue(function () {
                            if (Commerce.Session.instance.cart.AmountDue > 0) {
                                var tenderLineAmount_1;
                                if (tenderLine.AuthorizedAmount <= Commerce.Session.instance.cart.AmountDue) {
                                    tenderLineAmount_1 = tenderLine.AuthorizedAmount;
                                }
                                else {
                                    tenderLineAmount_1 = Commerce.Session.instance.cart.AmountDue;
                                }
                                Commerce.RetailLogger.posAddPreAuthorizedPaymentsUpdateAuthorizedTenderLineStarted(request.correlationId, tenderLine.AuthorizedAmount, tenderLineAmount_1, tenderLine.PaymentRefRecId);
                                var updatedAuthorizedTenderLine = Commerce.ObjectExtensions.clone(tenderLine);
                                updatedAuthorizedTenderLine.Amount = tenderLineAmount_1;
                                return _this._updatePreprocessedTenderLineInCartAsync(updatedAuthorizedTenderLine)
                                    .done(function () {
                                    Commerce.RetailLogger.posAddPreAuthorizedPaymentsUpdateAuthorizedTenderLineSucceeded(request.correlationId, tenderLine.AuthorizedAmount, tenderLineAmount_1, tenderLine.PaymentRefRecId);
                                }).fail(function (errors) {
                                    Commerce.RetailLogger.posAddPreAuthorizedPaymentsUpdateAuthorizedTenderLineFailed(request.correlationId, tenderLine.AuthorizedAmount, tenderLineAmount_1, tenderLine.PaymentRefRecId, Commerce.ErrorHelper.serializeError(errors));
                                });
                            }
                            else {
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                        });
                    });
                    var authorizationTenderLineToVoidOnFailure = null;
                    asyncQueue.enqueue(function () {
                        var tenderLineAmount = Commerce.Session.instance.cart.AmountDue;
                        if (tenderLineAmount > 0 && !Commerce.ObjectExtensions.isNullOrUndefined(unauthorizedTenderLine)) {
                            Commerce.RetailLogger.posAddPreAuthorizedPaymentsUpdateAuthorizeCardTokenStarted(request.correlationId, tenderLineAmount);
                            return asyncQueue.cancelOn(_this._authorizeCardTokenAsync(request.correlationId, unauthorizedTenderLine, tenderLineAmount)
                                .recoverOnFailure(function () {
                                Commerce.RetailLogger.posAddPreAuthorizedPaymentsAuthorizeCardTokenRetryStarted(request.correlationId, tenderLineAmount);
                                return _this._authorizeCardTokenAsync(request.correlationId, unauthorizedTenderLine, tenderLineAmount);
                            }).done(function () {
                                Commerce.RetailLogger.posAddPreAuthorizedPaymentsAuthorizeCardTokenSucceeded(request.correlationId, tenderLineAmount);
                            }).fail(function (errors) {
                                Commerce.RetailLogger.posAddPreAuthorizedPaymentsAuthorizeCardTokenFailed(request.correlationId, tenderLineAmount, Commerce.ErrorHelper.serializeError(errors));
                            }));
                        }
                        else {
                            return Commerce.AsyncResult.createResolved({ canceled: false, data: null });
                        }
                    }).enqueue(function (result) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            Commerce.RetailLogger.posAddPreAuthorizedPaymentsAuthorizeCardTokenSkipped(request.correlationId, Commerce.Session.instance.cart.AmountDue, !Commerce.ObjectExtensions.isNullOrUndefined(unauthorizedTenderLine));
                            return Commerce.AsyncResult.createResolved(result);
                        }
                        authorizationTenderLineToVoidOnFailure = {
                            Amount: result.data.ApprovedAmount,
                            AuthorizedAmount: result.data.ApprovedAmount,
                            Authorization: result.data.PaymentSdkData,
                            CardToken: unauthorizedTenderLine.CardToken,
                            Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            TenderTypeId: unauthorizedTenderLine.TenderTypeId,
                            CardTypeId: unauthorizedTenderLine.CardTypeId,
                            StatusValue: Commerce.Proxy.Entities.TenderLineStatus.PendingCommit,
                            IsVoidable: true,
                            CardProcessorStatusValue: Commerce.Proxy.Entities.CreditCardProcessorStatus.Approved
                        };
                        if (result.data.IsApproved && result.data.ApprovedAmount !== Commerce.Session.instance.cart.AmountDue) {
                            return _this._approvePartialPaymentAsync(request.correlationId, Commerce.Session.instance.cart.AmountDue, result.data, authorizationTenderLineToVoidOnFailure)
                                .map(function () {
                                return result;
                            });
                        }
                        else {
                            return Commerce.AsyncResult.createResolved(result);
                        }
                    }).enqueue(function (result) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(result.data)) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else if (result.data.IsApproved) {
                            Commerce.RetailLogger.posAddPreAuthorizedPaymentsUpdateUnauthorizedTenderLineStarted(request.correlationId);
                            var updatedUnauthorizedTenderLine = Commerce.ObjectExtensions.clone(unauthorizedTenderLine);
                            updatedUnauthorizedTenderLine.Amount = result.data.ApprovedAmount;
                            updatedUnauthorizedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.PendingCommit;
                            updatedUnauthorizedTenderLine.Authorization = result.data.PaymentSdkData;
                            return _this._updatePreprocessedTenderLineInCartAsync(updatedUnauthorizedTenderLine)
                                .done(function () {
                                Commerce.RetailLogger.posAddPreAuthorizedPaymentsUpdateUnauthorizedTenderLineSucceeded(request.correlationId);
                            }).recoverOnFailure(function (errors) {
                                Commerce.RetailLogger.posAddPreAuthorizedPaymentsUpdateUnauthorizedTenderLineFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                                var asyncResult = new Commerce.VoidAsyncResult();
                                _this._voidPaymentAsync(request.correlationId, Commerce.Session.instance.cart.AmountDue, result.data, authorizationTenderLineToVoidOnFailure, errors).always(function () {
                                    asyncResult.reject(errors);
                                });
                                return asyncResult;
                            });
                        }
                        else {
                            Commerce.RetailLogger.posAddPreAuthorizedPaymentsAuthorizeCardTokenNotApproved(request.correlationId);
                            return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_UNABLE_AUTHORIZE_OR_REFUND)]);
                        }
                    });
                    return asyncQueue.run()
                        .fail(function (errors) {
                        Commerce.RetailLogger.posAddPreAuthorizedPaymentsFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                    }).map(function (result) {
                        Commerce.RetailLogger.posAddPreAuthorizedPaymentsSucceeded(request.correlationId);
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.AddPreAuthorizedPaymentsToCartClientResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                AddPreAuthorizedPaymentsToCartClientRequestHandler.prototype._updatePreprocessedTenderLineInCartAsync = function (tenderLine) {
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    return cartManager.updatePreprocessedTenderLineInCartAsync(tenderLine);
                };
                AddPreAuthorizedPaymentsToCartClientRequestHandler.prototype._authorizeCardTokenAsync = function (correlationId, tenderLine, amount) {
                    var cardTokenXml = tenderLine.CardToken;
                    var paymentServiceAccountId = tenderLine.CardPaymentAccountId;
                    var request = new Commerce.Peripherals.CardPaymentAuthorizeCardTokenPeripheralRequest(correlationId, amount, cardTokenXml, paymentServiceAccountId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : result.data.result
                        };
                    });
                };
                AddPreAuthorizedPaymentsToCartClientRequestHandler.prototype._voidPaymentAsync = function (correlationId, amountDue, paymentInfo, tenderLine, errors) {
                    var voidPaymentFailureMessage = Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED;
                    var request = new Payments.VoidPaymentClientRequest(correlationId, paymentInfo, tenderLine, amountDue, Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController, voidPaymentFailureMessage, errors);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                };
                AddPreAuthorizedPaymentsToCartClientRequestHandler.prototype._approvePartialPaymentAsync = function (correlationId, amountDue, paymentInfo, tenderLine) {
                    var request = new Payments.ApprovePartialPaymentClientRequest(correlationId, paymentInfo, tenderLine, amountDue, Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                };
                return AddPreAuthorizedPaymentsToCartClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AddPreAuthorizedPaymentsToCartClientRequestHandler = AddPreAuthorizedPaymentsToCartClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var Managers = Commerce.Model.Managers;
            var AddPreprocessedTenderLineToCartClientRequestHandler = (function (_super) {
                __extends(AddPreprocessedTenderLineToCartClientRequestHandler, _super);
                function AddPreprocessedTenderLineToCartClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AddPreprocessedTenderLineToCartClientRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.AddPreprocessedTenderLineToCartClientRequest;
                };
                AddPreprocessedTenderLineToCartClientRequestHandler.prototype.executeAsync = function (request) {
                    var tenderLineQueue = new Commerce.AsyncQueue();
                    tenderLineQueue.enqueue(function () {
                        var preTriggerOptions = { cart: Commerce.Session.instance.cart, tenderLine: request.tenderLine };
                        var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreAddTenderLine, preTriggerOptions);
                        return tenderLineQueue.cancelOn(preTriggerResult);
                    }).enqueue(function () {
                        var cartManager = Managers.Factory.getManager(Managers.ICartManagerName);
                        var reasonCodeResult = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ tenderLines: [request.tenderLine] }, function (c) { return cartManager.addPreprocessedTenderLineToCartAsync(c.tenderLines[0]); }).run();
                        return tenderLineQueue.cancelOn(reasonCodeResult);
                    });
                    return tenderLineQueue.run().getPromise()
                        .then(function (result) {
                        var cart = Commerce.Session.instance.cart;
                        if (Commerce.ArrayExtensions.hasElements(cart.TenderLines)) {
                            var tenderLine = cart.TenderLines[cart.TenderLines.length - 1];
                            Commerce.PaymentHelper.clearSensitiveDataOnTenderLine(tenderLine);
                        }
                        return Promise.resolve({
                            canceled: false,
                            data: new Commerce.AddPreprocessedTenderLineToCartClientResponse(Commerce.Session.instance.cart)
                        });
                    });
                };
                return AddPreprocessedTenderLineToCartClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AddPreprocessedTenderLineToCartClientRequestHandler = AddPreprocessedTenderLineToCartClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var ApprovePartialPaymentClientRequestHandler = (function (_super) {
                __extends(ApprovePartialPaymentClientRequestHandler, _super);
                function ApprovePartialPaymentClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ApprovePartialPaymentClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.ApprovePartialPaymentClientRequest;
                };
                ApprovePartialPaymentClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the ApprovePartialPaymentClientRequestHandler received an invalid request.");
                    }
                    Commerce.RetailLogger.posApprovePartialPaymentStarted(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType]);
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this._callApprovePartialAmountActivity(request.correlationId, request.authorizationPaymentInfo.ApprovedAmount, request.fullAmountDue, true));
                    }).enqueue(function (result) {
                        if (result.data) {
                            Commerce.RetailLogger.posApprovePartialPaymentApproved(request.correlationId);
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else {
                            Commerce.RetailLogger.posApprovePartialPaymentNotApproved(request.correlationId);
                            var voidPaymentFailureMessage = Commerce.ErrorTypeEnum.PAYMENT_PARTIAL_VOID_FAILED;
                            var voidPaymentRequest = new Payments.VoidPaymentClientRequest(request.correlationId, request.authorizationPaymentInfo, request.authorizationTenderLine, request.fullAmountDue, request.peripheralType, voidPaymentFailureMessage);
                            return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(voidPaymentRequest))
                                .recoverOnFailure(function () {
                                return Commerce.AsyncResult.createRejected(null);
                            }));
                        }
                    });
                    return asyncQueue.run()
                        .fail(function (errors) {
                        Commerce.RetailLogger.posApprovePartialPaymentFailed(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType], Commerce.ErrorHelper.serializeError(errors));
                    }).map(function (result) {
                        if (result.canceled) {
                            Commerce.RetailLogger.posApprovePartialPaymentCancelled(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType]);
                        }
                        else {
                            Commerce.RetailLogger.posApprovePartialPaymentSucceeded(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType]);
                        }
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.ApprovePartialPaymentClientResponse(null)
                        };
                    }).getPromise();
                };
                ApprovePartialPaymentClientRequestHandler.prototype._callApprovePartialAmountActivity = function (correlationId, amountAuthorized, amountRequested, retryOnFailure) {
                    var currencyCode = Commerce.ApplicationContext.Instance.channelConfiguration.Currency;
                    var approvePartialAmountActivityContext = {
                        amountAuthorized: amountAuthorized,
                        amountRequested: amountRequested,
                        amountAuthorizedCurrencyCode: currencyCode,
                        amountRequestedCurrencyCode: currencyCode,
                        correlationId: correlationId
                    };
                    var approvePartialAmountActivity = new Commerce.Activities.ApprovePartialAmountActivity(approvePartialAmountActivityContext);
                    return approvePartialAmountActivity.execute()
                        .map(function () {
                        return { canceled: false, data: approvePartialAmountActivity.response.isApproved };
                    });
                };
                return ApprovePartialPaymentClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ApprovePartialPaymentClientRequestHandler = ApprovePartialPaymentClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var AuthorizeCardTokenAndAddToCartClientRequestHandler = (function (_super) {
                __extends(AuthorizeCardTokenAndAddToCartClientRequestHandler, _super);
                function AuthorizeCardTokenAndAddToCartClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AuthorizeCardTokenAndAddToCartClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.AuthorizeCardTokenAndAddToCartClientRequest;
                };
                AuthorizeCardTokenAndAddToCartClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to AuthorizeCardTokenAndAddToCartClientRequestHandler execute: "
                            + "request cannot be null or undefined.");
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    var authorizePaymentInfo;
                    var amountToAuthorize = Commerce.CartHelper.getEstimatedRemainingBalance();
                    var newAuthorizationTenderLine = null;
                    var isAuthorizationVoidable = false;
                    asyncQueue.enqueue(function () {
                        Commerce.RetailLogger.posAuthorizeCardTokenStarted(request.correlationId, amountToAuthorize);
                        var authorizeCardTokenRequest = new Commerce.Peripherals.CardPaymentAuthorizeCardTokenPeripheralRequest(request.correlationId, amountToAuthorize, request.cardToken, request.paymentServiceAccountId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(authorizeCardTokenRequest)))
                            .done(function (result) {
                            if (result.canceled) {
                                Commerce.RetailLogger.posAuthorizeCardTokenCancelled(request.correlationId, amountToAuthorize);
                            }
                            else {
                                Commerce.RetailLogger.posAuthorizeCardTokenSucceeded(request.correlationId, amountToAuthorize);
                            }
                            authorizePaymentInfo = result.canceled ? null : result.data.result;
                        }).fail(function (errors) {
                            Commerce.RetailLogger.posAuthorizeCardTokenFailed(request.correlationId, amountToAuthorize, Commerce.ErrorHelper.serializeError(errors));
                        });
                    }).enqueue(function () {
                        if (!authorizePaymentInfo.IsApproved) {
                            Commerce.RetailLogger.posAuthorizeCardTokenNotApproved(request.correlationId);
                            return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_UNABLE_AUTHORIZE_OR_REFUND)]);
                        }
                        newAuthorizationTenderLine = {
                            CardToken: request.cardToken,
                            AuthorizedAmount: authorizePaymentInfo.ApprovedAmount,
                            Authorization: authorizePaymentInfo.PaymentSdkData,
                            Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            MaskedCardNumber: request.maskedCardNumber,
                            TenderTypeId: request.tenderTypeId,
                            ProcessingTypeValue: Commerce.Proxy.Entities.PaymentProcessingType.Deferred,
                            StatusValue: Commerce.Proxy.Entities.TenderLineStatus.PendingCommit,
                            IsVoidable: true,
                            CardProcessorStatusValue: Commerce.Proxy.Entities.CreditCardProcessorStatus.Approved
                        };
                        if (Commerce.ObjectExtensions.isNullOrUndefined(request.cardTypeId)) {
                            Commerce.RetailLogger.posAuthorizeCardTokenRequestCardTypeIdIsNullOrUndefined(request.correlationId);
                            isAuthorizationVoidable = true;
                            return asyncQueue.cancelOn(_this._getCardTypeAsync(request.correlationId, request.tenderTypeId, authorizePaymentInfo))
                                .done(function (result) {
                                if (!result.canceled) {
                                    newAuthorizationTenderLine.CardTypeId = result.data.TypeId;
                                    isAuthorizationVoidable = false;
                                }
                            }).recoverOnFailure(function (errors) {
                                var error = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_UNABLE_AUTHORIZE_OR_REFUND)];
                                Commerce.RetailLogger.posGettingCardTypedIdUsingMaskedCardNumberFailed(request.correlationId, Commerce.ErrorHelper.serializeError(error));
                                return Commerce.AsyncResult.createRejected(error);
                            });
                        }
                        else {
                            newAuthorizationTenderLine.CardTypeId = request.cardTypeId;
                            Commerce.RetailLogger.posAuthorizeCardTokenRequestCardTypeIdSetOnTenderLine(request.correlationId);
                            return Commerce.AsyncResult.createResolved();
                        }
                    }).enqueue(function () {
                        if (authorizePaymentInfo.IsApproved && authorizePaymentInfo.ApprovedAmount !== amountToAuthorize) {
                            return _this._approvePartialPaymentAsync(request.correlationId, amountToAuthorize, authorizePaymentInfo, newAuthorizationTenderLine);
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    }).enqueue(function () {
                        isAuthorizationVoidable = true;
                        var previousAuthorizedTenderLine = Commerce.ArrayExtensions.firstOrUndefined(Commerce.Session.instance.cart.TenderLines.filter(function (tenderLine) {
                            return tenderLine.AuthorizedAmount !== 0
                                && tenderLine.Amount === 0
                                && tenderLine.StatusValue !== Commerce.Proxy.Entities.TenderLineStatus.Voided;
                        }));
                        if (Commerce.CustomerOrderHelper.isCustomerOrderEdition(Commerce.Session.instance.cart) && !Commerce.ObjectExtensions.isNullOrUndefined(previousAuthorizedTenderLine)) {
                            Commerce.RetailLogger.posVoidPreviousAuthorizedTenderLineStarted(request.correlationId, previousAuthorizedTenderLine.PaymentRefRecId);
                            var voidOptions = {
                                tenderLines: [previousAuthorizedTenderLine],
                                autoForceVoid: true,
                                correlationId: request.correlationId
                            };
                            return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(Commerce.Proxy.Entities.RetailOperation.VoidPayment, voidOptions).done(function (result) {
                                if (result.canceled) {
                                    Commerce.RetailLogger.posVoidPreviousAuthorizedTenderLineCancelled(request.correlationId, previousAuthorizedTenderLine.PaymentRefRecId);
                                }
                                else {
                                    Commerce.RetailLogger.posVoidPreviousAuthorizedTenderLineSucceeded(request.correlationId, previousAuthorizedTenderLine.PaymentRefRecId);
                                }
                            }).fail(function (errors) {
                                Commerce.RetailLogger.posVoidPreviousAuthorizedTenderLineFailed(request.correlationId, previousAuthorizedTenderLine.PaymentRefRecId, Commerce.ErrorHelper.serializeError(errors));
                            }));
                        }
                        else {
                            Commerce.RetailLogger.posVoidPreviousAuthorizedTenderLineNotApplicable(request.correlationId);
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    }).enqueue(function () {
                        Commerce.RetailLogger.posAddAuthorizedDeferredTenderLineToCartStarted(request.correlationId);
                        var addTenderLineRequest = new Commerce.AddPreprocessedTenderLineToCartClientRequest(newAuthorizationTenderLine);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addTenderLineRequest)))
                            .done(function (result) {
                            if (result.canceled) {
                                Commerce.RetailLogger.posAddAuthorizedDeferredTenderLineToCartCancelled(request.correlationId);
                            }
                            else {
                                Commerce.RetailLogger.posAddAuthorizedDeferredTenderLineToCartSucceeded(request.correlationId);
                            }
                        }).fail(function (errors) {
                            Commerce.RetailLogger.posAddAuthorizedDeferredTenderLineToCartFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                        });
                    });
                    return asyncQueue.run()
                        .recoverOnFailure(function (errors) {
                        if (isAuthorizationVoidable) {
                            var asyncResult_8 = new Commerce.AsyncResult();
                            _this._voidPaymentAsync(request.correlationId, newAuthorizationTenderLine.AuthorizedAmount, authorizePaymentInfo, newAuthorizationTenderLine, errors).always(function () {
                                asyncResult_8.reject(errors);
                            });
                            return asyncResult_8;
                        }
                        else {
                            return Commerce.AsyncResult.createRejected(errors);
                        }
                    }).map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.AuthorizeCardTokenAndAddToCartClientResponse(Commerce.Session.instance.cart)
                        };
                    }).getPromise();
                };
                AuthorizeCardTokenAndAddToCartClientRequestHandler.prototype._getCardTypeAsync = function (correlationId, tenderTypeId, paymentInfo) {
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderTypeId);
                    var cardInfo = {
                        CardNumber: paymentInfo.CardNumberMasked,
                        CardTypeId: paymentInfo.CardType.toString()
                    };
                    Commerce.RetailLogger.posGettingCardTypedIdUsingMaskedCardNumberStarted(correlationId);
                    var request = new Payments.GetCardTypeClientRequest(correlationId, tenderType, paymentInfo.CardNumberMasked, cardInfo, true);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .map(function (result) {
                        Commerce.RetailLogger.posGettingCardTypedIdUsingMaskedCardNumberSucceeded(correlationId);
                        return { canceled: result.canceled, data: result.canceled ? null : result.data.result };
                    });
                };
                AuthorizeCardTokenAndAddToCartClientRequestHandler.prototype._voidPaymentAsync = function (correlationId, amountDue, paymentInfo, tenderLine, errors) {
                    var voidPaymentFailureMessage = Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED;
                    var request = new Payments.VoidPaymentClientRequest(correlationId, paymentInfo, tenderLine, amountDue, Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController, voidPaymentFailureMessage, errors);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                };
                AuthorizeCardTokenAndAddToCartClientRequestHandler.prototype._approvePartialPaymentAsync = function (correlationId, amountDue, paymentInfo, tenderLine) {
                    var request = new Payments.ApprovePartialPaymentClientRequest(correlationId, paymentInfo, tenderLine, amountDue, Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
                };
                return AuthorizeCardTokenAndAddToCartClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AuthorizeCardTokenAndAddToCartClientRequestHandler = AuthorizeCardTokenAndAddToCartClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var CheckForRecoveredPaymentTransactionClientRequestHandler = (function (_super) {
                __extends(CheckForRecoveredPaymentTransactionClientRequestHandler, _super);
                function CheckForRecoveredPaymentTransactionClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CheckForRecoveredPaymentTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CheckForRecoveredPaymentTransactionClientRequest;
                };
                CheckForRecoveredPaymentTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method of CheckForRecoveredPaymentTransactionClientRequestHandler received a null or undefined request.");
                    }
                    var validTransactionReferenceWasFoundInStorage = false;
                    var queue = new Commerce.AsyncQueue();
                    queue.enqueue(function () {
                        var transactionReferenceDataRaw = Commerce.Peripherals.HardwareStation.HardwareStationContext.getPaymentTransactionReferenceData();
                        var transactionReferenceData;
                        if (!Commerce.StringExtensions.isNullOrWhitespace(transactionReferenceDataRaw)) {
                            try {
                                transactionReferenceData = JSON.parse(transactionReferenceDataRaw);
                            }
                            catch (error) {
                                var formattedError = Commerce.ErrorHelper.serializeError(error);
                                Commerce.RetailLogger.posPaymentDeserializedTransactionReferenceMalformed(transactionReferenceDataRaw, formattedError, request.correlationId);
                            }
                            if (Commerce.ObjectExtensions.isNullOrUndefined(transactionReferenceData)) {
                                Commerce.Peripherals.HardwareStation.HardwareStationContext.clearPaymentTransactionReferenceData("the transaction reference data is malformed", null, request.correlationId);
                                validTransactionReferenceWasFoundInStorage = false;
                            }
                            else {
                                validTransactionReferenceWasFoundInStorage = true;
                            }
                        }
                        if (!validTransactionReferenceWasFoundInStorage) {
                            Commerce.RetailLogger.posPaymentTransactionReferenceDataNotFoundInStorage(request.correlationId);
                            if (request.allowedActions === Payments.TransactionReferenceAllowedActions.Any) {
                                return CheckForRecoveredPaymentTransactionClientRequestHandler._retrieveAndStorePaymentTransactionReferenceId(request.paymentAmount, request.correlationId);
                            }
                            else {
                                var emptyContainer = {
                                    completeId: null, foundTransaction: null,
                                    foundTransactionHasDifferentAmount: false
                                };
                                return Commerce.AsyncResult.createResolved(emptyContainer);
                            }
                        }
                        else {
                            Commerce.RetailLogger.posPaymentTransactionReferenceDataFoundInStorage(transactionReferenceDataRaw, request.correlationId);
                            return CheckForRecoveredPaymentTransactionClientRequestHandler._getTransactionByTransactionReference(transactionReferenceData, request.correlationId, 3);
                        }
                    }).enqueue(function (correlationContainer) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer.completeId) &&
                            Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer.foundTransaction) &&
                            request.allowedActions) {
                            return Commerce.AsyncResult.createResolved(correlationContainer);
                        }
                        if (Commerce.ObjectExtensions.isNullOrUndefined(correlationContainer.foundTransaction)) {
                            if (validTransactionReferenceWasFoundInStorage) {
                                var serializedCorrelationId = JSON.stringify(correlationContainer.completeId);
                                Commerce.RetailLogger.posPaymentReacquiringTransactionReference(serializedCorrelationId, request.correlationId);
                                return CheckForRecoveredPaymentTransactionClientRequestHandler._retrieveAndStorePaymentTransactionReferenceId(request.paymentAmount, request.correlationId);
                            }
                            return Commerce.AsyncResult.createResolved(correlationContainer);
                        }
                        else {
                            var serializedTransactionReference = JSON.stringify(correlationContainer.completeId);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(request.paymentAmount) && (correlationContainer.completeId.Amount !== request.paymentAmount)) {
                                return CheckForRecoveredPaymentTransactionClientRequestHandler._informAboutFoundDuplicateForDifferentAmount(request.paymentAmount, correlationContainer, serializedTransactionReference, request.correlationId)
                                    .map(function (value) {
                                    correlationContainer.foundTransactionHasDifferentAmount = true;
                                    return correlationContainer;
                                });
                            }
                            else {
                                return CheckForRecoveredPaymentTransactionClientRequestHandler._informAboutFoundDuplicateForTheSameAmount(correlationContainer, request.allowedActions, serializedTransactionReference, request.correlationId);
                            }
                        }
                    }).enqueue(function (correlationContainer) {
                        return Commerce.AsyncResult.createResolved(new Commerce.CheckForRecoveredPaymentTransactionClientResponse(correlationContainer));
                    });
                    return queue.run().getPromise();
                };
                CheckForRecoveredPaymentTransactionClientRequestHandler._retrieveAndStorePaymentTransactionReferenceId = function (paymentAmount, correlationId) {
                    var terminalId = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.REGISTER_ID_KEY);
                    var eftTerminalId = Commerce.ApplicationContext.Instance.activeEftTerminalId;
                    var getIdRequest = new Commerce.PaymentTerminalGetTransactionReferenceIdRequest(terminalId, eftTerminalId, correlationId);
                    var command = Commerce.PaymentHelper.isAuthorize(paymentAmount) ?
                        Commerce.PaymentHelper.DUPLICATE_PROTECTION_COMMAND_AUTHORIZE : Commerce.PaymentHelper.DUPLICATE_PROTECTION_COMMAND_REFUND;
                    var transactionReferenceData = {
                        Command: command,
                        IdFromConnector: null,
                        InitiatedDate: Commerce.DateExtensions.now,
                        UniqueTransactionId: Commerce.CartHelper.getInvoiceNumber(Commerce.Session.instance.cart.Id),
                        Amount: paymentAmount
                    };
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getIdRequest))
                        .fail(function (errors) {
                        var serializedErrors = Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors);
                        Commerce.RetailLogger.posPaymentFailedToRetrievePaymentTransactionReferenceId(correlationId, serializedErrors);
                    }).map(function (value) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(value.data.result)) {
                            Commerce.RetailLogger.posPaymentTransactionReferenceIdNotSupported(correlationId);
                        }
                        else {
                            Commerce.RetailLogger.posPaymentTransactionReferenceIdRetrievedFromConnector(value.data.result, correlationId);
                            transactionReferenceData.IdFromConnector = value.data.result;
                        }
                        var serializedTransactionReference = JSON.stringify(transactionReferenceData);
                        Commerce.Peripherals.HardwareStation.HardwareStationContext.setPaymentTransactionReferenceData(serializedTransactionReference);
                        Commerce.RetailLogger.posPaymentTransactionReferenceDataWasStored(serializedTransactionReference, correlationId);
                        var result = {
                            completeId: transactionReferenceData, foundTransaction: null, foundTransactionHasDifferentAmount: null
                        };
                        return result;
                    });
                };
                CheckForRecoveredPaymentTransactionClientRequestHandler._getTransactionByTransactionReference = function (paymentTransactionReferenceData, correlationId, retriesLeft) {
                    var getTransactionByCorrelationIdRequest = new Commerce.PaymentTerminalGetTransactionByTransactionReferenceRequest(paymentTransactionReferenceData, correlationId);
                    var queue = new Commerce.AsyncQueue();
                    return queue.enqueue(function () {
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getTransactionByCorrelationIdRequest));
                    }).enqueue(function (result) {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(result.data.result) ||
                            !Commerce.ArrayExtensions.hasElements(result.data.result.Errors)) {
                            var notFoundResult = {
                                completeId: paymentTransactionReferenceData,
                                foundTransaction: result.data.result,
                                foundTransactionHasDifferentAmount: null
                            };
                            return Commerce.AsyncResult.createResolved(notFoundResult);
                        }
                        else {
                            var predicate = function (paymentError) {
                                var parsedPaymentErrorCode = parseInt(paymentError.Code, 10);
                                switch (parsedPaymentErrorCode) {
                                    case Commerce.ErrorCode.RetrievalTransactionByReferenceInProgress:
                                        return true;
                                    case Commerce.ErrorCode.NoTransactionFoundByTransactionReference:
                                    case Commerce.ErrorCode.TransactionRetrievalByReferenceNotSupported:
                                    case Commerce.ErrorCode.DuplicateTransactionResultUnknown:
                                        return false;
                                    default:
                                        Commerce.RetailLogger.posPaymentStopRetrievingTransactionByReferenceDueToUnknownError(parsedPaymentErrorCode, retriesLeft, correlationId);
                                        return false;
                                }
                            };
                            if (retriesLeft > 0 && Commerce.ArrayExtensions.firstOrUndefined(result.data.result.Errors, predicate)) {
                                Commerce.RetailLogger.posPaymentRetryRetrievingTransactionByReferenceData(retriesLeft, correlationId);
                                return CheckForRecoveredPaymentTransactionClientRequestHandler._getTransactionByTransactionReference(paymentTransactionReferenceData, correlationId, --retriesLeft);
                            }
                            else {
                                var returnResult = {
                                    completeId: paymentTransactionReferenceData,
                                    foundTransaction: null,
                                    foundTransactionHasDifferentAmount: null
                                };
                                return Commerce.AsyncResult.createResolved(returnResult);
                            }
                        }
                    }).run().map(function (queueResult) {
                        return queueResult.data;
                    });
                };
                CheckForRecoveredPaymentTransactionClientRequestHandler._informAboutFoundDuplicateForTheSameAmount = function (correlationContainer, allowedActions, serializedTransactionReference, correlationId) {
                    var OK_RESULT_VALUE = "OK_RESULT";
                    var DELETE_RESULT_VALUE = "DELETE_RESULT";
                    var dialogRequest;
                    var messageText;
                    var isRemoveAvailable = false;
                    var okButton = {
                        id: Commerce.Activities.DisplayMessageOperationIds.OK,
                        label: Commerce.ViewModelAdapter.getResourceString("string_29072"),
                        isPrimary: true,
                        result: OK_RESULT_VALUE
                    };
                    switch (allowedActions) {
                        case Payments.TransactionReferenceAllowedActions.Remove:
                            messageText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29071"), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.foundTransaction.ApprovedAmount), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.completeId.Amount));
                            isRemoveAvailable = true;
                            break;
                        case Payments.TransactionReferenceAllowedActions.Read:
                            messageText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29068"), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.foundTransaction.ApprovedAmount), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.completeId.Amount));
                            break;
                        default:
                            messageText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29065"), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.foundTransaction.ApprovedAmount), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.completeId.Amount));
                            break;
                    }
                    Commerce.RetailLogger.posPaymentInformedUserRecoveredTransactionSameAmount(allowedActions.toString(), serializedTransactionReference, correlationId);
                    if (isRemoveAvailable) {
                        var removeButton = {
                            id: Commerce.Activities.DisplayMessageOperationIds.CANCEL,
                            label: Commerce.ViewModelAdapter.getResourceString("string_29073"),
                            isPrimary: false,
                            result: DELETE_RESULT_VALUE
                        };
                        dialogRequest = new Commerce.ShowMessageDialogClientRequest({
                            title: Commerce.ViewModelAdapter.getResourceString("string_29067"),
                            message: messageText,
                            showCloseX: false,
                            button1: okButton,
                            button2: removeButton
                        });
                    }
                    else {
                        okButton.label = Commerce.ViewModelAdapter.getResourceString("string_75");
                        dialogRequest = new Commerce.ShowMessageDialogClientRequest({
                            title: Commerce.ViewModelAdapter.getResourceString("string_29067"),
                            message: messageText,
                            showCloseX: false,
                            button1: okButton
                        });
                    }
                    var asyncResult = new Commerce.AsyncResult(null);
                    Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dialogRequest)).done(function (value) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(value.data) && value.data.result.dialogResult === DELETE_RESULT_VALUE) {
                            Commerce.Peripherals.HardwareStation.HardwareStationContext.clearPaymentTransactionReferenceData("user forced the deletion", null, correlationId);
                            correlationContainer.foundTransactionHasDifferentAmount = false;
                            correlationContainer.foundTransaction = null;
                            correlationContainer.completeId = null;
                        }
                        asyncResult.resolve(correlationContainer);
                    }).fail(function () {
                        asyncResult.resolve(correlationContainer);
                    });
                    return asyncResult;
                };
                CheckForRecoveredPaymentTransactionClientRequestHandler._informAboutFoundDuplicateForDifferentAmount = function (paymentAmount, correlationContainer, serializedTransactionReference, correlationId) {
                    var messageText = Commerce.StringExtensions.format(Commerce.ViewModelAdapter.getResourceString("string_29066"), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.foundTransaction.ApprovedAmount), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(correlationContainer.completeId.Amount), CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency(paymentAmount));
                    var messageActivity = new Commerce.Activities.DisplayPaymentMessageDialogActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_29067"),
                        messageText: messageText,
                        buttonText: Commerce.ViewModelAdapter.getResourceString("string_75")
                    });
                    Commerce.RetailLogger.posPaymentInformedUserRecoveredTransactionDifferentAmount(paymentAmount, serializedTransactionReference, correlationId);
                    var asyncResult = new Commerce.AsyncResult(null);
                    messageActivity.execute().always(function () {
                        asyncResult.resolve({ canceled: false });
                    });
                    return asyncResult;
                };
                CheckForRecoveredPaymentTransactionClientRequestHandler._formatCurrency = function (amount) {
                    var currency = Commerce.ApplicationContext.Instance.deviceConfiguration.Currency;
                    var formattedAmount = Commerce.NumberExtensions.formatCurrency(amount, currency);
                    return formattedAmount;
                };
                return CheckForRecoveredPaymentTransactionClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CheckForRecoveredPaymentTransactionClientRequestHandler = CheckForRecoveredPaymentTransactionClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var ClearMerchantInformationClientRequestHandler = (function (_super) {
                __extends(ClearMerchantInformationClientRequestHandler, _super);
                function ClearMerchantInformationClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ClearMerchantInformationClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.ClearMerchantInformationClientRequest;
                };
                ClearMerchantInformationClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to ClearMerchantInformationClientRequest execute: request cannot be null or undefined");
                    }
                    var paymentMerchantInfoRequest = {
                        HardwareProfileId: null,
                        PaymentMerchantInformation: Commerce.StringExtensions.EMPTY
                    };
                    return Commerce.Utilities.MerchantInformationHelper.saveMerchantInformationLocalAsync(paymentMerchantInfoRequest)
                        .map(function () {
                        var response = {
                            canceled: false,
                            data: new Payments.ClearMerchantInformationClientResponse(void 0)
                        };
                        return response;
                    }).recoverOnFailure(function (errors) {
                        if (Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED)) {
                            errors.splice(0, 1, new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_CLIENTBROKER_COMMUNICATION_ERROR.serverErrorCode));
                        }
                        return Commerce.VoidAsyncResult.createRejected(errors);
                    }).getPromise();
                };
                return ClearMerchantInformationClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ClearMerchantInformationClientRequestHandler = ClearMerchantInformationClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var CreatePreProcessedTenderLineClientRequestHandler = (function (_super) {
                __extends(CreatePreProcessedTenderLineClientRequestHandler, _super);
                function CreatePreProcessedTenderLineClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreatePreProcessedTenderLineClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.CreatePreProcessedTenderLineClientRequest;
                };
                CreatePreProcessedTenderLineClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the CreatePreProcessedTenderLineClientRequestHandler received a null or undefined request.");
                    }
                    var preProcessedTenderLine = {
                        Authorization: request.paymentInfo.PaymentSdkData,
                        CardTypeId: request.cardTypeId,
                        Currency: request.currencyCode,
                        MaskedCardNumber: request.paymentInfo.CardNumberMasked,
                        TenderTypeId: request.tenderType.TenderTypeId
                    };
                    if (request.isRefundOperation) {
                        preProcessedTenderLine.IsVoidable = true;
                        preProcessedTenderLine.Amount = request.paymentInfo.ApprovedAmount * -1;
                        preProcessedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.Committed;
                    }
                    else {
                        preProcessedTenderLine.CashBackAmount = request.paymentInfo.CashbackAmount;
                        preProcessedTenderLine.Amount = request.paymentInfo.ApprovedAmount;
                        preProcessedTenderLine.IsVoidable = true;
                        preProcessedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.PendingCommit;
                    }
                    if (request.tenderType.OperationId === Commerce.Operations.RetailOperation.PayGiftCertificate) {
                        preProcessedTenderLine.GiftCardId = request.paymentInfo.CardNumberMasked;
                    }
                    return Promise.resolve({ canceled: false, data: new Payments.CreatePreProcessedTenderLineClientResponse(preProcessedTenderLine) });
                };
                return CreatePreProcessedTenderLineClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CreatePreProcessedTenderLineClientRequestHandler = CreatePreProcessedTenderLineClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetAndUpdateTenderLineSignatureClientRequestHandler = (function (_super) {
                __extends(GetAndUpdateTenderLineSignatureClientRequestHandler, _super);
                function GetAndUpdateTenderLineSignatureClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetAndUpdateTenderLineSignatureClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetAndUpdateTenderLineSignatureClientRequest;
                };
                GetAndUpdateTenderLineSignatureClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the GetAndUpdateTenderLineSignatureClientRequestHandler received a null or undefined request.");
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        var getSignatureRequest = new Payments.GetSignatureClientRequest(request.correlationId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getSignatureRequest)));
                    }).enqueue(function (response) {
                        var signatureData = Commerce.StringExtensions.isNullOrWhitespace(response.data.result) ? Commerce.StringExtensions.EMPTY : response.data.result;
                        var updateTenderLineSignatureRequest = new Payments.UpdateTenderLineSignatureServiceRequest(request.correlationId, request.tenderLineId, signatureData);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateTenderLineSignatureRequest)));
                    });
                    return asyncQueue.run()
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.GetAndUpdateTenderLineSignatureClientResponse(result.data.cart)
                        };
                    }).getPromise();
                };
                return GetAndUpdateTenderLineSignatureClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetAndUpdateTenderLineSignatureClientRequestHandler = GetAndUpdateTenderLineSignatureClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var DEPOSIT_ONLY = "DepositOnly";
            var DEPOSIT_AND_AUTHORIZE = "DepositAndAuthorize";
            var GetAuthorizationOptionsClientRequestHandler = (function (_super) {
                __extends(GetAuthorizationOptionsClientRequestHandler, _super);
                function GetAuthorizationOptionsClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetAuthorizationOptionsClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetAuthorizationOptionsClientRequest;
                };
                GetAuthorizationOptionsClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the GetAuthorizationOptionsClientRequestHandler received an invalid request.");
                    }
                    Commerce.RetailLogger.posGetAuthorizationOptionsStarted(request.correlationId);
                    var cardTokenTenderLines = Commerce.Session.instance.cart.TenderLines.filter(function (tenderLine) {
                        return !Commerce.StringExtensions.isNullOrWhitespace(tenderLine.CardToken)
                            && tenderLine.StatusValue !== Commerce.Proxy.Entities.TenderLineStatus.Voided;
                    });
                    var asyncResult = new Commerce.AsyncResult();
                    if (Commerce.ArrayExtensions.hasElements(cardTokenTenderLines)
                        && Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()
                        && Commerce.ApplicationContext.Instance.channelConfiguration.EnableOmniChannelPayments) {
                        asyncResult = this._promptAuthorizationOptionsWithCardTokens(request.correlationId, cardTokenTenderLines);
                    }
                    else {
                        asyncResult = this._promptStandardAuthorizationOptions();
                    }
                    return asyncResult.map(function (result) {
                        if (result.canceled) {
                            Commerce.RetailLogger.posGetAuthorizationOptionsCancelled(request.correlationId);
                        }
                        else {
                            Commerce.RetailLogger.posGetAuthorizationOptionsSucceeded(request.correlationId, result.data.tokenize, Commerce.ObjectExtensions.isNullOrUndefined(result.data.tenderLineToAuthorize), Commerce.ObjectExtensions.isNullOrUndefined(result.data.tenderLineToAuthorize) ? null : result.data.tenderLineToAuthorize.PaymentRefRecId);
                        }
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.GetAuthorizationOptionsClientResponse(result.data)
                        };
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posGetAuthorizationOptionsFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                    }).getPromise();
                };
                GetAuthorizationOptionsClientRequestHandler.prototype._promptStandardAuthorizationOptions = function () {
                    var activity = new Commerce.Activities.SelectPaymentOptionActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_4313"),
                        message: Commerce.ViewModelAdapter.getResourceString("string_4314"),
                        paymentOptions: [
                            {
                                Action: DEPOSIT_ONLY,
                                DisplayText: Commerce.ViewModelAdapter.getResourceString("string_4316")
                            },
                            {
                                Action: DEPOSIT_AND_AUTHORIZE,
                                DisplayText: Commerce.ViewModelAdapter.getResourceString("string_4315")
                            }
                        ]
                    });
                    return activity.execute()
                        .map(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            var resultValue = void 0;
                            if (activity.response.selectedAction === DEPOSIT_ONLY
                                || activity.response.selectedAction === DEPOSIT_AND_AUTHORIZE) {
                                resultValue = activity.response.selectedAction;
                            }
                            return { canceled: false, data: { tokenize: resultValue === DEPOSIT_AND_AUTHORIZE } };
                        }
                        else {
                            return { canceled: true, data: null };
                        }
                    });
                };
                GetAuthorizationOptionsClientRequestHandler.prototype._promptAuthorizationOptionsWithCardTokens = function (correlationId, cardTokenTenderLines) {
                    var paymentOptions = [];
                    cardTokenTenderLines.forEach(function (tenderLine, index) {
                        var paymentOption = {
                            key: index.toString(),
                            primaryText: Commerce.ViewModelAdapter.getResourceString("string_3445"),
                            secondaryText: Commerce.PaymentHelper.getTruncatedCardNumber(tenderLine.MaskedCardNumber),
                            iconClass: "iconPaymentCard"
                        };
                        paymentOptions.push(paymentOption);
                    });
                    var useDifferentPaymentOption = {
                        key: "UseDifferentPayment",
                        primaryText: Commerce.ViewModelAdapter.getResourceString("string_3447"),
                        iconClass: "iconBulletedList"
                    };
                    paymentOptions.push(useDifferentPaymentOption);
                    var payLaterOption = {
                        key: "PayBalanceLater",
                        primaryText: Commerce.ViewModelAdapter.getResourceString("string_3448"),
                        iconClass: "iconRecent"
                    };
                    paymentOptions.push(payLaterOption);
                    var activity = new Commerce.Activities.GetPaymentOptionActivity({
                        title: Commerce.ViewModelAdapter.getResourceString("string_3449"),
                        description: Commerce.ViewModelAdapter.getResourceString("string_3450"),
                        paymentOptions: paymentOptions,
                        isCancelAllowed: true
                    });
                    return activity.execute()
                        .map(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            return { canceled: true, data: null };
                        }
                        else if (activity.response.paymentOption.key === useDifferentPaymentOption.key) {
                            return { canceled: false, data: { tokenize: true } };
                        }
                        else if (activity.response.paymentOption.key === payLaterOption.key) {
                            return { canceled: false, data: { tokenize: false } };
                        }
                        else {
                            var tenderLineIndex = parseInt(activity.response.paymentOption.key, 10);
                            if (tenderLineIndex < Commerce.Session.instance.cart.TenderLines.length) {
                                var tenderLine = Commerce.Session.instance.cart.TenderLines[tenderLineIndex];
                                return { canceled: false, data: { tokenize: false, tenderLineToAuthorize: tenderLine } };
                            }
                            else {
                                return { canceled: true, data: null };
                            }
                        }
                    });
                };
                return GetAuthorizationOptionsClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetAuthorizationOptionsClientRequestHandler = GetAuthorizationOptionsClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetCardPaymentAcceptPointServiceRequestHandler = (function (_super) {
                __extends(GetCardPaymentAcceptPointServiceRequestHandler, _super);
                function GetCardPaymentAcceptPointServiceRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetCardPaymentAcceptPointServiceRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetCardPaymentAcceptPointServiceRequest;
                };
                GetCardPaymentAcceptPointServiceRequestHandler.prototype.executeAsync = function (request) {
                    var asyncQueue = new Commerce.AsyncQueue().enqueue(function () {
                        var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                        return cartManager.getCardPaymentAcceptPoint(request.cardPaymentEnabled, request.cardTokenizationEnabled);
                    }).enqueue(function (result) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(result)
                            && !Commerce.StringExtensions.isNullOrWhitespace(result.AcceptPageUrl)
                            && !Commerce.StringExtensions.isNullOrWhitespace(result.MessageOrigin)) {
                            return Commerce.AsyncResult.createResolved(result);
                        }
                        else {
                            return Commerce.AsyncResult.createRejected([
                                new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOGETCARDPAYMENTACCEPTPOINT)
                            ]);
                        }
                    });
                    return asyncQueue.run().map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.GetCardPaymentAcceptPointServiceResponse(result.data)
                        };
                    }).recoverOnFailure(function (errors) {
                        if (errors[0].ErrorCode.toUpperCase() === Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICENOTSUPPORTED.serverErrorCode) {
                            errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_SUPPORTED_IN_OFFLINE_MODE_WHEN_HARDWARE_STATION_NOT_ACTIVE)];
                        }
                        return Commerce.AsyncResult.createRejected(errors);
                    }).getPromise();
                };
                return GetCardPaymentAcceptPointServiceRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetCardPaymentAcceptPointServiceRequestHandler = GetCardPaymentAcceptPointServiceRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetCardTypeClientRequestHandler = (function (_super) {
                __extends(GetCardTypeClientRequestHandler, _super);
                function GetCardTypeClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetCardTypeClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetCardTypeClientRequest;
                };
                GetCardTypeClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to GetCardTypeClientRequestHandler execute: request cannot be null or undefined.");
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    Commerce.RetailLogger.posCardPaymentGetCardTypeStarted(request.correlationId);
                    asyncQueue.enqueue(function () {
                        var getPaymentCardTypeRequest = new Commerce.GetPaymentCardTypeByBinRangeClientRequest(request.cardNumber, request.isSwipe, request.cardInfo, null, request.correlationId);
                        var asyncResult = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getPaymentCardTypeRequest))
                            .map(function (result) {
                            return { canceled: result.canceled, data: result.data.result };
                        });
                        return asyncQueue.cancelOn(asyncResult);
                    }).enqueue(function (cardTypeResult) {
                        var filteredCardTypes = cardTypeResult.data;
                        if (request.tenderType.OperationId === Commerce.Operations.RetailOperation.PayGiftCertificate) {
                            return _this._filterByGiftCardType(filteredCardTypes, request.tenderType);
                        }
                        else {
                            return asyncQueue.cancelOn(_this._filterByUserSelection(filteredCardTypes, request.correlationId))
                                .map(function (result) {
                                return result.data;
                            });
                        }
                    });
                    return asyncQueue.run()
                        .fail(function (errors) {
                        Commerce.RetailLogger.posCardPaymentGetCardTypeFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                    }).map(function (result) {
                        if (!result.canceled) {
                            Commerce.RetailLogger.posCardPaymentGetCardTypeSucceeded(request.correlationId, result.data.TypeId);
                        }
                        else {
                            Commerce.RetailLogger.posCardPaymentGetCardTypeCancelled(request.correlationId);
                        }
                        var response = {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.GetCardTypeClientResponse(result.data)
                        };
                        return response;
                    }).getPromise();
                };
                GetCardTypeClientRequestHandler.prototype._filterByGiftCardType = function (cardTypes, tenderType) {
                    var _this = this;
                    var giftCardType = Commerce.ArrayExtensions.firstOrUndefined(cardTypes, function (cardType) {
                        var isGiftCardTypeVal = cardType.CardTypeValue === Commerce.Proxy.Entities.CardType.GiftCard;
                        var isSameTenderType = Commerce.StringExtensions.compare(cardType.PaymentMethodId, tenderType.TenderTypeId, true) === 0;
                        return isGiftCardTypeVal && isSameTenderType;
                    });
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(giftCardType)) {
                        return Commerce.AsyncResult.createResolved(giftCardType);
                    }
                    else {
                        return Commerce.ApplicationContext.Instance.cardTypesAsync.value
                            .map(function (cardTypes) {
                            var giftCardType = Commerce.ArrayExtensions.firstOrUndefined(cardTypes, function (cardType) {
                                var isGiftCardTypeVal = cardType.CardTypeValue === Commerce.Proxy.Entities.CardType.GiftCard;
                                var isSameTenderType = Commerce.StringExtensions.compare(cardType.PaymentMethodId, tenderType.TenderTypeId, true) === 0;
                                return isGiftCardTypeVal && isSameTenderType;
                            });
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(giftCardType)) {
                                return giftCardType;
                            }
                            else {
                                return _this._createUnknownCardInfo();
                            }
                        }).recoverOnFailure(function (errors) {
                            var unknownCardTypeInfo = _this._createUnknownCardInfo();
                            return Commerce.AsyncResult.createResolved(unknownCardTypeInfo);
                        });
                    }
                };
                GetCardTypeClientRequestHandler.prototype._filterByUserSelection = function (cardTypes, correlationId) {
                    if (!Commerce.ArrayExtensions.hasElements(cardTypes)) {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_CARD_NOT_SUPPORTED)]);
                    }
                    else if (cardTypes.length === 1) {
                        return Commerce.AsyncResult.createResolved({ canceled: false, data: cardTypes[0] });
                    }
                    else {
                        var selectCardTypeRequest = new Payments.SelectCardTypeClientRequest(correlationId, cardTypes);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(selectCardTypeRequest))
                            .map(function (result) {
                            return {
                                canceled: result.canceled,
                                data: result.data.result
                            };
                        });
                    }
                };
                GetCardTypeClientRequestHandler.prototype._createUnknownCardInfo = function () {
                    var cardTypeInfo = {
                        RecordId: 0,
                        TypeId: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                        Name: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                        CardTypeValue: Commerce.Proxy.Entities.CardType.Unknown,
                        Issuer: Commerce.Proxy.Entities.CardType[Commerce.Proxy.Entities.CardType.Unknown].toUpperCase(),
                        NumberFrom: "0",
                        NumberTo: "0",
                        CashBackLimit: 0,
                        AllowManualInput: false,
                        CheckModulus: false,
                        ExtensionProperties: []
                    };
                    return cardTypeInfo;
                };
                return GetCardTypeClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetCardTypeClientRequestHandler = GetCardTypeClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetCurrencyAmountsClientRequestHandler = (function (_super) {
                __extends(GetCurrencyAmountsClientRequestHandler, _super);
                function GetCurrencyAmountsClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetCurrencyAmountsClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetCurrencyAmountsClientRequest;
                };
                GetCurrencyAmountsClientRequestHandler.prototype.executeAsync = function (request) {
                    Commerce.RetailLogger.posGetCurrencyAmountsStarted(request.correlationId, request.amount, request.retrieveForAllCurrencies);
                    return this._getCurrencyAmounts(request.amount, request.retrieveForAllCurrencies)
                        .done(function (result) {
                        Commerce.RetailLogger.posGetCurrencyAmountsSucceeded(request.correlationId, request.amount, request.retrieveForAllCurrencies);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posGetCurrencyAmountsFailed(request.correlationId, request.amount, request.retrieveForAllCurrencies, Commerce.ErrorHelper.serializeError(errors));
                    }).map(function (result) {
                        return {
                            canceled: false,
                            data: new Payments.GetCurrencyAmountsClientResponse(result)
                        };
                    }).getPromise();
                };
                GetCurrencyAmountsClientRequestHandler.prototype._getCurrencyAmounts = function (amount, allCurrencies) {
                    if (!allCurrencies) {
                        var currencyAmount = {
                            CurrencyCode: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            ConvertedAmount: amount,
                            RoundedConvertedAmount: amount
                        };
                        return Commerce.AsyncResult.createResolved([currencyAmount]);
                    }
                    else {
                        var paymentManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IPaymentManagerName);
                        return paymentManager.getCurrenciesAmount(Commerce.ApplicationContext.Instance.deviceConfiguration.Currency, amount);
                    }
                };
                return GetCurrencyAmountsClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetCurrencyAmountsClientRequestHandler = GetCurrencyAmountsClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetDenominationListClientRequestHandler = (function (_super) {
                __extends(GetDenominationListClientRequestHandler, _super);
                function GetDenominationListClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetDenominationListClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetDenominationListClientRequest;
                };
                GetDenominationListClientRequestHandler.prototype.executeAsync = function (request) {
                    Commerce.RetailLogger.posGetCurrencyDenominationListStarted(request.correlationId, request.currencyAmount.CurrencyCode, request.currencyAmount.ConvertedAmount);
                    return this._getDenominationList(request.currencyAmount.CurrencyCode, request.currencyAmount.ConvertedAmount)
                        .done(function (result) {
                        Commerce.RetailLogger.posGetCurrencyDenominationListSucceeded(request.correlationId, request.currencyAmount.CurrencyCode, request.currencyAmount.ConvertedAmount);
                    }).fail(function (errors) {
                        Commerce.RetailLogger.posGetCurrencyDenominationListFailed(request.correlationId, request.currencyAmount.CurrencyCode, request.currencyAmount.ConvertedAmount, Commerce.ErrorHelper.serializeError(errors));
                    }).map(function (result) {
                        return {
                            canceled: false,
                            data: new Payments.GetDenominationListClientResponse(result)
                        };
                    }).getPromise();
                };
                GetDenominationListClientRequestHandler.prototype._getDenominationList = function (currencyCode, amount) {
                    return Commerce.ApplicationContext.Instance.cashDeclarationsMapAsync.value
                        .map(function (cashDeclarationDictionary) {
                        var denominations = [];
                        if (cashDeclarationDictionary.hasItem(currencyCode) && (amount >= 0)) {
                            denominations = cashDeclarationDictionary.getItem(currencyCode);
                        }
                        if (Commerce.ArrayExtensions.hasElements(denominations)) {
                            denominations = denominations.filter(function (value) {
                                return value.CashTypeValue === Commerce.Proxy.Entities.CashType.Note;
                            });
                            if (Commerce.ApplicationContext.Instance.deviceConfiguration.DenominationsToDisplayValue
                                === Commerce.Proxy.Entities.RetailDenominationsToDisplay.GreaterOrEqualToAmountDue) {
                                denominations = denominations.filter(function (value) {
                                    return value.Amount >= amount;
                                });
                            }
                            denominations.reverse();
                            denominations =
                                denominations.filter(function (value, index, array) {
                                    if (index !== 0) {
                                        return value.Amount !== array[index - 1].Amount;
                                    }
                                    return true;
                                });
                        }
                        return denominations;
                    });
                };
                return GetDenominationListClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetDenominationListClientRequestHandler = GetDenominationListClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetLoyaltyCardClientRequestHandler = (function (_super) {
                __extends(GetLoyaltyCardClientRequestHandler, _super);
                function GetLoyaltyCardClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetLoyaltyCardClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetLoyaltyCardClientRequest;
                };
                GetLoyaltyCardClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to GetLoyaltyCardClientRequestHandler execute: request cannot be null or undefined");
                    }
                    var loyaltyCardIdResponse;
                    Commerce.RetailLogger.posGetLoyaltyCardRequestStarted(request.correlationId);
                    var activity = new Commerce.Activities.GetLoyaltyCardActivity({
                        defaultLoyaltyCardId: request.defaultLoyaltyCardId
                    });
                    activity.responseHandler = function (response) {
                        var loyaltyCardId = Commerce.ObjectExtensions.isNullOrUndefined(response)
                            ? null
                            : response.loyaltyCardId;
                        if (!Commerce.StringExtensions.isNullOrWhitespace(loyaltyCardId)) {
                            loyaltyCardIdResponse = loyaltyCardId;
                        }
                        return Commerce.VoidAsyncResult.createResolved();
                    };
                    return activity.execute()
                        .map(function () {
                        Commerce.RetailLogger.posGetLoyaltyCardRequestSucceeded(request.correlationId);
                        var response = {
                            canceled: Commerce.ObjectExtensions.isNullOrUndefined(loyaltyCardIdResponse),
                            data: Commerce.ObjectExtensions.isNullOrUndefined(loyaltyCardIdResponse)
                                ? null
                                : new Payments.GetLoyaltyCardClientResponse({ loyaltyCardId: loyaltyCardIdResponse })
                        };
                        return response;
                    })
                        .fail(function (errors) {
                        Commerce.RetailLogger.posGetLoyaltyCardRequestFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                    }).getPromise();
                };
                return GetLoyaltyCardClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetLoyaltyCardClientRequestHandler = GetLoyaltyCardClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetPaymentCardTypeByBinRangeClientRequestHandler = (function (_super) {
                __extends(GetPaymentCardTypeByBinRangeClientRequestHandler, _super);
                function GetPaymentCardTypeByBinRangeClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetPaymentCardTypeByBinRangeClientRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.GetPaymentCardTypeByBinRangeClientRequest;
                };
                GetPaymentCardTypeByBinRangeClientRequestHandler.prototype.executeAsync = function (request) {
                    var isSwipe = request.isSwipe;
                    var cardInfo = request.cardInfo;
                    var paymentCardNumber = request.paymentCardNumber;
                    var cardTypeIdString = cardInfo ? cardInfo.CardTypeId : null;
                    var cardTypeId = parseInt(cardTypeIdString, 10);
                    var isCreditCard = Commerce.PaymentHelper.isCreditCard(cardTypeId);
                    var isDebitCard = Commerce.PaymentHelper.isDebitCard(cardTypeId);
                    var filteredCardTypes = [];
                    if (!isSwipe) {
                        if (isDebitCard) {
                            return Promise.resolve({
                                canceled: false,
                                data: new Commerce.GetPaymentCardTypeByBinRangeClientResponse(filteredCardTypes)
                            });
                        }
                        isCreditCard = true;
                    }
                    return Commerce.ApplicationContext.Instance.cardTypesAsync.value.getPromise().then(function (cardTypes) {
                        for (var i = 0; i < cardTypes.length; i++) {
                            var cardType = cardTypes[i];
                            if (!isSwipe && !cardType.AllowManualInput) {
                                continue;
                            }
                            if ((isCreditCard && !Commerce.PaymentHelper.isCreditCard(cardType.CardTypeValue))
                                || (isDebitCard && !Commerce.PaymentHelper.isDebitCard(cardType.CardTypeValue))) {
                                continue;
                            }
                            if (Commerce.PaymentHelper.isAssociatedCardType(cardType, paymentCardNumber)) {
                                filteredCardTypes.push(cardType);
                            }
                        }
                        return Promise.resolve({
                            canceled: false,
                            data: new Commerce.GetPaymentCardTypeByBinRangeClientResponse(filteredCardTypes)
                        });
                    });
                };
                return GetPaymentCardTypeByBinRangeClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetPaymentCardTypeByBinRangeClientRequestHandler = GetPaymentCardTypeByBinRangeClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SaveMerchantInformationClientRequestHandler = (function (_super) {
                __extends(SaveMerchantInformationClientRequestHandler, _super);
                function SaveMerchantInformationClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SaveMerchantInformationClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.SaveMerchantInformationClientRequest;
                };
                SaveMerchantInformationClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to SaveMerchantInformationClientRequestHandler execute: request cannot be null or undefined");
                    }
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request.hardwareProfile) ||
                        request.hardwareProfile.EftTypeId !== 2 ||
                        !(Commerce.Host.instance.application.getApplicationType() === Commerce.Proxy.Entities.ApplicationTypeEnum.ModernPOSAndroid ||
                            Commerce.Host.instance.application.getApplicationType() === Commerce.Proxy.Entities.ApplicationTypeEnum.MposForWindows)) {
                        return Promise.resolve({
                            canceled: false,
                            data: new Payments.SaveMerchantInformationClientResponse(void 0)
                        });
                    }
                    var paymentMerchantInfoAsyncQueue = new Commerce.AsyncQueue();
                    var hardwareProfileId = request.hardwareProfile.ProfileId;
                    var correlationId = request.correlationId;
                    var asyncQueue = paymentMerchantInfoAsyncQueue.enqueue(function () {
                        return Commerce.Utilities.MerchantInformationHelper.merchantInformationLocalExistsAsync()
                            .map(function (result) {
                            var localMerchantPropertiesHash = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.PAYMENT_MERCHANT_PROPERTIES_HASH_VALUE);
                            localMerchantPropertiesHash = Commerce.StringExtensions.isNullOrWhitespace(localMerchantPropertiesHash) || !result ?
                                Commerce.StringExtensions.EMPTY : localMerchantPropertiesHash;
                            Commerce.RetailLogger.activitiesSaveMerchantInformationCurrentState(hardwareProfileId, localMerchantPropertiesHash, result, correlationId);
                            return localMerchantPropertiesHash;
                        })
                            .recoverOnFailure(function (errors) {
                            if (Commerce.ArrayExtensions.hasElements(errors) && errors[0].ErrorCode.toUpperCase() ===
                                Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED.toUpperCase()) {
                                errors.splice(0, 1, new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_CLIENTBROKER_COMMUNICATION_ERROR.serverErrorCode));
                            }
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        });
                    }).enqueue(function (localMerchantPropertiesHash) {
                        var channelManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IChannelManagerName);
                        Commerce.RetailLogger.activitiesSaveMerchantInformationRequestingFromServer(hardwareProfileId, localMerchantPropertiesHash, correlationId);
                        return channelManager.getPaymentPropertiesIfModifiedAsync(hardwareProfileId, localMerchantPropertiesHash)
                            .recoverOnFailure(function (errors) {
                            var isCommunicationExceptionBoolean = _this._isCommunicationException(errors);
                            if (isCommunicationExceptionBoolean && !Commerce.StringExtensions.isNullOrWhitespace(localMerchantPropertiesHash)) {
                                Commerce.RetailLogger.activitiesSaveMerchantInformationFailedWithCommunicationException(hardwareProfileId, localMerchantPropertiesHash, correlationId);
                                var paymentInformation = {
                                    PaymentConnectorPropertiesXml: Commerce.StringExtensions.EMPTY,
                                    MerchantPropertiesHashValue: Commerce.StringExtensions.EMPTY
                                };
                                return Commerce.AsyncResult.createResolved(paymentInformation);
                            }
                            Commerce.RetailLogger.activitiesSaveMerchantInformationDownloadFailed(hardwareProfileId, localMerchantPropertiesHash, correlationId);
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        });
                    }).enqueue(function (paymentMerchantInformationFromHQ) {
                        var remoteMerchantPropertiesHash = paymentMerchantInformationFromHQ.MerchantPropertiesHashValue;
                        var paymentConnectorPropertiesXml = paymentMerchantInformationFromHQ.PaymentConnectorPropertiesXml;
                        if (Commerce.StringExtensions.isNullOrWhitespace(paymentConnectorPropertiesXml) &&
                            Commerce.StringExtensions.isNullOrWhitespace(remoteMerchantPropertiesHash)) {
                            Commerce.RetailLogger.activitiesSaveMerchantInformationRequestedFromServerNotChanged(hardwareProfileId, correlationId);
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else if (Commerce.StringExtensions.isNullOrWhitespace(paymentConnectorPropertiesXml) &&
                            !Commerce.StringExtensions.isNullOrWhitespace(remoteMerchantPropertiesHash)) {
                            Commerce.RetailLogger.activitiesSaveMerchantInformationRequestedFromServerNotValid(hardwareProfileId, remoteMerchantPropertiesHash, correlationId);
                            var merchantInfoValidationError = new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_INVALIDMERCHANTPROPERTY, false);
                            return Commerce.VoidAsyncResult.createRejected([merchantInfoValidationError]);
                        }
                        Commerce.RetailLogger.activitiesSaveMerchantInformationRequestedFromServerChanged(hardwareProfileId, remoteMerchantPropertiesHash, correlationId);
                        if (!Commerce.StringExtensions.isNullOrWhitespace(remoteMerchantPropertiesHash)) {
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.PAYMENT_MERCHANT_PROPERTIES_HASH_VALUE, remoteMerchantPropertiesHash);
                        }
                        var paymentMerchantInfoRequest = {
                            HardwareProfileId: hardwareProfileId,
                            PaymentMerchantInformation: paymentConnectorPropertiesXml
                        };
                        return Commerce.Utilities.MerchantInformationHelper.saveMerchantInformationLocalAsync(paymentMerchantInfoRequest, hardwareProfileId)
                            .recoverOnFailure(function (errors) {
                            if (Commerce.ArrayExtensions.hasElements(errors) && errors[0].ErrorCode === Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_COMMUNICATION_FAILED) {
                                errors.splice(0, 1, new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_POS_CLIENTBROKER_COMMUNICATION_ERROR.serverErrorCode));
                            }
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        });
                    });
                    return asyncQueue.run().getPromise();
                };
                SaveMerchantInformationClientRequestHandler.prototype._isCommunicationException = function (errors) {
                    var isCommunicationFailure = Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERCOMMUNICATIONFAILURE.serverErrorCode);
                    var isTimeOutError = Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TRANSACTIONSERVICETIMEOUT.serverErrorCode);
                    var isCommunicationException = isCommunicationFailure || isTimeOutError;
                    return isCommunicationException;
                };
                return SaveMerchantInformationClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SaveMerchantInformationClientRequestHandler = SaveMerchantInformationClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var SelectCardTypeClientRequestHandler = (function (_super) {
                __extends(SelectCardTypeClientRequestHandler, _super);
                function SelectCardTypeClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SelectCardTypeClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.SelectCardTypeClientRequest;
                };
                SelectCardTypeClientRequestHandler.prototype.executeAsync = function (request) {
                    Commerce.RetailLogger.posSelectCardTypeStarted(request.correlationId);
                    var activity = new Commerce.Activities.SelectCardTypeActivity({
                        cardTypes: request.cardTypes
                    });
                    return activity.execute()
                        .fail(function (errors) {
                        Commerce.RetailLogger.posSelectCardTypeFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                    })
                        .map(function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            Commerce.RetailLogger.posSelectCardTypeCancelled(request.correlationId);
                            return {
                                canceled: true,
                                data: undefined
                            };
                        }
                        else {
                            Commerce.RetailLogger.posSelectCardTypeSucceeded(request.correlationId, activity.response.cardType.TypeId);
                            return {
                                canceled: false,
                                data: new Payments.SelectCardTypeClientResponse(activity.response.cardType)
                            };
                        }
                    }).getPromise();
                };
                return SelectCardTypeClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SelectCardTypeClientRequestHandler = SelectCardTypeClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var SelectLinkedRefundClientRequestHandler = (function (_super) {
                __extends(SelectLinkedRefundClientRequestHandler, _super);
                function SelectLinkedRefundClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SelectLinkedRefundClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.SelectLinkedRefundClientRequest;
                };
                SelectLinkedRefundClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the SelectLinkedRefundClientRequestHandler received an invalid request.");
                    }
                    var activity = new Commerce.Activities.SelectLinkedRefundActivity({
                        amountDue: Commerce.Session.instance.cart.AmountDue,
                        tenderType: request.tenderType,
                        tenderLines: this._getCartTenderLines()
                    });
                    return activity.execute().map(function () {
                        var wasCanceled = Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                        return {
                            canceled: wasCanceled,
                            data: wasCanceled ? null : new Payments.SelectLinkedRefundClientResponse(activity.response.selectedTenderLine)
                        };
                    }).getPromise();
                };
                SelectLinkedRefundClientRequestHandler.prototype._getCartTenderLines = function () {
                    var tenderLines = [];
                    return tenderLines;
                };
                return SelectLinkedRefundClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.SelectLinkedRefundClientRequestHandler = SelectLinkedRefundClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var TokenizePaymentCardClientRequestHandler = (function (_super) {
                __extends(TokenizePaymentCardClientRequestHandler, _super);
                function TokenizePaymentCardClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                TokenizePaymentCardClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.TokenizePaymentCardClientRequest;
                };
                TokenizePaymentCardClientRequestHandler.prototype.executeAsync = function (request) {
                    var cancelableAsyncQueue = new Commerce.AsyncQueue();
                    var asyncQueue = cancelableAsyncQueue.enqueue(function () {
                        var tenderTypes = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypesForSalesTransactions()
                            .filter(function (tenderType) { return tenderType.OperationId === Commerce.Operations.RetailOperation.PayCard; });
                        var executableTenderTypes = Commerce.TenderTypeHelper.getExecutableTenderTypes(tenderTypes);
                        executableTenderTypes = Commerce.ArrayExtensions.hasElements(executableTenderTypes) ? executableTenderTypes : tenderTypes;
                        var activity = new Commerce.Activities.SelectTenderTypeActivity({
                            title: Commerce.ViewModelAdapter.getResourceString("string_4319"),
                            message: Commerce.ViewModelAdapter.getResourceString("string_4320"),
                            tenderTypes: executableTenderTypes
                        });
                        return activity.execute().map(function () {
                            var selectTenderTypeCanceled = Commerce.ObjectExtensions.isNullOrUndefined(activity.response)
                                || Commerce.ObjectExtensions.isNullOrUndefined(activity.response.tenderType);
                            if (selectTenderTypeCanceled) {
                                cancelableAsyncQueue.cancel();
                                return null;
                            }
                            else {
                                return activity.response.tenderType;
                            }
                        });
                    }).enqueue(function (tenderType) {
                        var payCardOperationOptions = {
                            correlationId: request.correlationId,
                            tokenizeCard: true,
                            tenderType: tenderType,
                            paymentCardInfo: undefined,
                            paymentCardSource: undefined
                        };
                        return cancelableAsyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.PayCard, payCardOperationOptions)).map(function (result) {
                            return result.data;
                        });
                    });
                    return asyncQueue.run()
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.TokenizePaymentCardClientResponse(result.data)
                        };
                    }).getPromise();
                };
                return TokenizePaymentCardClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.TokenizePaymentCardClientRequestHandler = TokenizePaymentCardClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var UpdateTenderLineSignatureServiceRequestHandler = (function (_super) {
                __extends(UpdateTenderLineSignatureServiceRequestHandler, _super);
                function UpdateTenderLineSignatureServiceRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                UpdateTenderLineSignatureServiceRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.UpdateTenderLineSignatureServiceRequest;
                };
                UpdateTenderLineSignatureServiceRequestHandler.prototype.executeAsync = function (request) {
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    return cartManager.updateTenderLineSignature(request.tenderLineId, request.signatureData)
                        .getPromise()
                        .then(function () {
                        return Promise.resolve({ canceled: false, data: new Payments.UpdateTenderLineSignatureServiceResponse(Commerce.Session.instance.cart) });
                    });
                };
                return UpdateTenderLineSignatureServiceRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.UpdateTenderLineSignatureServiceRequestHandler = UpdateTenderLineSignatureServiceRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var ValidateAndUpdateTenderLineSignatureClientRequestHandler = (function (_super) {
                __extends(ValidateAndUpdateTenderLineSignatureClientRequestHandler, _super);
                function ValidateAndUpdateTenderLineSignatureClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ValidateAndUpdateTenderLineSignatureClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.ValidateAndUpdateTenderLineSignatureClientRequest;
                };
                ValidateAndUpdateTenderLineSignatureClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the ValidateAndUpdateTenderLineSignatureClientRequestHandler received an invalid request.");
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        Commerce.RetailLogger.posIsValidatingSignatureFromExternalSource(request.correlationId);
                        var validateSignatureRequest = new Payments.ValidateSignatureClientRequest(request.correlationId, false, request.signatureData);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(validateSignatureRequest))
                            .map(function (result) {
                            var didValidationFail = result.canceled ? true : !result.data.result;
                            return {
                                canceled: didValidationFail,
                                data: didValidationFail ? null : new Payments.ValidateSignatureClientResponse(true)
                            };
                        }));
                    }).enqueue(function (response) {
                        var updateTenderLineSignatureRequest = new Payments.UpdateTenderLineSignatureServiceRequest(request.correlationId, request.tenderLineId, request.signatureData);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateTenderLineSignatureRequest)));
                    });
                    return asyncQueue.run()
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.ValidateAndUpdateTenderLineSignatureClientResponse(result.data.cart)
                        };
                    }).getPromise();
                };
                return ValidateAndUpdateTenderLineSignatureClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ValidateAndUpdateTenderLineSignatureClientRequestHandler = ValidateAndUpdateTenderLineSignatureClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var VoidPaymentClientRequestHandler = (function (_super) {
                __extends(VoidPaymentClientRequestHandler, _super);
                function VoidPaymentClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                VoidPaymentClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.VoidPaymentClientRequest;
                };
                VoidPaymentClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the VoidPaymentClientRequestHandler received an invalid request.");
                    }
                    Commerce.RetailLogger.posVoidPaymentStarted(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType]);
                    return this._voidPayment(request.correlationId, request.peripheralType, request.paymentErrors, request.paymentAmount, request.authorizationPaymentInfo, request.authorizationTenderLine, request.voidFailureMessageId)
                        .fail(function (errors) {
                        Commerce.RetailLogger.posVoidPaymentFailed(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType], Commerce.ObjectExtensions.isNullOrUndefined(errors) ? Commerce.StringExtensions.EMPTY : Commerce.ErrorHelper.serializeError(errors));
                    }).map(function (result) {
                        if (result.canceled) {
                            Commerce.RetailLogger.posVoidPaymentCancelled(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType]);
                        }
                        else {
                            Commerce.RetailLogger.posVoidPaymentSucceeded(request.correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[request.peripheralType]);
                        }
                        return { canceled: result.canceled, data: result.canceled ? null : new Payments.VoidPaymentClientResponse(null) };
                    }).getPromise();
                };
                VoidPaymentClientRequestHandler.prototype._voidPayment = function (correlationId, peripheralType, paymentErrors, paymentAmount, paymentInfo, preProcessedTenderLine, voidFailureMessageId) {
                    var _this = this;
                    var asyncQueue = new Commerce.AsyncQueue();
                    var preventRecoveryOnFailure = false;
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(_this._executeVoidPaymentOnPeripheralAsync(correlationId, peripheralType, paymentInfo, preProcessedTenderLine))
                            .map(function (result) {
                            return result.data;
                        });
                    }).enqueue(function (voidPaymentInfo) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(voidPaymentInfo) && voidPaymentInfo.IsApproved) {
                            if (Commerce.ErrorHandler.hasInvalidCartVersionError(paymentErrors)) {
                                Commerce.RetailLogger.posVoidPaymentInvalidCardVersion(correlationId);
                                preventRecoveryOnFailure = true;
                                return Commerce.VoidAsyncResult.createRejected(paymentErrors);
                            }
                            else {
                                Commerce.RetailLogger.posVoidPaymentAddVoidedTenderLineStarted(correlationId);
                                var voidedPreprocessedTenderLine = preProcessedTenderLine;
                                voidedPreprocessedTenderLine.StatusValue = Commerce.Proxy.Entities.TenderLineStatus.Voided;
                                var addVoidedTenderLineToCartRequest = new Commerce.AddPreprocessedTenderLineToCartClientRequest(voidedPreprocessedTenderLine, correlationId);
                                var rejectOnAddVoidedTenderLineAsyncResult_1 = new Commerce.VoidAsyncResult();
                                Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addVoidedTenderLineToCartRequest))
                                    .done(function (result) {
                                    if (result.canceled) {
                                        Commerce.RetailLogger.posVoidPaymentAddVoidedTenderLineCancelled(correlationId);
                                    }
                                    else {
                                        Commerce.RetailLogger.posVoidPaymentAddVoidedTenderLineSucceeded(correlationId);
                                    }
                                    rejectOnAddVoidedTenderLineAsyncResult_1.reject(paymentErrors);
                                }).fail(function (addVoidedTenderLineErrors) {
                                    Commerce.RetailLogger.posVoidPaymentAddVoidedTenderLineFailed(correlationId, Commerce.ErrorHelper.serializeError(addVoidedTenderLineErrors));
                                    if (Commerce.ObjectExtensions.isNullOrUndefined(paymentErrors)) {
                                        rejectOnAddVoidedTenderLineAsyncResult_1.reject(addVoidedTenderLineErrors);
                                    }
                                    else {
                                        rejectOnAddVoidedTenderLineAsyncResult_1.reject(paymentErrors.concat(addVoidedTenderLineErrors));
                                    }
                                });
                                preventRecoveryOnFailure = true;
                                return rejectOnAddVoidedTenderLineAsyncResult_1;
                            }
                        }
                        else {
                            return Commerce.VoidAsyncResult.createRejected(null);
                        }
                    });
                    return asyncQueue.run()
                        .recoverOnFailure(function (voidPaymentErrors) {
                        if (preventRecoveryOnFailure) {
                            Commerce.RetailLogger.posVoidPaymentPreventRecoveryOnFailure(correlationId);
                            return Commerce.VoidAsyncResult.createRejected(voidPaymentErrors);
                        }
                        return _this._handleVoidPaymentFailure(correlationId, peripheralType, paymentErrors, voidPaymentErrors, paymentAmount, paymentInfo, preProcessedTenderLine, voidFailureMessageId)
                            .recoverOnFailure(function (errors) {
                            if (paymentInfo.ApprovedAmount !== paymentAmount) {
                                var partialPayRequest = new Payments.ApprovePartialPaymentClientRequest(correlationId, paymentInfo, preProcessedTenderLine, paymentAmount, peripheralType);
                                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(partialPayRequest));
                            }
                            else {
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                        });
                    });
                };
                VoidPaymentClientRequestHandler.prototype._executeVoidPaymentOnPeripheralAsync = function (correlationId, peripheralType, paymentInfo, preProcessedTenderLine) {
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(preProcessedTenderLine.TenderTypeId);
                    var tenderInfo = { TenderId: null, CardTypeId: preProcessedTenderLine.CardTypeId };
                    if (peripheralType === Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal) {
                        Commerce.RetailLogger.posVoidPaymentUsingPaymentTerminalVoidStarted(correlationId);
                        var voidPaymentRequest = new Commerce.PaymentTerminalVoidPaymentRequest(tenderType.ConnectorId, tenderInfo, paymentInfo.ApprovedAmount, paymentInfo.PaymentSdkData, null, correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(voidPaymentRequest))
                            .fail(function (errors) {
                            Commerce.RetailLogger.posVoidPaymentUsingPaymentTerminalVoidFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                        }).map(function (result) {
                            if (result.canceled) {
                                Commerce.RetailLogger.posVoidPaymentUsingPaymentTerminalVoidCancelled(correlationId);
                            }
                            else {
                                Commerce.RetailLogger.posVoidPaymentUsingPaymentTerminalVoidSucceeded(correlationId);
                            }
                            return { canceled: result.canceled, data: result.canceled ? null : result.data.result };
                        });
                    }
                    else {
                        Commerce.RetailLogger.posVoidPaymentUsingCardPaymentVoidStarted(correlationId);
                        var voidPaymentRequest = new Commerce.CardPaymentVoidPaymentRequest(tenderType.ConnectorId, paymentInfo.ApprovedAmount, tenderInfo, paymentInfo.PaymentSdkData, null, correlationId);
                        return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(voidPaymentRequest))
                            .fail(function (errors) {
                            Commerce.RetailLogger.posVoidPaymentUsingCardPaymentVoidFailed(correlationId, Commerce.ErrorHelper.serializeError(errors));
                        }).map(function (result) {
                            if (result.canceled) {
                                Commerce.RetailLogger.posVoidPaymentUsingCardPaymentVoidCancelled(correlationId);
                            }
                            else {
                                Commerce.RetailLogger.posVoidPaymentUsingCardPaymentVoidSucceeded(correlationId);
                            }
                            return { canceled: result.canceled, data: result.canceled ? null : result.data.result };
                        });
                    }
                };
                VoidPaymentClientRequestHandler.prototype._handleVoidPaymentFailure = function (correlationId, peripheralType, originalPaymentErrors, voidPaymentErrors, paymentAmount, paymentInfo, preProcessedTenderLine, voidFailureMessageId) {
                    var _this = this;
                    if (voidFailureMessageId === Commerce.ErrorTypeEnum.PAYMENT_AUTHORIZED_VOID_FAILED) {
                        Commerce.RetailLogger.viewsOrderPaymentViewPaymentAuthorizedVoidFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(voidPaymentErrors));
                    }
                    else if (voidFailureMessageId === Commerce.ErrorTypeEnum.PAYMENT_CAPTURED_VOID_FAILED) {
                        Commerce.RetailLogger.viewsOrderPaymentViewPaymentCapturedVoidFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(voidPaymentErrors));
                    }
                    else {
                        Commerce.RetailLogger.viewsOrderPaymentViewPartialPaymentVoidFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(voidPaymentErrors));
                    }
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return Commerce.ViewModelAdapter.displayMessage(voidFailureMessageId, Commerce.MessageType.Info, Commerce.MessageBoxButtons.RetryNo, "string_4909");
                    }).enqueue(function (dialogResult) {
                        if (dialogResult === Commerce.DialogResult.Yes) {
                            Commerce.RetailLogger.posVoidPaymentRetrying(correlationId, Commerce.Proxy.Entities.PeripheralPaymentType[peripheralType]);
                            return asyncQueue.cancelOn(_this._voidPayment(correlationId, peripheralType, originalPaymentErrors, paymentAmount, paymentInfo, preProcessedTenderLine, voidFailureMessageId));
                        }
                        else if (paymentInfo.ApprovedAmount !== paymentAmount) {
                            return Commerce.AsyncResult.createRejected(voidPaymentErrors);
                        }
                        else {
                            return _this._executeUpdateLinesOnPeripheralAsync(correlationId, peripheralType, voidPaymentErrors);
                        }
                    });
                    return asyncQueue.run();
                };
                VoidPaymentClientRequestHandler.prototype._executeUpdateLinesOnPeripheralAsync = function (correlationId, peripheralType, voidPaymentErrors) {
                    if (peripheralType === Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal) {
                        var updateLinesRequest = new Commerce.PaymentTerminalUpdateLinesRequest(Commerce.Session.instance.cart, correlationId);
                        var rejectOnUpdateLinesAsyncResult_1 = new Commerce.VoidAsyncResult();
                        Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(updateLinesRequest))
                            .always(function () {
                            rejectOnUpdateLinesAsyncResult_1.reject(voidPaymentErrors);
                        });
                        return rejectOnUpdateLinesAsyncResult_1;
                    }
                    else {
                        return Commerce.VoidAsyncResult.createRejected(voidPaymentErrors);
                    }
                };
                return VoidPaymentClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.VoidPaymentClientRequestHandler = VoidPaymentClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ActivateHardwareStationClientResponse = (function (_super) {
            __extends(ActivateHardwareStationClientResponse, _super);
            function ActivateHardwareStationClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ActivateHardwareStationClientResponse;
        }(Commerce.ClientResponse));
        Payments.ActivateHardwareStationClientResponse = ActivateHardwareStationClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ActivateHardwareStationClientRequest = (function (_super) {
            __extends(ActivateHardwareStationClientRequest, _super);
            function ActivateHardwareStationClientRequest(correlationId, hardwareStationProfile) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to ActivateHardwareStationClientRequest: correlationId cannot be null or empty string.");
                }
                if (Commerce.ObjectExtensions.isNullOrUndefined(hardwareStationProfile)) {
                    throw new Error("Invalid option passed to ActivateHardwareStationClientRequest: hardwareStationProfile cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.hardwareStationProfile = hardwareStationProfile;
                return _this;
            }
            return ActivateHardwareStationClientRequest;
        }(Commerce.ClientRequest));
        Payments.ActivateHardwareStationClientRequest = ActivateHardwareStationClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var AddPreAuthorizedPaymentsToCartClientRequest = (function (_super) {
            __extends(AddPreAuthorizedPaymentsToCartClientRequest, _super);
            function AddPreAuthorizedPaymentsToCartClientRequest(correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid parameters passed to the AddPreAuthorizedPaymentsToCartClientRequest constructor: "
                        + "correlationId cannot be null or empty.");
                }
                _this = _super.call(this, correlationId) || this;
                return _this;
            }
            return AddPreAuthorizedPaymentsToCartClientRequest;
        }(Commerce.ClientRequest));
        Payments.AddPreAuthorizedPaymentsToCartClientRequest = AddPreAuthorizedPaymentsToCartClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var AddPreAuthorizedPaymentsToCartClientResponse = (function (_super) {
            __extends(AddPreAuthorizedPaymentsToCartClientResponse, _super);
            function AddPreAuthorizedPaymentsToCartClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AddPreAuthorizedPaymentsToCartClientResponse;
        }(Commerce.ClientResponse));
        Payments.AddPreAuthorizedPaymentsToCartClientResponse = AddPreAuthorizedPaymentsToCartClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ApprovePartialPaymentClientRequest = (function (_super) {
            __extends(ApprovePartialPaymentClientRequest, _super);
            function ApprovePartialPaymentClientRequest(correlationId, authorizationPaymentInfo, authorizationTenderLine, fullAmountDue, peripheralType) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for ApprovePartialPaymentClientRequest: correlationId is invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(authorizationPaymentInfo)) {
                    throw new Error("Invalid option passed to constructor for ApprovePartialPaymentClientRequest: authorizationPaymentInfo is invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(authorizationTenderLine)) {
                    throw new Error("Invalid option passed to constructor for ApprovePartialPaymentClientRequest: Invalid authorizationTenderLine.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(fullAmountDue)) {
                    throw new Error("Invalid option passed to constructor for ApprovePartialPaymentClientRequest: fullAmountDue is invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(peripheralType)) {
                    throw new Error("Invalid option passed to constructor for ApprovePartialPaymentClientRequest: peripheralType cannot be invalid.");
                }
                else if (peripheralType !== Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController
                    && peripheralType !== Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal) {
                    throw new Error("Invalid option passed to constructor for ApprovePartialPaymentClientRequest: unsupported peripheralType.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.authorizationPaymentInfo = authorizationPaymentInfo;
                _this.authorizationTenderLine = authorizationTenderLine;
                _this.fullAmountDue = fullAmountDue;
                _this.peripheralType = peripheralType;
                return _this;
            }
            return ApprovePartialPaymentClientRequest;
        }(Commerce.ClientRequest));
        Payments.ApprovePartialPaymentClientRequest = ApprovePartialPaymentClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ApprovePartialPaymentClientResponse = (function (_super) {
            __extends(ApprovePartialPaymentClientResponse, _super);
            function ApprovePartialPaymentClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ApprovePartialPaymentClientResponse;
        }(Commerce.ClientResponse));
        Payments.ApprovePartialPaymentClientResponse = ApprovePartialPaymentClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var AuthorizeCardTokenAndAddToCartClientRequest = (function (_super) {
            __extends(AuthorizeCardTokenAndAddToCartClientRequest, _super);
            function AuthorizeCardTokenAndAddToCartClientRequest(correlationId, cardToken, cardTypeId, tenderTypeId, maskedCardNumber, paymentServiceAccountId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid parameters passed to the AuthorizeCardTokenAndAddToCartClientRequest constructor: "
                        + "correlationId cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(cardToken)) {
                    throw new Error("Invalid parameters passed to the AuthorizeCardTokenAndAddToCartClientRequest constructor: "
                        + "cardToken cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(tenderTypeId)) {
                    throw new Error("Invalid parameters passed to the AuthorizeCardTokenAndAddToCartClientRequest constructor: "
                        + "tenderTypeId cannot be null or undefined.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.cardToken = cardToken;
                _this.cardTypeId = cardTypeId;
                _this.tenderTypeId = tenderTypeId;
                _this.maskedCardNumber = maskedCardNumber || Commerce.StringExtensions.EMPTY;
                _this.paymentServiceAccountId = paymentServiceAccountId || null;
                return _this;
            }
            return AuthorizeCardTokenAndAddToCartClientRequest;
        }(Commerce.ClientRequest));
        Payments.AuthorizeCardTokenAndAddToCartClientRequest = AuthorizeCardTokenAndAddToCartClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var AuthorizeCardTokenAndAddToCartClientResponse = (function (_super) {
            __extends(AuthorizeCardTokenAndAddToCartClientResponse, _super);
            function AuthorizeCardTokenAndAddToCartClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AuthorizeCardTokenAndAddToCartClientResponse;
        }(Commerce.ClientResponse));
        Payments.AuthorizeCardTokenAndAddToCartClientResponse = AuthorizeCardTokenAndAddToCartClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CheckForRecoveredPaymentTransactionClientRequest = (function (_super) {
        __extends(CheckForRecoveredPaymentTransactionClientRequest, _super);
        function CheckForRecoveredPaymentTransactionClientRequest(correlationId, paymentAmount, allowedActions) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                throw new Error("The constructor of CheckForRecoveredPaymentTransactionClientRequest requires not empty correlationId.");
            }
            _this = _super.call(this, correlationId) || this;
            _this.paymentAmount = paymentAmount;
            _this.allowedActions = allowedActions;
            return _this;
        }
        return CheckForRecoveredPaymentTransactionClientRequest;
    }(Commerce.ClientRequest));
    Commerce.CheckForRecoveredPaymentTransactionClientRequest = CheckForRecoveredPaymentTransactionClientRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CheckForRecoveredPaymentTransactionClientResponse = (function (_super) {
        __extends(CheckForRecoveredPaymentTransactionClientResponse, _super);
        function CheckForRecoveredPaymentTransactionClientResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CheckForRecoveredPaymentTransactionClientResponse;
    }(Commerce.ClientResponse));
    Commerce.CheckForRecoveredPaymentTransactionClientResponse = CheckForRecoveredPaymentTransactionClientResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ClearMerchantInformationClientResponse = (function (_super) {
            __extends(ClearMerchantInformationClientResponse, _super);
            function ClearMerchantInformationClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ClearMerchantInformationClientResponse;
        }(Commerce.ClientResponse));
        Payments.ClearMerchantInformationClientResponse = ClearMerchantInformationClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ClearMerchantInformationClientRequest = (function (_super) {
            __extends(ClearMerchantInformationClientRequest, _super);
            function ClearMerchantInformationClientRequest(correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to ClearMerchantInformationClientRequest: correlationId cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                return _this;
            }
            return ClearMerchantInformationClientRequest;
        }(Commerce.ClientRequest));
        Payments.ClearMerchantInformationClientRequest = ClearMerchantInformationClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var CreatePreProcessedTenderLineClientRequest = (function (_super) {
            __extends(CreatePreProcessedTenderLineClientRequest, _super);
            function CreatePreProcessedTenderLineClientRequest(correlationId, cardTypeId, currencyCode, isRefundOperation, paymentInfo, tenderType) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for CreatePreProcessedTenderLineClientRequest: correlationId cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(cardTypeId)) {
                    throw new Error("Invalid option passed to constructor for CreatePreProcessedTenderLineClientRequest: cardTypeId cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(currencyCode)) {
                    throw new Error("Invalid option passed to constructor for CreatePreProcessedTenderLineClientRequest: currencyCode cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(isRefundOperation)) {
                    throw new Error("Invalid option passed to constructor for CreatePreProcessedTenderLineClientRequest: isRefundOperation cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(paymentInfo)) {
                    throw new Error("Invalid option passed to constructor for CreatePreProcessedTenderLineClientRequest: paymentInfo cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    throw new Error("Invalid option passed to constructor for CreatePreProcessedTenderLineClientRequest: tenderType cannot be invalid.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.cardTypeId = cardTypeId;
                _this.currencyCode = currencyCode;
                _this.isRefundOperation = isRefundOperation;
                _this.paymentInfo = paymentInfo;
                _this.tenderType = tenderType;
                return _this;
            }
            return CreatePreProcessedTenderLineClientRequest;
        }(Commerce.ClientRequest));
        Payments.CreatePreProcessedTenderLineClientRequest = CreatePreProcessedTenderLineClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var CreatePreProcessedTenderLineClientResponse = (function (_super) {
            __extends(CreatePreProcessedTenderLineClientResponse, _super);
            function CreatePreProcessedTenderLineClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreatePreProcessedTenderLineClientResponse;
        }(Commerce.ClientResponse));
        Payments.CreatePreProcessedTenderLineClientResponse = CreatePreProcessedTenderLineClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetAndUpdateTenderLineSignatureClientRequest = (function (_super) {
            __extends(GetAndUpdateTenderLineSignatureClientRequest, _super);
            function GetAndUpdateTenderLineSignatureClientRequest(correlationId, tenderLineId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for GetAndUpdateTenderLineSignatureClientRequest: correlationId cannot be null or empty string.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(tenderLineId)) {
                    throw new Error("Invalid option passed to constructor for GetAndUpdateTenderLineSignatureClientRequest: tenderLineId cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.tenderLineId = tenderLineId;
                return _this;
            }
            return GetAndUpdateTenderLineSignatureClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetAndUpdateTenderLineSignatureClientRequest = GetAndUpdateTenderLineSignatureClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetAndUpdateTenderLineSignatureClientResponse = (function (_super) {
            __extends(GetAndUpdateTenderLineSignatureClientResponse, _super);
            function GetAndUpdateTenderLineSignatureClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetAndUpdateTenderLineSignatureClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetAndUpdateTenderLineSignatureClientResponse = GetAndUpdateTenderLineSignatureClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetAuthorizationOptionsClientRequest = (function (_super) {
            __extends(GetAuthorizationOptionsClientRequest, _super);
            function GetAuthorizationOptionsClientRequest(correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid parameters passed to the GetAuthorizationOptionsClientRequest constructor: "
                        + "correlationId cannot be null or undefined.");
                }
                _this = _super.call(this, correlationId) || this;
                return _this;
            }
            return GetAuthorizationOptionsClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetAuthorizationOptionsClientRequest = GetAuthorizationOptionsClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetAuthorizationOptionsClientResponse = (function (_super) {
            __extends(GetAuthorizationOptionsClientResponse, _super);
            function GetAuthorizationOptionsClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetAuthorizationOptionsClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetAuthorizationOptionsClientResponse = GetAuthorizationOptionsClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetCardPaymentAcceptPointServiceRequest = (function (_super) {
            __extends(GetCardPaymentAcceptPointServiceRequest, _super);
            function GetCardPaymentAcceptPointServiceRequest(correlationId, cardPaymentEnabled, cardTokenizationEnabled) {
                var _this = _super.call(this, correlationId) || this;
                _this.cardPaymentEnabled = cardPaymentEnabled;
                _this.cardTokenizationEnabled = cardTokenizationEnabled;
                return _this;
            }
            return GetCardPaymentAcceptPointServiceRequest;
        }(Commerce.ClientRequest));
        Payments.GetCardPaymentAcceptPointServiceRequest = GetCardPaymentAcceptPointServiceRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetCardPaymentAcceptPointServiceResponse = (function (_super) {
            __extends(GetCardPaymentAcceptPointServiceResponse, _super);
            function GetCardPaymentAcceptPointServiceResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCardPaymentAcceptPointServiceResponse;
        }(Commerce.ClientResponse));
        Payments.GetCardPaymentAcceptPointServiceResponse = GetCardPaymentAcceptPointServiceResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetCardTypeClientRequest = (function (_super) {
            __extends(GetCardTypeClientRequest, _super);
            function GetCardTypeClientRequest(correlationId, tenderType, cardNumber, cardInfo, isSwipe) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    throw new Error("Invalid parameters passed to the GetCardTypeClientRequest constructor: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(cardNumber)) {
                    throw new Error("Invalid parameters passed to the GetCardTypeClientRequest constructor: cardNumber cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(cardInfo)) {
                    throw new Error("Invalid parameters passed to the GetCardTypeClientRequest constructor: cardInfo cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(isSwipe)) {
                    throw new Error("Invalid parameters passed to the GetCardTypeClientRequest constructor: isSwipe cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid parameters passed to the GetCardTypeClientRequest constructor: correlationId cannot be null or undefined.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.cardInfo = cardInfo;
                _this.cardNumber = cardNumber;
                _this.isSwipe = isSwipe;
                _this.tenderType = tenderType;
                return _this;
            }
            return GetCardTypeClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetCardTypeClientRequest = GetCardTypeClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetCardTypeClientResponse = (function (_super) {
            __extends(GetCardTypeClientResponse, _super);
            function GetCardTypeClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCardTypeClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetCardTypeClientResponse = GetCardTypeClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetCurrencyAmountsClientRequest = (function (_super) {
            __extends(GetCurrencyAmountsClientRequest, _super);
            function GetCurrencyAmountsClientRequest(correlationId, amount, retrieveForAllCurrencies) {
                var _this = _super.call(this, correlationId) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(amount)) {
                    throw new Error("Invalid parameters passed to the GetCurrencyAmountsClientRequest constructor: amount cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(retrieveForAllCurrencies)) {
                    throw new Error("Invalid parameters passed to the GetCurrencyAmountsClientRequest constructor: " +
                        "retrieveForAllCurrencies cannot be null or undefined.");
                }
                _this.amount = amount;
                _this.retrieveForAllCurrencies = retrieveForAllCurrencies;
                return _this;
            }
            return GetCurrencyAmountsClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetCurrencyAmountsClientRequest = GetCurrencyAmountsClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetCurrencyAmountsClientResponse = (function (_super) {
            __extends(GetCurrencyAmountsClientResponse, _super);
            function GetCurrencyAmountsClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetCurrencyAmountsClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetCurrencyAmountsClientResponse = GetCurrencyAmountsClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetDenominationListClientRequest = (function (_super) {
            __extends(GetDenominationListClientRequest, _super);
            function GetDenominationListClientRequest(correlationId, currencyAmount) {
                var _this = _super.call(this, correlationId) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(currencyAmount)) {
                    throw new Error("Invalid parameters passed to the GetDenominationListClientRequest constructor: currencyAmount cannot be null or undefined.");
                }
                _this.currencyAmount = currencyAmount;
                return _this;
            }
            return GetDenominationListClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetDenominationListClientRequest = GetDenominationListClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetDenominationListClientResponse = (function (_super) {
            __extends(GetDenominationListClientResponse, _super);
            function GetDenominationListClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetDenominationListClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetDenominationListClientResponse = GetDenominationListClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetLoyaltyCardClientRequest = (function (_super) {
            __extends(GetLoyaltyCardClientRequest, _super);
            function GetLoyaltyCardClientRequest(correlationId, defaultLoyaltyCardId) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(defaultLoyaltyCardId)) {
                    throw new Error("Invalid parameters passed to the GetLoyaltyCardClientRequest constructor: defaultLoyaltyCardId cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid parameters passed to the GetLoyaltyCardClientRequest constructor: correlationId cannot be null or undefined.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.defaultLoyaltyCardId = defaultLoyaltyCardId;
                return _this;
            }
            return GetLoyaltyCardClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetLoyaltyCardClientRequest = GetLoyaltyCardClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetLoyaltyCardClientResponse = (function (_super) {
            __extends(GetLoyaltyCardClientResponse, _super);
            function GetLoyaltyCardClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetLoyaltyCardClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetLoyaltyCardClientResponse = GetLoyaltyCardClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var SaveMerchantInformationClientResponse = (function (_super) {
            __extends(SaveMerchantInformationClientResponse, _super);
            function SaveMerchantInformationClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SaveMerchantInformationClientResponse;
        }(Commerce.ClientResponse));
        Payments.SaveMerchantInformationClientResponse = SaveMerchantInformationClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var SaveMerchantInformationClientRequest = (function (_super) {
            __extends(SaveMerchantInformationClientRequest, _super);
            function SaveMerchantInformationClientRequest(correlationId, hardwareProfile) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to SaveMerchantInformationClientRequest: correlationId cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.hardwareProfile = hardwareProfile;
                return _this;
            }
            return SaveMerchantInformationClientRequest;
        }(Commerce.ClientRequest));
        Payments.SaveMerchantInformationClientRequest = SaveMerchantInformationClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var SelectCardTypeClientRequest = (function (_super) {
            __extends(SelectCardTypeClientRequest, _super);
            function SelectCardTypeClientRequest(correlationId, cardTypes) {
                var _this = _super.call(this, correlationId) || this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(cardTypes)) {
                    throw new Error("Invalid parameters passed to the SelectCardTypeClientRequest constructor: cardTypes cannot be null or undefined.");
                }
                _this.cardTypes = cardTypes;
                return _this;
            }
            return SelectCardTypeClientRequest;
        }(Commerce.ClientRequest));
        Payments.SelectCardTypeClientRequest = SelectCardTypeClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var SelectCardTypeClientResponse = (function (_super) {
            __extends(SelectCardTypeClientResponse, _super);
            function SelectCardTypeClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectCardTypeClientResponse;
        }(Commerce.ClientResponse));
        Payments.SelectCardTypeClientResponse = SelectCardTypeClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var SelectLinkedRefundClientRequest = (function (_super) {
            __extends(SelectLinkedRefundClientRequest, _super);
            function SelectLinkedRefundClientRequest(correlationId, tenderType) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for SelectLinkedRefundClientRequest: correlationId cannot be invalid.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.tenderType = tenderType;
                return _this;
            }
            return SelectLinkedRefundClientRequest;
        }(Commerce.ClientRequest));
        Payments.SelectLinkedRefundClientRequest = SelectLinkedRefundClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var SelectLinkedRefundClientResponse = (function (_super) {
            __extends(SelectLinkedRefundClientResponse, _super);
            function SelectLinkedRefundClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SelectLinkedRefundClientResponse;
        }(Commerce.ClientResponse));
        Payments.SelectLinkedRefundClientResponse = SelectLinkedRefundClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var TokenizePaymentCardClientRequest = (function (_super) {
            __extends(TokenizePaymentCardClientRequest, _super);
            function TokenizePaymentCardClientRequest() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TokenizePaymentCardClientRequest;
        }(Commerce.ClientRequest));
        Payments.TokenizePaymentCardClientRequest = TokenizePaymentCardClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var TokenizePaymentCardClientResponse = (function (_super) {
            __extends(TokenizePaymentCardClientResponse, _super);
            function TokenizePaymentCardClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TokenizePaymentCardClientResponse;
        }(Commerce.ClientResponse));
        Payments.TokenizePaymentCardClientResponse = TokenizePaymentCardClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ValidateAndUpdateTenderLineSignatureClientRequest = (function (_super) {
            __extends(ValidateAndUpdateTenderLineSignatureClientRequest, _super);
            function ValidateAndUpdateTenderLineSignatureClientRequest(correlationId, signatureData, tenderLineId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for ValidateAndUpdateTenderLineSignatureClientRequest: correlationId cannot be an invalid string.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(tenderLineId)) {
                    throw new Error("Invalid option passed to constructor for ValidateAndUpdateTenderLineSignatureClientRequest: tenderLineId cannot be an invalid string.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.signatureData = signatureData;
                _this.tenderLineId = tenderLineId;
                return _this;
            }
            return ValidateAndUpdateTenderLineSignatureClientRequest;
        }(Commerce.ClientRequest));
        Payments.ValidateAndUpdateTenderLineSignatureClientRequest = ValidateAndUpdateTenderLineSignatureClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ValidateAndUpdateTenderLineSignatureClientResponse = (function (_super) {
            __extends(ValidateAndUpdateTenderLineSignatureClientResponse, _super);
            function ValidateAndUpdateTenderLineSignatureClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ValidateAndUpdateTenderLineSignatureClientResponse;
        }(Commerce.ClientResponse));
        Payments.ValidateAndUpdateTenderLineSignatureClientResponse = ValidateAndUpdateTenderLineSignatureClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var VoidPaymentClientRequest = (function (_super) {
            __extends(VoidPaymentClientRequest, _super);
            function VoidPaymentClientRequest(correlationId, authorizationPaymentInfo, authorizationTenderLine, paymentAmount, peripheralType, voidFailureMessageId, paymentErrors) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for VoidPaymentClientRequest: correlationId cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(authorizationPaymentInfo)) {
                    throw new Error("Invalid option passed to constructor for VoidPaymentClientRequest: authorizationPaymentInfo cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(authorizationTenderLine)) {
                    throw new Error("Invalid option passed to constructor for VoidPaymentClientRequest: authorizationTenderLine cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(paymentAmount)) {
                    throw new Error("Invalid option passed to constructor for VoidPaymentClientRequest: paymentAmount cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(peripheralType)) {
                    throw new Error("Invalid option passed to constructor for VoidPaymentClientRequest: peripheralType cannot be invalid.");
                }
                else if (peripheralType !== Commerce.Proxy.Entities.PeripheralPaymentType.CardPaymentController
                    && peripheralType !== Commerce.Proxy.Entities.PeripheralPaymentType.PaymentTerminal) {
                    throw new Error("Invalid option passed to constructor for VoidPaymentClientRequest: unsupported peripheralType.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(voidFailureMessageId)) {
                    throw new Error("Invalid option passed to constructor for VoidPaymentClientRequest: voidFailureMessageId cannot be invalid.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.authorizationTenderLine = authorizationTenderLine;
                _this.paymentAmount = paymentAmount;
                _this.authorizationPaymentInfo = authorizationPaymentInfo;
                _this.peripheralType = peripheralType;
                _this.voidFailureMessageId = voidFailureMessageId;
                _this.paymentErrors = paymentErrors || null;
                return _this;
            }
            return VoidPaymentClientRequest;
        }(Commerce.ClientRequest));
        Payments.VoidPaymentClientRequest = VoidPaymentClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var VoidPaymentClientResponse = (function (_super) {
            __extends(VoidPaymentClientResponse, _super);
            function VoidPaymentClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VoidPaymentClientResponse;
        }(Commerce.ClientResponse));
        Payments.VoidPaymentClientResponse = VoidPaymentClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var AddGiftCardOperationHandler = (function (_super) {
            __extends(AddGiftCardOperationHandler, _super);
            function AddGiftCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddGiftCardOperationHandler.prototype.execute = function (options) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                options = options ||
                    {
                        tenderType: undefined,
                        amount: undefined,
                        currency: undefined,
                        giftCardId: undefined,
                        lineDescription: undefined
                    };
                Commerce.RetailLogger.operationAddGiftCard(options.giftCardId, options.amount, options.currency, options.lineDescription, Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType) ? Commerce.StringExtensions.EMPTY : options.tenderType.ConnectorId, correlationId);
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.isCartInProgress) {
                    asyncQueue.enqueue(function () {
                        var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(correlationId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCartRequest)));
                    });
                }
                asyncQueue.enqueue(function () {
                    return Commerce.ActivityHelper.getStartOfTransactionSalesRepresentativeAsyncQueue(Commerce.Session.instance.cart).run();
                });
                asyncQueue.enqueue(function () {
                    var addBalanceGiftCardRequest = new Commerce.Payments.AddBalanceToGiftCardClientRequest(correlationId, options.tenderType, options.giftCardId, options.amount, options.currency, options.lineDescription);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addBalanceGiftCardRequest));
                });
                return asyncQueue.run();
            };
            return AddGiftCardOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.AddGiftCardOperationHandler = AddGiftCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var CashOutGiftCardOperationHandler = (function (_super) {
            __extends(CashOutGiftCardOperationHandler, _super);
            function CashOutGiftCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CashOutGiftCardOperationHandler.prototype.execute = function (options) {
                var validationResult = this._validateOperationOptions(options);
                if (validationResult === false) {
                    return Commerce.AsyncResult.createRejected();
                }
                var context = {
                    onAddToGiftCard: undefined,
                    onCashOutGiftCard: function (cardId, currency, description) {
                        var connectorId = options.tenderType.ConnectorId;
                        if (Commerce.StringExtensions.isNullOrWhitespace(connectorId) && Commerce.StringExtensions.isNullOrWhitespace(cardId)) {
                            return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_1171")]);
                        }
                        var cashOutQueue = new Commerce.AsyncQueue();
                        var giftCard = null;
                        cashOutQueue.enqueue(function () {
                            return Commerce.PaymentHelper.getGiftCardByIdAsync(options.tenderType, cardId, options.correlationId);
                        }).enqueue(function (retrievedGiftCard) {
                            giftCard = retrievedGiftCard;
                            if (giftCard.Balance > options.tenderType.GiftCardCashoutOutThreshold) {
                                var balanceAboveThresholdError = new Commerce.Proxy.Entities.Error("string_5123", false, null, null, Commerce.NumberExtensions.formatCurrency(giftCard.Balance, currency), Commerce.NumberExtensions.formatCurrency(options.tenderType.GiftCardCashoutOutThreshold, currency));
                                return Commerce.VoidAsyncResult.createRejected([balanceAboveThresholdError]);
                            }
                            else if (giftCard.Balance <= 0) {
                                var notEnoughBalanceErrorMessage = new Commerce.Proxy.Entities.Error("string_5124", false, null, null, Commerce.NumberExtensions.formatCurrency(giftCard.Balance, currency), Commerce.NumberExtensions.formatCurrency(options.tenderType.GiftCardCashoutOutThreshold, currency));
                                return Commerce.VoidAsyncResult.createRejected([notEnoughBalanceErrorMessage]);
                            }
                            if (!Commerce.StringExtensions.isNullOrWhitespace(connectorId)) {
                                cardId = giftCard.Id;
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        }).enqueue(function () {
                            if (!Commerce.Session.instance.isCartInProgress) {
                                var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(options.correlationId);
                                return cashOutQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCartRequest)));
                            }
                            else {
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                        }).enqueue(function () {
                            return Commerce.ActivityHelper.getStartOfTransactionSalesRepresentativeAsyncQueue(Commerce.Session.instance.cart).run();
                        }).enqueue(function () {
                            var cashOutGiftCardClientRequest = new Commerce.Payments.CashOutGiftCardClientRequest(options.correlationId, giftCard.Balance, currency, cardId, description, options.tenderType);
                            return cashOutQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(cashOutGiftCardClientRequest)));
                        });
                        return cashOutQueue.run();
                    },
                    onCheckGiftCardBalance: undefined,
                    onIssueGiftCard: undefined,
                    retailOperationId: Operations.RetailOperation.CashOutGiftCard,
                    tenderTypeId: options.tenderType.TenderTypeId
                };
                var activity = new Commerce.Activities.GetGiftCardDetailsActivity(context);
                return activity.execute();
            };
            CashOutGiftCardOperationHandler.prototype._validateOperationOptions = function (operationOptions) {
                var result = true;
                if (Commerce.ObjectExtensions.isNullOrUndefined(operationOptions) || Commerce.ObjectExtensions.isNullOrUndefined(operationOptions.tenderType)) {
                    result = false;
                    Commerce.NotificationHandler.displayErrorMessage("string_29707");
                }
                else if (operationOptions.tenderType.OperationId !== Operations.RetailOperation.PayGiftCertificate) {
                    result = false;
                    Commerce.NotificationHandler.displayErrorMessage("string_1133", operationOptions.tenderType.Name);
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(operationOptions.correlationId)) {
                    throw new Error("Invalid options passed to CashOutGiftCardOperationHandler: CorrelationId is null or undefined.");
                }
                return result;
            };
            return CashOutGiftCardOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.CashOutGiftCardOperationHandler = CashOutGiftCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var GiftCardBalanceOperationHandler = (function (_super) {
            __extends(GiftCardBalanceOperationHandler, _super);
            function GiftCardBalanceOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GiftCardBalanceOperationHandler.prototype.execute = function (options) {
                options = options || { callerContext: undefined, giftCardFunction: undefined };
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.giftCardFunction)) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_IMPLEMENTED)]);
                }
                options.giftCardFunction.call(options.callerContext);
                return Commerce.VoidAsyncResult.createResolved();
            };
            return GiftCardBalanceOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.GiftCardBalanceOperationHandler = GiftCardBalanceOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var IssueGiftCardOperationHandler = (function (_super) {
            __extends(IssueGiftCardOperationHandler, _super);
            function IssueGiftCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            IssueGiftCardOperationHandler.prototype.execute = function (options) {
                var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                options = options ||
                    {
                        tenderType: undefined,
                        amount: undefined,
                        currency: undefined,
                        giftCardId: undefined,
                        lineDescription: undefined
                    };
                if (Commerce.ObjectExtensions.isNullOrUndefined(options.lineDescription)) {
                    options.lineDescription = "#" + options.giftCardId;
                }
                Commerce.RetailLogger.operationIssueGiftCard(options.giftCardId, options.amount, options.currency, options.lineDescription, Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType) ? Commerce.StringExtensions.EMPTY : options.tenderType.ConnectorId, correlationId);
                var asyncQueue = new Commerce.AsyncQueue();
                if (!Commerce.Session.instance.isCartInProgress) {
                    asyncQueue.enqueue(function () {
                        var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(correlationId);
                        return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCartRequest)));
                    });
                }
                asyncQueue.enqueue(function () {
                    var issueGiftCardRequest = new Commerce.Payments.IssueGiftCardClientRequest(correlationId, options.tenderType, options.giftCardId, options.amount, options.currency, options.lineDescription);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(issueGiftCardRequest));
                });
                return asyncQueue.run();
            };
            return IssueGiftCardOperationHandler;
        }(Operations.OperationHandlerBase));
        Operations.IssueGiftCardOperationHandler = IssueGiftCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PaymentOperationHandlerBase = (function (_super) {
            __extends(PaymentOperationHandlerBase, _super);
            function PaymentOperationHandlerBase() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentOperationHandlerBase.prototype.execute = function (options) {
                throw "Do not use the execute method on PaymentOperationHandlerBase";
            };
            PaymentOperationHandlerBase.prototype.paymentPreRequisitesQueue = function (tenderType) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var preTriggerOptions = { cart: Commerce.Session.instance.cart, tenderType: tenderType };
                    var preTriggerResult = Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PrePayment, preTriggerOptions);
                    return asyncQueue.cancelOn(preTriggerResult);
                });
                asyncQueue.enqueue(function () { return asyncQueue.cancelOn(_this.validateNonReceiptReturns(Commerce.Session.instance.cart, tenderType)); });
                asyncQueue.enqueue(function () { return asyncQueue.cancelOn(_this.calculateFullDiscounts(Commerce.Session.instance.cart)); });
                asyncQueue.enqueue(function () { return asyncQueue.cancelOn(_this.calculateTax(Commerce.Session.instance.cart)); });
                asyncQueue.enqueue(function () { return asyncQueue.cancelOn(_this.calculateCharges(Commerce.Session.instance.cart)); });
                asyncQueue.enqueue(function () { return asyncQueue.cancelOn(_this.selectHardwareStation()); });
                asyncQueue.enqueue(function () { return asyncQueue.cancelOn(_this.displayBalance(Commerce.Session.instance.cart)); });
                return asyncQueue;
            };
            PaymentOperationHandlerBase.prototype.calculateFullDiscounts = function (cart) {
                if (cart.IgnoreDiscountCalculation === true || cart.IsDiscountFullyCalculated === true || Commerce.CustomerOrderHelper.isCustomerOrderReturnOrPickup(cart)) {
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }
                return Operations.OperationsManager.instance.runOperation(Operations.RetailOperation.CalculateFullDiscounts, null)
                    .recoverOnFailure(function (errors) {
                    errors.forEach(function (e) { e.errorTitleResourceId = "string_4374"; });
                    return Commerce.AsyncResult.createRejected(errors);
                });
            };
            PaymentOperationHandlerBase.prototype.calculateTax = function (cart) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart.HasTaxCalculationTriggered) || cart.HasTaxCalculationTriggered) {
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }
                return Operations.OperationsManager.instance.runOperation(Operations.RetailOperation.CalculateFullDiscounts, null)
                    .recoverOnFailure(function (errors) {
                    errors.forEach(function (e) { e.errorTitleResourceId = "string_4374"; });
                    return Commerce.AsyncResult.createRejected(errors);
                });
            };
            PaymentOperationHandlerBase.prototype.calculateCharges = function (cart) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart.HasChargeCalculationTriggered) || cart.HasChargeCalculationTriggered) {
                    return Commerce.AsyncResult.createResolved({ canceled: false });
                }
                return Operations.OperationsManager.instance.runOperation(Operations.RetailOperation.CalculateFullDiscounts, null)
                    .recoverOnFailure(function (errors) {
                    errors.forEach(function (e) { e.errorTitleResourceId = "string_4374"; });
                    return Commerce.AsyncResult.createRejected(errors);
                });
            };
            PaymentOperationHandlerBase.prototype.selectHardwareStation = function () {
                var asyncQueue = new Commerce.AsyncQueue();
                if (Commerce.ApplicationContext.Instance.deviceConfiguration.SelectHardwareStationOnTendering
                    && !Commerce.ArrayExtensions.hasElements(Commerce.Session.instance.cart.TenderLines)) {
                    asyncQueue.enqueue(function () {
                        return asyncQueue.cancelOn(Operations.HardwareStationHelper.selectActiveHardwareStationAsync());
                    }).enqueue(function () {
                        return Commerce.PaymentHelper.beginTransactionAsync();
                    });
                }
                else {
                    Commerce.PaymentHelper.beginTransactionAsync();
                }
                return asyncQueue.run();
            };
            PaymentOperationHandlerBase.prototype.displayBalance = function (cart) {
                Commerce.Peripherals.HardwareStation.LineDisplayHelper.displayBalance(cart.TotalAmount, cart.AmountDue);
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            PaymentOperationHandlerBase.prototype.validateNonReceiptReturns = function (cart, tenderType) {
                var errors = [];
                if (Commerce.ObjectExtensions.isNullOrUndefined(cart)) {
                    errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CART_IS_EMPTY));
                    return Commerce.AsyncResult.createRejected(errors);
                }
                else {
                    if (cart.AmountDue < 0 && !Commerce.CustomerOrderHelper.isCustomerOrder(cart) && !cart.IsReturnByReceipt
                        && !Commerce.ObjectExtensions.isNullOrUndefined(tenderType) && tenderType.RestrictReturnsWithoutReceipt) {
                        errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_RETURNWITHOUTRECEIPTPAYMENT));
                        return Commerce.AsyncResult.createRejected(errors);
                    }
                }
                return Commerce.AsyncResult.createResolved({ canceled: false });
            };
            return PaymentOperationHandlerBase;
        }(Operations.OperationHandlerBase));
        Operations.PaymentOperationHandlerBase = PaymentOperationHandlerBase;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayCardOperationHandler = (function (_super) {
            __extends(NewPayCardOperationHandler, _super);
            function NewPayCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayCardOperationHandler.prototype.execute = function (options) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayCardOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayCardOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayCardOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                if (!Commerce.ObjectExtensions.isNullOrUndefined(options.tokenizeCard) && options.tokenizeCard) {
                    var asyncResult = asyncQueue.enqueue(function () {
                        return _this._getCardPaymentAcceptPointAsync(options.correlationId, false, true);
                    }).enqueue(function (cardPaymentAcceptPoint) {
                        var activity = new Commerce.Activities.TokenizePaymentCardActivity({
                            correlationId: options.correlationId,
                            tenderType: options.tenderType,
                            cardPaymentAcceptPoint: cardPaymentAcceptPoint
                        });
                        return asyncQueue.cancelOn(activity.execute())
                            .map(function (result) {
                            return result.data;
                        });
                    }).run();
                    return asyncResult;
                }
                else {
                    asyncQueue.enqueue(function () {
                        var cardPaymentEnabled = Commerce.Session.instance.cart.AmountDue > 0;
                        var cardTokenizationEnabled = Commerce.Session.instance.cart.AmountDue < 0;
                        return _this._getCardPaymentAcceptPointAsync(options.correlationId, cardPaymentEnabled, cardTokenizationEnabled);
                    }).enqueue(function (cardPaymentAcceptPoint) {
                        var cardPaymentOptions = {
                            tokenizeCard: options.tokenizeCard,
                            cardPaymentAcceptPoint: cardPaymentAcceptPoint,
                            paymentCardInfo: options.paymentCardInfo,
                            paymentCardSource: options.paymentCardSource,
                        };
                        var activity = new Commerce.Activities.AddPaymentActivity({
                            tenderType: options.tenderType,
                            fullAmountDue: Commerce.CartHelper.cartAmountDue(),
                            correlationId: options.correlationId,
                            cardPaymentOptions: cardPaymentOptions
                        });
                        return activity.execute().map(function () { return activity.response; });
                    }).cancel(function (response) {
                        return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                    });
                    return asyncQueue.run().map(function (result) {
                        var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                        return { canceled: result.canceled, data: paymentResult };
                    });
                }
            };
            NewPayCardOperationHandler.prototype._getCardPaymentAcceptPointAsync = function (correlationId, cardPaymentEnabled, cardTokenizationEnabled) {
                if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive()) {
                    var getCardPaymentAcceptPointServiceRequest = new Commerce.Payments.GetCardPaymentAcceptPointServiceRequest(correlationId, cardPaymentEnabled, cardTokenizationEnabled);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCardPaymentAcceptPointServiceRequest))
                        .map(function (result) {
                        return result.data.result;
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved(null);
                }
            };
            return NewPayCardOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayCardOperationHandler = NewPayCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayCashOperationHandler = (function (_super) {
            __extends(NewPayCashOperationHandler, _super);
            function NewPayCashOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayCashOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayCashOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayCashOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayCashOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    var context = {
                        fullAmountDue: Commerce.CartHelper.cartAmountDue(),
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    };
                    var activity = new Commerce.Activities.AddPaymentActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    var cancelablePaymentResult = { canceled: result.canceled, data: paymentResult };
                    return cancelablePaymentResult;
                });
            };
            return NewPayCashOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayCashOperationHandler = NewPayCashOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayCheckOperationHandler = (function (_super) {
            __extends(NewPayCheckOperationHandler, _super);
            function NewPayCheckOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayCheckOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayCheckOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayCheckOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayCheckOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    var context = {
                        fullAmountDue: Commerce.CartHelper.cartAmountDue(),
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    };
                    var activity = new Commerce.Activities.AddPaymentActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return NewPayCheckOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayCheckOperationHandler = NewPayCheckOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayCreditMemoOperationHandler = (function (_super) {
            __extends(NewPayCreditMemoOperationHandler, _super);
            function NewPayCreditMemoOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayCreditMemoOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayCreditMemoOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayCreditMemoOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayCreditMemoOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    var context = {
                        fullAmountDue: Commerce.CartHelper.cartAmountDue(),
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    };
                    var activity = new Commerce.Activities.AddPaymentActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return NewPayCreditMemoOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayCreditMemoOperationHandler = NewPayCreditMemoOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayCurrencyOperationHandler = (function (_super) {
            __extends(NewPayCurrencyOperationHandler, _super);
            function NewPayCurrencyOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayCurrencyOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayCurrencyOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayCurrencyOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayCurrencyOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    var context = {
                        fullAmountDue: Commerce.CartHelper.cartAmountDue(),
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    };
                    var activity = new Commerce.Activities.AddPaymentActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return NewPayCurrencyOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayCurrencyOperationHandler = NewPayCurrencyOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayCustomerAccountOperationHandler = (function (_super) {
            __extends(NewPayCustomerAccountOperationHandler, _super);
            function NewPayCustomerAccountOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayCustomerAccountOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayCustomerAccountOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayCustomerAccountOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayCustomerAccountOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var internalAmountDue = Commerce.Session.instance.cart.AmountDue;
                if (Commerce.Session.instance.cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit) {
                    var carryoutDeliveryModeCode_1 = Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(carryoutDeliveryModeCode_1)) {
                        var carryoutLinesTotalAmount = Commerce.ArrayExtensions.sum(Commerce.Session.instance.cart.CartLines, function (cartLine) { return cartLine.TotalAmount; }, function (cartLine) { return !cartLine.IsVoided && cartLine.DeliveryMode === carryoutDeliveryModeCode_1; });
                        if (internalAmountDue > carryoutLinesTotalAmount) {
                            internalAmountDue = carryoutLinesTotalAmount;
                        }
                    }
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    var context = {
                        fullAmountDue: internalAmountDue,
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    };
                    var activity = new Commerce.Activities.AddPaymentActivity(context);
                    activity.responseHandler = function () {
                        if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CustomerId)) {
                            return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_1172")]);
                        }
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    };
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return NewPayCustomerAccountOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayCustomerAccountOperationHandler = NewPayCustomerAccountOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayGiftCardOperationHandler = (function (_super) {
            __extends(NewPayGiftCardOperationHandler, _super);
            function NewPayGiftCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayGiftCardOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayGiftCardOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayGiftCardOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayGiftCardOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    var context = {
                        fullAmountDue: Commerce.CartHelper.cartAmountDue(),
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    };
                    var activity = new Commerce.Activities.AddPaymentActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return NewPayGiftCardOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayGiftCardOperationHandler = NewPayGiftCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var NewPayLoyaltyCardOperationHandler = (function (_super) {
            __extends(NewPayLoyaltyCardOperationHandler, _super);
            function NewPayLoyaltyCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NewPayLoyaltyCardOperationHandler.prototype.execute = function (options) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(options)) {
                    throw new Error("Invalid options passed to NewPayLoyaltyCardOperationHandler execute: options cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)) {
                    throw new Error("Invalid options passed to NewPayLoyaltyCardOperationHandler execute: tenderType cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(options.correlationId)) {
                    throw new Error("Invalid options passed to NewPayLoyaltyCardOperationHandler execute: correlationId cannot be null or undefined.");
                }
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    var context = {
                        fullAmountDue: Commerce.CartHelper.cartAmountDue(),
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    };
                    var activity = new Commerce.Activities.AddPaymentActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? null : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return NewPayLoyaltyCardOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.NewPayLoyaltyCardOperationHandler = NewPayLoyaltyCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PayCardOperationHandler = (function (_super) {
            __extends(PayCardOperationHandler, _super);
            function PayCardOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayCardOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || {
                    paymentCardInfo: undefined,
                    paymentCardSource: undefined,
                    tokenizeCard: undefined,
                    tenderType: undefined,
                    correlationId: Commerce.LoggerHelper.getNewCorrelationId()
                };
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                if (options.tokenizeCard) {
                    var asyncResult = asyncQueue.enqueue(function () {
                        return _this._getCardPaymentAcceptPointAsync(options.correlationId, false, true);
                    }).enqueue(function (cardPaymentAcceptPoint) {
                        var activity = new Commerce.Activities.TokenizePaymentCardActivity({
                            correlationId: options.correlationId,
                            tenderType: options.tenderType,
                            cardPaymentAcceptPoint: cardPaymentAcceptPoint
                        });
                        return asyncQueue.cancelOn(activity.execute())
                            .map(function (result) {
                            return result.data;
                        });
                    }).run();
                    return asyncResult;
                }
                else {
                    asyncQueue.enqueue(function () {
                        var cardPaymentEnabled = Commerce.Session.instance.cart.AmountDue > 0;
                        var cardTokenizationEnabled = Commerce.Session.instance.cart.AmountDue < 0;
                        return _this._getCardPaymentAcceptPointAsync(options.correlationId, cardPaymentEnabled, cardTokenizationEnabled);
                    }).enqueue(function (cardPaymentAcceptPoint) {
                        Commerce.ViewModelAdapter.navigate("PaymentView", {
                            paymentAmount: Commerce.CartHelper.cartAmountDue,
                            loyaltyCardId: Commerce.Session.instance.cart.LoyaltyCardId,
                            paymentCardInfo: options.paymentCardInfo,
                            paymentCardSource: options.paymentCardSource,
                            tenderType: options.tenderType,
                            cardPaymentAcceptPageUrl: cardPaymentAcceptPoint ? cardPaymentAcceptPoint.AcceptPageUrl : undefined,
                            cardPaymentAcceptPageSubmitUrl: cardPaymentAcceptPoint ? cardPaymentAcceptPoint.AcceptPageSubmitUrl : undefined,
                            cardPaymentAcceptMessageOrigin: cardPaymentAcceptPoint ? cardPaymentAcceptPoint.MessageOrigin : undefined,
                            correlationId: options.correlationId
                        });
                        return Commerce.VoidAsyncResult.createResolved();
                    });
                    return asyncQueue.run();
                }
            };
            PayCardOperationHandler.prototype._getCardPaymentAcceptPointAsync = function (correlationId, cardPaymentEnabled, cardTokenizationEnabled) {
                var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
                var paymentTerminalActive = !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)
                    && !Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal.isActive)
                    && paymentTerminal.isActive;
                if (!Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive() || !paymentTerminalActive) {
                    var getCardPaymentAcceptPointServiceRequest = new Commerce.Payments.GetCardPaymentAcceptPointServiceRequest(correlationId, cardPaymentEnabled, cardTokenizationEnabled);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getCardPaymentAcceptPointServiceRequest))
                        .map(function (result) {
                        return result.data.result;
                    });
                }
                else {
                    return Commerce.AsyncResult.createResolved(null);
                }
            };
            return PayCardOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PayCardOperationHandler = PayCardOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PayCashOperationHandler = (function (_super) {
            __extends(PayCashOperationHandler, _super);
            function PayCashOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayCashOperationHandler.prototype.execute = function (options) {
                options = options || { tenderType: null, correlationId: Commerce.StringExtensions.EMPTY };
                var tenderType = !Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)
                    ? options.tenderType
                    : this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Operations.RetailOperation.PayCash);
                var asyncQueue = this.paymentPreRequisitesQueue(tenderType);
                asyncQueue.enqueue(function () {
                    var amountDue = function () { return Commerce.Session.instance.cart.AmountDue; };
                    var context = { amountDue: amountDue, cart: Commerce.Session.instance.cart, tenderType: tenderType };
                    var activity = new Commerce.Activities.GetPaymentInfoActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? undefined : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return PayCashOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PayCashOperationHandler = PayCashOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PayCashQuickOperationHandler = (function (_super) {
            __extends(PayCashQuickOperationHandler, _super);
            function PayCashQuickOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayCashQuickOperationHandler.prototype.execute = function (options) {
                var _this = this;
                options = options || { tenderType: null, correlationId: Commerce.StringExtensions.EMPTY };
                var tenderType = !Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)
                    ? options.tenderType
                    : this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Operations.RetailOperation.PayCash);
                var paymentAmount = Commerce.Session.instance.cart.AmountDue;
                Commerce.RetailLogger.operationPayCashQuickPaymentAmount(paymentAmount.toString());
                var asyncQueue = this.paymentPreRequisitesQueue(tenderType);
                asyncQueue.enqueue(function () {
                    var tenderLine = new Commerce.Proxy.Entities.CartTenderLineClass({
                        TenderLineId: Commerce.StringExtensions.EMPTY,
                        Amount: paymentAmount,
                        Currency: _this.applicationContext.deviceConfiguration.Currency,
                        TenderTypeId: tenderType.TenderTypeId
                    });
                    var addTenderLineToCartRequest = new Commerce.AddTenderLineToCartClientRequest(tenderLine);
                    var addTenderLineToCartResponse = Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addTenderLineToCartRequest));
                    return asyncQueue.cancelOn(addTenderLineToCartResponse);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? undefined : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return PayCashQuickOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PayCashQuickOperationHandler = PayCashQuickOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PayCheckOperationHandler = (function (_super) {
            __extends(PayCheckOperationHandler, _super);
            function PayCheckOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayCheckOperationHandler.prototype.execute = function (options) {
                options = options || { tenderType: null, correlationId: Commerce.StringExtensions.EMPTY };
                var tenderType = !Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)
                    ? options.tenderType
                    : this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Operations.RetailOperation.PayCheck);
                var asyncQueue = this.paymentPreRequisitesQueue(tenderType);
                asyncQueue.enqueue(function () {
                    var amountDue = function () { return Commerce.Session.instance.cart.AmountDue; };
                    var context = { amountDue: amountDue, cart: Commerce.Session.instance.cart, tenderType: tenderType };
                    var activity = new Commerce.Activities.GetPaymentInfoActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? undefined : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return PayCheckOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PayCheckOperationHandler = PayCheckOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PayCreditMemoOperationHandler = (function (_super) {
            __extends(PayCreditMemoOperationHandler, _super);
            function PayCreditMemoOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayCreditMemoOperationHandler.prototype.execute = function (options) {
                options = options || { tenderType: null, correlationId: Commerce.StringExtensions.EMPTY };
                var tenderType = !Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)
                    ? options.tenderType
                    : this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Operations.RetailOperation.PayCreditMemo);
                var asyncQueue = this.paymentPreRequisitesQueue(tenderType);
                asyncQueue.enqueue(function () {
                    var amountDue = function () { return Commerce.Session.instance.cart.AmountDue; };
                    var context = { amountDue: amountDue, cart: Commerce.Session.instance.cart, tenderType: tenderType };
                    var activity = new Commerce.Activities.GetPaymentInfoActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? undefined : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return PayCreditMemoOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PayCreditMemoOperationHandler = PayCreditMemoOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PayCurrencyOperationHandler = (function (_super) {
            __extends(PayCurrencyOperationHandler, _super);
            function PayCurrencyOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayCurrencyOperationHandler.prototype.execute = function (options) {
                options = options || { tenderType: null, correlationId: Commerce.StringExtensions.EMPTY };
                var tenderType = !Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)
                    ? options.tenderType
                    : this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Operations.RetailOperation.PayCurrency);
                var asyncQueue = this.paymentPreRequisitesQueue(tenderType);
                asyncQueue.enqueue(function () {
                    var amountDue = function () { return Commerce.Session.instance.cart.AmountDue; };
                    var context = { amountDue: amountDue, cart: Commerce.Session.instance.cart, tenderType: tenderType };
                    var activity = new Commerce.Activities.GetPaymentInfoActivity(context);
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? undefined : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return PayCurrencyOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PayCurrencyOperationHandler = PayCurrencyOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PayCustomerAccountOperationHandler = (function (_super) {
            __extends(PayCustomerAccountOperationHandler, _super);
            function PayCustomerAccountOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayCustomerAccountOperationHandler.prototype.execute = function (options) {
                options = options || { tenderType: null, correlationId: Commerce.StringExtensions.EMPTY };
                var tenderType = !Commerce.ObjectExtensions.isNullOrUndefined(options.tenderType)
                    ? options.tenderType
                    : this.applicationContext.tenderTypesMap.getTenderTypeByOperationId(Operations.RetailOperation.PayCustomerAccount);
                var internalAmountDue = Commerce.Session.instance.cart.AmountDue;
                if (Commerce.Session.instance.cart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit) {
                    var carryoutLinesTotalAmount = 0.0;
                    var carryoutDeliveryModeCode = Commerce.ApplicationContext.Instance.channelConfiguration.CarryoutDeliveryModeCode;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(carryoutDeliveryModeCode)) {
                        var cartLines = Commerce.Session.instance.cart.CartLines;
                        for (var i = 0; i < cartLines.length; i++) {
                            if (cartLines[i].IsVoided !== true && cartLines[i].DeliveryMode === carryoutDeliveryModeCode) {
                                carryoutLinesTotalAmount += cartLines[i].TotalAmount;
                            }
                        }
                        if (internalAmountDue > carryoutLinesTotalAmount) {
                            internalAmountDue = carryoutLinesTotalAmount;
                        }
                    }
                }
                var asyncQueue = this.paymentPreRequisitesQueue(tenderType);
                asyncQueue.enqueue(function () {
                    var amountDue = function () { return internalAmountDue; };
                    var context = { amountDue: amountDue, cart: Commerce.Session.instance.cart, tenderType: tenderType };
                    var activity = new Commerce.Activities.GetPaymentInfoActivity(context);
                    activity.responseHandler = function (response) {
                        if (Commerce.StringExtensions.isNullOrWhitespace(Commerce.Session.instance.cart.CustomerId)) {
                            return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error("string_1172")]);
                        }
                        return Commerce.AsyncResult.createResolved({ canceled: false });
                    };
                    return activity.execute().map(function () { return activity.response; });
                }).cancel(function (response) {
                    return Commerce.ObjectExtensions.isNullOrUndefined(response) || Commerce.ObjectExtensions.isNullOrUndefined(response.tenderLine);
                });
                return asyncQueue.run().map(function (result) {
                    var paymentResult = result.canceled ? undefined : { tenderLine: Commerce.CartHelper.getLastTenderLine(Commerce.Session.instance.cart) };
                    return { canceled: result.canceled, data: paymentResult };
                });
            };
            return PayCustomerAccountOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PayCustomerAccountOperationHandler = PayCustomerAccountOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        "use strict";
        var PaymentOperationHandler = (function (_super) {
            __extends(PaymentOperationHandler, _super);
            function PaymentOperationHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentOperationHandler.prototype.execute = function (options) {
                options = options || {
                    tenderType: undefined,
                    correlationId: Commerce.StringExtensions.EMPTY
                };
                var asyncQueue = this.paymentPreRequisitesQueue(options.tenderType);
                asyncQueue.enqueue(function () {
                    Commerce.ViewModelAdapter.navigate("PaymentView", {
                        paymentAmount: Commerce.CartHelper.cartAmountDue,
                        loyaltyCardId: Commerce.Session.instance.cart.LoyaltyCardId,
                        paymentCardInfo: undefined,
                        paymentCardSource: Commerce.Proxy.Entities.CardSource.Unknown,
                        tenderType: options.tenderType,
                        correlationId: options.correlationId
                    });
                    return Commerce.VoidAsyncResult.createResolved();
                });
                return asyncQueue.run();
            };
            return PaymentOperationHandler;
        }(Operations.PaymentOperationHandlerBase));
        Operations.PaymentOperationHandler = PaymentOperationHandler;
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var BarcodeScannerCloseRequestHandler = (function (_super) {
            __extends(BarcodeScannerCloseRequestHandler, _super);
            function BarcodeScannerCloseRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BarcodeScannerCloseRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.BarcodeScannerCloseRequest;
            };
            BarcodeScannerCloseRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.HardwareStation.HardwareStationContext
                    .instance
                    .peripheral(Commerce.Peripherals.HardwareStation.BarcodeScanner.HS_PERIPHERAL_NAME)
                    .execute(Commerce.Peripherals.HardwareStation.BarcodeScanner.HS_UNLOCK_ACTION, null, request.timeout, request.suppressGlobalErrorEvent)
                    .map(function () {
                    return { canceled: false, data: new Commerce.BarcodeScannerCloseResponse() };
                }).getPromise();
            };
            return BarcodeScannerCloseRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.BarcodeScannerCloseRequestHandler = BarcodeScannerCloseRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var BarcodeScannerGetBarcodesRequestHandler = (function (_super) {
            __extends(BarcodeScannerGetBarcodesRequestHandler, _super);
            function BarcodeScannerGetBarcodesRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BarcodeScannerGetBarcodesRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.BarcodeScannerGetBarcodesRequest;
            };
            BarcodeScannerGetBarcodesRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.HardwareStation.HardwareStationContext
                    .instance
                    .peripheral(Commerce.Peripherals.HardwareStation.BarcodeScanner.HS_PERIPHERAL_NAME)
                    .execute(Commerce.Peripherals.HardwareStation.BarcodeScanner.HS_GETBARCODES_ACTION, request.data, request.timeout, request.suppressGlobalErrorEvent)
                    .map(function (barcodes) {
                    return { canceled: false, data: new Commerce.BarcodeScannerGetBarcodesResponse(barcodes) };
                }).getPromise();
            };
            return BarcodeScannerGetBarcodesRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.BarcodeScannerGetBarcodesRequestHandler = BarcodeScannerGetBarcodesRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var BarcodeScannerOpenRequestHandler = (function (_super) {
            __extends(BarcodeScannerOpenRequestHandler, _super);
            function BarcodeScannerOpenRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BarcodeScannerOpenRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.BarcodeScannerOpenRequest;
            };
            BarcodeScannerOpenRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.HardwareStation.HardwareStationContext
                    .instance
                    .peripheral(Commerce.Peripherals.HardwareStation.BarcodeScanner.HS_PERIPHERAL_NAME)
                    .execute(Commerce.Peripherals.HardwareStation.LongPollingLockPeripheralBase.HS_LOCK_ACTION, request.data, request.timeout, request.suppressGlobalErrorEvent)
                    .map(function () {
                    return { canceled: false, data: new Commerce.BarcodeScannerOpenResponse() };
                }).getPromise();
            };
            return BarcodeScannerOpenRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.BarcodeScannerOpenRequestHandler = BarcodeScannerOpenRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentAuthorizeCardTokenPeripheralRequestHandler = (function (_super) {
            __extends(CardPaymentAuthorizeCardTokenPeripheralRequestHandler, _super);
            function CardPaymentAuthorizeCardTokenPeripheralRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentAuthorizeCardTokenPeripheralRequestHandler.prototype.supportedRequestType = function () {
                return Peripherals.CardPaymentAuthorizeCardTokenPeripheralRequest;
            };
            CardPaymentAuthorizeCardTokenPeripheralRequestHandler.prototype.executeAsync = function (request) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                    throw new Error("Invalid parameters passed to CardPaymentAuthorizeCardTokenPeripheralRequestHandler execute: "
                        + "request cannot be null or undefined.");
                }
                var cardPayment = Peripherals.instance.cardPayment;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cardPayment)) {
                    return cardPayment.authorizeCardToken(request.amount, request.cardTokenXml, request.paymentServiceAccountId, request.extensionTransactionProperties)
                        .map(function (paymentInfo) {
                        return {
                            canceled: false,
                            data: new Peripherals.CardPaymentAuthorizeCardTokenPeripheralResponse(paymentInfo)
                        };
                    }).getPromise();
                }
                else {
                    return Promise.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CARD_PAYMENT_NOT_CONFIGURED)]);
                }
            };
            return CardPaymentAuthorizeCardTokenPeripheralRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentAuthorizeCardTokenPeripheralRequestHandler = CardPaymentAuthorizeCardTokenPeripheralRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentAuthorizePaymentRequestHandler = (function (_super) {
            __extends(CardPaymentAuthorizePaymentRequestHandler, _super);
            function CardPaymentAuthorizePaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentAuthorizePaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentAuthorizePaymentRequest;
            };
            CardPaymentAuthorizePaymentRequestHandler.prototype.executeAsync = function (request) {
                var amount = request.amount;
                var tenderInfo = request.tenderInfo;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.cardPayment.authorizePayment(request.paymentConnectorId, amount, tenderInfo, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.CardPaymentAuthorizePaymentResponse(value) };
                }).getPromise();
            };
            return CardPaymentAuthorizePaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentAuthorizePaymentRequestHandler = CardPaymentAuthorizePaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentBeginTransactionRequestHandler = (function (_super) {
            __extends(CardPaymentBeginTransactionRequestHandler, _super);
            function CardPaymentBeginTransactionRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentBeginTransactionRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentBeginTransactionRequest;
            };
            CardPaymentBeginTransactionRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.cardPayment.beginTransaction()
                    .map(function () {
                    return { canceled: false, data: new Commerce.CardPaymentBeginTransactionResponse() };
                }).getPromise();
            };
            return CardPaymentBeginTransactionRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentBeginTransactionRequestHandler = CardPaymentBeginTransactionRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentCapturePaymentRequestHandler = (function (_super) {
            __extends(CardPaymentCapturePaymentRequestHandler, _super);
            function CardPaymentCapturePaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentCapturePaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentCapturePaymentRequest;
            };
            CardPaymentCapturePaymentRequestHandler.prototype.executeAsync = function (request) {
                var amount = request.amount;
                var paymentProperties = request.paymentProperties;
                var paymentServiceAccountId = request.paymentServiceAccountId;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.cardPayment.capturePayment(amount, paymentProperties, extensionTransactionProperties, paymentServiceAccountId)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.CardPaymentCapturePaymentResponse(value) };
                }).getPromise();
            };
            return CardPaymentCapturePaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentCapturePaymentRequestHandler = CardPaymentCapturePaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentEndTransactionRequestHandler = (function (_super) {
            __extends(CardPaymentEndTransactionRequestHandler, _super);
            function CardPaymentEndTransactionRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentEndTransactionRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentEndTransactionRequest;
            };
            CardPaymentEndTransactionRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.cardPayment.endTransaction()
                    .map(function () {
                    return { canceled: false, data: new Commerce.CardPaymentEndTransactionResponse() };
                }).getPromise();
            };
            return CardPaymentEndTransactionRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentEndTransactionRequestHandler = CardPaymentEndTransactionRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentEnquireGiftCardBalancePeripheralRequestHandler = (function (_super) {
            __extends(CardPaymentEnquireGiftCardBalancePeripheralRequestHandler, _super);
            function CardPaymentEnquireGiftCardBalancePeripheralRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentEnquireGiftCardBalancePeripheralRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentEnquireGiftCardBalancePeripheralRequest;
            };
            CardPaymentEnquireGiftCardBalancePeripheralRequestHandler.prototype.executeAsync = function (request) {
                var cardPayment = Peripherals.instance.cardPayment;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(cardPayment)) {
                    return cardPayment.enquireGiftCardBalance(request.tenderInfo, request.paymentConnectorId, request.extensionTransactionProperties)
                        .map(function (paymentInfo) {
                        return {
                            canceled: false,
                            data: new Commerce.CardPaymentEnquireGiftCardBalancePeripheralResponse(paymentInfo)
                        };
                    }).getPromise();
                }
                else {
                    return Promise.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.CARD_PAYMENT_NOT_CONFIGURED)]);
                }
            };
            return CardPaymentEnquireGiftCardBalancePeripheralRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentEnquireGiftCardBalancePeripheralRequestHandler = CardPaymentEnquireGiftCardBalancePeripheralRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentExecuteTaskRequestHandler = (function (_super) {
            __extends(CardPaymentExecuteTaskRequestHandler, _super);
            function CardPaymentExecuteTaskRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentExecuteTaskRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentExecuteTaskRequest;
            };
            CardPaymentExecuteTaskRequestHandler.prototype.executeAsync = function (request) {
                var task = request.task;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.cardPayment.executeTask(task, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.CardPaymentExecuteTaskResponse(value) };
                }).getPromise();
            };
            return CardPaymentExecuteTaskRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentExecuteTaskRequestHandler = CardPaymentExecuteTaskRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentRefundPaymentRequestHandler = (function (_super) {
            __extends(CardPaymentRefundPaymentRequestHandler, _super);
            function CardPaymentRefundPaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentRefundPaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentRefundPaymentRequest;
            };
            CardPaymentRefundPaymentRequestHandler.prototype.executeAsync = function (request) {
                var amount = request.amount;
                var tenderInfo = request.tenderInfo;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.cardPayment.refundPayment(request.paymentConnectorId, amount, tenderInfo, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.CardPaymentRefundPaymentResponse(value) };
                }).getPromise();
            };
            return CardPaymentRefundPaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentRefundPaymentRequestHandler = CardPaymentRefundPaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CardPaymentVoidPaymentRequestHandler = (function (_super) {
            __extends(CardPaymentVoidPaymentRequestHandler, _super);
            function CardPaymentVoidPaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CardPaymentVoidPaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CardPaymentVoidPaymentRequest;
            };
            CardPaymentVoidPaymentRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.cardPayment.voidPayment(request.paymentConnectorId, request.amount, request.tenderInfo, request.paymentProperties, request.extensionTransactionProperties, request.paymentServiceAccountId)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.CardPaymentVoidPaymentResponse(value) };
                }).getPromise();
            };
            return CardPaymentVoidPaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CardPaymentVoidPaymentRequestHandler = CardPaymentVoidPaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CashDrawerIsOpenRequestHandler = (function (_super) {
            __extends(CashDrawerIsOpenRequestHandler, _super);
            function CashDrawerIsOpenRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CashDrawerIsOpenRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CashDrawerIsOpenRequest;
            };
            CashDrawerIsOpenRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.cashDrawer.isOpenAsync().map(function (value) {
                    return { canceled: false, data: new Commerce.CashDrawerIsOpenResponse(value) };
                }).getPromise();
            };
            return CashDrawerIsOpenRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CashDrawerIsOpenRequestHandler = CashDrawerIsOpenRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var CashDrawerOpenRequestHandler = (function (_super) {
            __extends(CashDrawerOpenRequestHandler, _super);
            function CashDrawerOpenRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CashDrawerOpenRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.CashDrawerOpenRequest;
            };
            CashDrawerOpenRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.cashDrawer.openAsync().map(function () {
                    return { canceled: false, data: new Commerce.CashDrawerOpenResponse() };
                }).getPromise();
            };
            return CashDrawerOpenRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.CashDrawerOpenRequestHandler = CashDrawerOpenRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var GetActiveHardwareStationClientRequestHandler = (function (_super) {
            __extends(GetActiveHardwareStationClientRequestHandler, _super);
            function GetActiveHardwareStationClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetActiveHardwareStationClientRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.GetActiveHardwareStationClientRequest;
            };
            GetActiveHardwareStationClientRequestHandler.prototype.executeAsync = function (request) {
                var activeHardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                return Promise.resolve({ canceled: false, data: new Commerce.GetActiveHardwareStationClientResponse(activeHardwareStation) });
            };
            return GetActiveHardwareStationClientRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.GetActiveHardwareStationClientRequestHandler = GetActiveHardwareStationClientRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStationDeviceActionRequestHandler = (function (_super) {
            __extends(HardwareStationDeviceActionRequestHandler, _super);
            function HardwareStationDeviceActionRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            HardwareStationDeviceActionRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.HardwareStationDeviceActionRequest;
            };
            HardwareStationDeviceActionRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.HardwareStation.HardwareStationContext
                    .instance
                    .peripheral(request.device)
                    .execute(request.action, request.actionData)
                    .map(function (value) {
                    return {
                        canceled: false, data: new Commerce.HardwareStationDeviceActionResponse(value)
                    };
                }).getPromise();
            };
            return HardwareStationDeviceActionRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.HardwareStationDeviceActionRequestHandler = HardwareStationDeviceActionRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStationStatusRequestHandler = (function (_super) {
            __extends(HardwareStationStatusRequestHandler, _super);
            function HardwareStationStatusRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            HardwareStationStatusRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.HardwareStationStatusRequest;
            };
            HardwareStationStatusRequestHandler.prototype.executeAsync = function (request) {
                var isActive = Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive();
                return Commerce.VoidAsyncResult.createResolved().map(function () {
                    return { canceled: false, data: new Commerce.HardwareStationStatusResponse(isActive) };
                }).getPromise();
            };
            return HardwareStationStatusRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.HardwareStationStatusRequestHandler = HardwareStationStatusRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var LineDisplayDisplayLinesRequestHandler = (function (_super) {
            __extends(LineDisplayDisplayLinesRequestHandler, _super);
            function LineDisplayDisplayLinesRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LineDisplayDisplayLinesRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.LineDisplayDisplayLinesRequest;
            };
            LineDisplayDisplayLinesRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.lineDisplay.displayLines(request.lines).map(function () {
                    return { canceled: false, data: new Commerce.LineDisplayDisplayLinesResponse() };
                }).getPromise();
            };
            return LineDisplayDisplayLinesRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.LineDisplayDisplayLinesRequestHandler = LineDisplayDisplayLinesRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var MagneticStripeReaderCloseRequestHandler = (function (_super) {
            __extends(MagneticStripeReaderCloseRequestHandler, _super);
            function MagneticStripeReaderCloseRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MagneticStripeReaderCloseRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.MagneticStripeReaderCloseRequest;
            };
            MagneticStripeReaderCloseRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.HardwareStation.HardwareStationContext
                    .instance
                    .peripheral(Commerce.Peripherals.HardwareStation.MagneticStripeReader.HS_PERIPHERAL_NAME)
                    .execute(Commerce.Peripherals.HardwareStation.LongPollingLockPeripheralBase.HS_UNLOCK_ACTION, null, request.timeout, request.suppressGlobalErrorEvent)
                    .map(function () {
                    return { canceled: false, data: new Commerce.MagneticStripeReaderCloseResponse() };
                }).getPromise();
            };
            return MagneticStripeReaderCloseRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.MagneticStripeReaderCloseRequestHandler = MagneticStripeReaderCloseRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var MagneticStripeReaderGetMsrSwipeRequestHandler = (function (_super) {
            __extends(MagneticStripeReaderGetMsrSwipeRequestHandler, _super);
            function MagneticStripeReaderGetMsrSwipeRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MagneticStripeReaderGetMsrSwipeRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.MagneticStripeReaderGetMsrSwipeRequest;
            };
            MagneticStripeReaderGetMsrSwipeRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.HardwareStation.HardwareStationContext
                    .instance
                    .peripheral(Commerce.Peripherals.HardwareStation.MagneticStripeReader.HS_PERIPHERAL_NAME)
                    .execute(Commerce.Peripherals.HardwareStation.MagneticStripeReader.HS_GETMSRSWIPEINFO_ACTION, request.data, request.timeout, request.suppressGlobalErrorEvent)
                    .map(function (magneticStripeReaderInfo) {
                    return { canceled: false, data: new Commerce.MagneticStripeReaderGetMsrSwipeResponse(magneticStripeReaderInfo) };
                }).getPromise();
            };
            return MagneticStripeReaderGetMsrSwipeRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.MagneticStripeReaderGetMsrSwipeRequestHandler = MagneticStripeReaderGetMsrSwipeRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var MagneticStripeReaderOpenRequestHandler = (function (_super) {
            __extends(MagneticStripeReaderOpenRequestHandler, _super);
            function MagneticStripeReaderOpenRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MagneticStripeReaderOpenRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.MagneticStripeReaderOpenRequest;
            };
            MagneticStripeReaderOpenRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.HardwareStation.HardwareStationContext
                    .instance
                    .peripheral(Commerce.Peripherals.HardwareStation.MagneticStripeReader.HS_PERIPHERAL_NAME)
                    .execute(Commerce.Peripherals.HardwareStation.LongPollingLockPeripheralBase.HS_LOCK_ACTION, request.data, request.timeout, request.suppressGlobalErrorEvent)
                    .map(function () {
                    return { canceled: false, data: new Commerce.MagneticStripeReaderOpenResponse() };
                }).getPromise();
            };
            return MagneticStripeReaderOpenRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.MagneticStripeReaderOpenRequestHandler = MagneticStripeReaderOpenRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalActivateGiftCardPeripheralRequestHandler = (function (_super) {
            __extends(PaymentTerminalActivateGiftCardPeripheralRequestHandler, _super);
            function PaymentTerminalActivateGiftCardPeripheralRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalActivateGiftCardPeripheralRequestHandler.prototype.supportedRequestType = function () {
                return Peripherals.PaymentTerminalActivateGiftCardPeripheralRequest;
            };
            PaymentTerminalActivateGiftCardPeripheralRequestHandler.prototype.executeAsync = function (request) {
                var paymentTerminal = Peripherals.instance.paymentTerminal;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)) {
                    return paymentTerminal.activateGiftCard(request.amount, request.tenderInfo, request.paymentConnectorId, request.extensionTransactionProperties)
                        .map(function (paymentInfo) {
                        return {
                            canceled: false,
                            data: new Peripherals.PaymentTerminalActivateGiftCardPeripheralResponse(paymentInfo)
                        };
                    }).getPromise();
                }
                else {
                    return Promise.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)]);
                }
            };
            return PaymentTerminalActivateGiftCardPeripheralRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalActivateGiftCardPeripheralRequestHandler = PaymentTerminalActivateGiftCardPeripheralRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler = (function (_super) {
            __extends(PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler, _super);
            function PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler.prototype.supportedRequestType = function () {
                return Peripherals.PaymentTerminalAddBalanceToGiftCardPeripheralRequest;
            };
            PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler.prototype.executeAsync = function (request) {
                var paymentTerminal = Peripherals.instance.paymentTerminal;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)) {
                    return paymentTerminal.addBalanceToGiftCard(request.amount, request.tenderInfo, request.paymentConnectorId, request.extensionTransactionProperties)
                        .map(function (paymentInfo) {
                        return {
                            canceled: false,
                            data: new Peripherals.PaymentTerminalAddBalanceToGiftCardPeripheralResponse(paymentInfo)
                        };
                    }).getPromise();
                }
                else {
                    return Promise.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)]);
                }
            };
            return PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler = PaymentTerminalAddBalanceToGiftCardPeripheralRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalAuthorizePaymentActivityRequestHandler = (function (_super) {
            __extends(PaymentTerminalAuthorizePaymentActivityRequestHandler, _super);
            function PaymentTerminalAuthorizePaymentActivityRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalAuthorizePaymentActivityRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalAuthorizePaymentActivityRequest;
            };
            PaymentTerminalAuthorizePaymentActivityRequestHandler.prototype.executeAsync = function (request) {
                if (request.amount < 0) {
                    throw new Error("Authorization can not be completed for a negative amount.");
                }
                var paymentTerminalAuthRefundActivityContext = {
                    paymentConnectorId: request.paymentConnectorId,
                    amount: request.amount,
                    tenderInfo: request.tenderInfo,
                    voiceAuthorization: request.voiceAuthorization,
                    isManualEntry: request.isManualEntry,
                    paymentTransactionReferenceData: request.paymentTransactionReferenceData,
                    extensionTransactionProperties: request.extensionTransactionProperties,
                };
                var paymentTerminalAuthRefundActivity = new Commerce.Activities.PaymentTerminalAuthorizeRefundActivity(paymentTerminalAuthRefundActivityContext);
                return paymentTerminalAuthRefundActivity.execute().map(function () {
                    var response = new Commerce.PaymentTerminalAuthorizePaymentActivityResponse(paymentTerminalAuthRefundActivity.response.paymentInfo);
                    return {
                        canceled: false,
                        data: response
                    };
                }).getPromise();
            };
            return PaymentTerminalAuthorizePaymentActivityRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalAuthorizePaymentActivityRequestHandler = PaymentTerminalAuthorizePaymentActivityRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalAuthorizePaymentRequestHandler = (function (_super) {
            __extends(PaymentTerminalAuthorizePaymentRequestHandler, _super);
            function PaymentTerminalAuthorizePaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalAuthorizePaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalAuthorizePaymentRequest;
            };
            PaymentTerminalAuthorizePaymentRequestHandler.prototype.executeAsync = function (request) {
                var amount = request.amount;
                var voiceAuthorization = request.voiceAuthorization;
                var isManualEntry = request.isManualEntry;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                var tenderInfo = request.tenderInfo;
                return Commerce.Peripherals.instance.paymentTerminal.authorizePayment(request.paymentConnectorId, amount, tenderInfo, voiceAuthorization, isManualEntry, request.paymentTransactionReferenceData, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.PaymentTerminalAuthorizePaymentResponse(value) };
                }).getPromise();
            };
            return PaymentTerminalAuthorizePaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalAuthorizePaymentRequestHandler = PaymentTerminalAuthorizePaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalBeginTransactionRequestHandler = (function (_super) {
            __extends(PaymentTerminalBeginTransactionRequestHandler, _super);
            function PaymentTerminalBeginTransactionRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalBeginTransactionRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalBeginTransactionRequest;
            };
            PaymentTerminalBeginTransactionRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.paymentTerminal.beginTransaction(request.extensionTransactionProperties)
                    .map(function () {
                    return { canceled: false, data: new Commerce.PaymentTerminalBeginTransactionResponse() };
                }).getPromise();
            };
            return PaymentTerminalBeginTransactionRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalBeginTransactionRequestHandler = PaymentTerminalBeginTransactionRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalCancelOperationRequestHandler = (function (_super) {
            __extends(PaymentTerminalCancelOperationRequestHandler, _super);
            function PaymentTerminalCancelOperationRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalCancelOperationRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalCancelOperationRequest;
            };
            PaymentTerminalCancelOperationRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.paymentTerminal.cancelOperation()
                    .map(function () {
                    return { canceled: false, data: new Commerce.PaymentTerminalCancelOperationResponse() };
                }).getPromise();
            };
            return PaymentTerminalCancelOperationRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalCancelOperationRequestHandler = PaymentTerminalCancelOperationRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalCapturePaymentRequestHandler = (function (_super) {
            __extends(PaymentTerminalCapturePaymentRequestHandler, _super);
            function PaymentTerminalCapturePaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalCapturePaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalCapturePaymentRequest;
            };
            PaymentTerminalCapturePaymentRequestHandler.prototype.executeAsync = function (request) {
                var amount = request.amount;
                var paymentProperties = request.paymentProperties;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.paymentTerminal.capturePayment(amount, paymentProperties, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.PaymentTerminalCapturePaymentResponse(value) };
                }).getPromise();
            };
            return PaymentTerminalCapturePaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalCapturePaymentRequestHandler = PaymentTerminalCapturePaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalEndTransactionRequestHandler = (function (_super) {
            __extends(PaymentTerminalEndTransactionRequestHandler, _super);
            function PaymentTerminalEndTransactionRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalEndTransactionRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalEndTransactionRequest;
            };
            PaymentTerminalEndTransactionRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.paymentTerminal.endTransaction()
                    .map(function () {
                    return { canceled: false, data: new Commerce.PaymentTerminalEndTransactionResponse() };
                }).getPromise();
            };
            return PaymentTerminalEndTransactionRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalEndTransactionRequestHandler = PaymentTerminalEndTransactionRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler = (function (_super) {
            __extends(PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler, _super);
            function PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalEnquireGiftCardBalancePeripheralRequest;
            };
            PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler.prototype.executeAsync = function (request) {
                var paymentTerminal = Peripherals.instance.paymentTerminal;
                if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)) {
                    return paymentTerminal.enquireGiftCardBalance(request.tenderInfo, request.paymentConnectorId, request.extensionTransactionProperties)
                        .map(function (paymentInfo) {
                        return {
                            canceled: false,
                            data: new Commerce.PaymentTerminalEnquireGiftCardBalancePeripheralResponse(paymentInfo)
                        };
                    }).getPromise();
                }
                else {
                    return Promise.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)]);
                }
            };
            return PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler = PaymentTerminalEnquireGiftCardBalancePeripheralRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalExecuteTaskRequestHandler = (function (_super) {
            __extends(PaymentTerminalExecuteTaskRequestHandler, _super);
            function PaymentTerminalExecuteTaskRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalExecuteTaskRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalExecuteTaskRequest;
            };
            PaymentTerminalExecuteTaskRequestHandler.prototype.executeAsync = function (request) {
                var task = request.task;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.paymentTerminal.executeTask(task, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.PaymentTerminalExecuteTaskResponse(value) };
                }).getPromise();
            };
            return PaymentTerminalExecuteTaskRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalExecuteTaskRequestHandler = PaymentTerminalExecuteTaskRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalFetchTokenPeripheralRequestHandler = (function (_super) {
            __extends(PaymentTerminalFetchTokenPeripheralRequestHandler, _super);
            function PaymentTerminalFetchTokenPeripheralRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalFetchTokenPeripheralRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalFetchTokenPeripheralRequest;
            };
            PaymentTerminalFetchTokenPeripheralRequestHandler.prototype.executeAsync = function (request) {
                Commerce.RetailLogger.viewsOrderPaymentViewCardTokenizationStarted(request.correlationId);
                return Commerce.Peripherals.instance.paymentTerminal.fetchToken(request.isManualEntry, request.extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.PaymentTerminalFetchTokenPeripheralResponse(value) };
                }).getPromise();
            };
            return PaymentTerminalFetchTokenPeripheralRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalFetchTokenPeripheralRequestHandler = PaymentTerminalFetchTokenPeripheralRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalGetTransactionByTransactionReferenceRequestHandler = (function (_super) {
            __extends(PaymentTerminalGetTransactionByTransactionReferenceRequestHandler, _super);
            function PaymentTerminalGetTransactionByTransactionReferenceRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalGetTransactionByTransactionReferenceRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalGetTransactionByTransactionReferenceRequest;
            };
            PaymentTerminalGetTransactionByTransactionReferenceRequestHandler.prototype.executeAsync = function (request) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                    throw new Error("The executeAsync method of PaymentTerminalGetTransactionByTransactionReferenceRequestHandler expects not null request.");
                }
                return Peripherals.instance.paymentTerminal.getTransactionByTransactionReference(request.paymentTransactionReference)
                    .recoverOnFailure(function (errors) {
                    var serializedCorrelationId = JSON.stringify(request.paymentTransactionReference);
                    var serializedErrors = Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors);
                    Commerce.RetailLogger.posPaymentFailedToRetrieveTransactionByTransactionReferenceData(serializedCorrelationId, serializedErrors, request.correlationId);
                    return Commerce.AsyncResult.createResolved(null);
                })
                    .map(function (value) {
                    return {
                        canceled: false, data: new Commerce.PaymentTerminalGetTransactionByTransactionReferenceResponse(value)
                    };
                }).getPromise();
            };
            return PaymentTerminalGetTransactionByTransactionReferenceRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalGetTransactionByTransactionReferenceRequestHandler = PaymentTerminalGetTransactionByTransactionReferenceRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalGetTransactionReferenceIdRequestHandler = (function (_super) {
            __extends(PaymentTerminalGetTransactionReferenceIdRequestHandler, _super);
            function PaymentTerminalGetTransactionReferenceIdRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalGetTransactionReferenceIdRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalGetTransactionReferenceIdRequest;
            };
            PaymentTerminalGetTransactionReferenceIdRequestHandler.prototype.executeAsync = function (request) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                    throw new Error("The executeAsync method of PaymentTerminalGetTransactionReferenceIdRequestHandler expects not null request.");
                }
                return Peripherals.instance.paymentTerminal.getPaymentTransactionReferenceId(request.posTerminalId, request.eftTerminalId)
                    .recoverOnFailure(function (errors) {
                    var serializedErrors = Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors);
                    Commerce.RetailLogger.posPaymentFailedToRetrievePaymentTransactionReferenceId(request.correlationId, serializedErrors);
                    return Commerce.AsyncResult.createResolved(null);
                })
                    .map(function (value) {
                    return {
                        canceled: false, data: new Commerce.PaymentTerminalGetTransactionReferenceIdResponse(value)
                    };
                }).getPromise();
            };
            return PaymentTerminalGetTransactionReferenceIdRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalGetTransactionReferenceIdRequestHandler = PaymentTerminalGetTransactionReferenceIdRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalRefundPaymentActivityRequestHandler = (function (_super) {
            __extends(PaymentTerminalRefundPaymentActivityRequestHandler, _super);
            function PaymentTerminalRefundPaymentActivityRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalRefundPaymentActivityRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalRefundPaymentActivityRequest;
            };
            PaymentTerminalRefundPaymentActivityRequestHandler.prototype.executeAsync = function (request) {
                if (request.amount <= 0) {
                    throw new Error("Refund must be for a positive amount.");
                }
                var paymentTerminalAuthRefundActivityContext = {
                    paymentConnectorId: request.paymentConnectorId,
                    amount: request.amount * -1,
                    tenderInfo: request.tenderInfo,
                    voiceAuthorization: request.voiceAuthorization,
                    isManualEntry: request.isManualEntry,
                    paymentTransactionReferenceData: request.paymentTransactionReferenceData,
                    extensionTransactionProperties: request.extensionTransactionProperties
                };
                var paymentTerminalAuthRefundActivity = new Commerce.Activities.PaymentTerminalAuthorizeRefundActivity(paymentTerminalAuthRefundActivityContext);
                return paymentTerminalAuthRefundActivity.execute().map(function () {
                    var response = new Commerce.PaymentTerminalRefundPaymentActivityResponse(paymentTerminalAuthRefundActivity.response.paymentInfo);
                    return {
                        canceled: false,
                        data: response
                    };
                }).getPromise();
            };
            return PaymentTerminalRefundPaymentActivityRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalRefundPaymentActivityRequestHandler = PaymentTerminalRefundPaymentActivityRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalRefundPaymentRequestHandler = (function (_super) {
            __extends(PaymentTerminalRefundPaymentRequestHandler, _super);
            function PaymentTerminalRefundPaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalRefundPaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalRefundPaymentRequest;
            };
            PaymentTerminalRefundPaymentRequestHandler.prototype.executeAsync = function (request) {
                var amount = request.amount;
                var isManualEntry = request.isManualEntry;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.paymentTerminal.refundPayment(request.paymentConnectorId, amount, request.tenderInfo, isManualEntry, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.PaymentTerminalRefundPaymentResponse(value) };
                }).getPromise();
            };
            return PaymentTerminalRefundPaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalRefundPaymentRequestHandler = PaymentTerminalRefundPaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalUpdateLinesRequestHandler = (function (_super) {
            __extends(PaymentTerminalUpdateLinesRequestHandler, _super);
            function PaymentTerminalUpdateLinesRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalUpdateLinesRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalUpdateLinesRequest;
            };
            PaymentTerminalUpdateLinesRequestHandler.prototype.executeAsync = function (request) {
                var cart = request.cart;
                return Commerce.Peripherals.instance.paymentTerminal.displayTransaction(cart)
                    .map(function () {
                    return { canceled: false, data: new Commerce.PaymentTerminalUpdateLinesResponse() };
                }).getPromise();
            };
            return PaymentTerminalUpdateLinesRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalUpdateLinesRequestHandler = PaymentTerminalUpdateLinesRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PaymentTerminalVoidPaymentRequestHandler = (function (_super) {
            __extends(PaymentTerminalVoidPaymentRequestHandler, _super);
            function PaymentTerminalVoidPaymentRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PaymentTerminalVoidPaymentRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PaymentTerminalVoidPaymentRequest;
            };
            PaymentTerminalVoidPaymentRequestHandler.prototype.executeAsync = function (request) {
                var amount = request.amount;
                var paymentProperties = request.paymentProperties;
                var extensionTransactionProperties = request.extensionTransactionProperties;
                return Commerce.Peripherals.instance.paymentTerminal.voidPayment(request.paymentConnectorId, amount, request.tenderInfo, paymentProperties, extensionTransactionProperties)
                    .map(function (value) {
                    return { canceled: false, data: new Commerce.PaymentTerminalVoidPaymentResponse(value) };
                }).getPromise();
            };
            return PaymentTerminalVoidPaymentRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PaymentTerminalVoidPaymentRequestHandler = PaymentTerminalVoidPaymentRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var PrinterPrintRequestHandler = (function (_super) {
            __extends(PrinterPrintRequestHandler, _super);
            function PrinterPrintRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PrinterPrintRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.PrinterPrintRequest;
            };
            PrinterPrintRequestHandler.prototype.executeAsync = function (request) {
                var printableReceipts = Commerce.ReceiptHelper.getPrintableReceipts(request.receipts);
                return Commerce.Peripherals.instance.printer.printAsync(printableReceipts).map(function () {
                    return { canceled: false, data: new Commerce.PrinterPrintResponse() };
                }).getPromise();
            };
            return PrinterPrintRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.PrinterPrintRequestHandler = PrinterPrintRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var ScaleReadRequestHandler = (function (_super) {
            __extends(ScaleReadRequestHandler, _super);
            function ScaleReadRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ScaleReadRequestHandler.prototype.supportedRequestType = function () {
                return Commerce.ScaleReadRequest;
            };
            ScaleReadRequestHandler.prototype.executeAsync = function (request) {
                return Commerce.Peripherals.instance.scale.read().map(function (value) {
                    return { canceled: false, data: new Commerce.ScaleReadResponse(value) };
                }).getPromise();
            };
            return ScaleReadRequestHandler;
        }(Commerce.RequestHandler));
        Peripherals.ScaleReadRequestHandler = ScaleReadRequestHandler;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var LongPollingSupportedEventsSourceTypes = (function () {
                function LongPollingSupportedEventsSourceTypes() {
                }
                LongPollingSupportedEventsSourceTypes.LOGON = "Logon";
                LongPollingSupportedEventsSourceTypes.CART = "Cart";
                LongPollingSupportedEventsSourceTypes.GIFT = "Gift";
                LongPollingSupportedEventsSourceTypes.PAYMENTS = "Payments";
                LongPollingSupportedEventsSourceTypes.EXTENDEDLOGON = "ExtendedLogon";
                LongPollingSupportedEventsSourceTypes.LOYALTY = "Loyalty";
                LongPollingSupportedEventsSourceTypes.NUMPADDIALOG = "NumpadDialog";
                return LongPollingSupportedEventsSourceTypes;
            }());
            HardwareStation.LongPollingSupportedEventsSourceTypes = LongPollingSupportedEventsSourceTypes;
            var LongPollingLockPeripheralBase = (function () {
                function LongPollingLockPeripheralBase(pollingTimeoutInSeconds) {
                    this._isLocked = false;
                    this._pollingTimeoutInSeconds = pollingTimeoutInSeconds || HardwareStation.HardwareStationContext.HS_DEFAULT_POLLING_TIMEOUT_IN_SECONDS;
                    this._eventHandlers = [];
                    this._asyncWorkerQueue = new Commerce.AsyncWorkerQueue();
                    this._longPollingHandlerSourceMap = new Commerce.Dictionary();
                    this.resetCurrentErrorTimeout();
                }
                LongPollingLockPeripheralBase.prototype.lockAsync = function (handler, handlerSource) {
                    var _this = this;
                    return this._asyncWorkerQueue.enqueue(function () {
                        return _this.lockInternalAsync(handlerSource, handler);
                    });
                };
                LongPollingLockPeripheralBase.prototype.unlockAsync = function (handlerSource) {
                    var _this = this;
                    return this._asyncWorkerQueue.enqueue(function () {
                        return _this.unlockInternalAsync(handlerSource);
                    });
                };
                LongPollingLockPeripheralBase.prototype.createLockRequest = function () {
                    throw "Abstract method. Not implemented";
                };
                Object.defineProperty(LongPollingLockPeripheralBase.prototype, "deviceType", {
                    get: function () {
                        throw "Abstract method. Not implemented";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(LongPollingLockPeripheralBase.prototype, "peripheralName", {
                    get: function () {
                        throw "Abstract method. Not implemented";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(LongPollingLockPeripheralBase.prototype, "getDataActionName", {
                    get: function () {
                        throw "Abstract method. Not implemented";
                    },
                    enumerable: true,
                    configurable: true
                });
                LongPollingLockPeripheralBase.prototype.handleData = function (handler, data) {
                    throw "Abstract method. Not implemented";
                };
                LongPollingLockPeripheralBase.prototype.executeLockRequestAsync = function (callback) {
                    throw "Abstract method. Not implemented";
                };
                LongPollingLockPeripheralBase.prototype.executeGetDataRequestAsync = function () {
                    throw "Abstract method. Not implemented";
                };
                LongPollingLockPeripheralBase.prototype.lockInternalAsync = function (handlerSource, handler) {
                    var _this = this;
                    if (!this.isConfigured()) {
                        return Commerce.VoidAsyncResult.createRejected();
                    }
                    var result;
                    if (this.isEnabled()) {
                        result = Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        result = this.sendLockRequestAsync(handlerSource);
                    }
                    result.done(function () {
                        _this._eventHandlers.push(handler);
                    });
                    return result;
                };
                LongPollingLockPeripheralBase.prototype.unlockInternalAsync = function (handlerSource) {
                    var _this = this;
                    if (!this.isConfigured() || !this.isEnabled()) {
                        return Commerce.VoidAsyncResult.createRejected();
                    }
                    var result;
                    if (this._eventHandlers.length > 1) {
                        result = Commerce.VoidAsyncResult.createResolved();
                    }
                    else {
                        this._isLocked = false;
                        result = Commerce.VoidAsyncResult.createResolved();
                    }
                    result.always(function () {
                        _this._eventHandlers.pop();
                    });
                    return result;
                };
                LongPollingLockPeripheralBase.prototype.sendLockRequestAsync = function (handlerSource) {
                    var _this = this;
                    var localHandlerSourceValue = this.getHandlerSource(handlerSource);
                    Commerce.RetailLogger.peripheralsLongPollingLockRequestInitiated(localHandlerSourceValue);
                    return this.executeLockRequestAsync(function () {
                        _this._isLocked = true;
                        _this._currentHandlerSource = handlerSource;
                        _this.doGetData(handlerSource);
                    });
                };
                LongPollingLockPeripheralBase.prototype.sendGetDataRequestAsync = function (handlerSource) {
                    var localHandlerSourceValue = this.getHandlerSource(handlerSource);
                    Commerce.RetailLogger.peripheralsLongPollingGetDataRequestInitiated(localHandlerSourceValue);
                    return this.executeGetDataRequestAsync();
                };
                LongPollingLockPeripheralBase.prototype.isConfigured = function () {
                    return this.deviceType === Commerce.Proxy.Entities.PeripheralType.OPOS;
                };
                LongPollingLockPeripheralBase.prototype.isEnabled = function () {
                    return this._isLocked;
                };
                LongPollingLockPeripheralBase.prototype.doGetData = function (handlerSource) {
                    var _this = this;
                    var isGetDataExists = this.isGetDataExistsForHandlerSource(handlerSource);
                    var shouldStopGetData = this.shouldStopGetData() || isGetDataExists;
                    if (shouldStopGetData) {
                        Commerce.RetailLogger.peripheralsLongPollingStopGetDataCall(handlerSource);
                        return;
                    }
                    this.incrementGetDataHandlerSource(handlerSource);
                    try {
                        this.sendGetDataRequestAsync(handlerSource)
                            .done(function (data) {
                            _this.decrementGetDataHandlerSource(handlerSource);
                            _this.onDoGetDataSuccess(handlerSource, data);
                        })
                            .fail(function (errors) {
                            Commerce.RetailLogger.peripheralsLongPollingLockGetDataError(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                            _this.decrementGetDataHandlerSource(handlerSource);
                            _this.onDoGetDataError(handlerSource, errors);
                        });
                    }
                    catch (error) {
                        Commerce.RetailLogger.peripheralsLongPollingLockGetDataError(this.getTraceMessage("Unhandled exception from get data long polling request call. Details: {0}", error));
                        this.decrementGetDataHandlerSource(handlerSource);
                    }
                };
                LongPollingLockPeripheralBase.prototype.incrementGetDataHandlerSource = function (handlerSource) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(handlerSource)) {
                        var count = this.getCountForGetDataHandlerSource(handlerSource);
                        Commerce.RetailLogger.peripheralsLongPollingGetDataCount(Commerce.StringExtensions.format("Increment {0}:{1}", handlerSource, count));
                        this._longPollingHandlerSourceMap.setItem(handlerSource, count + 1);
                    }
                };
                LongPollingLockPeripheralBase.prototype.decrementGetDataHandlerSource = function (handlerSource) {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(handlerSource)) {
                        var count = this.getCountForGetDataHandlerSource(handlerSource);
                        if (count > 0) {
                            Commerce.RetailLogger.peripheralsLongPollingGetDataCount(Commerce.StringExtensions.format("Decrement {0}:{1}", handlerSource, count));
                            this._longPollingHandlerSourceMap.setItem(handlerSource, count - 1);
                        }
                    }
                };
                LongPollingLockPeripheralBase.prototype.isGetDataExistsForHandlerSource = function (handlerSource) {
                    var isGetDataExists = false;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(handlerSource)) {
                        if (handlerSource !== this._currentHandlerSource) {
                            return true;
                        }
                        var count = this._longPollingHandlerSourceMap.getItem(handlerSource);
                        if (count > 0) {
                            isGetDataExists = true;
                        }
                    }
                    else {
                        Commerce.RetailLogger.peripheralsLongPollingRunningRequestWithNoHandlerSpecified();
                    }
                    return isGetDataExists;
                };
                LongPollingLockPeripheralBase.prototype.getCountForGetDataHandlerSource = function (handlerSource) {
                    var count = 0;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(handlerSource)) {
                        var isItemExists = this._longPollingHandlerSourceMap.hasItem(handlerSource);
                        if (isItemExists) {
                            count = this._longPollingHandlerSourceMap.getItem(handlerSource);
                        }
                    }
                    return count;
                };
                LongPollingLockPeripheralBase.prototype.onDoGetDataSuccess = function (handlerSource, data) {
                    this.resetCurrentErrorTimeout();
                    if (this.shouldStopGetData()) {
                        return;
                    }
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(data)) {
                        var handler = this._eventHandlers[this._eventHandlers.length - 1];
                        if (Commerce.ObjectExtensions.isFunction(handler)) {
                            try {
                                this.handleData(handler, data);
                            }
                            catch (e) {
                                Commerce.RetailLogger.peripheralsLongPollingLockGetDataUnhandledError(this.getTraceMessage("Unhandled data handle exception. Details: {0}", e));
                            }
                        }
                    }
                    this.doGetData(handlerSource);
                };
                LongPollingLockPeripheralBase.prototype.onDoGetDataError = function (handlerSource, errors) {
                    var _this = this;
                    if (this.shouldStopGetData()) {
                        return;
                    }
                    if (HardwareStation.HardwareStationContext.isLockNotAcquiredError(errors)) {
                        this._asyncWorkerQueue.enqueue(function () {
                            return _this.sendLockRequestAsync(handlerSource);
                        });
                        return;
                    }
                    setTimeout(function () {
                        _this.doGetData(handlerSource);
                    }, this._currentErrorTimeoutMs);
                    this.increaseCurrentErrorTimeout();
                };
                LongPollingLockPeripheralBase.prototype.shouldStopGetData = function () {
                    return !this._isLocked;
                };
                LongPollingLockPeripheralBase.prototype.getHandlerSource = function (handlerSource) {
                    return Commerce.StringExtensions.isNullOrWhitespace(handlerSource) ? LongPollingLockPeripheralBase.ANONYMOUS : handlerSource;
                };
                LongPollingLockPeripheralBase.prototype.resetCurrentErrorTimeout = function () {
                    this._currentErrorTimeoutMs = LongPollingLockPeripheralBase.ERROR_TIMEOUT_SEED_MS;
                };
                LongPollingLockPeripheralBase.prototype.increaseCurrentErrorTimeout = function () {
                    var newTimeout = this._currentErrorTimeoutMs * LongPollingLockPeripheralBase.ERROR_TIMEOUT_MULTIPLIER;
                    this._currentErrorTimeoutMs = Math.min(newTimeout, LongPollingLockPeripheralBase.MAX_ERROR_TIMEOUT_MS);
                };
                LongPollingLockPeripheralBase.prototype.getTraceMessage = function (message) {
                    var params = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        params[_i - 1] = arguments[_i];
                    }
                    var formattedMessage = Commerce.StringExtensions.format(message, params);
                    return Commerce.StringExtensions.format("Peripheral {0}. {1}", this.peripheralName, formattedMessage);
                };
                LongPollingLockPeripheralBase.HS_LOCK_ACTION = "Lock";
                LongPollingLockPeripheralBase.HS_UNLOCK_ACTION = "Unlock";
                LongPollingLockPeripheralBase.ANONYMOUS = "Anonymous";
                LongPollingLockPeripheralBase.ERROR_TIMEOUT_MULTIPLIER = 2;
                LongPollingLockPeripheralBase.ERROR_TIMEOUT_SEED_MS = 500;
                LongPollingLockPeripheralBase.MAX_ERROR_TIMEOUT_MS = LongPollingLockPeripheralBase.ERROR_TIMEOUT_SEED_MS
                    * Math.pow(LongPollingLockPeripheralBase.ERROR_TIMEOUT_MULTIPLIER, 4);
                return LongPollingLockPeripheralBase;
            }());
            HardwareStation.LongPollingLockPeripheralBase = LongPollingLockPeripheralBase;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var BarcodeScanner = (function (_super) {
                __extends(BarcodeScanner, _super);
                function BarcodeScanner(profile, pollingTimeoutInSeconds) {
                    var _this = _super.call(this, pollingTimeoutInSeconds) || this;
                    _this._profile = profile;
                    return _this;
                }
                BarcodeScanner.prototype.enableAsync = function (scannerMsgEventHandler) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(scannerMsgEventHandler)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    return this.lockAsync(scannerMsgEventHandler);
                };
                BarcodeScanner.prototype.disableAsync = function () {
                    return this.unlockAsync();
                };
                BarcodeScanner.prototype.createLockRequest = function () {
                    var lockRequest = {
                        DeviceName: this._profile.DeviceName,
                        DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[this._profile.DeviceTypeValue],
                        DecodeData: this._profile.DecodeData
                    };
                    return lockRequest;
                };
                Object.defineProperty(BarcodeScanner.prototype, "deviceType", {
                    get: function () {
                        return this._profile.DeviceTypeValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BarcodeScanner.prototype, "peripheralName", {
                    get: function () {
                        return BarcodeScanner.HS_PERIPHERAL_NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BarcodeScanner.prototype, "getDataActionName", {
                    get: function () {
                        return BarcodeScanner.HS_GETBARCODES_ACTION;
                    },
                    enumerable: true,
                    configurable: true
                });
                BarcodeScanner.prototype.handleData = function (handler, hsData) {
                    if (Commerce.ArrayExtensions.hasElements(hsData)) {
                        hsData.forEach(function (barcode) {
                            handler(barcode);
                        });
                    }
                };
                BarcodeScanner.prototype.executeLockRequestAsync = function (callback) {
                    var lockRequest = this.createLockRequest();
                    var request = new Commerce.BarcodeScannerOpenRequest(lockRequest, this._pollingTimeoutInSeconds, true);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)
                        .then(function () {
                        callback();
                    }));
                };
                BarcodeScanner.prototype.executeGetDataRequestAsync = function () {
                    var getDataRequest = {
                        TimeoutInSeconds: this._pollingTimeoutInSeconds
                    };
                    var request = new Commerce.BarcodeScannerGetBarcodesRequest(getDataRequest, null, true);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .map(function (barcodeResponse) {
                        return barcodeResponse.data.result;
                    });
                };
                BarcodeScanner.HS_GETBARCODES_ACTION = "GetBarcodes";
                BarcodeScanner.HS_PERIPHERAL_NAME = "BarcodeScanner";
                return BarcodeScanner;
            }(HardwareStation.LongPollingLockPeripheralBase));
            HardwareStation.BarcodeScanner = BarcodeScanner;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var CardPayment = (function () {
                function CardPayment() {
                }
                CardPayment.prototype.loadCartMerchantPropertiesAsync = function () {
                    var _this = this;
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(this._loadMerchantPropertiesAsyncResult)) {
                        Commerce.RetailLogger.posCardPaymentLoadingMerchantPropertiesAlreadyInProgress();
                        return this._loadMerchantPropertiesAsyncResult;
                    }
                    var sessionCart = Commerce.Session.instance.cart;
                    if (Commerce.CustomerOrderHelper.isCustomerOrder(sessionCart)
                        && (sessionCart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.OrderRecalled
                            || sessionCart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit
                            || sessionCart.CustomerOrderModeValue === Commerce.Proxy.Entities.CustomerOrderMode.Pickup)
                        && Commerce.ArrayExtensions.hasElements(sessionCart.TenderLines)) {
                        Commerce.RetailLogger.posCardPaymentLoadingMerchantPropertiesForCartStarted(sessionCart.Id);
                        var serviceAccountIds = Commerce.Session.instance.cart.TenderLines.filter(function (tenderLine) {
                            return tenderLine.StatusValue !== Commerce.Proxy.Entities.TenderLineStatus.Voided
                                && !Commerce.StringExtensions.isNullOrWhitespace(tenderLine.CardPaymentAccountId);
                        }).map(function (result) { return result.CardPaymentAccountId; });
                        Commerce.RetailLogger.posCardPaymentRetrievedServiceAccountIdsFromCartToLoadMerchantProperties(sessionCart.Id);
                        if (Commerce.ArrayExtensions.hasElements(serviceAccountIds)) {
                            this._loadMerchantPropertiesAsyncResult = new Commerce.VoidAsyncResult();
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._loadMerchantPropertiesAsyncResult)) {
                                this._loadMerchantPropertiesAsyncResult.always(function () {
                                    _this._loadMerchantPropertiesAsyncResult = null;
                                });
                            }
                            var storeOperationsManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                            Commerce.RetailLogger.posCardPaymentRetailServerCallToLoadMerchantPropertiesStarted(sessionCart.Id);
                            return storeOperationsManager.getMerchantPropertiesByServiceAccountIdAsync(serviceAccountIds)
                                .done(function (result) {
                                Commerce.RetailLogger.posCardPaymentRetailServerCallToLoadMerchantPropertiesCompletedSuccessfully(sessionCart.Id);
                                _this._cartMerchantProperties = result;
                                _this._loadMerchantPropertiesAsyncResult.resolve();
                            })
                                .fail(function (errors) {
                                Commerce.RetailLogger.posCardPaymentRetailServerCallToLoadMerchantPropertiesFailed(sessionCart.Id, Commerce.ErrorHelper.serializeError(errors));
                                _this._loadMerchantPropertiesAsyncResult.reject(errors);
                            });
                        }
                        Commerce.RetailLogger.posCardPaymentLoadingMerchantPropertiesForCartSkipped(sessionCart.Id);
                    }
                    return Commerce.VoidAsyncResult.createResolved();
                };
                CardPayment.prototype.clearCartMerchantProperties = function () {
                    this._cartMerchantProperties = null;
                    Commerce.RetailLogger.posCardPaymentClearedMerchantPropertiesForCart();
                };
                CardPayment.prototype.activateGiftCard = function (amount, tenderInfo, paymentConnectorId, extensionTransactionProperties) {
                    var _this = this;
                    var action = function () {
                        var activateGiftCardRequest = {
                            Token: null,
                            Amount: amount,
                            Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            TenderInfo: tenderInfo,
                            PaymentConnectorId: paymentConnectorId,
                            ExtensionTransactionProperties: extensionTransactionProperties
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                            .execute("ActivateGiftCard", activateGiftCardRequest);
                    };
                    return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                };
                CardPayment.prototype.addBalanceToGiftCard = function (amount, tenderInfo, paymentConnectorId, extensionTransactionProperties) {
                    var _this = this;
                    var action = function () {
                        var addBalanceToGiftCardRequest = {
                            Token: null,
                            Amount: amount,
                            Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            TenderInfo: tenderInfo,
                            PaymentConnectorId: paymentConnectorId,
                            ExtensionTransactionProperties: extensionTransactionProperties
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                            .execute("AddBalanceToGiftCard", addBalanceToGiftCardRequest);
                    };
                    return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                };
                CardPayment.prototype.enquireGiftCardBalance = function (tenderInfo, paymentConnectorId, extensionTransactionProperties) {
                    var _this = this;
                    var action = function () {
                        var getGiftCardBalance = {
                            Token: null,
                            Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            TenderInfo: tenderInfo,
                            PaymentConnectorId: paymentConnectorId,
                            ExtensionTransactionProperties: extensionTransactionProperties
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                            .execute("EnquireGiftCardBalance", getGiftCardBalance);
                    };
                    return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                };
                CardPayment.prototype.beginTransaction = function (callerContext) {
                    var debitCashbackLimit;
                    return new Commerce.AsyncQueue()
                        .enqueue(function () {
                        return Commerce.ApplicationContext.Instance.debitCashbackLimitAsync.value.done(function (limit) {
                            debitCashbackLimit = limit;
                        });
                    }).enqueue(function () {
                        var cardTenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderTypeByOperationId(Commerce.Operations.RetailOperation.PayCard);
                        var isCardPaymentMethodSetup = !Commerce.ObjectExtensions.isNullOrUndefined(cardTenderType);
                        var terminalSettings = {
                            SignatureCaptureMinimumAmount: isCardPaymentMethodSetup ? cardTenderType.MinimumSignatureCaptureAmount : 0,
                            MinimumAmountAllowed: isCardPaymentMethodSetup ? cardTenderType.MinimumAmountPerLine : 0,
                            MaximumAmountAllowed: isCardPaymentMethodSetup ? cardTenderType.MaximumAmountPerLine : 0,
                            DebitCashbackLimit: debitCashbackLimit,
                            Locale: Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName,
                            TerminalId: Commerce.ApplicationContext.Instance.activeEftTerminalId
                        };
                        var cardPaymentBeginTransactionRequest = {
                            Timeout: HardwareStation.HardwareStationContext.HS_DEFAULT_CARD_PAYMENT_TIMEOUT,
                            PaymentConnectorId: Commerce.ApplicationContext.Instance.hardwareProfile.EftPaymentConnectorName,
                            IsTestMode: Commerce.ApplicationContext.Instance.hardwareProfile.EftTestMode,
                            TerminalSettings: terminalSettings
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                            .execute("BeginTransaction", cardPaymentBeginTransactionRequest);
                    }).run();
                };
                CardPayment.prototype.endTransaction = function (callerContext) {
                    return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment").execute("EndTransaction");
                };
                CardPayment.prototype.authorizePayment = function (paymentConnectorId, amount, tenderInfo, extensionTransactionProperties, callerContext) {
                    var _this = this;
                    var action = function () {
                        var authorizeRequest = {
                            Token: null,
                            PaymentConnectorId: paymentConnectorId,
                            Amount: amount,
                            Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            TenderInfo: tenderInfo,
                            ExtensionTransactionProperties: extensionTransactionProperties
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                            .execute(Commerce.PaymentHelper.ACTION_AUTHORIZE_PAYMENT, authorizeRequest);
                    };
                    return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                };
                CardPayment.prototype.voidPayment = function (paymentConnectorId, amount, tenderInfo, paymentPropertiesXml, extensionTransactionProperties, paymentServiceAccountId, callerContext) {
                    var _this = this;
                    var result = new Commerce.AsyncResult();
                    this._getMerchantPropertiesForPaymentAsync(paymentServiceAccountId)
                        .done(function (merchantPropertiesXml) {
                        var action = function () {
                            var voidRequest = {
                                Token: null,
                                PaymentConnectorId: paymentConnectorId,
                                Amount: amount,
                                Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                                TenderInfo: tenderInfo,
                                PaymentPropertiesXml: paymentPropertiesXml,
                                MerchantPropertiesXml: merchantPropertiesXml,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment").execute("VoidPayment", voidRequest);
                        };
                        result.resolveOrRejectOn(HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); }));
                    });
                    return result;
                };
                CardPayment.prototype.capturePayment = function (amount, paymentPropertiesXml, extensionTransactionProperties, paymentServiceAccountId, callerContext) {
                    var _this = this;
                    var result = new Commerce.AsyncResult();
                    this._getMerchantPropertiesForPaymentAsync(paymentServiceAccountId)
                        .done(function (merchantPropertiesXml) {
                        var action = function () {
                            var captureRequest = {
                                Token: null,
                                Amount: amount,
                                Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                                PaymentPropertiesXml: paymentPropertiesXml,
                                MerchantPropertiesXml: merchantPropertiesXml,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                                .execute("CapturePayment", captureRequest);
                        };
                        result.resolveOrRejectOn(HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); }));
                    });
                    return result;
                };
                CardPayment.prototype.refundPayment = function (paymentConnectorId, amount, tenderInfo, extensionTransactionProperties, callerContext) {
                    var _this = this;
                    var action = function () {
                        var refundRequest = {
                            PaymentConnectorId: paymentConnectorId,
                            Token: null,
                            Amount: amount,
                            Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                            TenderInfo: tenderInfo,
                            ExtensionTransactionProperties: extensionTransactionProperties
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment").execute("RefundPayment", refundRequest);
                    };
                    return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                };
                CardPayment.prototype.fetchToken = function (tenderInfo, extensionTransactionProperties, callerContext) {
                    var _this = this;
                    var action = function () {
                        var fetchTokenRequest = {
                            Token: null,
                            TenderInfo: tenderInfo
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment").execute("FetchToken", fetchTokenRequest);
                    };
                    return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                };
                CardPayment.prototype.authorizeCardToken = function (amount, cardTokenXml, paymentServiceAccountId, extensionTransactionProperties) {
                    var _this = this;
                    var result = new Commerce.AsyncResult();
                    this._getMerchantPropertiesForPaymentAsync(paymentServiceAccountId)
                        .done(function (merchantPropertiesXml) {
                        var action = function () {
                            var authorizeCardTokenRequest = {
                                Token: null,
                                Amount: amount,
                                Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                                CardTokenXml: cardTokenXml,
                                PaymentMerchantPropertiesXml: merchantPropertiesXml,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                                .execute("AuthorizeCardToken", authorizeCardTokenRequest);
                        };
                        result.resolveOrRejectOn(HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); }));
                    });
                    return result;
                };
                CardPayment.prototype.executeTask = function (task, extensionTransactionProperties, callerContext) {
                    var _this = this;
                    var action = function () {
                        var executeTaskRequest = {
                            Task: task,
                            ExtensionTransactionProperties: extensionTransactionProperties
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral("CardPayment")
                            .execute("ExecuteTask", executeTaskRequest);
                    };
                    return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                };
                CardPayment.prototype._getMerchantPropertiesForPaymentAsync = function (paymentServiceAccountId) {
                    var _this = this;
                    var merchantPropertiesXml = Commerce.StringExtensions.EMPTY;
                    if (!Commerce.StringExtensions.isNullOrWhitespace(paymentServiceAccountId)) {
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(_this._cartMerchantProperties)) {
                                Commerce.RetailLogger.posCardPaymentMerchantPropertiesForPaymentExist(paymentServiceAccountId);
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                            else {
                                Commerce.RetailLogger.posCardPaymentLoadingMerchantPropertiesForPayment(paymentServiceAccountId);
                                return _this.loadCartMerchantPropertiesAsync();
                            }
                        }).enqueue(function () {
                            if (!Commerce.StringExtensions.isNullOrWhitespace(paymentServiceAccountId)) {
                                var merchantInfo = Commerce.ArrayExtensions.firstOrUndefined(_this._cartMerchantProperties, function (paymentMerchantInfo) {
                                    return paymentMerchantInfo.ServiceAccountId === paymentServiceAccountId;
                                });
                                merchantPropertiesXml = Commerce.ObjectExtensions.isNullOrUndefined(merchantInfo)
                                    ? Commerce.StringExtensions.EMPTY : merchantInfo.PaymentConnectorPropertiesXml;
                            }
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                        return asyncQueue.run().map(function () {
                            return merchantPropertiesXml;
                        });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(merchantPropertiesXml);
                    }
                };
                return CardPayment;
            }());
            HardwareStation.CardPayment = CardPayment;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var CashDrawer = (function () {
                function CashDrawer() {
                }
                CashDrawer.prototype.isOpenAsync = function (callerContext) {
                    return this.isOpenAsyncHelper(callerContext).done(function (isDrawerOpen) {
                        if (isDrawerOpen) {
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_OPEN_STATUS, "true");
                        }
                        else {
                            Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_OPEN_STATUS, "false");
                        }
                    });
                };
                CashDrawer.prototype.openAsync = function (callerContext) {
                    var cashDrawerRequest = this.getCashDrawerProfile();
                    if (cashDrawerRequest) {
                        Commerce.RetailLogger.peripheralsCashDrawerOpening(cashDrawerRequest.DeviceName, cashDrawerRequest.DeviceType);
                        Commerce.ApplicationStorage.setItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_OPEN_STATUS, "true");
                        return HardwareStation.HardwareStationContext.instance.peripheral("CashDrawer").execute("Open", cashDrawerRequest);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                CashDrawer.prototype.isOpenAsyncHelper = function (callerContext) {
                    var cashDrawerRequest = this.getCashDrawerProfile();
                    if (cashDrawerRequest) {
                        return HardwareStation.HardwareStationContext.instance.peripheral("CashDrawer").execute("IsOpen", cashDrawerRequest);
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(false);
                    }
                };
                CashDrawer.prototype.getCashDrawerProfile = function () {
                    var COMPONENT_NAME = "CashDrawer";
                    var cashDrawerName = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_NAME);
                    var activeCashDrawers = Commerce.ApplicationContext.Instance.hardwareProfile.CashDrawers.filter(function (profile) {
                        return (profile.DeviceName === cashDrawerName)
                            && ((profile.DeviceTypeValue === Commerce.Proxy.Entities.PeripheralType.OPOS)
                                || (profile.DeviceTypeValue === Commerce.Proxy.Entities.PeripheralType.Windows)
                                || (profile.DeviceTypeValue === Commerce.Proxy.Entities.PeripheralType.Network));
                    });
                    var cashDrawerRequest = null;
                    if (Commerce.ArrayExtensions.hasElements(activeCashDrawers)) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(cashDrawerName)) {
                            var cashDrawerType = parseInt(Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.CASH_DRAWER_TYPE), 10);
                            cashDrawerRequest = {
                                DeviceName: cashDrawerName,
                                DeviceType: Commerce.Proxy.Entities.PeripheralType[cashDrawerType]
                            };
                            var hardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                            if (cashDrawerType === Commerce.Proxy.Entities.PeripheralType.Network) {
                                var drawerConfigurations = void 0;
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation) &&
                                    hardwareStation.profileId &&
                                    !Peripherals.HardwareStation.HardwareStationContext.isLocalStation(hardwareStation)) {
                                    drawerConfigurations = hardwareStation.hardwareConfigurations.CashDrawerConfigurations;
                                }
                                else {
                                    drawerConfigurations = Commerce.ApplicationContext.Instance.deviceConfiguration.HardwareConfigurations.CashDrawerConfigurations;
                                }
                                if (drawerConfigurations) {
                                    var drawerConfiguration = Commerce.ArrayExtensions.firstOrUndefined(drawerConfigurations, function (d) { return (Commerce.StringExtensions.compare(d.DeviceName, cashDrawerName) === 0); });
                                    if (drawerConfiguration) {
                                        var ipConfig = {
                                            Key: HardwareStation.PeripheralConfigKey.IP_ADDRESS,
                                            Value: {
                                                StringValue: drawerConfiguration.IPAddress
                                            }
                                        };
                                        var portConfig = {
                                            Key: HardwareStation.PeripheralConfigKey.PORT,
                                            Value: {
                                                IntegerValue: drawerConfiguration.Port
                                            }
                                        };
                                        cashDrawerRequest.DeviceConfig = {
                                            ExtensionProperties: [ipConfig, portConfig]
                                        };
                                    }
                                }
                                if (Commerce.ObjectExtensions.isNullOrUndefined(cashDrawerRequest.DeviceConfig)) {
                                    Commerce.RetailLogger.peripheralsDeviceConfigNotDefined(COMPONENT_NAME, cashDrawerRequest.DeviceName, cashDrawerRequest.DeviceType, hardwareStation.profileId);
                                }
                            }
                            else {
                                Commerce.RetailLogger.peripheralsDeviceConfigDriverNotNetwork(COMPONENT_NAME, cashDrawerRequest.DeviceName, cashDrawerRequest.DeviceType, hardwareStation.profileId);
                            }
                        }
                    }
                    return cashDrawerRequest;
                };
                return CashDrawer;
            }());
            HardwareStation.CashDrawer = CashDrawer;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var CompositeBarcodeScanner = (function () {
                function CompositeBarcodeScanner(pollingTimeoutInSeconds) {
                    this._pollingTimeoutInSeconds = pollingTimeoutInSeconds;
                    this.initializeLazyCollection();
                    this._usageCount = 0;
                }
                CompositeBarcodeScanner.prototype.enableAsync = function (scannerMsgEventHandler) {
                    this._usageCount++;
                    return Commerce.VoidAsyncResult.join(this._barcodesLazy.value.map(function (scanner) {
                        return scanner.enableAsync(scannerMsgEventHandler);
                    }));
                };
                CompositeBarcodeScanner.prototype.disableAsync = function () {
                    var scanners = this._barcodesLazy.value;
                    if (--this._usageCount === 0) {
                        this.initializeLazyCollection();
                    }
                    return Commerce.VoidAsyncResult.join(scanners.map(function (scanner) {
                        return scanner.disableAsync();
                    }));
                };
                CompositeBarcodeScanner.prototype.initializeLazyCollection = function () {
                    var _this = this;
                    this._barcodesLazy = new Commerce.Lazy(function () {
                        return _this.initializeBarcodeScanners(_this._pollingTimeoutInSeconds);
                    });
                };
                CompositeBarcodeScanner.prototype.initializeBarcodeScanners = function (pollingTimeoutInSeconds) {
                    var scanners = [];
                    var scannerProfiles = Commerce.ApplicationContext.Instance.hardwareProfile.Scanners;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(scannerProfiles)) {
                        Commerce.RetailLogger.peripheralsCompositeBarcodeScannerObjectNotDefined("HardwareProfile.Scanners");
                        return scanners;
                    }
                    scannerProfiles.forEach(function (profile) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(profile) && profile.DeviceTypeValue !== Commerce.Proxy.Entities.PeripheralType.None) {
                            scanners.push(new HardwareStation.BarcodeScanner(profile, pollingTimeoutInSeconds));
                        }
                    });
                    return scanners;
                };
                return CompositeBarcodeScanner;
            }());
            HardwareStation.CompositeBarcodeScanner = CompositeBarcodeScanner;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var FiscalPeripheral = (function () {
                function FiscalPeripheral() {
                }
                FiscalPeripheral.prototype.isReady = function (fiscalPeripheralInfo) {
                    var request = {
                        FiscalPeripheralInfo: fiscalPeripheralInfo
                    };
                    return this._createHardwareStationRequest().execute("IsReady", request);
                };
                FiscalPeripheral.prototype.initialize = function (document, fiscalPeripheralInfo) {
                    var request = {
                        Document: document,
                        FiscalPeripheralInfo: fiscalPeripheralInfo
                    };
                    return this._createHardwareStationRequest().execute("Initialize", request);
                };
                FiscalPeripheral.prototype.submitDocument = function (document, fiscalPeripheralInfo) {
                    var request = {
                        Document: document,
                        FiscalPeripheralInfo: fiscalPeripheralInfo
                    };
                    return this._createHardwareStationRequest().execute("SubmitDocument", request);
                };
                FiscalPeripheral.prototype.getData = function (document, fiscalPeripheralInfo) {
                    var request = {
                        Document: document,
                        FiscalPeripheralInfo: fiscalPeripheralInfo
                    };
                    return this._createHardwareStationRequest().execute("GetData", request);
                };
                FiscalPeripheral.prototype._createHardwareStationRequest = function () {
                    return HardwareStation.HardwareStationContext.instance.peripheral("FiscalPeripheral");
                };
                return FiscalPeripheral;
            }());
            HardwareStation.FiscalPeripheral = FiscalPeripheral;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var HardwareStationRequest = (function () {
                function HardwareStationRequest(hardwareStation, peripheral, onError) {
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation)) {
                        this._hardwareStation = hardwareStation;
                        this._requestUri = Commerce.StringExtensions.format(HardwareStationRequest.REQUEST_URI_FORMAT, hardwareStation.url, peripheral);
                        var deviceName = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.DEVICE_ID_KEY);
                        var regEx = new RegExp("\\s");
                        var updatedDeviceName = deviceName.replace(regEx, "^");
                        this._requestAuthorization = Commerce.StringExtensions.format(HardwareStationRequest.REQUEST_AUTHORIZATION_FORMAT, updatedDeviceName, Commerce.HardwareStationEndpointStorage.getHardwareStationToken(hardwareStation.recordId, hardwareStation.url) || Commerce.StringExtensions.EMPTY);
                    }
                    this._onError = onError;
                }
                HardwareStationRequest.prototype.execute = function (action, data, timeout, suppressGlobalErrorEvent, activityId) {
                    var _this = this;
                    activityId = Commerce.LoggerHelper.resolveCorrelationId(activityId);
                    timeout = this._getRequestTimeoutPeriodInMilliseconds(timeout);
                    var executeRequestAsyncQueue = new Commerce.AsyncQueue();
                    var targetHardwareStationRequestUri = Commerce.StringExtensions.EMPTY;
                    var requestBody = data ? JSON.stringify(data, null, 2) : null;
                    var requestLocale = Commerce.RequestHelper.getRequestLocaleInternal();
                    executeRequestAsyncQueue.enqueue(function () {
                        return _this._validateHardwareStationRequestUri(_this._requestUri)
                            .fail(function (errors) {
                            if (Commerce.ArrayExtensions.hasElements(errors) && errors[0].ErrorCode === Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED) {
                                var isHardwareStationEnabled = Commerce.ApplicationStorage.getItem(Commerce.ApplicationStorageIDs.HARDWARE_STATION_FEATURE_ENABLE);
                                if (Commerce.Session.instance.getErrorDisplayState(Commerce.ErrorsDisplayedPerSession.NoActiveHardwareStationError)
                                    && isHardwareStationEnabled === "true") {
                                    Commerce.NotificationHandler.displayClientErrorsWithShowAgain(errors, "string_12000")
                                        .done(function (result) {
                                        Commerce.Session.instance.setErrorDisplayState(Commerce.ErrorsDisplayedPerSession.NoActiveHardwareStationError, !result.messageCheckboxChecked);
                                    });
                                }
                            }
                        });
                    }).enqueue(function () {
                        targetHardwareStationRequestUri = Commerce.StringExtensions.format(HardwareStationRequest.REQUEST_URI_FORMAT, _this._requestUri, action);
                        var isActiveHardwareStationLocal = _this._requestUri.toUpperCase().indexOf(HardwareStation.HardwareStationContext.localStation) === 0;
                        if (isActiveHardwareStationLocal) {
                            return _this._executeLocalHardwareStationRequest(activityId, action, targetHardwareStationRequestUri, requestBody, requestLocale, timeout, suppressGlobalErrorEvent);
                        }
                        else {
                            return _this._executeSharedHardwareStationRequest(activityId, action, targetHardwareStationRequestUri, requestBody, requestLocale, timeout, suppressGlobalErrorEvent);
                        }
                    });
                    return executeRequestAsyncQueue
                        .run()
                        .map(function (result) {
                        return result.data;
                    });
                };
                HardwareStationRequest.prototype._getRequestTimeoutPeriodInMilliseconds = function (requestTimeoutPeriod) {
                    var result = Commerce.NumberExtensions.isNullNaNOrZero(requestTimeoutPeriod)
                        ? Commerce.Config.connectionTimeout
                        : requestTimeoutPeriod;
                    result *= 1000;
                    return result;
                };
                HardwareStationRequest.prototype._validateHardwareStationRequestUri = function (hardwareStationUri) {
                    var result = new Commerce.VoidAsyncResult();
                    if (Commerce.StringExtensions.isNullOrWhitespace(hardwareStationUri)) {
                        var hardwareStationNotConfiguredErrors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PERIPHERALS_HARDWARESTATION_NOTCONFIGURED)];
                        result.reject(hardwareStationNotConfiguredErrors);
                    }
                    else {
                        result.resolve();
                    }
                    return result;
                };
                HardwareStationRequest.prototype._executeLocalHardwareStationRequest = function (activityId, action, targetHardwareStationRequestUri, requestBody, requestLocale, timeout, suppressGlobalErrorEvent) {
                    var _this = this;
                    var asyncResult = new Commerce.AsyncResult();
                    try {
                        var executionCompleted_1 = false;
                        var timeoutHandle_1 = 0;
                        var onTimeout = function () {
                            if (!executionCompleted_1) {
                                executionCompleted_1 = true;
                                var errors = [
                                    new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVER_TIMEOUT)
                                ];
                                Commerce.RetailLogger.posInitiatedHardwareStationRequestTimedOut(activityId, targetHardwareStationRequestUri, action, timeout, requestLocale);
                                asyncResult.reject(errors);
                            }
                        };
                        var resolve_1 = function (result) {
                            if (!executionCompleted_1) {
                                executionCompleted_1 = true;
                                clearTimeout(timeoutHandle_1);
                                Commerce.RetailLogger.posInitiatedHardwareStationRequestSucceeded(activityId, targetHardwareStationRequestUri, action, timeout, requestLocale);
                                asyncResult.resolve(result.responseText ? JSON.parse(result.responseText) : null);
                            }
                        };
                        var reject_1 = function (result) {
                            if (!executionCompleted_1) {
                                executionCompleted_1 = true;
                                clearTimeout(timeoutHandle_1);
                                asyncResult.resolveOrRejectOn(_this._onHardwareStationError(activityId, result, targetHardwareStationRequestUri, action, requestBody, timeout, requestLocale, suppressGlobalErrorEvent));
                            }
                        };
                        Commerce.RetailLogger.posInitiatedHardwareStationRequestStarted(activityId, targetHardwareStationRequestUri, action, timeout, requestLocale);
                        var dedicatedRequest = new Commerce.DedicatedHardwareStationRequest(targetHardwareStationRequestUri, action, requestBody, requestLocale, timeout, activityId);
                        Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(dedicatedRequest))
                            .done(function (dedicatedResponse) {
                            if (Commerce.Proxy.Common.HttpStatusCodes.isSuccessful(dedicatedResponse.data.result.status)) {
                                resolve_1(dedicatedResponse.data.result);
                            }
                            else {
                                reject_1(dedicatedResponse.data.result);
                            }
                        }).fail(function (errors) { reject_1(errors); });
                        if (timeout > 0) {
                            timeoutHandle_1 = setTimeout(onTimeout, timeout);
                        }
                    }
                    catch (error) {
                        asyncResult.resolveOrRejectOn(this._onHardwareStationError(activityId, error, targetHardwareStationRequestUri, action, requestBody, timeout, requestLocale, suppressGlobalErrorEvent));
                    }
                    return asyncResult;
                };
                HardwareStationRequest.prototype._executeSharedHardwareStationRequest = function (activityId, action, targetHardwareStationRequestUri, requestBody, requestLocale, timeout, suppressGlobalErrorEvent) {
                    var _this = this;
                    var asyncResult = new Commerce.AsyncResult();
                    $.ajax(targetHardwareStationRequestUri, {
                        type: HardwareStationRequest.POST_HTTP_REQUEST_METHOD,
                        data: requestBody,
                        contentType: HardwareStationRequest.APPLICATION_JSON_HTTP_CONTENT_TYPE_HEADER_VALUE,
                        timeout: timeout,
                        accepts: HardwareStationRequest.APPLICATION_JSON_HTTP_CONTENT_TYPE_HEADER_VALUE,
                        beforeSend: function (request) {
                            request.setRequestHeader(HardwareStationRequest.AUTHORIZATION_HEADER_NAME, _this._requestAuthorization);
                            request.setRequestHeader(HardwareStationRequest.ACTIVITYID_HEADER_NAME, activityId);
                            if (!Commerce.StringExtensions.isNullOrWhitespace(requestLocale)) {
                                request.setRequestHeader(HardwareStationRequest.ACCEPT_LANGUAGE_HEADER_NAME, requestLocale);
                            }
                            Commerce.RetailLogger.posInitiatedHardwareStationRequestStarted(activityId, targetHardwareStationRequestUri, action, timeout, requestLocale);
                        },
                        cache: false,
                        crossDomain: true,
                        success: function (result) {
                            Commerce.RetailLogger.posInitiatedHardwareStationRequestSucceeded(activityId, targetHardwareStationRequestUri, action, timeout, requestLocale);
                            asyncResult.resolve(result);
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            if (!Commerce.StringExtensions.isNullOrWhitespace(textStatus) && textStatus === "timeout") {
                                Commerce.RetailLogger.posInitiatedHardwareStationRequestTimedOut(activityId, targetHardwareStationRequestUri, action, timeout, requestLocale);
                                var serverTimeoutError = [
                                    new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SERVER_TIMEOUT)
                                ];
                                asyncResult.reject(serverTimeoutError);
                            }
                            else {
                                asyncResult.resolveOrRejectOn(_this._onHardwareStationError(activityId, xhr, targetHardwareStationRequestUri, action, requestBody, timeout, requestLocale, suppressGlobalErrorEvent));
                            }
                        }
                    });
                    return asyncResult;
                };
                HardwareStationRequest.prototype._onHardwareStationError = function (activityId, error, actionRequest, action, data, timeout, requestLocale, suppressGlobalErrorEvent) {
                    var _this = this;
                    var errors = Commerce.Proxy.Context.ErrorParser.parseHardwareStationErrorMessage(error);
                    HardwareStation.HardwareStationContext.checkErrorsAndClearTransactionReference(errors, action, activityId);
                    var queue = new Commerce.AsyncQueue();
                    Commerce.RetailLogger.posInitiatedHardwareStationRequestFailed(activityId, actionRequest, action, timeout, requestLocale, Commerce.ErrorHelper.serializeError(errors));
                    var handleHardwareStationErrorActivityContext = {
                        hardwareStation: this._hardwareStation,
                        errors: errors,
                        showUI: !suppressGlobalErrorEvent
                    };
                    var handleHardwareStationErrorActivity = new Commerce.Activities.HandleHardwareStationErrorActivity(handleHardwareStationErrorActivityContext);
                    var isRetryableException = HardwareStation.HardwareStationContext.isRetryableException(handleHardwareStationErrorActivityContext);
                    var skipErrorReportingUi = Commerce.ArrayExtensions.hasElement(HardwareStationRequest.IGNORE_ERRORS_FOR_ACTIONS, action);
                    if (skipErrorReportingUi) {
                        var serializedErrors = Commerce.ErrorHelper.serializeError(errors);
                        Commerce.RetailLogger.posPaymentSkippedDisplayingError(action, serializedErrors, activityId);
                    }
                    queue.enqueue(function () {
                        if (!isRetryableException && !skipErrorReportingUi) {
                            return handleHardwareStationErrorActivity.execute();
                        }
                        else {
                            return Commerce.AsyncResult.createResolved();
                        }
                    }).enqueue(function () {
                        var activityResponse = handleHardwareStationErrorActivity.response;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activityResponse)) {
                            switch (activityResponse.action) {
                                case HardwareStation.HardwareStationErrorActionType.None:
                                    return Commerce.AsyncResult.createRejected(errors);
                                case HardwareStation.HardwareStationErrorActionType.SelectAnotherHardwareStation:
                                    new Commerce.Activities.SelectHardwareStationActivity({}).execute();
                                    return Commerce.AsyncResult.createRejected(errors);
                                case HardwareStation.HardwareStationErrorActionType.ForceUnlockPeripheral:
                                    var options = {
                                        lockRequest: _this,
                                        action: action,
                                        data: data,
                                        timeout: timeout,
                                        suppressGlobalErrorEvent: suppressGlobalErrorEvent
                                    };
                                    return Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Operations.RetailOperation.ForceUnlockPeripheral, options)
                                        .map(function (result) {
                                        return result.data;
                                    });
                                case HardwareStation.HardwareStationErrorActionType.Retry:
                                    var asyncQueue = new Commerce.AsyncQueue();
                                    var isPaymentRetryError_1 = false;
                                    return asyncQueue.enqueue(function () {
                                        isPaymentRetryError_1 = HardwareStation.PaymentTerminal.isPaymentRetryError(errors);
                                        if (isPaymentRetryError_1) {
                                            return Peripherals.instance.paymentTerminal.restartPaymentTransaction();
                                        }
                                        return Commerce.VoidAsyncResult.createResolved();
                                    }).enqueue(function () {
                                        if (isPaymentRetryError_1) {
                                            var jsonData = JSON.stringify(data);
                                            var dataWithUpdatedToken = JSON.parse(jsonData, function (key, value) {
                                                if (Commerce.StringExtensions.compare(key, "Token", true) === 0) {
                                                    return Peripherals.instance.paymentTerminal.lockToken;
                                                }
                                                return value;
                                            });
                                            data = dataWithUpdatedToken;
                                        }
                                        var newActivityId = TsLogging.Utils.generateGuid();
                                        Commerce.RetailLogger.posInitiatedHardwareStationRequestRetry(activityId, newActivityId);
                                        return _this.execute(action, data, Commerce.Config.connectionTimeout, suppressGlobalErrorEvent, newActivityId);
                                    }).run().map(function (result) {
                                        return result.data;
                                    });
                                default:
                                    if (!isRetryableException) {
                                        return Commerce.AsyncResult.createRejected();
                                    }
                                    return Commerce.AsyncResult.createRejected(errors);
                            }
                        }
                        else {
                            return Commerce.AsyncResult.createRejected(errors);
                        }
                    });
                    return queue
                        .run()
                        .fail(function () {
                        if (!suppressGlobalErrorEvent && Commerce.ObjectExtensions.isFunction(_this._onError)) {
                            _this._onError(errors);
                        }
                    })
                        .map(function (result) {
                        return result.data;
                    });
                };
                HardwareStationRequest.REQUEST_URI_FORMAT = "{0}/{1}";
                HardwareStationRequest.POST_HTTP_REQUEST_METHOD = "POST";
                HardwareStationRequest.APPLICATION_JSON_HTTP_CONTENT_TYPE_HEADER_VALUE = "application/json";
                HardwareStationRequest.REQUEST_AUTHORIZATION_FORMAT = "MessageCredential {0} {1}";
                HardwareStationRequest.ACCEPT_LANGUAGE_HEADER_NAME = "Accept-Language";
                HardwareStationRequest.AUTHORIZATION_HEADER_NAME = "Authorization";
                HardwareStationRequest.ACTIVITYID_HEADER_NAME = "ActivityId";
                HardwareStationRequest.IGNORE_ERRORS_FOR_ACTIONS = ["GetPaymentTransactionReferenceId", "GetTransactionByTransactionReference"];
                return HardwareStationRequest;
            }());
            HardwareStation.HardwareStationRequest = HardwareStationRequest;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var LineDisplay = (function () {
                function LineDisplay() {
                    this.isActive = false;
                }
                LineDisplay.prototype.openDevice = function (callerContext) {
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    var self = this;
                    var hardwareProfile = Commerce.ApplicationContext.Instance.hardwareProfile;
                    self.isActive = false;
                    if (hardwareProfile.LineDisplayDeviceTypeValue !== Commerce.Proxy.Entities.PeripheralDeviceType.None) {
                        var lineDisplayLockRequest = {
                            DeviceName: hardwareProfile.LineDisplayDeviceName,
                            DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[hardwareProfile.LineDisplayDeviceTypeValue],
                            CharacterSet: hardwareProfile.LineDisplayCharacterSet,
                            BinaryConversion: hardwareProfile.LineDisplayBinaryConversion
                        };
                        HardwareStation.HardwareStationContext.instance.peripheral("LineDisplay").execute("Lock", lineDisplayLockRequest)
                            .done(function (result) {
                            self.lineLength = result.Columns;
                            self.isActive = true;
                            asyncResult.resolve();
                        })
                            .fail(function (errors) {
                            Commerce.RetailLogger.peripheralsOpenLineDisplayDeviceFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(errors));
                            asyncResult.reject(errors);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                LineDisplay.prototype.closeDevice = function (callerContext) {
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    var self = this;
                    if (self.isActive) {
                        HardwareStation.HardwareStationContext.instance.peripheral("LineDisplay").execute("Unlock")
                            .done(function () {
                            self.isActive = false;
                            asyncResult.resolve();
                        })
                            .fail(function (error) {
                            Commerce.RetailLogger.peripheralsCloseLineDisplayDeviceFailed(Commerce.ErrorHelper.serializeErrorsForRetailLogger(error));
                            asyncResult.reject(error);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                LineDisplay.prototype.displayLines = function (lines, callerContext) {
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    var lineDisplayRequest = this.getLineDisplayRequest(lines);
                    if (this.isActive && lineDisplayRequest) {
                        HardwareStation.HardwareStationContext.instance.peripheral("LineDisplay").execute("DisplayText", lineDisplayRequest)
                            .done(function () { asyncResult.resolve(); })
                            .fail(function (error) { return asyncResult.reject(error); });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                LineDisplay.prototype.getLineDisplayRequest = function (lines) {
                    var lineDisplayRequest = null;
                    var hardwareProfile = Commerce.ApplicationContext.Instance.hardwareProfile;
                    if (hardwareProfile.LineDisplayDeviceTypeValue !== Commerce.Proxy.Entities.PeripheralDeviceType.None) {
                        lineDisplayRequest = {
                            DeviceName: hardwareProfile.LineDisplayDeviceName,
                            DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[hardwareProfile.LineDisplayDeviceTypeValue],
                            Lines: lines,
                            Clear: true
                        };
                    }
                    return lineDisplayRequest;
                };
                return LineDisplay;
            }());
            HardwareStation.LineDisplay = LineDisplay;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var LineDisplayHelper = (function () {
                function LineDisplayHelper() {
                }
                LineDisplayHelper.displayIdleText = function () {
                    if (Peripherals.instance && Peripherals.instance.lineDisplay) {
                        var lines = [];
                        lines.push(Commerce.ApplicationContext.Instance.deviceConfiguration.CustomerDisplayText1);
                        lines.push(Commerce.ApplicationContext.Instance.deviceConfiguration.CustomerDisplayText2);
                        Peripherals.instance.lineDisplay.displayLines(lines);
                    }
                };
                LineDisplayHelper.displayTerminalClosedText = function () {
                    if (Peripherals.instance && Peripherals.instance.lineDisplay
                        && Commerce.ApplicationContext.Instance.hardwareProfile.LineDisplayDisplayTerminalClosed) {
                        var lines = [];
                        lines.push(Commerce.ApplicationContext.Instance.hardwareProfile.LineDisplayClosedLine1);
                        lines.push(Commerce.ApplicationContext.Instance.hardwareProfile.LineDisplayClosedLine2);
                        return Peripherals.instance.lineDisplay.displayLines(lines);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                LineDisplayHelper.shouldDisplayLines = function (originalCart, updatedCart) {
                    var shouldDisplayLines = false;
                    if (originalCart.AmountDue !== updatedCart.AmountDue) {
                        shouldDisplayLines = true;
                    }
                    else {
                        var originalCartLinesByLineId_1 = Object.create(null);
                        originalCart.CartLines.forEach(function (c) { return originalCartLinesByLineId_1[c.LineId] = c; });
                        updatedCart.CartLines.filter(function (cartLine) {
                            var originalCartLine = originalCartLinesByLineId_1[cartLine.LineId];
                            if (LineDisplayHelper._isCartLineModified(originalCartLine, cartLine)) {
                                shouldDisplayLines = true;
                            }
                        });
                    }
                    return shouldDisplayLines;
                };
                LineDisplayHelper.displayLineItems = function (originalCart, updatedCart) {
                    var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                    var allowAggregation = !Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration) && deviceConfiguration.AllowItemsAggregation;
                    var originalCartLinesByLineId = Object.create(null);
                    originalCart.CartLines.forEach(function (c) { return originalCartLinesByLineId[c.LineId] = c; });
                    var displayLines = [];
                    for (var i = 0; i < updatedCart.CartLines.length; ++i) {
                        var cartLine = updatedCart.CartLines[i];
                        var originalCartLine = originalCartLinesByLineId[cartLine.LineId];
                        if (LineDisplayHelper._isCartLineModified(originalCartLine, cartLine)) {
                            var quantity = cartLine.Quantity;
                            var price = cartLine.ExtendedPrice;
                            if (allowAggregation && !Commerce.ObjectExtensions.isNullOrUndefined(originalCartLine) && originalCartLine.Quantity !== cartLine.Quantity) {
                                quantity -= originalCartLine.Quantity;
                                price -= originalCartLine.ExtendedPrice;
                            }
                            var displayLine = {
                                displayQuantity: Commerce.UnitOfMeasureHelper.roundToDisplay(quantity, cartLine.UnitOfMeasureSymbol),
                                displayPrice: Commerce.NumberExtensions.formatCurrency(price),
                                description: cartLine.Description,
                                unitOfMeasureSymbol: cartLine.UnitOfMeasureSymbol
                            };
                            displayLines.push(displayLine);
                            if (!Commerce.ApplicationContext.Instance.hardwareProfile.LineDisplayDisplayLinkedItem) {
                                break;
                            }
                        }
                    }
                    displayLines.forEach(function (line, index) {
                        setTimeout(function () {
                            var lines = [];
                            lines.push(line.description);
                            lines.push(LineDisplayHelper.formatLine(line.displayQuantity + LineDisplayHelper.SPACE + line.unitOfMeasureSymbol, line.displayPrice));
                            Peripherals.instance.lineDisplay.displayLines(lines);
                        }, Commerce.ApplicationContext.Instance.hardwareProfile.LineDisplayDelayForLinkedItems * 1000 * index);
                    });
                };
                LineDisplayHelper.displayBalance = function (total, balance) {
                    var lines = [];
                    lines.push(LineDisplayHelper.formatLine(Commerce.ApplicationContext.Instance.hardwareProfile.LineDisplayTotalText, Commerce.NumberExtensions.formatCurrency(total)));
                    lines.push(LineDisplayHelper.formatLine(Commerce.ApplicationContext.Instance.hardwareProfile.LineDisplayBalanceText, Commerce.NumberExtensions.formatCurrency(balance)));
                    return Peripherals.instance.lineDisplay.displayLines(lines);
                };
                LineDisplayHelper._isCartLineModified = function (originalCartLine, updateCartLine) {
                    var deviceConfiguration = Commerce.ApplicationContext.Instance.deviceConfiguration;
                    var allowAggregation = !Commerce.ObjectExtensions.isNullOrUndefined(deviceConfiguration) && deviceConfiguration.AllowItemsAggregation;
                    return Commerce.ObjectExtensions.isNullOrUndefined(originalCartLine)
                        || (allowAggregation && originalCartLine.Quantity !== updateCartLine.Quantity)
                        || originalCartLine.UnitOfMeasureSymbol !== updateCartLine.UnitOfMeasureSymbol
                        || originalCartLine.ExtendedPrice !== updateCartLine.ExtendedPrice
                        || originalCartLine.IsVoided !== updateCartLine.IsVoided;
                };
                LineDisplayHelper.formatLine = function (leftString, rightString) {
                    var spaceString = Commerce.StringExtensions.EMPTY;
                    var contentLength = 0;
                    contentLength = leftString.length + rightString.length;
                    if (contentLength < Peripherals.instance.lineDisplay.lineLength) {
                        spaceString = Commerce.StringExtensions.padRight(spaceString, LineDisplayHelper.SPACE, Peripherals.instance.lineDisplay.lineLength - contentLength);
                    }
                    return leftString + spaceString + rightString;
                };
                LineDisplayHelper.SPACE = " ";
                return LineDisplayHelper;
            }());
            HardwareStation.LineDisplayHelper = LineDisplayHelper;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var MagneticStripeReader = (function (_super) {
                __extends(MagneticStripeReader, _super);
                function MagneticStripeReader(pollingTimeoutInSeconds) {
                    var _this = _super.call(this, pollingTimeoutInSeconds) || this;
                    _this._getHandlerSourceName = function (handlerSource) {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(handlerSource)) {
                            return handlerSource + MagneticStripeReader.HS_PERIPHERAL_NAME;
                        }
                        return Commerce.StringExtensions.EMPTY;
                    };
                    return _this;
                }
                MagneticStripeReader.prototype.enableAsync = function (readerMsgEventHandler, handlerSource) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(readerMsgEventHandler)) {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                    var msrHandlerSource;
                    Commerce.RetailLogger.peripheralsMagneticStripeReaderEnableRequest(handlerSource);
                    msrHandlerSource = this._getHandlerSourceName(handlerSource);
                    return this.lockAsync(readerMsgEventHandler, msrHandlerSource);
                };
                MagneticStripeReader.prototype.disableAsync = function (handlerSource) {
                    Commerce.RetailLogger.peripheralsMagneticStripeReaderDisableRequest(handlerSource);
                    var msrHandlerSource = this._getHandlerSourceName(handlerSource);
                    return this.unlockAsync(msrHandlerSource);
                };
                MagneticStripeReader.prototype.createLockRequest = function () {
                    return {
                        DeviceName: this.hardwareProfile.MsrDeviceName,
                        DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[this.hardwareProfile.MsrDeviceTypeValue]
                    };
                };
                Object.defineProperty(MagneticStripeReader.prototype, "deviceType", {
                    get: function () {
                        return this.hardwareProfile.MsrDeviceTypeValue;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MagneticStripeReader.prototype, "peripheralName", {
                    get: function () {
                        return MagneticStripeReader.HS_PERIPHERAL_NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MagneticStripeReader.prototype, "getDataActionName", {
                    get: function () {
                        return MagneticStripeReader.HS_GETMSRSWIPEINFO_ACTION;
                    },
                    enumerable: true,
                    configurable: true
                });
                MagneticStripeReader.prototype.handleData = function (handler, data) {
                    var cardInfo = this.convertSwipeToCardInfo(data);
                    handler(cardInfo);
                };
                MagneticStripeReader.prototype.executeLockRequestAsync = function (callback) {
                    var lockRequest = this.createLockRequest();
                    var request = new Commerce.MagneticStripeReaderOpenRequest(lockRequest, this._pollingTimeoutInSeconds, true);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request)
                        .then(function () {
                        callback();
                    }));
                };
                MagneticStripeReader.prototype.executeGetDataRequestAsync = function () {
                    var getDataRequest = {
                        TimeoutInSeconds: this._pollingTimeoutInSeconds
                    };
                    var request = new Commerce.MagneticStripeReaderGetMsrSwipeRequest(getDataRequest, null, true);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request))
                        .map(function (msrResponse) {
                        return msrResponse.data.result;
                    });
                };
                Object.defineProperty(MagneticStripeReader.prototype, "hardwareProfile", {
                    get: function () {
                        return Commerce.ApplicationContext.Instance.hardwareProfile;
                    },
                    enumerable: true,
                    configurable: true
                });
                MagneticStripeReader.prototype.convertSwipeToCardInfo = function (swipeInfo) {
                    return {
                        CardNumber: swipeInfo.AccountNumber,
                        FirstName: swipeInfo.FirstName,
                        LastName: swipeInfo.LastName,
                        ExpirationMonth: swipeInfo.ExpirationMonth,
                        ExpirationYear: swipeInfo.ExpirationYear
                    };
                };
                MagneticStripeReader.HS_GETMSRSWIPEINFO_ACTION = "GetMsrSwipeInfo";
                MagneticStripeReader.HS_PERIPHERAL_NAME = "Msr";
                return MagneticStripeReader;
            }(HardwareStation.LongPollingLockPeripheralBase));
            HardwareStation.MagneticStripeReader = MagneticStripeReader;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var PaymentTerminal = (function () {
                function PaymentTerminal() {
                    this.shouldDisplayTransaction = true;
                }
                PaymentTerminal.isPaymentRetryError = function (errors) {
                    var error = Commerce.ArrayExtensions.firstOrUndefined(errors);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                        return false;
                    }
                    return Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR) ||
                        Commerce.ErrorHelper.hasError(errors, Commerce.ErrorTypeEnum.MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEPTION_GENERALEXCEPTION);
                };
                PaymentTerminal.prototype.activateGiftCard = function (amount, tenderInfo, paymentConnectorName, extensionTransactionProperties) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var activateGiftCardRequest = {
                                Token: _this.lockToken,
                                Amount: amount,
                                Currency: _this._deviceConfiguration.Currency,
                                TenderInfo: tenderInfo,
                                PaymentConnectorId: paymentConnectorName,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest()
                                .execute("ActivateGiftCard", activateGiftCardRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.addBalanceToGiftCard = function (amount, tenderInfo, paymentConnectorName, extensionTransactionProperties, callerContext) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var addBalanceToGiftCardRequest = {
                                Token: _this.lockToken,
                                Amount: amount,
                                Currency: _this._deviceConfiguration.Currency,
                                TenderInfo: tenderInfo,
                                PaymentConnectorId: paymentConnectorName,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest().execute("AddBalanceToGiftCard", addBalanceToGiftCardRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.cashOutGiftCard = function (amount, paymentConnectorName, tenderInfo, extensionTransactionProperties, correlationId) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var cashOutGiftCardRequest = {
                                Token: _this.lockToken,
                                Amount: amount,
                                Currency: _this._deviceConfiguration.Currency,
                                TenderInfo: tenderInfo,
                                PaymentConnectorId: paymentConnectorName,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest().execute("CashOutGiftCard", cashOutGiftCardRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true, correlationId);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)]);
                    }
                };
                PaymentTerminal.prototype.enquireGiftCardBalance = function (tenderInfo, paymentConnectorName, extensionTransactionProperties, callerContext) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var getGiftCardBalanceRequest = {
                                Token: _this.lockToken,
                                Currency: _this._deviceConfiguration.Currency,
                                TenderInfo: tenderInfo,
                                PaymentConnectorId: paymentConnectorName,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest().execute("EnquireGiftCardBalance", getGiftCardBalanceRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)]);
                    }
                };
                PaymentTerminal.prototype.beginTransaction = function (extensionTransactionProperties) {
                    var _this = this;
                    var COMPONENT_NAME = "PinPad";
                    this.lockToken = null;
                    var debitCashbackLimit;
                    if (this._hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.Windows
                        || this._hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.Network) {
                        this.isActive = true;
                        return new Commerce.AsyncQueue()
                            .enqueue(function () {
                            return _this._applicationContext.debitCashbackLimitAsync.value.done(function (limit) {
                                debitCashbackLimit = limit;
                            });
                        }).enqueue(function () {
                            var cardTenderType = _this._cardTenderType;
                            var cartId = Commerce.Session.instance.cart.Id;
                            var positionOfCartId = cartId.lastIndexOf("-") + 1;
                            cartId = cartId.substr(positionOfCartId);
                            var isCardPaymentMethodSetup = !Commerce.ObjectExtensions.isNullOrUndefined(cardTenderType);
                            var terminalSettings = {
                                SignatureCaptureMinimumAmount: isCardPaymentMethodSetup ? cardTenderType.MinimumSignatureCaptureAmount : 0,
                                MinimumAmountAllowed: isCardPaymentMethodSetup ? cardTenderType.MinimumAmountPerLine : 0,
                                MaximumAmountAllowed: isCardPaymentMethodSetup ? cardTenderType.MaximumAmountPerLine : 0,
                                DebitCashbackLimit: debitCashbackLimit,
                                Locale: _this._deviceConfiguration.CultureName,
                                TerminalId: _this._applicationContext.activeEftTerminalId
                            };
                            var hardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                            var isSharedHardwareStation = !Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation)
                                && !Peripherals.HardwareStation.HardwareStationContext.isLocalStation(hardwareStation);
                            var paymentTerminalLockRequest = {
                                DeviceName: _this._hardwareProfile.PinPadDeviceName,
                                DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[_this._hardwareProfile.PinPadDeviceTypeValue],
                                Exclusive: isSharedHardwareStation,
                                PaymentConnectorId: _this._hardwareProfile.EftPaymentConnectorName,
                                InvoiceNumber: Commerce.CartHelper.getInvoiceNumber(Commerce.Session.instance.cart.Id),
                                IsTestMode: _this._hardwareProfile.EftTestMode,
                                TerminalSettings: terminalSettings,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            var hsProfileId;
                            if (Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation)) {
                                hsProfileId = "Unknown";
                            }
                            else {
                                hsProfileId = hardwareStation.profileId;
                            }
                            if (_this._hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.Network) {
                                var pinpadConfiguration = void 0;
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation) &&
                                    hardwareStation.profileId &&
                                    isSharedHardwareStation) {
                                    pinpadConfiguration = hardwareStation.hardwareConfigurations.PinPadConfiguration;
                                }
                                else {
                                    pinpadConfiguration = _this._deviceConfiguration.HardwareConfigurations.PinPadConfiguration;
                                }
                                if (pinpadConfiguration) {
                                    var transportConfig = {
                                        Key: HardwareStation.PeripheralConfigKey.TRANSPORT_TYPE,
                                        Value: {
                                            StringValue: HardwareStation.TransportType.TCP_TRANSPORT
                                        }
                                    };
                                    var ipConfig = {
                                        Key: HardwareStation.PeripheralConfigKey.IP_ADDRESS,
                                        Value: {
                                            StringValue: pinpadConfiguration.IPAddress
                                        }
                                    };
                                    var portConfig = {
                                        Key: HardwareStation.PeripheralConfigKey.PORT,
                                        Value: {
                                            IntegerValue: pinpadConfiguration.Port
                                        }
                                    };
                                    paymentTerminalLockRequest.DeviceConfig = {
                                        ExtensionProperties: [transportConfig, ipConfig, portConfig]
                                    };
                                }
                                else {
                                    Commerce.RetailLogger.peripheralsDeviceConfigNotDefined(COMPONENT_NAME, paymentTerminalLockRequest.DeviceName, paymentTerminalLockRequest.DeviceType, hsProfileId);
                                }
                            }
                            else {
                                Commerce.RetailLogger.peripheralsDeviceConfigDriverNotNetwork(COMPONENT_NAME, paymentTerminalLockRequest.DeviceName, paymentTerminalLockRequest.DeviceType, hsProfileId);
                            }
                            return _this._createTerminalRequest()
                                .execute("Lock", paymentTerminalLockRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT)
                                .done(function (result) {
                                _this.lockToken = result;
                            });
                        }).run();
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                PaymentTerminal.prototype.endTransaction = function () {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(this.lockToken)) {
                        var unlockRequest = {
                            Token: this.lockToken
                        };
                        this.lockToken = null;
                        return this._createTerminalRequest().execute("Unlock", unlockRequest);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                PaymentTerminal.prototype.displayTransaction = function (cart) {
                    var _this = this;
                    if (this.shouldDisplayTransaction && this.isActive && !Commerce.StringExtensions.isNullOrWhitespace(this.lockToken) && cart.CartLines.length > 0) {
                        var items_1 = [];
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return Commerce.CustomerOrderHelper.tryUpdatingProductsInCartCacheAsync(cart);
                        }).enqueue(function () {
                            for (var i = 0; i < cart.CartLines.length; i++) {
                                var cartLine = cart.CartLines[i];
                                var item = {
                                    LineItemId: i + 1,
                                    Sku: Commerce.StringExtensions.EMPTY,
                                    Upc: cartLine.Barcode,
                                    Description: (cartLine.Description || Commerce.CartLineHelper.getProductName(cartLine)).substring(0, 31),
                                    Quantity: cartLine.Quantity,
                                    UnitPrice: Commerce.NumberExtensions.isNullNaNOrZero(cartLine.Price) ? "0.00" : cartLine.Price.toFixed(2).toString(),
                                    ExtendedPriceWithTax: Commerce.NumberExtensions.isNullNaNOrZero(cartLine.TotalAmount) ? "0.00" : cartLine.TotalAmount.toFixed(2).toString(),
                                    IsVoided: cartLine.IsVoided,
                                    Discount: Commerce.NumberExtensions.isNullNaNOrZero(cartLine.DiscountAmount) ? "0.00" : cartLine.DiscountAmount.toFixed(2).toString()
                                };
                                items_1.push(item);
                            }
                            var action = function () {
                                var paymentTerminalDisplayRequest = {
                                    Token: _this.lockToken,
                                    TotalAmount: Commerce.NumberExtensions.isNullNaNOrZero(cart.AmountDue) ? "0.00" : cart.AmountDue.toFixed(2).toString(),
                                    TaxAmount: Commerce.NumberExtensions.isNullNaNOrZero(cart.TaxAmount) ? "0.00" : cart.TaxAmount.toFixed(2).toString(),
                                    DiscountAmount: Commerce.NumberExtensions.isNullNaNOrZero(cart.DiscountAmount) ? "0.00" : cart.DiscountAmount.toFixed(2).toString(),
                                    SubTotalAmount: Commerce.NumberExtensions.isNullNaNOrZero(cart.SubtotalAmount) ? "0.00" : cart.SubtotalAmount.toFixed(2).toString(),
                                    Items: items_1
                                };
                                return _this._createTerminalRequest().execute("UpdateLineItems", paymentTerminalDisplayRequest);
                            };
                            return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                        });
                        return asyncQueue.run();
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                PaymentTerminal.prototype.doSessionCartUpdateWithNoDisplayTransaction = function (updatedCart, sessionCartUpdate) {
                    this.shouldDisplayTransaction = false;
                    sessionCartUpdate(updatedCart);
                    this.shouldDisplayTransaction = true;
                };
                PaymentTerminal.prototype.doSessionCartUpdateWithDisplayTransaction = function (updatedCart, sessionCartUpdate) {
                    this.shouldDisplayTransaction = true;
                    sessionCartUpdate(updatedCart);
                    this.shouldDisplayTransaction = true;
                };
                PaymentTerminal.prototype.getTender = function (amount) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_IMPLEMENTED)]);
                };
                PaymentTerminal.prototype.retrievePrivateTender = function (amount, isSwipe, extensionTransactionProperties) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var paymentTerminalGetTenderRequest = {
                                Token: _this.lockToken,
                                Amount: amount,
                                IsSwipe: isSwipe,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest().execute("RetrievePrivateTenderAsync", paymentTerminalGetTenderRequest);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.getTenderApproval = function (amount) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_IMPLEMENTED)]);
                };
                PaymentTerminal.prototype.makePayment = function (tenderLine, merchantProperties, paymentConnectorName, paymentType, cardTypeValue) {
                    return Commerce.VoidAsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.NOT_IMPLEMENTED)]);
                };
                PaymentTerminal.prototype.authorizePayment = function (paymentConnectorName, amount, tenderInfo, voiceAuthorization, isManualEntry, paymentTransactionReferenceData, extensionTransactionProperties) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var authorizeRequest = {
                                Token: _this.lockToken,
                                PaymentConnectorId: paymentConnectorName,
                                Amount: amount,
                                TenderInfo: tenderInfo,
                                Currency: _this._deviceConfiguration.Currency,
                                ExtensionTransactionProperties: extensionTransactionProperties,
                                IsManualEntry: isManualEntry,
                                TransactionReferenceData: paymentTransactionReferenceData,
                                VoiceAuthorization: voiceAuthorization
                            };
                            return _this._createTerminalRequest()
                                .execute(Commerce.PaymentHelper.ACTION_AUTHORIZE_PAYMENT, authorizeRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.voidPayment = function (paymentConnectorName, amount, tenderInfo, paymentPropertiesXml, extensionTransactionProperties) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var voidRequest = {
                                PaymentConnectorId: Commerce.StringExtensions.EMPTY,
                                Token: _this.lockToken,
                                TenderInfo: tenderInfo,
                                Amount: amount,
                                Currency: _this._deviceConfiguration.Currency,
                                PaymentPropertiesXml: paymentPropertiesXml,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest().execute("VoidPayment", voidRequest);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.capturePayment = function (amount, paymentPropertiesXml, extensionTransactionProperties) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var captureRequest = {
                                Token: _this.lockToken,
                                Amount: amount,
                                Currency: _this._deviceConfiguration.Currency,
                                PaymentPropertiesXml: paymentPropertiesXml,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest().execute("CapturePayment", captureRequest);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.refundPayment = function (paymentConnectorName, amount, tenderInfo, isManualEntry, extensionTransactionProperties) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var refundRequest = {
                                PaymentConnectorId: paymentConnectorName,
                                TenderInfo: tenderInfo,
                                Token: _this.lockToken,
                                Amount: amount,
                                Currency: _this._deviceConfiguration.Currency,
                                IsManualEntry: isManualEntry,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest()
                                .execute("RefundPayment", refundRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.fetchToken = function (isManualEntry, extensionTransactionProperties) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var tokenizeRequest = {
                                Token: _this.lockToken,
                                IsManualEntry: isManualEntry,
                                Currency: Commerce.ApplicationContext.Instance.deviceConfiguration.Currency,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest()
                                .execute("FetchToken", tokenizeRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.cancelOperation = function () {
                    if (!Commerce.StringExtensions.isNullOrWhitespace(this.lockToken)) {
                        var paymentTerminalCancelOperationRequest = {
                            Token: this.lockToken
                        };
                        return this._createTerminalRequest().execute("CancelOperation", paymentTerminalCancelOperationRequest);
                    }
                    else {
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                PaymentTerminal.prototype.executeTask = function (task, extensionTransactionProperties) {
                    var _this = this;
                    var asyncQueue = new Commerce.AsyncQueue();
                    if (!this.isActive) {
                        asyncQueue.enqueue(function () {
                            return _this.beginTransaction();
                        });
                    }
                    var peripheralConfig = [];
                    asyncQueue.enqueue(function () {
                        var action = function () {
                            var executeTaskRequest = {
                                Token: _this.lockToken,
                                Task: task,
                                ExtensionTransactionProperties: extensionTransactionProperties
                            };
                            return _this._createTerminalRequest().execute("ExecuteTask", executeTaskRequest);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); })
                            .done(function (result) {
                            peripheralConfig = result;
                        });
                    });
                    return asyncQueue.run().map(function () {
                        return peripheralConfig;
                    });
                };
                PaymentTerminal.prototype.restartPaymentTransaction = function () {
                    var _this = this;
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        return _this.endTransaction();
                    }).enqueue(function () {
                        return _this.beginTransaction();
                    }).enqueue(function () {
                        return _this.displayTransaction(Commerce.Session.instance.cart);
                    });
                    return asyncQueue.run();
                };
                PaymentTerminal.prototype.getPaymentTransactionReferenceId = function (posTerminalId, eftTerminalId) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var correlationIdRequest = {
                                Token: _this.lockToken,
                                PosTerminalId: posTerminalId,
                                EftTerminalId: eftTerminalId
                            };
                            return _this._createTerminalRequest()
                                .execute("GetPaymentTransactionReferenceId", correlationIdRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                PaymentTerminal.prototype.getTransactionByTransactionReference = function (transactionReferenceData) {
                    var _this = this;
                    if (this.isActive) {
                        var action = function () {
                            var getTransactionRequest = {
                                Token: _this.lockToken,
                                TransactionReferenceData: transactionReferenceData
                            };
                            return _this._createTerminalRequest()
                                .execute("GetTransactionByTransactionReference", getTransactionRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT);
                        };
                        return HardwareStation.HardwareStationContext.executeWithRelock(action, function () { return _this.beginTransaction(); });
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(null);
                    }
                };
                Object.defineProperty(PaymentTerminal.prototype, "_applicationContext", {
                    get: function () {
                        return Commerce.ApplicationContext.Instance;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PaymentTerminal.prototype, "_hardwareProfile", {
                    get: function () {
                        return this._applicationContext.hardwareProfile;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PaymentTerminal.prototype, "_deviceConfiguration", {
                    get: function () {
                        return this._applicationContext.deviceConfiguration;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PaymentTerminal.prototype, "_cardTenderType", {
                    get: function () {
                        return this._applicationContext
                            .tenderTypesMap
                            .getTenderTypeByOperationId(Commerce.Operations.RetailOperation.PayCard);
                    },
                    enumerable: true,
                    configurable: true
                });
                PaymentTerminal.prototype._createTerminalRequest = function () {
                    return HardwareStation.HardwareStationContext.instance.peripheral("PaymentTerminal");
                };
                return PaymentTerminal;
            }());
            HardwareStation.PaymentTerminal = PaymentTerminal;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var PinPad = (function () {
                function PinPad() {
                    this.isActive = false;
                }
                PinPad.prototype.openDevice = function (callerContext) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    this.isActive = false;
                    this._lockToken = null;
                    if (Commerce.ApplicationContext.Instance.hardwareProfile.PinPadDeviceTypeValue === Commerce.Proxy.Entities.PeripheralDeviceType.OPOS) {
                        var pinPadLockRequest = {
                            DeviceName: Commerce.ApplicationContext.Instance.hardwareProfile.PinPadDeviceName,
                            DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[Commerce.ApplicationContext.Instance.hardwareProfile.PinPadDeviceTypeValue],
                            Culture: Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName
                        };
                        HardwareStation.HardwareStationContext.instance.peripheral("PinPad").execute("Lock", pinPadLockRequest)
                            .done(function (result) {
                            _this._lockToken = result;
                            _this.isActive = true;
                            asyncResult.resolve();
                        })
                            .fail(function (error) { return asyncResult.reject(error); });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                PinPad.prototype.closeDevice = function (callerContext) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    if (this.isActive) {
                        var unlockRequest = {
                            Token: this._lockToken
                        };
                        HardwareStation.HardwareStationContext.instance.peripheral("PinPad").execute("Unlock", unlockRequest)
                            .done(function () {
                            _this._lockToken = null;
                            _this.isActive = false;
                            asyncResult.resolve();
                        })
                            .fail(function (error) { return asyncResult.reject(error); });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                PinPad.prototype.getPinEntry = function (cardNumber, paymentAmount, callerContext) {
                    var asyncResult = new Commerce.AsyncResult(callerContext);
                    var pinEntryRequest = {
                        Token: this._lockToken,
                        AccountNumber: cardNumber,
                        Amount: paymentAmount
                    };
                    if (this.isActive) {
                        HardwareStation.HardwareStationContext.instance.peripheral("PinPad")
                            .execute("GetPinEntry", pinEntryRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true)
                            .done(function (results) {
                            if (!results.Aborted) {
                                var pinPadInfo = new Commerce.Proxy.Entities.PinPadInfo(results.EncryptedPin, results.AdditionalSecurityInfo);
                                asyncResult.resolve(pinPadInfo);
                            }
                            else {
                                asyncResult.resolve(null);
                            }
                        })
                            .fail(function (error) { return asyncResult.reject(error); });
                    }
                    else {
                        asyncResult.resolve(null);
                    }
                    return asyncResult;
                };
                PinPad.prototype.cancelPinEntry = function (callerContext) {
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    var lockedRequest = {
                        Token: this._lockToken
                    };
                    if (this.isActive) {
                        HardwareStation.HardwareStationContext.instance.peripheral("PinPad").execute("CancelOperation", lockedRequest)
                            .done(function () {
                            asyncResult.resolve();
                        })
                            .fail(function (error) { return asyncResult.reject(error); });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                return PinPad;
            }());
            HardwareStation.PinPad = PinPad;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var Printer = (function () {
                function Printer() {
                }
                Printer.prototype.printAsync = function (printableReceipts, callerContext) {
                    var printerQueue = new Commerce.AsyncQueue();
                    var errorList = [];
                    var printRequestGroupByPrinter = [];
                    var receiptsGroupedByPrinterName = Commerce.ObjectExtensions.groupBy(printableReceipts, function (receipt) { return receipt.printerName; });
                    for (var receiptsGroup in receiptsGroupedByPrinterName) {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(receiptsGroup)) {
                            printRequestGroupByPrinter.push(this.getReceiptRequests(receiptsGroupedByPrinterName[receiptsGroup]));
                        }
                    }
                    printRequestGroupByPrinter.forEach(function (printRequestGroupByReceipts) {
                        printerQueue.enqueue(function () {
                            var asyncResult = new Commerce.VoidAsyncResult();
                            Peripherals.HardwareStation.HardwareStationContext.instance.peripheral("Printer").execute("Print", printRequestGroupByReceipts)
                                .always(function () {
                                asyncResult.resolve();
                            })
                                .fail(function (errors) {
                                errorList = errorList.concat(errors);
                            });
                            return asyncResult;
                        });
                    });
                    printerQueue.enqueue(function () {
                        if (errorList.length > 0) {
                            return Commerce.VoidAsyncResult.createRejected(errorList);
                        }
                        else {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                    });
                    return printerQueue.run();
                };
                Printer.prototype.getPrinterProfile = function (printableReceipt) {
                    var result = {};
                    var printerProfiles = Commerce.ApplicationContext.Instance.hardwareProfile.Printers.filter(function (profile) {
                        if (Commerce.StringExtensions.compare(profile.DeviceName, printableReceipt.printerName) === 0
                            && profile.DeviceTypeValue === printableReceipt.printerType) {
                            return true;
                        }
                        return false;
                    });
                    if (Commerce.ArrayExtensions.hasElements(printerProfiles)) {
                        result = printerProfiles[0];
                    }
                    return result;
                };
                Printer.prototype.getReceiptRequests = function (receipts) {
                    var _this = this;
                    var COMPONENT_NAME = "Printer";
                    var printRequests = [];
                    receipts.forEach(function (printableReceipt) {
                        var printerProfile = _this.getPrinterProfile(printableReceipt);
                        var printRequest = {
                            DeviceName: printableReceipt.printerName,
                            DeviceType: Commerce.Proxy.Entities.PeripheralType[printableReceipt.printerType],
                            CharacterSet: printerProfile.CharacterSet,
                            BinaryConversion: printerProfile.BinaryConversion,
                            Header: printableReceipt.receiptHeader,
                            Lines: printableReceipt.receiptBody,
                            Footer: printableReceipt.receiptFooter,
                            ExtensionProperties: printableReceipt.extensionProperties
                        };
                        var hardwareStation = Commerce.HardwareStationEndpointStorage.getActiveHardwareStation();
                        var hsProfileId;
                        if (Commerce.ObjectExtensions.isNullOrUndefined(hardwareStation)) {
                            hsProfileId = "Unknown";
                        }
                        else {
                            hsProfileId = hardwareStation.profileId;
                        }
                        if (printableReceipt.printerType === Commerce.Proxy.Entities.PeripheralType.Network) {
                            var ipConfig = {
                                Key: HardwareStation.PeripheralConfigKey.IP_ADDRESS,
                                Value: {
                                    StringValue: printableReceipt.printerIP
                                }
                            };
                            var portConfig = {
                                Key: HardwareStation.PeripheralConfigKey.PORT,
                                Value: {
                                    IntegerValue: printableReceipt.printerPort
                                }
                            };
                            printRequest.DeviceConfig = {
                                ExtensionProperties: [ipConfig, portConfig]
                            };
                        }
                        else {
                            Commerce.RetailLogger.peripheralsDeviceConfigDriverNotNetwork(COMPONENT_NAME, printRequest.DeviceName, printRequest.DeviceType, hsProfileId);
                        }
                        printRequests.push(printRequest);
                    });
                    return printRequests;
                };
                return Printer;
            }());
            HardwareStation.Printer = Printer;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var Scale = (function () {
                function Scale() {
                }
                Scale.prototype.read = function (callerContext) {
                    var scaleRequest = this.getScaleRequest();
                    if (scaleRequest) {
                        return HardwareStation.HardwareStationContext.instance.peripheral("Scale").execute("Read", scaleRequest, null, true);
                    }
                    else {
                        return Commerce.AsyncResult.createResolved(undefined);
                    }
                };
                Scale.prototype.getScaleRequest = function () {
                    var scaleRequest = null;
                    if (Commerce.ApplicationContext.Instance.hardwareProfile.ScaleDeviceTypeValue !== Commerce.Proxy.Entities.PeripheralDeviceType.None) {
                        scaleRequest = {
                            DeviceName: Commerce.ApplicationContext.Instance.hardwareProfile.ScaleDeviceName,
                            DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[Commerce.ApplicationContext.Instance.hardwareProfile.ScaleDeviceTypeValue],
                            Timeout: Commerce.ApplicationContext.Instance.hardwareProfile.ScaleTimeoutInSeconds
                        };
                    }
                    return scaleRequest;
                };
                return Scale;
            }());
            HardwareStation.Scale = Scale;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var SignatureCapture = (function () {
                function SignatureCapture() {
                    this.isActive = false;
                }
                SignatureCapture.prototype.openDevice = function (callerContext) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    this.isActive = false;
                    this._lockToken = null;
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    var deviceTypeName = Commerce.Proxy.Entities.PeripheralDeviceType[Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceTypeValue];
                    Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceStarted(Commerce.ApplicationContext.Instance.hardwareProfile.ProfileDescription, Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceName, deviceTypeName, correlationId);
                    if (Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceTypeValue !== Commerce.Proxy.Entities.PeripheralDeviceType.None) {
                        var sigCapLockRequest = {
                            DeviceName: Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceName,
                            DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceTypeValue],
                            Culture: Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName
                        };
                        HardwareStation.HardwareStationContext.instance.peripheral("SignatureCapture").execute("Lock", sigCapLockRequest)
                            .done(function (result) {
                            Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceSucceeded(result, correlationId);
                            _this._lockToken = result;
                            _this.isActive = true;
                            asyncResult.resolve();
                        })
                            .fail(function (error) {
                            Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceFailed(Commerce.ErrorHelper.serializeError(error), correlationId);
                            asyncResult.reject(error);
                        });
                    }
                    else {
                        Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceCancelled(correlationId);
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                SignatureCapture.prototype.closeDevice = function (callerContext) {
                    var _this = this;
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    if (this.isActive) {
                        var unlockRequest = {
                            Token: this._lockToken
                        };
                        HardwareStation.HardwareStationContext.instance.peripheral("SignatureCapture").execute("Unlock", unlockRequest)
                            .done(function () {
                            _this._lockToken = null;
                            _this.isActive = false;
                            asyncResult.resolve();
                        })
                            .fail(function (error) {
                            Commerce.RetailLogger.peripheralsCloseSignatureCaptureDeviceFailed(Commerce.ErrorHelper.serializeError(error), Commerce.StringExtensions.EMPTY);
                            asyncResult.reject(error);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                SignatureCapture.prototype.getSignature = function (callerContext) {
                    var asyncResult = new Commerce.AsyncResult(callerContext);
                    var signatureRequest = {
                        Token: this._lockToken
                    };
                    if (this.isActive) {
                        HardwareStation.HardwareStationContext.instance
                            .peripheral("SignatureCapture")
                            .execute("GetSignature", signatureRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true)
                            .done(function (results) {
                            if (!results.UserTerminatedSignature || !Commerce.StringExtensions.isEmptyOrWhitespace(results.Signature)) {
                                asyncResult.resolve(results.Signature);
                            }
                            else {
                                asyncResult.resolve(Commerce.StringExtensions.EMPTY);
                            }
                        })
                            .fail(function (error) {
                            Commerce.RetailLogger.peripheralsGettingSignatureFailed(Commerce.ErrorHelper.serializeError(error), Commerce.StringExtensions.EMPTY);
                            asyncResult.reject(error);
                        });
                    }
                    else {
                        asyncResult.resolve(Commerce.StringExtensions.EMPTY);
                    }
                    return asyncResult;
                };
                SignatureCapture.prototype.cancelSignature = function (callerContext) {
                    var asyncResult = new Commerce.VoidAsyncResult(callerContext);
                    var lockedRequest = {
                        Token: this._lockToken
                    };
                    if (this.isActive) {
                        HardwareStation.HardwareStationContext.instance.peripheral("SignatureCapture").execute("CancelOperation", lockedRequest)
                            .done(function () {
                            asyncResult.resolve();
                        })
                            .fail(function (error) {
                            Commerce.RetailLogger.peripheralsCancelGettingSignatureFailed(Commerce.ErrorHelper.serializeError(error), Commerce.StringExtensions.EMPTY);
                            asyncResult.reject(error);
                        });
                    }
                    else {
                        asyncResult.resolve();
                    }
                    return asyncResult;
                };
                return SignatureCapture;
            }());
            HardwareStation.SignatureCapture = SignatureCapture;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var HardwareStation;
        (function (HardwareStation) {
            "use strict";
            var SignaturePad = (function () {
                function SignaturePad() {
                    this._isActive = false;
                }
                Object.defineProperty(SignaturePad.prototype, "isActive", {
                    get: function () {
                        return this._isActive;
                    },
                    enumerable: true,
                    configurable: true
                });
                SignaturePad.prototype.openDevice = function (correlationId) {
                    var _this = this;
                    this._isActive = false;
                    this._lockToken = null;
                    var deviceTypeName = Commerce.Proxy.Entities.PeripheralDeviceType[Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceTypeValue];
                    Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceStarted(Commerce.ApplicationContext.Instance.hardwareProfile.ProfileDescription, Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceName, deviceTypeName, correlationId);
                    if (Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceTypeValue !== Commerce.Proxy.Entities.PeripheralDeviceType.None) {
                        var sigCapLockRequest = {
                            DeviceName: Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceName,
                            DeviceType: Commerce.Proxy.Entities.PeripheralDeviceType[Commerce.ApplicationContext.Instance.hardwareProfile.SignatureCaptureDeviceTypeValue],
                            Culture: Commerce.ApplicationContext.Instance.deviceConfiguration.CultureName
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral(SignaturePad._signaturePadPeripheralName)
                            .execute(SignaturePad._lockActionString, sigCapLockRequest, SignaturePad._defaultTimeOutPeriod, true, correlationId)
                            .done(function (result) {
                            Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceSucceeded(result, correlationId);
                            _this._lockToken = result;
                            _this._isActive = true;
                        })
                            .map(function (result) {
                            return { canceled: false };
                        }).fail(function (error) {
                            Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceFailed(Commerce.ErrorHelper.serializeError(error), correlationId);
                        });
                    }
                    else {
                        Commerce.RetailLogger.peripheralsOpenSignatureCaptureDeviceCancelled(correlationId);
                        return Commerce.AsyncResult.createResolved({ canceled: true });
                    }
                };
                SignaturePad.prototype.closeDevice = function (correlationId) {
                    var _this = this;
                    Commerce.RetailLogger.peripheralsCloseSignatureCaptureDeviceStarted(correlationId);
                    if (this._isActive) {
                        var unlockRequest = {
                            Token: this._lockToken
                        };
                        return HardwareStation.HardwareStationContext.instance.peripheral(SignaturePad._signaturePadPeripheralName)
                            .execute(SignaturePad._unlockActionString, unlockRequest, SignaturePad._defaultTimeOutPeriod, true, correlationId)
                            .done(function () {
                            Commerce.RetailLogger.peripheralsCloseSignatureCaptureDeviceSucceeded(correlationId);
                            _this._lockToken = null;
                            _this._isActive = false;
                        }).fail(function (error) {
                            Commerce.RetailLogger.peripheralsCloseSignatureCaptureDeviceFailed(Commerce.ErrorHelper.serializeError(error), correlationId);
                        });
                    }
                    else {
                        Commerce.RetailLogger.peripheralsCloseSignatureCaptureDeviceCancelled(correlationId);
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                SignaturePad.prototype.getSignature = function (correlationId) {
                    Commerce.RetailLogger.peripheralsGettingSignatureStarted(correlationId);
                    var signatureRequest = {
                        Token: this._lockToken
                    };
                    if (this._isActive) {
                        return HardwareStation.HardwareStationContext.instance.peripheral(SignaturePad._signaturePadPeripheralName).execute(SignaturePad._getSignatureActionString, signatureRequest, HardwareStation.HardwareStationContext.HS_DEFAULT_LONG_CONNECTION_TIMEOUT, true, correlationId)
                            .map(function (results) {
                            if (!results.UserTerminatedSignature) {
                                Commerce.RetailLogger.peripheralsGettingSignatureSucceeded(correlationId);
                                return ({ canceled: false, data: results.Signature });
                            }
                            else {
                                Commerce.RetailLogger.peripheralsGettingSignatureTerminatedByUser(correlationId);
                                return ({ canceled: true, data: Commerce.StringExtensions.EMPTY });
                            }
                        }).fail(function (error) {
                            Commerce.RetailLogger.peripheralsGettingSignatureFailed(Commerce.ErrorHelper.serializeError(error), correlationId);
                        });
                    }
                    else {
                        Commerce.RetailLogger.peripheralsGettingSignatureCancelled(correlationId);
                        return Commerce.AsyncResult.createResolved({ canceled: true, data: Commerce.StringExtensions.EMPTY });
                    }
                };
                SignaturePad.prototype.cancelSignature = function (correlationId) {
                    Commerce.RetailLogger.peripheralsCancelGettingSignatureStarted(correlationId);
                    var lockedRequest = {
                        Token: this._lockToken
                    };
                    if (this._isActive) {
                        return HardwareStation.HardwareStationContext.instance.peripheral(SignaturePad._signaturePadPeripheralName)
                            .execute(SignaturePad._cancelActionString, lockedRequest, SignaturePad._defaultTimeOutPeriod, true, correlationId)
                            .done(function () {
                            Commerce.RetailLogger.peripheralsCancelGettingSignatureSucceeded(correlationId);
                        }).fail(function (error) {
                            Commerce.RetailLogger.peripheralsCancelGettingSignatureFailed(Commerce.ErrorHelper.serializeError(error), correlationId);
                        });
                    }
                    else {
                        Commerce.RetailLogger.peripheralsCancelGettingSignatureCancelled(correlationId);
                        return Commerce.VoidAsyncResult.createResolved();
                    }
                };
                SignaturePad._signaturePadPeripheralName = "SignatureCapture";
                SignaturePad._lockActionString = "Lock";
                SignaturePad._unlockActionString = "Unlock";
                SignaturePad._getSignatureActionString = "GetSignature";
                SignaturePad._cancelActionString = "CancelOperation";
                SignaturePad._defaultTimeOutPeriod = 0;
                return SignaturePad;
            }());
            HardwareStation.SignaturePad = SignaturePad;
        })(HardwareStation = Peripherals.HardwareStation || (Peripherals.HardwareStation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var BarcodeScannerCloseRequest = (function (_super) {
        __extends(BarcodeScannerCloseRequest, _super);
        function BarcodeScannerCloseRequest(timeout, suppressGlobalErrorEvent, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.timeout = timeout;
            _this.suppressGlobalErrorEvent = suppressGlobalErrorEvent;
            return _this;
        }
        return BarcodeScannerCloseRequest;
    }(Commerce.Request));
    Commerce.BarcodeScannerCloseRequest = BarcodeScannerCloseRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var BarcodeScannerCloseResponse = (function (_super) {
        __extends(BarcodeScannerCloseResponse, _super);
        function BarcodeScannerCloseResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return BarcodeScannerCloseResponse;
    }(Commerce.Response));
    Commerce.BarcodeScannerCloseResponse = BarcodeScannerCloseResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var BarcodeScannerGetBarcodesRequest = (function (_super) {
        __extends(BarcodeScannerGetBarcodesRequest, _super);
        function BarcodeScannerGetBarcodesRequest(data, timeout, suppressGlobalErrorEvent, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.data = data;
            _this.timeout = timeout;
            _this.suppressGlobalErrorEvent = suppressGlobalErrorEvent;
            return _this;
        }
        return BarcodeScannerGetBarcodesRequest;
    }(Commerce.Request));
    Commerce.BarcodeScannerGetBarcodesRequest = BarcodeScannerGetBarcodesRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var BarcodeScannerGetBarcodesResponse = (function (_super) {
        __extends(BarcodeScannerGetBarcodesResponse, _super);
        function BarcodeScannerGetBarcodesResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return BarcodeScannerGetBarcodesResponse;
    }(Commerce.ClientResponse));
    Commerce.BarcodeScannerGetBarcodesResponse = BarcodeScannerGetBarcodesResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var BarcodeScannerOpenRequest = (function (_super) {
        __extends(BarcodeScannerOpenRequest, _super);
        function BarcodeScannerOpenRequest(data, timeout, suppressGlobalErrorEvent, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.data = data;
            _this.timeout = timeout;
            _this.suppressGlobalErrorEvent = suppressGlobalErrorEvent;
            return _this;
        }
        return BarcodeScannerOpenRequest;
    }(Commerce.Request));
    Commerce.BarcodeScannerOpenRequest = BarcodeScannerOpenRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var BarcodeScannerOpenResponse = (function (_super) {
        __extends(BarcodeScannerOpenResponse, _super);
        function BarcodeScannerOpenResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return BarcodeScannerOpenResponse;
    }(Commerce.Response));
    Commerce.BarcodeScannerOpenResponse = BarcodeScannerOpenResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var CardPaymentAuthorizeCardTokenPeripheralRequest = (function (_super) {
            __extends(CardPaymentAuthorizeCardTokenPeripheralRequest, _super);
            function CardPaymentAuthorizeCardTokenPeripheralRequest(correlationId, amount, cardTokenXml, paymentServiceAccountId, extensionTransactionProperties) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid parameters passed to the CardPaymentAuthorizeCardTokenPeripheralRequest constructor: "
                        + "correlationId cannot be null or undefined.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(amount)) {
                    throw new Error("Invalid parameters passed to the CardPaymentAuthorizeCardTokenPeripheralRequest constructor: "
                        + "amount cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(cardTokenXml)) {
                    throw new Error("Invalid parameters passed to the CardPaymentAuthorizeCardTokenPeripheralRequest constructor: "
                        + "cardTokenXml cannot be null or undefined.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.amount = amount;
                _this.cardTokenXml = cardTokenXml;
                _this.paymentServiceAccountId = Commerce.ObjectExtensions.isNullOrUndefined(paymentServiceAccountId) ? null : paymentServiceAccountId;
                _this.extensionTransactionProperties = Commerce.ObjectExtensions.isNullOrUndefined(extensionTransactionProperties) ? null : extensionTransactionProperties;
                return _this;
            }
            return CardPaymentAuthorizeCardTokenPeripheralRequest;
        }(Commerce.Request));
        Peripherals.CardPaymentAuthorizeCardTokenPeripheralRequest = CardPaymentAuthorizeCardTokenPeripheralRequest;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        "use strict";
        var CardPaymentAuthorizeCardTokenPeripheralResponse = (function (_super) {
            __extends(CardPaymentAuthorizeCardTokenPeripheralResponse, _super);
            function CardPaymentAuthorizeCardTokenPeripheralResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CardPaymentAuthorizeCardTokenPeripheralResponse;
        }(Commerce.ClientResponse));
        Peripherals.CardPaymentAuthorizeCardTokenPeripheralResponse = CardPaymentAuthorizeCardTokenPeripheralResponse;
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DedicatedHardwareStationRequest = (function (_super) {
        __extends(DedicatedHardwareStationRequest, _super);
        function DedicatedHardwareStationRequest(targetHardwareStationRequestUri, action, requestBody, requestLocale, timeout, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(targetHardwareStationRequestUri)) {
                throw new Commerce.Proxy.Entities.Error("Invalid parameters passed to the DedicatedHardwareStationRequest constructor: targetHardwareStationRequestUri cannot be null or undefined.");
            }
            _this.action = action;
            _this.targetHardwareStationRequestUri = targetHardwareStationRequestUri;
            _this.requestBody = requestBody;
            _this.requestLocale = requestLocale;
            _this.timeout = timeout;
            return _this;
        }
        return DedicatedHardwareStationRequest;
    }(Commerce.Request));
    Commerce.DedicatedHardwareStationRequest = DedicatedHardwareStationRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var DedicatedHardwareStationResponse = (function (_super) {
        __extends(DedicatedHardwareStationResponse, _super);
        function DedicatedHardwareStationResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return DedicatedHardwareStationResponse;
    }(Commerce.ClientResponse));
    Commerce.DedicatedHardwareStationResponse = DedicatedHardwareStationResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MagneticStripeReaderCloseRequest = (function (_super) {
        __extends(MagneticStripeReaderCloseRequest, _super);
        function MagneticStripeReaderCloseRequest(timeout, suppressGlobalErrorEvent, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.timeout = timeout;
            _this.suppressGlobalErrorEvent = suppressGlobalErrorEvent;
            return _this;
        }
        return MagneticStripeReaderCloseRequest;
    }(Commerce.Request));
    Commerce.MagneticStripeReaderCloseRequest = MagneticStripeReaderCloseRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MagneticStripeReaderCloseResponse = (function (_super) {
        __extends(MagneticStripeReaderCloseResponse, _super);
        function MagneticStripeReaderCloseResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MagneticStripeReaderCloseResponse;
    }(Commerce.Response));
    Commerce.MagneticStripeReaderCloseResponse = MagneticStripeReaderCloseResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MagneticStripeReaderGetMsrSwipeRequest = (function (_super) {
        __extends(MagneticStripeReaderGetMsrSwipeRequest, _super);
        function MagneticStripeReaderGetMsrSwipeRequest(data, timeout, suppressGlobalErrorEvent, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.data = data;
            _this.timeout = timeout;
            _this.suppressGlobalErrorEvent = suppressGlobalErrorEvent;
            return _this;
        }
        return MagneticStripeReaderGetMsrSwipeRequest;
    }(Commerce.Request));
    Commerce.MagneticStripeReaderGetMsrSwipeRequest = MagneticStripeReaderGetMsrSwipeRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MagneticStripeReaderGetMsrSwipeResponse = (function (_super) {
        __extends(MagneticStripeReaderGetMsrSwipeResponse, _super);
        function MagneticStripeReaderGetMsrSwipeResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MagneticStripeReaderGetMsrSwipeResponse;
    }(Commerce.ClientResponse));
    Commerce.MagneticStripeReaderGetMsrSwipeResponse = MagneticStripeReaderGetMsrSwipeResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MagneticStripeReaderOpenRequest = (function (_super) {
        __extends(MagneticStripeReaderOpenRequest, _super);
        function MagneticStripeReaderOpenRequest(data, timeout, suppressGlobalErrorEvent, correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.data = data;
            _this.timeout = timeout;
            _this.suppressGlobalErrorEvent = suppressGlobalErrorEvent;
            return _this;
        }
        return MagneticStripeReaderOpenRequest;
    }(Commerce.Request));
    Commerce.MagneticStripeReaderOpenRequest = MagneticStripeReaderOpenRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var MagneticStripeReaderOpenResponse = (function (_super) {
        __extends(MagneticStripeReaderOpenResponse, _super);
        function MagneticStripeReaderOpenResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MagneticStripeReaderOpenResponse;
    }(Commerce.Response));
    Commerce.MagneticStripeReaderOpenResponse = MagneticStripeReaderOpenResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PaymentTerminalFetchTokenPeripheralRequest = (function (_super) {
        __extends(PaymentTerminalFetchTokenPeripheralRequest, _super);
        function PaymentTerminalFetchTokenPeripheralRequest(correlationId, isManualEntry, extensionTransactionProperties) {
            var _this = _super.call(this, correlationId) || this;
            _this.isManualEntry = isManualEntry;
            _this.extensionTransactionProperties = extensionTransactionProperties;
            return _this;
        }
        return PaymentTerminalFetchTokenPeripheralRequest;
    }(Commerce.Request));
    Commerce.PaymentTerminalFetchTokenPeripheralRequest = PaymentTerminalFetchTokenPeripheralRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PaymentTerminalFetchTokenPeripheralResponse = (function (_super) {
        __extends(PaymentTerminalFetchTokenPeripheralResponse, _super);
        function PaymentTerminalFetchTokenPeripheralResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PaymentTerminalFetchTokenPeripheralResponse;
    }(Commerce.ClientResponse));
    Commerce.PaymentTerminalFetchTokenPeripheralResponse = PaymentTerminalFetchTokenPeripheralResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PaymentTerminalGetTransactionByTransactionReferenceRequest = (function (_super) {
        __extends(PaymentTerminalGetTransactionByTransactionReferenceRequest, _super);
        function PaymentTerminalGetTransactionByTransactionReferenceRequest(paymentTransactionReferenceData, correlationId) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(paymentTransactionReferenceData)) {
                throw new Error("The paymentTransactionReferenceData is required in PaymentTerminalGetTransactionByTransactionReferenceRequest's constructor.");
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                throw new Error("The correlationId is required in PaymentTerminalGetTransactionByTransactionReferenceRequest's constructor.");
            }
            _this = _super.call(this, correlationId) || this;
            _this.paymentTransactionReference = paymentTransactionReferenceData;
            return _this;
        }
        return PaymentTerminalGetTransactionByTransactionReferenceRequest;
    }(Commerce.Request));
    Commerce.PaymentTerminalGetTransactionByTransactionReferenceRequest = PaymentTerminalGetTransactionByTransactionReferenceRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PaymentTerminalGetTransactionByTransactionReferenceResponse = (function (_super) {
        __extends(PaymentTerminalGetTransactionByTransactionReferenceResponse, _super);
        function PaymentTerminalGetTransactionByTransactionReferenceResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PaymentTerminalGetTransactionByTransactionReferenceResponse;
    }(Commerce.ClientResponse));
    Commerce.PaymentTerminalGetTransactionByTransactionReferenceResponse = PaymentTerminalGetTransactionByTransactionReferenceResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PaymentTerminalGetTransactionReferenceIdRequest = (function (_super) {
        __extends(PaymentTerminalGetTransactionReferenceIdRequest, _super);
        function PaymentTerminalGetTransactionReferenceIdRequest(posTerminalId, eftTerminalId, correlationId) {
            var _this = this;
            if (Commerce.StringExtensions.isNullOrWhitespace(posTerminalId)) {
                throw new Error("posTerminalId is required to construct PaymentTerminalGetTransactionReferenceIdRequest.");
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(eftTerminalId)) {
                throw new Error("eftTerminalId is required to construct PaymentTerminalGetTransactionReferenceIdRequest.");
            }
            if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                throw new Error("correlationId is required to construct PaymentTerminalGetTransactionReferenceIdRequest.");
            }
            _this = _super.call(this, correlationId) || this;
            _this.posTerminalId = posTerminalId;
            _this.eftTerminalId = eftTerminalId;
            return _this;
        }
        return PaymentTerminalGetTransactionReferenceIdRequest;
    }(Commerce.Request));
    Commerce.PaymentTerminalGetTransactionReferenceIdRequest = PaymentTerminalGetTransactionReferenceIdRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var PaymentTerminalGetTransactionReferenceIdResponse = (function (_super) {
        __extends(PaymentTerminalGetTransactionReferenceIdResponse, _super);
        function PaymentTerminalGetTransactionReferenceIdResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PaymentTerminalGetTransactionReferenceIdResponse;
    }(Commerce.ClientResponse));
    Commerce.PaymentTerminalGetTransactionReferenceIdResponse = PaymentTerminalGetTransactionReferenceIdResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var NoOperation;
        (function (NoOperation) {
            "use strict";
            var NopBarcodeScanner = (function () {
                function NopBarcodeScanner() {
                }
                NopBarcodeScanner.prototype.enableAsync = function (scannerMsgEventHandler) {
                    return Commerce.VoidAsyncResult.createRejected();
                };
                NopBarcodeScanner.prototype.disableAsync = function () {
                    return Commerce.VoidAsyncResult.createRejected();
                };
                return NopBarcodeScanner;
            }());
            NoOperation.NopBarcodeScanner = NopBarcodeScanner;
        })(NoOperation = Peripherals.NoOperation || (Peripherals.NoOperation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var NoOperation;
        (function (NoOperation) {
            "use strict";
            var NopDualDisplay = (function () {
                function NopDualDisplay() {
                }
                NopDualDisplay.prototype.initialize = function () {
                };
                NopDualDisplay.prototype.sendCartChangedMessage = function () {
                };
                NopDualDisplay.prototype.sendCustomerChangedMessage = function () {
                };
                NopDualDisplay.prototype.sendIsLoggedOnStateChangedMessage = function () {
                };
                return NopDualDisplay;
            }());
            NoOperation.NopDualDisplay = NopDualDisplay;
        })(NoOperation = Peripherals.NoOperation || (Peripherals.NoOperation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var NoOperation;
        (function (NoOperation) {
            "use strict";
            var NopMagneticStripeReader = (function () {
                function NopMagneticStripeReader() {
                }
                NopMagneticStripeReader.prototype.enableAsync = function (readerMsgEventHandler) {
                    return Commerce.VoidAsyncResult.createRejected();
                };
                NopMagneticStripeReader.prototype.disableAsync = function () {
                    return Commerce.VoidAsyncResult.createRejected();
                };
                return NopMagneticStripeReader;
            }());
            NoOperation.NopMagneticStripeReader = NopMagneticStripeReader;
        })(NoOperation = Peripherals.NoOperation || (Peripherals.NoOperation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Peripherals;
    (function (Peripherals) {
        var NoOperation;
        (function (NoOperation) {
            "use strict";
            var NopProximity = (function () {
                function NopProximity() {
                }
                NopProximity.prototype.subscribeForMessage = function (messageType, messageReceivedHandler) {
                    throw new Error("Not supported.");
                };
                NopProximity.prototype.unsubscribeForMessage = function (subscriptionId) {
                };
                return NopProximity;
            }());
            NoOperation.NopProximity = NopProximity;
        })(NoOperation = Peripherals.NoOperation || (Peripherals.NoOperation = {}));
    })(Peripherals = Commerce.Peripherals || (Commerce.Peripherals = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Products;
    (function (Products) {
        "use strict";
        var GetCurrentProductCatalogStoreClientRequestHandler = (function (_super) {
            __extends(GetCurrentProductCatalogStoreClientRequestHandler, _super);
            function GetCurrentProductCatalogStoreClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetCurrentProductCatalogStoreClientRequestHandler.prototype.supportedRequestType = function () {
                return Products.GetCurrentProductCatalogStoreClientRequest;
            };
            GetCurrentProductCatalogStoreClientRequestHandler.prototype.executeAsync = function (request) {
                var response = new Products.GetCurrentProductCatalogStoreClientResponse(Commerce.Session.instance.productCatalogStore.Store, Commerce.Session.instance.productCatalogStore.Context);
                return Promise.resolve({ canceled: false, data: response });
            };
            return GetCurrentProductCatalogStoreClientRequestHandler;
        }(Commerce.RequestHandler));
        Products.GetCurrentProductCatalogStoreClientRequestHandler = GetCurrentProductCatalogStoreClientRequestHandler;
    })(Products = Commerce.Products || (Commerce.Products = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Products;
    (function (Products) {
        "use strict";
        var GetProductsByIdsClientRequestHandler = (function (_super) {
            __extends(GetProductsByIdsClientRequestHandler, _super);
            function GetProductsByIdsClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetProductsByIdsClientRequestHandler.prototype.supportedRequestType = function () {
                return Products.GetProductsByIdsClientRequest;
            };
            GetProductsByIdsClientRequestHandler.prototype.executeAsync = function (request) {
                var distinctProductIds = Commerce.ArrayExtensions.distinct(request.productIds);
                if (!Commerce.ArrayExtensions.hasElements(distinctProductIds)) {
                    var response = new Products.GetProductsByIdsClientResponse([]);
                    return Promise.resolve({ canceled: false, data: response });
                }
                var allProductsAreCached = distinctProductIds.every(function (id) {
                    return !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Session.instance.getFromProductsInCartCache(id));
                });
                if (allProductsAreCached) {
                    var cachedProducts = distinctProductIds.map(function (id) {
                        return Commerce.Session.instance.getFromProductsInCartCache(id);
                    });
                    return Promise.resolve({
                        canceled: false,
                        data: new Products.GetProductsByIdsClientResponse(cachedProducts)
                    });
                }
                else {
                    var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                    var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                    return productManager.getByIdsAsync(distinctProductIds, channelId).map(function (products) {
                        var response = new Products.GetProductsByIdsClientResponse(products);
                        var result = {
                            canceled: false,
                            data: response
                        };
                        return result;
                    }).getPromise();
                }
            };
            return GetProductsByIdsClientRequestHandler;
        }(Commerce.RequestHandler));
        Products.GetProductsByIdsClientRequestHandler = GetProductsByIdsClientRequestHandler;
    })(Products = Commerce.Products || (Commerce.Products = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Products;
    (function (Products) {
        "use strict";
        var GetRefinerValuesByTextServiceRequestHandler = (function (_super) {
            __extends(GetRefinerValuesByTextServiceRequestHandler, _super);
            function GetRefinerValuesByTextServiceRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetRefinerValuesByTextServiceRequestHandler.prototype.supportedRequestType = function () {
                return Products.GetRefinerValuesByTextServiceRequest;
            };
            GetRefinerValuesByTextServiceRequestHandler.prototype.executeAsync = function (request) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(request.productRefiner)) {
                    return Promise.reject([new Commerce.Proxy.Entities.Error("string_4164")]);
                }
                var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                return productManager.getRefinerValuesByTextAsync(request.searchText, request.productRefiner.RecordId, request.productRefiner.SourceValue, Commerce.Session.instance.productCatalogStore.Context.CatalogId)
                    .map(function (result) {
                    return { canceled: false, data: new Products.GetRefinerValuesByTextServiceResponse(result) };
                }).getPromise();
            };
            return GetRefinerValuesByTextServiceRequestHandler;
        }(Commerce.RequestHandler));
        Products.GetRefinerValuesByTextServiceRequestHandler = GetRefinerValuesByTextServiceRequestHandler;
    })(Products = Commerce.Products || (Commerce.Products = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Products;
    (function (Products) {
        "use strict";
        var GetSerialNumberClientRequestHandler = (function (_super) {
            __extends(GetSerialNumberClientRequestHandler, _super);
            function GetSerialNumberClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetSerialNumberClientRequestHandler.prototype.supportedRequestType = function () {
                return Products.GetSerialNumberClientRequest;
            };
            GetSerialNumberClientRequestHandler.prototype.executeAsync = function (request) {
                var activity = new Commerce.Activities.GetSerialNumberActivity({ product: request.product });
                return activity.execute().map(function () {
                    var hasActivityResponse = !Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                    var response = null;
                    if (hasActivityResponse) {
                        response = new Products.GetSerialNumberClientResponse(activity.response.serialNumber);
                    }
                    return { canceled: !hasActivityResponse, data: response };
                }).getPromise();
            };
            return GetSerialNumberClientRequestHandler;
        }(Commerce.RequestHandler));
        Products.GetSerialNumberClientRequestHandler = GetSerialNumberClientRequestHandler;
    })(Products = Commerce.Products || (Commerce.Products = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Products;
    (function (Products) {
        "use strict";
        var SelectProductClientRequestHandler = (function (_super) {
            __extends(SelectProductClientRequestHandler, _super);
            function SelectProductClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectProductClientRequestHandler.prototype.supportedRequestType = function () {
                return Products.SelectProductClientRequest;
            };
            SelectProductClientRequestHandler.prototype.executeAsync = function (request) {
                var context = {
                    correlationId: request.correlationId,
                    searchText: request.searchText
                };
                var activity = new Commerce.Activities.SelectProductActivity(context);
                return activity.execute().map(function (result) {
                    if (result.canceled) {
                        return { canceled: true, data: null };
                    }
                    return { canceled: false, data: new Products.SelectProductClientResponse(result.data) };
                }).getPromise();
            };
            return SelectProductClientRequestHandler;
        }(Commerce.RequestHandler));
        Products.SelectProductClientRequestHandler = SelectProductClientRequestHandler;
    })(Products = Commerce.Products || (Commerce.Products = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Products;
    (function (Products) {
        var SelectProductVariantClientRequestHandler = (function (_super) {
            __extends(SelectProductVariantClientRequestHandler, _super);
            function SelectProductVariantClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectProductVariantClientRequestHandler.prototype.supportedRequestType = function () {
                return Products.SelectProductVariantClientRequest;
            };
            SelectProductVariantClientRequestHandler.prototype.executeAsync = function (request) {
                var _this = this;
                var productMaster = request.productMaster;
                if (productMaster.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Standalone
                    || productMaster.ProductTypeValue === Commerce.Proxy.Entities.ProductType.Variant
                    || productMaster.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitVariant) {
                    return Promise.resolve({ canceled: false, data: new Products.SelectProductVariantClientResponse(productMaster) });
                }
                else if (productMaster.ProductTypeValue === Commerce.Proxy.Entities.ProductType.KitMaster) {
                    return this._getDefaultKitConfigurationAsync(productMaster)
                        .map(function (kitVariant) {
                        return { canceled: false, data: new Products.SelectProductVariantClientResponse(kitVariant) };
                    }).getPromise();
                }
                var preSelectedDimensions = request.preSelectedDimensions;
                if (Commerce.ObjectExtensions.isNullOrUndefined(productMaster)
                    || !Commerce.ArrayExtensions.hasElements(productMaster.Dimensions)) {
                    var noDimensionsAvailableError = new Commerce.Proxy.Entities.Error("string_838");
                    return Promise.reject([noDimensionsAvailableError]);
                }
                var productDimensions = Commerce.ObjectExtensions.clone(productMaster.Dimensions);
                var dimensionDetails = [];
                var selectedDimensions = [];
                var variantSelectionQueue = new Commerce.AsyncQueue();
                var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var additionalDimensionValueSelectionNeeded = false;
                productDimensions.forEach(function (dimension) {
                    variantSelectionQueue.enqueue(function () {
                        if (additionalDimensionValueSelectionNeeded) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else {
                            return productManager.getDimensionValuesAsync(productMaster.RecordId, channelId, dimension.DimensionTypeValue, selectedDimensions, null)
                                .done(function (dimensionValues) {
                                var dimensionDetail = { dimension: dimension, dimensionValues: dimensionValues };
                                if (dimensionValues.length === 1) {
                                    dimension.DimensionValue = dimensionValues[0];
                                    selectedDimensions.push(dimension);
                                }
                                else if (Commerce.ArrayExtensions.hasElements(preSelectedDimensions)) {
                                    var preSelectedDimension = Commerce.ArrayExtensions.firstOrUndefined(preSelectedDimensions, function (curDimension) {
                                        return curDimension.DimensionTypeValue === dimension.DimensionTypeValue;
                                    });
                                    var currentDimensionTypeWasPreSelected = !Commerce.ObjectExtensions.isNullOrUndefined(preSelectedDimension)
                                        && !Commerce.ObjectExtensions.isNullOrUndefined(preSelectedDimension.DimensionValue)
                                        && !Commerce.NumberExtensions.isNullNaNOrZero(preSelectedDimension.DimensionValue.RecordId);
                                    if (currentDimensionTypeWasPreSelected) {
                                        selectedDimensions.push(preSelectedDimension);
                                        dimensionDetail.dimension = preSelectedDimension;
                                    }
                                    else {
                                        additionalDimensionValueSelectionNeeded = true;
                                    }
                                }
                                else {
                                    additionalDimensionValueSelectionNeeded = true;
                                }
                                dimensionDetails.push(dimensionDetail);
                            });
                        }
                    });
                });
                var variantProduct;
                variantSelectionQueue.enqueue(function () {
                    if (additionalDimensionValueSelectionNeeded) {
                        var activity_4 = new Commerce.Activities.SelectVariantActivity({ product: productMaster, preLoadedDimensionDetails: dimensionDetails });
                        activity_4.responseHandler = function (response) {
                            return _this._getVariantByDimensionValues(productMaster, response.selectedDimensions)
                                .done(function (variant) {
                                variantProduct = variant;
                            });
                        };
                        return activity_4.execute().done(function () {
                            if (Commerce.ObjectExtensions.isNullOrUndefined(activity_4.response)) {
                                variantSelectionQueue.cancel();
                            }
                        });
                    }
                    else {
                        return _this._getVariantByDimensionValues(productMaster, selectedDimensions).done(function (variant) {
                            variantProduct = variant;
                        });
                    }
                });
                return variantSelectionQueue.run().map(function (queueResult) {
                    return queueResult.canceled ?
                        { canceled: true, data: undefined } : { canceled: false, data: new Products.SelectProductVariantClientResponse(variantProduct) };
                }).getPromise();
            };
            SelectProductVariantClientRequestHandler.prototype._getVariantByDimensionValues = function (product, selectedDimensions) {
                var variantRetrievalResult = new Commerce.AsyncResult();
                if (!Commerce.ArrayExtensions.hasElements(selectedDimensions) || selectedDimensions.length !== product.Dimensions.length) {
                    variantRetrievalResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.REQUIRED_DIMENSION_VALUES_MISSING)]);
                }
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                productManager.getVariantsByDimensionValuesAsync(product.RecordId, channelId, selectedDimensions)
                    .done(function (variants) {
                    var variantProduct = Commerce.ArrayExtensions.firstOrUndefined(variants);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(variantProduct)) {
                        variantRetrievalResult.resolve(variantProduct);
                    }
                    else {
                        variantRetrievalResult.reject([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.MATCHING_VARIANT_NOT_FOUND)]);
                    }
                }).fail(function (variantRetrievalErrors) {
                    variantRetrievalResult.reject(variantRetrievalErrors);
                });
                return variantRetrievalResult;
            };
            SelectProductVariantClientRequestHandler.prototype._getDefaultKitConfigurationAsync = function (kitMaster) {
                var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                var defaultComponentsInSlots;
                var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                var kitVariant;
                var kitConfigurationQueue = new Commerce.AsyncQueue();
                kitConfigurationQueue.enqueue(function () {
                    return productManager.getDefaultComponentsAsync(kitMaster.RecordId, channelId).done(function (components) {
                        defaultComponentsInSlots = components.map(function (component) {
                            return { ComponentId: component.ProductId, SlotId: component.SlotId };
                        });
                    });
                }).enqueue(function () {
                    return productManager.getVariantsByComponentsInSlotsAsync(kitMaster.RecordId, channelId, defaultComponentsInSlots, 1, 0)
                        .done(function (kitVariants) {
                        if (Commerce.ArrayExtensions.hasElements(kitVariants)) {
                            kitVariant = kitVariants[0];
                        }
                    });
                });
                return kitConfigurationQueue.run().map(function (queueResult) {
                    return kitVariant;
                });
            };
            return SelectProductVariantClientRequestHandler;
        }(Commerce.RequestHandler));
        Products.SelectProductVariantClientRequestHandler = SelectProductVariantClientRequestHandler;
    })(Products = Commerce.Products || (Commerce.Products = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var RefinerBase = (function () {
            function RefinerBase(id, keyName, type, selectedValues, validationFunction) {
                this._id = id;
                this._keyName = keyName;
                this._type = type;
                this._selectedValues = selectedValues || [];
                this._validationFunction = validationFunction;
            }
            Object.defineProperty(RefinerBase.prototype, "ID", {
                get: function () {
                    return this._id;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RefinerBase.prototype, "KeyName", {
                get: function () {
                    return this._keyName;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RefinerBase.prototype, "Type", {
                get: function () {
                    return this._type;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RefinerBase.prototype, "SelectedValue", {
                get: function () {
                    return Commerce.ArrayExtensions.firstOrUndefined(this._selectedValues);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RefinerBase.prototype, "SelectedValues", {
                get: function () {
                    return this._selectedValues;
                },
                set: function (values) {
                    this._selectedValues = values || [];
                },
                enumerable: true,
                configurable: true
            });
            RefinerBase.prototype.hasValue = function () {
                return !Commerce.ObjectExtensions.isNullOrUndefined(this.SelectedValue);
            };
            RefinerBase.prototype.clear = function () {
                this._selectedValues = [];
            };
            RefinerBase.prototype.validate = function () {
                if (Commerce.ObjectExtensions.isFunction(this._validationFunction)) {
                    return this._validationFunction(this);
                }
                else {
                    return [];
                }
            };
            return RefinerBase;
        }());
        Refiners.RefinerBase = RefinerBase;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var DateRefiner = (function (_super) {
            __extends(DateRefiner, _super);
            function DateRefiner(id, keyName, startDate, endDate, validationFunction) {
                var _this = this;
                var selectedValues = DateRefiner._getDateRange(startDate, endDate);
                _this = _super.call(this, id, keyName, Refiners.RefinerType.Date, selectedValues, validationFunction) || this;
                return _this;
            }
            Object.defineProperty(DateRefiner.prototype, "startDate", {
                get: function () {
                    var startEndDate = Commerce.ArrayExtensions.firstOrUndefined(this.SelectedValues, function (v) { return v.isStartDate; });
                    return Commerce.ObjectExtensions.isNullOrUndefined(startEndDate) ? undefined : startEndDate.date;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DateRefiner.prototype, "endDate", {
                get: function () {
                    var startEndDate = Commerce.ArrayExtensions.firstOrUndefined(this.SelectedValues, function (v) { return !v.isStartDate; });
                    return Commerce.ObjectExtensions.isNullOrUndefined(startEndDate) ? undefined : startEndDate.date;
                },
                enumerable: true,
                configurable: true
            });
            DateRefiner.prototype.updateSelectedValues = function (startDate, endDate) {
                this.SelectedValues = DateRefiner._getDateRange(startDate, endDate);
            };
            DateRefiner._getDateRange = function (startDate, endDate) {
                var result = [];
                if (!Commerce.ObjectExtensions.isNullOrUndefined(startDate)) {
                    result.push({ isStartDate: true, date: startDate });
                }
                if (!Commerce.ObjectExtensions.isNullOrUndefined(endDate)) {
                    result.push({ isStartDate: false, date: endDate });
                }
                return result;
            };
            return DateRefiner;
        }(Refiners.RefinerBase));
        Refiners.DateRefiner = DateRefiner;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var ListRefiner = (function (_super) {
            __extends(ListRefiner, _super);
            function ListRefiner(id, keyName, type, selectedValues, valueOptions) {
                var _this = _super.call(this, id, keyName, type, selectedValues) || this;
                _this._values = valueOptions;
                return _this;
            }
            Object.defineProperty(ListRefiner.prototype, "Values", {
                get: function () {
                    return this._values;
                },
                enumerable: true,
                configurable: true
            });
            return ListRefiner;
        }(Refiners.RefinerBase));
        Refiners.ListRefiner = ListRefiner;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var RefinerType;
        (function (RefinerType) {
            RefinerType[RefinerType["None"] = -1] = "None";
            RefinerType[RefinerType["Text"] = 0] = "Text";
            RefinerType[RefinerType["SingleSelectList"] = 1] = "SingleSelectList";
            RefinerType[RefinerType["MultiSelectList"] = 2] = "MultiSelectList";
            RefinerType[RefinerType["Date"] = 3] = "Date";
        })(RefinerType = Refiners.RefinerType || (Refiners.RefinerType = {}));
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var TextRefiner = (function (_super) {
            __extends(TextRefiner, _super);
            function TextRefiner(id, keyName, selectedValue, validationFunction) {
                var _this = this;
                var selectedValues = Commerce.StringExtensions.isNullOrWhitespace(selectedValue) ? [] : [selectedValue];
                _this = _super.call(this, id, keyName, Refiners.RefinerType.Text, selectedValues, validationFunction) || this;
                return _this;
            }
            return TextRefiner;
        }(Refiners.RefinerBase));
        Refiners.TextRefiner = TextRefiner;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        "use strict";
        var GetRefinerValuesClientResponse = (function (_super) {
            __extends(GetRefinerValuesClientResponse, _super);
            function GetRefinerValuesClientResponse(refiners) {
                var _this = _super.call(this, undefined) || this;
                _this.refiners = refiners;
                return _this;
            }
            return GetRefinerValuesClientResponse;
        }(Commerce.ClientResponse));
        Refiners.GetRefinerValuesClientResponse = GetRefinerValuesClientResponse;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Refiners;
    (function (Refiners) {
        var GetRefinerValuesClientRequest = (function (_super) {
            __extends(GetRefinerValuesClientRequest, _super);
            function GetRefinerValuesClientRequest(refiners, titleResourceId, refinerValuesRequired, validationErrorsTitleResourceId, correlationId) {
                var _this = _super.call(this, correlationId) || this;
                _this.refiners = refiners;
                _this.titleResourceId = titleResourceId;
                _this.validationErrorsTitleResourceId = validationErrorsTitleResourceId;
                _this.refinerValuesRequired = refinerValuesRequired;
                return _this;
            }
            return GetRefinerValuesClientRequest;
        }(Commerce.ClientRequest));
        Refiners.GetRefinerValuesClientRequest = GetRefinerValuesClientRequest;
    })(Refiners = Commerce.Refiners || (Commerce.Refiners = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var CompositionLoader = (function () {
        function CompositionLoader() {
            this._prototypeKeys = Object.create(null);
            this._requestHandlerTypesAndOptions = Object.create(null);
            this._requestInterceptors = Object.create(null);
            this._requestHandlerInterceptors = Object.create(null);
        }
        CompositionLoader.prototype.getRequestHandler = function (request) {
            var handler = null;
            var tuple = this.getRequestHandlerTypes(request)[0];
            if (tuple && tuple.type) {
                handler = this.createRequestHandler(tuple);
            }
            return handler;
        };
        CompositionLoader.prototype.getRequestHandlers = function (request) {
            var _this = this;
            return this.getRequestHandlerTypes(request).map(function (tuple) {
                return _this.createRequestHandler(tuple);
            });
        };
        CompositionLoader.prototype.getRequestHandlersForRequestType = function (requestType) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(requestType)) {
                return [];
            }
            var key = this.getPrototypeKey(requestType.prototype);
            var tuples = this._requestHandlerTypesAndOptions[key];
            tuples = tuples ? tuples : [];
            return tuples.map(function (tuple) {
                return _this.createRequestHandler(tuple);
            }).reverse();
        };
        CompositionLoader.prototype.getAllRequestHandlers = function () {
            var _this = this;
            var allInstances = [];
            Object.keys(this._requestHandlerTypesAndOptions).forEach(function (key) {
                var handlerInstances = _this._requestHandlerTypesAndOptions[key]
                    .map(function (tuple) {
                    return _this.createRequestHandler(tuple);
                });
                allInstances = allInstances.concat(handlerInstances);
            });
            return allInstances;
        };
        CompositionLoader.prototype.getRequestInterceptors = function (request) {
            return this.getAllForPrototypeChain(request, this._requestInterceptors);
        };
        CompositionLoader.prototype.getRequestHandlerInterceptors = function (request) {
            return this.getAllForPrototypeChain(request, this._requestHandlerInterceptors);
        };
        CompositionLoader.prototype.addRequestHandler = function (handlerType, optionsFactory) {
            var requestHandlerInstance = this.createRequestHandler({ type: handlerType, optionsFactory: optionsFactory });
            var requestType = requestHandlerInstance.supportedRequestType();
            var key = this.getPrototypeKey(requestType.prototype);
            var containsHandler = this._requestHandlerTypesAndOptions[key]
                && this._requestHandlerTypesAndOptions[key].some(function (tuple) { return tuple.type === handlerType; });
            if (!containsHandler) {
                var item = { type: handlerType, optionsFactory: optionsFactory };
                this.addToDictionary(key, this._requestHandlerTypesAndOptions, item);
            }
        };
        CompositionLoader.prototype.addRequestInterceptor = function (requestType, interceptor) {
            this.addToDictionary(this.getPrototypeKey(requestType.prototype), this._requestInterceptors, interceptor);
        };
        CompositionLoader.prototype.addRequestHandlerInterceptor = function (requestType, interceptor) {
            this.addToDictionary(this.getPrototypeKey(requestType.prototype), this._requestHandlerInterceptors, interceptor);
        };
        CompositionLoader.prototype.addToDictionary = function (keyName, dictionary, item) {
            if (!dictionary[keyName]) {
                dictionary[keyName] = [];
            }
            dictionary[keyName].push(item);
        };
        CompositionLoader.prototype.getAllForPrototypeChain = function (request, itemsDictionary) {
            var _this = this;
            var items = [];
            var prototypeChain = [];
            var currentPrototype = request ? Object.getPrototypeOf(request) : null;
            while (currentPrototype && (currentPrototype !== Object.prototype)) {
                prototypeChain.push(currentPrototype);
                currentPrototype = Object.getPrototypeOf(currentPrototype);
            }
            prototypeChain.forEach(function (p) {
                var key = _this.getPrototypeKey(p);
                if (itemsDictionary[key]) {
                    items = items.concat(itemsDictionary[key].slice().reverse());
                }
            });
            return items;
        };
        CompositionLoader.prototype.getRequestHandlerTypes = function (request) {
            return this.getAllForPrototypeChain(request, this._requestHandlerTypesAndOptions);
        };
        CompositionLoader.prototype.getPrototypeKey = function (prototype) {
            var name = Commerce.PrototypeHelper.getPrototypeChainTypeName(prototype);
            var keyValuePair = this._prototypeKeys[name]
                ? this._prototypeKeys[name].filter(function (kvp) { return kvp.value === prototype; })[0]
                : null;
            if (!keyValuePair) {
                keyValuePair = { key: null, value: prototype };
                this.addToDictionary(name, this._prototypeKeys, keyValuePair);
                keyValuePair.key = this._prototypeKeys[name].length.toString() + name;
            }
            return keyValuePair.key;
        };
        CompositionLoader.prototype.createRequestHandler = function (requestHandlerTypeAndOptions) {
            var requestHandlerType = requestHandlerTypeAndOptions.type;
            return new requestHandlerType(requestHandlerTypeAndOptions.optionsFactory ? requestHandlerTypeAndOptions.optionsFactory() : undefined);
        };
        return CompositionLoader;
    }());
    Commerce.CompositionLoader = CompositionLoader;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var InterceptorConfiguration = (function () {
        function InterceptorConfiguration() {
        }
        return InterceptorConfiguration;
    }());
    Commerce.InterceptorConfiguration = InterceptorConfiguration;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RequestConfiguration = (function () {
        function RequestConfiguration() {
            this.interceptor = Object.freeze(new Commerce.InterceptorConfiguration());
        }
        return RequestConfiguration;
    }());
    Commerce.RequestConfiguration = RequestConfiguration;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RequestHandlerConfiguration = (function () {
        function RequestHandlerConfiguration() {
            this.interceptor = Object.freeze(new Commerce.InterceptorConfiguration());
        }
        return RequestHandlerConfiguration;
    }());
    Commerce.RequestHandlerConfiguration = RequestHandlerConfiguration;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RuntimeConfiguration = (function () {
        function RuntimeConfiguration(compositionLoader) {
            this.request = Object.freeze(new Commerce.RequestConfiguration());
            this.interceptor = Object.freeze(new Commerce.InterceptorConfiguration());
            this.requestHandler = Object.freeze(new Commerce.RequestHandlerConfiguration());
            this.compositionLoader = Object.freeze(compositionLoader);
        }
        return RuntimeConfiguration;
    }());
    Commerce.RuntimeConfiguration = RuntimeConfiguration;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterRequestHandlersRequestHandler = (function (_super) {
        __extends(RegisterRequestHandlersRequestHandler, _super);
        function RegisterRequestHandlersRequestHandler(compositionLoader) {
            var _this = _super.call(this) || this;
            _this._compositionLoader = compositionLoader;
            _this._replaceableRequestTypes = [
                Commerce.AddTenderLineToCartClientRequest,
                Commerce.CardPaymentBeginTransactionRequest,
                Commerce.CardPaymentAuthorizePaymentRequest,
                Commerce.CardPaymentCapturePaymentRequest,
                Commerce.CardPaymentEndTransactionRequest,
                Commerce.CardPaymentEnquireGiftCardBalancePeripheralRequest,
                Commerce.CardPaymentExecuteTaskRequest,
                Commerce.CardPaymentRefundPaymentRequest,
                Commerce.CardPaymentVoidPaymentRequest,
                Commerce.CashDrawerOpenRequest,
                Commerce.CashManagement.CreateFloatEntryTransactionClientRequest,
                Commerce.CashManagement.CreateStartingAmountTransactionClientRequest,
                Commerce.CashManagement.CreateTenderRemovalTransactionClientRequest,
                Commerce.DepositOverrideOperationRequest,
                Commerce.GetKeyedInPriceClientRequest,
                Commerce.GetPaymentCardTypeByBinRangeClientRequest,
                Commerce.GetPickupDateClientRequest,
                Commerce.GetReceiptEmailAddressClientRequest,
                Commerce.GetScanResultClientRequest,
                Commerce.GetShippingChargeClientRequest,
                Commerce.GetShippingDateClientRequest,
                Commerce.GetTenderDetailsClientRequest,
                Commerce.LoyaltyCardPointsBalanceOperationRequest,
                Commerce.Payments.GetGiftCardByIdServiceRequest,
                Commerce.PaymentTerminalAuthorizePaymentActivityRequest,
                Commerce.PaymentTerminalAuthorizePaymentRequest,
                Commerce.PaymentTerminalBeginTransactionRequest,
                Commerce.PaymentTerminalCancelOperationRequest,
                Commerce.PaymentTerminalCapturePaymentRequest,
                Commerce.PaymentTerminalEndTransactionRequest,
                Commerce.PaymentTerminalEnquireGiftCardBalancePeripheralRequest,
                Commerce.PaymentTerminalExecuteTaskRequest,
                Commerce.PaymentTerminalRefundPaymentActivityRequest,
                Commerce.PaymentTerminalRefundPaymentRequest,
                Commerce.PaymentTerminalUpdateLinesRequest,
                Commerce.PaymentTerminalVoidPaymentRequest,
                Commerce.Peripherals.PaymentTerminalActivateGiftCardPeripheralRequest,
                Commerce.Peripherals.PaymentTerminalAddBalanceToGiftCardPeripheralRequest,
                Commerce.DedicatedHardwareStationRequest,
                Commerce.PrintPackingSlipClientRequest,
                Commerce.Products.GetRefinerValuesByTextServiceRequest,
                Commerce.Products.GetSerialNumberClientRequest,
                Commerce.SalesOrders.GetGiftReceiptsClientRequest,
                Commerce.SalesOrders.SelectCustomerOrderTypeClientRequest,
                Commerce.SelectZipCodeInfoClientRequest,
                Commerce.ShowChangeDueClientRequest,
                Commerce.TenderCounting.CreateBankDropTransactionClientRequest,
                Commerce.TenderCounting.CreateSafeDropTransactionClientRequest,
                Commerce.TenderCounting.CreateTenderDeclarationTransactionClientRequest
            ];
            return _this;
        }
        RegisterRequestHandlersRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.RegisterRequestHandlersRequest;
        };
        RegisterRequestHandlersRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            if (Commerce.ObjectExtensions.isNullOrUndefined(this._compositionLoader)) {
                return Promise.reject(new Error("Compositon Loader was not initialized."));
            }
            var response = new Commerce.RegisterRequestHandlersResponse();
            var _loop_3 = function (i) {
                var newRequestHandlerTypeAndOptions = request.requestHandlerTypesAndOptions[i];
                if (Commerce.ObjectExtensions.isNullOrUndefined(newRequestHandlerTypeAndOptions)) {
                    return { value: Promise.reject(new Error("The request to register request handlers is invalid.")) };
                }
                var newRequestHandlerType = newRequestHandlerTypeAndOptions.type;
                var newRequestHandler = new newRequestHandlerType(newRequestHandlerTypeAndOptions.options);
                var defaultRequestHandler = void 0;
                if (this_3._isExistingRequestType(newRequestHandler.supportedRequestType())) {
                    if (this_3._isReplaceableRequestType(newRequestHandler.supportedRequestType())) {
                        defaultRequestHandler = this_3._getDefaultRequestHandler(newRequestHandler.supportedRequestType());
                        if (Commerce.ObjectExtensions.isNullOrUndefined(defaultRequestHandler)) {
                            return { value: Promise.reject(new Error("Default request handler not found for replaceable request type.")) };
                        }
                    }
                    else {
                        return { value: Promise.reject(new Error("Unable to register replacement request handler with nonreplaceable request type.")) };
                    }
                }
                else {
                    this_3._replaceableRequestTypes.push(newRequestHandler.supportedRequestType());
                }
                this_3._compositionLoader.addRequestHandler(newRequestHandlerTypeAndOptions.type, function () { return newRequestHandlerTypeAndOptions.options; });
                if (!Commerce.ObjectExtensions.isNullOrUndefined(defaultRequestHandler)) {
                    response.defaultExecuteAsyncs.push(function (request) {
                        return _this._getDefaultRequestHandler(newRequestHandler.supportedRequestType()).executeAsync(request);
                    });
                }
                else {
                    response.defaultExecuteAsyncs.push(null);
                }
            };
            var this_3 = this;
            for (var i = 0; i < request.requestHandlerTypesAndOptions.length; i++) {
                var state_2 = _loop_3(i);
                if (typeof state_2 === "object")
                    return state_2.value;
            }
            return Promise.resolve({
                canceled: false,
                data: response
            });
        };
        RegisterRequestHandlersRequestHandler.prototype._getDefaultRequestHandler = function (requestType) {
            var defaultRequestHandler;
            if (this._isReplaceableRequestType(requestType)) {
                var matchingRequestHandlers = this._compositionLoader.getRequestHandlersForRequestType(requestType)
                    .filter(function (requestHandler) {
                    return requestType === requestHandler.supportedRequestType();
                });
                if (Commerce.ArrayExtensions.hasElements(matchingRequestHandlers)) {
                    defaultRequestHandler = matchingRequestHandlers[matchingRequestHandlers.length - 1];
                }
            }
            return defaultRequestHandler;
        };
        RegisterRequestHandlersRequestHandler.prototype._isExistingRequestType = function (requestType) {
            return this._compositionLoader.getRequestHandlersForRequestType(requestType).some(function (requestHandler) {
                return requestType === requestHandler.supportedRequestType();
            });
        };
        RegisterRequestHandlersRequestHandler.prototype._isReplaceableRequestType = function (requestType) {
            return this._replaceableRequestTypes.some(function (replaceableRequestType) {
                return requestType === replaceableRequestType;
            });
        };
        return RegisterRequestHandlersRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.RegisterRequestHandlersRequestHandler = RegisterRequestHandlersRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterRequestInterceptorsRequest = (function (_super) {
        __extends(RegisterRequestInterceptorsRequest, _super);
        function RegisterRequestInterceptorsRequest(correlationId, requestsAndInterceptors) {
            var _this = _super.call(this, correlationId) || this;
            _this.requestsAndInterceptors = requestsAndInterceptors;
            return _this;
        }
        return RegisterRequestInterceptorsRequest;
    }(Commerce.Request));
    Commerce.RegisterRequestInterceptorsRequest = RegisterRequestInterceptorsRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterRequestInterceptorsRequestHandler = (function (_super) {
        __extends(RegisterRequestInterceptorsRequestHandler, _super);
        function RegisterRequestInterceptorsRequestHandler(compositionLoader) {
            var _this = _super.call(this) || this;
            _this._compositionLoader = compositionLoader;
            return _this;
        }
        RegisterRequestInterceptorsRequestHandler.prototype.supportedRequestType = function () {
            return Commerce.RegisterRequestInterceptorsRequest;
        };
        RegisterRequestInterceptorsRequestHandler.prototype.executeAsync = function (request) {
            var _this = this;
            var requestsAndInterceptors = request.requestsAndInterceptors || [];
            requestsAndInterceptors.forEach(function (item) {
                _this._compositionLoader.addRequestInterceptor(item.requestType, item.requestInterceptor);
            });
            return Promise.resolve({
                canceled: false,
                data: new Commerce.RegisterRequestInterceptorsResponse()
            });
        };
        return RegisterRequestInterceptorsRequestHandler;
    }(Commerce.RequestHandler));
    Commerce.RegisterRequestInterceptorsRequestHandler = RegisterRequestInterceptorsRequestHandler;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterRequestHandlersRequest = (function (_super) {
        __extends(RegisterRequestHandlersRequest, _super);
        function RegisterRequestHandlersRequest(correlationId) {
            var _this = _super.call(this, correlationId) || this;
            _this.requestHandlerTypesAndOptions = [];
            return _this;
        }
        return RegisterRequestHandlersRequest;
    }(Commerce.Request));
    Commerce.RegisterRequestHandlersRequest = RegisterRequestHandlersRequest;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterRequestHandlersResponse = (function (_super) {
        __extends(RegisterRequestHandlersResponse, _super);
        function RegisterRequestHandlersResponse() {
            var _this = _super.call(this) || this;
            _this.defaultExecuteAsyncs = [];
            return _this;
        }
        return RegisterRequestHandlersResponse;
    }(Commerce.Response));
    Commerce.RegisterRequestHandlersResponse = RegisterRequestHandlersResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    "use strict";
    var RegisterRequestInterceptorsResponse = (function (_super) {
        __extends(RegisterRequestInterceptorsResponse, _super);
        function RegisterRequestInterceptorsResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RegisterRequestInterceptorsResponse;
    }(Commerce.Response));
    Commerce.RegisterRequestInterceptorsResponse = RegisterRequestInterceptorsResponse;
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var SalesOrders;
    (function (SalesOrders) {
        "use strict";
        var GetAttributeGroupDetailsClientRequestHandler = (function (_super) {
            __extends(GetAttributeGroupDetailsClientRequestHandler, _super);
            function GetAttributeGroupDetailsClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetAttributeGroupDetailsClientRequestHandler.prototype.supportedRequestType = function () {
                return SalesOrders.GetAttributeGroupDetailsClientRequest;
            };
            GetAttributeGroupDetailsClientRequestHandler.prototype.executeAsync = function (request) {
                if (!Commerce.ArrayExtensions.hasElements(request.attributeGroupIdentifiers)) {
                    return Promise.resolve({ canceled: false, data: new SalesOrders.GetAttributeGroupDetailsClientResponse([]) });
                }
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                var attributeGroupsDetails = [];
                return new Commerce.AsyncQueue()
                    .enqueue(function () {
                    return salesOrderManager.getAttributeGroupDefinitions(request.attributeGroupIdentifiers);
                })
                    .enqueue(function (attributeGroupDefinitions) {
                    if (!Commerce.ArrayExtensions.hasElements(attributeGroupDefinitions)) {
                        return Commerce.AsyncResult.createResolved([]);
                    }
                    var asyncResults = [];
                    attributeGroupDefinitions.forEach(function (attributeGroupDefinition) {
                        var attributeGroupDetails = {
                            attributeGroupDefinition: attributeGroupDefinition,
                            attributeDefinitions: []
                        };
                        asyncResults.push(salesOrderManager.getAttributeDefinitions(attributeGroupDefinition.RecordId)
                            .done(function (attributesDefinitions) {
                            attributeGroupDetails.attributeDefinitions = attributesDefinitions;
                            attributeGroupsDetails.push(attributeGroupDetails);
                        }));
                    });
                    return Commerce.VoidAsyncResult.join(asyncResults);
                })
                    .run().map(function () {
                    return { canceled: false, data: new SalesOrders.GetAttributeGroupDetailsClientResponse(attributeGroupsDetails) };
                }).getPromise();
            };
            return GetAttributeGroupDetailsClientRequestHandler;
        }(Commerce.RequestHandler));
        SalesOrders.GetAttributeGroupDetailsClientRequestHandler = GetAttributeGroupDetailsClientRequestHandler;
    })(SalesOrders = Commerce.SalesOrders || (Commerce.SalesOrders = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var SalesOrders;
    (function (SalesOrders) {
        "use strict";
        var MarkAsPickedServiceRequestHandler = (function (_super) {
            __extends(MarkAsPickedServiceRequestHandler, _super);
            function MarkAsPickedServiceRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MarkAsPickedServiceRequestHandler.prototype.supportedRequestType = function () {
                return SalesOrders.MarkAsPickedServiceRequest;
            };
            MarkAsPickedServiceRequestHandler.prototype.executeAsync = function (request) {
                var fulfillmentManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFulfillmentManagerName);
                return fulfillmentManager.markAsPickedAsync(request.fulfillmentLines).map(function () {
                    return { canceled: false, data: new SalesOrders.MarkAsPickedServiceResponse() };
                }).getPromise();
            };
            return MarkAsPickedServiceRequestHandler;
        }(Commerce.RequestHandler));
        SalesOrders.MarkAsPickedServiceRequestHandler = MarkAsPickedServiceRequestHandler;
    })(SalesOrders = Commerce.SalesOrders || (Commerce.SalesOrders = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var SalesOrders;
    (function (SalesOrders) {
        "use strict";
        var GetAttributeGroupDetailsClientRequest = (function (_super) {
            __extends(GetAttributeGroupDetailsClientRequest, _super);
            function GetAttributeGroupDetailsClientRequest(correlationId, attributeGroupIdentifiers) {
                var _this = _super.call(this, correlationId) || this;
                _this.attributeGroupIdentifiers = attributeGroupIdentifiers;
                return _this;
            }
            return GetAttributeGroupDetailsClientRequest;
        }(Commerce.ClientRequest));
        SalesOrders.GetAttributeGroupDetailsClientRequest = GetAttributeGroupDetailsClientRequest;
    })(SalesOrders = Commerce.SalesOrders || (Commerce.SalesOrders = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var SalesOrders;
    (function (SalesOrders) {
        "use strict";
        var GetAttributeGroupDetailsClientResponse = (function (_super) {
            __extends(GetAttributeGroupDetailsClientResponse, _super);
            function GetAttributeGroupDetailsClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetAttributeGroupDetailsClientResponse;
        }(Commerce.ClientResponse));
        SalesOrders.GetAttributeGroupDetailsClientResponse = GetAttributeGroupDetailsClientResponse;
    })(SalesOrders = Commerce.SalesOrders || (Commerce.SalesOrders = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var Model;
        (function (Model) {
            "use strict";
            var TaskGuideModel = (function () {
                function TaskGuideModel(model, publisher) {
                    this.id = model.Id;
                    this.title = model.Name;
                    this.publisher = publisher;
                }
                return TaskGuideModel;
            }());
            Model.TaskGuideModel = TaskGuideModel;
        })(Model = TaskRecorder.Model || (TaskRecorder.Model = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        "use strict";
        var TaskRecorderViewManager = (function () {
            function TaskRecorderViewManager(taskRecorderController, taskRecorderManager, baseViewUri) {
                this.registeredViews = {};
                this.viewHistory = [];
                Commerce.ThrowIf.argumentIsNotObject(taskRecorderController, "taskRecorderController");
                Commerce.ThrowIf.argumentIsNotObject(taskRecorderManager, "taskRecorderManager");
                Commerce.ThrowIf.argumentIsNotString(baseViewUri, "baseViewUri");
                this.taskRecorderController = taskRecorderController;
                this.taskRecorderManager = taskRecorderManager;
                this.baseViewUri = baseViewUri;
            }
            TaskRecorderViewManager.setRenderPageImplementation = function (renderImpl) {
                if (!Commerce.ObjectExtensions.isFunction(renderImpl)) {
                    throw new Error("TaskRecorderViewManager::setRenderPageImplementation invalid renderImpl provided.");
                }
                TaskRecorderViewManager._renderPageAsync = renderImpl;
            };
            TaskRecorderViewManager.prototype.registerView = function (viewName, viewModelType) {
                Commerce.ThrowIf.argumentIsNotString(viewName, "viewName");
                Commerce.ThrowIf.argumentIsNotFunction(viewModelType, "viewModelType");
                var viewDefinition = {
                    viewUri: this.getViewUri(viewName),
                    viewModelType: viewModelType
                };
                this.registeredViews[viewName] = viewDefinition;
            };
            TaskRecorderViewManager.prototype.loadView = function (viewName, options, parent) {
                Commerce.ThrowIf.argumentIsNotString(viewName, "viewName");
                var viewDefinition = this.registeredViews[viewName];
                if (!viewDefinition) {
                    return Commerce.AsyncResult.createRejected(TaskRecorderViewManager.error(Commerce.ErrorTypeEnum.TASK_RECORDER_VIEWMANAGER_VIEW_NOT_FOUND, viewName));
                }
                var that = this;
                var asyncResult = new Commerce.AsyncResult();
                var element = document.createElement("div");
                TaskRecorderViewManager._renderPageAsync(viewDefinition.viewUri, element).done(function () {
                    try {
                        var viewModelType = viewDefinition.viewModelType;
                        var viewModel = new viewModelType(that.taskRecorderController, that.taskRecorderManager, options);
                        if (parent) {
                            parent.appendChild(element);
                        }
                        if (Commerce.ObjectExtensions.isFunction(viewModel.load)) {
                            viewModel.load(options);
                        }
                        asyncResult.resolve({
                            element: element,
                            viewModel: viewModel
                        });
                    }
                    catch (e) {
                        asyncResult.reject(TaskRecorderViewManager.error(Commerce.ErrorTypeEnum.TASK_RECORDER_VIEWMANAGER_LOAD_FAILED, viewName));
                    }
                }).fail(function (errors) {
                    asyncResult.reject(errors);
                });
                return asyncResult;
            };
            TaskRecorderViewManager.prototype.unloadView = function (parent, vvm, dispose) {
                if (dispose === void 0) { dispose = true; }
                parent.removeChild(vvm.element);
                if (dispose) {
                    this.disposeView(vvm);
                }
            };
            TaskRecorderViewManager.prototype.moveViewToHistory = function (parent, vvm) {
                parent.removeChild(vvm.element);
                this.viewHistory.push(vvm);
            };
            TaskRecorderViewManager.prototype.navigateBack = function () {
                if (!Commerce.ArrayExtensions.hasElements(this.viewHistory)) {
                    return null;
                }
                return this.viewHistory.pop();
            };
            TaskRecorderViewManager.prototype.disposeView = function (vvm) {
                var _this = this;
                this.disposeViewModel(vvm);
                this.viewHistory.forEach(function (storedVvm) {
                    _this.disposeViewModel(storedVvm);
                });
                this.viewHistory.length = 0;
            };
            TaskRecorderViewManager.error = function (errorCode) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return [new Commerce.Proxy.Entities.Error(errorCode, false, Commerce.StringExtensions.EMPTY, null, args)];
            };
            TaskRecorderViewManager.prototype.disposeViewModel = function (vvm) {
                if (!Commerce.ObjectExtensions.isNullOrUndefined(vvm.viewModel) &&
                    Commerce.ObjectExtensions.isFunction(vvm.viewModel.dispose)) {
                    vvm.viewModel.dispose();
                }
            };
            TaskRecorderViewManager.prototype.getViewUri = function (viewName) {
                return this.baseViewUri + "/TaskRecorder/" + viewName + "View.html";
            };
            return TaskRecorderViewManager;
        }());
        TaskRecorder.TaskRecorderViewManager = TaskRecorderViewManager;
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TaskRecorder;
    (function (TaskRecorder) {
        var ViewModel;
        (function (ViewModel) {
            "use strict";
        })(ViewModel = TaskRecorder.ViewModel || (TaskRecorder.ViewModel = {}));
    })(TaskRecorder = Commerce.TaskRecorder || (Commerce.TaskRecorder = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateTenderCountingTransactionRequestHandlerBase = (function () {
            function CreateTenderCountingTransactionRequestHandlerBase() {
            }
            CreateTenderCountingTransactionRequestHandlerBase.prototype.validateAndPerformTenderCountingOperationAsync = function (request, receiptTypeToPrint) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(request.shift) || request.shift.ShiftId < 1) {
                    return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.SHIFT_IS_NOT_VALID)]);
                }
                var dropAndDeclareTransaction = { Id: "" };
                var storeOperationsManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IStoreOperationsManagerName);
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                dropAndDeclareTransaction.OpenDrawer = false;
                dropAndDeclareTransaction.ShiftId = request.shift.ShiftId.toString();
                dropAndDeclareTransaction.ShiftTerminalId = request.shift.TerminalId;
                if (request.isOperationAborted) {
                    dropAndDeclareTransaction.TransactionStatusValue = Commerce.Proxy.Entities.TransactionStatus.Aborted;
                }
                this.updateTransactionProperties(request, dropAndDeclareTransaction);
                var createdTransaction;
                var asyncQueue = new Commerce.AsyncQueue();
                asyncQueue.enqueue(function () {
                    var reasonCodesQueue = Commerce.ReasonCodesHelper.handleRequiredReasonCodesAsyncQueue({ dropAndDeclareTransaction: dropAndDeclareTransaction }, function (c) {
                        return storeOperationsManager.createDropAndDeclareTransaction(c.dropAndDeclareTransaction)
                            .done(function (data) { createdTransaction = data; });
                    }, Commerce.Proxy.Entities.ReasonCodeSourceType.TenderDeclaration);
                    return asyncQueue.cancelOn(reasonCodesQueue.run());
                });
                if (!request.isOperationAborted) {
                    var receipts_1;
                    asyncQueue.enqueue(function () {
                        return salesOrderManager.getReceiptsForPrintAsync(createdTransaction.Id, false, receiptTypeToPrint, false, request.shift.ShiftId, request.shift.TerminalId, null, null, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId).done(function (data) {
                            receipts_1 = data;
                        });
                    });
                    asyncQueue.enqueue(function () {
                        if (!Commerce.ArrayExtensions.hasElements(receipts_1)) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        var printReceiptActivity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts_1, notifyOnNoPrintableReceipts: true });
                        return printReceiptActivity.execute().recoverOnFailure(function (errors) {
                            return Commerce.NotificationHandler.displayClientErrors(errors).recoverOnFailure(function () {
                                return Commerce.VoidAsyncResult.createResolved();
                            });
                        });
                    });
                    asyncQueue.enqueue(function () {
                        return Commerce.Operations.OperationsManager.instance.revertToSelf(request.correlationId).recoverOnFailure(function () {
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                    });
                    if (this.shouldValidateCashDrawerLimit()) {
                        asyncQueue.enqueue(function () {
                            return _this._validateCashDrawerLimitAsync(request.correlationId)
                                .recoverOnFailure(function (errors) {
                                return Commerce.NotificationHandler.displayClientErrors(errors).recoverOnFailure(function () {
                                    return Commerce.VoidAsyncResult.createResolved();
                                });
                            });
                        });
                    }
                    if (Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.equals(dropAndDeclareTransaction.TransactionTypeValue)) {
                        asyncQueue.enqueue(function () {
                            var postTriggerOptions = { shift: request.shift, transaction: createdTransaction };
                            return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostTenderDeclaration, postTriggerOptions);
                        });
                    }
                }
                return asyncQueue.run()
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? undefined : createdTransaction
                    };
                });
            };
            CreateTenderCountingTransactionRequestHandlerBase.prototype._validateCashDrawerLimitAsync = function (correlationId) {
                var request = new Commerce.ValidateCashDrawerLimitClientRequest(Commerce.Session.instance.Shift.TerminalId, Commerce.Session.instance.Shift.ShiftId, correlationId);
                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request));
            };
            return CreateTenderCountingTransactionRequestHandlerBase;
        }());
        TenderCounting.CreateTenderCountingTransactionRequestHandlerBase = CreateTenderCountingTransactionRequestHandlerBase;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateBankDropTransactionClientRequestHandler = (function (_super) {
            __extends(CreateBankDropTransactionClientRequestHandler, _super);
            function CreateBankDropTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateBankDropTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return TenderCounting.CreateBankDropTransactionClientRequest;
            };
            CreateBankDropTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformTenderCountingOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.BankDrop)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new TenderCounting.CreateBankDropTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateBankDropTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateBankDropTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.Value;
                var tenderAmountSum = 0;
                request.tenderDetailLines.forEach(function (line) { tenderAmountSum += line.Amount; });
                var tenderDetailLinesToSave = [];
                if (request.isOperationAborted) {
                    var tenderDetailLine = Commerce.ArrayExtensions.firstOrUndefined(request.tenderDetailLines);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderDetailLine)) {
                        var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                        tenderDetailLineToSave.BankBagNumber =
                            !Commerce.ObjectExtensions.isNullOrUndefined(request.bankBagNumber) ? request.bankBagNumber : Commerce.StringExtensions.EMPTY;
                        tenderDetailLineToSave.Amount = tenderDetailLineToSave.AmountInForeignCurrency = 0;
                        tenderDetailLinesToSave.push(tenderDetailLineToSave);
                    }
                }
                else {
                    request.tenderDetailLines.forEach(function (tenderDetailLine) {
                        if (tenderDetailLine.Amount !== 0 || tenderAmountSum <= 0) {
                            var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                            tenderDetailLineToSave.BankBagNumber = !Commerce.ObjectExtensions.isNullOrUndefined(request.bankBagNumber) ? request.bankBagNumber : null;
                            tenderDetailLinesToSave.push(tenderDetailLineToSave);
                        }
                    });
                }
                transaction.TenderDetails = tenderDetailLinesToSave;
            };
            CreateBankDropTransactionClientRequestHandler.prototype.shouldValidateCashDrawerLimit = function () {
                return true;
            };
            return CreateBankDropTransactionClientRequestHandler;
        }(TenderCounting.CreateTenderCountingTransactionRequestHandlerBase));
        TenderCounting.CreateBankDropTransactionClientRequestHandler = CreateBankDropTransactionClientRequestHandler;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateSafeBankDropTransactionClientRequestHandler = (function (_super) {
            __extends(CreateSafeBankDropTransactionClientRequestHandler, _super);
            function CreateSafeBankDropTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateSafeBankDropTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return TenderCounting.CreateSafeBankDropTransactionClientRequest;
            };
            CreateSafeBankDropTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformTenderCountingOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.BankDrop)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new TenderCounting.CreateBankDropTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateSafeBankDropTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateSafeBankDropTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.Value;
                transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                transaction.FromSafe = request.fromStoreSafe.SafeNumber;
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Bank;
                var tenderAmountSum = 0;
                request.tenderDetailLines.forEach(function (line) { tenderAmountSum += line.Amount; });
                var tenderDetailLinesToSave = [];
                if (request.isOperationAborted) {
                    var tenderDetailLine = Commerce.ArrayExtensions.firstOrUndefined(request.tenderDetailLines);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderDetailLine)) {
                        var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                        tenderDetailLineToSave.BankBagNumber =
                            !Commerce.ObjectExtensions.isNullOrUndefined(request.bankBagNumber) ? request.bankBagNumber : Commerce.StringExtensions.EMPTY;
                        tenderDetailLineToSave.Amount = tenderDetailLineToSave.AmountInForeignCurrency = 0;
                        tenderDetailLinesToSave.push(tenderDetailLineToSave);
                    }
                }
                else {
                    request.tenderDetailLines.forEach(function (tenderDetailLine) {
                        if (tenderDetailLine.Amount !== 0 || tenderAmountSum <= 0) {
                            var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                            tenderDetailLineToSave.BankBagNumber = !Commerce.ObjectExtensions.isNullOrUndefined(request.bankBagNumber) ? request.bankBagNumber : null;
                            tenderDetailLinesToSave.push(tenderDetailLineToSave);
                        }
                    });
                }
                transaction.TenderDetails = tenderDetailLinesToSave;
            };
            CreateSafeBankDropTransactionClientRequestHandler.prototype.shouldValidateCashDrawerLimit = function () {
                return true;
            };
            return CreateSafeBankDropTransactionClientRequestHandler;
        }(TenderCounting.CreateTenderCountingTransactionRequestHandlerBase));
        TenderCounting.CreateSafeBankDropTransactionClientRequestHandler = CreateSafeBankDropTransactionClientRequestHandler;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateSafeDropTransactionClientRequestHandler = (function (_super) {
            __extends(CreateSafeDropTransactionClientRequestHandler, _super);
            function CreateSafeDropTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateSafeDropTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return TenderCounting.CreateSafeDropTransactionClientRequest;
            };
            CreateSafeDropTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformTenderCountingOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.SafeDrop)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new TenderCounting.CreateSafeDropTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateSafeDropTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateSafeDropTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.Value;
                if (Commerce.ArrayExtensions.hasElements(request.extensionProperties)) {
                    transaction.ExtensionProperties = request.extensionProperties;
                }
                var tenderAmountSum = 0;
                request.tenderDetailLines.forEach(function (line) { tenderAmountSum += line.Amount; });
                var tenderDetailLinesToSave = [];
                if (request.isOperationAborted) {
                    var tenderDetailLine = Commerce.ArrayExtensions.firstOrUndefined(request.tenderDetailLines);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderDetailLine)) {
                        var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                        tenderDetailLineToSave.Amount = tenderDetailLineToSave.AmountInForeignCurrency = 0;
                        tenderDetailLinesToSave.push(tenderDetailLineToSave);
                    }
                }
                else {
                    request.tenderDetailLines.forEach(function (tenderDetailLine) {
                        if (tenderDetailLine.Amount !== 0 || tenderAmountSum <= 0) {
                            var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                            tenderDetailLinesToSave.push(tenderDetailLineToSave);
                        }
                    });
                }
                transaction.TenderDetails = tenderDetailLinesToSave;
            };
            CreateSafeDropTransactionClientRequestHandler.prototype.shouldValidateCashDrawerLimit = function () {
                return true;
            };
            return CreateSafeDropTransactionClientRequestHandler;
        }(TenderCounting.CreateTenderCountingTransactionRequestHandlerBase));
        TenderCounting.CreateSafeDropTransactionClientRequestHandler = CreateSafeDropTransactionClientRequestHandler;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateShiftBankDropTransactionClientRequestHandler = (function (_super) {
            __extends(CreateShiftBankDropTransactionClientRequestHandler, _super);
            function CreateShiftBankDropTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateShiftBankDropTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return TenderCounting.CreateShiftBankDropTransactionClientRequest;
            };
            CreateShiftBankDropTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformTenderCountingOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.BankDrop)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new TenderCounting.CreateShiftBankDropTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateShiftBankDropTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateShiftBankDropTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.BankDrop.Value;
                transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                transaction.FromShiftId = request.shift.ShiftId.toString();
                transaction.FromShiftTerminalId = request.shift.TerminalId;
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Bank;
                var tenderAmountSum = 0;
                request.tenderDetailLines.forEach(function (line) { tenderAmountSum += line.Amount; });
                var tenderDetailLinesToSave = [];
                if (request.isOperationAborted) {
                    var tenderDetailLine = Commerce.ArrayExtensions.firstOrUndefined(request.tenderDetailLines);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderDetailLine)) {
                        var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                        tenderDetailLineToSave.BankBagNumber =
                            !Commerce.ObjectExtensions.isNullOrUndefined(request.bankBagNumber) ? request.bankBagNumber : Commerce.StringExtensions.EMPTY;
                        tenderDetailLineToSave.Amount = tenderDetailLineToSave.AmountInForeignCurrency = 0;
                        tenderDetailLinesToSave.push(tenderDetailLineToSave);
                    }
                }
                else {
                    request.tenderDetailLines.forEach(function (tenderDetailLine) {
                        if (tenderDetailLine.Amount !== 0 || tenderAmountSum <= 0) {
                            var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                            tenderDetailLineToSave.BankBagNumber = !Commerce.ObjectExtensions.isNullOrUndefined(request.bankBagNumber) ? request.bankBagNumber : null;
                            tenderDetailLinesToSave.push(tenderDetailLineToSave);
                        }
                    });
                }
                transaction.TenderDetails = tenderDetailLinesToSave;
            };
            CreateShiftBankDropTransactionClientRequestHandler.prototype.shouldValidateCashDrawerLimit = function () {
                return true;
            };
            return CreateShiftBankDropTransactionClientRequestHandler;
        }(TenderCounting.CreateTenderCountingTransactionRequestHandlerBase));
        TenderCounting.CreateShiftBankDropTransactionClientRequestHandler = CreateShiftBankDropTransactionClientRequestHandler;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateShiftSafeDropTransactionClientRequestHandler = (function (_super) {
            __extends(CreateShiftSafeDropTransactionClientRequestHandler, _super);
            function CreateShiftSafeDropTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateShiftSafeDropTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return TenderCounting.CreateShiftSafeDropTransactionClientRequest;
            };
            CreateShiftSafeDropTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformTenderCountingOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.SafeDrop)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new TenderCounting.CreateShiftSafeDropTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateShiftSafeDropTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateShiftSafeDropTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.SafeDrop.Value;
                transaction.TransactionSourceContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Shift;
                transaction.FromShiftId = request.shift.ShiftId.toString();
                transaction.FromShiftTerminalId = request.shift.TerminalId;
                transaction.TransactionDestinationContextTypeValue = Commerce.Proxy.Entities.CashManagementTransactionContext.Safe;
                transaction.ToSafe = request.toStoreSafe.SafeNumber;
                if (Commerce.ArrayExtensions.hasElements(request.extensionProperties)) {
                    transaction.ExtensionProperties = request.extensionProperties;
                }
                var tenderAmountSum = 0;
                request.tenderDetailLines.forEach(function (line) { tenderAmountSum += line.Amount; });
                var tenderDetailLinesToSave = [];
                if (request.isOperationAborted) {
                    var tenderDetailLine = Commerce.ArrayExtensions.firstOrUndefined(request.tenderDetailLines);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderDetailLine)) {
                        var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                        tenderDetailLineToSave.Amount = tenderDetailLineToSave.AmountInForeignCurrency = 0;
                        tenderDetailLinesToSave.push(tenderDetailLineToSave);
                    }
                }
                else {
                    request.tenderDetailLines.forEach(function (tenderDetailLine) {
                        if (tenderDetailLine.Amount !== 0 || tenderAmountSum <= 0) {
                            var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                            tenderDetailLinesToSave.push(tenderDetailLineToSave);
                        }
                    });
                }
                transaction.TenderDetails = tenderDetailLinesToSave;
            };
            CreateShiftSafeDropTransactionClientRequestHandler.prototype.shouldValidateCashDrawerLimit = function () {
                return true;
            };
            return CreateShiftSafeDropTransactionClientRequestHandler;
        }(TenderCounting.CreateTenderCountingTransactionRequestHandlerBase));
        TenderCounting.CreateShiftSafeDropTransactionClientRequestHandler = CreateShiftSafeDropTransactionClientRequestHandler;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateTenderDeclarationTransactionClientRequestHandler = (function (_super) {
            __extends(CreateTenderDeclarationTransactionClientRequestHandler, _super);
            function CreateTenderDeclarationTransactionClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CreateTenderDeclarationTransactionClientRequestHandler.prototype.supportedRequestType = function () {
                return TenderCounting.CreateTenderDeclarationTransactionClientRequest;
            };
            CreateTenderDeclarationTransactionClientRequestHandler.prototype.executeAsync = function (request) {
                return this.validateAndPerformTenderCountingOperationAsync(request, Commerce.Proxy.Entities.ReceiptType.TenderDeclaration)
                    .map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: !result.canceled ? new TenderCounting.CreateTenderDeclarationTransactionClientResponse(result.data) : undefined
                    };
                }).getPromise();
            };
            CreateTenderDeclarationTransactionClientRequestHandler.prototype.updateTransactionProperties = function (request, transaction) {
                if (Commerce.ObjectExtensions.isNullOrUndefined(transaction)) {
                    throw new Error("CreateTenderDeclarationTransactionClientRequestHandler.updateTransactionProperties: 'transaction' can't be null.");
                }
                transaction.TransactionTypeValue = Commerce.ExtensibleEnumerations.ExtensibleTransactionType.TenderDeclaration.Value;
                transaction.ReasonCodeLines = request.reasonCodeLines;
                var tenderDetailLinesToSave = [];
                if (request.isOperationAborted) {
                    var tenderDetailLine = Commerce.ArrayExtensions.firstOrUndefined(request.tenderDetailLines);
                    if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderDetailLine)) {
                        var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                        tenderDetailLineToSave.Amount = tenderDetailLineToSave.AmountInForeignCurrency = 0;
                        tenderDetailLinesToSave.push(tenderDetailLineToSave);
                    }
                }
                else {
                    request.tenderDetailLines.forEach(function (tenderDetailLine) {
                        var tenderDetailLineToSave = Commerce.ObjectExtensions.clone(tenderDetailLine);
                        tenderDetailLinesToSave.push(tenderDetailLineToSave);
                    });
                }
                transaction.TenderDetails = tenderDetailLinesToSave;
            };
            CreateTenderDeclarationTransactionClientRequestHandler.prototype.shouldValidateCashDrawerLimit = function () {
                return false;
            };
            return CreateTenderDeclarationTransactionClientRequestHandler;
        }(TenderCounting.CreateTenderCountingTransactionRequestHandlerBase));
        TenderCounting.CreateTenderDeclarationTransactionClientRequestHandler = CreateTenderDeclarationTransactionClientRequestHandler;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateSafeBankDropTransactionClientResponse = (function (_super) {
            __extends(CreateSafeBankDropTransactionClientResponse, _super);
            function CreateSafeBankDropTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateSafeBankDropTransactionClientResponse;
        }(TenderCounting.CreateBankDropTransactionClientResponse));
        TenderCounting.CreateSafeBankDropTransactionClientResponse = CreateSafeBankDropTransactionClientResponse;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateSafeBankDropTransactionClientRequest = (function (_super) {
            __extends(CreateSafeBankDropTransactionClientRequest, _super);
            function CreateSafeBankDropTransactionClientRequest(isOperationAborted, shift, tenderDetailLines, bankBagNumber, correlationId, fromStoreSafe) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(fromStoreSafe)) {
                    throw new Error("CreateSafeBankDropTransactionClientRequest: 'fromStoreSafe' can't be null.");
                }
                _this = _super.call(this, isOperationAborted, shift, tenderDetailLines, bankBagNumber, correlationId) || this;
                _this.fromStoreSafe = fromStoreSafe;
                return _this;
            }
            return CreateSafeBankDropTransactionClientRequest;
        }(TenderCounting.CreateBankDropTransactionClientRequest));
        TenderCounting.CreateSafeBankDropTransactionClientRequest = CreateSafeBankDropTransactionClientRequest;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateShiftBankDropTransactionClientResponse = (function (_super) {
            __extends(CreateShiftBankDropTransactionClientResponse, _super);
            function CreateShiftBankDropTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateShiftBankDropTransactionClientResponse;
        }(TenderCounting.CreateBankDropTransactionClientResponse));
        TenderCounting.CreateShiftBankDropTransactionClientResponse = CreateShiftBankDropTransactionClientResponse;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateShiftBankDropTransactionClientRequest = (function (_super) {
            __extends(CreateShiftBankDropTransactionClientRequest, _super);
            function CreateShiftBankDropTransactionClientRequest(isOperationAborted, shift, tenderDetailLines, bankBagNumber, correlationId) {
                return _super.call(this, isOperationAborted, shift, tenderDetailLines, bankBagNumber, correlationId) || this;
            }
            return CreateShiftBankDropTransactionClientRequest;
        }(TenderCounting.CreateBankDropTransactionClientRequest));
        TenderCounting.CreateShiftBankDropTransactionClientRequest = CreateShiftBankDropTransactionClientRequest;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateShiftSafeDropTransactionClientResponse = (function (_super) {
            __extends(CreateShiftSafeDropTransactionClientResponse, _super);
            function CreateShiftSafeDropTransactionClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CreateShiftSafeDropTransactionClientResponse;
        }(TenderCounting.CreateSafeDropTransactionClientResponse));
        TenderCounting.CreateShiftSafeDropTransactionClientResponse = CreateShiftSafeDropTransactionClientResponse;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var TenderCounting;
    (function (TenderCounting) {
        "use strict";
        var CreateShiftSafeDropTransactionClientRequest = (function (_super) {
            __extends(CreateShiftSafeDropTransactionClientRequest, _super);
            function CreateShiftSafeDropTransactionClientRequest(isOperationAborted, shift, tenderDetailLines, correlationId, toStoreSafe, extensionProperties) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(toStoreSafe)) {
                    throw new Error("CreateShiftSafeDropTransactionClientRequest: 'toStoreSafe' can't be null.");
                }
                _this = _super.call(this, isOperationAborted, shift, tenderDetailLines, extensionProperties, correlationId) || this;
                _this.toStoreSafe = toStoreSafe;
                return _this;
            }
            return CreateShiftSafeDropTransactionClientRequest;
        }(TenderCounting.CreateSafeDropTransactionClientRequest));
        TenderCounting.CreateShiftSafeDropTransactionClientRequest = CreateShiftSafeDropTransactionClientRequest;
    })(TenderCounting = Commerce.TenderCounting || (Commerce.TenderCounting = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DualDisplay;
    (function (DualDisplay) {
        "use strict";
        var DataRequest = (function () {
            function DataRequest(requestName, requestData, responseName) {
                this.requestName = requestName;
                this.responseName = responseName;
                this.requestData = requestData;
            }
            return DataRequest;
        }());
        DualDisplay.DataRequest = DataRequest;
    })(DualDisplay = Commerce.DualDisplay || (Commerce.DualDisplay = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DualDisplay;
    (function (DualDisplay) {
        "use strict";
        var GetChannelConfigurationDataRequest = (function (_super) {
            __extends(GetChannelConfigurationDataRequest, _super);
            function GetChannelConfigurationDataRequest() {
                return _super.call(this, "getChannelConfigurationDataRequest", { data: {} }, "getChannelConfigurationDataResponse") || this;
            }
            return GetChannelConfigurationDataRequest;
        }(DualDisplay.DataRequest));
        DualDisplay.GetChannelConfigurationDataRequest = GetChannelConfigurationDataRequest;
    })(DualDisplay = Commerce.DualDisplay || (Commerce.DualDisplay = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DualDisplay;
    (function (DualDisplay) {
        "use strict";
        var GetCurrentCartDataRequest = (function (_super) {
            __extends(GetCurrentCartDataRequest, _super);
            function GetCurrentCartDataRequest() {
                return _super.call(this, "getCurrentCartDataRequest", { data: {} }, "getCurrentCartDataResponse") || this;
            }
            return GetCurrentCartDataRequest;
        }(DualDisplay.DataRequest));
        DualDisplay.GetCurrentCartDataRequest = GetCurrentCartDataRequest;
    })(DualDisplay = Commerce.DualDisplay || (Commerce.DualDisplay = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DualDisplay;
    (function (DualDisplay) {
        "use strict";
        var GetCurrentCustomerDataRequest = (function (_super) {
            __extends(GetCurrentCustomerDataRequest, _super);
            function GetCurrentCustomerDataRequest() {
                return _super.call(this, "getCurrentCustomerDataRequest", { data: {} }, "getCurrentCustomerDataResponse") || this;
            }
            return GetCurrentCustomerDataRequest;
        }(DualDisplay.DataRequest));
        DualDisplay.GetCurrentCustomerDataRequest = GetCurrentCustomerDataRequest;
    })(DualDisplay = Commerce.DualDisplay || (Commerce.DualDisplay = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DualDisplay;
    (function (DualDisplay) {
        "use strict";
        var GetCurrentLogonStateDataRequest = (function (_super) {
            __extends(GetCurrentLogonStateDataRequest, _super);
            function GetCurrentLogonStateDataRequest() {
                return _super.call(this, "getCurrentLogonStateDataRequest", { data: {} }, "getCurrentLogonStateDataResponse") || this;
            }
            return GetCurrentLogonStateDataRequest;
        }(DualDisplay.DataRequest));
        DualDisplay.GetCurrentLogonStateDataRequest = GetCurrentLogonStateDataRequest;
    })(DualDisplay = Commerce.DualDisplay || (Commerce.DualDisplay = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var DualDisplay;
    (function (DualDisplay) {
        "use strict";
        var GetDeviceConfigurationDataRequest = (function (_super) {
            __extends(GetDeviceConfigurationDataRequest, _super);
            function GetDeviceConfigurationDataRequest() {
                return _super.call(this, "getDeviceConfigurationDataRequest", { data: {} }, "getDeviceConfigurationDataResponse") || this;
            }
            return GetDeviceConfigurationDataRequest;
        }(DualDisplay.DataRequest));
        DualDisplay.GetDeviceConfigurationDataRequest = GetDeviceConfigurationDataRequest;
    })(DualDisplay = Commerce.DualDisplay || (Commerce.DualDisplay = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var AuditEvent;
    (function (AuditEvent) {
        "use strict";
        var RegisterAndGetAuditEventServiceRequestHandler = (function (_super) {
            __extends(RegisterAndGetAuditEventServiceRequestHandler, _super);
            function RegisterAndGetAuditEventServiceRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            RegisterAndGetAuditEventServiceRequestHandler.prototype.supportedRequestType = function () {
                return AuditEvent.RegisterAndGetAuditEventServiceRequest;
            };
            RegisterAndGetAuditEventServiceRequestHandler.prototype.executeAsync = function (request) {
                var _this = this;
                var auditEventManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IAuditEventManagerName);
                var auditEvent = request.auditEvent;
                return Commerce.Triggers.TriggerHelper.executeTriggerWorkflowAsync(function () {
                    return _this.executePreTrigger(auditEvent);
                }, function () {
                    return auditEventManager.registerAuditEvent(auditEvent);
                }, function (result) {
                    return _this.executePostTrigger(result);
                }).map(function (result) {
                    return {
                        canceled: result.canceled,
                        data: new AuditEvent.RegisterAndGetAuditEventServiceResponse(result.data)
                    };
                }).getPromise();
            };
            RegisterAndGetAuditEventServiceRequestHandler.prototype.executePreTrigger = function (auditEvent) {
                var options = {
                    auditEvent: auditEvent
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PreRegisterAuditEvent, options);
            };
            RegisterAndGetAuditEventServiceRequestHandler.prototype.executePostTrigger = function (auditEvent) {
                var options = {
                    auditEvent: auditEvent
                };
                return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.NonCancelableTriggerType.PostRegisterAuditEvent, options);
            };
            return RegisterAndGetAuditEventServiceRequestHandler;
        }(Commerce.RequestHandler));
        AuditEvent.RegisterAndGetAuditEventServiceRequestHandler = RegisterAndGetAuditEventServiceRequestHandler;
    })(AuditEvent = Commerce.AuditEvent || (Commerce.AuditEvent = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var SalesOrders;
    (function (SalesOrders) {
        "use strict";
        var GetGiftReceiptsClientRequestHandler = (function (_super) {
            __extends(GetGiftReceiptsClientRequestHandler, _super);
            function GetGiftReceiptsClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GetGiftReceiptsClientRequestHandler.prototype.supportedRequestType = function () {
                return SalesOrders.GetGiftReceiptsClientRequest;
            };
            GetGiftReceiptsClientRequestHandler.prototype.executeAsync = function (request) {
                var _this = this;
                var asyncQueue = new Commerce.AsyncQueue();
                var productIdsMap = Object.create(null);
                var selectedLineNumbers = [];
                var giftReceipts = [];
                request.productsInSalesOrder.forEach(function (product) {
                    productIdsMap[product.RecordId] = product;
                });
                var missingProductIds = [];
                request.salesOrder.SalesLines.forEach(function (line) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(productIdsMap[line.ProductId])) {
                        missingProductIds.push(line.ProductId);
                    }
                });
                if (Commerce.ArrayExtensions.hasElements(missingProductIds)) {
                    asyncQueue.enqueue(function () {
                        var productManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IProductManagerName);
                        var channelId = Commerce.Session.instance.productCatalogStore.Context.ChannelId;
                        return productManager.getByIdsAsync(missingProductIds, channelId).done(function (products) {
                            products.forEach(function (product) { return productIdsMap[product.RecordId] = product; });
                        });
                    });
                }
                asyncQueue.enqueue(function () {
                    var salesLinesProducts = request.salesOrder.SalesLines.map(function (salesLine) {
                        return { salesLine: salesLine, simpleProduct: productIdsMap[salesLine.ProductId] };
                    });
                    var activity = new Commerce.Activities.GetGiftReceiptActivity({
                        salesOrder: request.salesOrder,
                        salesLinesProducts: salesLinesProducts,
                        isPreview: request.isPreview
                    });
                    return activity.execute().done(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(activity.response)) {
                            selectedLineNumbers = activity.response.salesLineNumbers;
                        }
                        else {
                            asyncQueue.cancel();
                        }
                    }).recoverOnFailure(function (errors) {
                        Commerce.RetailLogger.printGiftReceiptFailure(request.correlationId);
                        selectedLineNumbers = [];
                        return Commerce.AsyncResult.createResolved();
                    });
                }).enqueue(function () {
                    return _this._getGiftReceiptAsync(request.salesOrder, selectedLineNumbers, request.isCopyOfReceipt, request.isPreview)
                        .done(function (receipts) {
                        giftReceipts = receipts;
                    });
                });
                return asyncQueue.run().map(function (result) {
                    var selectedSalesLines = request.salesOrder.SalesLines.filter(function (salesLine) {
                        return selectedLineNumbers.indexOf(salesLine.LineNumber) !== -1;
                    });
                    return {
                        canceled: result.canceled,
                        data: result.canceled ? null : new SalesOrders.GetGiftReceiptsClientResponse({ receipts: giftReceipts, selectedSalesLines: selectedSalesLines })
                    };
                }).getPromise();
            };
            GetGiftReceiptsClientRequestHandler.prototype._getGiftReceiptAsync = function (salesOrder, salesLineNumbers, isCopyOfReceipt, isPreview) {
                var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                return salesOrderManager.getGiftReceiptsForPrintAsync(salesOrder.Id, salesLineNumbers, isCopyOfReceipt, isPreview, false, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
            };
            return GetGiftReceiptsClientRequestHandler;
        }(Commerce.RequestHandler));
        SalesOrders.GetGiftReceiptsClientRequestHandler = GetGiftReceiptsClientRequestHandler;
    })(SalesOrders = Commerce.SalesOrders || (Commerce.SalesOrders = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var SalesOrders;
    (function (SalesOrders) {
        "use strict";
        var SelectCustomerOrderTypeClientRequestHandler = (function (_super) {
            __extends(SelectCustomerOrderTypeClientRequestHandler, _super);
            function SelectCustomerOrderTypeClientRequestHandler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SelectCustomerOrderTypeClientRequestHandler.prototype.supportedRequestType = function () {
                return SalesOrders.SelectCustomerOrderTypeClientRequest;
            };
            SelectCustomerOrderTypeClientRequestHandler.prototype.executeAsync = function (request) {
                var activity = new Commerce.Activities.GetOrderTypeActivity();
                return activity.execute().map(function () {
                    var hasActivityResponse = !Commerce.ObjectExtensions.isNullOrUndefined(activity.response);
                    var response = null;
                    var orderType;
                    if (hasActivityResponse) {
                        switch (activity.response.customerOrderMode) {
                            case Commerce.Proxy.Entities.CustomerOrderMode.CustomerOrderCreateOrEdit:
                                orderType = Commerce.Proxy.Entities.CustomerOrderType.SalesOrder;
                                break;
                            case Commerce.Proxy.Entities.CustomerOrderMode.QuoteCreateOrEdit:
                                orderType = Commerce.Proxy.Entities.CustomerOrderType.Quote;
                                break;
                        }
                        response = new SalesOrders.SelectCustomerOrderTypeClientResponse(orderType);
                    }
                    return { canceled: !hasActivityResponse, data: response };
                }).getPromise();
            };
            return SelectCustomerOrderTypeClientRequestHandler;
        }(Commerce.RequestHandler));
        SalesOrders.SelectCustomerOrderTypeClientRequestHandler = SelectCustomerOrderTypeClientRequestHandler;
    })(SalesOrders = Commerce.SalesOrders || (Commerce.SalesOrders = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var AuditEvent;
    (function (AuditEvent) {
        "use strict";
        var RegisterAndGetAuditEventServiceResponse = (function (_super) {
            __extends(RegisterAndGetAuditEventServiceResponse, _super);
            function RegisterAndGetAuditEventServiceResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RegisterAndGetAuditEventServiceResponse;
        }(Commerce.ClientResponse));
        AuditEvent.RegisterAndGetAuditEventServiceResponse = RegisterAndGetAuditEventServiceResponse;
    })(AuditEvent = Commerce.AuditEvent || (Commerce.AuditEvent = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var AuditEvent;
    (function (AuditEvent) {
        "use strict";
        var RegisterAndGetAuditEventServiceRequest = (function (_super) {
            __extends(RegisterAndGetAuditEventServiceRequest, _super);
            function RegisterAndGetAuditEventServiceRequest(auditEvent, correlationId) {
                var _this = _super.call(this, correlationId) || this;
                _this.auditEvent = auditEvent;
                return _this;
            }
            return RegisterAndGetAuditEventServiceRequest;
        }(Commerce.ClientRequest));
        AuditEvent.RegisterAndGetAuditEventServiceRequest = RegisterAndGetAuditEventServiceRequest;
    })(AuditEvent = Commerce.AuditEvent || (Commerce.AuditEvent = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcess;
            (function (RegistrationProcess) {
                "use strict";
            })(RegistrationProcess = Workflow.RegistrationProcess || (Workflow.RegistrationProcess = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                "use strict";
                var ProcessLineContext = (function (_super) {
                    __extends(ProcessLineContext, _super);
                    function ProcessLineContext(correlationId, eventType, documentRetrievalCriteria, registrationProcess, processLine, isFiscalEvent, stateType, document, documentSubmitted, peripheralResponse, registrationResult) {
                        if (stateType === void 0) { stateType = RegistrationProcessLine.ProcessLineStateType.None; }
                        var _this = _super.call(this, correlationId, eventType, documentRetrievalCriteria) || this;
                        _this.state = _this._getStateByStateType(stateType);
                        _this.registrationProcess = registrationProcess;
                        _this.processLine = processLine;
                        _this.isFiscalEvent = isFiscalEvent;
                        _this.document = document;
                        _this.documentSubmitted = documentSubmitted;
                        _this.peripheralResponse = peripheralResponse;
                        _this.registrationResult = registrationResult;
                        return _this;
                    }
                    Object.defineProperty(ProcessLineContext.prototype, "document", {
                        get: function () {
                            return this._document;
                        },
                        set: function (value) {
                            this._document = value;
                            this._notifyContextUpdated();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ProcessLineContext.prototype, "documentSubmitted", {
                        get: function () {
                            return !Commerce.ObjectExtensions.isNullOrUndefined(this._documentSubmitted) ? this._documentSubmitted : false;
                        },
                        set: function (value) {
                            this._documentSubmitted = !Commerce.ObjectExtensions.isNullOrUndefined(value) ? value : false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ProcessLineContext.prototype, "peripheralResponse", {
                        get: function () {
                            return this._peripheralResponse;
                        },
                        set: function (value) {
                            this._peripheralResponse = value;
                            this._notifyContextUpdated();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ProcessLineContext.prototype, "registrationResult", {
                        get: function () {
                            return this._registrationResult;
                        },
                        set: function (value) {
                            this._registrationResult = value;
                            this._notifyContextUpdated();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ProcessLineContext.prototype.hasBackupProcessLine = function () {
                        var backupProcessLine = FiscalIntegration.Helpers.RegistrationProcessHelper.findBackupFiscalRegistrationProcessLine(this.registrationProcess, this.processLine, this.eventType, this.isFiscalEvent);
                        return !Commerce.ObjectExtensions.isNullOrUndefined(backupProcessLine);
                    };
                    ProcessLineContext.prototype.getSkipRegistrationOperationOptions = function () {
                        return {
                            correlationId: this.correlationId,
                            eventType: this.eventType,
                            document: this.document,
                            documentRetrievalCriteria: this.documentRetrievalCriteria,
                            peripheralResponse: this.peripheralResponse,
                            reasonCodeId: this.processLine.RegistrationSettings.SkipReasonCode
                        };
                    };
                    ProcessLineContext.prototype.getMarkRegisteredOperationOptions = function () {
                        return {
                            correlationId: this.correlationId,
                            eventType: this.eventType,
                            document: this.document,
                            documentRetrievalCriteria: this.documentRetrievalCriteria,
                            peripheralResponse: this.peripheralResponse,
                            reasonCodeId: this.processLine.RegistrationSettings.MarkAsRegisteredReasonCode
                        };
                    };
                    ProcessLineContext.prototype._getStateByStateType = function (stateType) {
                        switch (stateType) {
                            case RegistrationProcessLine.ProcessLineStateType.None:
                                return new RegistrationProcessLine.ProcessLineStateNone(this);
                            case RegistrationProcessLine.ProcessLineStateType.Started:
                                return new RegistrationProcessLine.ProcessLineStateStarted(this);
                            case RegistrationProcessLine.ProcessLineStateType.DocumentGenerated:
                                return new RegistrationProcessLine.ProcessLineStateDocumentGenerated(this);
                            case RegistrationProcessLine.ProcessLineStateType.DocumentError:
                                return new RegistrationProcessLine.ProcessLineStateDocumentError(this);
                            case RegistrationProcessLine.ProcessLineStateType.Registered:
                                return new RegistrationProcessLine.ProcessLineStateRegistered(this);
                            case RegistrationProcessLine.ProcessLineStateType.RegistrationError:
                                return new RegistrationProcessLine.ProcessLineStateRegistrationError(this);
                            case RegistrationProcessLine.ProcessLineStateType.Completed:
                                return new RegistrationProcessLine.ProcessLineStateCompleted();
                            case RegistrationProcessLine.ProcessLineStateType.Failed:
                                return new RegistrationProcessLine.ProcessLineStateFailed(this);
                            default:
                                throw new Error("Unknown state type: " + stateType + ".");
                        }
                    };
                    return ProcessLineContext;
                }(Workflow.RegistrationContextBase));
                RegistrationProcessLine.ProcessLineContext = ProcessLineContext;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcess;
            (function (RegistrationProcess) {
                "use strict";
                var RegistrationProcessContext = (function (_super) {
                    __extends(RegistrationProcessContext, _super);
                    function RegistrationProcessContext(correlationId, eventType, documentRetrievalCriteria, registrationProcess, stateType, currentProcessLineContext) {
                        if (stateType === void 0) { stateType = RegistrationProcess.RegistrationProcessStateType.None; }
                        var _this = _super.call(this, correlationId, eventType, documentRetrievalCriteria) || this;
                        _this.state = _this._getStateByStateType(stateType);
                        _this.registrationProcess = registrationProcess;
                        _this.currentProcessLineContext = currentProcessLineContext;
                        return _this;
                    }
                    Object.defineProperty(RegistrationProcessContext.prototype, "currentProcessLineContext", {
                        get: function () {
                            return this._currentProcessLineContext;
                        },
                        set: function (context) {
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(this._currentProcessLineContext)) {
                                this._currentProcessLineContext.dispose();
                            }
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(context)) {
                                this._currentProcessLineContext = context;
                                this._currentProcessLineContext.onContextUpdated(this._processLineContextUpdated.bind(this));
                                this._notifyContextUpdated();
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    RegistrationProcessContext.prototype.dispose = function () {
                        _super.prototype.dispose.call(this);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(this.currentProcessLineContext)) {
                            this.currentProcessLineContext.dispose();
                        }
                    };
                    RegistrationProcessContext.prototype._getStateByStateType = function (stateType) {
                        switch (stateType) {
                            case RegistrationProcess.RegistrationProcessStateType.None:
                                return new RegistrationProcess.RegistrationProcessStateNone(this);
                            case RegistrationProcess.RegistrationProcessStateType.Started:
                                return new RegistrationProcess.RegistrationProcessStateStarted(this);
                            case RegistrationProcess.RegistrationProcessStateType.Completed:
                                return new RegistrationProcess.RegistrationProcessStateCompleted();
                            case RegistrationProcess.RegistrationProcessStateType.Failed:
                                return new RegistrationProcess.RegistrationProcessStateFailed(this);
                            default:
                                throw new Error("Unknown state type: " + stateType + ".");
                        }
                    };
                    RegistrationProcessContext.prototype._processLineContextUpdated = function (context) {
                        this._notifyContextUpdated();
                    };
                    return RegistrationProcessContext;
                }(Workflow.RegistrationContextBase));
                RegistrationProcess.RegistrationProcessContext = RegistrationProcessContext;
            })(RegistrationProcess = Workflow.RegistrationProcess || (Workflow.RegistrationProcess = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcess;
            (function (RegistrationProcess) {
                var RegistrationProcessStateCompleted = (function () {
                    function RegistrationProcessStateCompleted() {
                        this.stateType = RegistrationProcess.RegistrationProcessStateType.Completed;
                        this.isFinal = true;
                    }
                    RegistrationProcessStateCompleted.prototype.startAsync = function () {
                        return Commerce.VoidAsyncResult.createResolved();
                    };
                    return RegistrationProcessStateCompleted;
                }());
                RegistrationProcess.RegistrationProcessStateCompleted = RegistrationProcessStateCompleted;
            })(RegistrationProcess = Workflow.RegistrationProcess || (Workflow.RegistrationProcess = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcess;
            (function (RegistrationProcess) {
                var RegistrationProcessStateFailed = (function () {
                    function RegistrationProcessStateFailed(_context) {
                        this.stateType = RegistrationProcess.RegistrationProcessStateType.Failed;
                        this.isFinal = true;
                        this._context = _context;
                    }
                    RegistrationProcessStateFailed.prototype.startAsync = function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(this._context.currentProcessLineContext)) {
                            this._context.lastErrors = this._context.currentProcessLineContext.lastErrors;
                        }
                        var lastErrors = this._context.lastErrors;
                        if (Commerce.ObjectExtensions.isNullOrUndefined(lastErrors)) {
                            lastErrors = [new Commerce.Proxy.Entities.Error("string_4947", false, Commerce.ViewModelAdapter.getResourceString("string_4947"))];
                        }
                        return Commerce.NotificationHandler.displayClientErrors(lastErrors);
                    };
                    return RegistrationProcessStateFailed;
                }());
                RegistrationProcess.RegistrationProcessStateFailed = RegistrationProcessStateFailed;
            })(RegistrationProcess = Workflow.RegistrationProcess || (Workflow.RegistrationProcess = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcess;
            (function (RegistrationProcess) {
                var RegistrationProcessStateNone = (function () {
                    function RegistrationProcessStateNone(_context) {
                        this.stateType = RegistrationProcess.RegistrationProcessStateType.None;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    RegistrationProcessStateNone.prototype.startAsync = function () {
                        return this._context.continueWithAsync(RegistrationProcess.RegistrationProcessStateType.Started);
                    };
                    return RegistrationProcessStateNone;
                }());
                RegistrationProcess.RegistrationProcessStateNone = RegistrationProcessStateNone;
            })(RegistrationProcess = Workflow.RegistrationProcess || (Workflow.RegistrationProcess = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                "use strict";
                var ProcessLineStateType;
                (function (ProcessLineStateType) {
                    ProcessLineStateType[ProcessLineStateType["None"] = 0] = "None";
                    ProcessLineStateType[ProcessLineStateType["Started"] = 1] = "Started";
                    ProcessLineStateType[ProcessLineStateType["DocumentGenerated"] = 2] = "DocumentGenerated";
                    ProcessLineStateType[ProcessLineStateType["DocumentError"] = 3] = "DocumentError";
                    ProcessLineStateType[ProcessLineStateType["Registered"] = 4] = "Registered";
                    ProcessLineStateType[ProcessLineStateType["RegistrationError"] = 5] = "RegistrationError";
                    ProcessLineStateType[ProcessLineStateType["Completed"] = 6] = "Completed";
                    ProcessLineStateType[ProcessLineStateType["Failed"] = 7] = "Failed";
                })(ProcessLineStateType = RegistrationProcessLine.ProcessLineStateType || (RegistrationProcessLine.ProcessLineStateType = {}));
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcess;
            (function (RegistrationProcess) {
                var RegistrationProcessStateStarted = (function () {
                    function RegistrationProcessStateStarted(_context) {
                        this.stateType = RegistrationProcess.RegistrationProcessStateType.Started;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    RegistrationProcessStateStarted.prototype.startAsync = function () {
                        if (Commerce.ObjectExtensions.isNullOrUndefined(this._context.currentProcessLineContext)) {
                            return this._startFirstProcessLineAsync();
                        }
                        else {
                            switch (this._context.currentProcessLineContext.state.stateType) {
                                case Workflow.RegistrationProcessLine.ProcessLineStateType.Completed:
                                    return this._startNextProcessLineAsync();
                                case Workflow.RegistrationProcessLine.ProcessLineStateType.Failed:
                                    return this._startBackupProcessLineAsync();
                                default:
                                    return this._startCurrentProcessLineAsync();
                            }
                        }
                    };
                    RegistrationProcessStateStarted.prototype._startFirstProcessLineAsync = function () {
                        var isFiscalEvent = true;
                        var firstProcessLine = FiscalIntegration.Helpers.RegistrationProcessHelper.findNextRegistrationProcessLine(this._context.registrationProcess, null);
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(firstProcessLine)) {
                            return this._startProcessLineAsync(firstProcessLine, isFiscalEvent);
                        }
                        else {
                            return this._context.continueWithAsync(RegistrationProcess.RegistrationProcessStateType.Completed);
                        }
                    };
                    RegistrationProcessStateStarted.prototype._startNextProcessLineAsync = function () {
                        var isFiscalEvent;
                        if (this._context.currentProcessLineContext.isFiscalEvent) {
                            isFiscalEvent = false;
                            return this._startProcessLineAsync(this._context.currentProcessLineContext.processLine, isFiscalEvent);
                        }
                        else {
                            isFiscalEvent = true;
                            var nextProcessLine = FiscalIntegration.Helpers.RegistrationProcessHelper.findNextRegistrationProcessLine(this._context.registrationProcess, this._context.currentProcessLineContext.processLine);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(nextProcessLine)) {
                                return this._startProcessLineAsync(nextProcessLine, isFiscalEvent);
                            }
                            else {
                                return this._context.continueWithAsync(RegistrationProcess.RegistrationProcessStateType.Completed);
                            }
                        }
                    };
                    RegistrationProcessStateStarted.prototype._startBackupProcessLineAsync = function () {
                        if (this._context.currentProcessLineContext.isFiscalEvent) {
                            var isFiscalEvent = true;
                            var backupProcessLine = FiscalIntegration.Helpers.RegistrationProcessHelper.findBackupFiscalRegistrationProcessLine(this._context.registrationProcess, this._context.currentProcessLineContext.processLine, this._context.eventType, isFiscalEvent);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(backupProcessLine)) {
                                return this._startProcessLineAsync(backupProcessLine, isFiscalEvent);
                            }
                            else {
                                this._context.lastErrors = this._context.currentProcessLineContext.lastErrors;
                                return this._context.continueWithAsync(RegistrationProcess.RegistrationProcessStateType.Failed);
                            }
                        }
                        else {
                            return this._startNextProcessLineAsync();
                        }
                    };
                    RegistrationProcessStateStarted.prototype._startProcessLineAsync = function (processLine, isFiscalEvent) {
                        this._context.currentProcessLineContext = new Workflow.RegistrationProcessLine.ProcessLineContext(this._context.correlationId, this._context.eventType, this._context.documentRetrievalCriteria, this._context.registrationProcess, processLine, isFiscalEvent);
                        return this._startCurrentProcessLineAsync();
                    };
                    RegistrationProcessStateStarted.prototype._startCurrentProcessLineAsync = function () {
                        var _this = this;
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return _this._context.currentProcessLineContext.startAsync();
                        }).enqueue(function () {
                            if (_this._context.currentProcessLineContext.state.isFinal) {
                                return _this.startAsync();
                            }
                            else {
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                        }).run();
                    };
                    return RegistrationProcessStateStarted;
                }());
                RegistrationProcess.RegistrationProcessStateStarted = RegistrationProcessStateStarted;
            })(RegistrationProcess = Workflow.RegistrationProcess || (Workflow.RegistrationProcess = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                "use strict";
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateCompleted = (function () {
                    function ProcessLineStateCompleted() {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.Completed;
                        this.isFinal = true;
                    }
                    ProcessLineStateCompleted.prototype.startAsync = function () {
                        return Commerce.VoidAsyncResult.createResolved();
                    };
                    return ProcessLineStateCompleted;
                }());
                RegistrationProcessLine.ProcessLineStateCompleted = ProcessLineStateCompleted;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateDocumentError = (function () {
                    function ProcessLineStateDocumentError(_context) {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.DocumentError;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    ProcessLineStateDocumentError.prototype.startAsync = function () {
                        Commerce.RetailLogger.fiscalIntegrationDocumentGenerationFailed(this._context.processLine.SequenceNumber, this._context.processLine.Priority, Commerce.ErrorHelper.getErrorMessages(this._context.lastErrors), this._context.correlationId);
                        if (this._context.isFiscalEvent) {
                            if (this._context.hasBackupProcessLine()) {
                                return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Failed);
                            }
                            else {
                                return this._requestActionAsync();
                            }
                        }
                        else {
                            return this._requestActionAsync();
                        }
                    };
                    ProcessLineStateDocumentError.prototype._requestActionAsync = function () {
                        var _this = this;
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return FiscalIntegration.Helpers.RegistrationProcessHelper.displayFiscalRegistrationErrorDialogAsync(_this._getActivityContext());
                        }).enqueue(function (actionType) {
                            switch (actionType) {
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Retry:
                                    return _this._retryAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Skip:
                                    return _this._skipFiscalRegistrationAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.MarkAsRegistered:
                                    return _this._markFiscalEventRegisteredAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Cancel:
                                    return _this._handleCancelActionAsync();
                                default:
                                    throw new Error("Unexpected action type.");
                            }
                        }).run();
                    };
                    ProcessLineStateDocumentError.prototype._getActivityContext = function () {
                        var errorHandlingOptions = {
                            allowRetry: true,
                            allowSkip: this._context.isFiscalEvent && this._context.processLine.AllowSkip,
                            allowMarkRegistered: this._context.isFiscalEvent && this._context.processLine.AllowMarkAsRegistered,
                            allowCancel: true
                        };
                        var activityContext = {
                            title: Commerce.ViewModelAdapter.getResourceString("string_4951"),
                            message: Commerce.ViewModelAdapter.getResourceString("string_4947"),
                            options: errorHandlingOptions
                        };
                        return activityContext;
                    };
                    ProcessLineStateDocumentError.prototype._retryAsync = function () {
                        return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Started);
                    };
                    ProcessLineStateDocumentError.prototype._skipFiscalRegistrationAsync = function () {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Proxy.Entities.RetailOperation.SkipFiscalRegistration, _this._context.getSkipRegistrationOperationOptions()));
                        }).enqueue(function (result) {
                            _this._context.registrationResult = result.data;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Registered);
                        });
                        return asyncQueue.run();
                    };
                    ProcessLineStateDocumentError.prototype._markFiscalEventRegisteredAsync = function () {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Proxy.Entities.RetailOperation.MarkFiscalEventRegistered, _this._context.getMarkRegisteredOperationOptions()));
                        }).enqueue(function (result) {
                            _this._context.registrationResult = result.data;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Registered);
                        });
                        return asyncQueue.run();
                    };
                    ProcessLineStateDocumentError.prototype._handleCancelActionAsync = function () {
                        if (this._context.isFiscalEvent) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else {
                            return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Completed);
                        }
                    };
                    return ProcessLineStateDocumentError;
                }());
                RegistrationProcessLine.ProcessLineStateDocumentError = ProcessLineStateDocumentError;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateDocumentGenerated = (function () {
                    function ProcessLineStateDocumentGenerated(_context) {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.DocumentGenerated;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    ProcessLineStateDocumentGenerated.prototype.startAsync = function () {
                        if (FiscalIntegration.FiscalIntegrationValidators.isRegistrationRequired(this._context.document)) {
                            if (this._context.documentSubmitted) {
                                Commerce.RetailLogger.fiscalIntegrationDocumentSubmittedWithNoResponse(this._context.processLine.SequenceNumber, this._context.processLine.Priority, this._context.correlationId);
                                return this._requestActionAsync();
                            }
                            else {
                                return this._submitDocumentAsync();
                            }
                        }
                        else {
                            return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Completed);
                        }
                    };
                    ProcessLineStateDocumentGenerated.prototype._requestActionAsync = function () {
                        var _this = this;
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return FiscalIntegration.Helpers.RegistrationProcessHelper.displayFiscalRegistrationErrorDialogAsync(_this._getActivityContext());
                        }).enqueue(function (actionType) {
                            switch (actionType) {
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Skip:
                                    return _this._skipFiscalRegistrationAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.MarkAsRegistered:
                                    return _this._markFiscalEventRegisteredAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Cancel:
                                    return Commerce.VoidAsyncResult.createResolved();
                                default:
                                    throw new Error("Unexpected action type.");
                            }
                        }).run();
                    };
                    ProcessLineStateDocumentGenerated.prototype._getActivityContext = function () {
                        var errorHandlingOptions = {
                            allowRetry: false,
                            allowSkip: this._context.processLine.AllowSkip,
                            allowMarkRegistered: this._context.processLine.AllowMarkAsRegistered,
                            allowCancel: true
                        };
                        var activityContext = {
                            title: Commerce.ViewModelAdapter.getResourceString("string_4951"),
                            message: Commerce.ViewModelAdapter.getResourceString("string_4947"),
                            options: errorHandlingOptions
                        };
                        return activityContext;
                    };
                    ProcessLineStateDocumentGenerated.prototype._skipFiscalRegistrationAsync = function () {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Proxy.Entities.RetailOperation.SkipFiscalRegistration, _this._context.getSkipRegistrationOperationOptions()));
                        }).enqueue(function (result) {
                            _this._context.registrationResult = result.data;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Registered);
                        });
                        return asyncQueue.run();
                    };
                    ProcessLineStateDocumentGenerated.prototype._markFiscalEventRegisteredAsync = function () {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Proxy.Entities.RetailOperation.MarkFiscalEventRegistered, _this._context.getMarkRegisteredOperationOptions()));
                        }).enqueue(function (result) {
                            _this._context.registrationResult = result.data;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Registered);
                        });
                        return asyncQueue.run();
                    };
                    ProcessLineStateDocumentGenerated.prototype._submitDocumentAsync = function () {
                        var _this = this;
                        var document = this._context.document;
                        var technicalProfile = document.FiscalConnectorTechnicalProfile;
                        var fiscalPeripheralInfo = {
                            DeviceName: technicalProfile.ConnectorName,
                            DeviceProperties: technicalProfile.TechnicalProfile
                        };
                        return new Commerce.AsyncQueue().enqueue(function () {
                            _this._context.documentSubmitted = true;
                            return Commerce.Peripherals.instance.fiscalPeripheral.submitDocument(document.Document, fiscalPeripheralInfo);
                        }).enqueue(function (response) {
                            _this._context.peripheralResponse = response;
                            var error = FiscalIntegration.FiscalIntegrationValidators.assertPeripheralActionSucceeded(document.FiscalConnectorTechnicalProfile, response);
                            if (error) {
                                return Commerce.VoidAsyncResult.createRejected([error]);
                            }
                            _this._context.registrationResult =
                                Commerce.FiscalIntegration.Helpers.RegistrationProcessHelper.createRegistrationResult(_this._context.eventType, document, _this._context.documentRetrievalCriteria, response, Commerce.Proxy.Entities.FiscalIntegrationRegistrationStatus.Completed);
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Registered);
                        }).run().recoverOnFailure(function (errors) {
                            _this._context.lastErrors = errors;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.RegistrationError);
                        });
                    };
                    return ProcessLineStateDocumentGenerated;
                }());
                RegistrationProcessLine.ProcessLineStateDocumentGenerated = ProcessLineStateDocumentGenerated;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateFailed = (function () {
                    function ProcessLineStateFailed(_context) {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.Failed;
                        this.isFinal = true;
                        this._context = _context;
                    }
                    ProcessLineStateFailed.prototype.startAsync = function () {
                        Commerce.RetailLogger.fiscalIntegrationExecuteRegistrationProcessLineFailed(this._context.processLine.SequenceNumber, this._context.processLine.Priority, Commerce.ErrorHelper.getErrorMessages(this._context.lastErrors), this._context.correlationId);
                        return Commerce.VoidAsyncResult.createResolved();
                    };
                    return ProcessLineStateFailed;
                }());
                RegistrationProcessLine.ProcessLineStateFailed = ProcessLineStateFailed;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateNone = (function () {
                    function ProcessLineStateNone(_context) {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.None;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    ProcessLineStateNone.prototype.startAsync = function () {
                        return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Started);
                    };
                    return ProcessLineStateNone;
                }());
                RegistrationProcessLine.ProcessLineStateNone = ProcessLineStateNone;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateRegistered = (function () {
                    function ProcessLineStateRegistered(_context) {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.Registered;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    Object.defineProperty(ProcessLineStateRegistered.prototype, "_fiscalIntegrationManager", {
                        get: function () {
                            return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFiscalIntegrationManagerName);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ProcessLineStateRegistered.prototype.startAsync = function () {
                        var _this = this;
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return _this._saveRegistrationResult();
                        }).enqueue(function () {
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Completed);
                        }).run().recoverOnFailure(function (errors) {
                            if (_this._context.hasBackupProcessLine()) {
                                _this._context.lastErrors = errors;
                                return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Failed);
                            }
                            else {
                                return _this._requestActionAsync();
                            }
                        });
                    };
                    ProcessLineStateRegistered.prototype._saveRegistrationResult = function () {
                        if (!this._context.isFiscalEvent) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        var processLine = this._context.processLine;
                        var hardwareProfileId = Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId;
                        var functionalityProfileGroupId = processLine.FunctionalityProfileGroupId;
                        if (processLine.ConnectorTypeValue === Commerce.Proxy.Entities.FiscalIntegrationConnectorType.Local) {
                            return this._fiscalIntegrationManager.saveFiscalIntegrationRegistrationResultAsync(hardwareProfileId, functionalityProfileGroupId, this._context.registrationResult);
                        }
                        else {
                            var error = new Commerce.Proxy.Entities.Error("string_4948", false, Commerce.ViewModelAdapter.getResourceString("string_4948"), null, Commerce.Proxy.Entities.FiscalIntegrationConnectorType[processLine.ConnectorTypeValue]);
                            this._context.lastErrors = [error];
                            return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Failed);
                        }
                    };
                    ProcessLineStateRegistered.prototype._requestActionAsync = function () {
                        var _this = this;
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return FiscalIntegration.Helpers.RegistrationProcessHelper.displayFiscalRegistrationErrorDialogAsync(_this._getActivityContext());
                        }).enqueue(function (actionType) {
                            switch (actionType) {
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Retry:
                                    return _this._retryAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Cancel:
                                    return Commerce.VoidAsyncResult.createResolved();
                                default:
                                    throw new Error("Unexpected action type.");
                            }
                        }).run();
                    };
                    ProcessLineStateRegistered.prototype._getActivityContext = function () {
                        var errorHandlingOptions = {
                            allowRetry: true,
                            allowSkip: false,
                            allowMarkRegistered: false,
                            allowCancel: true
                        };
                        var activityContext = {
                            title: Commerce.ViewModelAdapter.getResourceString("string_4951"),
                            message: Commerce.ViewModelAdapter.getResourceString("string_4947"),
                            options: errorHandlingOptions
                        };
                        return activityContext;
                    };
                    ProcessLineStateRegistered.prototype._retryAsync = function () {
                        return this.startAsync();
                    };
                    return ProcessLineStateRegistered;
                }());
                RegistrationProcessLine.ProcessLineStateRegistered = ProcessLineStateRegistered;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateRegistrationError = (function () {
                    function ProcessLineStateRegistrationError(_context) {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.RegistrationError;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    ProcessLineStateRegistrationError.prototype.startAsync = function () {
                        Commerce.RetailLogger.fiscalIntegrationRegistrationFailed(this._context.processLine.SequenceNumber, this._context.processLine.Priority, Commerce.ErrorHelper.getErrorMessages(this._context.lastErrors), this._context.correlationId);
                        if (this._context.isFiscalEvent) {
                            if (this._context.hasBackupProcessLine()) {
                                return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Failed);
                            }
                            else {
                                return this._requestActionAsync();
                            }
                        }
                        else {
                            return this._requestActionAsync();
                        }
                    };
                    ProcessLineStateRegistrationError.prototype._requestActionAsync = function () {
                        var _this = this;
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return FiscalIntegration.Helpers.RegistrationProcessHelper.displayFiscalRegistrationErrorDialogAsync(_this._getActivityContext());
                        }).enqueue(function (actionType) {
                            switch (actionType) {
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Retry:
                                    return _this._retryAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Skip:
                                    return _this._skipFiscalRegistrationAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.MarkAsRegistered:
                                    return _this._markFiscalEventRegisteredAsync();
                                case FiscalIntegration.Entities.FiscalRegistrationErrorActionType.Cancel:
                                    return _this._handleCancelActionAsync();
                                default:
                                    throw new Error("Unexpected action type.");
                            }
                        }).run();
                    };
                    ProcessLineStateRegistrationError.prototype._getActivityContext = function () {
                        var errorHandlingOptions = {
                            allowRetry: true,
                            allowSkip: this._context.isFiscalEvent && this._context.processLine.AllowSkip,
                            allowMarkRegistered: this._context.isFiscalEvent && this._context.processLine.AllowMarkAsRegistered,
                            allowCancel: true
                        };
                        var peripheralResponse = this._context.peripheralResponse;
                        var title = Commerce.ViewModelAdapter.getResourceString("string_4909");
                        var message;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(peripheralResponse) && !Commerce.ObjectExtensions.isNullOrUndefined(peripheralResponse.FailureDetails)) {
                            var errorMessageResourceId = FiscalIntegration.FiscalIntegrationValidators.getFiscalFailureErrorMessageResourceId(peripheralResponse.FailureDetails.FailureType);
                            var formatData = FiscalIntegration.FiscalIntegrationValidators.getFailureDetailsFormatData(this._context.document.FiscalConnectorTechnicalProfile, peripheralResponse.FailureDetails);
                            message = Commerce.StringExtensions.format.apply(Commerce.StringExtensions, [Commerce.ViewModelAdapter.getResourceString(errorMessageResourceId)].concat(formatData));
                        }
                        else {
                            message = Commerce.ViewModelAdapter.getResourceString("string_4947");
                        }
                        var activityContext = {
                            title: title,
                            message: message,
                            options: errorHandlingOptions
                        };
                        return activityContext;
                    };
                    ProcessLineStateRegistrationError.prototype._retryAsync = function () {
                        this._context.documentSubmitted = false;
                        return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.DocumentGenerated);
                    };
                    ProcessLineStateRegistrationError.prototype._skipFiscalRegistrationAsync = function () {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Proxy.Entities.RetailOperation.SkipFiscalRegistration, _this._context.getSkipRegistrationOperationOptions()));
                        }).enqueue(function (result) {
                            _this._context.registrationResult = result.data;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Registered);
                        });
                        return asyncQueue.run();
                    };
                    ProcessLineStateRegistrationError.prototype._markFiscalEventRegisteredAsync = function () {
                        var _this = this;
                        var asyncQueue = new Commerce.AsyncQueue();
                        asyncQueue.enqueue(function () {
                            return asyncQueue.cancelOn(Commerce.Operations.OperationsManager.instance.runOperation(Commerce.Proxy.Entities.RetailOperation.MarkFiscalEventRegistered, _this._context.getMarkRegisteredOperationOptions()));
                        }).enqueue(function (result) {
                            _this._context.registrationResult = result.data;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Registered);
                        });
                        return asyncQueue.run();
                    };
                    ProcessLineStateRegistrationError.prototype._handleCancelActionAsync = function () {
                        if (this._context.isFiscalEvent) {
                            return Commerce.VoidAsyncResult.createResolved();
                        }
                        else {
                            return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Completed);
                        }
                    };
                    return ProcessLineStateRegistrationError;
                }());
                RegistrationProcessLine.ProcessLineStateRegistrationError = ProcessLineStateRegistrationError;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var FiscalIntegration;
    (function (FiscalIntegration) {
        var Workflow;
        (function (Workflow) {
            var RegistrationProcessLine;
            (function (RegistrationProcessLine) {
                var ProcessLineStateStarted = (function () {
                    function ProcessLineStateStarted(_context) {
                        this.stateType = RegistrationProcessLine.ProcessLineStateType.Started;
                        this.isFinal = false;
                        this._context = _context;
                    }
                    Object.defineProperty(ProcessLineStateStarted.prototype, "_fiscalIntegrationManager", {
                        get: function () {
                            return Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IFiscalIntegrationManagerName);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ProcessLineStateStarted.prototype.startAsync = function () {
                        var _this = this;
                        var hardwareProfileId = Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId;
                        var functionalityProfileGroupId = this._context.processLine.FunctionalityProfileGroupId;
                        if (!FiscalIntegration.Helpers.RegistrationProcessHelper.isEventTypeSupported(this._context.processLine, this._context.eventType, this._context.isFiscalEvent)) {
                            return this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Completed);
                        }
                        return new Commerce.AsyncQueue().enqueue(function () {
                            return _this._getDocumentToSubmitAsync(hardwareProfileId, functionalityProfileGroupId, _this._context.documentRetrievalCriteria, _this._context.isFiscalEvent).recoverOnFailure(function (errors) {
                                _this._context.lastErrors = errors;
                                return Commerce.AsyncResult.createResolved();
                            });
                        })
                            .enqueue(function (document) {
                            var error = FiscalIntegration.FiscalIntegrationValidators.assertDocumentGenerationSucceeded(document);
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(error)) {
                                _this._context.lastErrors.push(error);
                                return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.DocumentError);
                            }
                            _this._context.document = document;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.DocumentGenerated);
                        })
                            .run()
                            .recoverOnFailure(function (errors) {
                            _this._context.lastErrors = errors;
                            return _this._context.continueWithAsync(RegistrationProcessLine.ProcessLineStateType.Failed);
                        });
                    };
                    ProcessLineStateStarted.prototype._getDocumentToSubmitAsync = function (hardwareProfileId, functionalityProfileGroupId, documentRetrievalCriteria, isFiscalEvent) {
                        if (isFiscalEvent) {
                            return this._fiscalIntegrationManager.getFiscalIntegrationFiscalDocumentAsync(hardwareProfileId, functionalityProfileGroupId, documentRetrievalCriteria);
                        }
                        else {
                            return this._fiscalIntegrationManager.getFiscalIntegrationNonFiscalDocumentAsync(hardwareProfileId, functionalityProfileGroupId, documentRetrievalCriteria);
                        }
                    };
                    return ProcessLineStateStarted;
                }());
                RegistrationProcessLine.ProcessLineStateStarted = ProcessLineStateStarted;
            })(RegistrationProcessLine = Workflow.RegistrationProcessLine || (Workflow.RegistrationProcessLine = {}));
        })(Workflow = FiscalIntegration.Workflow || (FiscalIntegration.Workflow = {}));
    })(FiscalIntegration = Commerce.FiscalIntegration || (Commerce.FiscalIntegration = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var PaymentTermAddBalanceToGiftCardPeripheralRequest = Commerce.Peripherals.PaymentTerminalAddBalanceToGiftCardPeripheralRequest;
            var AddBalanceToGiftCardClientRequestHandler = (function (_super) {
                __extends(AddBalanceToGiftCardClientRequestHandler, _super);
                function AddBalanceToGiftCardClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AddBalanceToGiftCardClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.AddBalanceToGiftCardClientRequest;
                };
                AddBalanceToGiftCardClientRequestHandler.prototype.executeAsync = function (request) {
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request.tenderType) || Commerce.StringExtensions.isNullOrWhitespace(request.tenderType.ConnectorId)) {
                        return cartManager.refillGiftCardAsync(request.giftCardId, request.amount, request.currency, request.lineDescription)
                            .map(function (result) {
                            return {
                                canceled: false,
                                data: new Payments.AddBalanceToGiftCardClientResponse(result)
                            };
                        }).getPromise();
                    }
                    else {
                        var paymentInfo_1;
                        var giftCardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
                        var tenderInfo_1 = {
                            TenderId: null,
                            CardNumber: request.giftCardId,
                            CardTypeId: giftCardTypeId.toString()
                        };
                        var isApproved_1 = false;
                        var asyncQueue_4 = new Commerce.AsyncQueue();
                        var balance_1 = 0.0;
                        asyncQueue_4.enqueue(function () {
                            var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
                            var cardPayment = Commerce.Peripherals.instance.cardPayment;
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal) && paymentTerminal.isActive) {
                                var addbalanceGiftCardRequest = new PaymentTermAddBalanceToGiftCardPeripheralRequest(request.correlationId, request.amount, tenderInfo_1, request.tenderType.ConnectorId, null);
                                return asyncQueue_4.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addbalanceGiftCardRequest)))
                                    .map(function (result) {
                                    paymentInfo_1 = result.data.paymentInfo;
                                    isApproved_1 = result.data.paymentInfo.IsApproved;
                                    balance_1 = result.data.paymentInfo.AvailableBalanceAmount;
                                    return result.data.paymentInfo;
                                });
                            }
                            else if (!Commerce.ObjectExtensions.isNullOrUndefined(cardPayment)) {
                                return cardPayment.addBalanceToGiftCard(request.amount, tenderInfo_1, request.tenderType.ConnectorId, null)
                                    .done(function (result) {
                                    paymentInfo_1 = result;
                                    isApproved_1 = result.IsApproved;
                                    balance_1 = result.AvailableBalanceAmount;
                                });
                            }
                            else {
                                var errors = [];
                                errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED));
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                        }).enqueue(function () {
                            if (isApproved_1) {
                                var thirdPartyGiftCardInfo = new Commerce.Proxy.Entities.ThirdPartyGiftCardInfoClass();
                                thirdPartyGiftCardInfo.Authorization = paymentInfo_1.PaymentSdkData;
                                thirdPartyGiftCardInfo.Amount = request.amount;
                                var cartLine = {
                                    Price: request.amount,
                                    ItemId: request.tenderType.GiftCardItem,
                                    IsGiftCardLine: true,
                                    GiftCardId: paymentInfo_1.CardNumberMasked,
                                    GiftCardBalance: balance_1,
                                    GiftCardOperationValue: Commerce.Proxy.Entities.GiftCardOperationType.AddTo,
                                    Comment: request.tenderType.GiftCardItem,
                                    Quantity: 1.0,
                                    ThirdPartyGiftCardInfo: thirdPartyGiftCardInfo
                                };
                                return cartManager.addCartLinesToCartAsync([cartLine]);
                            }
                            else {
                                var errors = new Array();
                                errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.GIFT_CARD_NOT_APPROVED));
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                        });
                        return asyncQueue_4.run().map(function (result) {
                            return {
                                canceled: result.canceled,
                                data: result.canceled ? null : new Payments.AddBalanceToGiftCardClientResponse(Commerce.Session.instance.cart)
                            };
                        }).getPromise();
                    }
                };
                return AddBalanceToGiftCardClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AddBalanceToGiftCardClientRequestHandler = AddBalanceToGiftCardClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var AddToGiftCardOperationRequestHandler = (function (_super) {
                __extends(AddToGiftCardOperationRequestHandler, _super);
                function AddToGiftCardOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AddToGiftCardOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.AddToGiftCardOperationRequest;
                };
                AddToGiftCardOperationRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(request.tenderTypeId);
                    var onAddToGiftCardCanceled = false;
                    var context = {
                        onAddToGiftCard: function (cardId, amount, currency, description) {
                            if (!_this.isValidAmount(amount)) {
                                return Commerce.VoidAsyncResult.createRejected([
                                    new Commerce.Proxy.Entities.Error("string_5115", undefined, Commerce.ViewModelAdapter.getResourceString("string_5115"))
                                ]);
                            }
                            var connectorId = Commerce.StringExtensions.EMPTY;
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                                connectorId = tenderType.ConnectorId;
                            }
                            if (Commerce.StringExtensions.isNullOrWhitespace(connectorId) && Commerce.StringExtensions.isNullOrWhitespace(cardId)) {
                                return Commerce.AsyncResult.createRejected([
                                    new Commerce.Proxy.Entities.Error("string_1171", undefined, Commerce.ViewModelAdapter.getResourceString("string_1171"))
                                ]);
                            }
                            var addQueue = new Commerce.AsyncQueue();
                            if (!Commerce.Session.instance.isCartInProgress) {
                                addQueue.enqueue(function () {
                                    var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(request.correlationId);
                                    return addQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCartRequest)));
                                });
                            }
                            return addQueue.enqueue(function () {
                                return Commerce.ActivityHelper.getStartOfTransactionSalesRepresentativeAsyncQueue(Commerce.Session.instance.cart).run();
                            }).enqueue(function () {
                                Commerce.RetailLogger.operationAddGiftCard(cardId, amount, currency, description, connectorId, request.correlationId);
                                var addBalanceGiftCardRequest = new Commerce.Payments.AddBalanceToGiftCardClientRequest(request.correlationId, tenderType, cardId, amount, currency, description);
                                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(addBalanceGiftCardRequest));
                            }).run().map(function (result) {
                                onAddToGiftCardCanceled = result.canceled;
                            });
                        },
                        onCashOutGiftCard: undefined,
                        onCheckGiftCardBalance: undefined,
                        onIssueGiftCard: undefined,
                        retailOperationId: Operations.RetailOperation.AddToGiftCard,
                        tenderTypeId: request.tenderTypeId
                    };
                    var activity = new Commerce.Activities.GetGiftCardDetailsActivity(context);
                    return activity.execute().map(function () {
                        return { canceled: onAddToGiftCardCanceled, data: onAddToGiftCardCanceled ? null : new Commerce.AddToGiftCardOperationResponse() };
                    }).getPromise();
                };
                AddToGiftCardOperationRequestHandler.prototype.isValidAmount = function (amount) {
                    var maxDigits = 11;
                    return (amount.toString().length <= maxDigits) && !Commerce.NumberExtensions.isNullNaNOrZero(amount);
                };
                return AddToGiftCardOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.AddToGiftCardOperationRequestHandler = AddToGiftCardOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CashOutGiftCardClientRequestHandler = (function (_super) {
                __extends(CashOutGiftCardClientRequestHandler, _super);
                function CashOutGiftCardClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CashOutGiftCardClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.CashOutGiftCardClientRequest;
                };
                CashOutGiftCardClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the CashOutGiftCardOperationRequestHandler received a null or undefined request.");
                    }
                    var isInternalGiftCard = Commerce.StringExtensions.isNullOrWhitespace(request.tenderType.ConnectorId);
                    if (isInternalGiftCard) {
                        return this._cashOutInternalGiftCardAsync(request.giftCardId, request.amount, request.currency, request.lineDescription);
                    }
                    else {
                        return this._cashOutThirdPartyGiftCardAsync(request.correlationId, request.giftCardId, request.amount, request.currency, request.lineDescription, request.tenderType, request.extensionTransactionProperties);
                    }
                };
                CashOutGiftCardClientRequestHandler.prototype._cashOutInternalGiftCardAsync = function (giftCardId, amount, currency, lineDescription) {
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    return cartManager.cashOutGiftCardAsync(giftCardId, amount, currency, lineDescription)
                        .map(function (result) {
                        return { canceled: false, data: new Payments.CashOutGiftCardClientResponse(result) };
                    }).getPromise();
                };
                CashOutGiftCardClientRequestHandler.prototype._cashOutThirdPartyGiftCardAsync = function (correlationId, giftCardId, amount, currency, lineDescription, tenderType, extensionTransactionProperties) {
                    var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
                    var giftCardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
                    var tenderInfo = {
                        TenderId: tenderType.TenderTypeId,
                        CardNumber: giftCardId,
                        CardTypeId: giftCardTypeId.toString()
                    };
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal)) {
                            return paymentTerminal.cashOutGiftCard(amount, tenderType.ConnectorId, tenderInfo, extensionTransactionProperties, correlationId);
                        }
                        else {
                            return Commerce.AsyncResult.createRejected([new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED)]);
                        }
                    }).enqueue(function (result) {
                        if (result.IsApproved) {
                            var thirdPartyGiftCardInfo = new Commerce.Proxy.Entities.ThirdPartyGiftCardInfoClass();
                            thirdPartyGiftCardInfo.Authorization = result.PaymentSdkData;
                            thirdPartyGiftCardInfo.Amount = amount;
                            var cartLine = {
                                Price: -1 * amount,
                                ItemId: tenderType.GiftCardItem,
                                IsGiftCardLine: true,
                                GiftCardId: giftCardId,
                                GiftCardBalance: 0,
                                GiftCardOperationValue: Commerce.Proxy.Entities.GiftCardOperationType.CashOut,
                                Comment: tenderType.GiftCardItem,
                                Quantity: 1.0,
                                ThirdPartyGiftCardInfo: thirdPartyGiftCardInfo
                            };
                            var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                            return cartManager.addCartLinesToCartAsync([cartLine]);
                        }
                        else {
                            var errors = new Array();
                            errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.GIFT_CARD_NOT_APPROVED));
                            return Commerce.VoidAsyncResult.createRejected(errors);
                        }
                    });
                    return asyncQueue.run()
                        .map(function (result) {
                        return { canceled: result.canceled, data: result.canceled ? null : new Payments.CashOutGiftCardClientResponse(Commerce.Session.instance.cart) };
                    }).getPromise();
                };
                return CashOutGiftCardClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CashOutGiftCardClientRequestHandler = CashOutGiftCardClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CashOutGiftCardOperationRequestHandler = (function (_super) {
                __extends(CashOutGiftCardOperationRequestHandler, _super);
                function CashOutGiftCardOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CashOutGiftCardOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.Payments.CashOutGiftCardOperationRequest;
                };
                CashOutGiftCardOperationRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the CashOutGiftCardOperationRequestHandler received a null or undefined request.");
                    }
                    var operationOptions = {
                        correlationId: request.correlationId,
                        tenderType: request.tenderType
                    };
                    return Operations.OperationsManager.instance.runOperationWithoutPermissionsCheck(request.operationId, operationOptions)
                        .map(function (result) {
                        return { canceled: result.canceled, data: result.canceled ? null : new Commerce.Payments.CashOutGiftCardOperationResponse() };
                    }).getPromise();
                };
                return CashOutGiftCardOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CashOutGiftCardOperationRequestHandler = CashOutGiftCardOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var CheckGiftCardBalanceOperationRequestHandler = (function (_super) {
                __extends(CheckGiftCardBalanceOperationRequestHandler, _super);
                function CheckGiftCardBalanceOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CheckGiftCardBalanceOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.CheckGiftCardBalanceOperationRequest;
                };
                CheckGiftCardBalanceOperationRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    var asyncQueue = new Commerce.AsyncQueue();
                    var nonSalesTransaction = { Id: Commerce.StringExtensions.EMPTY };
                    var giftCard;
                    var correlationId = Commerce.LoggerHelper.getNewCorrelationId();
                    asyncQueue.enqueue(function () {
                        return _this._getGiftCardById(request.tenderTypeId, correlationId);
                    }).enqueue(function (result) {
                        giftCard = result.data;
                        if (!Commerce.ObjectExtensions.isNullOrUndefined(giftCard)) {
                            nonSalesTransaction.ForeignCurrency = giftCard.CardCurrencyCode;
                            nonSalesTransaction.TransactionTypeValue = Commerce.Proxy.Entities.TransactionType.GiftCardInquiry;
                            nonSalesTransaction.Description = Commerce.StringExtensions.EMPTY;
                            nonSalesTransaction.ShiftId = Commerce.Session.instance.Shift.ShiftId.toString();
                            nonSalesTransaction.ShiftTerminalId = Commerce.Session.instance.Shift.TerminalId;
                            nonSalesTransaction.GiftCardBalance = giftCard.Balance;
                            nonSalesTransaction.GiftCardIssueAmount = giftCard.GiftCardIssueAmount;
                            nonSalesTransaction.GiftCardActiveFrom = giftCard.GiftCardActiveFrom;
                            nonSalesTransaction.GiftCardExpireDate = giftCard.GiftCardExpireDate;
                            nonSalesTransaction.GiftCardHistoryDetails = giftCard.GiftCardHistoryDetails;
                            nonSalesTransaction.GiftCardIdMasked = giftCard.Id;
                            var request_1 = new Commerce.CreateNonSalesTransactionServiceRequest(correlationId, nonSalesTransaction);
                            return asyncQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(request_1)));
                        }
                        return Commerce.AsyncResult.createResolved();
                    }).enqueue(function () {
                        if (!Commerce.StringExtensions.isNullOrWhitespace(nonSalesTransaction.Id)) {
                            return _this._printGiftCardInquiryReceiptAsync(nonSalesTransaction.Id, correlationId);
                        }
                        return Commerce.AsyncResult.createResolved();
                    });
                    return asyncQueue.run().map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: new Commerce.CheckGiftCardBalanceOperationResponse()
                        };
                    }).getPromise();
                };
                CheckGiftCardBalanceOperationRequestHandler.prototype._getGiftCardById = function (tenderTypeId, correlationId) {
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(tenderTypeId);
                    var giftCard;
                    var asyncQueue = new Commerce.AsyncQueue();
                    asyncQueue.enqueue(function () {
                        var context = {
                            onAddToGiftCard: undefined,
                            onCashOutGiftCard: undefined,
                            onCheckGiftCardBalance: function (cardId) {
                                var asyncQueue = new Commerce.AsyncQueue();
                                return asyncQueue.enqueue(function () {
                                    return Commerce.PaymentHelper.getGiftCardByIdAsync(tenderType, cardId, correlationId);
                                }).enqueue(function (card) {
                                    if (Commerce.ObjectExtensions.isNullOrUndefined(card) || Commerce.StringExtensions.isNullOrWhitespace(card.Id)) {
                                        return Commerce.VoidAsyncResult.createRejected([
                                            new Commerce.Proxy.Entities.Error("string_1171", undefined, Commerce.ViewModelAdapter.getResourceString("string_1171"))
                                        ]);
                                    }
                                    giftCard = card;
                                    return Commerce.AsyncResult.createResolved(card);
                                }).run().map(function (result) { return result.data; });
                            },
                            onIssueGiftCard: undefined,
                            retailOperationId: Operations.RetailOperation.GiftCardBalance,
                            tenderTypeId: tenderTypeId
                        };
                        var activity = new Commerce.Activities.GetGiftCardDetailsActivity(context);
                        return activity.execute();
                    });
                    return asyncQueue.run()
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: giftCard
                        };
                    });
                };
                CheckGiftCardBalanceOperationRequestHandler.prototype._printGiftCardInquiryReceiptAsync = function (nonSalesTransactionId, correlationId) {
                    var printReceiptsAsyncQueue = new Commerce.AsyncQueue();
                    printReceiptsAsyncQueue.enqueue(function () {
                        var salesOrderManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ISalesOrderManagerName);
                        return salesOrderManager.getReceiptsForPrintAsync(nonSalesTransactionId, false, Commerce.Proxy.Entities.ReceiptType.GiftCardInquiry, false, Commerce.Session.instance.Shift.ShiftId, Commerce.Session.instance.Shift.TerminalId, false, null, Commerce.ApplicationContext.Instance.hardwareProfile.ProfileId);
                    }).enqueue(function (receipts) {
                        var receiptActivity = new Commerce.Activities.PrintReceiptActivity({ receipts: receipts });
                        return receiptActivity.execute().fail(function (errors) {
                            Commerce.RetailLogger.printGiftCardInquiryReceiptFailed(correlationId, Commerce.ErrorHelper.formatErrorMessage(errors[0]));
                        });
                    });
                    return printReceiptsAsyncQueue.run().recoverOnFailure(function (errors) {
                        Commerce.NotificationHandler.displayClientErrors(errors);
                        return Commerce.AsyncResult.createResolved();
                    });
                };
                return CheckGiftCardBalanceOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.CheckGiftCardBalanceOperationRequestHandler = CheckGiftCardBalanceOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetGiftCardByIdServiceRequestHandler = (function (_super) {
                __extends(GetGiftCardByIdServiceRequestHandler, _super);
                function GetGiftCardByIdServiceRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetGiftCardByIdServiceRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetGiftCardByIdServiceRequest;
                };
                GetGiftCardByIdServiceRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.StringExtensions.isNullOrWhitespace(request.giftCardId)) {
                        var errors = [new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_GIFT_CARD_NUMBER_EMPTY)];
                        return Commerce.VoidAsyncResult.createRejected(errors).getPromise();
                    }
                    var paymentManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.IPaymentManagerName);
                    return paymentManager.getGiftCardById(request.giftCardId)
                        .map(function (giftCard) {
                        return {
                            canceled: false,
                            data: new Payments.GetGiftCardByIdServiceResponse(giftCard)
                        };
                    }).getPromise();
                };
                return GetGiftCardByIdServiceRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetGiftCardByIdServiceRequestHandler = GetGiftCardByIdServiceRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetGiftCardClientRequestHandler = (function (_super) {
                __extends(GetGiftCardClientRequestHandler, _super);
                function GetGiftCardClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetGiftCardClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetGiftCardClientRequest;
                };
                GetGiftCardClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("Invalid parameters passed to GetGiftCardClientRequestHandler execute: request cannot be null or undefined");
                    }
                    var giftCardIdResponse;
                    var giftCardEntryTypeResponse;
                    Commerce.RetailLogger.posGetGiftCardRequestStarted(request.correlationId);
                    var isManualEntryAllowed = Commerce.ObjectExtensions.isNullOrUndefined(request.cardType) ? true : request.cardType.AllowManualInput;
                    var activity = new Commerce.Activities.GetGiftCardActivity({
                        defaultGiftCardId: request.defaultGiftCardId,
                        tenderTypeAllowManualEntry: isManualEntryAllowed
                    });
                    activity.responseHandler = function (response) {
                        var giftCardId = !Commerce.ObjectExtensions.isNullOrUndefined(response) ? response.giftCardId : null;
                        var giftCardEntryType = !Commerce.ObjectExtensions.isNullOrUndefined(response) ? response.giftCardEntryType : null;
                        if (!Commerce.StringExtensions.isNullOrWhitespace(giftCardId)) {
                            var triggerOptions = {
                                giftCardOperation: Commerce.Client.Entities.GiftCardOperation.Pay,
                                giftCardNumber: giftCardId,
                                giftCardEntryType: giftCardEntryType,
                                cart: Commerce.Session.instance.cart
                            };
                            return Commerce.Triggers.TriggerManager.instance.execute(Commerce.Triggers.CancelableTriggerType.PostGetGiftCardNumber, triggerOptions)
                                .done(function (result) {
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(result) && !result.canceled) {
                                    giftCardIdResponse = giftCardId;
                                    giftCardEntryTypeResponse = giftCardEntryType;
                                }
                            });
                        }
                        else {
                            if (Commerce.PaymentHelper.isPaymentTerminalAvailable()) {
                                return Commerce.Peripherals.instance.paymentTerminal.retrievePrivateTender(0.0, true, null)
                                    .done(function (cardInfo) {
                                    if (!Commerce.ObjectExtensions.isNullOrUndefined(cardInfo) &&
                                        !Commerce.StringExtensions.isNullOrWhitespace(cardInfo.CardNumber)) {
                                        giftCardIdResponse = cardInfo.CardNumber;
                                        giftCardEntryTypeResponse = Commerce.Client.Entities.GiftCardEntryType.PaymentTerminal;
                                    }
                                })
                                    .recoverOnFailure(function (errors) {
                                    Commerce.RetailLogger.posGetGiftCardRequestRetrievePrivateTenderFailed(request.correlationId, Commerce.ErrorHelper.serializeError(errors));
                                    return Commerce.VoidAsyncResult.createResolved();
                                });
                            }
                            else {
                                Commerce.RetailLogger.posGetGiftCardRequestPaymentTerminalNotConfigured(request.correlationId);
                                return Commerce.VoidAsyncResult.createResolved();
                            }
                        }
                    };
                    return activity.execute()
                        .map(function () {
                        Commerce.RetailLogger.posGetGiftCardRequestSucceeded(request.correlationId);
                        var response = {
                            canceled: Commerce.ObjectExtensions.isNullOrUndefined(giftCardIdResponse),
                            data: Commerce.ObjectExtensions.isNullOrUndefined(giftCardIdResponse)
                                ? null
                                : new Payments.GetGiftCardClientResponse({ giftCardId: giftCardIdResponse, giftCardEntryType: giftCardEntryTypeResponse })
                        };
                        return response;
                    }).getPromise();
                };
                return GetGiftCardClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetGiftCardClientRequestHandler = GetGiftCardClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var PaymentTerminalActivateGiftCardPeripheralRequest = Commerce.Peripherals.PaymentTerminalActivateGiftCardPeripheralRequest;
            var IssueGiftCardClientRequestHandler = (function (_super) {
                __extends(IssueGiftCardClientRequestHandler, _super);
                function IssueGiftCardClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                IssueGiftCardClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.IssueGiftCardClientRequest;
                };
                IssueGiftCardClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    var cartManager = Commerce.Model.Managers.Factory.getManager(Commerce.Model.Managers.ICartManagerName);
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request.tenderType) || Commerce.StringExtensions.isNullOrWhitespace(request.tenderType.ConnectorId)) {
                        return cartManager.issueGiftCardToCartAsync(request.giftCardId, request.amount, request.currency, request.lineDescription)
                            .map(function (result) {
                            return {
                                canceled: false,
                                data: new Payments.IssueGiftCardClientResponse(result)
                            };
                        }).getPromise();
                    }
                    else {
                        var asyncQueue_5 = new Commerce.AsyncQueue();
                        var giftCardTypeId = Commerce.Proxy.Entities.CardType.GiftCard;
                        var tenderInfo_2 = {
                            TenderId: null,
                            CardNumber: request.giftCardId,
                            CardTypeId: giftCardTypeId.toString()
                        };
                        var isApproved_2 = false;
                        var paymentInfo_2;
                        var scanResult_1 = null;
                        asyncQueue_5.enqueue(function () {
                            var paymentTerminal = Commerce.Peripherals.instance.paymentTerminal;
                            var cardPayment = Commerce.Peripherals.instance.cardPayment;
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(paymentTerminal) && paymentTerminal.isActive) {
                                var activateGiftCardRequest = new PaymentTerminalActivateGiftCardPeripheralRequest(request.correlationId, request.amount, tenderInfo_2, request.tenderType.ConnectorId, null);
                                return asyncQueue_5.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(activateGiftCardRequest)))
                                    .map(function (result) {
                                    paymentInfo_2 = result.data.paymentInfo;
                                    isApproved_2 = result.data.paymentInfo.IsApproved;
                                    return result.data.paymentInfo;
                                });
                            }
                            else if (!Commerce.ObjectExtensions.isNullOrUndefined(cardPayment)) {
                                return cardPayment.activateGiftCard(request.amount, tenderInfo_2, request.tenderType.ConnectorId, null)
                                    .done(function (result) {
                                    paymentInfo_2 = result;
                                    isApproved_2 = result.IsApproved;
                                });
                            }
                            else {
                                var errors = [];
                                errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.PAYMENT_TERMINAL_NOT_CONFIGURED));
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                        });
                        if (!Commerce.StringExtensions.isNullOrWhitespace(request.tenderType.GiftCardItem)) {
                            asyncQueue_5.enqueue(function () {
                                return cartManager.getScanResult(request.tenderType.GiftCardItem).done(function (result) {
                                    scanResult_1 = result;
                                });
                            });
                        }
                        asyncQueue_5.enqueue(function () {
                            if (isApproved_2) {
                                var thirdPartyGiftCardInfo = new Commerce.Proxy.Entities.ThirdPartyGiftCardInfoClass();
                                thirdPartyGiftCardInfo.Authorization = paymentInfo_2.PaymentSdkData;
                                thirdPartyGiftCardInfo.Amount = request.amount;
                                var description = Commerce.ViewModelAdapter.getResourceString("string_5152");
                                if (!Commerce.ObjectExtensions.isNullOrUndefined(scanResult_1)
                                    && !Commerce.ObjectExtensions.isNullOrUndefined(scanResult_1.Product)
                                    && !Commerce.StringExtensions.isNullOrWhitespace(scanResult_1.Product.Description)) {
                                    description = scanResult_1.Product.Description;
                                }
                                else if (!Commerce.StringExtensions.isNullOrWhitespace(request.tenderType.Name)) {
                                    description = request.tenderType.Name;
                                }
                                var cartLine = {
                                    Price: request.amount,
                                    ItemId: request.tenderType.GiftCardItem,
                                    IsGiftCardLine: true,
                                    GiftCardId: paymentInfo_2.CardNumberMasked,
                                    GiftCardBalance: request.amount,
                                    GiftCardOperationValue: Commerce.Proxy.Entities.GiftCardOperationType.Issue,
                                    Description: description,
                                    Comment: request.tenderType.GiftCardItem,
                                    Quantity: 1.0,
                                    ThirdPartyGiftCardInfo: thirdPartyGiftCardInfo
                                };
                                return cartManager.addCartLinesToCartAsync([cartLine])
                                    .done(function () {
                                    Commerce.VoidAsyncResult.createResolved();
                                }).fail(function (errors) {
                                    Commerce.VoidAsyncResult.createRejected(errors);
                                });
                            }
                            else {
                                var errors = new Array();
                                errors.push(new Commerce.Proxy.Entities.Error(Commerce.ErrorTypeEnum.GIFT_CARD_NOT_APPROVED));
                                return Commerce.VoidAsyncResult.createRejected(errors);
                            }
                        }).enqueue(function () {
                            _this._updateThirdPartyGiftCardInfoInCartLines(paymentInfo_2, request.giftCardId);
                            return Commerce.VoidAsyncResult.createResolved();
                        });
                        return asyncQueue_5.run().map(function (result) {
                            return {
                                canceled: result.canceled,
                                data: result.canceled ? null : new Payments.IssueGiftCardClientResponse(Commerce.Session.instance.cart)
                            };
                        }).getPromise();
                    }
                };
                IssueGiftCardClientRequestHandler.prototype._updateThirdPartyGiftCardInfoInCartLines = function (paymentInfo, giftCardId) {
                    Commerce.Session.instance.cart.CartLines.forEach(function (cartLine, index, cartLines) {
                        if (cartLine.IsGiftCardLine && Commerce.StringExtensions.compare(cartLine.GiftCardId, giftCardId, true) === 0) {
                            var thirdPartyGiftCardInfo = new Commerce.Proxy.Entities.ThirdPartyGiftCardInfoClass();
                            thirdPartyGiftCardInfo.Amount = paymentInfo.ApprovedAmount;
                            thirdPartyGiftCardInfo.Authorization = paymentInfo.PaymentSdkData;
                            cartLine.ThirdPartyGiftCardInfo = thirdPartyGiftCardInfo;
                            cartLines[index] = cartLine;
                        }
                    });
                };
                return IssueGiftCardClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.IssueGiftCardClientRequestHandler = IssueGiftCardClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Operations;
    (function (Operations) {
        var Handlers;
        (function (Handlers) {
            "use strict";
            var IssueGiftCardOperationRequestHandler = (function (_super) {
                __extends(IssueGiftCardOperationRequestHandler, _super);
                function IssueGiftCardOperationRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                IssueGiftCardOperationRequestHandler.prototype.supportedRequestType = function () {
                    return Commerce.IssueGiftCardOperationRequest;
                };
                IssueGiftCardOperationRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    var tenderType = Commerce.ApplicationContext.Instance.tenderTypesMap.getTenderByTypeId(request.tenderTypeId);
                    var onIssueGiftCardCanceled = false;
                    var context = {
                        onAddToGiftCard: undefined,
                        onCashOutGiftCard: undefined,
                        onCheckGiftCardBalance: undefined,
                        onIssueGiftCard: function (cardId, amount, currency, description) {
                            if (!_this.isValidAmount(amount)) {
                                return Commerce.VoidAsyncResult.createRejected([
                                    new Commerce.Proxy.Entities.Error("string_5115", undefined, Commerce.ViewModelAdapter.getResourceString("string_5115"))
                                ]);
                            }
                            var connectorId = Commerce.StringExtensions.EMPTY;
                            if (!Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                                connectorId = tenderType.ConnectorId;
                            }
                            if (Commerce.StringExtensions.isNullOrWhitespace(connectorId) && Commerce.StringExtensions.isNullOrWhitespace(cardId)) {
                                return Commerce.AsyncResult.createRejected([
                                    new Commerce.Proxy.Entities.Error("string_1171", undefined, Commerce.ViewModelAdapter.getResourceString("string_1171"))
                                ]);
                            }
                            var issueQueue = new Commerce.AsyncQueue();
                            if (!Commerce.Session.instance.isCartInProgress) {
                                issueQueue.enqueue(function () {
                                    var createCartRequest = new Commerce.CreateEmptyCartServiceRequest(request.correlationId);
                                    return issueQueue.cancelOn(Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(createCartRequest)));
                                });
                            }
                            return issueQueue.enqueue(function () {
                                return Commerce.ActivityHelper.getStartOfTransactionSalesRepresentativeAsyncQueue(Commerce.Session.instance.cart).run();
                            }).enqueue(function () {
                                Commerce.RetailLogger.operationIssueGiftCard(cardId, amount, currency, description, connectorId, request.correlationId);
                                var issueGiftCardRequest = new Commerce.Payments.IssueGiftCardClientRequest(request.correlationId, tenderType, cardId, amount, currency, description);
                                return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(issueGiftCardRequest));
                            }).run().map(function (result) {
                                onIssueGiftCardCanceled = result.canceled;
                            });
                        },
                        retailOperationId: Operations.RetailOperation.IssueGiftCertificate,
                        tenderTypeId: request.tenderTypeId
                    };
                    var activity = new Commerce.Activities.GetGiftCardDetailsActivity(context);
                    return activity.execute().map(function () {
                        return { canceled: onIssueGiftCardCanceled, data: onIssueGiftCardCanceled ? null : new Commerce.IssueGiftCardOperationResponse() };
                    }).getPromise();
                };
                IssueGiftCardOperationRequestHandler.prototype.isValidAmount = function (amount) {
                    var maxDigits = 11;
                    return (amount.toString().length <= maxDigits) && !Commerce.NumberExtensions.isNullNaNOrZero(amount);
                };
                return IssueGiftCardOperationRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.IssueGiftCardOperationRequestHandler = IssueGiftCardOperationRequestHandler;
        })(Handlers = Operations.Handlers || (Operations.Handlers = {}));
    })(Operations = Commerce.Operations || (Commerce.Operations = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetSignatureClientRequestHandler = (function (_super) {
                __extends(GetSignatureClientRequestHandler, _super);
                function GetSignatureClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetSignatureClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetSignatureClientRequest;
                };
                GetSignatureClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the GetSignatureClientRequestHandler received a null or undefined request.");
                    }
                    if (Commerce.Peripherals.HardwareStation.HardwareStationContext.instance.isActive() &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Peripherals.instance) &&
                        !Commerce.ObjectExtensions.isNullOrUndefined(Commerce.Peripherals.instance.signaturePad)) {
                        Commerce.RetailLogger.posGetSignatureRequestIsRetrievingFromDevice(request.correlationId);
                        return this._getSignatureFromDevice(request.correlationId).getPromise();
                    }
                    else {
                        Commerce.RetailLogger.posGetSignatureRequestIsRetrievingFromPOS(request.correlationId);
                        return this._getSignatureFromPOS(request.correlationId).getPromise();
                    }
                };
                GetSignatureClientRequestHandler.prototype._getSignatureFromPOS = function (correlationId) {
                    var getSignatureFromPOSRequest = new Payments.GetSignatureFromPOSClientRequest(correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getSignatureFromPOSRequest))
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.GetSignatureClientResponse(result.data.result)
                        };
                    });
                };
                GetSignatureClientRequestHandler.prototype._getSignatureFromDevice = function (correlationId) {
                    var getSignatureFromDeviceRequest = new Payments.GetSignatureFromDeviceClientRequest(correlationId);
                    return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(getSignatureFromDeviceRequest))
                        .map(function (result) {
                        return {
                            canceled: result.canceled,
                            data: result.canceled ? null : new Payments.GetSignatureClientResponse(result.data.result)
                        };
                    });
                };
                return GetSignatureClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetSignatureClientRequestHandler = GetSignatureClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetSignatureFromDeviceClientRequestHandler = (function (_super) {
                __extends(GetSignatureFromDeviceClientRequestHandler, _super);
                function GetSignatureFromDeviceClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetSignatureFromDeviceClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetSignatureFromDeviceClientRequest;
                };
                GetSignatureFromDeviceClientRequestHandler.prototype.executeAsync = function (request) {
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the GetSignatureFromDeviceClientRequestHandler received a null or undefined request.");
                    }
                    return this._getSignatureFromDevice(request.correlationId).getPromise();
                };
                GetSignatureFromDeviceClientRequestHandler.prototype._getSignatureFromDevice = function (correlationId) {
                    var _this = this;
                    var getSignatureFromDeviceQueue = new Commerce.AsyncQueue();
                    getSignatureFromDeviceQueue.enqueue(function () {
                        return _this._callGetSignatureFromDeviceActivity(correlationId)
                            .recoverOnFailure(function (errors) {
                            return _this._callGetSignatureFromDeviceActivity(correlationId);
                        });
                    }).enqueue(function (response) {
                        if (response.canceled) {
                            return Commerce.AsyncResult.createResolved({ canceled: false, data: Commerce.StringExtensions.EMPTY });
                        }
                        else {
                            var validateSignatureRequest = new Payments.ValidateSignatureClientRequest(correlationId, true, response.data);
                            return Commerce.AsyncResult.fromPromise(Commerce.Runtime.executeAsync(validateSignatureRequest))
                                .map(function (result) {
                                return {
                                    canceled: result.canceled,
                                    data: result.canceled ? null : (result.data.result ? response.data : Commerce.StringExtensions.EMPTY)
                                };
                            });
                        }
                    }).enqueue(function (result) {
                        if (result.canceled) {
                            return getSignatureFromDeviceQueue.cancelOn(_this._getSignatureFromDevice(correlationId))
                                .map(function (result) {
                                return result.data;
                            });
                        }
                        else {
                            return Commerce.AsyncResult.createResolved(new Payments.GetSignatureFromDeviceClientResponse(result.data));
                        }
                    });
                    return getSignatureFromDeviceQueue.run();
                };
                GetSignatureFromDeviceClientRequestHandler.prototype._callGetSignatureFromDeviceActivity = function (correlationId) {
                    var getSignatureFromDeviceActivityOptions = {
                        correlationId: correlationId
                    };
                    var getSignatureFromDeviceActivity = new Commerce.Activities.GetSignatureFromDeviceActivity(getSignatureFromDeviceActivityOptions);
                    return getSignatureFromDeviceActivity.execute()
                        .map(function () {
                        var wasActivityCancelled = getSignatureFromDeviceActivity.response.status !== Commerce.Activities.SignatureActivityResult.OK;
                        return {
                            canceled: wasActivityCancelled,
                            data: wasActivityCancelled ? null : getSignatureFromDeviceActivity.response.signatureData
                        };
                    });
                };
                return GetSignatureFromDeviceClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetSignatureFromDeviceClientRequestHandler = GetSignatureFromDeviceClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var GetSignatureFromPOSClientRequestHandler = (function (_super) {
                __extends(GetSignatureFromPOSClientRequestHandler, _super);
                function GetSignatureFromPOSClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                GetSignatureFromPOSClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.GetSignatureFromPOSClientRequest;
                };
                GetSignatureFromPOSClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the GetSignatureFromPOSClientRequestHandler received a null or undefined request.");
                    }
                    return this._getSignatureFromPOS(request.correlationId)
                        .recoverOnFailure(function (errors) {
                        return _this._getSignatureFromPOS(request.correlationId);
                    }).getPromise();
                };
                GetSignatureFromPOSClientRequestHandler.prototype._getSignatureFromPOS = function (correlationId) {
                    var getSignatureFromPOSActivityOptions = {
                        correlationId: correlationId
                    };
                    var getSignatureFromPOSActivity = new Commerce.Activities.GetSignatureFromPOSActivity(getSignatureFromPOSActivityOptions);
                    return getSignatureFromPOSActivity.execute()
                        .map(function () {
                        var wasActivityCancelled = getSignatureFromPOSActivity.response.status !== Commerce.Activities.SignatureActivityResult.OK;
                        return {
                            canceled: wasActivityCancelled,
                            data: wasActivityCancelled ? null : new Payments.GetSignatureFromPOSClientResponse(getSignatureFromPOSActivity.response.signature)
                        };
                    });
                };
                return GetSignatureFromPOSClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.GetSignatureFromPOSClientRequestHandler = GetSignatureFromPOSClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        var Handlers;
        (function (Handlers) {
            var ValidateSignatureClientRequestHandler = (function (_super) {
                __extends(ValidateSignatureClientRequestHandler, _super);
                function ValidateSignatureClientRequestHandler() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ValidateSignatureClientRequestHandler.prototype.supportedRequestType = function () {
                    return Payments.ValidateSignatureClientRequest;
                };
                ValidateSignatureClientRequestHandler.prototype.executeAsync = function (request) {
                    var _this = this;
                    if (Commerce.ObjectExtensions.isNullOrUndefined(request)) {
                        throw new Error("The executeAsync method for the ValidateSignatureClientRequestHandler received a null or undefined request.");
                    }
                    return this._validateSignatureInPOS(request.correlationId, request.allowRecapture, request.signatureData)
                        .recoverOnFailure(function (errors) {
                        return _this._validateSignatureInPOS(request.correlationId, request.allowRecapture, request.signatureData);
                    }).getPromise();
                };
                ValidateSignatureClientRequestHandler.prototype._validateSignatureInPOS = function (correlationId, allowRecapture, signatureData) {
                    var validateSignatureActivityOptions = {
                        allowRecapture: allowRecapture,
                        correlationId: correlationId,
                        signature: signatureData,
                    };
                    var validateSignatureActivity = new Commerce.Activities.ValidateSignatureInPOSActivity(validateSignatureActivityOptions);
                    return validateSignatureActivity.execute()
                        .map(function () {
                        var triggerRecapture = validateSignatureActivity.response.status === Commerce.Activities.SignatureActivityResult.Recapture;
                        var wasValidationSuccessful = validateSignatureActivity.response.status === Commerce.Activities.SignatureActivityResult.OK;
                        return {
                            canceled: triggerRecapture,
                            data: triggerRecapture ? null : new Payments.ValidateSignatureClientResponse(wasValidationSuccessful)
                        };
                    });
                };
                return ValidateSignatureClientRequestHandler;
            }(Commerce.RequestHandler));
            Handlers.ValidateSignatureClientRequestHandler = ValidateSignatureClientRequestHandler;
        })(Handlers = Payments.Handlers || (Payments.Handlers = {}));
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var AddBalanceToGiftCardClientResponse = (function (_super) {
            __extends(AddBalanceToGiftCardClientResponse, _super);
            function AddBalanceToGiftCardClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AddBalanceToGiftCardClientResponse;
        }(Commerce.ClientResponse));
        Payments.AddBalanceToGiftCardClientResponse = AddBalanceToGiftCardClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var AddBalanceToGiftCardClientRequest = (function (_super) {
            __extends(AddBalanceToGiftCardClientRequest, _super);
            function AddBalanceToGiftCardClientRequest(correlationId, tenderType, giftCardId, amount, currency, lineDescription) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for AddBalanceToGiftCardClientRequest: correlationId cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(giftCardId)) {
                    throw new Error("Invalid option passed to constructor for AddBalanceToGiftCardClientRequest: giftCardId cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(amount)) {
                    throw new Error("Invalid option passed to constructor for AddBalanceToGiftCardClientRequest: amount cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(currency)) {
                    throw new Error("Invalid option passed to constructor for AddBalanceToGiftCardClientRequest: currency cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(lineDescription)) {
                    throw new Error("Invalid option passed to constructor for AddBalanceToGiftCardClientRequest: lineDescription cannot be invalid.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.tenderType = tenderType;
                _this.giftCardId = giftCardId;
                _this.amount = amount;
                _this.currency = currency;
                _this.lineDescription = lineDescription;
                return _this;
            }
            return AddBalanceToGiftCardClientRequest;
        }(Commerce.ClientRequest));
        Payments.AddBalanceToGiftCardClientRequest = AddBalanceToGiftCardClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var CashOutGiftCardClientResponse = (function (_super) {
            __extends(CashOutGiftCardClientResponse, _super);
            function CashOutGiftCardClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CashOutGiftCardClientResponse;
        }(Commerce.ClientResponse));
        Payments.CashOutGiftCardClientResponse = CashOutGiftCardClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var CashOutGiftCardClientRequest = (function (_super) {
            __extends(CashOutGiftCardClientRequest, _super);
            function CashOutGiftCardClientRequest(correlationId, amount, currency, giftCardId, lineDescription, tenderType, extensionTransactionProperties) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardClientRequest: correlationId cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(amount)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardClientRequest: amount cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(currency)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardClientRequest: currency cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(giftCardId)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardClientRequest: giftCardId cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(lineDescription)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardClientRequest: lineDescription cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardClientRequest: tenderType cannot be invalid.");
                }
                else if (tenderType.OperationId !== Commerce.Proxy.Entities.RetailOperation.PayGiftCertificate) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardClientRequest: tenderType operation needs to of type PayByGift.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.amount = amount;
                _this.currency = currency;
                _this.giftCardId = giftCardId;
                _this.lineDescription = lineDescription;
                _this.tenderType = tenderType;
                _this.extensionTransactionProperties = extensionTransactionProperties;
                return _this;
            }
            return CashOutGiftCardClientRequest;
        }(Commerce.ClientRequest));
        Payments.CashOutGiftCardClientRequest = CashOutGiftCardClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var CashOutGiftCardOperationResponse = (function (_super) {
            __extends(CashOutGiftCardOperationResponse, _super);
            function CashOutGiftCardOperationResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CashOutGiftCardOperationResponse;
        }(Commerce.Response));
        Payments.CashOutGiftCardOperationResponse = CashOutGiftCardOperationResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var CashOutGiftCardOperationRequest = (function (_super) {
            __extends(CashOutGiftCardOperationRequest, _super);
            function CashOutGiftCardOperationRequest(correlationId, tenderType) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardOperationRequest: correlationId cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(tenderType)) {
                    throw new Error("Invalid option passed to constructor for CashOutGiftCardOperationRequest: tenderType cannot be invalid.");
                }
                _this = _super.call(this, Commerce.Proxy.Entities.RetailOperation.CashOutGiftCard, correlationId) || this;
                _this.tenderType = tenderType;
                return _this;
            }
            return CashOutGiftCardOperationRequest;
        }(Commerce.OperationRequest));
        Payments.CashOutGiftCardOperationRequest = CashOutGiftCardOperationRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetGiftCardClientRequest = (function (_super) {
            __extends(GetGiftCardClientRequest, _super);
            function GetGiftCardClientRequest(correlationId, defaultGiftCardId, cardType) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(defaultGiftCardId)) {
                    throw new Error("Invalid parameters passed to the GetGiftCardClientRequest constructor: defaultGiftCardId cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid parameters passed to the GetGiftCardClientRequest constructor: correlationId cannot be null or undefined.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.cardType = cardType;
                _this.defaultGiftCardId = defaultGiftCardId;
                return _this;
            }
            return GetGiftCardClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetGiftCardClientRequest = GetGiftCardClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetGiftCardClientResponse = (function (_super) {
            __extends(GetGiftCardClientResponse, _super);
            function GetGiftCardClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetGiftCardClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetGiftCardClientResponse = GetGiftCardClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var IssueGiftCardClientResponse = (function (_super) {
            __extends(IssueGiftCardClientResponse, _super);
            function IssueGiftCardClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IssueGiftCardClientResponse;
        }(Commerce.ClientResponse));
        Payments.IssueGiftCardClientResponse = IssueGiftCardClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var IssueGiftCardClientRequest = (function (_super) {
            __extends(IssueGiftCardClientRequest, _super);
            function IssueGiftCardClientRequest(correlationId, tenderType, giftCardId, amount, currency, lineDescription) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for IssueGiftCardClientRequest: correlationId cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(giftCardId)) {
                    throw new Error("Invalid option passed to constructor for IssueGiftCardClientRequest: giftCardId cannot be invalid.");
                }
                else if (Commerce.ObjectExtensions.isNullOrUndefined(amount)) {
                    throw new Error("Invalid option passed to constructor for IssueGiftCardClientRequest: amount cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(currency)) {
                    throw new Error("Invalid option passed to constructor for IssueGiftCardClientRequest: currency cannot be invalid.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(lineDescription)) {
                    throw new Error("Invalid option passed to constructor for IssueGiftCardClientRequest: lineDescription cannot be invalid.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.tenderType = tenderType;
                _this.giftCardId = giftCardId;
                _this.amount = amount;
                _this.currency = currency;
                _this.lineDescription = lineDescription;
                return _this;
            }
            return IssueGiftCardClientRequest;
        }(Commerce.ClientRequest));
        Payments.IssueGiftCardClientRequest = IssueGiftCardClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetSignatureClientRequest = (function (_super) {
            __extends(GetSignatureClientRequest, _super);
            function GetSignatureClientRequest(correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for GetSignatureClientRequest: correlationId cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                return _this;
            }
            return GetSignatureClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetSignatureClientRequest = GetSignatureClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetSignatureClientResponse = (function (_super) {
            __extends(GetSignatureClientResponse, _super);
            function GetSignatureClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSignatureClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetSignatureClientResponse = GetSignatureClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetSignatureFromDeviceClientRequest = (function (_super) {
            __extends(GetSignatureFromDeviceClientRequest, _super);
            function GetSignatureFromDeviceClientRequest(correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for GetSignatureFromDeviceClientRequest: correlationId cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                return _this;
            }
            return GetSignatureFromDeviceClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetSignatureFromDeviceClientRequest = GetSignatureFromDeviceClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetSignatureFromDeviceClientResponse = (function (_super) {
            __extends(GetSignatureFromDeviceClientResponse, _super);
            function GetSignatureFromDeviceClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSignatureFromDeviceClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetSignatureFromDeviceClientResponse = GetSignatureFromDeviceClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetSignatureFromPOSClientRequest = (function (_super) {
            __extends(GetSignatureFromPOSClientRequest, _super);
            function GetSignatureFromPOSClientRequest(correlationId) {
                var _this = this;
                if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for GetSignatureFromPOSClientRequest: correlationId cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                return _this;
            }
            return GetSignatureFromPOSClientRequest;
        }(Commerce.ClientRequest));
        Payments.GetSignatureFromPOSClientRequest = GetSignatureFromPOSClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var GetSignatureFromPOSClientResponse = (function (_super) {
            __extends(GetSignatureFromPOSClientResponse, _super);
            function GetSignatureFromPOSClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GetSignatureFromPOSClientResponse;
        }(Commerce.ClientResponse));
        Payments.GetSignatureFromPOSClientResponse = GetSignatureFromPOSClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ValidateSignatureClientRequest = (function (_super) {
            __extends(ValidateSignatureClientRequest, _super);
            function ValidateSignatureClientRequest(correlationId, allowRecapture, signatureData) {
                var _this = this;
                if (Commerce.ObjectExtensions.isNullOrUndefined(allowRecapture)) {
                    throw new Error("Invalid option passed to constructor for ValidateSignatureClientRequest: allowRecapture cannot be null or undefined.");
                }
                else if (Commerce.StringExtensions.isNullOrWhitespace(correlationId)) {
                    throw new Error("Invalid option passed to constructor for ValidateSignatureClientRequest: correlationId cannot be null or empty string.");
                }
                _this = _super.call(this, correlationId) || this;
                _this.allowRecapture = allowRecapture;
                _this.signatureData = signatureData;
                return _this;
            }
            return ValidateSignatureClientRequest;
        }(Commerce.ClientRequest));
        Payments.ValidateSignatureClientRequest = ValidateSignatureClientRequest;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
var Commerce;
(function (Commerce) {
    var Payments;
    (function (Payments) {
        "use strict";
        var ValidateSignatureClientResponse = (function (_super) {
            __extends(ValidateSignatureClientResponse, _super);
            function ValidateSignatureClientResponse() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ValidateSignatureClientResponse;
        }(Commerce.ClientResponse));
        Payments.ValidateSignatureClientResponse = ValidateSignatureClientResponse;
    })(Payments = Commerce.Payments || (Commerce.Payments = {}));
})(Commerce || (Commerce = {}));
//# sourceMappingURL=Commerce.Core.js.map
// SIG // Begin signature block
// SIG // MIIkeAYJKoZIhvcNAQcCoIIkaTCCJGUCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // ES5dDLY8r6SOUnuQMjNX0qRSG6I9zen3nGVHKPNwLlmg
// SIG // gg2BMIIF/zCCA+egAwIBAgITMwAAAQNeJRyZH6MeuAAA
// SIG // AAABAzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTE4MDcxMjIwMDg0OFoX
// SIG // DTE5MDcyNjIwMDg0OFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // 0ZR2NuaGqzb+aflGfIuIUMuQcH+wVakkHX455wWfD6x7
// SIG // l7LOcwr71JskXBa1Od0bfjNsEfw7JvOYql1Ta6rD7BO4
// SIG // 0u/PV3/MZcuvTS4ysVYrTjQHif5pIb0+RPveEp2Fv3x2
// SIG // hn1ysXabYeaKZExGzrbVOox3k3dnIZy2WgZeR4b1PNEJ
// SIG // yg09zbLpoVB40YSI4gE8IvyvlgjMXZnA7eulWpiS9chA
// SIG // Tmpzr97jdHrTX0aXvOJnKHeZrMEOMRaPAA8B/kteVA/K
// SIG // xGU/CuOjRtv2LAM6Gb5oBRac5n80v6eHjWU5Jslj1O/F
// SIG // 3b0l/v0o9DSGeawq1V8wkTvkFGrrscoEIwIDAQABo4IB
// SIG // fjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFEe+wMvhpj/9ZdY48gNdt693
// SIG // 90D/MFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNy
// SIG // b3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQG
// SIG // A1UEBRMNMjMwMDEyKzQzNzk2NTAfBgNVHSMEGDAWgBRI
// SIG // bmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmg
// SIG // R6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // b3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcw
// SIG // AoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9w
// SIG // cy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggIBAJ/1yVMNPw0m7KJE2A3Rn2OWBks/HlzFM6Ok
// SIG // w2yvH8ABuutl7J4zEA+nrFvUvZBhF+cx58MmtKz1J9NI
// SIG // k4aI/hI1kWQi0WstO6gsFZQp0jeW5jX/DM7IBhYWniSx
// SIG // 4jn5bg542AwbtilgJ3Y0JJvduZd1ywE7rYISFiKAiRWE
// SIG // u5hQILAXJoZJr859RRVDNJbPgVwYLNST8mer4nPIPaPN
// SIG // /DIeYBzpsBsw+yy7By6WhJNFKFRczZb9oNuB2LYwykOx
// SIG // 80jAskYcXV52Klif1O7y9PpITLVhi7CMQemquJ2Q9P9q
// SIG // Qg+5PukO7JT8jYC7eOMjp3hbsm0f+VnBfbbROcl54IMc
// SIG // YAraPbDR7Ta/RQfpGzZu5T07BQOn1KclEo/mdqMTs0Va
// SIG // QzGC2tiErrmwH3X19h19URE3J+i1NYRx91eqrvqJccmY
// SIG // 0p5aZHa+jMN9FWqR8RT08tk1Mbjbcvq0dciIm2q/mEXH
// SIG // ZrLX/86SkHXk6+aG0sgb2yfAW5VvSW9YXWkq3lNL+OjK
// SIG // e/ZsFfkDGQ8RhapPmr+qV91gxvVxIPRRqJrK6dHrNEc9
// SIG // dfoi7FU/ahk5axDpWj+O9CN4MLLypjjLNY2qmFkkQLg6
// SIG // Z6QHX6D+2DtJE/sM4e0LbYNQzvB/PuDZCOiMIUpBwt7r
// SIG // jlvuA8Mdbm7mVDVmZ3J8GupS9iLEcj+uMIIHejCCBWKg
// SIG // AwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCB
// SIG // iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
// SIG // OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQD
// SIG // Ex9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDEx
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // q/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4Bjga
// SIG // BEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSH
// SIG // fpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpg
// SIG // GgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpc
// SIG // oRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnn
// SIG // Db6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD
// SIG // 2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLT
// SIG // swM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOE
// SIG // y/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2
// SIG // z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
// SIG // A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
// SIG // 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uD
// SIG // jexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyim
// SIG // p31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8Hh
// SIG // hUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX
// SIG // 3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAG
// SIG // CSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXT
// SIG // gqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMA
// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
// SIG // AwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx
// SIG // 0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3Js
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N
// SIG // aWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4G
// SIG // CCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNS
// SIG // b29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
// SIG // HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
// SIG // BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUF
// SIG // BwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5
// SIG // AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOS
// SIG // mUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np
// SIG // 22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r
// SIG // 4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION
// SIG // 9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWlu
// SIG // WpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiX
// SIG // mE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ
// SIG // 2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNA
// SIG // BQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPD
// SIG // XVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yH
// SIG // PgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
// SIG // XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
// SIG // oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5
// SIG // GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E9
// SIG // 0Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZO
// SIG // SEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCFk8w
// SIG // ghZLAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAm
// SIG // BgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENB
// SIG // IDIwMTECEzMAAAEDXiUcmR+jHrgAAAAAAQMwDQYJYIZI
// SIG // AWUDBAIBBQCggdAwGQYJKoZIhvcNAQkDMQwGCisGAQQB
// SIG // gjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcC
// SIG // ARUwLwYJKoZIhvcNAQkEMSIEIMQ76bts0JulkyXQps0j
// SIG // loOUI3bh9qw54LCm/dbsUKRhMGQGCisGAQQBgjcCAQwx
// SIG // VjBUoDaANABnAGwAbwBiAGEAbABpAHoAZQAuAGMAdQBs
// SIG // AHQAdQByAGUALgBsAHYALQBMAFYALgBqAHOhGoAYaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tMA0GCSqGSIb3DQEB
// SIG // AQUABIIBALi4aqUjQaquJPoTZng+RCrETbLMddisFPQx
// SIG // cOCQ0KdjvxTwKWwMxA5Rj0Ps1C8qaxM2T09b6OL3wz1O
// SIG // Rn+1LrzvOlisoEOlItTTm05mjku3i/pdHevLyERJaDN5
// SIG // La6swhoGYd4PFxJhMgrfl9Fad1WK6ZdAX/fMUQ5RaD+o
// SIG // 1eMzUvF3AayP+3CT0P1aEfftXOjLgmqxkzSfTuAMQ+7g
// SIG // eb5IUgOkyeUnXtthIhPFcC7WPCo5K1vOrSwyNUMcJ/MO
// SIG // 8sBONgc31ImOMpg+u5YDfUDA+/OUx4JwB8jQAb0nRkdq
// SIG // xsyqiVSKUj3McN3EaMORjnQPkHAZc0e0pG0/crpErLeh
// SIG // ghO3MIITswYKKwYBBAGCNwMDATGCE6MwghOfBgkqhkiG
// SIG // 9w0BBwKgghOQMIITjAIBAzEPMA0GCWCGSAFlAwQCAQUA
// SIG // MIIBWAYLKoZIhvcNAQkQAQSgggFHBIIBQzCCAT8CAQEG
// SIG // CisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg2aBY
// SIG // qxMBP1trX/WdsqhSMstM12rd2dtrZEIwnAKnFHkCBlx2
// SIG // 7wGAPBgTMjAxOTAzMTIwOTU2MDMuMzE4WjAHAgEBgAIB
// SIG // 9KCB1KSB0TCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcG
// SIG // A1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRv
// SIG // IFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkY1
// SIG // MjgtMzc3Ny04QTc2MSUwIwYDVQQDExxNaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBTZXJ2aWNloIIPHzCCBPUwggPdoAMC
// SIG // AQICEzMAAADRmM/kPJklZIQAAAAAANEwDQYJKoZIhvcN
// SIG // AQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // HhcNMTgwODIzMjAyNjMzWhcNMTkxMTIzMjAyNjMzWjCB
// SIG // zjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWlj
// SIG // cm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAk
// SIG // BgNVBAsTHVRoYWxlcyBUU1MgRVNOOkY1MjgtMzc3Ny04
// SIG // QTc2MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
// SIG // MIIBCgKCAQEA7wDOxEyGqfaSKQqEPfMK7QKtk1H+sj/k
// SIG // yTnn6kQtbiyktUBLYnmL2kiYX38v6EJYHX5UAGvU7pns
// SIG // kuxwvI1Af2H7jbm4PD+P02K9lx1iFAdLlpdQauWD6EEj
// SIG // TipN1VdUWIvPtCc504JBZZPfjG7CIMVJNTek0PfMFNTO
// SIG // C0cbYMe5n0pgIEFAjmH4OmlJOsiXaGs2iLaHTjy3rz6T
// SIG // MLNlvG1wMHkl2+c+SWYlbR6JoFQ0sNAEn6qKxGgR7kpd
// SIG // dQlu9wVKHjRLU8cXmEpJIxrZ3Owr7tTs31JcyVrlZg4a
// SIG // yFlIP04qI3NHbiLqA1jEfHaquR7FbqPYz84KPzNykyrH
// SIG // /wIDAQABo4IBGzCCARcwHQYDVR0OBBYEFIP7EkVwNv9n
// SIG // ibpQi93Jxj1U82oMMB8GA1UdIwQYMBaAFNVjOlyKMZDz
// SIG // Q3t8RhvFM2hahW1VMFYGA1UdHwRPME0wS6BJoEeGRWh0
// SIG // dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3By
// SIG // b2R1Y3RzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNy
// SIG // bDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljVGltU3RhUENBXzIwMTAtMDctMDEuY3J0MAwGA1Ud
// SIG // EwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJ
// SIG // KoZIhvcNAQELBQADggEBADrgMufapAT0iR6YGdEleg09
// SIG // nyLZRqYv1LLOfaQRHBW4FniWuU2Ndx3MYQXAqmfG3Dic
// SIG // dvB3JpTEN/bo27R9wYDT7xgmqKfFblG7yvS4ttuf/kMI
// SIG // SGegL94YS1CSBBULammK6Vr5STlFJOr8D3TGdPviOciA
// SIG // ZC4L22m3MubLcsdgEY5towI/EVpWR5r0EvzunGeTykYU
// SIG // X/Tr00UhkZvk6MwImCSrLJwcRv4qT4f8lPR+6rJ2SfwJ
// SIG // eTyWtX8x6GVr6MRwYtbYNIF0z0SmrzhmfjLDNT2zZGLr
// SIG // cp940BF++Qs1NaINHA+GiBXs7o7pjXvX7Vs6jhGCBYV1
// SIG // 8Bf8laWayigwggZxMIIEWaADAgECAgphCYEqAAAAAAAC
// SIG // MA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzET
// SIG // MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0
// SIG // aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3MDEy
// SIG // MTM2NTVaFw0yNTA3MDEyMTQ2NTVaMHwxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1l
// SIG // LVN0YW1wIFBDQSAyMDEwMIIBIjANBgkqhkiG9w0BAQEF
// SIG // AAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwTl/X6f2mU
// SIG // a3RUENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AVUycE
// SIG // MR9BGxqVHc4JE458YTBZsTBED/FgiIRUQwzXTbg4CLNC
// SIG // 3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJYR4YyhB50
// SIG // YWeRX4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxGwScd
// SIG // JGcSchohiq9LZIlQYrFd/XcfPfBXday9ikJNQFHRD5wG
// SIG // Pmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaRtogI
// SIG // Neh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJRF1e
// SIG // FpwBBU8iTQIDAQABo4IB5jCCAeIwEAYJKwYBBAGCNxUB
// SIG // BAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8RhvFM2ha
// SIG // hW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsG
// SIG // A1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1Ud
// SIG // IwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1Ud
// SIG // HwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0
// SIG // LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1
// SIG // dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEww
// SIG // SgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3J0MIGgBgNVHSABAf8EgZUwgZIwgY8GCSsG
// SIG // AQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9kZWZh
// SIG // dWx0Lmh0bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBh
// SIG // AGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQAZQBtAGUA
// SIG // bgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aIUQ3i
// SIG // xuCYP4FxAz2do6Ehb7Prpsz1Mb7PBeKp/vpXbRkws8LF
// SIG // Zslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7uVOMzPRg
// SIG // Eop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/Gf/I3
// SIG // fVo/HPKZeUqRUgCvOA8X9S95gWXZqbVr5MfO9sp6AG9L
// SIG // MEQkIjzP7QOllo9ZKby2/QThcJ8ySif9Va8v/rbljjO7
// SIG // Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFjnXsh
// SIG // bcOco6I8+n99lmqQeKZt0uGc+R38ONiU9MalCpaGpL2e
// SIG // Gq4EQoO4tYCbIjggtSXlZOz39L9+Y1klD3ouOVd2onGq
// SIG // BooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7cQnfXXSY
// SIG // Ighh2rBQHm+98eEA3+cxB6STOvdlR3jo+KhIq/fecn5h
// SIG // a293qYHLpwmsObvsxsvYgrRyzR30uIUBHoD7G4kqVDmy
// SIG // W9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch98isTtoo
// SIG // uLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99je/WZ
// SIG // ii8bxyGvWbWu3EQ8l1Bx16HSxVXjad5XwdHeMMD9zOZN
// SIG // +w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzVs341Hgi6
// SIG // 2jbb01+P3nSISRKhggOtMIIClQIBATCB/qGB1KSB0TCB
// SIG // zjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWlj
// SIG // cm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAk
// SIG // BgNVBAsTHVRoYWxlcyBUU1MgRVNOOkY1MjgtMzc3Ny04
// SIG // QTc2MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNloiUKAQEwCQYFKw4DAhoFAAMVAEpczNJO
// SIG // r+lrEQJ6hpddUbl2tlTxoIHeMIHbpIHYMIHVMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQg
// SIG // T3BlcmF0aW9ucyBQdWVydG8gUmljbzEnMCUGA1UECxMe
// SIG // bkNpcGhlciBOVFMgRVNOOjRERTktMEM1RS0zRTA5MSsw
// SIG // KQYDVQQDEyJNaWNyb3NvZnQgVGltZSBTb3VyY2UgTWFz
// SIG // dGVyIENsb2NrMA0GCSqGSIb3DQEBBQUAAgUA4DDagzAi
// SIG // GA8yMDE5MDMxMTIxMDA1MVoYDzIwMTkwMzEyMjEwMDUx
// SIG // WjB0MDoGCisGAQQBhFkKBAExLDAqMAoCBQDgMNqDAgEA
// SIG // MAcCAQACAhM+MAcCAQACAhpWMAoCBQDgMiwDAgEAMDYG
// SIG // CisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwGgCjAI
// SIG // AgEAAgMW42ChCjAIAgEAAgMHoSAwDQYJKoZIhvcNAQEF
// SIG // BQADggEBAHtI8pCOqgqn2fwRm/RiNzZzDAE8xFBFk/HE
// SIG // 6kDsLtQS/cdfAeAWi/C0CMO4XD8hpYyz1RlsHKqO0xIQ
// SIG // QJWXAlf5ROPKB+PHgoc3M1Of8DXeD5KKsBw5Q15lkjVA
// SIG // KQ8Uww7drR82/YULsWZpyOZbjG3ZtpAj8n3hXyj5g/3Q
// SIG // tY1hbjC9xnpM43Q/BqNihVD+3/X5H4orF5keg8qbszD9
// SIG // L9IUizeaI9Bd+8skemaXsaGbzoQXsiDj5niDrzBcBLTV
// SIG // YSsm4yw/rx5fM4yeQ5jiMB1vDHFA3NwDFECycA35aCCb
// SIG // D8WZlfKmjreG9CWquicpkyXwbb9m7yXeyMjUtnXMFqIx
// SIG // ggL1MIIC8QIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQ
// SIG // Q0EgMjAxMAITMwAAANGYz+Q8mSVkhAAAAAAA0TANBglg
// SIG // hkgBZQMEAgEFAKCCATIwGgYJKoZIhvcNAQkDMQ0GCyqG
// SIG // SIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCBQ3wAyMW+6
// SIG // kYSFRkHNjAVWdHQe5aSBZkayoA57Kq929DCB4gYLKoZI
// SIG // hvcNAQkQAgwxgdIwgc8wgcwwgbEEFEpczNJOr+lrEQJ6
// SIG // hpddUbl2tlTxMIGYMIGApH4wfDELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgUENBIDIwMTACEzMAAADRmM/kPJklZIQAAAAAANEw
// SIG // FgQU+eXLCm8j8sF7RUMmZ0DRTvghZLIwDQYJKoZIhvcN
// SIG // AQELBQAEggEAIq/XOESJD0XIeKGrcitFAVWqK2mHrq6S
// SIG // QJi8CWC46rPHJVR2q4p2+m26G6kIqn5X1wpbMf8seN7m
// SIG // VWEbouJsMCHukm1ItfN02faHvKQjMdTmvDag2KvFovjc
// SIG // QxXejmksnaWQCAtca3IeM2UWSni/65YW8b1l/gDvLojs
// SIG // 61b6Oi1wvpMmoG+iXemu64Idk6b/c/tMN41aKSlk+map
// SIG // UozwsoOJVBnnbefDM5WGXW5+r0rZgx3xpEgvdLTkCk7q
// SIG // +Lr5dZtA7AgAyypqJ/N8C3plvi4BHv+M5iZlcDvA0wsl
// SIG // s7iN5ckLhRRHq01WgaeOu/16VqldKnLBEBofG+dEPxS2/g==
// SIG // End signature block
